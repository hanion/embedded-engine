
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000049d0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08004ae0  08004ae0  00005ae0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08004ce0  08004ce0  00006064  2**0
                  CONTENTS
  4 .ARM          00000000  08004ce0  08004ce0  00006064  2**0
                  CONTENTS
  5 .preinit_array 00000000  08004ce0  08004ce0  00006064  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08004ce0  08004ce0  00005ce0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08004ce4  08004ce4  00005ce4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000064  20000000  08004ce8  00006000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001a7c  20000068  08004d4c  00006068  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  20001ae4  08004d4c  00006ae4  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00006064  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b08a  00000000  00000000  0000608d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020b8  00000000  00000000  00011117  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d08  00000000  00000000  000131d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a15  00000000  00000000  00013ed8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00002a91  00000000  00000000  000148ed  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dfca  00000000  00000000  0001737e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd6e  00000000  00000000  00025348  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b20b6  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce0  00000000  00000000  000b20fc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b5ddc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000068 	.word	0x20000068
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ac8 	.word	0x08004ac8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	2000006c 	.word	0x2000006c
 800014c:	08004ac8 	.word	0x08004ac8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <on_event>:
#include "event.h"


static uint8_t is_button_held = 0;

void on_event() {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8000a50:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000a54:	480e      	ldr	r0, [pc, #56]	@ (8000a90 <on_event+0x44>)
 8000a56:	f001 fab1 	bl	8001fbc <HAL_GPIO_ReadPin>
 8000a5a:	4603      	mov	r3, r0
 8000a5c:	2b00      	cmp	r3, #0
 8000a5e:	d10c      	bne.n	8000a7a <on_event+0x2e>
		if (!is_button_held) {
 8000a60:	4b0c      	ldr	r3, [pc, #48]	@ (8000a94 <on_event+0x48>)
 8000a62:	781b      	ldrb	r3, [r3, #0]
 8000a64:	2b00      	cmp	r3, #0
 8000a66:	d105      	bne.n	8000a74 <on_event+0x28>
			is_button_held = 1;
 8000a68:	4b0a      	ldr	r3, [pc, #40]	@ (8000a94 <on_event+0x48>)
 8000a6a:	2201      	movs	r2, #1
 8000a6c:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8000a6e:	f000 fddb 	bl	8001628 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8000a72:	e00b      	b.n	8000a8c <on_event+0x40>
			on_button_held();
 8000a74:	f000 fdde 	bl	8001634 <on_button_held>
}
 8000a78:	e008      	b.n	8000a8c <on_event+0x40>
		if (is_button_held) {
 8000a7a:	4b06      	ldr	r3, [pc, #24]	@ (8000a94 <on_event+0x48>)
 8000a7c:	781b      	ldrb	r3, [r3, #0]
 8000a7e:	2b00      	cmp	r3, #0
 8000a80:	d004      	beq.n	8000a8c <on_event+0x40>
			is_button_held = 0;
 8000a82:	4b04      	ldr	r3, [pc, #16]	@ (8000a94 <on_event+0x48>)
 8000a84:	2200      	movs	r2, #0
 8000a86:	701a      	strb	r2, [r3, #0]
			on_button_released();
 8000a88:	f000 fdda 	bl	8001640 <on_button_released>
}
 8000a8c:	bf00      	nop
 8000a8e:	bd80      	pop	{r7, pc}
 8000a90:	40011000 	.word	0x40011000
 8000a94:	20000084 	.word	0x20000084

08000a98 <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8000a98:	b580      	push	{r7, lr}
 8000a9a:	b082      	sub	sp, #8
 8000a9c:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000a9e:	f000 fff1 	bl	8001a84 <HAL_GetTick>
 8000aa2:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8000aa4:	4b06      	ldr	r3, [pc, #24]	@ (8000ac0 <get_tick_delta_time+0x28>)
 8000aa6:	681b      	ldr	r3, [r3, #0]
 8000aa8:	687a      	ldr	r2, [r7, #4]
 8000aaa:	1ad3      	subs	r3, r2, r3
 8000aac:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 8000aae:	4a04      	ldr	r2, [pc, #16]	@ (8000ac0 <get_tick_delta_time+0x28>)
 8000ab0:	687b      	ldr	r3, [r7, #4]
 8000ab2:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8000ab4:	683b      	ldr	r3, [r7, #0]
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3708      	adds	r7, #8
 8000aba:	46bd      	mov	sp, r7
 8000abc:	bd80      	pop	{r7, pc}
 8000abe:	bf00      	nop
 8000ac0:	20000178 	.word	0x20000178

08000ac4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b084      	sub	sp, #16
 8000ac8:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000aca:	f000 ff83 	bl	80019d4 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000ace:	f000 f86f 	bl	8000bb0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000ad2:	f000 f9d1 	bl	8000e78 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000ad6:	f000 f8ad 	bl	8000c34 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000ada:	f000 f8e1 	bl	8000ca0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ade:	f000 f955 	bl	8000d8c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000ae2:	482a      	ldr	r0, [pc, #168]	@ (8000b8c <main+0xc8>)
 8000ae4:	f001 ff4c 	bl	8002980 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000ae8:	4829      	ldr	r0, [pc, #164]	@ (8000b90 <main+0xcc>)
 8000aea:	f001 ff49 	bl	8002980 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000aee:	2100      	movs	r1, #0
 8000af0:	4827      	ldr	r0, [pc, #156]	@ (8000b90 <main+0xcc>)
 8000af2:	f001 ffef 	bl	8002ad4 <HAL_TIM_PWM_Start>
	OE_H;
 8000af6:	2201      	movs	r2, #1
 8000af8:	2140      	movs	r1, #64	@ 0x40
 8000afa:	4826      	ldr	r0, [pc, #152]	@ (8000b94 <main+0xd0>)
 8000afc:	f001 fa75 	bl	8001fea <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 8000b00:	f000 fa9a 	bl	8001038 <clear_back_buffer>
	on_ready();
 8000b04:	f000 fc00 	bl	8001308 <on_ready>

#define UPDATE_INTERVAL_MS 40

	uint32_t debug_var = 0;
 8000b08:	2300      	movs	r3, #0
 8000b0a:	60bb      	str	r3, [r7, #8]

	uint32_t accumulator = 0;
 8000b0c:	2300      	movs	r3, #0
 8000b0e:	60fb      	str	r3, [r7, #12]
	while (1) {
		uint32_t delta = get_tick_delta_time();
 8000b10:	f7ff ffc2 	bl	8000a98 <get_tick_delta_time>
 8000b14:	6078      	str	r0, [r7, #4]

		accumulator += delta;
 8000b16:	68fa      	ldr	r2, [r7, #12]
 8000b18:	687b      	ldr	r3, [r7, #4]
 8000b1a:	4413      	add	r3, r2
 8000b1c:	60fb      	str	r3, [r7, #12]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 8000b1e:	68fb      	ldr	r3, [r7, #12]
 8000b20:	2b27      	cmp	r3, #39	@ 0x27
 8000b22:	d91a      	bls.n	8000b5a <main+0x96>
			if (is_back_buffer_new){
 8000b24:	4b1c      	ldr	r3, [pc, #112]	@ (8000b98 <main+0xd4>)
 8000b26:	781b      	ldrb	r3, [r3, #0]
 8000b28:	2b00      	cmp	r3, #0
 8000b2a:	d12c      	bne.n	8000b86 <main+0xc2>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 8000b2c:	68f8      	ldr	r0, [r7, #12]
 8000b2e:	f7ff fc51 	bl	80003d4 <__aeabi_ui2d>
 8000b32:	f04f 0200 	mov.w	r2, #0
 8000b36:	4b19      	ldr	r3, [pc, #100]	@ (8000b9c <main+0xd8>)
 8000b38:	f7ff fdf0 	bl	800071c <__aeabi_ddiv>
 8000b3c:	4602      	mov	r2, r0
 8000b3e:	460b      	mov	r3, r1
 8000b40:	4917      	ldr	r1, [pc, #92]	@ (8000ba0 <main+0xdc>)
 8000b42:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8000b46:	f7ff ff81 	bl	8000a4c <on_event>
			on_update();
 8000b4a:	f000 fbed 	bl	8001328 <on_update>
#if DEBUG_NUMBERS
			draw_number(accumulator, 0, HEIGHT-7, false);
			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
#endif

			accumulator -= UPDATE_INTERVAL_MS;
 8000b4e:	68fb      	ldr	r3, [r7, #12]
 8000b50:	3b28      	subs	r3, #40	@ 0x28
 8000b52:	60fb      	str	r3, [r7, #12]
			//accumulator = 0;
			is_back_buffer_new = true;
 8000b54:	4b10      	ldr	r3, [pc, #64]	@ (8000b98 <main+0xd4>)
 8000b56:	2201      	movs	r2, #1
 8000b58:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 8000b5a:	4b12      	ldr	r3, [pc, #72]	@ (8000ba4 <main+0xe0>)
 8000b5c:	781b      	ldrb	r3, [r3, #0]
 8000b5e:	2b00      	cmp	r3, #0
 8000b60:	d0d6      	beq.n	8000b10 <main+0x4c>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 8000b62:	f000 ff8f 	bl	8001a84 <HAL_GetTick>
 8000b66:	4602      	mov	r2, r0
 8000b68:	4b0f      	ldr	r3, [pc, #60]	@ (8000ba8 <main+0xe4>)
 8000b6a:	681b      	ldr	r3, [r3, #0]
 8000b6c:	1ad3      	subs	r3, r2, r3
 8000b6e:	2b14      	cmp	r3, #20
 8000b70:	d9ce      	bls.n	8000b10 <main+0x4c>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000b72:	2200      	movs	r2, #0
 8000b74:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000b78:	480c      	ldr	r0, [pc, #48]	@ (8000bac <main+0xe8>)
 8000b7a:	f001 fa36 	bl	8001fea <HAL_GPIO_WritePin>
				buzzer_request = false;
 8000b7e:	4b09      	ldr	r3, [pc, #36]	@ (8000ba4 <main+0xe0>)
 8000b80:	2200      	movs	r2, #0
 8000b82:	701a      	strb	r2, [r3, #0]
 8000b84:	e7c4      	b.n	8000b10 <main+0x4c>
				continue;
 8000b86:	bf00      	nop
	while (1) {
 8000b88:	e7c2      	b.n	8000b10 <main+0x4c>
 8000b8a:	bf00      	nop
 8000b8c:	200000e0 	.word	0x200000e0
 8000b90:	20000128 	.word	0x20000128
 8000b94:	40011000 	.word	0x40011000
 8000b98:	20001184 	.word	0x20001184
 8000b9c:	408f4000 	.word	0x408f4000
 8000ba0:	20000170 	.word	0x20000170
 8000ba4:	2000017c 	.word	0x2000017c
 8000ba8:	20000180 	.word	0x20000180
 8000bac:	40010800 	.word	0x40010800

08000bb0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000bb0:	b580      	push	{r7, lr}
 8000bb2:	b090      	sub	sp, #64	@ 0x40
 8000bb4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000bb6:	f107 0318 	add.w	r3, r7, #24
 8000bba:	2228      	movs	r2, #40	@ 0x28
 8000bbc:	2100      	movs	r1, #0
 8000bbe:	4618      	mov	r0, r3
 8000bc0:	f002 fecc 	bl	800395c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000bc4:	1d3b      	adds	r3, r7, #4
 8000bc6:	2200      	movs	r2, #0
 8000bc8:	601a      	str	r2, [r3, #0]
 8000bca:	605a      	str	r2, [r3, #4]
 8000bcc:	609a      	str	r2, [r3, #8]
 8000bce:	60da      	str	r2, [r3, #12]
 8000bd0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000bd2:	2302      	movs	r3, #2
 8000bd4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000bd6:	2301      	movs	r3, #1
 8000bd8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000bda:	2310      	movs	r3, #16
 8000bdc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000bde:	2302      	movs	r3, #2
 8000be0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000be2:	2300      	movs	r3, #0
 8000be4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000be6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000bea:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000bec:	f107 0318 	add.w	r3, r7, #24
 8000bf0:	4618      	mov	r0, r3
 8000bf2:	f001 fa13 	bl	800201c <HAL_RCC_OscConfig>
 8000bf6:	4603      	mov	r3, r0
 8000bf8:	2b00      	cmp	r3, #0
 8000bfa:	d001      	beq.n	8000c00 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000bfc:	f000 fa00 	bl	8001000 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000c00:	230f      	movs	r3, #15
 8000c02:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000c04:	2302      	movs	r3, #2
 8000c06:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000c08:	2300      	movs	r3, #0
 8000c0a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000c0c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000c10:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000c12:	2300      	movs	r3, #0
 8000c14:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000c16:	1d3b      	adds	r3, r7, #4
 8000c18:	2102      	movs	r1, #2
 8000c1a:	4618      	mov	r0, r3
 8000c1c:	f001 fc80 	bl	8002520 <HAL_RCC_ClockConfig>
 8000c20:	4603      	mov	r3, r0
 8000c22:	2b00      	cmp	r3, #0
 8000c24:	d001      	beq.n	8000c2a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000c26:	f000 f9eb 	bl	8001000 <Error_Handler>
  }
}
 8000c2a:	bf00      	nop
 8000c2c:	3740      	adds	r7, #64	@ 0x40
 8000c2e:	46bd      	mov	sp, r7
 8000c30:	bd80      	pop	{r7, pc}
	...

08000c34 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000c34:	b580      	push	{r7, lr}
 8000c36:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000c38:	4b17      	ldr	r3, [pc, #92]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c3a:	4a18      	ldr	r2, [pc, #96]	@ (8000c9c <MX_SPI1_Init+0x68>)
 8000c3c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000c3e:	4b16      	ldr	r3, [pc, #88]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c40:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000c44:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000c46:	4b14      	ldr	r3, [pc, #80]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c48:	2200      	movs	r2, #0
 8000c4a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000c4c:	4b12      	ldr	r3, [pc, #72]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c4e:	2200      	movs	r2, #0
 8000c50:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000c52:	4b11      	ldr	r3, [pc, #68]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c54:	2200      	movs	r2, #0
 8000c56:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000c58:	4b0f      	ldr	r3, [pc, #60]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c5a:	2200      	movs	r2, #0
 8000c5c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000c5e:	4b0e      	ldr	r3, [pc, #56]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c60:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000c64:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000c66:	4b0c      	ldr	r3, [pc, #48]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c68:	2210      	movs	r2, #16
 8000c6a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000c6c:	4b0a      	ldr	r3, [pc, #40]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c6e:	2200      	movs	r2, #0
 8000c70:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000c72:	4b09      	ldr	r3, [pc, #36]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c74:	2200      	movs	r2, #0
 8000c76:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000c78:	4b07      	ldr	r3, [pc, #28]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c7a:	2200      	movs	r2, #0
 8000c7c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000c7e:	4b06      	ldr	r3, [pc, #24]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c80:	220a      	movs	r2, #10
 8000c82:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000c84:	4804      	ldr	r0, [pc, #16]	@ (8000c98 <MX_SPI1_Init+0x64>)
 8000c86:	f001 fda7 	bl	80027d8 <HAL_SPI_Init>
 8000c8a:	4603      	mov	r3, r0
 8000c8c:	2b00      	cmp	r3, #0
 8000c8e:	d001      	beq.n	8000c94 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000c90:	f000 f9b6 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000c94:	bf00      	nop
 8000c96:	bd80      	pop	{r7, pc}
 8000c98:	20000088 	.word	0x20000088
 8000c9c:	40013000 	.word	0x40013000

08000ca0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ca0:	b580      	push	{r7, lr}
 8000ca2:	b08e      	sub	sp, #56	@ 0x38
 8000ca4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000ca6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000caa:	2200      	movs	r2, #0
 8000cac:	601a      	str	r2, [r3, #0]
 8000cae:	605a      	str	r2, [r3, #4]
 8000cb0:	609a      	str	r2, [r3, #8]
 8000cb2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000cb4:	f107 0320 	add.w	r3, r7, #32
 8000cb8:	2200      	movs	r2, #0
 8000cba:	601a      	str	r2, [r3, #0]
 8000cbc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000cbe:	1d3b      	adds	r3, r7, #4
 8000cc0:	2200      	movs	r2, #0
 8000cc2:	601a      	str	r2, [r3, #0]
 8000cc4:	605a      	str	r2, [r3, #4]
 8000cc6:	609a      	str	r2, [r3, #8]
 8000cc8:	60da      	str	r2, [r3, #12]
 8000cca:	611a      	str	r2, [r3, #16]
 8000ccc:	615a      	str	r2, [r3, #20]
 8000cce:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000cd0:	4b2d      	ldr	r3, [pc, #180]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000cd2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000cd6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000cd8:	4b2b      	ldr	r3, [pc, #172]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000cda:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000cde:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ce0:	4b29      	ldr	r3, [pc, #164]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8000ce6:	4b28      	ldr	r3, [pc, #160]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000ce8:	2205      	movs	r2, #5
 8000cea:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000cec:	4b26      	ldr	r3, [pc, #152]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000cf2:	4b25      	ldr	r3, [pc, #148]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000cf4:	2200      	movs	r2, #0
 8000cf6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000cf8:	4823      	ldr	r0, [pc, #140]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000cfa:	f001 fdf1 	bl	80028e0 <HAL_TIM_Base_Init>
 8000cfe:	4603      	mov	r3, r0
 8000d00:	2b00      	cmp	r3, #0
 8000d02:	d001      	beq.n	8000d08 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000d04:	f000 f97c 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000d08:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000d0c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000d0e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d12:	4619      	mov	r1, r3
 8000d14:	481c      	ldr	r0, [pc, #112]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000d16:	f002 f949 	bl	8002fac <HAL_TIM_ConfigClockSource>
 8000d1a:	4603      	mov	r3, r0
 8000d1c:	2b00      	cmp	r3, #0
 8000d1e:	d001      	beq.n	8000d24 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000d20:	f000 f96e 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000d24:	4818      	ldr	r0, [pc, #96]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000d26:	f001 fe7d 	bl	8002a24 <HAL_TIM_PWM_Init>
 8000d2a:	4603      	mov	r3, r0
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d001      	beq.n	8000d34 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000d30:	f000 f966 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000d34:	2300      	movs	r3, #0
 8000d36:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000d38:	2300      	movs	r3, #0
 8000d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000d3c:	f107 0320 	add.w	r3, r7, #32
 8000d40:	4619      	mov	r1, r3
 8000d42:	4811      	ldr	r0, [pc, #68]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000d44:	f002 fcca 	bl	80036dc <HAL_TIMEx_MasterConfigSynchronization>
 8000d48:	4603      	mov	r3, r0
 8000d4a:	2b00      	cmp	r3, #0
 8000d4c:	d001      	beq.n	8000d52 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000d4e:	f000 f957 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000d52:	2360      	movs	r3, #96	@ 0x60
 8000d54:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000d56:	2300      	movs	r3, #0
 8000d58:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000d5a:	2300      	movs	r3, #0
 8000d5c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000d62:	1d3b      	adds	r3, r7, #4
 8000d64:	2200      	movs	r2, #0
 8000d66:	4619      	mov	r1, r3
 8000d68:	4807      	ldr	r0, [pc, #28]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000d6a:	f002 f85d 	bl	8002e28 <HAL_TIM_PWM_ConfigChannel>
 8000d6e:	4603      	mov	r3, r0
 8000d70:	2b00      	cmp	r3, #0
 8000d72:	d001      	beq.n	8000d78 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000d74:	f000 f944 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000d78:	4803      	ldr	r0, [pc, #12]	@ (8000d88 <MX_TIM2_Init+0xe8>)
 8000d7a:	f000 fd0f 	bl	800179c <HAL_TIM_MspPostInit>

}
 8000d7e:	bf00      	nop
 8000d80:	3738      	adds	r7, #56	@ 0x38
 8000d82:	46bd      	mov	sp, r7
 8000d84:	bd80      	pop	{r7, pc}
 8000d86:	bf00      	nop
 8000d88:	200000e0 	.word	0x200000e0

08000d8c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	b08e      	sub	sp, #56	@ 0x38
 8000d90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000d92:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000d96:	2200      	movs	r2, #0
 8000d98:	601a      	str	r2, [r3, #0]
 8000d9a:	605a      	str	r2, [r3, #4]
 8000d9c:	609a      	str	r2, [r3, #8]
 8000d9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000da0:	f107 0320 	add.w	r3, r7, #32
 8000da4:	2200      	movs	r2, #0
 8000da6:	601a      	str	r2, [r3, #0]
 8000da8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000daa:	1d3b      	adds	r3, r7, #4
 8000dac:	2200      	movs	r2, #0
 8000dae:	601a      	str	r2, [r3, #0]
 8000db0:	605a      	str	r2, [r3, #4]
 8000db2:	609a      	str	r2, [r3, #8]
 8000db4:	60da      	str	r2, [r3, #12]
 8000db6:	611a      	str	r2, [r3, #16]
 8000db8:	615a      	str	r2, [r3, #20]
 8000dba:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000dbc:	4b2c      	ldr	r3, [pc, #176]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000dbe:	4a2d      	ldr	r2, [pc, #180]	@ (8000e74 <MX_TIM3_Init+0xe8>)
 8000dc0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000dc2:	4b2b      	ldr	r3, [pc, #172]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000dc4:	223f      	movs	r2, #63	@ 0x3f
 8000dc6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000dc8:	4b29      	ldr	r3, [pc, #164]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000dce:	4b28      	ldr	r3, [pc, #160]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000dd0:	2263      	movs	r2, #99	@ 0x63
 8000dd2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000dd4:	4b26      	ldr	r3, [pc, #152]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000dda:	4b25      	ldr	r3, [pc, #148]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000de0:	4823      	ldr	r0, [pc, #140]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000de2:	f001 fd7d 	bl	80028e0 <HAL_TIM_Base_Init>
 8000de6:	4603      	mov	r3, r0
 8000de8:	2b00      	cmp	r3, #0
 8000dea:	d001      	beq.n	8000df0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000dec:	f000 f908 	bl	8001000 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000df0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000df4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000df6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000dfa:	4619      	mov	r1, r3
 8000dfc:	481c      	ldr	r0, [pc, #112]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000dfe:	f002 f8d5 	bl	8002fac <HAL_TIM_ConfigClockSource>
 8000e02:	4603      	mov	r3, r0
 8000e04:	2b00      	cmp	r3, #0
 8000e06:	d001      	beq.n	8000e0c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000e08:	f000 f8fa 	bl	8001000 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000e0c:	4818      	ldr	r0, [pc, #96]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000e0e:	f001 fe09 	bl	8002a24 <HAL_TIM_PWM_Init>
 8000e12:	4603      	mov	r3, r0
 8000e14:	2b00      	cmp	r3, #0
 8000e16:	d001      	beq.n	8000e1c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000e18:	f000 f8f2 	bl	8001000 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000e1c:	2300      	movs	r3, #0
 8000e1e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000e20:	2300      	movs	r3, #0
 8000e22:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000e24:	f107 0320 	add.w	r3, r7, #32
 8000e28:	4619      	mov	r1, r3
 8000e2a:	4811      	ldr	r0, [pc, #68]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000e2c:	f002 fc56 	bl	80036dc <HAL_TIMEx_MasterConfigSynchronization>
 8000e30:	4603      	mov	r3, r0
 8000e32:	2b00      	cmp	r3, #0
 8000e34:	d001      	beq.n	8000e3a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000e36:	f000 f8e3 	bl	8001000 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000e3a:	2360      	movs	r3, #96	@ 0x60
 8000e3c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000e3e:	230a      	movs	r3, #10
 8000e40:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8000e42:	2302      	movs	r3, #2
 8000e44:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000e46:	2300      	movs	r3, #0
 8000e48:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000e4a:	1d3b      	adds	r3, r7, #4
 8000e4c:	2200      	movs	r2, #0
 8000e4e:	4619      	mov	r1, r3
 8000e50:	4807      	ldr	r0, [pc, #28]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000e52:	f001 ffe9 	bl	8002e28 <HAL_TIM_PWM_ConfigChannel>
 8000e56:	4603      	mov	r3, r0
 8000e58:	2b00      	cmp	r3, #0
 8000e5a:	d001      	beq.n	8000e60 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8000e5c:	f000 f8d0 	bl	8001000 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8000e60:	4803      	ldr	r0, [pc, #12]	@ (8000e70 <MX_TIM3_Init+0xe4>)
 8000e62:	f000 fc9b 	bl	800179c <HAL_TIM_MspPostInit>

}
 8000e66:	bf00      	nop
 8000e68:	3738      	adds	r7, #56	@ 0x38
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	20000128 	.word	0x20000128
 8000e74:	40000400 	.word	0x40000400

08000e78 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000e78:	b580      	push	{r7, lr}
 8000e7a:	b088      	sub	sp, #32
 8000e7c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000e7e:	f107 0310 	add.w	r3, r7, #16
 8000e82:	2200      	movs	r2, #0
 8000e84:	601a      	str	r2, [r3, #0]
 8000e86:	605a      	str	r2, [r3, #4]
 8000e88:	609a      	str	r2, [r3, #8]
 8000e8a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000e8c:	4b56      	ldr	r3, [pc, #344]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000e8e:	699b      	ldr	r3, [r3, #24]
 8000e90:	4a55      	ldr	r2, [pc, #340]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000e92:	f043 0310 	orr.w	r3, r3, #16
 8000e96:	6193      	str	r3, [r2, #24]
 8000e98:	4b53      	ldr	r3, [pc, #332]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000e9a:	699b      	ldr	r3, [r3, #24]
 8000e9c:	f003 0310 	and.w	r3, r3, #16
 8000ea0:	60fb      	str	r3, [r7, #12]
 8000ea2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ea4:	4b50      	ldr	r3, [pc, #320]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000ea6:	699b      	ldr	r3, [r3, #24]
 8000ea8:	4a4f      	ldr	r2, [pc, #316]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000eaa:	f043 0304 	orr.w	r3, r3, #4
 8000eae:	6193      	str	r3, [r2, #24]
 8000eb0:	4b4d      	ldr	r3, [pc, #308]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000eb2:	699b      	ldr	r3, [r3, #24]
 8000eb4:	f003 0304 	and.w	r3, r3, #4
 8000eb8:	60bb      	str	r3, [r7, #8]
 8000eba:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ebc:	4b4a      	ldr	r3, [pc, #296]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000ebe:	699b      	ldr	r3, [r3, #24]
 8000ec0:	4a49      	ldr	r2, [pc, #292]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000ec2:	f043 0308 	orr.w	r3, r3, #8
 8000ec6:	6193      	str	r3, [r2, #24]
 8000ec8:	4b47      	ldr	r3, [pc, #284]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000eca:	699b      	ldr	r3, [r3, #24]
 8000ecc:	f003 0308 	and.w	r3, r3, #8
 8000ed0:	607b      	str	r3, [r7, #4]
 8000ed2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000ed4:	4b44      	ldr	r3, [pc, #272]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000ed6:	699b      	ldr	r3, [r3, #24]
 8000ed8:	4a43      	ldr	r2, [pc, #268]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000eda:	f043 0320 	orr.w	r3, r3, #32
 8000ede:	6193      	str	r3, [r2, #24]
 8000ee0:	4b41      	ldr	r3, [pc, #260]	@ (8000fe8 <MX_GPIO_Init+0x170>)
 8000ee2:	699b      	ldr	r3, [r3, #24]
 8000ee4:	f003 0320 	and.w	r3, r3, #32
 8000ee8:	603b      	str	r3, [r7, #0]
 8000eea:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000eec:	2200      	movs	r2, #0
 8000eee:	f24e 0138 	movw	r1, #57400	@ 0xe038
 8000ef2:	483e      	ldr	r0, [pc, #248]	@ (8000fec <MX_GPIO_Init+0x174>)
 8000ef4:	f001 f879 	bl	8001fea <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8000ef8:	2200      	movs	r2, #0
 8000efa:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8000efe:	483c      	ldr	r0, [pc, #240]	@ (8000ff0 <MX_GPIO_Init+0x178>)
 8000f00:	f001 f873 	bl	8001fea <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8000f04:	2200      	movs	r2, #0
 8000f06:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000f0a:	483a      	ldr	r0, [pc, #232]	@ (8000ff4 <MX_GPIO_Init+0x17c>)
 8000f0c:	f001 f86d 	bl	8001fea <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000f10:	2200      	movs	r2, #0
 8000f12:	2104      	movs	r1, #4
 8000f14:	4838      	ldr	r0, [pc, #224]	@ (8000ff8 <MX_GPIO_Init+0x180>)
 8000f16:	f001 f868 	bl	8001fea <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000f1a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000f1e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000f20:	4b36      	ldr	r3, [pc, #216]	@ (8000ffc <MX_GPIO_Init+0x184>)
 8000f22:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f24:	2300      	movs	r3, #0
 8000f26:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f28:	f107 0310 	add.w	r3, r7, #16
 8000f2c:	4619      	mov	r1, r3
 8000f2e:	4830      	ldr	r0, [pc, #192]	@ (8000ff0 <MX_GPIO_Init+0x178>)
 8000f30:	f000 fec0 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000f34:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8000f38:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f3a:	2301      	movs	r3, #1
 8000f3c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f3e:	2300      	movs	r3, #0
 8000f40:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f42:	2302      	movs	r3, #2
 8000f44:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f46:	f107 0310 	add.w	r3, r7, #16
 8000f4a:	4619      	mov	r1, r3
 8000f4c:	4827      	ldr	r0, [pc, #156]	@ (8000fec <MX_GPIO_Init+0x174>)
 8000f4e:	f000 feb1 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8000f52:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8000f56:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f58:	2301      	movs	r3, #1
 8000f5a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f5c:	2300      	movs	r3, #0
 8000f5e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f60:	2302      	movs	r3, #2
 8000f62:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f64:	f107 0310 	add.w	r3, r7, #16
 8000f68:	4619      	mov	r1, r3
 8000f6a:	4821      	ldr	r0, [pc, #132]	@ (8000ff0 <MX_GPIO_Init+0x178>)
 8000f6c:	f000 fea2 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8000f70:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000f74:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000f76:	2301      	movs	r3, #1
 8000f78:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f7a:	2300      	movs	r3, #0
 8000f7c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000f7e:	2302      	movs	r3, #2
 8000f80:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000f82:	f107 0310 	add.w	r3, r7, #16
 8000f86:	4619      	mov	r1, r3
 8000f88:	481a      	ldr	r0, [pc, #104]	@ (8000ff4 <MX_GPIO_Init+0x17c>)
 8000f8a:	f000 fe93 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8000f8e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000f92:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000f94:	2300      	movs	r3, #0
 8000f96:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000f98:	2300      	movs	r3, #0
 8000f9a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000f9c:	f107 0310 	add.w	r3, r7, #16
 8000fa0:	4619      	mov	r1, r3
 8000fa2:	4813      	ldr	r0, [pc, #76]	@ (8000ff0 <MX_GPIO_Init+0x178>)
 8000fa4:	f000 fe86 	bl	8001cb4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000fa8:	2304      	movs	r3, #4
 8000faa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000fac:	2301      	movs	r3, #1
 8000fae:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000fb0:	2300      	movs	r3, #0
 8000fb2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000fb4:	2302      	movs	r3, #2
 8000fb6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000fb8:	f107 0310 	add.w	r3, r7, #16
 8000fbc:	4619      	mov	r1, r3
 8000fbe:	480e      	ldr	r0, [pc, #56]	@ (8000ff8 <MX_GPIO_Init+0x180>)
 8000fc0:	f000 fe78 	bl	8001cb4 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8000fc4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000fc8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000fca:	2300      	movs	r3, #0
 8000fcc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000fce:	2301      	movs	r3, #1
 8000fd0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	4619      	mov	r1, r3
 8000fd8:	4805      	ldr	r0, [pc, #20]	@ (8000ff0 <MX_GPIO_Init+0x178>)
 8000fda:	f000 fe6b 	bl	8001cb4 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8000fde:	bf00      	nop
 8000fe0:	3720      	adds	r7, #32
 8000fe2:	46bd      	mov	sp, r7
 8000fe4:	bd80      	pop	{r7, pc}
 8000fe6:	bf00      	nop
 8000fe8:	40021000 	.word	0x40021000
 8000fec:	40010c00 	.word	0x40010c00
 8000ff0:	40011000 	.word	0x40011000
 8000ff4:	40010800 	.word	0x40010800
 8000ff8:	40011400 	.word	0x40011400
 8000ffc:	10110000 	.word	0x10110000

08001000 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001000:	b480      	push	{r7}
 8001002:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001004:	b672      	cpsid	i
}
 8001006:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001008:	bf00      	nop
 800100a:	e7fd      	b.n	8001008 <Error_Handler+0x8>

0800100c <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 800100c:	b480      	push	{r7}
 800100e:	b083      	sub	sp, #12
 8001010:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 8001012:	4b07      	ldr	r3, [pc, #28]	@ (8001030 <swap_buffers+0x24>)
 8001014:	681b      	ldr	r3, [r3, #0]
 8001016:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 8001018:	4b06      	ldr	r3, [pc, #24]	@ (8001034 <swap_buffers+0x28>)
 800101a:	681b      	ldr	r3, [r3, #0]
 800101c:	4a04      	ldr	r2, [pc, #16]	@ (8001030 <swap_buffers+0x24>)
 800101e:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8001020:	4a04      	ldr	r2, [pc, #16]	@ (8001034 <swap_buffers+0x28>)
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	6013      	str	r3, [r2, #0]
}
 8001026:	bf00      	nop
 8001028:	370c      	adds	r7, #12
 800102a:	46bd      	mov	sp, r7
 800102c:	bc80      	pop	{r7}
 800102e:	4770      	bx	lr
 8001030:	20000000 	.word	0x20000000
 8001034:	20000004 	.word	0x20000004

08001038 <clear_back_buffer>:


void clear_back_buffer(void) {
 8001038:	b580      	push	{r7, lr}
 800103a:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 800103c:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <clear_back_buffer+0x18>)
 800103e:	681b      	ldr	r3, [r3, #0]
 8001040:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001044:	2100      	movs	r1, #0
 8001046:	4618      	mov	r0, r3
 8001048:	f002 fc88 	bl	800395c <memset>
}
 800104c:	bf00      	nop
 800104e:	bd80      	pop	{r7, pc}
 8001050:	20000004 	.word	0x20000004

08001054 <get_rgb>:
void set_pixel_w(int x, int y, uint8_t w) {
	set_pixel(x, y, w, w, w);
}


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8001054:	b480      	push	{r7}
 8001056:	b085      	sub	sp, #20
 8001058:	af00      	add	r7, sp, #0
 800105a:	60b9      	str	r1, [r7, #8]
 800105c:	607a      	str	r2, [r7, #4]
 800105e:	603b      	str	r3, [r7, #0]
 8001060:	4603      	mov	r3, r0
 8001062:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8001064:	7bfb      	ldrb	r3, [r7, #15]
 8001066:	089b      	lsrs	r3, r3, #2
 8001068:	b2db      	uxtb	r3, r3
 800106a:	f003 0301 	and.w	r3, r3, #1
 800106e:	b2da      	uxtb	r2, r3
 8001070:	68bb      	ldr	r3, [r7, #8]
 8001072:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8001074:	7bfb      	ldrb	r3, [r7, #15]
 8001076:	085b      	lsrs	r3, r3, #1
 8001078:	b2db      	uxtb	r3, r3
 800107a:	f003 0301 	and.w	r3, r3, #1
 800107e:	b2da      	uxtb	r2, r3
 8001080:	687b      	ldr	r3, [r7, #4]
 8001082:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8001084:	7bfb      	ldrb	r3, [r7, #15]
 8001086:	f003 0301 	and.w	r3, r3, #1
 800108a:	b2da      	uxtb	r2, r3
 800108c:	683b      	ldr	r3, [r7, #0]
 800108e:	701a      	strb	r2, [r3, #0]
}
 8001090:	bf00      	nop
 8001092:	3714      	adds	r7, #20
 8001094:	46bd      	mov	sp, r7
 8001096:	bc80      	pop	{r7}
 8001098:	4770      	bx	lr
	...

0800109c <render_row>:

uint8_t current_row = 0;
void render_row() {
 800109c:	b580      	push	{r7, lr}
 800109e:	b084      	sub	sp, #16
 80010a0:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80010a2:	2300      	movs	r3, #0
 80010a4:	73fb      	strb	r3, [r7, #15]
 80010a6:	e092      	b.n	80011ce <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 80010a8:	2301      	movs	r3, #1
 80010aa:	73bb      	strb	r3, [r7, #14]
 80010ac:	e087      	b.n	80011be <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 80010ae:	2300      	movs	r3, #0
 80010b0:	737b      	strb	r3, [r7, #13]
 80010b2:	e07c      	b.n	80011ae <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 80010b4:	7bfb      	ldrb	r3, [r7, #15]
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	b2da      	uxtb	r2, r3
 80010ba:	7b7b      	ldrb	r3, [r7, #13]
 80010bc:	4413      	add	r3, r2
 80010be:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 80010c0:	7bbb      	ldrb	r3, [r7, #14]
 80010c2:	00db      	lsls	r3, r3, #3
 80010c4:	b2da      	uxtb	r2, r3
 80010c6:	4b6f      	ldr	r3, [pc, #444]	@ (8001284 <render_row+0x1e8>)
 80010c8:	781b      	ldrb	r3, [r3, #0]
 80010ca:	4413      	add	r3, r2
 80010cc:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 80010ce:	4b6e      	ldr	r3, [pc, #440]	@ (8001288 <render_row+0x1ec>)
 80010d0:	6819      	ldr	r1, [r3, #0]
 80010d2:	7b3a      	ldrb	r2, [r7, #12]
 80010d4:	7afb      	ldrb	r3, [r7, #11]
 80010d6:	0152      	lsls	r2, r2, #5
 80010d8:	440a      	add	r2, r1
 80010da:	4413      	add	r3, r2
 80010dc:	781b      	ldrb	r3, [r3, #0]
 80010de:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 80010e0:	4b69      	ldr	r3, [pc, #420]	@ (8001288 <render_row+0x1ec>)
 80010e2:	6819      	ldr	r1, [r3, #0]
 80010e4:	7b3a      	ldrb	r2, [r7, #12]
 80010e6:	7afb      	ldrb	r3, [r7, #11]
 80010e8:	3310      	adds	r3, #16
 80010ea:	0152      	lsls	r2, r2, #5
 80010ec:	440a      	add	r2, r1
 80010ee:	4413      	add	r3, r2
 80010f0:	781b      	ldrb	r3, [r3, #0]
 80010f2:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 80010f4:	1dbb      	adds	r3, r7, #6
 80010f6:	1dfa      	adds	r2, r7, #7
 80010f8:	f107 0108 	add.w	r1, r7, #8
 80010fc:	7ab8      	ldrb	r0, [r7, #10]
 80010fe:	f7ff ffa9 	bl	8001054 <get_rgb>
				R1(r);
 8001102:	7a3b      	ldrb	r3, [r7, #8]
 8001104:	2b00      	cmp	r3, #0
 8001106:	d003      	beq.n	8001110 <render_row+0x74>
 8001108:	4b60      	ldr	r3, [pc, #384]	@ (800128c <render_row+0x1f0>)
 800110a:	2220      	movs	r2, #32
 800110c:	611a      	str	r2, [r3, #16]
 800110e:	e002      	b.n	8001116 <render_row+0x7a>
 8001110:	4b5e      	ldr	r3, [pc, #376]	@ (800128c <render_row+0x1f0>)
 8001112:	2220      	movs	r2, #32
 8001114:	615a      	str	r2, [r3, #20]
				G1(g);
 8001116:	79fb      	ldrb	r3, [r7, #7]
 8001118:	2b00      	cmp	r3, #0
 800111a:	d003      	beq.n	8001124 <render_row+0x88>
 800111c:	4b5b      	ldr	r3, [pc, #364]	@ (800128c <render_row+0x1f0>)
 800111e:	2208      	movs	r2, #8
 8001120:	611a      	str	r2, [r3, #16]
 8001122:	e002      	b.n	800112a <render_row+0x8e>
 8001124:	4b59      	ldr	r3, [pc, #356]	@ (800128c <render_row+0x1f0>)
 8001126:	2208      	movs	r2, #8
 8001128:	615a      	str	r2, [r3, #20]
				B1(b);
 800112a:	79bb      	ldrb	r3, [r7, #6]
 800112c:	2b00      	cmp	r3, #0
 800112e:	d004      	beq.n	800113a <render_row+0x9e>
 8001130:	4b57      	ldr	r3, [pc, #348]	@ (8001290 <render_row+0x1f4>)
 8001132:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001136:	611a      	str	r2, [r3, #16]
 8001138:	e003      	b.n	8001142 <render_row+0xa6>
 800113a:	4b55      	ldr	r3, [pc, #340]	@ (8001290 <render_row+0x1f4>)
 800113c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001140:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 8001142:	1dbb      	adds	r3, r7, #6
 8001144:	1dfa      	adds	r2, r7, #7
 8001146:	f107 0108 	add.w	r1, r7, #8
 800114a:	7a78      	ldrb	r0, [r7, #9]
 800114c:	f7ff ff82 	bl	8001054 <get_rgb>
				R2(r);
 8001150:	7a3b      	ldrb	r3, [r7, #8]
 8001152:	2b00      	cmp	r3, #0
 8001154:	d003      	beq.n	800115e <render_row+0xc2>
 8001156:	4b4d      	ldr	r3, [pc, #308]	@ (800128c <render_row+0x1f0>)
 8001158:	2210      	movs	r2, #16
 800115a:	611a      	str	r2, [r3, #16]
 800115c:	e002      	b.n	8001164 <render_row+0xc8>
 800115e:	4b4b      	ldr	r3, [pc, #300]	@ (800128c <render_row+0x1f0>)
 8001160:	2210      	movs	r2, #16
 8001162:	615a      	str	r2, [r3, #20]
				G2(g);
 8001164:	79fb      	ldrb	r3, [r7, #7]
 8001166:	2b00      	cmp	r3, #0
 8001168:	d003      	beq.n	8001172 <render_row+0xd6>
 800116a:	4b4a      	ldr	r3, [pc, #296]	@ (8001294 <render_row+0x1f8>)
 800116c:	2204      	movs	r2, #4
 800116e:	611a      	str	r2, [r3, #16]
 8001170:	e002      	b.n	8001178 <render_row+0xdc>
 8001172:	4b48      	ldr	r3, [pc, #288]	@ (8001294 <render_row+0x1f8>)
 8001174:	2204      	movs	r2, #4
 8001176:	615a      	str	r2, [r3, #20]
				B2(b);
 8001178:	79bb      	ldrb	r3, [r7, #6]
 800117a:	2b00      	cmp	r3, #0
 800117c:	d004      	beq.n	8001188 <render_row+0xec>
 800117e:	4b44      	ldr	r3, [pc, #272]	@ (8001290 <render_row+0x1f4>)
 8001180:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001184:	611a      	str	r2, [r3, #16]
 8001186:	e003      	b.n	8001190 <render_row+0xf4>
 8001188:	4b41      	ldr	r3, [pc, #260]	@ (8001290 <render_row+0x1f4>)
 800118a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800118e:	615a      	str	r2, [r3, #20]

				CLK_H;
 8001190:	2201      	movs	r2, #1
 8001192:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001196:	483d      	ldr	r0, [pc, #244]	@ (800128c <render_row+0x1f0>)
 8001198:	f000 ff27 	bl	8001fea <HAL_GPIO_WritePin>
				CLK_L;
 800119c:	2200      	movs	r2, #0
 800119e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80011a2:	483a      	ldr	r0, [pc, #232]	@ (800128c <render_row+0x1f0>)
 80011a4:	f000 ff21 	bl	8001fea <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 80011a8:	7b7b      	ldrb	r3, [r7, #13]
 80011aa:	3301      	adds	r3, #1
 80011ac:	737b      	strb	r3, [r7, #13]
 80011ae:	7b7b      	ldrb	r3, [r7, #13]
 80011b0:	2b03      	cmp	r3, #3
 80011b2:	f67f af7f 	bls.w	80010b4 <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 80011b6:	7bbb      	ldrb	r3, [r7, #14]
 80011b8:	3b01      	subs	r3, #1
 80011ba:	b2db      	uxtb	r3, r3
 80011bc:	73bb      	strb	r3, [r7, #14]
 80011be:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80011c2:	2b00      	cmp	r3, #0
 80011c4:	f6bf af73 	bge.w	80010ae <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80011c8:	7bfb      	ldrb	r3, [r7, #15]
 80011ca:	3301      	adds	r3, #1
 80011cc:	73fb      	strb	r3, [r7, #15]
 80011ce:	7bfb      	ldrb	r3, [r7, #15]
 80011d0:	2b0f      	cmp	r3, #15
 80011d2:	f67f af69 	bls.w	80010a8 <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 80011d6:	4b2e      	ldr	r3, [pc, #184]	@ (8001290 <render_row+0x1f4>)
 80011d8:	681b      	ldr	r3, [r3, #0]
 80011da:	4a2d      	ldr	r2, [pc, #180]	@ (8001290 <render_row+0x1f4>)
 80011dc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80011e0:	6013      	str	r3, [r2, #0]
	LAT_H;
 80011e2:	2201      	movs	r2, #1
 80011e4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011e8:	4828      	ldr	r0, [pc, #160]	@ (800128c <render_row+0x1f0>)
 80011ea:	f000 fefe 	bl	8001fea <HAL_GPIO_WritePin>
	LAT_L;
 80011ee:	2200      	movs	r2, #0
 80011f0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80011f4:	4825      	ldr	r0, [pc, #148]	@ (800128c <render_row+0x1f0>)
 80011f6:	f000 fef8 	bl	8001fea <HAL_GPIO_WritePin>
	ROW(current_row);
 80011fa:	4b22      	ldr	r3, [pc, #136]	@ (8001284 <render_row+0x1e8>)
 80011fc:	781b      	ldrb	r3, [r3, #0]
 80011fe:	f003 0301 	and.w	r3, r3, #1
 8001202:	2b00      	cmp	r3, #0
 8001204:	d004      	beq.n	8001210 <render_row+0x174>
 8001206:	4b24      	ldr	r3, [pc, #144]	@ (8001298 <render_row+0x1fc>)
 8001208:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800120c:	611a      	str	r2, [r3, #16]
 800120e:	e003      	b.n	8001218 <render_row+0x17c>
 8001210:	4b21      	ldr	r3, [pc, #132]	@ (8001298 <render_row+0x1fc>)
 8001212:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001216:	615a      	str	r2, [r3, #20]
 8001218:	4b1a      	ldr	r3, [pc, #104]	@ (8001284 <render_row+0x1e8>)
 800121a:	781b      	ldrb	r3, [r3, #0]
 800121c:	f003 0302 	and.w	r3, r3, #2
 8001220:	2b00      	cmp	r3, #0
 8001222:	d004      	beq.n	800122e <render_row+0x192>
 8001224:	4b1a      	ldr	r3, [pc, #104]	@ (8001290 <render_row+0x1f4>)
 8001226:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800122a:	611a      	str	r2, [r3, #16]
 800122c:	e003      	b.n	8001236 <render_row+0x19a>
 800122e:	4b18      	ldr	r3, [pc, #96]	@ (8001290 <render_row+0x1f4>)
 8001230:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001234:	615a      	str	r2, [r3, #20]
 8001236:	4b13      	ldr	r3, [pc, #76]	@ (8001284 <render_row+0x1e8>)
 8001238:	781b      	ldrb	r3, [r3, #0]
 800123a:	f003 0304 	and.w	r3, r3, #4
 800123e:	2b00      	cmp	r3, #0
 8001240:	d004      	beq.n	800124c <render_row+0x1b0>
 8001242:	4b13      	ldr	r3, [pc, #76]	@ (8001290 <render_row+0x1f4>)
 8001244:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001248:	611a      	str	r2, [r3, #16]
 800124a:	e003      	b.n	8001254 <render_row+0x1b8>
 800124c:	4b10      	ldr	r3, [pc, #64]	@ (8001290 <render_row+0x1f4>)
 800124e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001252:	615a      	str	r2, [r3, #20]
 8001254:	4b0b      	ldr	r3, [pc, #44]	@ (8001284 <render_row+0x1e8>)
 8001256:	781b      	ldrb	r3, [r3, #0]
 8001258:	f003 0308 	and.w	r3, r3, #8
 800125c:	2b00      	cmp	r3, #0
 800125e:	d003      	beq.n	8001268 <render_row+0x1cc>
 8001260:	4b0b      	ldr	r3, [pc, #44]	@ (8001290 <render_row+0x1f4>)
 8001262:	2280      	movs	r2, #128	@ 0x80
 8001264:	611a      	str	r2, [r3, #16]
 8001266:	e002      	b.n	800126e <render_row+0x1d2>
 8001268:	4b09      	ldr	r3, [pc, #36]	@ (8001290 <render_row+0x1f4>)
 800126a:	2280      	movs	r2, #128	@ 0x80
 800126c:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 800126e:	4b08      	ldr	r3, [pc, #32]	@ (8001290 <render_row+0x1f4>)
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	4a07      	ldr	r2, [pc, #28]	@ (8001290 <render_row+0x1f4>)
 8001274:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8001278:	6013      	str	r3, [r2, #0]
}
 800127a:	bf00      	nop
 800127c:	3710      	adds	r7, #16
 800127e:	46bd      	mov	sp, r7
 8001280:	bd80      	pop	{r7, pc}
 8001282:	bf00      	nop
 8001284:	20001185 	.word	0x20001185
 8001288:	20000000 	.word	0x20000000
 800128c:	40010c00 	.word	0x40010c00
 8001290:	40011000 	.word	0x40011000
 8001294:	40011400 	.word	0x40011400
 8001298:	40010800 	.word	0x40010800

0800129c <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
#define RENDER_INTERVAL_MS 10
uint32_t last_render_time = 0;

void render_buffer() {
 800129c:	b580      	push	{r7, lr}
 800129e:	b082      	sub	sp, #8
 80012a0:	af00      	add	r7, sp, #0
	if (current_row == 0) {
 80012a2:	4b16      	ldr	r3, [pc, #88]	@ (80012fc <render_buffer+0x60>)
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d10b      	bne.n	80012c2 <render_buffer+0x26>
		uint32_t tick = HAL_GetTick();
 80012aa:	f000 fbeb 	bl	8001a84 <HAL_GetTick>
 80012ae:	6078      	str	r0, [r7, #4]
		if (tick - last_render_time < RENDER_INTERVAL_MS) {
 80012b0:	4b13      	ldr	r3, [pc, #76]	@ (8001300 <render_buffer+0x64>)
 80012b2:	681b      	ldr	r3, [r3, #0]
 80012b4:	687a      	ldr	r2, [r7, #4]
 80012b6:	1ad3      	subs	r3, r2, r3
 80012b8:	2b09      	cmp	r3, #9
 80012ba:	d91b      	bls.n	80012f4 <render_buffer+0x58>
			return;
		} else {
			last_render_time = tick;
 80012bc:	4a10      	ldr	r2, [pc, #64]	@ (8001300 <render_buffer+0x64>)
 80012be:	687b      	ldr	r3, [r7, #4]
 80012c0:	6013      	str	r3, [r2, #0]
		}
	}


	render_row();
 80012c2:	f7ff feeb 	bl	800109c <render_row>

	if (++current_row == 8) {
 80012c6:	4b0d      	ldr	r3, [pc, #52]	@ (80012fc <render_buffer+0x60>)
 80012c8:	781b      	ldrb	r3, [r3, #0]
 80012ca:	3301      	adds	r3, #1
 80012cc:	b2da      	uxtb	r2, r3
 80012ce:	4b0b      	ldr	r3, [pc, #44]	@ (80012fc <render_buffer+0x60>)
 80012d0:	701a      	strb	r2, [r3, #0]
 80012d2:	4b0a      	ldr	r3, [pc, #40]	@ (80012fc <render_buffer+0x60>)
 80012d4:	781b      	ldrb	r3, [r3, #0]
 80012d6:	2b08      	cmp	r3, #8
 80012d8:	d10d      	bne.n	80012f6 <render_buffer+0x5a>
		current_row = 0;
 80012da:	4b08      	ldr	r3, [pc, #32]	@ (80012fc <render_buffer+0x60>)
 80012dc:	2200      	movs	r2, #0
 80012de:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 80012e0:	4b08      	ldr	r3, [pc, #32]	@ (8001304 <render_buffer+0x68>)
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d006      	beq.n	80012f6 <render_buffer+0x5a>
			swap_buffers();
 80012e8:	f7ff fe90 	bl	800100c <swap_buffers>
			is_back_buffer_new = false;
 80012ec:	4b05      	ldr	r3, [pc, #20]	@ (8001304 <render_buffer+0x68>)
 80012ee:	2200      	movs	r2, #0
 80012f0:	701a      	strb	r2, [r3, #0]
 80012f2:	e000      	b.n	80012f6 <render_buffer+0x5a>
			return;
 80012f4:	bf00      	nop
		}
	}
}
 80012f6:	3708      	adds	r7, #8
 80012f8:	46bd      	mov	sp, r7
 80012fa:	bd80      	pop	{r7, pc}
 80012fc:	20001185 	.word	0x20001185
 8001300:	20001188 	.word	0x20001188
 8001304:	20001184 	.word	0x20001184

08001308 <on_ready>:
#if rule110

uint8_t rbuffer[WIDTH][HEIGHT] = {0};
uint8_t rcurrent_row = 0;

void on_ready() {
 8001308:	b580      	push	{r7, lr}
 800130a:	af00      	add	r7, sp, #0
	memset(rbuffer, 0, sizeof(rbuffer));
 800130c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001310:	2100      	movs	r1, #0
 8001312:	4804      	ldr	r0, [pc, #16]	@ (8001324 <on_ready+0x1c>)
 8001314:	f002 fb22 	bl	800395c <memset>
	rbuffer[WIDTH-1][0] = 7;
 8001318:	4b02      	ldr	r3, [pc, #8]	@ (8001324 <on_ready+0x1c>)
 800131a:	2207      	movs	r2, #7
 800131c:	f883 27e0 	strb.w	r2, [r3, #2016]	@ 0x7e0
	//rbuffer[31][0] = 7;
}
 8001320:	bf00      	nop
 8001322:	bd80      	pop	{r7, pc}
 8001324:	2000118c 	.word	0x2000118c

08001328 <on_update>:
void on_update() {
 8001328:	b590      	push	{r4, r7, lr}
 800132a:	b095      	sub	sp, #84	@ 0x54
 800132c:	af00      	add	r7, sp, #0
	clear_back_buffer();
 800132e:	f7ff fe83 	bl	8001038 <clear_back_buffer>

	uint8_t new_row[WIDTH] = {0};
 8001332:	2300      	movs	r3, #0
 8001334:	607b      	str	r3, [r7, #4]
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	223c      	movs	r2, #60	@ 0x3c
 800133c:	2100      	movs	r1, #0
 800133e:	4618      	mov	r0, r3
 8001340:	f002 fb0c 	bl	800395c <memset>

	for (uint8_t i = 0; i < WIDTH; ++i) {
 8001344:	2300      	movs	r3, #0
 8001346:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 800134a:	e082      	b.n	8001452 <on_update+0x12a>
		uint8_t a = 0;
 800134c:	2300      	movs	r3, #0
 800134e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		uint8_t b = rbuffer[i][rcurrent_row];
 8001352:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001356:	4a81      	ldr	r2, [pc, #516]	@ (800155c <on_update+0x234>)
 8001358:	7812      	ldrb	r2, [r2, #0]
 800135a:	4611      	mov	r1, r2
 800135c:	4a80      	ldr	r2, [pc, #512]	@ (8001560 <on_update+0x238>)
 800135e:	015b      	lsls	r3, r3, #5
 8001360:	4413      	add	r3, r2
 8001362:	440b      	add	r3, r1
 8001364:	781b      	ldrb	r3, [r3, #0]
 8001366:	f887 3047 	strb.w	r3, [r7, #71]	@ 0x47
		uint8_t c = 0;
 800136a:	2300      	movs	r3, #0
 800136c:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d

		if (i > 0) {
 8001370:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001374:	2b00      	cmp	r3, #0
 8001376:	d00c      	beq.n	8001392 <on_update+0x6a>
			a = rbuffer[i-1][rcurrent_row];
 8001378:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800137c:	3b01      	subs	r3, #1
 800137e:	4a77      	ldr	r2, [pc, #476]	@ (800155c <on_update+0x234>)
 8001380:	7812      	ldrb	r2, [r2, #0]
 8001382:	4611      	mov	r1, r2
 8001384:	4a76      	ldr	r2, [pc, #472]	@ (8001560 <on_update+0x238>)
 8001386:	015b      	lsls	r3, r3, #5
 8001388:	4413      	add	r3, r2
 800138a:	440b      	add	r3, r1
 800138c:	781b      	ldrb	r3, [r3, #0]
 800138e:	f887 304e 	strb.w	r3, [r7, #78]	@ 0x4e
		}
		if (i+1 < WIDTH) {
 8001392:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001396:	2b3e      	cmp	r3, #62	@ 0x3e
 8001398:	d80c      	bhi.n	80013b4 <on_update+0x8c>
			c = rbuffer[i+1][rcurrent_row];
 800139a:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800139e:	3301      	adds	r3, #1
 80013a0:	4a6e      	ldr	r2, [pc, #440]	@ (800155c <on_update+0x234>)
 80013a2:	7812      	ldrb	r2, [r2, #0]
 80013a4:	4611      	mov	r1, r2
 80013a6:	4a6e      	ldr	r2, [pc, #440]	@ (8001560 <on_update+0x238>)
 80013a8:	015b      	lsls	r3, r3, #5
 80013aa:	4413      	add	r3, r2
 80013ac:	440b      	add	r3, r1
 80013ae:	781b      	ldrb	r3, [r3, #0]
 80013b0:	f887 304d 	strb.w	r3, [r7, #77]	@ 0x4d
		}

		uint8_t result = 0;
 80013b4:	2300      	movs	r3, #0
 80013b6:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c

		if (( a &&  b && !c )||
 80013ba:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d007      	beq.n	80013d2 <on_update+0xaa>
 80013c2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013c6:	2b00      	cmp	r3, #0
 80013c8:	d003      	beq.n	80013d2 <on_update+0xaa>
 80013ca:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d02f      	beq.n	8001432 <on_update+0x10a>
 80013d2:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d007      	beq.n	80013ea <on_update+0xc2>
			( a && !b &&  c )||
 80013da:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d103      	bne.n	80013ea <on_update+0xc2>
 80013e2:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d123      	bne.n	8001432 <on_update+0x10a>
 80013ea:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 80013ee:	2b00      	cmp	r3, #0
 80013f0:	d107      	bne.n	8001402 <on_update+0xda>
			(!a &&  b &&  c )||
 80013f2:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d003      	beq.n	8001402 <on_update+0xda>
 80013fa:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d117      	bne.n	8001432 <on_update+0x10a>
 8001402:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 8001406:	2b00      	cmp	r3, #0
 8001408:	d107      	bne.n	800141a <on_update+0xf2>
			(!a &&  b && !c )||
 800140a:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 800140e:	2b00      	cmp	r3, #0
 8001410:	d003      	beq.n	800141a <on_update+0xf2>
 8001412:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 8001416:	2b00      	cmp	r3, #0
 8001418:	d00b      	beq.n	8001432 <on_update+0x10a>
 800141a:	f897 304e 	ldrb.w	r3, [r7, #78]	@ 0x4e
 800141e:	2b00      	cmp	r3, #0
 8001420:	d10a      	bne.n	8001438 <on_update+0x110>
			(!a && !b &&  c )
 8001422:	f897 3047 	ldrb.w	r3, [r7, #71]	@ 0x47
 8001426:	2b00      	cmp	r3, #0
 8001428:	d106      	bne.n	8001438 <on_update+0x110>
 800142a:	f897 304d 	ldrb.w	r3, [r7, #77]	@ 0x4d
 800142e:	2b00      	cmp	r3, #0
 8001430:	d002      	beq.n	8001438 <on_update+0x110>
			) {
			result = 7;
 8001432:	2307      	movs	r3, #7
 8001434:	f887 304c 	strb.w	r3, [r7, #76]	@ 0x4c
		}

		new_row[i] = result;
 8001438:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800143c:	3350      	adds	r3, #80	@ 0x50
 800143e:	443b      	add	r3, r7
 8001440:	f897 204c 	ldrb.w	r2, [r7, #76]	@ 0x4c
 8001444:	f803 2c4c 	strb.w	r2, [r3, #-76]
	for (uint8_t i = 0; i < WIDTH; ++i) {
 8001448:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 800144c:	3301      	adds	r3, #1
 800144e:	f887 304f 	strb.w	r3, [r7, #79]	@ 0x4f
 8001452:	f897 304f 	ldrb.w	r3, [r7, #79]	@ 0x4f
 8001456:	2b3f      	cmp	r3, #63	@ 0x3f
 8001458:	f67f af78 	bls.w	800134c <on_update+0x24>
	}

	// push new_row to rbuffer
	if (rcurrent_row < HEIGHT-1) {
 800145c:	4b3f      	ldr	r3, [pc, #252]	@ (800155c <on_update+0x234>)
 800145e:	781b      	ldrb	r3, [r3, #0]
 8001460:	2b1e      	cmp	r3, #30
 8001462:	d824      	bhi.n	80014ae <on_update+0x186>
		rcurrent_row++;
 8001464:	4b3d      	ldr	r3, [pc, #244]	@ (800155c <on_update+0x234>)
 8001466:	781b      	ldrb	r3, [r3, #0]
 8001468:	3301      	adds	r3, #1
 800146a:	b2da      	uxtb	r2, r3
 800146c:	4b3b      	ldr	r3, [pc, #236]	@ (800155c <on_update+0x234>)
 800146e:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < WIDTH; ++i) {
 8001470:	2300      	movs	r3, #0
 8001472:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 8001476:	e015      	b.n	80014a4 <on_update+0x17c>
			rbuffer[i][rcurrent_row] = new_row[i];
 8001478:	f897 204b 	ldrb.w	r2, [r7, #75]	@ 0x4b
 800147c:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 8001480:	4936      	ldr	r1, [pc, #216]	@ (800155c <on_update+0x234>)
 8001482:	7809      	ldrb	r1, [r1, #0]
 8001484:	4608      	mov	r0, r1
 8001486:	3250      	adds	r2, #80	@ 0x50
 8001488:	443a      	add	r2, r7
 800148a:	f812 1c4c 	ldrb.w	r1, [r2, #-76]
 800148e:	4a34      	ldr	r2, [pc, #208]	@ (8001560 <on_update+0x238>)
 8001490:	015b      	lsls	r3, r3, #5
 8001492:	4413      	add	r3, r2
 8001494:	4403      	add	r3, r0
 8001496:	460a      	mov	r2, r1
 8001498:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < WIDTH; ++i) {
 800149a:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 800149e:	3301      	adds	r3, #1
 80014a0:	f887 304b 	strb.w	r3, [r7, #75]	@ 0x4b
 80014a4:	f897 304b 	ldrb.w	r3, [r7, #75]	@ 0x4b
 80014a8:	2b3f      	cmp	r3, #63	@ 0x3f
 80014aa:	d9e5      	bls.n	8001478 <on_update+0x150>
 80014ac:	e048      	b.n	8001540 <on_update+0x218>
		}
	}
	else {
		// scroll buffer up
		for (uint8_t x = 0; x < WIDTH; ++x) {
 80014ae:	2300      	movs	r3, #0
 80014b0:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 80014b4:	e025      	b.n	8001502 <on_update+0x1da>
			for (uint8_t y = 0; y < (HEIGHT-1); ++y) {
 80014b6:	2300      	movs	r3, #0
 80014b8:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80014bc:	e018      	b.n	80014f0 <on_update+0x1c8>
				rbuffer[x][y] = rbuffer[x][y+1];
 80014be:	f897 004a 	ldrb.w	r0, [r7, #74]	@ 0x4a
 80014c2:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014c6:	1c59      	adds	r1, r3, #1
 80014c8:	f897 204a 	ldrb.w	r2, [r7, #74]	@ 0x4a
 80014cc:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014d0:	4c23      	ldr	r4, [pc, #140]	@ (8001560 <on_update+0x238>)
 80014d2:	0140      	lsls	r0, r0, #5
 80014d4:	4420      	add	r0, r4
 80014d6:	4401      	add	r1, r0
 80014d8:	7808      	ldrb	r0, [r1, #0]
 80014da:	4921      	ldr	r1, [pc, #132]	@ (8001560 <on_update+0x238>)
 80014dc:	0152      	lsls	r2, r2, #5
 80014de:	440a      	add	r2, r1
 80014e0:	4413      	add	r3, r2
 80014e2:	4602      	mov	r2, r0
 80014e4:	701a      	strb	r2, [r3, #0]
			for (uint8_t y = 0; y < (HEIGHT-1); ++y) {
 80014e6:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014ea:	3301      	adds	r3, #1
 80014ec:	f887 3049 	strb.w	r3, [r7, #73]	@ 0x49
 80014f0:	f897 3049 	ldrb.w	r3, [r7, #73]	@ 0x49
 80014f4:	2b1e      	cmp	r3, #30
 80014f6:	d9e2      	bls.n	80014be <on_update+0x196>
		for (uint8_t x = 0; x < WIDTH; ++x) {
 80014f8:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 80014fc:	3301      	adds	r3, #1
 80014fe:	f887 304a 	strb.w	r3, [r7, #74]	@ 0x4a
 8001502:	f897 304a 	ldrb.w	r3, [r7, #74]	@ 0x4a
 8001506:	2b3f      	cmp	r3, #63	@ 0x3f
 8001508:	d9d5      	bls.n	80014b6 <on_update+0x18e>
			}
		}
		for (uint8_t i = 0; i < WIDTH; ++i) {
 800150a:	2300      	movs	r3, #0
 800150c:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8001510:	e012      	b.n	8001538 <on_update+0x210>
			rbuffer[i][HEIGHT-1] = new_row[i];
 8001512:	f897 2048 	ldrb.w	r2, [r7, #72]	@ 0x48
 8001516:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800151a:	3250      	adds	r2, #80	@ 0x50
 800151c:	443a      	add	r2, r7
 800151e:	f812 1c4c 	ldrb.w	r1, [r2, #-76]
 8001522:	4a0f      	ldr	r2, [pc, #60]	@ (8001560 <on_update+0x238>)
 8001524:	015b      	lsls	r3, r3, #5
 8001526:	4413      	add	r3, r2
 8001528:	331f      	adds	r3, #31
 800152a:	460a      	mov	r2, r1
 800152c:	701a      	strb	r2, [r3, #0]
		for (uint8_t i = 0; i < WIDTH; ++i) {
 800152e:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 8001532:	3301      	adds	r3, #1
 8001534:	f887 3048 	strb.w	r3, [r7, #72]	@ 0x48
 8001538:	f897 3048 	ldrb.w	r3, [r7, #72]	@ 0x48
 800153c:	2b3f      	cmp	r3, #63	@ 0x3f
 800153e:	d9e8      	bls.n	8001512 <on_update+0x1ea>
		}
	}


	static_assert(sizeof((*back_buffer)) == sizeof(rbuffer));
	memcpy((*back_buffer), rbuffer, sizeof(rbuffer));
 8001540:	4b08      	ldr	r3, [pc, #32]	@ (8001564 <on_update+0x23c>)
 8001542:	681b      	ldr	r3, [r3, #0]
 8001544:	4a06      	ldr	r2, [pc, #24]	@ (8001560 <on_update+0x238>)
 8001546:	4618      	mov	r0, r3
 8001548:	4611      	mov	r1, r2
 800154a:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 800154e:	461a      	mov	r2, r3
 8001550:	f002 fa48 	bl	80039e4 <memcpy>
}
 8001554:	bf00      	nop
 8001556:	3754      	adds	r7, #84	@ 0x54
 8001558:	46bd      	mov	sp, r7
 800155a:	bd90      	pop	{r4, r7, pc}
 800155c:	2000198c 	.word	0x2000198c
 8001560:	2000118c 	.word	0x2000118c
 8001564:	20000004 	.word	0x20000004

08001568 <create_performance_impact>:



void create_performance_impact() {
 8001568:	b5f0      	push	{r4, r5, r6, r7, lr}
 800156a:	b085      	sub	sp, #20
 800156c:	af00      	add	r7, sp, #0
#define ARRAY_SIZE 100
#define NUM_ITERATIONS 10
	double *data = (double *)malloc(ARRAY_SIZE * sizeof(double));
 800156e:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8001572:	f002 f935 	bl	80037e0 <malloc>
 8001576:	4603      	mov	r3, r0
 8001578:	603b      	str	r3, [r7, #0]
	if (data == NULL) {
 800157a:	683b      	ldr	r3, [r7, #0]
 800157c:	2b00      	cmp	r3, #0
 800157e:	d102      	bne.n	8001586 <create_performance_impact+0x1e>
		exit(EXIT_FAILURE);
 8001580:	2001      	movs	r0, #1
 8001582:	f002 f91b 	bl	80037bc <exit>
	}

	for (int i = 0; i < ARRAY_SIZE; ++i) {
 8001586:	2300      	movs	r3, #0
 8001588:	60fb      	str	r3, [r7, #12]
 800158a:	e00b      	b.n	80015a4 <create_performance_impact+0x3c>
		data[i] = 1.0;
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	00db      	lsls	r3, r3, #3
 8001590:	683a      	ldr	r2, [r7, #0]
 8001592:	18d1      	adds	r1, r2, r3
 8001594:	f04f 0200 	mov.w	r2, #0
 8001598:	4b22      	ldr	r3, [pc, #136]	@ (8001624 <create_performance_impact+0xbc>)
 800159a:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < ARRAY_SIZE; ++i) {
 800159e:	68fb      	ldr	r3, [r7, #12]
 80015a0:	3301      	adds	r3, #1
 80015a2:	60fb      	str	r3, [r7, #12]
 80015a4:	68fb      	ldr	r3, [r7, #12]
 80015a6:	2b63      	cmp	r3, #99	@ 0x63
 80015a8:	ddf0      	ble.n	800158c <create_performance_impact+0x24>
	}
	for (int i = 0; i < NUM_ITERATIONS; ++i) {
 80015aa:	2300      	movs	r3, #0
 80015ac:	60bb      	str	r3, [r7, #8]
 80015ae:	e02f      	b.n	8001610 <create_performance_impact+0xa8>
		for (int j = 0; j < ARRAY_SIZE; ++j) {
 80015b0:	2300      	movs	r3, #0
 80015b2:	607b      	str	r3, [r7, #4]
 80015b4:	e026      	b.n	8001604 <create_performance_impact+0x9c>
			data[j] = sin(data[j]) * cos(data[j]);
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	00db      	lsls	r3, r3, #3
 80015ba:	683a      	ldr	r2, [r7, #0]
 80015bc:	4413      	add	r3, r2
 80015be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015c2:	4610      	mov	r0, r2
 80015c4:	4619      	mov	r1, r3
 80015c6:	f002 faa9 	bl	8003b1c <sin>
 80015ca:	4604      	mov	r4, r0
 80015cc:	460d      	mov	r5, r1
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	00db      	lsls	r3, r3, #3
 80015d2:	683a      	ldr	r2, [r7, #0]
 80015d4:	4413      	add	r3, r2
 80015d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80015da:	4610      	mov	r0, r2
 80015dc:	4619      	mov	r1, r3
 80015de:	f002 fa57 	bl	8003a90 <cos>
 80015e2:	4602      	mov	r2, r0
 80015e4:	460b      	mov	r3, r1
 80015e6:	6879      	ldr	r1, [r7, #4]
 80015e8:	00c9      	lsls	r1, r1, #3
 80015ea:	6838      	ldr	r0, [r7, #0]
 80015ec:	1846      	adds	r6, r0, r1
 80015ee:	4620      	mov	r0, r4
 80015f0:	4629      	mov	r1, r5
 80015f2:	f7fe ff69 	bl	80004c8 <__aeabi_dmul>
 80015f6:	4602      	mov	r2, r0
 80015f8:	460b      	mov	r3, r1
 80015fa:	e9c6 2300 	strd	r2, r3, [r6]
		for (int j = 0; j < ARRAY_SIZE; ++j) {
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	3301      	adds	r3, #1
 8001602:	607b      	str	r3, [r7, #4]
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	2b63      	cmp	r3, #99	@ 0x63
 8001608:	ddd5      	ble.n	80015b6 <create_performance_impact+0x4e>
	for (int i = 0; i < NUM_ITERATIONS; ++i) {
 800160a:	68bb      	ldr	r3, [r7, #8]
 800160c:	3301      	adds	r3, #1
 800160e:	60bb      	str	r3, [r7, #8]
 8001610:	68bb      	ldr	r3, [r7, #8]
 8001612:	2b09      	cmp	r3, #9
 8001614:	ddcc      	ble.n	80015b0 <create_performance_impact+0x48>
		}
	}
	free(data);
 8001616:	6838      	ldr	r0, [r7, #0]
 8001618:	f002 f8ea 	bl	80037f0 <free>
}
 800161c:	bf00      	nop
 800161e:	3714      	adds	r7, #20
 8001620:	46bd      	mov	sp, r7
 8001622:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001624:	3ff00000 	.word	0x3ff00000

08001628 <on_button_pressed>:

void on_button_pressed() {
 8001628:	b580      	push	{r7, lr}
 800162a:	af00      	add	r7, sp, #0
	create_performance_impact();
 800162c:	f7ff ff9c 	bl	8001568 <create_performance_impact>
}
 8001630:	bf00      	nop
 8001632:	bd80      	pop	{r7, pc}

08001634 <on_button_held>:
void on_button_held() {
 8001634:	b480      	push	{r7}
 8001636:	af00      	add	r7, sp, #0
}
 8001638:	bf00      	nop
 800163a:	46bd      	mov	sp, r7
 800163c:	bc80      	pop	{r7}
 800163e:	4770      	bx	lr

08001640 <on_button_released>:
void on_button_released() {
 8001640:	b480      	push	{r7}
 8001642:	af00      	add	r7, sp, #0
}
 8001644:	bf00      	nop
 8001646:	46bd      	mov	sp, r7
 8001648:	bc80      	pop	{r7}
 800164a:	4770      	bx	lr

0800164c <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800164c:	b480      	push	{r7}
 800164e:	b085      	sub	sp, #20
 8001650:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001652:	4b15      	ldr	r3, [pc, #84]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001654:	699b      	ldr	r3, [r3, #24]
 8001656:	4a14      	ldr	r2, [pc, #80]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001658:	f043 0301 	orr.w	r3, r3, #1
 800165c:	6193      	str	r3, [r2, #24]
 800165e:	4b12      	ldr	r3, [pc, #72]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001660:	699b      	ldr	r3, [r3, #24]
 8001662:	f003 0301 	and.w	r3, r3, #1
 8001666:	60bb      	str	r3, [r7, #8]
 8001668:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800166a:	4b0f      	ldr	r3, [pc, #60]	@ (80016a8 <HAL_MspInit+0x5c>)
 800166c:	69db      	ldr	r3, [r3, #28]
 800166e:	4a0e      	ldr	r2, [pc, #56]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001670:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001674:	61d3      	str	r3, [r2, #28]
 8001676:	4b0c      	ldr	r3, [pc, #48]	@ (80016a8 <HAL_MspInit+0x5c>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800167e:	607b      	str	r3, [r7, #4]
 8001680:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001682:	4b0a      	ldr	r3, [pc, #40]	@ (80016ac <HAL_MspInit+0x60>)
 8001684:	685b      	ldr	r3, [r3, #4]
 8001686:	60fb      	str	r3, [r7, #12]
 8001688:	68fb      	ldr	r3, [r7, #12]
 800168a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 800168e:	60fb      	str	r3, [r7, #12]
 8001690:	68fb      	ldr	r3, [r7, #12]
 8001692:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001696:	60fb      	str	r3, [r7, #12]
 8001698:	4a04      	ldr	r2, [pc, #16]	@ (80016ac <HAL_MspInit+0x60>)
 800169a:	68fb      	ldr	r3, [r7, #12]
 800169c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800169e:	bf00      	nop
 80016a0:	3714      	adds	r7, #20
 80016a2:	46bd      	mov	sp, r7
 80016a4:	bc80      	pop	{r7}
 80016a6:	4770      	bx	lr
 80016a8:	40021000 	.word	0x40021000
 80016ac:	40010000 	.word	0x40010000

080016b0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80016b0:	b580      	push	{r7, lr}
 80016b2:	b088      	sub	sp, #32
 80016b4:	af00      	add	r7, sp, #0
 80016b6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016b8:	f107 0310 	add.w	r3, r7, #16
 80016bc:	2200      	movs	r2, #0
 80016be:	601a      	str	r2, [r3, #0]
 80016c0:	605a      	str	r2, [r3, #4]
 80016c2:	609a      	str	r2, [r3, #8]
 80016c4:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80016c6:	687b      	ldr	r3, [r7, #4]
 80016c8:	681b      	ldr	r3, [r3, #0]
 80016ca:	4a15      	ldr	r2, [pc, #84]	@ (8001720 <HAL_SPI_MspInit+0x70>)
 80016cc:	4293      	cmp	r3, r2
 80016ce:	d123      	bne.n	8001718 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016d0:	4b14      	ldr	r3, [pc, #80]	@ (8001724 <HAL_SPI_MspInit+0x74>)
 80016d2:	699b      	ldr	r3, [r3, #24]
 80016d4:	4a13      	ldr	r2, [pc, #76]	@ (8001724 <HAL_SPI_MspInit+0x74>)
 80016d6:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80016da:	6193      	str	r3, [r2, #24]
 80016dc:	4b11      	ldr	r3, [pc, #68]	@ (8001724 <HAL_SPI_MspInit+0x74>)
 80016de:	699b      	ldr	r3, [r3, #24]
 80016e0:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80016e4:	60fb      	str	r3, [r7, #12]
 80016e6:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016e8:	4b0e      	ldr	r3, [pc, #56]	@ (8001724 <HAL_SPI_MspInit+0x74>)
 80016ea:	699b      	ldr	r3, [r3, #24]
 80016ec:	4a0d      	ldr	r2, [pc, #52]	@ (8001724 <HAL_SPI_MspInit+0x74>)
 80016ee:	f043 0304 	orr.w	r3, r3, #4
 80016f2:	6193      	str	r3, [r2, #24]
 80016f4:	4b0b      	ldr	r3, [pc, #44]	@ (8001724 <HAL_SPI_MspInit+0x74>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	f003 0304 	and.w	r3, r3, #4
 80016fc:	60bb      	str	r3, [r7, #8]
 80016fe:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001700:	23a0      	movs	r3, #160	@ 0xa0
 8001702:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001704:	2302      	movs	r3, #2
 8001706:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001708:	2303      	movs	r3, #3
 800170a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800170c:	f107 0310 	add.w	r3, r7, #16
 8001710:	4619      	mov	r1, r3
 8001712:	4805      	ldr	r0, [pc, #20]	@ (8001728 <HAL_SPI_MspInit+0x78>)
 8001714:	f000 face 	bl	8001cb4 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001718:	bf00      	nop
 800171a:	3720      	adds	r7, #32
 800171c:	46bd      	mov	sp, r7
 800171e:	bd80      	pop	{r7, pc}
 8001720:	40013000 	.word	0x40013000
 8001724:	40021000 	.word	0x40021000
 8001728:	40010800 	.word	0x40010800

0800172c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b084      	sub	sp, #16
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001734:	687b      	ldr	r3, [r7, #4]
 8001736:	681b      	ldr	r3, [r3, #0]
 8001738:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800173c:	d114      	bne.n	8001768 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800173e:	4b15      	ldr	r3, [pc, #84]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001740:	69db      	ldr	r3, [r3, #28]
 8001742:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001744:	f043 0301 	orr.w	r3, r3, #1
 8001748:	61d3      	str	r3, [r2, #28]
 800174a:	4b12      	ldr	r3, [pc, #72]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 800174c:	69db      	ldr	r3, [r3, #28]
 800174e:	f003 0301 	and.w	r3, r3, #1
 8001752:	60fb      	str	r3, [r7, #12]
 8001754:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001756:	2200      	movs	r2, #0
 8001758:	2100      	movs	r1, #0
 800175a:	201c      	movs	r0, #28
 800175c:	f000 fa73 	bl	8001c46 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001760:	201c      	movs	r0, #28
 8001762:	f000 fa8c 	bl	8001c7e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001766:	e010      	b.n	800178a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4a0a      	ldr	r2, [pc, #40]	@ (8001798 <HAL_TIM_Base_MspInit+0x6c>)
 800176e:	4293      	cmp	r3, r2
 8001770:	d10b      	bne.n	800178a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001772:	4b08      	ldr	r3, [pc, #32]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001774:	69db      	ldr	r3, [r3, #28]
 8001776:	4a07      	ldr	r2, [pc, #28]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001778:	f043 0302 	orr.w	r3, r3, #2
 800177c:	61d3      	str	r3, [r2, #28]
 800177e:	4b05      	ldr	r3, [pc, #20]	@ (8001794 <HAL_TIM_Base_MspInit+0x68>)
 8001780:	69db      	ldr	r3, [r3, #28]
 8001782:	f003 0302 	and.w	r3, r3, #2
 8001786:	60bb      	str	r3, [r7, #8]
 8001788:	68bb      	ldr	r3, [r7, #8]
}
 800178a:	bf00      	nop
 800178c:	3710      	adds	r7, #16
 800178e:	46bd      	mov	sp, r7
 8001790:	bd80      	pop	{r7, pc}
 8001792:	bf00      	nop
 8001794:	40021000 	.word	0x40021000
 8001798:	40000400 	.word	0x40000400

0800179c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 800179c:	b580      	push	{r7, lr}
 800179e:	b08a      	sub	sp, #40	@ 0x28
 80017a0:	af00      	add	r7, sp, #0
 80017a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80017a4:	f107 0314 	add.w	r3, r7, #20
 80017a8:	2200      	movs	r2, #0
 80017aa:	601a      	str	r2, [r3, #0]
 80017ac:	605a      	str	r2, [r3, #4]
 80017ae:	609a      	str	r2, [r3, #8]
 80017b0:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	681b      	ldr	r3, [r3, #0]
 80017b6:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80017ba:	d118      	bne.n	80017ee <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017bc:	4b25      	ldr	r3, [pc, #148]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	4a24      	ldr	r2, [pc, #144]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 80017c2:	f043 0304 	orr.w	r3, r3, #4
 80017c6:	6193      	str	r3, [r2, #24]
 80017c8:	4b22      	ldr	r3, [pc, #136]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 80017ca:	699b      	ldr	r3, [r3, #24]
 80017cc:	f003 0304 	and.w	r3, r3, #4
 80017d0:	613b      	str	r3, [r7, #16]
 80017d2:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80017d4:	2301      	movs	r3, #1
 80017d6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017d8:	2302      	movs	r3, #2
 80017da:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80017dc:	2302      	movs	r3, #2
 80017de:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80017e0:	f107 0314 	add.w	r3, r7, #20
 80017e4:	4619      	mov	r1, r3
 80017e6:	481c      	ldr	r0, [pc, #112]	@ (8001858 <HAL_TIM_MspPostInit+0xbc>)
 80017e8:	f000 fa64 	bl	8001cb4 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80017ec:	e02e      	b.n	800184c <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	681b      	ldr	r3, [r3, #0]
 80017f2:	4a1a      	ldr	r2, [pc, #104]	@ (800185c <HAL_TIM_MspPostInit+0xc0>)
 80017f4:	4293      	cmp	r3, r2
 80017f6:	d129      	bne.n	800184c <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80017f8:	4b16      	ldr	r3, [pc, #88]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 80017fa:	699b      	ldr	r3, [r3, #24]
 80017fc:	4a15      	ldr	r2, [pc, #84]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 80017fe:	f043 0310 	orr.w	r3, r3, #16
 8001802:	6193      	str	r3, [r2, #24]
 8001804:	4b13      	ldr	r3, [pc, #76]	@ (8001854 <HAL_TIM_MspPostInit+0xb8>)
 8001806:	699b      	ldr	r3, [r3, #24]
 8001808:	f003 0310 	and.w	r3, r3, #16
 800180c:	60fb      	str	r3, [r7, #12]
 800180e:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001810:	2340      	movs	r3, #64	@ 0x40
 8001812:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001814:	2302      	movs	r3, #2
 8001816:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001818:	2302      	movs	r3, #2
 800181a:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800181c:	f107 0314 	add.w	r3, r7, #20
 8001820:	4619      	mov	r1, r3
 8001822:	480f      	ldr	r0, [pc, #60]	@ (8001860 <HAL_TIM_MspPostInit+0xc4>)
 8001824:	f000 fa46 	bl	8001cb4 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001828:	4b0e      	ldr	r3, [pc, #56]	@ (8001864 <HAL_TIM_MspPostInit+0xc8>)
 800182a:	685b      	ldr	r3, [r3, #4]
 800182c:	627b      	str	r3, [r7, #36]	@ 0x24
 800182e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001830:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001834:	627b      	str	r3, [r7, #36]	@ 0x24
 8001836:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001838:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 800183c:	627b      	str	r3, [r7, #36]	@ 0x24
 800183e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001840:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001844:	627b      	str	r3, [r7, #36]	@ 0x24
 8001846:	4a07      	ldr	r2, [pc, #28]	@ (8001864 <HAL_TIM_MspPostInit+0xc8>)
 8001848:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800184a:	6053      	str	r3, [r2, #4]
}
 800184c:	bf00      	nop
 800184e:	3728      	adds	r7, #40	@ 0x28
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}
 8001854:	40021000 	.word	0x40021000
 8001858:	40010800 	.word	0x40010800
 800185c:	40000400 	.word	0x40000400
 8001860:	40011000 	.word	0x40011000
 8001864:	40010000 	.word	0x40010000

08001868 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001868:	b480      	push	{r7}
 800186a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800186c:	bf00      	nop
 800186e:	e7fd      	b.n	800186c <NMI_Handler+0x4>

08001870 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001870:	b480      	push	{r7}
 8001872:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001874:	bf00      	nop
 8001876:	e7fd      	b.n	8001874 <HardFault_Handler+0x4>

08001878 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800187c:	bf00      	nop
 800187e:	e7fd      	b.n	800187c <MemManage_Handler+0x4>

08001880 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001880:	b480      	push	{r7}
 8001882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001884:	bf00      	nop
 8001886:	e7fd      	b.n	8001884 <BusFault_Handler+0x4>

08001888 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001888:	b480      	push	{r7}
 800188a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800188c:	bf00      	nop
 800188e:	e7fd      	b.n	800188c <UsageFault_Handler+0x4>

08001890 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001890:	b480      	push	{r7}
 8001892:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001894:	bf00      	nop
 8001896:	46bd      	mov	sp, r7
 8001898:	bc80      	pop	{r7}
 800189a:	4770      	bx	lr

0800189c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800189c:	b480      	push	{r7}
 800189e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80018a0:	bf00      	nop
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bc80      	pop	{r7}
 80018a6:	4770      	bx	lr

080018a8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80018ac:	bf00      	nop
 80018ae:	46bd      	mov	sp, r7
 80018b0:	bc80      	pop	{r7}
 80018b2:	4770      	bx	lr

080018b4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80018b4:	b580      	push	{r7, lr}
 80018b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80018b8:	f000 f8d2 	bl	8001a60 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80018bc:	bf00      	nop
 80018be:	bd80      	pop	{r7, pc}

080018c0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 80018c4:	f7ff fcea 	bl	800129c <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80018c8:	4802      	ldr	r0, [pc, #8]	@ (80018d4 <TIM2_IRQHandler+0x14>)
 80018ca:	f001 f9a5 	bl	8002c18 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80018ce:	bf00      	nop
 80018d0:	bd80      	pop	{r7, pc}
 80018d2:	bf00      	nop
 80018d4:	200000e0 	.word	0x200000e0

080018d8 <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
 80018e0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018e2:	f002 f853 	bl	800398c <__errno>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2216      	movs	r2, #22
 80018ea:	601a      	str	r2, [r3, #0]
  return -1;
 80018ec:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80018f0:	4618      	mov	r0, r3
 80018f2:	3708      	adds	r7, #8
 80018f4:	46bd      	mov	sp, r7
 80018f6:	bd80      	pop	{r7, pc}

080018f8 <_exit>:

void _exit (int status)
{
 80018f8:	b580      	push	{r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001900:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001904:	6878      	ldr	r0, [r7, #4]
 8001906:	f7ff ffe7 	bl	80018d8 <_kill>
  while (1) {}    /* Make sure we hang here */
 800190a:	bf00      	nop
 800190c:	e7fd      	b.n	800190a <_exit+0x12>
	...

08001910 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001910:	b580      	push	{r7, lr}
 8001912:	b086      	sub	sp, #24
 8001914:	af00      	add	r7, sp, #0
 8001916:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001918:	4a14      	ldr	r2, [pc, #80]	@ (800196c <_sbrk+0x5c>)
 800191a:	4b15      	ldr	r3, [pc, #84]	@ (8001970 <_sbrk+0x60>)
 800191c:	1ad3      	subs	r3, r2, r3
 800191e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001920:	697b      	ldr	r3, [r7, #20]
 8001922:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001924:	4b13      	ldr	r3, [pc, #76]	@ (8001974 <_sbrk+0x64>)
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	2b00      	cmp	r3, #0
 800192a:	d102      	bne.n	8001932 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800192c:	4b11      	ldr	r3, [pc, #68]	@ (8001974 <_sbrk+0x64>)
 800192e:	4a12      	ldr	r2, [pc, #72]	@ (8001978 <_sbrk+0x68>)
 8001930:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001932:	4b10      	ldr	r3, [pc, #64]	@ (8001974 <_sbrk+0x64>)
 8001934:	681a      	ldr	r2, [r3, #0]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	4413      	add	r3, r2
 800193a:	693a      	ldr	r2, [r7, #16]
 800193c:	429a      	cmp	r2, r3
 800193e:	d207      	bcs.n	8001950 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001940:	f002 f824 	bl	800398c <__errno>
 8001944:	4603      	mov	r3, r0
 8001946:	220c      	movs	r2, #12
 8001948:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800194a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800194e:	e009      	b.n	8001964 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001950:	4b08      	ldr	r3, [pc, #32]	@ (8001974 <_sbrk+0x64>)
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001956:	4b07      	ldr	r3, [pc, #28]	@ (8001974 <_sbrk+0x64>)
 8001958:	681a      	ldr	r2, [r3, #0]
 800195a:	687b      	ldr	r3, [r7, #4]
 800195c:	4413      	add	r3, r2
 800195e:	4a05      	ldr	r2, [pc, #20]	@ (8001974 <_sbrk+0x64>)
 8001960:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001962:	68fb      	ldr	r3, [r7, #12]
}
 8001964:	4618      	mov	r0, r3
 8001966:	3718      	adds	r7, #24
 8001968:	46bd      	mov	sp, r7
 800196a:	bd80      	pop	{r7, pc}
 800196c:	20005000 	.word	0x20005000
 8001970:	00000400 	.word	0x00000400
 8001974:	20001990 	.word	0x20001990
 8001978:	20001ae8 	.word	0x20001ae8

0800197c <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800197c:	b480      	push	{r7}
 800197e:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001980:	bf00      	nop
 8001982:	46bd      	mov	sp, r7
 8001984:	bc80      	pop	{r7}
 8001986:	4770      	bx	lr

08001988 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001988:	f7ff fff8 	bl	800197c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800198c:	480b      	ldr	r0, [pc, #44]	@ (80019bc <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 800198e:	490c      	ldr	r1, [pc, #48]	@ (80019c0 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001990:	4a0c      	ldr	r2, [pc, #48]	@ (80019c4 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001992:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001994:	e002      	b.n	800199c <LoopCopyDataInit>

08001996 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001996:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001998:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800199a:	3304      	adds	r3, #4

0800199c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800199c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800199e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80019a0:	d3f9      	bcc.n	8001996 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80019a2:	4a09      	ldr	r2, [pc, #36]	@ (80019c8 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 80019a4:	4c09      	ldr	r4, [pc, #36]	@ (80019cc <LoopFillZerobss+0x1e>)
  movs r3, #0
 80019a6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80019a8:	e001      	b.n	80019ae <LoopFillZerobss>

080019aa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80019aa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80019ac:	3204      	adds	r2, #4

080019ae <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80019ae:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80019b0:	d3fb      	bcc.n	80019aa <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80019b2:	f001 fff1 	bl	8003998 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80019b6:	f7ff f885 	bl	8000ac4 <main>
  bx lr
 80019ba:	4770      	bx	lr
  ldr r0, =_sdata
 80019bc:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80019c0:	20000064 	.word	0x20000064
  ldr r2, =_sidata
 80019c4:	08004ce8 	.word	0x08004ce8
  ldr r2, =_sbss
 80019c8:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 80019cc:	20001ae4 	.word	0x20001ae4

080019d0 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80019d0:	e7fe      	b.n	80019d0 <ADC1_2_IRQHandler>
	...

080019d4 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80019d8:	4b08      	ldr	r3, [pc, #32]	@ (80019fc <HAL_Init+0x28>)
 80019da:	681b      	ldr	r3, [r3, #0]
 80019dc:	4a07      	ldr	r2, [pc, #28]	@ (80019fc <HAL_Init+0x28>)
 80019de:	f043 0310 	orr.w	r3, r3, #16
 80019e2:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80019e4:	2003      	movs	r0, #3
 80019e6:	f000 f923 	bl	8001c30 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80019ea:	200f      	movs	r0, #15
 80019ec:	f000 f808 	bl	8001a00 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80019f0:	f7ff fe2c 	bl	800164c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	bd80      	pop	{r7, pc}
 80019fa:	bf00      	nop
 80019fc:	40022000 	.word	0x40022000

08001a00 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001a00:	b580      	push	{r7, lr}
 8001a02:	b082      	sub	sp, #8
 8001a04:	af00      	add	r7, sp, #0
 8001a06:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001a08:	4b12      	ldr	r3, [pc, #72]	@ (8001a54 <HAL_InitTick+0x54>)
 8001a0a:	681a      	ldr	r2, [r3, #0]
 8001a0c:	4b12      	ldr	r3, [pc, #72]	@ (8001a58 <HAL_InitTick+0x58>)
 8001a0e:	781b      	ldrb	r3, [r3, #0]
 8001a10:	4619      	mov	r1, r3
 8001a12:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001a16:	fbb3 f3f1 	udiv	r3, r3, r1
 8001a1a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001a1e:	4618      	mov	r0, r3
 8001a20:	f000 f93b 	bl	8001c9a <HAL_SYSTICK_Config>
 8001a24:	4603      	mov	r3, r0
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	d001      	beq.n	8001a2e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001a2a:	2301      	movs	r3, #1
 8001a2c:	e00e      	b.n	8001a4c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001a2e:	687b      	ldr	r3, [r7, #4]
 8001a30:	2b0f      	cmp	r3, #15
 8001a32:	d80a      	bhi.n	8001a4a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001a34:	2200      	movs	r2, #0
 8001a36:	6879      	ldr	r1, [r7, #4]
 8001a38:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001a3c:	f000 f903 	bl	8001c46 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001a40:	4a06      	ldr	r2, [pc, #24]	@ (8001a5c <HAL_InitTick+0x5c>)
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001a46:	2300      	movs	r3, #0
 8001a48:	e000      	b.n	8001a4c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001a4a:	2301      	movs	r3, #1
}
 8001a4c:	4618      	mov	r0, r3
 8001a4e:	3708      	adds	r7, #8
 8001a50:	46bd      	mov	sp, r7
 8001a52:	bd80      	pop	{r7, pc}
 8001a54:	20000008 	.word	0x20000008
 8001a58:	20000010 	.word	0x20000010
 8001a5c:	2000000c 	.word	0x2000000c

08001a60 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001a60:	b480      	push	{r7}
 8001a62:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001a64:	4b05      	ldr	r3, [pc, #20]	@ (8001a7c <HAL_IncTick+0x1c>)
 8001a66:	781b      	ldrb	r3, [r3, #0]
 8001a68:	461a      	mov	r2, r3
 8001a6a:	4b05      	ldr	r3, [pc, #20]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	4413      	add	r3, r2
 8001a70:	4a03      	ldr	r2, [pc, #12]	@ (8001a80 <HAL_IncTick+0x20>)
 8001a72:	6013      	str	r3, [r2, #0]
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	bc80      	pop	{r7}
 8001a7a:	4770      	bx	lr
 8001a7c:	20000010 	.word	0x20000010
 8001a80:	20001994 	.word	0x20001994

08001a84 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	af00      	add	r7, sp, #0
  return uwTick;
 8001a88:	4b02      	ldr	r3, [pc, #8]	@ (8001a94 <HAL_GetTick+0x10>)
 8001a8a:	681b      	ldr	r3, [r3, #0]
}
 8001a8c:	4618      	mov	r0, r3
 8001a8e:	46bd      	mov	sp, r7
 8001a90:	bc80      	pop	{r7}
 8001a92:	4770      	bx	lr
 8001a94:	20001994 	.word	0x20001994

08001a98 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001a98:	b480      	push	{r7}
 8001a9a:	b085      	sub	sp, #20
 8001a9c:	af00      	add	r7, sp, #0
 8001a9e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001aa8:	4b0c      	ldr	r3, [pc, #48]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001aaa:	68db      	ldr	r3, [r3, #12]
 8001aac:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001aae:	68ba      	ldr	r2, [r7, #8]
 8001ab0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ab4:	4013      	ands	r3, r2
 8001ab6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001ab8:	68fb      	ldr	r3, [r7, #12]
 8001aba:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001abc:	68bb      	ldr	r3, [r7, #8]
 8001abe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ac0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ac4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001ac8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001aca:	4a04      	ldr	r2, [pc, #16]	@ (8001adc <__NVIC_SetPriorityGrouping+0x44>)
 8001acc:	68bb      	ldr	r3, [r7, #8]
 8001ace:	60d3      	str	r3, [r2, #12]
}
 8001ad0:	bf00      	nop
 8001ad2:	3714      	adds	r7, #20
 8001ad4:	46bd      	mov	sp, r7
 8001ad6:	bc80      	pop	{r7}
 8001ad8:	4770      	bx	lr
 8001ada:	bf00      	nop
 8001adc:	e000ed00 	.word	0xe000ed00

08001ae0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001ae0:	b480      	push	{r7}
 8001ae2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001ae4:	4b04      	ldr	r3, [pc, #16]	@ (8001af8 <__NVIC_GetPriorityGrouping+0x18>)
 8001ae6:	68db      	ldr	r3, [r3, #12]
 8001ae8:	0a1b      	lsrs	r3, r3, #8
 8001aea:	f003 0307 	and.w	r3, r3, #7
}
 8001aee:	4618      	mov	r0, r3
 8001af0:	46bd      	mov	sp, r7
 8001af2:	bc80      	pop	{r7}
 8001af4:	4770      	bx	lr
 8001af6:	bf00      	nop
 8001af8:	e000ed00 	.word	0xe000ed00

08001afc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001afc:	b480      	push	{r7}
 8001afe:	b083      	sub	sp, #12
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	4603      	mov	r3, r0
 8001b04:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b06:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b0a:	2b00      	cmp	r3, #0
 8001b0c:	db0b      	blt.n	8001b26 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001b0e:	79fb      	ldrb	r3, [r7, #7]
 8001b10:	f003 021f 	and.w	r2, r3, #31
 8001b14:	4906      	ldr	r1, [pc, #24]	@ (8001b30 <__NVIC_EnableIRQ+0x34>)
 8001b16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b1a:	095b      	lsrs	r3, r3, #5
 8001b1c:	2001      	movs	r0, #1
 8001b1e:	fa00 f202 	lsl.w	r2, r0, r2
 8001b22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001b26:	bf00      	nop
 8001b28:	370c      	adds	r7, #12
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bc80      	pop	{r7}
 8001b2e:	4770      	bx	lr
 8001b30:	e000e100 	.word	0xe000e100

08001b34 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001b34:	b480      	push	{r7}
 8001b36:	b083      	sub	sp, #12
 8001b38:	af00      	add	r7, sp, #0
 8001b3a:	4603      	mov	r3, r0
 8001b3c:	6039      	str	r1, [r7, #0]
 8001b3e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001b40:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b44:	2b00      	cmp	r3, #0
 8001b46:	db0a      	blt.n	8001b5e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b48:	683b      	ldr	r3, [r7, #0]
 8001b4a:	b2da      	uxtb	r2, r3
 8001b4c:	490c      	ldr	r1, [pc, #48]	@ (8001b80 <__NVIC_SetPriority+0x4c>)
 8001b4e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b52:	0112      	lsls	r2, r2, #4
 8001b54:	b2d2      	uxtb	r2, r2
 8001b56:	440b      	add	r3, r1
 8001b58:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001b5c:	e00a      	b.n	8001b74 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001b5e:	683b      	ldr	r3, [r7, #0]
 8001b60:	b2da      	uxtb	r2, r3
 8001b62:	4908      	ldr	r1, [pc, #32]	@ (8001b84 <__NVIC_SetPriority+0x50>)
 8001b64:	79fb      	ldrb	r3, [r7, #7]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	3b04      	subs	r3, #4
 8001b6c:	0112      	lsls	r2, r2, #4
 8001b6e:	b2d2      	uxtb	r2, r2
 8001b70:	440b      	add	r3, r1
 8001b72:	761a      	strb	r2, [r3, #24]
}
 8001b74:	bf00      	nop
 8001b76:	370c      	adds	r7, #12
 8001b78:	46bd      	mov	sp, r7
 8001b7a:	bc80      	pop	{r7}
 8001b7c:	4770      	bx	lr
 8001b7e:	bf00      	nop
 8001b80:	e000e100 	.word	0xe000e100
 8001b84:	e000ed00 	.word	0xe000ed00

08001b88 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001b88:	b480      	push	{r7}
 8001b8a:	b089      	sub	sp, #36	@ 0x24
 8001b8c:	af00      	add	r7, sp, #0
 8001b8e:	60f8      	str	r0, [r7, #12]
 8001b90:	60b9      	str	r1, [r7, #8]
 8001b92:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001b94:	68fb      	ldr	r3, [r7, #12]
 8001b96:	f003 0307 	and.w	r3, r3, #7
 8001b9a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001b9c:	69fb      	ldr	r3, [r7, #28]
 8001b9e:	f1c3 0307 	rsb	r3, r3, #7
 8001ba2:	2b04      	cmp	r3, #4
 8001ba4:	bf28      	it	cs
 8001ba6:	2304      	movcs	r3, #4
 8001ba8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001baa:	69fb      	ldr	r3, [r7, #28]
 8001bac:	3304      	adds	r3, #4
 8001bae:	2b06      	cmp	r3, #6
 8001bb0:	d902      	bls.n	8001bb8 <NVIC_EncodePriority+0x30>
 8001bb2:	69fb      	ldr	r3, [r7, #28]
 8001bb4:	3b03      	subs	r3, #3
 8001bb6:	e000      	b.n	8001bba <NVIC_EncodePriority+0x32>
 8001bb8:	2300      	movs	r3, #0
 8001bba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001bbc:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001bc0:	69bb      	ldr	r3, [r7, #24]
 8001bc2:	fa02 f303 	lsl.w	r3, r2, r3
 8001bc6:	43da      	mvns	r2, r3
 8001bc8:	68bb      	ldr	r3, [r7, #8]
 8001bca:	401a      	ands	r2, r3
 8001bcc:	697b      	ldr	r3, [r7, #20]
 8001bce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001bd0:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001bd4:	697b      	ldr	r3, [r7, #20]
 8001bd6:	fa01 f303 	lsl.w	r3, r1, r3
 8001bda:	43d9      	mvns	r1, r3
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001be0:	4313      	orrs	r3, r2
         );
}
 8001be2:	4618      	mov	r0, r3
 8001be4:	3724      	adds	r7, #36	@ 0x24
 8001be6:	46bd      	mov	sp, r7
 8001be8:	bc80      	pop	{r7}
 8001bea:	4770      	bx	lr

08001bec <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b082      	sub	sp, #8
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	3b01      	subs	r3, #1
 8001bf8:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001bfc:	d301      	bcc.n	8001c02 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001bfe:	2301      	movs	r3, #1
 8001c00:	e00f      	b.n	8001c22 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001c02:	4a0a      	ldr	r2, [pc, #40]	@ (8001c2c <SysTick_Config+0x40>)
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	3b01      	subs	r3, #1
 8001c08:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001c0a:	210f      	movs	r1, #15
 8001c0c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c10:	f7ff ff90 	bl	8001b34 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001c14:	4b05      	ldr	r3, [pc, #20]	@ (8001c2c <SysTick_Config+0x40>)
 8001c16:	2200      	movs	r2, #0
 8001c18:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001c1a:	4b04      	ldr	r3, [pc, #16]	@ (8001c2c <SysTick_Config+0x40>)
 8001c1c:	2207      	movs	r2, #7
 8001c1e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001c20:	2300      	movs	r3, #0
}
 8001c22:	4618      	mov	r0, r3
 8001c24:	3708      	adds	r7, #8
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bd80      	pop	{r7, pc}
 8001c2a:	bf00      	nop
 8001c2c:	e000e010 	.word	0xe000e010

08001c30 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001c30:	b580      	push	{r7, lr}
 8001c32:	b082      	sub	sp, #8
 8001c34:	af00      	add	r7, sp, #0
 8001c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001c38:	6878      	ldr	r0, [r7, #4]
 8001c3a:	f7ff ff2d 	bl	8001a98 <__NVIC_SetPriorityGrouping>
}
 8001c3e:	bf00      	nop
 8001c40:	3708      	adds	r7, #8
 8001c42:	46bd      	mov	sp, r7
 8001c44:	bd80      	pop	{r7, pc}

08001c46 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001c46:	b580      	push	{r7, lr}
 8001c48:	b086      	sub	sp, #24
 8001c4a:	af00      	add	r7, sp, #0
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	60b9      	str	r1, [r7, #8]
 8001c50:	607a      	str	r2, [r7, #4]
 8001c52:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001c54:	2300      	movs	r3, #0
 8001c56:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001c58:	f7ff ff42 	bl	8001ae0 <__NVIC_GetPriorityGrouping>
 8001c5c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001c5e:	687a      	ldr	r2, [r7, #4]
 8001c60:	68b9      	ldr	r1, [r7, #8]
 8001c62:	6978      	ldr	r0, [r7, #20]
 8001c64:	f7ff ff90 	bl	8001b88 <NVIC_EncodePriority>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001c6e:	4611      	mov	r1, r2
 8001c70:	4618      	mov	r0, r3
 8001c72:	f7ff ff5f 	bl	8001b34 <__NVIC_SetPriority>
}
 8001c76:	bf00      	nop
 8001c78:	3718      	adds	r7, #24
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	b082      	sub	sp, #8
 8001c82:	af00      	add	r7, sp, #0
 8001c84:	4603      	mov	r3, r0
 8001c86:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001c88:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff35 	bl	8001afc <__NVIC_EnableIRQ>
}
 8001c92:	bf00      	nop
 8001c94:	3708      	adds	r7, #8
 8001c96:	46bd      	mov	sp, r7
 8001c98:	bd80      	pop	{r7, pc}

08001c9a <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001c9a:	b580      	push	{r7, lr}
 8001c9c:	b082      	sub	sp, #8
 8001c9e:	af00      	add	r7, sp, #0
 8001ca0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001ca2:	6878      	ldr	r0, [r7, #4]
 8001ca4:	f7ff ffa2 	bl	8001bec <SysTick_Config>
 8001ca8:	4603      	mov	r3, r0
}
 8001caa:	4618      	mov	r0, r3
 8001cac:	3708      	adds	r7, #8
 8001cae:	46bd      	mov	sp, r7
 8001cb0:	bd80      	pop	{r7, pc}
	...

08001cb4 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	b08b      	sub	sp, #44	@ 0x2c
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	6078      	str	r0, [r7, #4]
 8001cbc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001cc2:	2300      	movs	r3, #0
 8001cc4:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001cc6:	e169      	b.n	8001f9c <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001cc8:	2201      	movs	r2, #1
 8001cca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ccc:	fa02 f303 	lsl.w	r3, r2, r3
 8001cd0:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001cd2:	683b      	ldr	r3, [r7, #0]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	69fa      	ldr	r2, [r7, #28]
 8001cd8:	4013      	ands	r3, r2
 8001cda:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001cdc:	69ba      	ldr	r2, [r7, #24]
 8001cde:	69fb      	ldr	r3, [r7, #28]
 8001ce0:	429a      	cmp	r2, r3
 8001ce2:	f040 8158 	bne.w	8001f96 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001ce6:	683b      	ldr	r3, [r7, #0]
 8001ce8:	685b      	ldr	r3, [r3, #4]
 8001cea:	4a9a      	ldr	r2, [pc, #616]	@ (8001f54 <HAL_GPIO_Init+0x2a0>)
 8001cec:	4293      	cmp	r3, r2
 8001cee:	d05e      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001cf0:	4a98      	ldr	r2, [pc, #608]	@ (8001f54 <HAL_GPIO_Init+0x2a0>)
 8001cf2:	4293      	cmp	r3, r2
 8001cf4:	d875      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001cf6:	4a98      	ldr	r2, [pc, #608]	@ (8001f58 <HAL_GPIO_Init+0x2a4>)
 8001cf8:	4293      	cmp	r3, r2
 8001cfa:	d058      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001cfc:	4a96      	ldr	r2, [pc, #600]	@ (8001f58 <HAL_GPIO_Init+0x2a4>)
 8001cfe:	4293      	cmp	r3, r2
 8001d00:	d86f      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d02:	4a96      	ldr	r2, [pc, #600]	@ (8001f5c <HAL_GPIO_Init+0x2a8>)
 8001d04:	4293      	cmp	r3, r2
 8001d06:	d052      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d08:	4a94      	ldr	r2, [pc, #592]	@ (8001f5c <HAL_GPIO_Init+0x2a8>)
 8001d0a:	4293      	cmp	r3, r2
 8001d0c:	d869      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d0e:	4a94      	ldr	r2, [pc, #592]	@ (8001f60 <HAL_GPIO_Init+0x2ac>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d04c      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d14:	4a92      	ldr	r2, [pc, #584]	@ (8001f60 <HAL_GPIO_Init+0x2ac>)
 8001d16:	4293      	cmp	r3, r2
 8001d18:	d863      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d1a:	4a92      	ldr	r2, [pc, #584]	@ (8001f64 <HAL_GPIO_Init+0x2b0>)
 8001d1c:	4293      	cmp	r3, r2
 8001d1e:	d046      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
 8001d20:	4a90      	ldr	r2, [pc, #576]	@ (8001f64 <HAL_GPIO_Init+0x2b0>)
 8001d22:	4293      	cmp	r3, r2
 8001d24:	d85d      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d26:	2b12      	cmp	r3, #18
 8001d28:	d82a      	bhi.n	8001d80 <HAL_GPIO_Init+0xcc>
 8001d2a:	2b12      	cmp	r3, #18
 8001d2c:	d859      	bhi.n	8001de2 <HAL_GPIO_Init+0x12e>
 8001d2e:	a201      	add	r2, pc, #4	@ (adr r2, 8001d34 <HAL_GPIO_Init+0x80>)
 8001d30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001d34:	08001daf 	.word	0x08001daf
 8001d38:	08001d89 	.word	0x08001d89
 8001d3c:	08001d9b 	.word	0x08001d9b
 8001d40:	08001ddd 	.word	0x08001ddd
 8001d44:	08001de3 	.word	0x08001de3
 8001d48:	08001de3 	.word	0x08001de3
 8001d4c:	08001de3 	.word	0x08001de3
 8001d50:	08001de3 	.word	0x08001de3
 8001d54:	08001de3 	.word	0x08001de3
 8001d58:	08001de3 	.word	0x08001de3
 8001d5c:	08001de3 	.word	0x08001de3
 8001d60:	08001de3 	.word	0x08001de3
 8001d64:	08001de3 	.word	0x08001de3
 8001d68:	08001de3 	.word	0x08001de3
 8001d6c:	08001de3 	.word	0x08001de3
 8001d70:	08001de3 	.word	0x08001de3
 8001d74:	08001de3 	.word	0x08001de3
 8001d78:	08001d91 	.word	0x08001d91
 8001d7c:	08001da5 	.word	0x08001da5
 8001d80:	4a79      	ldr	r2, [pc, #484]	@ (8001f68 <HAL_GPIO_Init+0x2b4>)
 8001d82:	4293      	cmp	r3, r2
 8001d84:	d013      	beq.n	8001dae <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001d86:	e02c      	b.n	8001de2 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001d88:	683b      	ldr	r3, [r7, #0]
 8001d8a:	68db      	ldr	r3, [r3, #12]
 8001d8c:	623b      	str	r3, [r7, #32]
          break;
 8001d8e:	e029      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001d90:	683b      	ldr	r3, [r7, #0]
 8001d92:	68db      	ldr	r3, [r3, #12]
 8001d94:	3304      	adds	r3, #4
 8001d96:	623b      	str	r3, [r7, #32]
          break;
 8001d98:	e024      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001d9a:	683b      	ldr	r3, [r7, #0]
 8001d9c:	68db      	ldr	r3, [r3, #12]
 8001d9e:	3308      	adds	r3, #8
 8001da0:	623b      	str	r3, [r7, #32]
          break;
 8001da2:	e01f      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	330c      	adds	r3, #12
 8001daa:	623b      	str	r3, [r7, #32]
          break;
 8001dac:	e01a      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	689b      	ldr	r3, [r3, #8]
 8001db2:	2b00      	cmp	r3, #0
 8001db4:	d102      	bne.n	8001dbc <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001db6:	2304      	movs	r3, #4
 8001db8:	623b      	str	r3, [r7, #32]
          break;
 8001dba:	e013      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	689b      	ldr	r3, [r3, #8]
 8001dc0:	2b01      	cmp	r3, #1
 8001dc2:	d105      	bne.n	8001dd0 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dc4:	2308      	movs	r3, #8
 8001dc6:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001dc8:	687b      	ldr	r3, [r7, #4]
 8001dca:	69fa      	ldr	r2, [r7, #28]
 8001dcc:	611a      	str	r2, [r3, #16]
          break;
 8001dce:	e009      	b.n	8001de4 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001dd0:	2308      	movs	r3, #8
 8001dd2:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	615a      	str	r2, [r3, #20]
          break;
 8001dda:	e003      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001ddc:	2300      	movs	r3, #0
 8001dde:	623b      	str	r3, [r7, #32]
          break;
 8001de0:	e000      	b.n	8001de4 <HAL_GPIO_Init+0x130>
          break;
 8001de2:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001de4:	69bb      	ldr	r3, [r7, #24]
 8001de6:	2bff      	cmp	r3, #255	@ 0xff
 8001de8:	d801      	bhi.n	8001dee <HAL_GPIO_Init+0x13a>
 8001dea:	687b      	ldr	r3, [r7, #4]
 8001dec:	e001      	b.n	8001df2 <HAL_GPIO_Init+0x13e>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	3304      	adds	r3, #4
 8001df2:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001df4:	69bb      	ldr	r3, [r7, #24]
 8001df6:	2bff      	cmp	r3, #255	@ 0xff
 8001df8:	d802      	bhi.n	8001e00 <HAL_GPIO_Init+0x14c>
 8001dfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001dfc:	009b      	lsls	r3, r3, #2
 8001dfe:	e002      	b.n	8001e06 <HAL_GPIO_Init+0x152>
 8001e00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e02:	3b08      	subs	r3, #8
 8001e04:	009b      	lsls	r3, r3, #2
 8001e06:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001e08:	697b      	ldr	r3, [r7, #20]
 8001e0a:	681a      	ldr	r2, [r3, #0]
 8001e0c:	210f      	movs	r1, #15
 8001e0e:	693b      	ldr	r3, [r7, #16]
 8001e10:	fa01 f303 	lsl.w	r3, r1, r3
 8001e14:	43db      	mvns	r3, r3
 8001e16:	401a      	ands	r2, r3
 8001e18:	6a39      	ldr	r1, [r7, #32]
 8001e1a:	693b      	ldr	r3, [r7, #16]
 8001e1c:	fa01 f303 	lsl.w	r3, r1, r3
 8001e20:	431a      	orrs	r2, r3
 8001e22:	697b      	ldr	r3, [r7, #20]
 8001e24:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	685b      	ldr	r3, [r3, #4]
 8001e2a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001e2e:	2b00      	cmp	r3, #0
 8001e30:	f000 80b1 	beq.w	8001f96 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001e34:	4b4d      	ldr	r3, [pc, #308]	@ (8001f6c <HAL_GPIO_Init+0x2b8>)
 8001e36:	699b      	ldr	r3, [r3, #24]
 8001e38:	4a4c      	ldr	r2, [pc, #304]	@ (8001f6c <HAL_GPIO_Init+0x2b8>)
 8001e3a:	f043 0301 	orr.w	r3, r3, #1
 8001e3e:	6193      	str	r3, [r2, #24]
 8001e40:	4b4a      	ldr	r3, [pc, #296]	@ (8001f6c <HAL_GPIO_Init+0x2b8>)
 8001e42:	699b      	ldr	r3, [r3, #24]
 8001e44:	f003 0301 	and.w	r3, r3, #1
 8001e48:	60bb      	str	r3, [r7, #8]
 8001e4a:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001e4c:	4a48      	ldr	r2, [pc, #288]	@ (8001f70 <HAL_GPIO_Init+0x2bc>)
 8001e4e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e50:	089b      	lsrs	r3, r3, #2
 8001e52:	3302      	adds	r3, #2
 8001e54:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001e58:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e5c:	f003 0303 	and.w	r3, r3, #3
 8001e60:	009b      	lsls	r3, r3, #2
 8001e62:	220f      	movs	r2, #15
 8001e64:	fa02 f303 	lsl.w	r3, r2, r3
 8001e68:	43db      	mvns	r3, r3
 8001e6a:	68fa      	ldr	r2, [r7, #12]
 8001e6c:	4013      	ands	r3, r2
 8001e6e:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	4a40      	ldr	r2, [pc, #256]	@ (8001f74 <HAL_GPIO_Init+0x2c0>)
 8001e74:	4293      	cmp	r3, r2
 8001e76:	d013      	beq.n	8001ea0 <HAL_GPIO_Init+0x1ec>
 8001e78:	687b      	ldr	r3, [r7, #4]
 8001e7a:	4a3f      	ldr	r2, [pc, #252]	@ (8001f78 <HAL_GPIO_Init+0x2c4>)
 8001e7c:	4293      	cmp	r3, r2
 8001e7e:	d00d      	beq.n	8001e9c <HAL_GPIO_Init+0x1e8>
 8001e80:	687b      	ldr	r3, [r7, #4]
 8001e82:	4a3e      	ldr	r2, [pc, #248]	@ (8001f7c <HAL_GPIO_Init+0x2c8>)
 8001e84:	4293      	cmp	r3, r2
 8001e86:	d007      	beq.n	8001e98 <HAL_GPIO_Init+0x1e4>
 8001e88:	687b      	ldr	r3, [r7, #4]
 8001e8a:	4a3d      	ldr	r2, [pc, #244]	@ (8001f80 <HAL_GPIO_Init+0x2cc>)
 8001e8c:	4293      	cmp	r3, r2
 8001e8e:	d101      	bne.n	8001e94 <HAL_GPIO_Init+0x1e0>
 8001e90:	2303      	movs	r3, #3
 8001e92:	e006      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e94:	2304      	movs	r3, #4
 8001e96:	e004      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e98:	2302      	movs	r3, #2
 8001e9a:	e002      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001e9c:	2301      	movs	r3, #1
 8001e9e:	e000      	b.n	8001ea2 <HAL_GPIO_Init+0x1ee>
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001ea4:	f002 0203 	and.w	r2, r2, #3
 8001ea8:	0092      	lsls	r2, r2, #2
 8001eaa:	4093      	lsls	r3, r2
 8001eac:	68fa      	ldr	r2, [r7, #12]
 8001eae:	4313      	orrs	r3, r2
 8001eb0:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001eb2:	492f      	ldr	r1, [pc, #188]	@ (8001f70 <HAL_GPIO_Init+0x2bc>)
 8001eb4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001eb6:	089b      	lsrs	r3, r3, #2
 8001eb8:	3302      	adds	r3, #2
 8001eba:	68fa      	ldr	r2, [r7, #12]
 8001ebc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001ec0:	683b      	ldr	r3, [r7, #0]
 8001ec2:	685b      	ldr	r3, [r3, #4]
 8001ec4:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d006      	beq.n	8001eda <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001ecc:	4b2d      	ldr	r3, [pc, #180]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ece:	689a      	ldr	r2, [r3, #8]
 8001ed0:	492c      	ldr	r1, [pc, #176]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ed2:	69bb      	ldr	r3, [r7, #24]
 8001ed4:	4313      	orrs	r3, r2
 8001ed6:	608b      	str	r3, [r1, #8]
 8001ed8:	e006      	b.n	8001ee8 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001eda:	4b2a      	ldr	r3, [pc, #168]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001edc:	689a      	ldr	r2, [r3, #8]
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	43db      	mvns	r3, r3
 8001ee2:	4928      	ldr	r1, [pc, #160]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ee4:	4013      	ands	r3, r2
 8001ee6:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001ee8:	683b      	ldr	r3, [r7, #0]
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001ef0:	2b00      	cmp	r3, #0
 8001ef2:	d006      	beq.n	8001f02 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001ef4:	4b23      	ldr	r3, [pc, #140]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001ef6:	68da      	ldr	r2, [r3, #12]
 8001ef8:	4922      	ldr	r1, [pc, #136]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001efa:	69bb      	ldr	r3, [r7, #24]
 8001efc:	4313      	orrs	r3, r2
 8001efe:	60cb      	str	r3, [r1, #12]
 8001f00:	e006      	b.n	8001f10 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001f02:	4b20      	ldr	r3, [pc, #128]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f04:	68da      	ldr	r2, [r3, #12]
 8001f06:	69bb      	ldr	r3, [r7, #24]
 8001f08:	43db      	mvns	r3, r3
 8001f0a:	491e      	ldr	r1, [pc, #120]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f0c:	4013      	ands	r3, r2
 8001f0e:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	685b      	ldr	r3, [r3, #4]
 8001f14:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d006      	beq.n	8001f2a <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f1e:	685a      	ldr	r2, [r3, #4]
 8001f20:	4918      	ldr	r1, [pc, #96]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f22:	69bb      	ldr	r3, [r7, #24]
 8001f24:	4313      	orrs	r3, r2
 8001f26:	604b      	str	r3, [r1, #4]
 8001f28:	e006      	b.n	8001f38 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001f2a:	4b16      	ldr	r3, [pc, #88]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f2c:	685a      	ldr	r2, [r3, #4]
 8001f2e:	69bb      	ldr	r3, [r7, #24]
 8001f30:	43db      	mvns	r3, r3
 8001f32:	4914      	ldr	r1, [pc, #80]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f34:	4013      	ands	r3, r2
 8001f36:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001f38:	683b      	ldr	r3, [r7, #0]
 8001f3a:	685b      	ldr	r3, [r3, #4]
 8001f3c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001f40:	2b00      	cmp	r3, #0
 8001f42:	d021      	beq.n	8001f88 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001f44:	4b0f      	ldr	r3, [pc, #60]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f46:	681a      	ldr	r2, [r3, #0]
 8001f48:	490e      	ldr	r1, [pc, #56]	@ (8001f84 <HAL_GPIO_Init+0x2d0>)
 8001f4a:	69bb      	ldr	r3, [r7, #24]
 8001f4c:	4313      	orrs	r3, r2
 8001f4e:	600b      	str	r3, [r1, #0]
 8001f50:	e021      	b.n	8001f96 <HAL_GPIO_Init+0x2e2>
 8001f52:	bf00      	nop
 8001f54:	10320000 	.word	0x10320000
 8001f58:	10310000 	.word	0x10310000
 8001f5c:	10220000 	.word	0x10220000
 8001f60:	10210000 	.word	0x10210000
 8001f64:	10120000 	.word	0x10120000
 8001f68:	10110000 	.word	0x10110000
 8001f6c:	40021000 	.word	0x40021000
 8001f70:	40010000 	.word	0x40010000
 8001f74:	40010800 	.word	0x40010800
 8001f78:	40010c00 	.word	0x40010c00
 8001f7c:	40011000 	.word	0x40011000
 8001f80:	40011400 	.word	0x40011400
 8001f84:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001f88:	4b0b      	ldr	r3, [pc, #44]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f8a:	681a      	ldr	r2, [r3, #0]
 8001f8c:	69bb      	ldr	r3, [r7, #24]
 8001f8e:	43db      	mvns	r3, r3
 8001f90:	4909      	ldr	r1, [pc, #36]	@ (8001fb8 <HAL_GPIO_Init+0x304>)
 8001f92:	4013      	ands	r3, r2
 8001f94:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001f96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001f98:	3301      	adds	r3, #1
 8001f9a:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001f9c:	683b      	ldr	r3, [r7, #0]
 8001f9e:	681a      	ldr	r2, [r3, #0]
 8001fa0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001fa2:	fa22 f303 	lsr.w	r3, r2, r3
 8001fa6:	2b00      	cmp	r3, #0
 8001fa8:	f47f ae8e 	bne.w	8001cc8 <HAL_GPIO_Init+0x14>
  }
}
 8001fac:	bf00      	nop
 8001fae:	bf00      	nop
 8001fb0:	372c      	adds	r7, #44	@ 0x2c
 8001fb2:	46bd      	mov	sp, r7
 8001fb4:	bc80      	pop	{r7}
 8001fb6:	4770      	bx	lr
 8001fb8:	40010400 	.word	0x40010400

08001fbc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001fbc:	b480      	push	{r7}
 8001fbe:	b085      	sub	sp, #20
 8001fc0:	af00      	add	r7, sp, #0
 8001fc2:	6078      	str	r0, [r7, #4]
 8001fc4:	460b      	mov	r3, r1
 8001fc6:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	689a      	ldr	r2, [r3, #8]
 8001fcc:	887b      	ldrh	r3, [r7, #2]
 8001fce:	4013      	ands	r3, r2
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	d002      	beq.n	8001fda <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001fd4:	2301      	movs	r3, #1
 8001fd6:	73fb      	strb	r3, [r7, #15]
 8001fd8:	e001      	b.n	8001fde <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001fda:	2300      	movs	r3, #0
 8001fdc:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001fde:	7bfb      	ldrb	r3, [r7, #15]
}
 8001fe0:	4618      	mov	r0, r3
 8001fe2:	3714      	adds	r7, #20
 8001fe4:	46bd      	mov	sp, r7
 8001fe6:	bc80      	pop	{r7}
 8001fe8:	4770      	bx	lr

08001fea <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001fea:	b480      	push	{r7}
 8001fec:	b083      	sub	sp, #12
 8001fee:	af00      	add	r7, sp, #0
 8001ff0:	6078      	str	r0, [r7, #4]
 8001ff2:	460b      	mov	r3, r1
 8001ff4:	807b      	strh	r3, [r7, #2]
 8001ff6:	4613      	mov	r3, r2
 8001ff8:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001ffa:	787b      	ldrb	r3, [r7, #1]
 8001ffc:	2b00      	cmp	r3, #0
 8001ffe:	d003      	beq.n	8002008 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002000:	887a      	ldrh	r2, [r7, #2]
 8002002:	687b      	ldr	r3, [r7, #4]
 8002004:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002006:	e003      	b.n	8002010 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002008:	887b      	ldrh	r3, [r7, #2]
 800200a:	041a      	lsls	r2, r3, #16
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	611a      	str	r2, [r3, #16]
}
 8002010:	bf00      	nop
 8002012:	370c      	adds	r7, #12
 8002014:	46bd      	mov	sp, r7
 8002016:	bc80      	pop	{r7}
 8002018:	4770      	bx	lr
	...

0800201c <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	b086      	sub	sp, #24
 8002020:	af00      	add	r7, sp, #0
 8002022:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	2b00      	cmp	r3, #0
 8002028:	d101      	bne.n	800202e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800202a:	2301      	movs	r3, #1
 800202c:	e272      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	681b      	ldr	r3, [r3, #0]
 8002032:	f003 0301 	and.w	r3, r3, #1
 8002036:	2b00      	cmp	r3, #0
 8002038:	f000 8087 	beq.w	800214a <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 800203c:	4b92      	ldr	r3, [pc, #584]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 030c 	and.w	r3, r3, #12
 8002044:	2b04      	cmp	r3, #4
 8002046:	d00c      	beq.n	8002062 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002048:	4b8f      	ldr	r3, [pc, #572]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 800204a:	685b      	ldr	r3, [r3, #4]
 800204c:	f003 030c 	and.w	r3, r3, #12
 8002050:	2b08      	cmp	r3, #8
 8002052:	d112      	bne.n	800207a <HAL_RCC_OscConfig+0x5e>
 8002054:	4b8c      	ldr	r3, [pc, #560]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002056:	685b      	ldr	r3, [r3, #4]
 8002058:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800205c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002060:	d10b      	bne.n	800207a <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002062:	4b89      	ldr	r3, [pc, #548]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800206a:	2b00      	cmp	r3, #0
 800206c:	d06c      	beq.n	8002148 <HAL_RCC_OscConfig+0x12c>
 800206e:	687b      	ldr	r3, [r7, #4]
 8002070:	685b      	ldr	r3, [r3, #4]
 8002072:	2b00      	cmp	r3, #0
 8002074:	d168      	bne.n	8002148 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002076:	2301      	movs	r3, #1
 8002078:	e24c      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800207a:	687b      	ldr	r3, [r7, #4]
 800207c:	685b      	ldr	r3, [r3, #4]
 800207e:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002082:	d106      	bne.n	8002092 <HAL_RCC_OscConfig+0x76>
 8002084:	4b80      	ldr	r3, [pc, #512]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	4a7f      	ldr	r2, [pc, #508]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 800208a:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800208e:	6013      	str	r3, [r2, #0]
 8002090:	e02e      	b.n	80020f0 <HAL_RCC_OscConfig+0xd4>
 8002092:	687b      	ldr	r3, [r7, #4]
 8002094:	685b      	ldr	r3, [r3, #4]
 8002096:	2b00      	cmp	r3, #0
 8002098:	d10c      	bne.n	80020b4 <HAL_RCC_OscConfig+0x98>
 800209a:	4b7b      	ldr	r3, [pc, #492]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4a7a      	ldr	r2, [pc, #488]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020a0:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020a4:	6013      	str	r3, [r2, #0]
 80020a6:	4b78      	ldr	r3, [pc, #480]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	4a77      	ldr	r2, [pc, #476]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020ac:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020b0:	6013      	str	r3, [r2, #0]
 80020b2:	e01d      	b.n	80020f0 <HAL_RCC_OscConfig+0xd4>
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	685b      	ldr	r3, [r3, #4]
 80020b8:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80020bc:	d10c      	bne.n	80020d8 <HAL_RCC_OscConfig+0xbc>
 80020be:	4b72      	ldr	r3, [pc, #456]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	4a71      	ldr	r2, [pc, #452]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020c4:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80020c8:	6013      	str	r3, [r2, #0]
 80020ca:	4b6f      	ldr	r3, [pc, #444]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	4a6e      	ldr	r2, [pc, #440]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020d0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80020d4:	6013      	str	r3, [r2, #0]
 80020d6:	e00b      	b.n	80020f0 <HAL_RCC_OscConfig+0xd4>
 80020d8:	4b6b      	ldr	r3, [pc, #428]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	4a6a      	ldr	r2, [pc, #424]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020de:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80020e2:	6013      	str	r3, [r2, #0]
 80020e4:	4b68      	ldr	r3, [pc, #416]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020e6:	681b      	ldr	r3, [r3, #0]
 80020e8:	4a67      	ldr	r2, [pc, #412]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80020ea:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80020ee:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	685b      	ldr	r3, [r3, #4]
 80020f4:	2b00      	cmp	r3, #0
 80020f6:	d013      	beq.n	8002120 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80020f8:	f7ff fcc4 	bl	8001a84 <HAL_GetTick>
 80020fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80020fe:	e008      	b.n	8002112 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002100:	f7ff fcc0 	bl	8001a84 <HAL_GetTick>
 8002104:	4602      	mov	r2, r0
 8002106:	693b      	ldr	r3, [r7, #16]
 8002108:	1ad3      	subs	r3, r2, r3
 800210a:	2b64      	cmp	r3, #100	@ 0x64
 800210c:	d901      	bls.n	8002112 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800210e:	2303      	movs	r3, #3
 8002110:	e200      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002112:	4b5d      	ldr	r3, [pc, #372]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002114:	681b      	ldr	r3, [r3, #0]
 8002116:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800211a:	2b00      	cmp	r3, #0
 800211c:	d0f0      	beq.n	8002100 <HAL_RCC_OscConfig+0xe4>
 800211e:	e014      	b.n	800214a <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002120:	f7ff fcb0 	bl	8001a84 <HAL_GetTick>
 8002124:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002126:	e008      	b.n	800213a <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002128:	f7ff fcac 	bl	8001a84 <HAL_GetTick>
 800212c:	4602      	mov	r2, r0
 800212e:	693b      	ldr	r3, [r7, #16]
 8002130:	1ad3      	subs	r3, r2, r3
 8002132:	2b64      	cmp	r3, #100	@ 0x64
 8002134:	d901      	bls.n	800213a <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002136:	2303      	movs	r3, #3
 8002138:	e1ec      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800213a:	4b53      	ldr	r3, [pc, #332]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002142:	2b00      	cmp	r3, #0
 8002144:	d1f0      	bne.n	8002128 <HAL_RCC_OscConfig+0x10c>
 8002146:	e000      	b.n	800214a <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002148:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	681b      	ldr	r3, [r3, #0]
 800214e:	f003 0302 	and.w	r3, r3, #2
 8002152:	2b00      	cmp	r3, #0
 8002154:	d063      	beq.n	800221e <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002156:	4b4c      	ldr	r3, [pc, #304]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002158:	685b      	ldr	r3, [r3, #4]
 800215a:	f003 030c 	and.w	r3, r3, #12
 800215e:	2b00      	cmp	r3, #0
 8002160:	d00b      	beq.n	800217a <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002162:	4b49      	ldr	r3, [pc, #292]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002164:	685b      	ldr	r3, [r3, #4]
 8002166:	f003 030c 	and.w	r3, r3, #12
 800216a:	2b08      	cmp	r3, #8
 800216c:	d11c      	bne.n	80021a8 <HAL_RCC_OscConfig+0x18c>
 800216e:	4b46      	ldr	r3, [pc, #280]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002170:	685b      	ldr	r3, [r3, #4]
 8002172:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002176:	2b00      	cmp	r3, #0
 8002178:	d116      	bne.n	80021a8 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800217a:	4b43      	ldr	r3, [pc, #268]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	f003 0302 	and.w	r3, r3, #2
 8002182:	2b00      	cmp	r3, #0
 8002184:	d005      	beq.n	8002192 <HAL_RCC_OscConfig+0x176>
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	691b      	ldr	r3, [r3, #16]
 800218a:	2b01      	cmp	r3, #1
 800218c:	d001      	beq.n	8002192 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800218e:	2301      	movs	r3, #1
 8002190:	e1c0      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002192:	4b3d      	ldr	r3, [pc, #244]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002194:	681b      	ldr	r3, [r3, #0]
 8002196:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800219a:	687b      	ldr	r3, [r7, #4]
 800219c:	695b      	ldr	r3, [r3, #20]
 800219e:	00db      	lsls	r3, r3, #3
 80021a0:	4939      	ldr	r1, [pc, #228]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80021a2:	4313      	orrs	r3, r2
 80021a4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80021a6:	e03a      	b.n	800221e <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80021a8:	687b      	ldr	r3, [r7, #4]
 80021aa:	691b      	ldr	r3, [r3, #16]
 80021ac:	2b00      	cmp	r3, #0
 80021ae:	d020      	beq.n	80021f2 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80021b0:	4b36      	ldr	r3, [pc, #216]	@ (800228c <HAL_RCC_OscConfig+0x270>)
 80021b2:	2201      	movs	r2, #1
 80021b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021b6:	f7ff fc65 	bl	8001a84 <HAL_GetTick>
 80021ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021bc:	e008      	b.n	80021d0 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80021be:	f7ff fc61 	bl	8001a84 <HAL_GetTick>
 80021c2:	4602      	mov	r2, r0
 80021c4:	693b      	ldr	r3, [r7, #16]
 80021c6:	1ad3      	subs	r3, r2, r3
 80021c8:	2b02      	cmp	r3, #2
 80021ca:	d901      	bls.n	80021d0 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80021cc:	2303      	movs	r3, #3
 80021ce:	e1a1      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80021d0:	4b2d      	ldr	r3, [pc, #180]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	f003 0302 	and.w	r3, r3, #2
 80021d8:	2b00      	cmp	r3, #0
 80021da:	d0f0      	beq.n	80021be <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80021dc:	4b2a      	ldr	r3, [pc, #168]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	695b      	ldr	r3, [r3, #20]
 80021e8:	00db      	lsls	r3, r3, #3
 80021ea:	4927      	ldr	r1, [pc, #156]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 80021ec:	4313      	orrs	r3, r2
 80021ee:	600b      	str	r3, [r1, #0]
 80021f0:	e015      	b.n	800221e <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80021f2:	4b26      	ldr	r3, [pc, #152]	@ (800228c <HAL_RCC_OscConfig+0x270>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80021f8:	f7ff fc44 	bl	8001a84 <HAL_GetTick>
 80021fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80021fe:	e008      	b.n	8002212 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002200:	f7ff fc40 	bl	8001a84 <HAL_GetTick>
 8002204:	4602      	mov	r2, r0
 8002206:	693b      	ldr	r3, [r7, #16]
 8002208:	1ad3      	subs	r3, r2, r3
 800220a:	2b02      	cmp	r3, #2
 800220c:	d901      	bls.n	8002212 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800220e:	2303      	movs	r3, #3
 8002210:	e180      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002212:	4b1d      	ldr	r3, [pc, #116]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002214:	681b      	ldr	r3, [r3, #0]
 8002216:	f003 0302 	and.w	r3, r3, #2
 800221a:	2b00      	cmp	r3, #0
 800221c:	d1f0      	bne.n	8002200 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	f003 0308 	and.w	r3, r3, #8
 8002226:	2b00      	cmp	r3, #0
 8002228:	d03a      	beq.n	80022a0 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	699b      	ldr	r3, [r3, #24]
 800222e:	2b00      	cmp	r3, #0
 8002230:	d019      	beq.n	8002266 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002232:	4b17      	ldr	r3, [pc, #92]	@ (8002290 <HAL_RCC_OscConfig+0x274>)
 8002234:	2201      	movs	r2, #1
 8002236:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002238:	f7ff fc24 	bl	8001a84 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800223e:	e008      	b.n	8002252 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002240:	f7ff fc20 	bl	8001a84 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	2b02      	cmp	r3, #2
 800224c:	d901      	bls.n	8002252 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800224e:	2303      	movs	r3, #3
 8002250:	e160      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002252:	4b0d      	ldr	r3, [pc, #52]	@ (8002288 <HAL_RCC_OscConfig+0x26c>)
 8002254:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002256:	f003 0302 	and.w	r3, r3, #2
 800225a:	2b00      	cmp	r3, #0
 800225c:	d0f0      	beq.n	8002240 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800225e:	2001      	movs	r0, #1
 8002260:	f000 fa9c 	bl	800279c <RCC_Delay>
 8002264:	e01c      	b.n	80022a0 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8002266:	4b0a      	ldr	r3, [pc, #40]	@ (8002290 <HAL_RCC_OscConfig+0x274>)
 8002268:	2200      	movs	r2, #0
 800226a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800226c:	f7ff fc0a 	bl	8001a84 <HAL_GetTick>
 8002270:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002272:	e00f      	b.n	8002294 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002274:	f7ff fc06 	bl	8001a84 <HAL_GetTick>
 8002278:	4602      	mov	r2, r0
 800227a:	693b      	ldr	r3, [r7, #16]
 800227c:	1ad3      	subs	r3, r2, r3
 800227e:	2b02      	cmp	r3, #2
 8002280:	d908      	bls.n	8002294 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002282:	2303      	movs	r3, #3
 8002284:	e146      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
 8002286:	bf00      	nop
 8002288:	40021000 	.word	0x40021000
 800228c:	42420000 	.word	0x42420000
 8002290:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002294:	4b92      	ldr	r3, [pc, #584]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002296:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002298:	f003 0302 	and.w	r3, r3, #2
 800229c:	2b00      	cmp	r3, #0
 800229e:	d1e9      	bne.n	8002274 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	f003 0304 	and.w	r3, r3, #4
 80022a8:	2b00      	cmp	r3, #0
 80022aa:	f000 80a6 	beq.w	80023fa <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80022ae:	2300      	movs	r3, #0
 80022b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80022b2:	4b8b      	ldr	r3, [pc, #556]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80022b4:	69db      	ldr	r3, [r3, #28]
 80022b6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022ba:	2b00      	cmp	r3, #0
 80022bc:	d10d      	bne.n	80022da <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80022be:	4b88      	ldr	r3, [pc, #544]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80022c0:	69db      	ldr	r3, [r3, #28]
 80022c2:	4a87      	ldr	r2, [pc, #540]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80022c4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80022c8:	61d3      	str	r3, [r2, #28]
 80022ca:	4b85      	ldr	r3, [pc, #532]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80022cc:	69db      	ldr	r3, [r3, #28]
 80022ce:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80022d2:	60bb      	str	r3, [r7, #8]
 80022d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80022d6:	2301      	movs	r3, #1
 80022d8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022da:	4b82      	ldr	r3, [pc, #520]	@ (80024e4 <HAL_RCC_OscConfig+0x4c8>)
 80022dc:	681b      	ldr	r3, [r3, #0]
 80022de:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d118      	bne.n	8002318 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80022e6:	4b7f      	ldr	r3, [pc, #508]	@ (80024e4 <HAL_RCC_OscConfig+0x4c8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4a7e      	ldr	r2, [pc, #504]	@ (80024e4 <HAL_RCC_OscConfig+0x4c8>)
 80022ec:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80022f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80022f2:	f7ff fbc7 	bl	8001a84 <HAL_GetTick>
 80022f6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80022f8:	e008      	b.n	800230c <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80022fa:	f7ff fbc3 	bl	8001a84 <HAL_GetTick>
 80022fe:	4602      	mov	r2, r0
 8002300:	693b      	ldr	r3, [r7, #16]
 8002302:	1ad3      	subs	r3, r2, r3
 8002304:	2b64      	cmp	r3, #100	@ 0x64
 8002306:	d901      	bls.n	800230c <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8002308:	2303      	movs	r3, #3
 800230a:	e103      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800230c:	4b75      	ldr	r3, [pc, #468]	@ (80024e4 <HAL_RCC_OscConfig+0x4c8>)
 800230e:	681b      	ldr	r3, [r3, #0]
 8002310:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002314:	2b00      	cmp	r3, #0
 8002316:	d0f0      	beq.n	80022fa <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	68db      	ldr	r3, [r3, #12]
 800231c:	2b01      	cmp	r3, #1
 800231e:	d106      	bne.n	800232e <HAL_RCC_OscConfig+0x312>
 8002320:	4b6f      	ldr	r3, [pc, #444]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002322:	6a1b      	ldr	r3, [r3, #32]
 8002324:	4a6e      	ldr	r2, [pc, #440]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002326:	f043 0301 	orr.w	r3, r3, #1
 800232a:	6213      	str	r3, [r2, #32]
 800232c:	e02d      	b.n	800238a <HAL_RCC_OscConfig+0x36e>
 800232e:	687b      	ldr	r3, [r7, #4]
 8002330:	68db      	ldr	r3, [r3, #12]
 8002332:	2b00      	cmp	r3, #0
 8002334:	d10c      	bne.n	8002350 <HAL_RCC_OscConfig+0x334>
 8002336:	4b6a      	ldr	r3, [pc, #424]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002338:	6a1b      	ldr	r3, [r3, #32]
 800233a:	4a69      	ldr	r2, [pc, #420]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800233c:	f023 0301 	bic.w	r3, r3, #1
 8002340:	6213      	str	r3, [r2, #32]
 8002342:	4b67      	ldr	r3, [pc, #412]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002344:	6a1b      	ldr	r3, [r3, #32]
 8002346:	4a66      	ldr	r2, [pc, #408]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002348:	f023 0304 	bic.w	r3, r3, #4
 800234c:	6213      	str	r3, [r2, #32]
 800234e:	e01c      	b.n	800238a <HAL_RCC_OscConfig+0x36e>
 8002350:	687b      	ldr	r3, [r7, #4]
 8002352:	68db      	ldr	r3, [r3, #12]
 8002354:	2b05      	cmp	r3, #5
 8002356:	d10c      	bne.n	8002372 <HAL_RCC_OscConfig+0x356>
 8002358:	4b61      	ldr	r3, [pc, #388]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800235a:	6a1b      	ldr	r3, [r3, #32]
 800235c:	4a60      	ldr	r2, [pc, #384]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800235e:	f043 0304 	orr.w	r3, r3, #4
 8002362:	6213      	str	r3, [r2, #32]
 8002364:	4b5e      	ldr	r3, [pc, #376]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002366:	6a1b      	ldr	r3, [r3, #32]
 8002368:	4a5d      	ldr	r2, [pc, #372]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800236a:	f043 0301 	orr.w	r3, r3, #1
 800236e:	6213      	str	r3, [r2, #32]
 8002370:	e00b      	b.n	800238a <HAL_RCC_OscConfig+0x36e>
 8002372:	4b5b      	ldr	r3, [pc, #364]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002374:	6a1b      	ldr	r3, [r3, #32]
 8002376:	4a5a      	ldr	r2, [pc, #360]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002378:	f023 0301 	bic.w	r3, r3, #1
 800237c:	6213      	str	r3, [r2, #32]
 800237e:	4b58      	ldr	r3, [pc, #352]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002380:	6a1b      	ldr	r3, [r3, #32]
 8002382:	4a57      	ldr	r2, [pc, #348]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002384:	f023 0304 	bic.w	r3, r3, #4
 8002388:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800238a:	687b      	ldr	r3, [r7, #4]
 800238c:	68db      	ldr	r3, [r3, #12]
 800238e:	2b00      	cmp	r3, #0
 8002390:	d015      	beq.n	80023be <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002392:	f7ff fb77 	bl	8001a84 <HAL_GetTick>
 8002396:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002398:	e00a      	b.n	80023b0 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800239a:	f7ff fb73 	bl	8001a84 <HAL_GetTick>
 800239e:	4602      	mov	r2, r0
 80023a0:	693b      	ldr	r3, [r7, #16]
 80023a2:	1ad3      	subs	r3, r2, r3
 80023a4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d901      	bls.n	80023b0 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80023ac:	2303      	movs	r3, #3
 80023ae:	e0b1      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80023b0:	4b4b      	ldr	r3, [pc, #300]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80023b2:	6a1b      	ldr	r3, [r3, #32]
 80023b4:	f003 0302 	and.w	r3, r3, #2
 80023b8:	2b00      	cmp	r3, #0
 80023ba:	d0ee      	beq.n	800239a <HAL_RCC_OscConfig+0x37e>
 80023bc:	e014      	b.n	80023e8 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80023be:	f7ff fb61 	bl	8001a84 <HAL_GetTick>
 80023c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023c4:	e00a      	b.n	80023dc <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80023c6:	f7ff fb5d 	bl	8001a84 <HAL_GetTick>
 80023ca:	4602      	mov	r2, r0
 80023cc:	693b      	ldr	r3, [r7, #16]
 80023ce:	1ad3      	subs	r3, r2, r3
 80023d0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d901      	bls.n	80023dc <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80023d8:	2303      	movs	r3, #3
 80023da:	e09b      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80023dc:	4b40      	ldr	r3, [pc, #256]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80023de:	6a1b      	ldr	r3, [r3, #32]
 80023e0:	f003 0302 	and.w	r3, r3, #2
 80023e4:	2b00      	cmp	r3, #0
 80023e6:	d1ee      	bne.n	80023c6 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80023e8:	7dfb      	ldrb	r3, [r7, #23]
 80023ea:	2b01      	cmp	r3, #1
 80023ec:	d105      	bne.n	80023fa <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80023ee:	4b3c      	ldr	r3, [pc, #240]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80023f0:	69db      	ldr	r3, [r3, #28]
 80023f2:	4a3b      	ldr	r2, [pc, #236]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80023f4:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80023f8:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80023fa:	687b      	ldr	r3, [r7, #4]
 80023fc:	69db      	ldr	r3, [r3, #28]
 80023fe:	2b00      	cmp	r3, #0
 8002400:	f000 8087 	beq.w	8002512 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002404:	4b36      	ldr	r3, [pc, #216]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002406:	685b      	ldr	r3, [r3, #4]
 8002408:	f003 030c 	and.w	r3, r3, #12
 800240c:	2b08      	cmp	r3, #8
 800240e:	d061      	beq.n	80024d4 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002410:	687b      	ldr	r3, [r7, #4]
 8002412:	69db      	ldr	r3, [r3, #28]
 8002414:	2b02      	cmp	r3, #2
 8002416:	d146      	bne.n	80024a6 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002418:	4b33      	ldr	r3, [pc, #204]	@ (80024e8 <HAL_RCC_OscConfig+0x4cc>)
 800241a:	2200      	movs	r2, #0
 800241c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800241e:	f7ff fb31 	bl	8001a84 <HAL_GetTick>
 8002422:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002424:	e008      	b.n	8002438 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002426:	f7ff fb2d 	bl	8001a84 <HAL_GetTick>
 800242a:	4602      	mov	r2, r0
 800242c:	693b      	ldr	r3, [r7, #16]
 800242e:	1ad3      	subs	r3, r2, r3
 8002430:	2b02      	cmp	r3, #2
 8002432:	d901      	bls.n	8002438 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002434:	2303      	movs	r3, #3
 8002436:	e06d      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002438:	4b29      	ldr	r3, [pc, #164]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002440:	2b00      	cmp	r3, #0
 8002442:	d1f0      	bne.n	8002426 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002444:	687b      	ldr	r3, [r7, #4]
 8002446:	6a1b      	ldr	r3, [r3, #32]
 8002448:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800244c:	d108      	bne.n	8002460 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800244e:	4b24      	ldr	r3, [pc, #144]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002450:	685b      	ldr	r3, [r3, #4]
 8002452:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	689b      	ldr	r3, [r3, #8]
 800245a:	4921      	ldr	r1, [pc, #132]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800245c:	4313      	orrs	r3, r2
 800245e:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002460:	4b1f      	ldr	r3, [pc, #124]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8002468:	687b      	ldr	r3, [r7, #4]
 800246a:	6a19      	ldr	r1, [r3, #32]
 800246c:	687b      	ldr	r3, [r7, #4]
 800246e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002470:	430b      	orrs	r3, r1
 8002472:	491b      	ldr	r1, [pc, #108]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 8002474:	4313      	orrs	r3, r2
 8002476:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8002478:	4b1b      	ldr	r3, [pc, #108]	@ (80024e8 <HAL_RCC_OscConfig+0x4cc>)
 800247a:	2201      	movs	r2, #1
 800247c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800247e:	f7ff fb01 	bl	8001a84 <HAL_GetTick>
 8002482:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002484:	e008      	b.n	8002498 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002486:	f7ff fafd 	bl	8001a84 <HAL_GetTick>
 800248a:	4602      	mov	r2, r0
 800248c:	693b      	ldr	r3, [r7, #16]
 800248e:	1ad3      	subs	r3, r2, r3
 8002490:	2b02      	cmp	r3, #2
 8002492:	d901      	bls.n	8002498 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002494:	2303      	movs	r3, #3
 8002496:	e03d      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002498:	4b11      	ldr	r3, [pc, #68]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024a0:	2b00      	cmp	r3, #0
 80024a2:	d0f0      	beq.n	8002486 <HAL_RCC_OscConfig+0x46a>
 80024a4:	e035      	b.n	8002512 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80024a6:	4b10      	ldr	r3, [pc, #64]	@ (80024e8 <HAL_RCC_OscConfig+0x4cc>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80024ac:	f7ff faea 	bl	8001a84 <HAL_GetTick>
 80024b0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024b2:	e008      	b.n	80024c6 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80024b4:	f7ff fae6 	bl	8001a84 <HAL_GetTick>
 80024b8:	4602      	mov	r2, r0
 80024ba:	693b      	ldr	r3, [r7, #16]
 80024bc:	1ad3      	subs	r3, r2, r3
 80024be:	2b02      	cmp	r3, #2
 80024c0:	d901      	bls.n	80024c6 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80024c2:	2303      	movs	r3, #3
 80024c4:	e026      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80024c6:	4b06      	ldr	r3, [pc, #24]	@ (80024e0 <HAL_RCC_OscConfig+0x4c4>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80024ce:	2b00      	cmp	r3, #0
 80024d0:	d1f0      	bne.n	80024b4 <HAL_RCC_OscConfig+0x498>
 80024d2:	e01e      	b.n	8002512 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	69db      	ldr	r3, [r3, #28]
 80024d8:	2b01      	cmp	r3, #1
 80024da:	d107      	bne.n	80024ec <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80024dc:	2301      	movs	r3, #1
 80024de:	e019      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
 80024e0:	40021000 	.word	0x40021000
 80024e4:	40007000 	.word	0x40007000
 80024e8:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80024ec:	4b0b      	ldr	r3, [pc, #44]	@ (800251c <HAL_RCC_OscConfig+0x500>)
 80024ee:	685b      	ldr	r3, [r3, #4]
 80024f0:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80024f2:	68fb      	ldr	r3, [r7, #12]
 80024f4:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80024f8:	687b      	ldr	r3, [r7, #4]
 80024fa:	6a1b      	ldr	r3, [r3, #32]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d106      	bne.n	800250e <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8002506:	687b      	ldr	r3, [r7, #4]
 8002508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800250a:	429a      	cmp	r2, r3
 800250c:	d001      	beq.n	8002512 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800250e:	2301      	movs	r3, #1
 8002510:	e000      	b.n	8002514 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002512:	2300      	movs	r3, #0
}
 8002514:	4618      	mov	r0, r3
 8002516:	3718      	adds	r7, #24
 8002518:	46bd      	mov	sp, r7
 800251a:	bd80      	pop	{r7, pc}
 800251c:	40021000 	.word	0x40021000

08002520 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002520:	b580      	push	{r7, lr}
 8002522:	b084      	sub	sp, #16
 8002524:	af00      	add	r7, sp, #0
 8002526:	6078      	str	r0, [r7, #4]
 8002528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800252a:	687b      	ldr	r3, [r7, #4]
 800252c:	2b00      	cmp	r3, #0
 800252e:	d101      	bne.n	8002534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002530:	2301      	movs	r3, #1
 8002532:	e0d0      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002534:	4b6a      	ldr	r3, [pc, #424]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002536:	681b      	ldr	r3, [r3, #0]
 8002538:	f003 0307 	and.w	r3, r3, #7
 800253c:	683a      	ldr	r2, [r7, #0]
 800253e:	429a      	cmp	r2, r3
 8002540:	d910      	bls.n	8002564 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002542:	4b67      	ldr	r3, [pc, #412]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002544:	681b      	ldr	r3, [r3, #0]
 8002546:	f023 0207 	bic.w	r2, r3, #7
 800254a:	4965      	ldr	r1, [pc, #404]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 800254c:	683b      	ldr	r3, [r7, #0]
 800254e:	4313      	orrs	r3, r2
 8002550:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002552:	4b63      	ldr	r3, [pc, #396]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002554:	681b      	ldr	r3, [r3, #0]
 8002556:	f003 0307 	and.w	r3, r3, #7
 800255a:	683a      	ldr	r2, [r7, #0]
 800255c:	429a      	cmp	r2, r3
 800255e:	d001      	beq.n	8002564 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002560:	2301      	movs	r3, #1
 8002562:	e0b8      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	681b      	ldr	r3, [r3, #0]
 8002568:	f003 0302 	and.w	r3, r3, #2
 800256c:	2b00      	cmp	r3, #0
 800256e:	d020      	beq.n	80025b2 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	681b      	ldr	r3, [r3, #0]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	2b00      	cmp	r3, #0
 800257a:	d005      	beq.n	8002588 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800257c:	4b59      	ldr	r3, [pc, #356]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800257e:	685b      	ldr	r3, [r3, #4]
 8002580:	4a58      	ldr	r2, [pc, #352]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002582:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8002586:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002588:	687b      	ldr	r3, [r7, #4]
 800258a:	681b      	ldr	r3, [r3, #0]
 800258c:	f003 0308 	and.w	r3, r3, #8
 8002590:	2b00      	cmp	r3, #0
 8002592:	d005      	beq.n	80025a0 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002594:	4b53      	ldr	r3, [pc, #332]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002596:	685b      	ldr	r3, [r3, #4]
 8002598:	4a52      	ldr	r2, [pc, #328]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800259a:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800259e:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80025a0:	4b50      	ldr	r3, [pc, #320]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025a2:	685b      	ldr	r3, [r3, #4]
 80025a4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	689b      	ldr	r3, [r3, #8]
 80025ac:	494d      	ldr	r1, [pc, #308]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025ae:	4313      	orrs	r3, r2
 80025b0:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80025b2:	687b      	ldr	r3, [r7, #4]
 80025b4:	681b      	ldr	r3, [r3, #0]
 80025b6:	f003 0301 	and.w	r3, r3, #1
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d040      	beq.n	8002640 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	685b      	ldr	r3, [r3, #4]
 80025c2:	2b01      	cmp	r3, #1
 80025c4:	d107      	bne.n	80025d6 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80025c6:	4b47      	ldr	r3, [pc, #284]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025c8:	681b      	ldr	r3, [r3, #0]
 80025ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d115      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025d2:	2301      	movs	r3, #1
 80025d4:	e07f      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	2b02      	cmp	r3, #2
 80025dc:	d107      	bne.n	80025ee <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80025de:	4b41      	ldr	r3, [pc, #260]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025e0:	681b      	ldr	r3, [r3, #0]
 80025e2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	d109      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025ea:	2301      	movs	r3, #1
 80025ec:	e073      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025ee:	4b3d      	ldr	r3, [pc, #244]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80025f0:	681b      	ldr	r3, [r3, #0]
 80025f2:	f003 0302 	and.w	r3, r3, #2
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e06b      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80025fe:	4b39      	ldr	r3, [pc, #228]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002600:	685b      	ldr	r3, [r3, #4]
 8002602:	f023 0203 	bic.w	r2, r3, #3
 8002606:	687b      	ldr	r3, [r7, #4]
 8002608:	685b      	ldr	r3, [r3, #4]
 800260a:	4936      	ldr	r1, [pc, #216]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800260c:	4313      	orrs	r3, r2
 800260e:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002610:	f7ff fa38 	bl	8001a84 <HAL_GetTick>
 8002614:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002616:	e00a      	b.n	800262e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002618:	f7ff fa34 	bl	8001a84 <HAL_GetTick>
 800261c:	4602      	mov	r2, r0
 800261e:	68fb      	ldr	r3, [r7, #12]
 8002620:	1ad3      	subs	r3, r2, r3
 8002622:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002626:	4293      	cmp	r3, r2
 8002628:	d901      	bls.n	800262e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800262a:	2303      	movs	r3, #3
 800262c:	e053      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800262e:	4b2d      	ldr	r3, [pc, #180]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 8002630:	685b      	ldr	r3, [r3, #4]
 8002632:	f003 020c 	and.w	r2, r3, #12
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	685b      	ldr	r3, [r3, #4]
 800263a:	009b      	lsls	r3, r3, #2
 800263c:	429a      	cmp	r2, r3
 800263e:	d1eb      	bne.n	8002618 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002640:	4b27      	ldr	r3, [pc, #156]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	f003 0307 	and.w	r3, r3, #7
 8002648:	683a      	ldr	r2, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	d210      	bcs.n	8002670 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800264e:	4b24      	ldr	r3, [pc, #144]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002650:	681b      	ldr	r3, [r3, #0]
 8002652:	f023 0207 	bic.w	r2, r3, #7
 8002656:	4922      	ldr	r1, [pc, #136]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002658:	683b      	ldr	r3, [r7, #0]
 800265a:	4313      	orrs	r3, r2
 800265c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800265e:	4b20      	ldr	r3, [pc, #128]	@ (80026e0 <HAL_RCC_ClockConfig+0x1c0>)
 8002660:	681b      	ldr	r3, [r3, #0]
 8002662:	f003 0307 	and.w	r3, r3, #7
 8002666:	683a      	ldr	r2, [r7, #0]
 8002668:	429a      	cmp	r2, r3
 800266a:	d001      	beq.n	8002670 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 800266c:	2301      	movs	r3, #1
 800266e:	e032      	b.n	80026d6 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	f003 0304 	and.w	r3, r3, #4
 8002678:	2b00      	cmp	r3, #0
 800267a:	d008      	beq.n	800268e <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800267c:	4b19      	ldr	r3, [pc, #100]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800267e:	685b      	ldr	r3, [r3, #4]
 8002680:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	68db      	ldr	r3, [r3, #12]
 8002688:	4916      	ldr	r1, [pc, #88]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800268a:	4313      	orrs	r3, r2
 800268c:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800268e:	687b      	ldr	r3, [r7, #4]
 8002690:	681b      	ldr	r3, [r3, #0]
 8002692:	f003 0308 	and.w	r3, r3, #8
 8002696:	2b00      	cmp	r3, #0
 8002698:	d009      	beq.n	80026ae <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800269a:	4b12      	ldr	r3, [pc, #72]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 800269c:	685b      	ldr	r3, [r3, #4]
 800269e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80026a2:	687b      	ldr	r3, [r7, #4]
 80026a4:	691b      	ldr	r3, [r3, #16]
 80026a6:	00db      	lsls	r3, r3, #3
 80026a8:	490e      	ldr	r1, [pc, #56]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026aa:	4313      	orrs	r3, r2
 80026ac:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80026ae:	f000 f821 	bl	80026f4 <HAL_RCC_GetSysClockFreq>
 80026b2:	4602      	mov	r2, r0
 80026b4:	4b0b      	ldr	r3, [pc, #44]	@ (80026e4 <HAL_RCC_ClockConfig+0x1c4>)
 80026b6:	685b      	ldr	r3, [r3, #4]
 80026b8:	091b      	lsrs	r3, r3, #4
 80026ba:	f003 030f 	and.w	r3, r3, #15
 80026be:	490a      	ldr	r1, [pc, #40]	@ (80026e8 <HAL_RCC_ClockConfig+0x1c8>)
 80026c0:	5ccb      	ldrb	r3, [r1, r3]
 80026c2:	fa22 f303 	lsr.w	r3, r2, r3
 80026c6:	4a09      	ldr	r2, [pc, #36]	@ (80026ec <HAL_RCC_ClockConfig+0x1cc>)
 80026c8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80026ca:	4b09      	ldr	r3, [pc, #36]	@ (80026f0 <HAL_RCC_ClockConfig+0x1d0>)
 80026cc:	681b      	ldr	r3, [r3, #0]
 80026ce:	4618      	mov	r0, r3
 80026d0:	f7ff f996 	bl	8001a00 <HAL_InitTick>

  return HAL_OK;
 80026d4:	2300      	movs	r3, #0
}
 80026d6:	4618      	mov	r0, r3
 80026d8:	3710      	adds	r7, #16
 80026da:	46bd      	mov	sp, r7
 80026dc:	bd80      	pop	{r7, pc}
 80026de:	bf00      	nop
 80026e0:	40022000 	.word	0x40022000
 80026e4:	40021000 	.word	0x40021000
 80026e8:	08004ae0 	.word	0x08004ae0
 80026ec:	20000008 	.word	0x20000008
 80026f0:	2000000c 	.word	0x2000000c

080026f4 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80026f4:	b480      	push	{r7}
 80026f6:	b087      	sub	sp, #28
 80026f8:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	2300      	movs	r3, #0
 8002700:	60bb      	str	r3, [r7, #8]
 8002702:	2300      	movs	r3, #0
 8002704:	617b      	str	r3, [r7, #20]
 8002706:	2300      	movs	r3, #0
 8002708:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800270a:	2300      	movs	r3, #0
 800270c:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 800270e:	4b1e      	ldr	r3, [pc, #120]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x94>)
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002714:	68fb      	ldr	r3, [r7, #12]
 8002716:	f003 030c 	and.w	r3, r3, #12
 800271a:	2b04      	cmp	r3, #4
 800271c:	d002      	beq.n	8002724 <HAL_RCC_GetSysClockFreq+0x30>
 800271e:	2b08      	cmp	r3, #8
 8002720:	d003      	beq.n	800272a <HAL_RCC_GetSysClockFreq+0x36>
 8002722:	e027      	b.n	8002774 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002724:	4b19      	ldr	r3, [pc, #100]	@ (800278c <HAL_RCC_GetSysClockFreq+0x98>)
 8002726:	613b      	str	r3, [r7, #16]
      break;
 8002728:	e027      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800272a:	68fb      	ldr	r3, [r7, #12]
 800272c:	0c9b      	lsrs	r3, r3, #18
 800272e:	f003 030f 	and.w	r3, r3, #15
 8002732:	4a17      	ldr	r2, [pc, #92]	@ (8002790 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002734:	5cd3      	ldrb	r3, [r2, r3]
 8002736:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002738:	68fb      	ldr	r3, [r7, #12]
 800273a:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800273e:	2b00      	cmp	r3, #0
 8002740:	d010      	beq.n	8002764 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002742:	4b11      	ldr	r3, [pc, #68]	@ (8002788 <HAL_RCC_GetSysClockFreq+0x94>)
 8002744:	685b      	ldr	r3, [r3, #4]
 8002746:	0c5b      	lsrs	r3, r3, #17
 8002748:	f003 0301 	and.w	r3, r3, #1
 800274c:	4a11      	ldr	r2, [pc, #68]	@ (8002794 <HAL_RCC_GetSysClockFreq+0xa0>)
 800274e:	5cd3      	ldrb	r3, [r2, r3]
 8002750:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	4a0d      	ldr	r2, [pc, #52]	@ (800278c <HAL_RCC_GetSysClockFreq+0x98>)
 8002756:	fb03 f202 	mul.w	r2, r3, r2
 800275a:	68bb      	ldr	r3, [r7, #8]
 800275c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002760:	617b      	str	r3, [r7, #20]
 8002762:	e004      	b.n	800276e <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a0c      	ldr	r2, [pc, #48]	@ (8002798 <HAL_RCC_GetSysClockFreq+0xa4>)
 8002768:	fb02 f303 	mul.w	r3, r2, r3
 800276c:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 800276e:	697b      	ldr	r3, [r7, #20]
 8002770:	613b      	str	r3, [r7, #16]
      break;
 8002772:	e002      	b.n	800277a <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002774:	4b05      	ldr	r3, [pc, #20]	@ (800278c <HAL_RCC_GetSysClockFreq+0x98>)
 8002776:	613b      	str	r3, [r7, #16]
      break;
 8002778:	bf00      	nop
    }
  }
  return sysclockfreq;
 800277a:	693b      	ldr	r3, [r7, #16]
}
 800277c:	4618      	mov	r0, r3
 800277e:	371c      	adds	r7, #28
 8002780:	46bd      	mov	sp, r7
 8002782:	bc80      	pop	{r7}
 8002784:	4770      	bx	lr
 8002786:	bf00      	nop
 8002788:	40021000 	.word	0x40021000
 800278c:	007a1200 	.word	0x007a1200
 8002790:	08004af0 	.word	0x08004af0
 8002794:	08004b00 	.word	0x08004b00
 8002798:	003d0900 	.word	0x003d0900

0800279c <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 800279c:	b480      	push	{r7}
 800279e:	b085      	sub	sp, #20
 80027a0:	af00      	add	r7, sp, #0
 80027a2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80027a4:	4b0a      	ldr	r3, [pc, #40]	@ (80027d0 <RCC_Delay+0x34>)
 80027a6:	681b      	ldr	r3, [r3, #0]
 80027a8:	4a0a      	ldr	r2, [pc, #40]	@ (80027d4 <RCC_Delay+0x38>)
 80027aa:	fba2 2303 	umull	r2, r3, r2, r3
 80027ae:	0a5b      	lsrs	r3, r3, #9
 80027b0:	687a      	ldr	r2, [r7, #4]
 80027b2:	fb02 f303 	mul.w	r3, r2, r3
 80027b6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80027b8:	bf00      	nop
  }
  while (Delay --);
 80027ba:	68fb      	ldr	r3, [r7, #12]
 80027bc:	1e5a      	subs	r2, r3, #1
 80027be:	60fa      	str	r2, [r7, #12]
 80027c0:	2b00      	cmp	r3, #0
 80027c2:	d1f9      	bne.n	80027b8 <RCC_Delay+0x1c>
}
 80027c4:	bf00      	nop
 80027c6:	bf00      	nop
 80027c8:	3714      	adds	r7, #20
 80027ca:	46bd      	mov	sp, r7
 80027cc:	bc80      	pop	{r7}
 80027ce:	4770      	bx	lr
 80027d0:	20000008 	.word	0x20000008
 80027d4:	10624dd3 	.word	0x10624dd3

080027d8 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b082      	sub	sp, #8
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d101      	bne.n	80027ea <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80027e6:	2301      	movs	r3, #1
 80027e8:	e076      	b.n	80028d8 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d108      	bne.n	8002804 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	685b      	ldr	r3, [r3, #4]
 80027f6:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80027fa:	d009      	beq.n	8002810 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	2200      	movs	r2, #0
 8002800:	61da      	str	r2, [r3, #28]
 8002802:	e005      	b.n	8002810 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	2200      	movs	r2, #0
 8002808:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800280a:	687b      	ldr	r3, [r7, #4]
 800280c:	2200      	movs	r2, #0
 800280e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002810:	687b      	ldr	r3, [r7, #4]
 8002812:	2200      	movs	r2, #0
 8002814:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 800281c:	b2db      	uxtb	r3, r3
 800281e:	2b00      	cmp	r3, #0
 8002820:	d106      	bne.n	8002830 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	2200      	movs	r2, #0
 8002826:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800282a:	6878      	ldr	r0, [r7, #4]
 800282c:	f7fe ff40 	bl	80016b0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002830:	687b      	ldr	r3, [r7, #4]
 8002832:	2202      	movs	r2, #2
 8002834:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	681b      	ldr	r3, [r3, #0]
 800283c:	681a      	ldr	r2, [r3, #0]
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	681b      	ldr	r3, [r3, #0]
 8002842:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002846:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002848:	687b      	ldr	r3, [r7, #4]
 800284a:	685b      	ldr	r3, [r3, #4]
 800284c:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002850:	687b      	ldr	r3, [r7, #4]
 8002852:	689b      	ldr	r3, [r3, #8]
 8002854:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002858:	431a      	orrs	r2, r3
 800285a:	687b      	ldr	r3, [r7, #4]
 800285c:	68db      	ldr	r3, [r3, #12]
 800285e:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002862:	431a      	orrs	r2, r3
 8002864:	687b      	ldr	r3, [r7, #4]
 8002866:	691b      	ldr	r3, [r3, #16]
 8002868:	f003 0302 	and.w	r3, r3, #2
 800286c:	431a      	orrs	r2, r3
 800286e:	687b      	ldr	r3, [r7, #4]
 8002870:	695b      	ldr	r3, [r3, #20]
 8002872:	f003 0301 	and.w	r3, r3, #1
 8002876:	431a      	orrs	r2, r3
 8002878:	687b      	ldr	r3, [r7, #4]
 800287a:	699b      	ldr	r3, [r3, #24]
 800287c:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002880:	431a      	orrs	r2, r3
 8002882:	687b      	ldr	r3, [r7, #4]
 8002884:	69db      	ldr	r3, [r3, #28]
 8002886:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800288a:	431a      	orrs	r2, r3
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a1b      	ldr	r3, [r3, #32]
 8002890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002894:	ea42 0103 	orr.w	r1, r2, r3
 8002898:	687b      	ldr	r3, [r7, #4]
 800289a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800289c:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	681b      	ldr	r3, [r3, #0]
 80028a4:	430a      	orrs	r2, r1
 80028a6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	699b      	ldr	r3, [r3, #24]
 80028ac:	0c1a      	lsrs	r2, r3, #16
 80028ae:	687b      	ldr	r3, [r7, #4]
 80028b0:	681b      	ldr	r3, [r3, #0]
 80028b2:	f002 0204 	and.w	r2, r2, #4
 80028b6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80028b8:	687b      	ldr	r3, [r7, #4]
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	69da      	ldr	r2, [r3, #28]
 80028be:	687b      	ldr	r3, [r7, #4]
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028c6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	2200      	movs	r2, #0
 80028cc:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80028ce:	687b      	ldr	r3, [r7, #4]
 80028d0:	2201      	movs	r2, #1
 80028d2:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	3708      	adds	r7, #8
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80028e0:	b580      	push	{r7, lr}
 80028e2:	b082      	sub	sp, #8
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028e8:	687b      	ldr	r3, [r7, #4]
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d101      	bne.n	80028f2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e041      	b.n	8002976 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028f8:	b2db      	uxtb	r3, r3
 80028fa:	2b00      	cmp	r3, #0
 80028fc:	d106      	bne.n	800290c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028fe:	687b      	ldr	r3, [r7, #4]
 8002900:	2200      	movs	r2, #0
 8002902:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002906:	6878      	ldr	r0, [r7, #4]
 8002908:	f7fe ff10 	bl	800172c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2202      	movs	r2, #2
 8002910:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	681a      	ldr	r2, [r3, #0]
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	3304      	adds	r3, #4
 800291c:	4619      	mov	r1, r3
 800291e:	4610      	mov	r0, r2
 8002920:	f000 fc38 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800294c:	687b      	ldr	r3, [r7, #4]
 800294e:	2201      	movs	r2, #1
 8002950:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002954:	687b      	ldr	r3, [r7, #4]
 8002956:	2201      	movs	r2, #1
 8002958:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 800295c:	687b      	ldr	r3, [r7, #4]
 800295e:	2201      	movs	r2, #1
 8002960:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	2201      	movs	r2, #1
 8002968:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800296c:	687b      	ldr	r3, [r7, #4]
 800296e:	2201      	movs	r2, #1
 8002970:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002974:	2300      	movs	r3, #0
}
 8002976:	4618      	mov	r0, r3
 8002978:	3708      	adds	r7, #8
 800297a:	46bd      	mov	sp, r7
 800297c:	bd80      	pop	{r7, pc}
	...

08002980 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002980:	b480      	push	{r7}
 8002982:	b085      	sub	sp, #20
 8002984:	af00      	add	r7, sp, #0
 8002986:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800298e:	b2db      	uxtb	r3, r3
 8002990:	2b01      	cmp	r3, #1
 8002992:	d001      	beq.n	8002998 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002994:	2301      	movs	r3, #1
 8002996:	e03a      	b.n	8002a0e <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	2202      	movs	r2, #2
 800299c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	68da      	ldr	r2, [r3, #12]
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	681b      	ldr	r3, [r3, #0]
 80029aa:	f042 0201 	orr.w	r2, r2, #1
 80029ae:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80029b0:	687b      	ldr	r3, [r7, #4]
 80029b2:	681b      	ldr	r3, [r3, #0]
 80029b4:	4a18      	ldr	r2, [pc, #96]	@ (8002a18 <HAL_TIM_Base_Start_IT+0x98>)
 80029b6:	4293      	cmp	r3, r2
 80029b8:	d00e      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	681b      	ldr	r3, [r3, #0]
 80029be:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80029c2:	d009      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029c4:	687b      	ldr	r3, [r7, #4]
 80029c6:	681b      	ldr	r3, [r3, #0]
 80029c8:	4a14      	ldr	r2, [pc, #80]	@ (8002a1c <HAL_TIM_Base_Start_IT+0x9c>)
 80029ca:	4293      	cmp	r3, r2
 80029cc:	d004      	beq.n	80029d8 <HAL_TIM_Base_Start_IT+0x58>
 80029ce:	687b      	ldr	r3, [r7, #4]
 80029d0:	681b      	ldr	r3, [r3, #0]
 80029d2:	4a13      	ldr	r2, [pc, #76]	@ (8002a20 <HAL_TIM_Base_Start_IT+0xa0>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d111      	bne.n	80029fc <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80029d8:	687b      	ldr	r3, [r7, #4]
 80029da:	681b      	ldr	r3, [r3, #0]
 80029dc:	689b      	ldr	r3, [r3, #8]
 80029de:	f003 0307 	and.w	r3, r3, #7
 80029e2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029e4:	68fb      	ldr	r3, [r7, #12]
 80029e6:	2b06      	cmp	r3, #6
 80029e8:	d010      	beq.n	8002a0c <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80029ea:	687b      	ldr	r3, [r7, #4]
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	681b      	ldr	r3, [r3, #0]
 80029f4:	f042 0201 	orr.w	r2, r2, #1
 80029f8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80029fa:	e007      	b.n	8002a0c <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80029fc:	687b      	ldr	r3, [r7, #4]
 80029fe:	681b      	ldr	r3, [r3, #0]
 8002a00:	681a      	ldr	r2, [r3, #0]
 8002a02:	687b      	ldr	r3, [r7, #4]
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f042 0201 	orr.w	r2, r2, #1
 8002a0a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a0c:	2300      	movs	r3, #0
}
 8002a0e:	4618      	mov	r0, r3
 8002a10:	3714      	adds	r7, #20
 8002a12:	46bd      	mov	sp, r7
 8002a14:	bc80      	pop	{r7}
 8002a16:	4770      	bx	lr
 8002a18:	40012c00 	.word	0x40012c00
 8002a1c:	40000400 	.word	0x40000400
 8002a20:	40000800 	.word	0x40000800

08002a24 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002a24:	b580      	push	{r7, lr}
 8002a26:	b082      	sub	sp, #8
 8002a28:	af00      	add	r7, sp, #0
 8002a2a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002a2c:	687b      	ldr	r3, [r7, #4]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	d101      	bne.n	8002a36 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002a32:	2301      	movs	r3, #1
 8002a34:	e041      	b.n	8002aba <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002a36:	687b      	ldr	r3, [r7, #4]
 8002a38:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	2b00      	cmp	r3, #0
 8002a40:	d106      	bne.n	8002a50 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002a42:	687b      	ldr	r3, [r7, #4]
 8002a44:	2200      	movs	r2, #0
 8002a46:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002a4a:	6878      	ldr	r0, [r7, #4]
 8002a4c:	f000 f839 	bl	8002ac2 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002a50:	687b      	ldr	r3, [r7, #4]
 8002a52:	2202      	movs	r2, #2
 8002a54:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681a      	ldr	r2, [r3, #0]
 8002a5c:	687b      	ldr	r3, [r7, #4]
 8002a5e:	3304      	adds	r3, #4
 8002a60:	4619      	mov	r1, r3
 8002a62:	4610      	mov	r0, r2
 8002a64:	f000 fb96 	bl	8003194 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	2201      	movs	r2, #1
 8002a6c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	2201      	movs	r2, #1
 8002a74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	2201      	movs	r2, #1
 8002a7c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002a80:	687b      	ldr	r3, [r7, #4]
 8002a82:	2201      	movs	r2, #1
 8002a84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a88:	687b      	ldr	r3, [r7, #4]
 8002a8a:	2201      	movs	r2, #1
 8002a8c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002a90:	687b      	ldr	r3, [r7, #4]
 8002a92:	2201      	movs	r2, #1
 8002a94:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	2201      	movs	r2, #1
 8002aa4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	2201      	movs	r2, #1
 8002aac:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2201      	movs	r2, #1
 8002ab4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002ab8:	2300      	movs	r3, #0
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	3708      	adds	r7, #8
 8002abe:	46bd      	mov	sp, r7
 8002ac0:	bd80      	pop	{r7, pc}

08002ac2 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ac2:	b480      	push	{r7}
 8002ac4:	b083      	sub	sp, #12
 8002ac6:	af00      	add	r7, sp, #0
 8002ac8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002aca:	bf00      	nop
 8002acc:	370c      	adds	r7, #12
 8002ace:	46bd      	mov	sp, r7
 8002ad0:	bc80      	pop	{r7}
 8002ad2:	4770      	bx	lr

08002ad4 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ad4:	b580      	push	{r7, lr}
 8002ad6:	b084      	sub	sp, #16
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	2b00      	cmp	r3, #0
 8002ae2:	d109      	bne.n	8002af8 <HAL_TIM_PWM_Start+0x24>
 8002ae4:	687b      	ldr	r3, [r7, #4]
 8002ae6:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002aea:	b2db      	uxtb	r3, r3
 8002aec:	2b01      	cmp	r3, #1
 8002aee:	bf14      	ite	ne
 8002af0:	2301      	movne	r3, #1
 8002af2:	2300      	moveq	r3, #0
 8002af4:	b2db      	uxtb	r3, r3
 8002af6:	e022      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002af8:	683b      	ldr	r3, [r7, #0]
 8002afa:	2b04      	cmp	r3, #4
 8002afc:	d109      	bne.n	8002b12 <HAL_TIM_PWM_Start+0x3e>
 8002afe:	687b      	ldr	r3, [r7, #4]
 8002b00:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002b04:	b2db      	uxtb	r3, r3
 8002b06:	2b01      	cmp	r3, #1
 8002b08:	bf14      	ite	ne
 8002b0a:	2301      	movne	r3, #1
 8002b0c:	2300      	moveq	r3, #0
 8002b0e:	b2db      	uxtb	r3, r3
 8002b10:	e015      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b12:	683b      	ldr	r3, [r7, #0]
 8002b14:	2b08      	cmp	r3, #8
 8002b16:	d109      	bne.n	8002b2c <HAL_TIM_PWM_Start+0x58>
 8002b18:	687b      	ldr	r3, [r7, #4]
 8002b1a:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002b1e:	b2db      	uxtb	r3, r3
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	bf14      	ite	ne
 8002b24:	2301      	movne	r3, #1
 8002b26:	2300      	moveq	r3, #0
 8002b28:	b2db      	uxtb	r3, r3
 8002b2a:	e008      	b.n	8002b3e <HAL_TIM_PWM_Start+0x6a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002b32:	b2db      	uxtb	r3, r3
 8002b34:	2b01      	cmp	r3, #1
 8002b36:	bf14      	ite	ne
 8002b38:	2301      	movne	r3, #1
 8002b3a:	2300      	moveq	r3, #0
 8002b3c:	b2db      	uxtb	r3, r3
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d001      	beq.n	8002b46 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e05e      	b.n	8002c04 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002b46:	683b      	ldr	r3, [r7, #0]
 8002b48:	2b00      	cmp	r3, #0
 8002b4a:	d104      	bne.n	8002b56 <HAL_TIM_PWM_Start+0x82>
 8002b4c:	687b      	ldr	r3, [r7, #4]
 8002b4e:	2202      	movs	r2, #2
 8002b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002b54:	e013      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b56:	683b      	ldr	r3, [r7, #0]
 8002b58:	2b04      	cmp	r3, #4
 8002b5a:	d104      	bne.n	8002b66 <HAL_TIM_PWM_Start+0x92>
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	2202      	movs	r2, #2
 8002b60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002b64:	e00b      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b66:	683b      	ldr	r3, [r7, #0]
 8002b68:	2b08      	cmp	r3, #8
 8002b6a:	d104      	bne.n	8002b76 <HAL_TIM_PWM_Start+0xa2>
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2202      	movs	r2, #2
 8002b70:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002b74:	e003      	b.n	8002b7e <HAL_TIM_PWM_Start+0xaa>
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	2202      	movs	r2, #2
 8002b7a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	2201      	movs	r2, #1
 8002b84:	6839      	ldr	r1, [r7, #0]
 8002b86:	4618      	mov	r0, r3
 8002b88:	f000 fd84 	bl	8003694 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	681b      	ldr	r3, [r3, #0]
 8002b90:	4a1e      	ldr	r2, [pc, #120]	@ (8002c0c <HAL_TIM_PWM_Start+0x138>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d107      	bne.n	8002ba6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002b96:	687b      	ldr	r3, [r7, #4]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002b9c:	687b      	ldr	r3, [r7, #4]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002ba4:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a18      	ldr	r2, [pc, #96]	@ (8002c0c <HAL_TIM_PWM_Start+0x138>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d00e      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002bb8:	d009      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bba:	687b      	ldr	r3, [r7, #4]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	4a14      	ldr	r2, [pc, #80]	@ (8002c10 <HAL_TIM_PWM_Start+0x13c>)
 8002bc0:	4293      	cmp	r3, r2
 8002bc2:	d004      	beq.n	8002bce <HAL_TIM_PWM_Start+0xfa>
 8002bc4:	687b      	ldr	r3, [r7, #4]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	4a12      	ldr	r2, [pc, #72]	@ (8002c14 <HAL_TIM_PWM_Start+0x140>)
 8002bca:	4293      	cmp	r3, r2
 8002bcc:	d111      	bne.n	8002bf2 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002bce:	687b      	ldr	r3, [r7, #4]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	689b      	ldr	r3, [r3, #8]
 8002bd4:	f003 0307 	and.w	r3, r3, #7
 8002bd8:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	2b06      	cmp	r3, #6
 8002bde:	d010      	beq.n	8002c02 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002be0:	687b      	ldr	r3, [r7, #4]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	681a      	ldr	r2, [r3, #0]
 8002be6:	687b      	ldr	r3, [r7, #4]
 8002be8:	681b      	ldr	r3, [r3, #0]
 8002bea:	f042 0201 	orr.w	r2, r2, #1
 8002bee:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002bf0:	e007      	b.n	8002c02 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	681b      	ldr	r3, [r3, #0]
 8002bf6:	681a      	ldr	r2, [r3, #0]
 8002bf8:	687b      	ldr	r3, [r7, #4]
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	f042 0201 	orr.w	r2, r2, #1
 8002c00:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002c02:	2300      	movs	r3, #0
}
 8002c04:	4618      	mov	r0, r3
 8002c06:	3710      	adds	r7, #16
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40012c00 	.word	0x40012c00
 8002c10:	40000400 	.word	0x40000400
 8002c14:	40000800 	.word	0x40000800

08002c18 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	b082      	sub	sp, #8
 8002c1c:	af00      	add	r7, sp, #0
 8002c1e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	691b      	ldr	r3, [r3, #16]
 8002c26:	f003 0302 	and.w	r3, r3, #2
 8002c2a:	2b02      	cmp	r3, #2
 8002c2c:	d122      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	68db      	ldr	r3, [r3, #12]
 8002c34:	f003 0302 	and.w	r3, r3, #2
 8002c38:	2b02      	cmp	r3, #2
 8002c3a:	d11b      	bne.n	8002c74 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	f06f 0202 	mvn.w	r2, #2
 8002c44:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2201      	movs	r2, #1
 8002c4a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	699b      	ldr	r3, [r3, #24]
 8002c52:	f003 0303 	and.w	r3, r3, #3
 8002c56:	2b00      	cmp	r3, #0
 8002c58:	d003      	beq.n	8002c62 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002c5a:	6878      	ldr	r0, [r7, #4]
 8002c5c:	f000 fa7f 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002c60:	e005      	b.n	8002c6e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f000 fa72 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002c68:	6878      	ldr	r0, [r7, #4]
 8002c6a:	f000 fa81 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	2200      	movs	r2, #0
 8002c72:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	681b      	ldr	r3, [r3, #0]
 8002c78:	691b      	ldr	r3, [r3, #16]
 8002c7a:	f003 0304 	and.w	r3, r3, #4
 8002c7e:	2b04      	cmp	r3, #4
 8002c80:	d122      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002c82:	687b      	ldr	r3, [r7, #4]
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	68db      	ldr	r3, [r3, #12]
 8002c88:	f003 0304 	and.w	r3, r3, #4
 8002c8c:	2b04      	cmp	r3, #4
 8002c8e:	d11b      	bne.n	8002cc8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	f06f 0204 	mvn.w	r2, #4
 8002c98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002c9a:	687b      	ldr	r3, [r7, #4]
 8002c9c:	2202      	movs	r2, #2
 8002c9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002ca0:	687b      	ldr	r3, [r7, #4]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	699b      	ldr	r3, [r3, #24]
 8002ca6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002caa:	2b00      	cmp	r3, #0
 8002cac:	d003      	beq.n	8002cb6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fa55 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002cb4:	e005      	b.n	8002cc2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002cb6:	6878      	ldr	r0, [r7, #4]
 8002cb8:	f000 fa48 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002cbc:	6878      	ldr	r0, [r7, #4]
 8002cbe:	f000 fa57 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002cc2:	687b      	ldr	r3, [r7, #4]
 8002cc4:	2200      	movs	r2, #0
 8002cc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	681b      	ldr	r3, [r3, #0]
 8002ccc:	691b      	ldr	r3, [r3, #16]
 8002cce:	f003 0308 	and.w	r3, r3, #8
 8002cd2:	2b08      	cmp	r3, #8
 8002cd4:	d122      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	681b      	ldr	r3, [r3, #0]
 8002cda:	68db      	ldr	r3, [r3, #12]
 8002cdc:	f003 0308 	and.w	r3, r3, #8
 8002ce0:	2b08      	cmp	r3, #8
 8002ce2:	d11b      	bne.n	8002d1c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f06f 0208 	mvn.w	r2, #8
 8002cec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002cee:	687b      	ldr	r3, [r7, #4]
 8002cf0:	2204      	movs	r2, #4
 8002cf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002cf4:	687b      	ldr	r3, [r7, #4]
 8002cf6:	681b      	ldr	r3, [r3, #0]
 8002cf8:	69db      	ldr	r3, [r3, #28]
 8002cfa:	f003 0303 	and.w	r3, r3, #3
 8002cfe:	2b00      	cmp	r3, #0
 8002d00:	d003      	beq.n	8002d0a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d02:	6878      	ldr	r0, [r7, #4]
 8002d04:	f000 fa2b 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002d08:	e005      	b.n	8002d16 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d0a:	6878      	ldr	r0, [r7, #4]
 8002d0c:	f000 fa1e 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d10:	6878      	ldr	r0, [r7, #4]
 8002d12:	f000 fa2d 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	2200      	movs	r2, #0
 8002d1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002d1c:	687b      	ldr	r3, [r7, #4]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	691b      	ldr	r3, [r3, #16]
 8002d22:	f003 0310 	and.w	r3, r3, #16
 8002d26:	2b10      	cmp	r3, #16
 8002d28:	d122      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	68db      	ldr	r3, [r3, #12]
 8002d30:	f003 0310 	and.w	r3, r3, #16
 8002d34:	2b10      	cmp	r3, #16
 8002d36:	d11b      	bne.n	8002d70 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681b      	ldr	r3, [r3, #0]
 8002d3c:	f06f 0210 	mvn.w	r2, #16
 8002d40:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2208      	movs	r2, #8
 8002d46:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	681b      	ldr	r3, [r3, #0]
 8002d4c:	69db      	ldr	r3, [r3, #28]
 8002d4e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	d003      	beq.n	8002d5e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f000 fa01 	bl	800315e <HAL_TIM_IC_CaptureCallback>
 8002d5c:	e005      	b.n	8002d6a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002d5e:	6878      	ldr	r0, [r7, #4]
 8002d60:	f000 f9f4 	bl	800314c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002d64:	6878      	ldr	r0, [r7, #4]
 8002d66:	f000 fa03 	bl	8003170 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002d6a:	687b      	ldr	r3, [r7, #4]
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	691b      	ldr	r3, [r3, #16]
 8002d76:	f003 0301 	and.w	r3, r3, #1
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d10e      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002d7e:	687b      	ldr	r3, [r7, #4]
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	68db      	ldr	r3, [r3, #12]
 8002d84:	f003 0301 	and.w	r3, r3, #1
 8002d88:	2b01      	cmp	r3, #1
 8002d8a:	d107      	bne.n	8002d9c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002d8c:	687b      	ldr	r3, [r7, #4]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f06f 0201 	mvn.w	r2, #1
 8002d94:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002d96:	6878      	ldr	r0, [r7, #4]
 8002d98:	f000 f9cf 	bl	800313a <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691b      	ldr	r3, [r3, #16]
 8002da2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002da6:	2b80      	cmp	r3, #128	@ 0x80
 8002da8:	d10e      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	681b      	ldr	r3, [r3, #0]
 8002dae:	68db      	ldr	r3, [r3, #12]
 8002db0:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002db4:	2b80      	cmp	r3, #128	@ 0x80
 8002db6:	d107      	bne.n	8002dc8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002dc0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002dc2:	6878      	ldr	r0, [r7, #4]
 8002dc4:	f000 fcf1 	bl	80037aa <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002dc8:	687b      	ldr	r3, [r7, #4]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	691b      	ldr	r3, [r3, #16]
 8002dce:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002dd2:	2b40      	cmp	r3, #64	@ 0x40
 8002dd4:	d10e      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	681b      	ldr	r3, [r3, #0]
 8002dda:	68db      	ldr	r3, [r3, #12]
 8002ddc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002de0:	2b40      	cmp	r3, #64	@ 0x40
 8002de2:	d107      	bne.n	8002df4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002de4:	687b      	ldr	r3, [r7, #4]
 8002de6:	681b      	ldr	r3, [r3, #0]
 8002de8:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002dec:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002dee:	6878      	ldr	r0, [r7, #4]
 8002df0:	f000 f9c7 	bl	8003182 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	691b      	ldr	r3, [r3, #16]
 8002dfa:	f003 0320 	and.w	r3, r3, #32
 8002dfe:	2b20      	cmp	r3, #32
 8002e00:	d10e      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	68db      	ldr	r3, [r3, #12]
 8002e08:	f003 0320 	and.w	r3, r3, #32
 8002e0c:	2b20      	cmp	r3, #32
 8002e0e:	d107      	bne.n	8002e20 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	681b      	ldr	r3, [r3, #0]
 8002e14:	f06f 0220 	mvn.w	r2, #32
 8002e18:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002e1a:	6878      	ldr	r0, [r7, #4]
 8002e1c:	f000 fcbc 	bl	8003798 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002e20:	bf00      	nop
 8002e22:	3708      	adds	r7, #8
 8002e24:	46bd      	mov	sp, r7
 8002e26:	bd80      	pop	{r7, pc}

08002e28 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002e28:	b580      	push	{r7, lr}
 8002e2a:	b086      	sub	sp, #24
 8002e2c:	af00      	add	r7, sp, #0
 8002e2e:	60f8      	str	r0, [r7, #12]
 8002e30:	60b9      	str	r1, [r7, #8]
 8002e32:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002e34:	2300      	movs	r3, #0
 8002e36:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e38:	68fb      	ldr	r3, [r7, #12]
 8002e3a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e3e:	2b01      	cmp	r3, #1
 8002e40:	d101      	bne.n	8002e46 <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002e42:	2302      	movs	r3, #2
 8002e44:	e0ae      	b.n	8002fa4 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002e46:	68fb      	ldr	r3, [r7, #12]
 8002e48:	2201      	movs	r2, #1
 8002e4a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	2b0c      	cmp	r3, #12
 8002e52:	f200 809f 	bhi.w	8002f94 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002e56:	a201      	add	r2, pc, #4	@ (adr r2, 8002e5c <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002e58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e5c:	08002e91 	.word	0x08002e91
 8002e60:	08002f95 	.word	0x08002f95
 8002e64:	08002f95 	.word	0x08002f95
 8002e68:	08002f95 	.word	0x08002f95
 8002e6c:	08002ed1 	.word	0x08002ed1
 8002e70:	08002f95 	.word	0x08002f95
 8002e74:	08002f95 	.word	0x08002f95
 8002e78:	08002f95 	.word	0x08002f95
 8002e7c:	08002f13 	.word	0x08002f13
 8002e80:	08002f95 	.word	0x08002f95
 8002e84:	08002f95 	.word	0x08002f95
 8002e88:	08002f95 	.word	0x08002f95
 8002e8c:	08002f53 	.word	0x08002f53
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	681b      	ldr	r3, [r3, #0]
 8002e94:	68b9      	ldr	r1, [r7, #8]
 8002e96:	4618      	mov	r0, r3
 8002e98:	f000 f9de 	bl	8003258 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	681b      	ldr	r3, [r3, #0]
 8002ea0:	699a      	ldr	r2, [r3, #24]
 8002ea2:	68fb      	ldr	r3, [r7, #12]
 8002ea4:	681b      	ldr	r3, [r3, #0]
 8002ea6:	f042 0208 	orr.w	r2, r2, #8
 8002eaa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002eac:	68fb      	ldr	r3, [r7, #12]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	699a      	ldr	r2, [r3, #24]
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	681b      	ldr	r3, [r3, #0]
 8002eb6:	f022 0204 	bic.w	r2, r2, #4
 8002eba:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002ebc:	68fb      	ldr	r3, [r7, #12]
 8002ebe:	681b      	ldr	r3, [r3, #0]
 8002ec0:	6999      	ldr	r1, [r3, #24]
 8002ec2:	68bb      	ldr	r3, [r7, #8]
 8002ec4:	691a      	ldr	r2, [r3, #16]
 8002ec6:	68fb      	ldr	r3, [r7, #12]
 8002ec8:	681b      	ldr	r3, [r3, #0]
 8002eca:	430a      	orrs	r2, r1
 8002ecc:	619a      	str	r2, [r3, #24]
      break;
 8002ece:	e064      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002ed0:	68fb      	ldr	r3, [r7, #12]
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	68b9      	ldr	r1, [r7, #8]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f000 fa24 	bl	8003324 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	699a      	ldr	r2, [r3, #24]
 8002ee2:	68fb      	ldr	r3, [r7, #12]
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002eea:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	699a      	ldr	r2, [r3, #24]
 8002ef2:	68fb      	ldr	r3, [r7, #12]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002efa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002efc:	68fb      	ldr	r3, [r7, #12]
 8002efe:	681b      	ldr	r3, [r3, #0]
 8002f00:	6999      	ldr	r1, [r3, #24]
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	691b      	ldr	r3, [r3, #16]
 8002f06:	021a      	lsls	r2, r3, #8
 8002f08:	68fb      	ldr	r3, [r7, #12]
 8002f0a:	681b      	ldr	r3, [r3, #0]
 8002f0c:	430a      	orrs	r2, r1
 8002f0e:	619a      	str	r2, [r3, #24]
      break;
 8002f10:	e043      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002f12:	68fb      	ldr	r3, [r7, #12]
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	68b9      	ldr	r1, [r7, #8]
 8002f18:	4618      	mov	r0, r3
 8002f1a:	f000 fa6d 	bl	80033f8 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002f1e:	68fb      	ldr	r3, [r7, #12]
 8002f20:	681b      	ldr	r3, [r3, #0]
 8002f22:	69da      	ldr	r2, [r3, #28]
 8002f24:	68fb      	ldr	r3, [r7, #12]
 8002f26:	681b      	ldr	r3, [r3, #0]
 8002f28:	f042 0208 	orr.w	r2, r2, #8
 8002f2c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002f2e:	68fb      	ldr	r3, [r7, #12]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	69da      	ldr	r2, [r3, #28]
 8002f34:	68fb      	ldr	r3, [r7, #12]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f022 0204 	bic.w	r2, r2, #4
 8002f3c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	681b      	ldr	r3, [r3, #0]
 8002f42:	69d9      	ldr	r1, [r3, #28]
 8002f44:	68bb      	ldr	r3, [r7, #8]
 8002f46:	691a      	ldr	r2, [r3, #16]
 8002f48:	68fb      	ldr	r3, [r7, #12]
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	430a      	orrs	r2, r1
 8002f4e:	61da      	str	r2, [r3, #28]
      break;
 8002f50:	e023      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002f52:	68fb      	ldr	r3, [r7, #12]
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	68b9      	ldr	r1, [r7, #8]
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f000 fab7 	bl	80034cc <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	69da      	ldr	r2, [r3, #28]
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002f6c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002f6e:	68fb      	ldr	r3, [r7, #12]
 8002f70:	681b      	ldr	r3, [r3, #0]
 8002f72:	69da      	ldr	r2, [r3, #28]
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002f7c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002f7e:	68fb      	ldr	r3, [r7, #12]
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	69d9      	ldr	r1, [r3, #28]
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	691b      	ldr	r3, [r3, #16]
 8002f88:	021a      	lsls	r2, r3, #8
 8002f8a:	68fb      	ldr	r3, [r7, #12]
 8002f8c:	681b      	ldr	r3, [r3, #0]
 8002f8e:	430a      	orrs	r2, r1
 8002f90:	61da      	str	r2, [r3, #28]
      break;
 8002f92:	e002      	b.n	8002f9a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002f94:	2301      	movs	r3, #1
 8002f96:	75fb      	strb	r3, [r7, #23]
      break;
 8002f98:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002f9a:	68fb      	ldr	r3, [r7, #12]
 8002f9c:	2200      	movs	r2, #0
 8002f9e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fa2:	7dfb      	ldrb	r3, [r7, #23]
}
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	3718      	adds	r7, #24
 8002fa8:	46bd      	mov	sp, r7
 8002faa:	bd80      	pop	{r7, pc}

08002fac <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b084      	sub	sp, #16
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
 8002fb4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002fb6:	2300      	movs	r3, #0
 8002fb8:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d101      	bne.n	8002fc8 <HAL_TIM_ConfigClockSource+0x1c>
 8002fc4:	2302      	movs	r3, #2
 8002fc6:	e0b4      	b.n	8003132 <HAL_TIM_ConfigClockSource+0x186>
 8002fc8:	687b      	ldr	r3, [r7, #4]
 8002fca:	2201      	movs	r2, #1
 8002fcc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	2202      	movs	r2, #2
 8002fd4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002fd8:	687b      	ldr	r3, [r7, #4]
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	689b      	ldr	r3, [r3, #8]
 8002fde:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002fe0:	68bb      	ldr	r3, [r7, #8]
 8002fe2:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002fe6:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002fe8:	68bb      	ldr	r3, [r7, #8]
 8002fea:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002fee:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	68ba      	ldr	r2, [r7, #8]
 8002ff6:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002ff8:	683b      	ldr	r3, [r7, #0]
 8002ffa:	681b      	ldr	r3, [r3, #0]
 8002ffc:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003000:	d03e      	beq.n	8003080 <HAL_TIM_ConfigClockSource+0xd4>
 8003002:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003006:	f200 8087 	bhi.w	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 800300a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800300e:	f000 8086 	beq.w	800311e <HAL_TIM_ConfigClockSource+0x172>
 8003012:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003016:	d87f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003018:	2b70      	cmp	r3, #112	@ 0x70
 800301a:	d01a      	beq.n	8003052 <HAL_TIM_ConfigClockSource+0xa6>
 800301c:	2b70      	cmp	r3, #112	@ 0x70
 800301e:	d87b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003020:	2b60      	cmp	r3, #96	@ 0x60
 8003022:	d050      	beq.n	80030c6 <HAL_TIM_ConfigClockSource+0x11a>
 8003024:	2b60      	cmp	r3, #96	@ 0x60
 8003026:	d877      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003028:	2b50      	cmp	r3, #80	@ 0x50
 800302a:	d03c      	beq.n	80030a6 <HAL_TIM_ConfigClockSource+0xfa>
 800302c:	2b50      	cmp	r3, #80	@ 0x50
 800302e:	d873      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003030:	2b40      	cmp	r3, #64	@ 0x40
 8003032:	d058      	beq.n	80030e6 <HAL_TIM_ConfigClockSource+0x13a>
 8003034:	2b40      	cmp	r3, #64	@ 0x40
 8003036:	d86f      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003038:	2b30      	cmp	r3, #48	@ 0x30
 800303a:	d064      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800303c:	2b30      	cmp	r3, #48	@ 0x30
 800303e:	d86b      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003040:	2b20      	cmp	r3, #32
 8003042:	d060      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003044:	2b20      	cmp	r3, #32
 8003046:	d867      	bhi.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
 8003048:	2b00      	cmp	r3, #0
 800304a:	d05c      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 800304c:	2b10      	cmp	r3, #16
 800304e:	d05a      	beq.n	8003106 <HAL_TIM_ConfigClockSource+0x15a>
 8003050:	e062      	b.n	8003118 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003056:	683b      	ldr	r3, [r7, #0]
 8003058:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800305a:	683b      	ldr	r3, [r7, #0]
 800305c:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800305e:	683b      	ldr	r3, [r7, #0]
 8003060:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003062:	f000 faf8 	bl	8003656 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003066:	687b      	ldr	r3, [r7, #4]
 8003068:	681b      	ldr	r3, [r3, #0]
 800306a:	689b      	ldr	r3, [r3, #8]
 800306c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800306e:	68bb      	ldr	r3, [r7, #8]
 8003070:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003074:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	681b      	ldr	r3, [r3, #0]
 800307a:	68ba      	ldr	r2, [r7, #8]
 800307c:	609a      	str	r2, [r3, #8]
      break;
 800307e:	e04f      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003080:	687b      	ldr	r3, [r7, #4]
 8003082:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003088:	683b      	ldr	r3, [r7, #0]
 800308a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003090:	f000 fae1 	bl	8003656 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003094:	687b      	ldr	r3, [r7, #4]
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	689a      	ldr	r2, [r3, #8]
 800309a:	687b      	ldr	r3, [r7, #4]
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80030a2:	609a      	str	r2, [r3, #8]
      break;
 80030a4:	e03c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030b2:	461a      	mov	r2, r3
 80030b4:	f000 fa58 	bl	8003568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	2150      	movs	r1, #80	@ 0x50
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 faaf 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 80030c4:	e02c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80030c6:	687b      	ldr	r3, [r7, #4]
 80030c8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ca:	683b      	ldr	r3, [r7, #0]
 80030cc:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ce:	683b      	ldr	r3, [r7, #0]
 80030d0:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80030d2:	461a      	mov	r2, r3
 80030d4:	f000 fa76 	bl	80035c4 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80030d8:	687b      	ldr	r3, [r7, #4]
 80030da:	681b      	ldr	r3, [r3, #0]
 80030dc:	2160      	movs	r1, #96	@ 0x60
 80030de:	4618      	mov	r0, r3
 80030e0:	f000 fa9f 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 80030e4:	e01c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80030ea:	683b      	ldr	r3, [r7, #0]
 80030ec:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80030ee:	683b      	ldr	r3, [r7, #0]
 80030f0:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80030f2:	461a      	mov	r2, r3
 80030f4:	f000 fa38 	bl	8003568 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	681b      	ldr	r3, [r3, #0]
 80030fc:	2140      	movs	r1, #64	@ 0x40
 80030fe:	4618      	mov	r0, r3
 8003100:	f000 fa8f 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8003104:	e00c      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003106:	687b      	ldr	r3, [r7, #4]
 8003108:	681a      	ldr	r2, [r3, #0]
 800310a:	683b      	ldr	r3, [r7, #0]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4619      	mov	r1, r3
 8003110:	4610      	mov	r0, r2
 8003112:	f000 fa86 	bl	8003622 <TIM_ITRx_SetConfig>
      break;
 8003116:	e003      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003118:	2301      	movs	r3, #1
 800311a:	73fb      	strb	r3, [r7, #15]
      break;
 800311c:	e000      	b.n	8003120 <HAL_TIM_ConfigClockSource+0x174>
      break;
 800311e:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003120:	687b      	ldr	r3, [r7, #4]
 8003122:	2201      	movs	r2, #1
 8003124:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	2200      	movs	r2, #0
 800312c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003130:	7bfb      	ldrb	r3, [r7, #15]
}
 8003132:	4618      	mov	r0, r3
 8003134:	3710      	adds	r7, #16
 8003136:	46bd      	mov	sp, r7
 8003138:	bd80      	pop	{r7, pc}

0800313a <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800313a:	b480      	push	{r7}
 800313c:	b083      	sub	sp, #12
 800313e:	af00      	add	r7, sp, #0
 8003140:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003142:	bf00      	nop
 8003144:	370c      	adds	r7, #12
 8003146:	46bd      	mov	sp, r7
 8003148:	bc80      	pop	{r7}
 800314a:	4770      	bx	lr

0800314c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800314c:	b480      	push	{r7}
 800314e:	b083      	sub	sp, #12
 8003150:	af00      	add	r7, sp, #0
 8003152:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003154:	bf00      	nop
 8003156:	370c      	adds	r7, #12
 8003158:	46bd      	mov	sp, r7
 800315a:	bc80      	pop	{r7}
 800315c:	4770      	bx	lr

0800315e <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800315e:	b480      	push	{r7}
 8003160:	b083      	sub	sp, #12
 8003162:	af00      	add	r7, sp, #0
 8003164:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003166:	bf00      	nop
 8003168:	370c      	adds	r7, #12
 800316a:	46bd      	mov	sp, r7
 800316c:	bc80      	pop	{r7}
 800316e:	4770      	bx	lr

08003170 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003170:	b480      	push	{r7}
 8003172:	b083      	sub	sp, #12
 8003174:	af00      	add	r7, sp, #0
 8003176:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003178:	bf00      	nop
 800317a:	370c      	adds	r7, #12
 800317c:	46bd      	mov	sp, r7
 800317e:	bc80      	pop	{r7}
 8003180:	4770      	bx	lr

08003182 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003182:	b480      	push	{r7}
 8003184:	b083      	sub	sp, #12
 8003186:	af00      	add	r7, sp, #0
 8003188:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800318a:	bf00      	nop
 800318c:	370c      	adds	r7, #12
 800318e:	46bd      	mov	sp, r7
 8003190:	bc80      	pop	{r7}
 8003192:	4770      	bx	lr

08003194 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003194:	b480      	push	{r7}
 8003196:	b085      	sub	sp, #20
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
 800319c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80031a4:	687b      	ldr	r3, [r7, #4]
 80031a6:	4a29      	ldr	r2, [pc, #164]	@ (800324c <TIM_Base_SetConfig+0xb8>)
 80031a8:	4293      	cmp	r3, r2
 80031aa:	d00b      	beq.n	80031c4 <TIM_Base_SetConfig+0x30>
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031b2:	d007      	beq.n	80031c4 <TIM_Base_SetConfig+0x30>
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	4a26      	ldr	r2, [pc, #152]	@ (8003250 <TIM_Base_SetConfig+0xbc>)
 80031b8:	4293      	cmp	r3, r2
 80031ba:	d003      	beq.n	80031c4 <TIM_Base_SetConfig+0x30>
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	4a25      	ldr	r2, [pc, #148]	@ (8003254 <TIM_Base_SetConfig+0xc0>)
 80031c0:	4293      	cmp	r3, r2
 80031c2:	d108      	bne.n	80031d6 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80031ca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80031cc:	683b      	ldr	r3, [r7, #0]
 80031ce:	685b      	ldr	r3, [r3, #4]
 80031d0:	68fa      	ldr	r2, [r7, #12]
 80031d2:	4313      	orrs	r3, r2
 80031d4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	4a1c      	ldr	r2, [pc, #112]	@ (800324c <TIM_Base_SetConfig+0xb8>)
 80031da:	4293      	cmp	r3, r2
 80031dc:	d00b      	beq.n	80031f6 <TIM_Base_SetConfig+0x62>
 80031de:	687b      	ldr	r3, [r7, #4]
 80031e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80031e4:	d007      	beq.n	80031f6 <TIM_Base_SetConfig+0x62>
 80031e6:	687b      	ldr	r3, [r7, #4]
 80031e8:	4a19      	ldr	r2, [pc, #100]	@ (8003250 <TIM_Base_SetConfig+0xbc>)
 80031ea:	4293      	cmp	r3, r2
 80031ec:	d003      	beq.n	80031f6 <TIM_Base_SetConfig+0x62>
 80031ee:	687b      	ldr	r3, [r7, #4]
 80031f0:	4a18      	ldr	r2, [pc, #96]	@ (8003254 <TIM_Base_SetConfig+0xc0>)
 80031f2:	4293      	cmp	r3, r2
 80031f4:	d108      	bne.n	8003208 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80031f6:	68fb      	ldr	r3, [r7, #12]
 80031f8:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	68fa      	ldr	r2, [r7, #12]
 8003204:	4313      	orrs	r3, r2
 8003206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003208:	68fb      	ldr	r3, [r7, #12]
 800320a:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	695b      	ldr	r3, [r3, #20]
 8003212:	4313      	orrs	r3, r2
 8003214:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003216:	687b      	ldr	r3, [r7, #4]
 8003218:	68fa      	ldr	r2, [r7, #12]
 800321a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	689a      	ldr	r2, [r3, #8]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	681a      	ldr	r2, [r3, #0]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800322c:	687b      	ldr	r3, [r7, #4]
 800322e:	4a07      	ldr	r2, [pc, #28]	@ (800324c <TIM_Base_SetConfig+0xb8>)
 8003230:	4293      	cmp	r3, r2
 8003232:	d103      	bne.n	800323c <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	691a      	ldr	r2, [r3, #16]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800323c:	687b      	ldr	r3, [r7, #4]
 800323e:	2201      	movs	r2, #1
 8003240:	615a      	str	r2, [r3, #20]
}
 8003242:	bf00      	nop
 8003244:	3714      	adds	r7, #20
 8003246:	46bd      	mov	sp, r7
 8003248:	bc80      	pop	{r7}
 800324a:	4770      	bx	lr
 800324c:	40012c00 	.word	0x40012c00
 8003250:	40000400 	.word	0x40000400
 8003254:	40000800 	.word	0x40000800

08003258 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003258:	b480      	push	{r7}
 800325a:	b087      	sub	sp, #28
 800325c:	af00      	add	r7, sp, #0
 800325e:	6078      	str	r0, [r7, #4]
 8003260:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	6a1b      	ldr	r3, [r3, #32]
 8003266:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	6a1b      	ldr	r3, [r3, #32]
 800326c:	f023 0201 	bic.w	r2, r3, #1
 8003270:	687b      	ldr	r3, [r7, #4]
 8003272:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	685b      	ldr	r3, [r3, #4]
 8003278:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800327a:	687b      	ldr	r3, [r7, #4]
 800327c:	699b      	ldr	r3, [r3, #24]
 800327e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003280:	68fb      	ldr	r3, [r7, #12]
 8003282:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003286:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f023 0303 	bic.w	r3, r3, #3
 800328e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003290:	683b      	ldr	r3, [r7, #0]
 8003292:	681b      	ldr	r3, [r3, #0]
 8003294:	68fa      	ldr	r2, [r7, #12]
 8003296:	4313      	orrs	r3, r2
 8003298:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800329a:	697b      	ldr	r3, [r7, #20]
 800329c:	f023 0302 	bic.w	r3, r3, #2
 80032a0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80032a2:	683b      	ldr	r3, [r7, #0]
 80032a4:	689b      	ldr	r3, [r3, #8]
 80032a6:	697a      	ldr	r2, [r7, #20]
 80032a8:	4313      	orrs	r3, r2
 80032aa:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80032ac:	687b      	ldr	r3, [r7, #4]
 80032ae:	4a1c      	ldr	r2, [pc, #112]	@ (8003320 <TIM_OC1_SetConfig+0xc8>)
 80032b0:	4293      	cmp	r3, r2
 80032b2:	d10c      	bne.n	80032ce <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	f023 0308 	bic.w	r3, r3, #8
 80032ba:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80032bc:	683b      	ldr	r3, [r7, #0]
 80032be:	68db      	ldr	r3, [r3, #12]
 80032c0:	697a      	ldr	r2, [r7, #20]
 80032c2:	4313      	orrs	r3, r2
 80032c4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80032c6:	697b      	ldr	r3, [r7, #20]
 80032c8:	f023 0304 	bic.w	r3, r3, #4
 80032cc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a13      	ldr	r2, [pc, #76]	@ (8003320 <TIM_OC1_SetConfig+0xc8>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d111      	bne.n	80032fa <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80032dc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80032de:	693b      	ldr	r3, [r7, #16]
 80032e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032e4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80032e6:	683b      	ldr	r3, [r7, #0]
 80032e8:	695b      	ldr	r3, [r3, #20]
 80032ea:	693a      	ldr	r2, [r7, #16]
 80032ec:	4313      	orrs	r3, r2
 80032ee:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80032f0:	683b      	ldr	r3, [r7, #0]
 80032f2:	699b      	ldr	r3, [r3, #24]
 80032f4:	693a      	ldr	r2, [r7, #16]
 80032f6:	4313      	orrs	r3, r2
 80032f8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80032fa:	687b      	ldr	r3, [r7, #4]
 80032fc:	693a      	ldr	r2, [r7, #16]
 80032fe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003300:	687b      	ldr	r3, [r7, #4]
 8003302:	68fa      	ldr	r2, [r7, #12]
 8003304:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8003306:	683b      	ldr	r3, [r7, #0]
 8003308:	685a      	ldr	r2, [r3, #4]
 800330a:	687b      	ldr	r3, [r7, #4]
 800330c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800330e:	687b      	ldr	r3, [r7, #4]
 8003310:	697a      	ldr	r2, [r7, #20]
 8003312:	621a      	str	r2, [r3, #32]
}
 8003314:	bf00      	nop
 8003316:	371c      	adds	r7, #28
 8003318:	46bd      	mov	sp, r7
 800331a:	bc80      	pop	{r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	40012c00 	.word	0x40012c00

08003324 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003324:	b480      	push	{r7}
 8003326:	b087      	sub	sp, #28
 8003328:	af00      	add	r7, sp, #0
 800332a:	6078      	str	r0, [r7, #4]
 800332c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	6a1b      	ldr	r3, [r3, #32]
 8003332:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	6a1b      	ldr	r3, [r3, #32]
 8003338:	f023 0210 	bic.w	r2, r3, #16
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003340:	687b      	ldr	r3, [r7, #4]
 8003342:	685b      	ldr	r3, [r3, #4]
 8003344:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	699b      	ldr	r3, [r3, #24]
 800334a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003352:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800335a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800335c:	683b      	ldr	r3, [r7, #0]
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	021b      	lsls	r3, r3, #8
 8003362:	68fa      	ldr	r2, [r7, #12]
 8003364:	4313      	orrs	r3, r2
 8003366:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8003368:	697b      	ldr	r3, [r7, #20]
 800336a:	f023 0320 	bic.w	r3, r3, #32
 800336e:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003370:	683b      	ldr	r3, [r7, #0]
 8003372:	689b      	ldr	r3, [r3, #8]
 8003374:	011b      	lsls	r3, r3, #4
 8003376:	697a      	ldr	r2, [r7, #20]
 8003378:	4313      	orrs	r3, r2
 800337a:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	4a1d      	ldr	r2, [pc, #116]	@ (80033f4 <TIM_OC2_SetConfig+0xd0>)
 8003380:	4293      	cmp	r3, r2
 8003382:	d10d      	bne.n	80033a0 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003384:	697b      	ldr	r3, [r7, #20]
 8003386:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800338a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800338c:	683b      	ldr	r3, [r7, #0]
 800338e:	68db      	ldr	r3, [r3, #12]
 8003390:	011b      	lsls	r3, r3, #4
 8003392:	697a      	ldr	r2, [r7, #20]
 8003394:	4313      	orrs	r3, r2
 8003396:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8003398:	697b      	ldr	r3, [r7, #20]
 800339a:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800339e:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033a0:	687b      	ldr	r3, [r7, #4]
 80033a2:	4a14      	ldr	r2, [pc, #80]	@ (80033f4 <TIM_OC2_SetConfig+0xd0>)
 80033a4:	4293      	cmp	r3, r2
 80033a6:	d113      	bne.n	80033d0 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80033a8:	693b      	ldr	r3, [r7, #16]
 80033aa:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80033ae:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80033b6:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80033b8:	683b      	ldr	r3, [r7, #0]
 80033ba:	695b      	ldr	r3, [r3, #20]
 80033bc:	009b      	lsls	r3, r3, #2
 80033be:	693a      	ldr	r2, [r7, #16]
 80033c0:	4313      	orrs	r3, r2
 80033c2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80033c4:	683b      	ldr	r3, [r7, #0]
 80033c6:	699b      	ldr	r3, [r3, #24]
 80033c8:	009b      	lsls	r3, r3, #2
 80033ca:	693a      	ldr	r2, [r7, #16]
 80033cc:	4313      	orrs	r3, r2
 80033ce:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	693a      	ldr	r2, [r7, #16]
 80033d4:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	68fa      	ldr	r2, [r7, #12]
 80033da:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80033dc:	683b      	ldr	r3, [r7, #0]
 80033de:	685a      	ldr	r2, [r3, #4]
 80033e0:	687b      	ldr	r3, [r7, #4]
 80033e2:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	697a      	ldr	r2, [r7, #20]
 80033e8:	621a      	str	r2, [r3, #32]
}
 80033ea:	bf00      	nop
 80033ec:	371c      	adds	r7, #28
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bc80      	pop	{r7}
 80033f2:	4770      	bx	lr
 80033f4:	40012c00 	.word	0x40012c00

080033f8 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b087      	sub	sp, #28
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003402:	687b      	ldr	r3, [r7, #4]
 8003404:	6a1b      	ldr	r3, [r3, #32]
 8003406:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	685b      	ldr	r3, [r3, #4]
 8003418:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	69db      	ldr	r3, [r3, #28]
 800341e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003426:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8003428:	68fb      	ldr	r3, [r7, #12]
 800342a:	f023 0303 	bic.w	r3, r3, #3
 800342e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003430:	683b      	ldr	r3, [r7, #0]
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	68fa      	ldr	r2, [r7, #12]
 8003436:	4313      	orrs	r3, r2
 8003438:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800343a:	697b      	ldr	r3, [r7, #20]
 800343c:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003440:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003442:	683b      	ldr	r3, [r7, #0]
 8003444:	689b      	ldr	r3, [r3, #8]
 8003446:	021b      	lsls	r3, r3, #8
 8003448:	697a      	ldr	r2, [r7, #20]
 800344a:	4313      	orrs	r3, r2
 800344c:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	4a1d      	ldr	r2, [pc, #116]	@ (80034c8 <TIM_OC3_SetConfig+0xd0>)
 8003452:	4293      	cmp	r3, r2
 8003454:	d10d      	bne.n	8003472 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8003456:	697b      	ldr	r3, [r7, #20]
 8003458:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800345c:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800345e:	683b      	ldr	r3, [r7, #0]
 8003460:	68db      	ldr	r3, [r3, #12]
 8003462:	021b      	lsls	r3, r3, #8
 8003464:	697a      	ldr	r2, [r7, #20]
 8003466:	4313      	orrs	r3, r2
 8003468:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800346a:	697b      	ldr	r3, [r7, #20]
 800346c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003470:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003472:	687b      	ldr	r3, [r7, #4]
 8003474:	4a14      	ldr	r2, [pc, #80]	@ (80034c8 <TIM_OC3_SetConfig+0xd0>)
 8003476:	4293      	cmp	r3, r2
 8003478:	d113      	bne.n	80034a2 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003480:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003482:	693b      	ldr	r3, [r7, #16]
 8003484:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003488:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800348a:	683b      	ldr	r3, [r7, #0]
 800348c:	695b      	ldr	r3, [r3, #20]
 800348e:	011b      	lsls	r3, r3, #4
 8003490:	693a      	ldr	r2, [r7, #16]
 8003492:	4313      	orrs	r3, r2
 8003494:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8003496:	683b      	ldr	r3, [r7, #0]
 8003498:	699b      	ldr	r3, [r3, #24]
 800349a:	011b      	lsls	r3, r3, #4
 800349c:	693a      	ldr	r2, [r7, #16]
 800349e:	4313      	orrs	r3, r2
 80034a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80034a2:	687b      	ldr	r3, [r7, #4]
 80034a4:	693a      	ldr	r2, [r7, #16]
 80034a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	68fa      	ldr	r2, [r7, #12]
 80034ac:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80034ae:	683b      	ldr	r3, [r7, #0]
 80034b0:	685a      	ldr	r2, [r3, #4]
 80034b2:	687b      	ldr	r3, [r7, #4]
 80034b4:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	697a      	ldr	r2, [r7, #20]
 80034ba:	621a      	str	r2, [r3, #32]
}
 80034bc:	bf00      	nop
 80034be:	371c      	adds	r7, #28
 80034c0:	46bd      	mov	sp, r7
 80034c2:	bc80      	pop	{r7}
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	40012c00 	.word	0x40012c00

080034cc <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80034cc:	b480      	push	{r7}
 80034ce:	b087      	sub	sp, #28
 80034d0:	af00      	add	r7, sp, #0
 80034d2:	6078      	str	r0, [r7, #4]
 80034d4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a1b      	ldr	r3, [r3, #32]
 80034da:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	685b      	ldr	r3, [r3, #4]
 80034ec:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80034ee:	687b      	ldr	r3, [r7, #4]
 80034f0:	69db      	ldr	r3, [r3, #28]
 80034f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80034fa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80034fc:	68fb      	ldr	r3, [r7, #12]
 80034fe:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003502:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003504:	683b      	ldr	r3, [r7, #0]
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	021b      	lsls	r3, r3, #8
 800350a:	68fa      	ldr	r2, [r7, #12]
 800350c:	4313      	orrs	r3, r2
 800350e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003510:	693b      	ldr	r3, [r7, #16]
 8003512:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8003516:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8003518:	683b      	ldr	r3, [r7, #0]
 800351a:	689b      	ldr	r3, [r3, #8]
 800351c:	031b      	lsls	r3, r3, #12
 800351e:	693a      	ldr	r2, [r7, #16]
 8003520:	4313      	orrs	r3, r2
 8003522:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	4a0f      	ldr	r2, [pc, #60]	@ (8003564 <TIM_OC4_SetConfig+0x98>)
 8003528:	4293      	cmp	r3, r2
 800352a:	d109      	bne.n	8003540 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800352c:	697b      	ldr	r3, [r7, #20]
 800352e:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003532:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003534:	683b      	ldr	r3, [r7, #0]
 8003536:	695b      	ldr	r3, [r3, #20]
 8003538:	019b      	lsls	r3, r3, #6
 800353a:	697a      	ldr	r2, [r7, #20]
 800353c:	4313      	orrs	r3, r2
 800353e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	697a      	ldr	r2, [r7, #20]
 8003544:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	68fa      	ldr	r2, [r7, #12]
 800354a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800354c:	683b      	ldr	r3, [r7, #0]
 800354e:	685a      	ldr	r2, [r3, #4]
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	693a      	ldr	r2, [r7, #16]
 8003558:	621a      	str	r2, [r3, #32]
}
 800355a:	bf00      	nop
 800355c:	371c      	adds	r7, #28
 800355e:	46bd      	mov	sp, r7
 8003560:	bc80      	pop	{r7}
 8003562:	4770      	bx	lr
 8003564:	40012c00 	.word	0x40012c00

08003568 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003568:	b480      	push	{r7}
 800356a:	b087      	sub	sp, #28
 800356c:	af00      	add	r7, sp, #0
 800356e:	60f8      	str	r0, [r7, #12]
 8003570:	60b9      	str	r1, [r7, #8]
 8003572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003574:	68fb      	ldr	r3, [r7, #12]
 8003576:	6a1b      	ldr	r3, [r3, #32]
 8003578:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	6a1b      	ldr	r3, [r3, #32]
 800357e:	f023 0201 	bic.w	r2, r3, #1
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003586:	68fb      	ldr	r3, [r7, #12]
 8003588:	699b      	ldr	r3, [r3, #24]
 800358a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800358c:	693b      	ldr	r3, [r7, #16]
 800358e:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003592:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	011b      	lsls	r3, r3, #4
 8003598:	693a      	ldr	r2, [r7, #16]
 800359a:	4313      	orrs	r3, r2
 800359c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800359e:	697b      	ldr	r3, [r7, #20]
 80035a0:	f023 030a 	bic.w	r3, r3, #10
 80035a4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80035a6:	697a      	ldr	r2, [r7, #20]
 80035a8:	68bb      	ldr	r3, [r7, #8]
 80035aa:	4313      	orrs	r3, r2
 80035ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	693a      	ldr	r2, [r7, #16]
 80035b2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	697a      	ldr	r2, [r7, #20]
 80035b8:	621a      	str	r2, [r3, #32]
}
 80035ba:	bf00      	nop
 80035bc:	371c      	adds	r7, #28
 80035be:	46bd      	mov	sp, r7
 80035c0:	bc80      	pop	{r7}
 80035c2:	4770      	bx	lr

080035c4 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80035c4:	b480      	push	{r7}
 80035c6:	b087      	sub	sp, #28
 80035c8:	af00      	add	r7, sp, #0
 80035ca:	60f8      	str	r0, [r7, #12]
 80035cc:	60b9      	str	r1, [r7, #8]
 80035ce:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80035d0:	68fb      	ldr	r3, [r7, #12]
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a1b      	ldr	r3, [r3, #32]
 80035da:	f023 0210 	bic.w	r2, r3, #16
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	699b      	ldr	r3, [r3, #24]
 80035e6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80035e8:	693b      	ldr	r3, [r7, #16]
 80035ea:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80035ee:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80035f0:	687b      	ldr	r3, [r7, #4]
 80035f2:	031b      	lsls	r3, r3, #12
 80035f4:	693a      	ldr	r2, [r7, #16]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80035fa:	697b      	ldr	r3, [r7, #20]
 80035fc:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003600:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003602:	68bb      	ldr	r3, [r7, #8]
 8003604:	011b      	lsls	r3, r3, #4
 8003606:	697a      	ldr	r2, [r7, #20]
 8003608:	4313      	orrs	r3, r2
 800360a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	693a      	ldr	r2, [r7, #16]
 8003610:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003612:	68fb      	ldr	r3, [r7, #12]
 8003614:	697a      	ldr	r2, [r7, #20]
 8003616:	621a      	str	r2, [r3, #32]
}
 8003618:	bf00      	nop
 800361a:	371c      	adds	r7, #28
 800361c:	46bd      	mov	sp, r7
 800361e:	bc80      	pop	{r7}
 8003620:	4770      	bx	lr

08003622 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003622:	b480      	push	{r7}
 8003624:	b085      	sub	sp, #20
 8003626:	af00      	add	r7, sp, #0
 8003628:	6078      	str	r0, [r7, #4]
 800362a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	689b      	ldr	r3, [r3, #8]
 8003630:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003638:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800363a:	683a      	ldr	r2, [r7, #0]
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	4313      	orrs	r3, r2
 8003640:	f043 0307 	orr.w	r3, r3, #7
 8003644:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003646:	687b      	ldr	r3, [r7, #4]
 8003648:	68fa      	ldr	r2, [r7, #12]
 800364a:	609a      	str	r2, [r3, #8]
}
 800364c:	bf00      	nop
 800364e:	3714      	adds	r7, #20
 8003650:	46bd      	mov	sp, r7
 8003652:	bc80      	pop	{r7}
 8003654:	4770      	bx	lr

08003656 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003656:	b480      	push	{r7}
 8003658:	b087      	sub	sp, #28
 800365a:	af00      	add	r7, sp, #0
 800365c:	60f8      	str	r0, [r7, #12]
 800365e:	60b9      	str	r1, [r7, #8]
 8003660:	607a      	str	r2, [r7, #4]
 8003662:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003664:	68fb      	ldr	r3, [r7, #12]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800366a:	697b      	ldr	r3, [r7, #20]
 800366c:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003670:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003672:	683b      	ldr	r3, [r7, #0]
 8003674:	021a      	lsls	r2, r3, #8
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	431a      	orrs	r2, r3
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	4313      	orrs	r3, r2
 800367e:	697a      	ldr	r2, [r7, #20]
 8003680:	4313      	orrs	r3, r2
 8003682:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	697a      	ldr	r2, [r7, #20]
 8003688:	609a      	str	r2, [r3, #8]
}
 800368a:	bf00      	nop
 800368c:	371c      	adds	r7, #28
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr

08003694 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003694:	b480      	push	{r7}
 8003696:	b087      	sub	sp, #28
 8003698:	af00      	add	r7, sp, #0
 800369a:	60f8      	str	r0, [r7, #12]
 800369c:	60b9      	str	r1, [r7, #8]
 800369e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80036a0:	68bb      	ldr	r3, [r7, #8]
 80036a2:	f003 031f 	and.w	r3, r3, #31
 80036a6:	2201      	movs	r2, #1
 80036a8:	fa02 f303 	lsl.w	r3, r2, r3
 80036ac:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80036ae:	68fb      	ldr	r3, [r7, #12]
 80036b0:	6a1a      	ldr	r2, [r3, #32]
 80036b2:	697b      	ldr	r3, [r7, #20]
 80036b4:	43db      	mvns	r3, r3
 80036b6:	401a      	ands	r2, r3
 80036b8:	68fb      	ldr	r3, [r7, #12]
 80036ba:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	6a1a      	ldr	r2, [r3, #32]
 80036c0:	68bb      	ldr	r3, [r7, #8]
 80036c2:	f003 031f 	and.w	r3, r3, #31
 80036c6:	6879      	ldr	r1, [r7, #4]
 80036c8:	fa01 f303 	lsl.w	r3, r1, r3
 80036cc:	431a      	orrs	r2, r3
 80036ce:	68fb      	ldr	r3, [r7, #12]
 80036d0:	621a      	str	r2, [r3, #32]
}
 80036d2:	bf00      	nop
 80036d4:	371c      	adds	r7, #28
 80036d6:	46bd      	mov	sp, r7
 80036d8:	bc80      	pop	{r7}
 80036da:	4770      	bx	lr

080036dc <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80036dc:	b480      	push	{r7}
 80036de:	b085      	sub	sp, #20
 80036e0:	af00      	add	r7, sp, #0
 80036e2:	6078      	str	r0, [r7, #4]
 80036e4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80036ec:	2b01      	cmp	r3, #1
 80036ee:	d101      	bne.n	80036f4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80036f0:	2302      	movs	r3, #2
 80036f2:	e046      	b.n	8003782 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2201      	movs	r2, #1
 80036f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	2202      	movs	r2, #2
 8003700:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003704:	687b      	ldr	r3, [r7, #4]
 8003706:	681b      	ldr	r3, [r3, #0]
 8003708:	685b      	ldr	r3, [r3, #4]
 800370a:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	689b      	ldr	r3, [r3, #8]
 8003712:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003714:	68fb      	ldr	r3, [r7, #12]
 8003716:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800371a:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	68fa      	ldr	r2, [r7, #12]
 8003722:	4313      	orrs	r3, r2
 8003724:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	681b      	ldr	r3, [r3, #0]
 800372a:	68fa      	ldr	r2, [r7, #12]
 800372c:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	681b      	ldr	r3, [r3, #0]
 8003732:	4a16      	ldr	r2, [pc, #88]	@ (800378c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003734:	4293      	cmp	r3, r2
 8003736:	d00e      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003738:	687b      	ldr	r3, [r7, #4]
 800373a:	681b      	ldr	r3, [r3, #0]
 800373c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003740:	d009      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	681b      	ldr	r3, [r3, #0]
 8003746:	4a12      	ldr	r2, [pc, #72]	@ (8003790 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003748:	4293      	cmp	r3, r2
 800374a:	d004      	beq.n	8003756 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800374c:	687b      	ldr	r3, [r7, #4]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	4a10      	ldr	r2, [pc, #64]	@ (8003794 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003752:	4293      	cmp	r3, r2
 8003754:	d10c      	bne.n	8003770 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003756:	68bb      	ldr	r3, [r7, #8]
 8003758:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800375c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800375e:	683b      	ldr	r3, [r7, #0]
 8003760:	685b      	ldr	r3, [r3, #4]
 8003762:	68ba      	ldr	r2, [r7, #8]
 8003764:	4313      	orrs	r3, r2
 8003766:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	68ba      	ldr	r2, [r7, #8]
 800376e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2201      	movs	r2, #1
 8003774:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003778:	687b      	ldr	r3, [r7, #4]
 800377a:	2200      	movs	r2, #0
 800377c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003780:	2300      	movs	r3, #0
}
 8003782:	4618      	mov	r0, r3
 8003784:	3714      	adds	r7, #20
 8003786:	46bd      	mov	sp, r7
 8003788:	bc80      	pop	{r7}
 800378a:	4770      	bx	lr
 800378c:	40012c00 	.word	0x40012c00
 8003790:	40000400 	.word	0x40000400
 8003794:	40000800 	.word	0x40000800

08003798 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003798:	b480      	push	{r7}
 800379a:	b083      	sub	sp, #12
 800379c:	af00      	add	r7, sp, #0
 800379e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80037a0:	bf00      	nop
 80037a2:	370c      	adds	r7, #12
 80037a4:	46bd      	mov	sp, r7
 80037a6:	bc80      	pop	{r7}
 80037a8:	4770      	bx	lr

080037aa <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80037aa:	b480      	push	{r7}
 80037ac:	b083      	sub	sp, #12
 80037ae:	af00      	add	r7, sp, #0
 80037b0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80037b2:	bf00      	nop
 80037b4:	370c      	adds	r7, #12
 80037b6:	46bd      	mov	sp, r7
 80037b8:	bc80      	pop	{r7}
 80037ba:	4770      	bx	lr

080037bc <exit>:
 80037bc:	b508      	push	{r3, lr}
 80037be:	4b06      	ldr	r3, [pc, #24]	@ (80037d8 <exit+0x1c>)
 80037c0:	4604      	mov	r4, r0
 80037c2:	b113      	cbz	r3, 80037ca <exit+0xe>
 80037c4:	2100      	movs	r1, #0
 80037c6:	f3af 8000 	nop.w
 80037ca:	4b04      	ldr	r3, [pc, #16]	@ (80037dc <exit+0x20>)
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	b103      	cbz	r3, 80037d2 <exit+0x16>
 80037d0:	4798      	blx	r3
 80037d2:	4620      	mov	r0, r4
 80037d4:	f7fe f890 	bl	80018f8 <_exit>
 80037d8:	00000000 	.word	0x00000000
 80037dc:	20001ad8 	.word	0x20001ad8

080037e0 <malloc>:
 80037e0:	4b02      	ldr	r3, [pc, #8]	@ (80037ec <malloc+0xc>)
 80037e2:	4601      	mov	r1, r0
 80037e4:	6818      	ldr	r0, [r3, #0]
 80037e6:	f000 b82d 	b.w	8003844 <_malloc_r>
 80037ea:	bf00      	nop
 80037ec:	20000014 	.word	0x20000014

080037f0 <free>:
 80037f0:	4b02      	ldr	r3, [pc, #8]	@ (80037fc <free+0xc>)
 80037f2:	4601      	mov	r1, r0
 80037f4:	6818      	ldr	r0, [r3, #0]
 80037f6:	f000 b903 	b.w	8003a00 <_free_r>
 80037fa:	bf00      	nop
 80037fc:	20000014 	.word	0x20000014

08003800 <sbrk_aligned>:
 8003800:	b570      	push	{r4, r5, r6, lr}
 8003802:	4e0f      	ldr	r6, [pc, #60]	@ (8003840 <sbrk_aligned+0x40>)
 8003804:	460c      	mov	r4, r1
 8003806:	6831      	ldr	r1, [r6, #0]
 8003808:	4605      	mov	r5, r0
 800380a:	b911      	cbnz	r1, 8003812 <sbrk_aligned+0x12>
 800380c:	f000 f8ae 	bl	800396c <_sbrk_r>
 8003810:	6030      	str	r0, [r6, #0]
 8003812:	4621      	mov	r1, r4
 8003814:	4628      	mov	r0, r5
 8003816:	f000 f8a9 	bl	800396c <_sbrk_r>
 800381a:	1c43      	adds	r3, r0, #1
 800381c:	d103      	bne.n	8003826 <sbrk_aligned+0x26>
 800381e:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003822:	4620      	mov	r0, r4
 8003824:	bd70      	pop	{r4, r5, r6, pc}
 8003826:	1cc4      	adds	r4, r0, #3
 8003828:	f024 0403 	bic.w	r4, r4, #3
 800382c:	42a0      	cmp	r0, r4
 800382e:	d0f8      	beq.n	8003822 <sbrk_aligned+0x22>
 8003830:	1a21      	subs	r1, r4, r0
 8003832:	4628      	mov	r0, r5
 8003834:	f000 f89a 	bl	800396c <_sbrk_r>
 8003838:	3001      	adds	r0, #1
 800383a:	d1f2      	bne.n	8003822 <sbrk_aligned+0x22>
 800383c:	e7ef      	b.n	800381e <sbrk_aligned+0x1e>
 800383e:	bf00      	nop
 8003840:	20001998 	.word	0x20001998

08003844 <_malloc_r>:
 8003844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003848:	1ccd      	adds	r5, r1, #3
 800384a:	f025 0503 	bic.w	r5, r5, #3
 800384e:	3508      	adds	r5, #8
 8003850:	2d0c      	cmp	r5, #12
 8003852:	bf38      	it	cc
 8003854:	250c      	movcc	r5, #12
 8003856:	2d00      	cmp	r5, #0
 8003858:	4606      	mov	r6, r0
 800385a:	db01      	blt.n	8003860 <_malloc_r+0x1c>
 800385c:	42a9      	cmp	r1, r5
 800385e:	d904      	bls.n	800386a <_malloc_r+0x26>
 8003860:	230c      	movs	r3, #12
 8003862:	6033      	str	r3, [r6, #0]
 8003864:	2000      	movs	r0, #0
 8003866:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800386a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003940 <_malloc_r+0xfc>
 800386e:	f000 f869 	bl	8003944 <__malloc_lock>
 8003872:	f8d8 3000 	ldr.w	r3, [r8]
 8003876:	461c      	mov	r4, r3
 8003878:	bb44      	cbnz	r4, 80038cc <_malloc_r+0x88>
 800387a:	4629      	mov	r1, r5
 800387c:	4630      	mov	r0, r6
 800387e:	f7ff ffbf 	bl	8003800 <sbrk_aligned>
 8003882:	1c43      	adds	r3, r0, #1
 8003884:	4604      	mov	r4, r0
 8003886:	d158      	bne.n	800393a <_malloc_r+0xf6>
 8003888:	f8d8 4000 	ldr.w	r4, [r8]
 800388c:	4627      	mov	r7, r4
 800388e:	2f00      	cmp	r7, #0
 8003890:	d143      	bne.n	800391a <_malloc_r+0xd6>
 8003892:	2c00      	cmp	r4, #0
 8003894:	d04b      	beq.n	800392e <_malloc_r+0xea>
 8003896:	6823      	ldr	r3, [r4, #0]
 8003898:	4639      	mov	r1, r7
 800389a:	4630      	mov	r0, r6
 800389c:	eb04 0903 	add.w	r9, r4, r3
 80038a0:	f000 f864 	bl	800396c <_sbrk_r>
 80038a4:	4581      	cmp	r9, r0
 80038a6:	d142      	bne.n	800392e <_malloc_r+0xea>
 80038a8:	6821      	ldr	r1, [r4, #0]
 80038aa:	4630      	mov	r0, r6
 80038ac:	1a6d      	subs	r5, r5, r1
 80038ae:	4629      	mov	r1, r5
 80038b0:	f7ff ffa6 	bl	8003800 <sbrk_aligned>
 80038b4:	3001      	adds	r0, #1
 80038b6:	d03a      	beq.n	800392e <_malloc_r+0xea>
 80038b8:	6823      	ldr	r3, [r4, #0]
 80038ba:	442b      	add	r3, r5
 80038bc:	6023      	str	r3, [r4, #0]
 80038be:	f8d8 3000 	ldr.w	r3, [r8]
 80038c2:	685a      	ldr	r2, [r3, #4]
 80038c4:	bb62      	cbnz	r2, 8003920 <_malloc_r+0xdc>
 80038c6:	f8c8 7000 	str.w	r7, [r8]
 80038ca:	e00f      	b.n	80038ec <_malloc_r+0xa8>
 80038cc:	6822      	ldr	r2, [r4, #0]
 80038ce:	1b52      	subs	r2, r2, r5
 80038d0:	d420      	bmi.n	8003914 <_malloc_r+0xd0>
 80038d2:	2a0b      	cmp	r2, #11
 80038d4:	d917      	bls.n	8003906 <_malloc_r+0xc2>
 80038d6:	1961      	adds	r1, r4, r5
 80038d8:	42a3      	cmp	r3, r4
 80038da:	6025      	str	r5, [r4, #0]
 80038dc:	bf18      	it	ne
 80038de:	6059      	strne	r1, [r3, #4]
 80038e0:	6863      	ldr	r3, [r4, #4]
 80038e2:	bf08      	it	eq
 80038e4:	f8c8 1000 	streq.w	r1, [r8]
 80038e8:	5162      	str	r2, [r4, r5]
 80038ea:	604b      	str	r3, [r1, #4]
 80038ec:	4630      	mov	r0, r6
 80038ee:	f000 f82f 	bl	8003950 <__malloc_unlock>
 80038f2:	f104 000b 	add.w	r0, r4, #11
 80038f6:	1d23      	adds	r3, r4, #4
 80038f8:	f020 0007 	bic.w	r0, r0, #7
 80038fc:	1ac2      	subs	r2, r0, r3
 80038fe:	bf1c      	itt	ne
 8003900:	1a1b      	subne	r3, r3, r0
 8003902:	50a3      	strne	r3, [r4, r2]
 8003904:	e7af      	b.n	8003866 <_malloc_r+0x22>
 8003906:	6862      	ldr	r2, [r4, #4]
 8003908:	42a3      	cmp	r3, r4
 800390a:	bf0c      	ite	eq
 800390c:	f8c8 2000 	streq.w	r2, [r8]
 8003910:	605a      	strne	r2, [r3, #4]
 8003912:	e7eb      	b.n	80038ec <_malloc_r+0xa8>
 8003914:	4623      	mov	r3, r4
 8003916:	6864      	ldr	r4, [r4, #4]
 8003918:	e7ae      	b.n	8003878 <_malloc_r+0x34>
 800391a:	463c      	mov	r4, r7
 800391c:	687f      	ldr	r7, [r7, #4]
 800391e:	e7b6      	b.n	800388e <_malloc_r+0x4a>
 8003920:	461a      	mov	r2, r3
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	42a3      	cmp	r3, r4
 8003926:	d1fb      	bne.n	8003920 <_malloc_r+0xdc>
 8003928:	2300      	movs	r3, #0
 800392a:	6053      	str	r3, [r2, #4]
 800392c:	e7de      	b.n	80038ec <_malloc_r+0xa8>
 800392e:	230c      	movs	r3, #12
 8003930:	4630      	mov	r0, r6
 8003932:	6033      	str	r3, [r6, #0]
 8003934:	f000 f80c 	bl	8003950 <__malloc_unlock>
 8003938:	e794      	b.n	8003864 <_malloc_r+0x20>
 800393a:	6005      	str	r5, [r0, #0]
 800393c:	e7d6      	b.n	80038ec <_malloc_r+0xa8>
 800393e:	bf00      	nop
 8003940:	2000199c 	.word	0x2000199c

08003944 <__malloc_lock>:
 8003944:	4801      	ldr	r0, [pc, #4]	@ (800394c <__malloc_lock+0x8>)
 8003946:	f000 b84b 	b.w	80039e0 <__retarget_lock_acquire_recursive>
 800394a:	bf00      	nop
 800394c:	20001ae0 	.word	0x20001ae0

08003950 <__malloc_unlock>:
 8003950:	4801      	ldr	r0, [pc, #4]	@ (8003958 <__malloc_unlock+0x8>)
 8003952:	f000 b846 	b.w	80039e2 <__retarget_lock_release_recursive>
 8003956:	bf00      	nop
 8003958:	20001ae0 	.word	0x20001ae0

0800395c <memset>:
 800395c:	4603      	mov	r3, r0
 800395e:	4402      	add	r2, r0
 8003960:	4293      	cmp	r3, r2
 8003962:	d100      	bne.n	8003966 <memset+0xa>
 8003964:	4770      	bx	lr
 8003966:	f803 1b01 	strb.w	r1, [r3], #1
 800396a:	e7f9      	b.n	8003960 <memset+0x4>

0800396c <_sbrk_r>:
 800396c:	b538      	push	{r3, r4, r5, lr}
 800396e:	2300      	movs	r3, #0
 8003970:	4d05      	ldr	r5, [pc, #20]	@ (8003988 <_sbrk_r+0x1c>)
 8003972:	4604      	mov	r4, r0
 8003974:	4608      	mov	r0, r1
 8003976:	602b      	str	r3, [r5, #0]
 8003978:	f7fd ffca 	bl	8001910 <_sbrk>
 800397c:	1c43      	adds	r3, r0, #1
 800397e:	d102      	bne.n	8003986 <_sbrk_r+0x1a>
 8003980:	682b      	ldr	r3, [r5, #0]
 8003982:	b103      	cbz	r3, 8003986 <_sbrk_r+0x1a>
 8003984:	6023      	str	r3, [r4, #0]
 8003986:	bd38      	pop	{r3, r4, r5, pc}
 8003988:	20001adc 	.word	0x20001adc

0800398c <__errno>:
 800398c:	4b01      	ldr	r3, [pc, #4]	@ (8003994 <__errno+0x8>)
 800398e:	6818      	ldr	r0, [r3, #0]
 8003990:	4770      	bx	lr
 8003992:	bf00      	nop
 8003994:	20000014 	.word	0x20000014

08003998 <__libc_init_array>:
 8003998:	b570      	push	{r4, r5, r6, lr}
 800399a:	2600      	movs	r6, #0
 800399c:	4d0c      	ldr	r5, [pc, #48]	@ (80039d0 <__libc_init_array+0x38>)
 800399e:	4c0d      	ldr	r4, [pc, #52]	@ (80039d4 <__libc_init_array+0x3c>)
 80039a0:	1b64      	subs	r4, r4, r5
 80039a2:	10a4      	asrs	r4, r4, #2
 80039a4:	42a6      	cmp	r6, r4
 80039a6:	d109      	bne.n	80039bc <__libc_init_array+0x24>
 80039a8:	f001 f88e 	bl	8004ac8 <_init>
 80039ac:	2600      	movs	r6, #0
 80039ae:	4d0a      	ldr	r5, [pc, #40]	@ (80039d8 <__libc_init_array+0x40>)
 80039b0:	4c0a      	ldr	r4, [pc, #40]	@ (80039dc <__libc_init_array+0x44>)
 80039b2:	1b64      	subs	r4, r4, r5
 80039b4:	10a4      	asrs	r4, r4, #2
 80039b6:	42a6      	cmp	r6, r4
 80039b8:	d105      	bne.n	80039c6 <__libc_init_array+0x2e>
 80039ba:	bd70      	pop	{r4, r5, r6, pc}
 80039bc:	f855 3b04 	ldr.w	r3, [r5], #4
 80039c0:	4798      	blx	r3
 80039c2:	3601      	adds	r6, #1
 80039c4:	e7ee      	b.n	80039a4 <__libc_init_array+0xc>
 80039c6:	f855 3b04 	ldr.w	r3, [r5], #4
 80039ca:	4798      	blx	r3
 80039cc:	3601      	adds	r6, #1
 80039ce:	e7f2      	b.n	80039b6 <__libc_init_array+0x1e>
 80039d0:	08004ce0 	.word	0x08004ce0
 80039d4:	08004ce0 	.word	0x08004ce0
 80039d8:	08004ce0 	.word	0x08004ce0
 80039dc:	08004ce4 	.word	0x08004ce4

080039e0 <__retarget_lock_acquire_recursive>:
 80039e0:	4770      	bx	lr

080039e2 <__retarget_lock_release_recursive>:
 80039e2:	4770      	bx	lr

080039e4 <memcpy>:
 80039e4:	440a      	add	r2, r1
 80039e6:	4291      	cmp	r1, r2
 80039e8:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80039ec:	d100      	bne.n	80039f0 <memcpy+0xc>
 80039ee:	4770      	bx	lr
 80039f0:	b510      	push	{r4, lr}
 80039f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80039f6:	4291      	cmp	r1, r2
 80039f8:	f803 4f01 	strb.w	r4, [r3, #1]!
 80039fc:	d1f9      	bne.n	80039f2 <memcpy+0xe>
 80039fe:	bd10      	pop	{r4, pc}

08003a00 <_free_r>:
 8003a00:	b538      	push	{r3, r4, r5, lr}
 8003a02:	4605      	mov	r5, r0
 8003a04:	2900      	cmp	r1, #0
 8003a06:	d040      	beq.n	8003a8a <_free_r+0x8a>
 8003a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003a0c:	1f0c      	subs	r4, r1, #4
 8003a0e:	2b00      	cmp	r3, #0
 8003a10:	bfb8      	it	lt
 8003a12:	18e4      	addlt	r4, r4, r3
 8003a14:	f7ff ff96 	bl	8003944 <__malloc_lock>
 8003a18:	4a1c      	ldr	r2, [pc, #112]	@ (8003a8c <_free_r+0x8c>)
 8003a1a:	6813      	ldr	r3, [r2, #0]
 8003a1c:	b933      	cbnz	r3, 8003a2c <_free_r+0x2c>
 8003a1e:	6063      	str	r3, [r4, #4]
 8003a20:	6014      	str	r4, [r2, #0]
 8003a22:	4628      	mov	r0, r5
 8003a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003a28:	f7ff bf92 	b.w	8003950 <__malloc_unlock>
 8003a2c:	42a3      	cmp	r3, r4
 8003a2e:	d908      	bls.n	8003a42 <_free_r+0x42>
 8003a30:	6820      	ldr	r0, [r4, #0]
 8003a32:	1821      	adds	r1, r4, r0
 8003a34:	428b      	cmp	r3, r1
 8003a36:	bf01      	itttt	eq
 8003a38:	6819      	ldreq	r1, [r3, #0]
 8003a3a:	685b      	ldreq	r3, [r3, #4]
 8003a3c:	1809      	addeq	r1, r1, r0
 8003a3e:	6021      	streq	r1, [r4, #0]
 8003a40:	e7ed      	b.n	8003a1e <_free_r+0x1e>
 8003a42:	461a      	mov	r2, r3
 8003a44:	685b      	ldr	r3, [r3, #4]
 8003a46:	b10b      	cbz	r3, 8003a4c <_free_r+0x4c>
 8003a48:	42a3      	cmp	r3, r4
 8003a4a:	d9fa      	bls.n	8003a42 <_free_r+0x42>
 8003a4c:	6811      	ldr	r1, [r2, #0]
 8003a4e:	1850      	adds	r0, r2, r1
 8003a50:	42a0      	cmp	r0, r4
 8003a52:	d10b      	bne.n	8003a6c <_free_r+0x6c>
 8003a54:	6820      	ldr	r0, [r4, #0]
 8003a56:	4401      	add	r1, r0
 8003a58:	1850      	adds	r0, r2, r1
 8003a5a:	4283      	cmp	r3, r0
 8003a5c:	6011      	str	r1, [r2, #0]
 8003a5e:	d1e0      	bne.n	8003a22 <_free_r+0x22>
 8003a60:	6818      	ldr	r0, [r3, #0]
 8003a62:	685b      	ldr	r3, [r3, #4]
 8003a64:	4408      	add	r0, r1
 8003a66:	6010      	str	r0, [r2, #0]
 8003a68:	6053      	str	r3, [r2, #4]
 8003a6a:	e7da      	b.n	8003a22 <_free_r+0x22>
 8003a6c:	d902      	bls.n	8003a74 <_free_r+0x74>
 8003a6e:	230c      	movs	r3, #12
 8003a70:	602b      	str	r3, [r5, #0]
 8003a72:	e7d6      	b.n	8003a22 <_free_r+0x22>
 8003a74:	6820      	ldr	r0, [r4, #0]
 8003a76:	1821      	adds	r1, r4, r0
 8003a78:	428b      	cmp	r3, r1
 8003a7a:	bf01      	itttt	eq
 8003a7c:	6819      	ldreq	r1, [r3, #0]
 8003a7e:	685b      	ldreq	r3, [r3, #4]
 8003a80:	1809      	addeq	r1, r1, r0
 8003a82:	6021      	streq	r1, [r4, #0]
 8003a84:	6063      	str	r3, [r4, #4]
 8003a86:	6054      	str	r4, [r2, #4]
 8003a88:	e7cb      	b.n	8003a22 <_free_r+0x22>
 8003a8a:	bd38      	pop	{r3, r4, r5, pc}
 8003a8c:	2000199c 	.word	0x2000199c

08003a90 <cos>:
 8003a90:	b530      	push	{r4, r5, lr}
 8003a92:	4d20      	ldr	r5, [pc, #128]	@ (8003b14 <cos+0x84>)
 8003a94:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003a98:	42ac      	cmp	r4, r5
 8003a9a:	4602      	mov	r2, r0
 8003a9c:	460b      	mov	r3, r1
 8003a9e:	b087      	sub	sp, #28
 8003aa0:	d806      	bhi.n	8003ab0 <cos+0x20>
 8003aa2:	2200      	movs	r2, #0
 8003aa4:	2300      	movs	r3, #0
 8003aa6:	b007      	add	sp, #28
 8003aa8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003aac:	f000 b87c 	b.w	8003ba8 <__kernel_cos>
 8003ab0:	4d19      	ldr	r5, [pc, #100]	@ (8003b18 <cos+0x88>)
 8003ab2:	42ac      	cmp	r4, r5
 8003ab4:	d903      	bls.n	8003abe <cos+0x2e>
 8003ab6:	f7fc fb4f 	bl	8000158 <__aeabi_dsub>
 8003aba:	b007      	add	sp, #28
 8003abc:	bd30      	pop	{r4, r5, pc}
 8003abe:	aa02      	add	r2, sp, #8
 8003ac0:	f000 f9ea 	bl	8003e98 <__ieee754_rem_pio2>
 8003ac4:	f000 0003 	and.w	r0, r0, #3
 8003ac8:	2801      	cmp	r0, #1
 8003aca:	d009      	beq.n	8003ae0 <cos+0x50>
 8003acc:	2802      	cmp	r0, #2
 8003ace:	d011      	beq.n	8003af4 <cos+0x64>
 8003ad0:	b9b8      	cbnz	r0, 8003b02 <cos+0x72>
 8003ad2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ad6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ada:	f000 f865 	bl	8003ba8 <__kernel_cos>
 8003ade:	e7ec      	b.n	8003aba <cos+0x2a>
 8003ae0:	9000      	str	r0, [sp, #0]
 8003ae2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ae6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003aea:	f000 f91d 	bl	8003d28 <__kernel_sin>
 8003aee:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8003af2:	e7e2      	b.n	8003aba <cos+0x2a>
 8003af4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003af8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003afc:	f000 f854 	bl	8003ba8 <__kernel_cos>
 8003b00:	e7f5      	b.n	8003aee <cos+0x5e>
 8003b02:	2301      	movs	r3, #1
 8003b04:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b08:	9300      	str	r3, [sp, #0]
 8003b0a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b0e:	f000 f90b 	bl	8003d28 <__kernel_sin>
 8003b12:	e7d2      	b.n	8003aba <cos+0x2a>
 8003b14:	3fe921fb 	.word	0x3fe921fb
 8003b18:	7fefffff 	.word	0x7fefffff

08003b1c <sin>:
 8003b1c:	b530      	push	{r4, r5, lr}
 8003b1e:	4d20      	ldr	r5, [pc, #128]	@ (8003ba0 <sin+0x84>)
 8003b20:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003b24:	42ac      	cmp	r4, r5
 8003b26:	4602      	mov	r2, r0
 8003b28:	460b      	mov	r3, r1
 8003b2a:	b087      	sub	sp, #28
 8003b2c:	d806      	bhi.n	8003b3c <sin+0x20>
 8003b2e:	2300      	movs	r3, #0
 8003b30:	2200      	movs	r2, #0
 8003b32:	9300      	str	r3, [sp, #0]
 8003b34:	2300      	movs	r3, #0
 8003b36:	f000 f8f7 	bl	8003d28 <__kernel_sin>
 8003b3a:	e004      	b.n	8003b46 <sin+0x2a>
 8003b3c:	4d19      	ldr	r5, [pc, #100]	@ (8003ba4 <sin+0x88>)
 8003b3e:	42ac      	cmp	r4, r5
 8003b40:	d903      	bls.n	8003b4a <sin+0x2e>
 8003b42:	f7fc fb09 	bl	8000158 <__aeabi_dsub>
 8003b46:	b007      	add	sp, #28
 8003b48:	bd30      	pop	{r4, r5, pc}
 8003b4a:	aa02      	add	r2, sp, #8
 8003b4c:	f000 f9a4 	bl	8003e98 <__ieee754_rem_pio2>
 8003b50:	f000 0003 	and.w	r0, r0, #3
 8003b54:	2801      	cmp	r0, #1
 8003b56:	d009      	beq.n	8003b6c <sin+0x50>
 8003b58:	2802      	cmp	r0, #2
 8003b5a:	d00e      	beq.n	8003b7a <sin+0x5e>
 8003b5c:	b9c0      	cbnz	r0, 8003b90 <sin+0x74>
 8003b5e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b62:	2301      	movs	r3, #1
 8003b64:	9300      	str	r3, [sp, #0]
 8003b66:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b6a:	e7e4      	b.n	8003b36 <sin+0x1a>
 8003b6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b74:	f000 f818 	bl	8003ba8 <__kernel_cos>
 8003b78:	e7e5      	b.n	8003b46 <sin+0x2a>
 8003b7a:	2301      	movs	r3, #1
 8003b7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b80:	9300      	str	r3, [sp, #0]
 8003b82:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b86:	f000 f8cf 	bl	8003d28 <__kernel_sin>
 8003b8a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8003b8e:	e7da      	b.n	8003b46 <sin+0x2a>
 8003b90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003b94:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003b98:	f000 f806 	bl	8003ba8 <__kernel_cos>
 8003b9c:	e7f5      	b.n	8003b8a <sin+0x6e>
 8003b9e:	bf00      	nop
 8003ba0:	3fe921fb 	.word	0x3fe921fb
 8003ba4:	7fefffff 	.word	0x7fefffff

08003ba8 <__kernel_cos>:
 8003ba8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003bac:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8003bb0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8003bb4:	4680      	mov	r8, r0
 8003bb6:	4689      	mov	r9, r1
 8003bb8:	e9cd 2300 	strd	r2, r3, [sp]
 8003bbc:	d204      	bcs.n	8003bc8 <__kernel_cos+0x20>
 8003bbe:	f7fc ff1d 	bl	80009fc <__aeabi_d2iz>
 8003bc2:	2800      	cmp	r0, #0
 8003bc4:	f000 8086 	beq.w	8003cd4 <__kernel_cos+0x12c>
 8003bc8:	4642      	mov	r2, r8
 8003bca:	464b      	mov	r3, r9
 8003bcc:	4640      	mov	r0, r8
 8003bce:	4649      	mov	r1, r9
 8003bd0:	f7fc fc7a 	bl	80004c8 <__aeabi_dmul>
 8003bd4:	2200      	movs	r2, #0
 8003bd6:	4b4e      	ldr	r3, [pc, #312]	@ (8003d10 <__kernel_cos+0x168>)
 8003bd8:	4604      	mov	r4, r0
 8003bda:	460d      	mov	r5, r1
 8003bdc:	f7fc fc74 	bl	80004c8 <__aeabi_dmul>
 8003be0:	a33f      	add	r3, pc, #252	@ (adr r3, 8003ce0 <__kernel_cos+0x138>)
 8003be2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003be6:	4682      	mov	sl, r0
 8003be8:	468b      	mov	fp, r1
 8003bea:	4620      	mov	r0, r4
 8003bec:	4629      	mov	r1, r5
 8003bee:	f7fc fc6b 	bl	80004c8 <__aeabi_dmul>
 8003bf2:	a33d      	add	r3, pc, #244	@ (adr r3, 8003ce8 <__kernel_cos+0x140>)
 8003bf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003bf8:	f7fc fab0 	bl	800015c <__adddf3>
 8003bfc:	4622      	mov	r2, r4
 8003bfe:	462b      	mov	r3, r5
 8003c00:	f7fc fc62 	bl	80004c8 <__aeabi_dmul>
 8003c04:	a33a      	add	r3, pc, #232	@ (adr r3, 8003cf0 <__kernel_cos+0x148>)
 8003c06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c0a:	f7fc faa5 	bl	8000158 <__aeabi_dsub>
 8003c0e:	4622      	mov	r2, r4
 8003c10:	462b      	mov	r3, r5
 8003c12:	f7fc fc59 	bl	80004c8 <__aeabi_dmul>
 8003c16:	a338      	add	r3, pc, #224	@ (adr r3, 8003cf8 <__kernel_cos+0x150>)
 8003c18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c1c:	f7fc fa9e 	bl	800015c <__adddf3>
 8003c20:	4622      	mov	r2, r4
 8003c22:	462b      	mov	r3, r5
 8003c24:	f7fc fc50 	bl	80004c8 <__aeabi_dmul>
 8003c28:	a335      	add	r3, pc, #212	@ (adr r3, 8003d00 <__kernel_cos+0x158>)
 8003c2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c2e:	f7fc fa93 	bl	8000158 <__aeabi_dsub>
 8003c32:	4622      	mov	r2, r4
 8003c34:	462b      	mov	r3, r5
 8003c36:	f7fc fc47 	bl	80004c8 <__aeabi_dmul>
 8003c3a:	a333      	add	r3, pc, #204	@ (adr r3, 8003d08 <__kernel_cos+0x160>)
 8003c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c40:	f7fc fa8c 	bl	800015c <__adddf3>
 8003c44:	4622      	mov	r2, r4
 8003c46:	462b      	mov	r3, r5
 8003c48:	f7fc fc3e 	bl	80004c8 <__aeabi_dmul>
 8003c4c:	4622      	mov	r2, r4
 8003c4e:	462b      	mov	r3, r5
 8003c50:	f7fc fc3a 	bl	80004c8 <__aeabi_dmul>
 8003c54:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003c58:	4604      	mov	r4, r0
 8003c5a:	460d      	mov	r5, r1
 8003c5c:	4640      	mov	r0, r8
 8003c5e:	4649      	mov	r1, r9
 8003c60:	f7fc fc32 	bl	80004c8 <__aeabi_dmul>
 8003c64:	460b      	mov	r3, r1
 8003c66:	4602      	mov	r2, r0
 8003c68:	4629      	mov	r1, r5
 8003c6a:	4620      	mov	r0, r4
 8003c6c:	f7fc fa74 	bl	8000158 <__aeabi_dsub>
 8003c70:	4b28      	ldr	r3, [pc, #160]	@ (8003d14 <__kernel_cos+0x16c>)
 8003c72:	4680      	mov	r8, r0
 8003c74:	429e      	cmp	r6, r3
 8003c76:	4689      	mov	r9, r1
 8003c78:	d80e      	bhi.n	8003c98 <__kernel_cos+0xf0>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	4650      	mov	r0, sl
 8003c80:	4659      	mov	r1, fp
 8003c82:	f7fc fa69 	bl	8000158 <__aeabi_dsub>
 8003c86:	4602      	mov	r2, r0
 8003c88:	2000      	movs	r0, #0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4922      	ldr	r1, [pc, #136]	@ (8003d18 <__kernel_cos+0x170>)
 8003c8e:	f7fc fa63 	bl	8000158 <__aeabi_dsub>
 8003c92:	b003      	add	sp, #12
 8003c94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003c98:	2400      	movs	r4, #0
 8003c9a:	4b20      	ldr	r3, [pc, #128]	@ (8003d1c <__kernel_cos+0x174>)
 8003c9c:	4622      	mov	r2, r4
 8003c9e:	429e      	cmp	r6, r3
 8003ca0:	bf8c      	ite	hi
 8003ca2:	4d1f      	ldrhi	r5, [pc, #124]	@ (8003d20 <__kernel_cos+0x178>)
 8003ca4:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8003ca8:	462b      	mov	r3, r5
 8003caa:	2000      	movs	r0, #0
 8003cac:	491a      	ldr	r1, [pc, #104]	@ (8003d18 <__kernel_cos+0x170>)
 8003cae:	f7fc fa53 	bl	8000158 <__aeabi_dsub>
 8003cb2:	4622      	mov	r2, r4
 8003cb4:	4606      	mov	r6, r0
 8003cb6:	460f      	mov	r7, r1
 8003cb8:	462b      	mov	r3, r5
 8003cba:	4650      	mov	r0, sl
 8003cbc:	4659      	mov	r1, fp
 8003cbe:	f7fc fa4b 	bl	8000158 <__aeabi_dsub>
 8003cc2:	4642      	mov	r2, r8
 8003cc4:	464b      	mov	r3, r9
 8003cc6:	f7fc fa47 	bl	8000158 <__aeabi_dsub>
 8003cca:	4602      	mov	r2, r0
 8003ccc:	460b      	mov	r3, r1
 8003cce:	4630      	mov	r0, r6
 8003cd0:	4639      	mov	r1, r7
 8003cd2:	e7dc      	b.n	8003c8e <__kernel_cos+0xe6>
 8003cd4:	2000      	movs	r0, #0
 8003cd6:	4910      	ldr	r1, [pc, #64]	@ (8003d18 <__kernel_cos+0x170>)
 8003cd8:	e7db      	b.n	8003c92 <__kernel_cos+0xea>
 8003cda:	bf00      	nop
 8003cdc:	f3af 8000 	nop.w
 8003ce0:	be8838d4 	.word	0xbe8838d4
 8003ce4:	bda8fae9 	.word	0xbda8fae9
 8003ce8:	bdb4b1c4 	.word	0xbdb4b1c4
 8003cec:	3e21ee9e 	.word	0x3e21ee9e
 8003cf0:	809c52ad 	.word	0x809c52ad
 8003cf4:	3e927e4f 	.word	0x3e927e4f
 8003cf8:	19cb1590 	.word	0x19cb1590
 8003cfc:	3efa01a0 	.word	0x3efa01a0
 8003d00:	16c15177 	.word	0x16c15177
 8003d04:	3f56c16c 	.word	0x3f56c16c
 8003d08:	5555554c 	.word	0x5555554c
 8003d0c:	3fa55555 	.word	0x3fa55555
 8003d10:	3fe00000 	.word	0x3fe00000
 8003d14:	3fd33332 	.word	0x3fd33332
 8003d18:	3ff00000 	.word	0x3ff00000
 8003d1c:	3fe90000 	.word	0x3fe90000
 8003d20:	3fd20000 	.word	0x3fd20000
 8003d24:	00000000 	.word	0x00000000

08003d28 <__kernel_sin>:
 8003d28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003d2c:	461f      	mov	r7, r3
 8003d2e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8003d32:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8003d36:	4604      	mov	r4, r0
 8003d38:	460d      	mov	r5, r1
 8003d3a:	4616      	mov	r6, r2
 8003d3c:	b085      	sub	sp, #20
 8003d3e:	d203      	bcs.n	8003d48 <__kernel_sin+0x20>
 8003d40:	f7fc fe5c 	bl	80009fc <__aeabi_d2iz>
 8003d44:	2800      	cmp	r0, #0
 8003d46:	d051      	beq.n	8003dec <__kernel_sin+0xc4>
 8003d48:	4622      	mov	r2, r4
 8003d4a:	462b      	mov	r3, r5
 8003d4c:	4620      	mov	r0, r4
 8003d4e:	4629      	mov	r1, r5
 8003d50:	f7fc fbba 	bl	80004c8 <__aeabi_dmul>
 8003d54:	4682      	mov	sl, r0
 8003d56:	468b      	mov	fp, r1
 8003d58:	4602      	mov	r2, r0
 8003d5a:	460b      	mov	r3, r1
 8003d5c:	4620      	mov	r0, r4
 8003d5e:	4629      	mov	r1, r5
 8003d60:	f7fc fbb2 	bl	80004c8 <__aeabi_dmul>
 8003d64:	a33e      	add	r3, pc, #248	@ (adr r3, 8003e60 <__kernel_sin+0x138>)
 8003d66:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d6a:	4680      	mov	r8, r0
 8003d6c:	4689      	mov	r9, r1
 8003d6e:	4650      	mov	r0, sl
 8003d70:	4659      	mov	r1, fp
 8003d72:	f7fc fba9 	bl	80004c8 <__aeabi_dmul>
 8003d76:	a33c      	add	r3, pc, #240	@ (adr r3, 8003e68 <__kernel_sin+0x140>)
 8003d78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d7c:	f7fc f9ec 	bl	8000158 <__aeabi_dsub>
 8003d80:	4652      	mov	r2, sl
 8003d82:	465b      	mov	r3, fp
 8003d84:	f7fc fba0 	bl	80004c8 <__aeabi_dmul>
 8003d88:	a339      	add	r3, pc, #228	@ (adr r3, 8003e70 <__kernel_sin+0x148>)
 8003d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d8e:	f7fc f9e5 	bl	800015c <__adddf3>
 8003d92:	4652      	mov	r2, sl
 8003d94:	465b      	mov	r3, fp
 8003d96:	f7fc fb97 	bl	80004c8 <__aeabi_dmul>
 8003d9a:	a337      	add	r3, pc, #220	@ (adr r3, 8003e78 <__kernel_sin+0x150>)
 8003d9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003da0:	f7fc f9da 	bl	8000158 <__aeabi_dsub>
 8003da4:	4652      	mov	r2, sl
 8003da6:	465b      	mov	r3, fp
 8003da8:	f7fc fb8e 	bl	80004c8 <__aeabi_dmul>
 8003dac:	a334      	add	r3, pc, #208	@ (adr r3, 8003e80 <__kernel_sin+0x158>)
 8003dae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003db2:	f7fc f9d3 	bl	800015c <__adddf3>
 8003db6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8003db8:	e9cd 0100 	strd	r0, r1, [sp]
 8003dbc:	b9db      	cbnz	r3, 8003df6 <__kernel_sin+0xce>
 8003dbe:	4602      	mov	r2, r0
 8003dc0:	460b      	mov	r3, r1
 8003dc2:	4650      	mov	r0, sl
 8003dc4:	4659      	mov	r1, fp
 8003dc6:	f7fc fb7f 	bl	80004c8 <__aeabi_dmul>
 8003dca:	a32f      	add	r3, pc, #188	@ (adr r3, 8003e88 <__kernel_sin+0x160>)
 8003dcc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dd0:	f7fc f9c2 	bl	8000158 <__aeabi_dsub>
 8003dd4:	4642      	mov	r2, r8
 8003dd6:	464b      	mov	r3, r9
 8003dd8:	f7fc fb76 	bl	80004c8 <__aeabi_dmul>
 8003ddc:	4602      	mov	r2, r0
 8003dde:	460b      	mov	r3, r1
 8003de0:	4620      	mov	r0, r4
 8003de2:	4629      	mov	r1, r5
 8003de4:	f7fc f9ba 	bl	800015c <__adddf3>
 8003de8:	4604      	mov	r4, r0
 8003dea:	460d      	mov	r5, r1
 8003dec:	4620      	mov	r0, r4
 8003dee:	4629      	mov	r1, r5
 8003df0:	b005      	add	sp, #20
 8003df2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003df6:	2200      	movs	r2, #0
 8003df8:	4630      	mov	r0, r6
 8003dfa:	4639      	mov	r1, r7
 8003dfc:	4b24      	ldr	r3, [pc, #144]	@ (8003e90 <__kernel_sin+0x168>)
 8003dfe:	f7fc fb63 	bl	80004c8 <__aeabi_dmul>
 8003e02:	e9dd 2300 	ldrd	r2, r3, [sp]
 8003e06:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8003e0a:	4640      	mov	r0, r8
 8003e0c:	4649      	mov	r1, r9
 8003e0e:	f7fc fb5b 	bl	80004c8 <__aeabi_dmul>
 8003e12:	4602      	mov	r2, r0
 8003e14:	460b      	mov	r3, r1
 8003e16:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003e1a:	f7fc f99d 	bl	8000158 <__aeabi_dsub>
 8003e1e:	4652      	mov	r2, sl
 8003e20:	465b      	mov	r3, fp
 8003e22:	f7fc fb51 	bl	80004c8 <__aeabi_dmul>
 8003e26:	4632      	mov	r2, r6
 8003e28:	463b      	mov	r3, r7
 8003e2a:	f7fc f995 	bl	8000158 <__aeabi_dsub>
 8003e2e:	a316      	add	r3, pc, #88	@ (adr r3, 8003e88 <__kernel_sin+0x160>)
 8003e30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e34:	4606      	mov	r6, r0
 8003e36:	460f      	mov	r7, r1
 8003e38:	4640      	mov	r0, r8
 8003e3a:	4649      	mov	r1, r9
 8003e3c:	f7fc fb44 	bl	80004c8 <__aeabi_dmul>
 8003e40:	4602      	mov	r2, r0
 8003e42:	460b      	mov	r3, r1
 8003e44:	4630      	mov	r0, r6
 8003e46:	4639      	mov	r1, r7
 8003e48:	f7fc f988 	bl	800015c <__adddf3>
 8003e4c:	4602      	mov	r2, r0
 8003e4e:	460b      	mov	r3, r1
 8003e50:	4620      	mov	r0, r4
 8003e52:	4629      	mov	r1, r5
 8003e54:	f7fc f980 	bl	8000158 <__aeabi_dsub>
 8003e58:	e7c6      	b.n	8003de8 <__kernel_sin+0xc0>
 8003e5a:	bf00      	nop
 8003e5c:	f3af 8000 	nop.w
 8003e60:	5acfd57c 	.word	0x5acfd57c
 8003e64:	3de5d93a 	.word	0x3de5d93a
 8003e68:	8a2b9ceb 	.word	0x8a2b9ceb
 8003e6c:	3e5ae5e6 	.word	0x3e5ae5e6
 8003e70:	57b1fe7d 	.word	0x57b1fe7d
 8003e74:	3ec71de3 	.word	0x3ec71de3
 8003e78:	19c161d5 	.word	0x19c161d5
 8003e7c:	3f2a01a0 	.word	0x3f2a01a0
 8003e80:	1110f8a6 	.word	0x1110f8a6
 8003e84:	3f811111 	.word	0x3f811111
 8003e88:	55555549 	.word	0x55555549
 8003e8c:	3fc55555 	.word	0x3fc55555
 8003e90:	3fe00000 	.word	0x3fe00000
 8003e94:	00000000 	.word	0x00000000

08003e98 <__ieee754_rem_pio2>:
 8003e98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003e9c:	4bc4      	ldr	r3, [pc, #784]	@ (80041b0 <__ieee754_rem_pio2+0x318>)
 8003e9e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8003ea2:	b08d      	sub	sp, #52	@ 0x34
 8003ea4:	4598      	cmp	r8, r3
 8003ea6:	4606      	mov	r6, r0
 8003ea8:	460f      	mov	r7, r1
 8003eaa:	4614      	mov	r4, r2
 8003eac:	9104      	str	r1, [sp, #16]
 8003eae:	d807      	bhi.n	8003ec0 <__ieee754_rem_pio2+0x28>
 8003eb0:	e9c2 6700 	strd	r6, r7, [r2]
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	2200      	movs	r2, #0
 8003eb8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8003ebc:	2500      	movs	r5, #0
 8003ebe:	e026      	b.n	8003f0e <__ieee754_rem_pio2+0x76>
 8003ec0:	4bbc      	ldr	r3, [pc, #752]	@ (80041b4 <__ieee754_rem_pio2+0x31c>)
 8003ec2:	4598      	cmp	r8, r3
 8003ec4:	d876      	bhi.n	8003fb4 <__ieee754_rem_pio2+0x11c>
 8003ec6:	9b04      	ldr	r3, [sp, #16]
 8003ec8:	4dbb      	ldr	r5, [pc, #748]	@ (80041b8 <__ieee754_rem_pio2+0x320>)
 8003eca:	2b00      	cmp	r3, #0
 8003ecc:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004178 <__ieee754_rem_pio2+0x2e0>)
 8003ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ed2:	dd38      	ble.n	8003f46 <__ieee754_rem_pio2+0xae>
 8003ed4:	f7fc f940 	bl	8000158 <__aeabi_dsub>
 8003ed8:	45a8      	cmp	r8, r5
 8003eda:	4606      	mov	r6, r0
 8003edc:	460f      	mov	r7, r1
 8003ede:	d01a      	beq.n	8003f16 <__ieee754_rem_pio2+0x7e>
 8003ee0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004180 <__ieee754_rem_pio2+0x2e8>)
 8003ee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ee6:	f7fc f937 	bl	8000158 <__aeabi_dsub>
 8003eea:	4602      	mov	r2, r0
 8003eec:	460b      	mov	r3, r1
 8003eee:	4680      	mov	r8, r0
 8003ef0:	4689      	mov	r9, r1
 8003ef2:	4630      	mov	r0, r6
 8003ef4:	4639      	mov	r1, r7
 8003ef6:	f7fc f92f 	bl	8000158 <__aeabi_dsub>
 8003efa:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004180 <__ieee754_rem_pio2+0x2e8>)
 8003efc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f00:	f7fc f92a 	bl	8000158 <__aeabi_dsub>
 8003f04:	2501      	movs	r5, #1
 8003f06:	e9c4 8900 	strd	r8, r9, [r4]
 8003f0a:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f0e:	4628      	mov	r0, r5
 8003f10:	b00d      	add	sp, #52	@ 0x34
 8003f12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8003f16:	a39c      	add	r3, pc, #624	@ (adr r3, 8004188 <__ieee754_rem_pio2+0x2f0>)
 8003f18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f1c:	f7fc f91c 	bl	8000158 <__aeabi_dsub>
 8003f20:	a39b      	add	r3, pc, #620	@ (adr r3, 8004190 <__ieee754_rem_pio2+0x2f8>)
 8003f22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f26:	4606      	mov	r6, r0
 8003f28:	460f      	mov	r7, r1
 8003f2a:	f7fc f915 	bl	8000158 <__aeabi_dsub>
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	4680      	mov	r8, r0
 8003f34:	4689      	mov	r9, r1
 8003f36:	4630      	mov	r0, r6
 8003f38:	4639      	mov	r1, r7
 8003f3a:	f7fc f90d 	bl	8000158 <__aeabi_dsub>
 8003f3e:	a394      	add	r3, pc, #592	@ (adr r3, 8004190 <__ieee754_rem_pio2+0x2f8>)
 8003f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f44:	e7dc      	b.n	8003f00 <__ieee754_rem_pio2+0x68>
 8003f46:	f7fc f909 	bl	800015c <__adddf3>
 8003f4a:	45a8      	cmp	r8, r5
 8003f4c:	4606      	mov	r6, r0
 8003f4e:	460f      	mov	r7, r1
 8003f50:	d018      	beq.n	8003f84 <__ieee754_rem_pio2+0xec>
 8003f52:	a38b      	add	r3, pc, #556	@ (adr r3, 8004180 <__ieee754_rem_pio2+0x2e8>)
 8003f54:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f58:	f7fc f900 	bl	800015c <__adddf3>
 8003f5c:	4602      	mov	r2, r0
 8003f5e:	460b      	mov	r3, r1
 8003f60:	4680      	mov	r8, r0
 8003f62:	4689      	mov	r9, r1
 8003f64:	4630      	mov	r0, r6
 8003f66:	4639      	mov	r1, r7
 8003f68:	f7fc f8f6 	bl	8000158 <__aeabi_dsub>
 8003f6c:	a384      	add	r3, pc, #528	@ (adr r3, 8004180 <__ieee754_rem_pio2+0x2e8>)
 8003f6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f72:	f7fc f8f3 	bl	800015c <__adddf3>
 8003f76:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8003f7a:	e9c4 8900 	strd	r8, r9, [r4]
 8003f7e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8003f82:	e7c4      	b.n	8003f0e <__ieee754_rem_pio2+0x76>
 8003f84:	a380      	add	r3, pc, #512	@ (adr r3, 8004188 <__ieee754_rem_pio2+0x2f0>)
 8003f86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f8a:	f7fc f8e7 	bl	800015c <__adddf3>
 8003f8e:	a380      	add	r3, pc, #512	@ (adr r3, 8004190 <__ieee754_rem_pio2+0x2f8>)
 8003f90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f94:	4606      	mov	r6, r0
 8003f96:	460f      	mov	r7, r1
 8003f98:	f7fc f8e0 	bl	800015c <__adddf3>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	460b      	mov	r3, r1
 8003fa0:	4680      	mov	r8, r0
 8003fa2:	4689      	mov	r9, r1
 8003fa4:	4630      	mov	r0, r6
 8003fa6:	4639      	mov	r1, r7
 8003fa8:	f7fc f8d6 	bl	8000158 <__aeabi_dsub>
 8003fac:	a378      	add	r3, pc, #480	@ (adr r3, 8004190 <__ieee754_rem_pio2+0x2f8>)
 8003fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fb2:	e7de      	b.n	8003f72 <__ieee754_rem_pio2+0xda>
 8003fb4:	4b81      	ldr	r3, [pc, #516]	@ (80041bc <__ieee754_rem_pio2+0x324>)
 8003fb6:	4598      	cmp	r8, r3
 8003fb8:	f200 80cf 	bhi.w	800415a <__ieee754_rem_pio2+0x2c2>
 8003fbc:	f000 f962 	bl	8004284 <fabs>
 8003fc0:	a375      	add	r3, pc, #468	@ (adr r3, 8004198 <__ieee754_rem_pio2+0x300>)
 8003fc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc6:	4606      	mov	r6, r0
 8003fc8:	460f      	mov	r7, r1
 8003fca:	f7fc fa7d 	bl	80004c8 <__aeabi_dmul>
 8003fce:	2200      	movs	r2, #0
 8003fd0:	4b7b      	ldr	r3, [pc, #492]	@ (80041c0 <__ieee754_rem_pio2+0x328>)
 8003fd2:	f7fc f8c3 	bl	800015c <__adddf3>
 8003fd6:	f7fc fd11 	bl	80009fc <__aeabi_d2iz>
 8003fda:	4605      	mov	r5, r0
 8003fdc:	f7fc fa0a 	bl	80003f4 <__aeabi_i2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003fe8:	a363      	add	r3, pc, #396	@ (adr r3, 8004178 <__ieee754_rem_pio2+0x2e0>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc fa6b 	bl	80004c8 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4630      	mov	r0, r6
 8003ff8:	4639      	mov	r1, r7
 8003ffa:	f7fc f8ad 	bl	8000158 <__aeabi_dsub>
 8003ffe:	a360      	add	r3, pc, #384	@ (adr r3, 8004180 <__ieee754_rem_pio2+0x2e8>)
 8004000:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004004:	4682      	mov	sl, r0
 8004006:	468b      	mov	fp, r1
 8004008:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800400c:	f7fc fa5c 	bl	80004c8 <__aeabi_dmul>
 8004010:	2d1f      	cmp	r5, #31
 8004012:	4606      	mov	r6, r0
 8004014:	460f      	mov	r7, r1
 8004016:	dc0c      	bgt.n	8004032 <__ieee754_rem_pio2+0x19a>
 8004018:	4b6a      	ldr	r3, [pc, #424]	@ (80041c4 <__ieee754_rem_pio2+0x32c>)
 800401a:	1e6a      	subs	r2, r5, #1
 800401c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004020:	4543      	cmp	r3, r8
 8004022:	d006      	beq.n	8004032 <__ieee754_rem_pio2+0x19a>
 8004024:	4632      	mov	r2, r6
 8004026:	463b      	mov	r3, r7
 8004028:	4650      	mov	r0, sl
 800402a:	4659      	mov	r1, fp
 800402c:	f7fc f894 	bl	8000158 <__aeabi_dsub>
 8004030:	e00e      	b.n	8004050 <__ieee754_rem_pio2+0x1b8>
 8004032:	463b      	mov	r3, r7
 8004034:	4632      	mov	r2, r6
 8004036:	4650      	mov	r0, sl
 8004038:	4659      	mov	r1, fp
 800403a:	f7fc f88d 	bl	8000158 <__aeabi_dsub>
 800403e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004042:	9305      	str	r3, [sp, #20]
 8004044:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004048:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800404c:	2b10      	cmp	r3, #16
 800404e:	dc02      	bgt.n	8004056 <__ieee754_rem_pio2+0x1be>
 8004050:	e9c4 0100 	strd	r0, r1, [r4]
 8004054:	e039      	b.n	80040ca <__ieee754_rem_pio2+0x232>
 8004056:	a34c      	add	r3, pc, #304	@ (adr r3, 8004188 <__ieee754_rem_pio2+0x2f0>)
 8004058:	e9d3 2300 	ldrd	r2, r3, [r3]
 800405c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004060:	f7fc fa32 	bl	80004c8 <__aeabi_dmul>
 8004064:	4606      	mov	r6, r0
 8004066:	460f      	mov	r7, r1
 8004068:	4602      	mov	r2, r0
 800406a:	460b      	mov	r3, r1
 800406c:	4650      	mov	r0, sl
 800406e:	4659      	mov	r1, fp
 8004070:	f7fc f872 	bl	8000158 <__aeabi_dsub>
 8004074:	4602      	mov	r2, r0
 8004076:	460b      	mov	r3, r1
 8004078:	4680      	mov	r8, r0
 800407a:	4689      	mov	r9, r1
 800407c:	4650      	mov	r0, sl
 800407e:	4659      	mov	r1, fp
 8004080:	f7fc f86a 	bl	8000158 <__aeabi_dsub>
 8004084:	4632      	mov	r2, r6
 8004086:	463b      	mov	r3, r7
 8004088:	f7fc f866 	bl	8000158 <__aeabi_dsub>
 800408c:	a340      	add	r3, pc, #256	@ (adr r3, 8004190 <__ieee754_rem_pio2+0x2f8>)
 800408e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004092:	4606      	mov	r6, r0
 8004094:	460f      	mov	r7, r1
 8004096:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800409a:	f7fc fa15 	bl	80004c8 <__aeabi_dmul>
 800409e:	4632      	mov	r2, r6
 80040a0:	463b      	mov	r3, r7
 80040a2:	f7fc f859 	bl	8000158 <__aeabi_dsub>
 80040a6:	4602      	mov	r2, r0
 80040a8:	460b      	mov	r3, r1
 80040aa:	4606      	mov	r6, r0
 80040ac:	460f      	mov	r7, r1
 80040ae:	4640      	mov	r0, r8
 80040b0:	4649      	mov	r1, r9
 80040b2:	f7fc f851 	bl	8000158 <__aeabi_dsub>
 80040b6:	9a05      	ldr	r2, [sp, #20]
 80040b8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80040bc:	1ad3      	subs	r3, r2, r3
 80040be:	2b31      	cmp	r3, #49	@ 0x31
 80040c0:	dc20      	bgt.n	8004104 <__ieee754_rem_pio2+0x26c>
 80040c2:	46c2      	mov	sl, r8
 80040c4:	46cb      	mov	fp, r9
 80040c6:	e9c4 0100 	strd	r0, r1, [r4]
 80040ca:	e9d4 8900 	ldrd	r8, r9, [r4]
 80040ce:	4650      	mov	r0, sl
 80040d0:	4642      	mov	r2, r8
 80040d2:	464b      	mov	r3, r9
 80040d4:	4659      	mov	r1, fp
 80040d6:	f7fc f83f 	bl	8000158 <__aeabi_dsub>
 80040da:	463b      	mov	r3, r7
 80040dc:	4632      	mov	r2, r6
 80040de:	f7fc f83b 	bl	8000158 <__aeabi_dsub>
 80040e2:	9b04      	ldr	r3, [sp, #16]
 80040e4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80040e8:	2b00      	cmp	r3, #0
 80040ea:	f6bf af10 	bge.w	8003f0e <__ieee754_rem_pio2+0x76>
 80040ee:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80040f2:	6063      	str	r3, [r4, #4]
 80040f4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80040f8:	f8c4 8000 	str.w	r8, [r4]
 80040fc:	60a0      	str	r0, [r4, #8]
 80040fe:	60e3      	str	r3, [r4, #12]
 8004100:	426d      	negs	r5, r5
 8004102:	e704      	b.n	8003f0e <__ieee754_rem_pio2+0x76>
 8004104:	a326      	add	r3, pc, #152	@ (adr r3, 80041a0 <__ieee754_rem_pio2+0x308>)
 8004106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800410a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800410e:	f7fc f9db 	bl	80004c8 <__aeabi_dmul>
 8004112:	4606      	mov	r6, r0
 8004114:	460f      	mov	r7, r1
 8004116:	4602      	mov	r2, r0
 8004118:	460b      	mov	r3, r1
 800411a:	4640      	mov	r0, r8
 800411c:	4649      	mov	r1, r9
 800411e:	f7fc f81b 	bl	8000158 <__aeabi_dsub>
 8004122:	4602      	mov	r2, r0
 8004124:	460b      	mov	r3, r1
 8004126:	4682      	mov	sl, r0
 8004128:	468b      	mov	fp, r1
 800412a:	4640      	mov	r0, r8
 800412c:	4649      	mov	r1, r9
 800412e:	f7fc f813 	bl	8000158 <__aeabi_dsub>
 8004132:	4632      	mov	r2, r6
 8004134:	463b      	mov	r3, r7
 8004136:	f7fc f80f 	bl	8000158 <__aeabi_dsub>
 800413a:	a31b      	add	r3, pc, #108	@ (adr r3, 80041a8 <__ieee754_rem_pio2+0x310>)
 800413c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004140:	4606      	mov	r6, r0
 8004142:	460f      	mov	r7, r1
 8004144:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004148:	f7fc f9be 	bl	80004c8 <__aeabi_dmul>
 800414c:	4632      	mov	r2, r6
 800414e:	463b      	mov	r3, r7
 8004150:	f7fc f802 	bl	8000158 <__aeabi_dsub>
 8004154:	4606      	mov	r6, r0
 8004156:	460f      	mov	r7, r1
 8004158:	e764      	b.n	8004024 <__ieee754_rem_pio2+0x18c>
 800415a:	4b1b      	ldr	r3, [pc, #108]	@ (80041c8 <__ieee754_rem_pio2+0x330>)
 800415c:	4598      	cmp	r8, r3
 800415e:	d935      	bls.n	80041cc <__ieee754_rem_pio2+0x334>
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	f7fb fff8 	bl	8000158 <__aeabi_dsub>
 8004168:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800416c:	e9c4 0100 	strd	r0, r1, [r4]
 8004170:	e6a4      	b.n	8003ebc <__ieee754_rem_pio2+0x24>
 8004172:	bf00      	nop
 8004174:	f3af 8000 	nop.w
 8004178:	54400000 	.word	0x54400000
 800417c:	3ff921fb 	.word	0x3ff921fb
 8004180:	1a626331 	.word	0x1a626331
 8004184:	3dd0b461 	.word	0x3dd0b461
 8004188:	1a600000 	.word	0x1a600000
 800418c:	3dd0b461 	.word	0x3dd0b461
 8004190:	2e037073 	.word	0x2e037073
 8004194:	3ba3198a 	.word	0x3ba3198a
 8004198:	6dc9c883 	.word	0x6dc9c883
 800419c:	3fe45f30 	.word	0x3fe45f30
 80041a0:	2e000000 	.word	0x2e000000
 80041a4:	3ba3198a 	.word	0x3ba3198a
 80041a8:	252049c1 	.word	0x252049c1
 80041ac:	397b839a 	.word	0x397b839a
 80041b0:	3fe921fb 	.word	0x3fe921fb
 80041b4:	4002d97b 	.word	0x4002d97b
 80041b8:	3ff921fb 	.word	0x3ff921fb
 80041bc:	413921fb 	.word	0x413921fb
 80041c0:	3fe00000 	.word	0x3fe00000
 80041c4:	08004b04 	.word	0x08004b04
 80041c8:	7fefffff 	.word	0x7fefffff
 80041cc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80041d0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80041d4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80041d8:	460f      	mov	r7, r1
 80041da:	f7fc fc0f 	bl	80009fc <__aeabi_d2iz>
 80041de:	f7fc f909 	bl	80003f4 <__aeabi_i2d>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	4630      	mov	r0, r6
 80041e8:	4639      	mov	r1, r7
 80041ea:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80041ee:	f7fb ffb3 	bl	8000158 <__aeabi_dsub>
 80041f2:	2200      	movs	r2, #0
 80041f4:	4b21      	ldr	r3, [pc, #132]	@ (800427c <__ieee754_rem_pio2+0x3e4>)
 80041f6:	f7fc f967 	bl	80004c8 <__aeabi_dmul>
 80041fa:	460f      	mov	r7, r1
 80041fc:	4606      	mov	r6, r0
 80041fe:	f7fc fbfd 	bl	80009fc <__aeabi_d2iz>
 8004202:	f7fc f8f7 	bl	80003f4 <__aeabi_i2d>
 8004206:	4602      	mov	r2, r0
 8004208:	460b      	mov	r3, r1
 800420a:	4630      	mov	r0, r6
 800420c:	4639      	mov	r1, r7
 800420e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004212:	f7fb ffa1 	bl	8000158 <__aeabi_dsub>
 8004216:	2200      	movs	r2, #0
 8004218:	4b18      	ldr	r3, [pc, #96]	@ (800427c <__ieee754_rem_pio2+0x3e4>)
 800421a:	f7fc f955 	bl	80004c8 <__aeabi_dmul>
 800421e:	f04f 0803 	mov.w	r8, #3
 8004222:	2600      	movs	r6, #0
 8004224:	2700      	movs	r7, #0
 8004226:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800422a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800422e:	4632      	mov	r2, r6
 8004230:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004234:	463b      	mov	r3, r7
 8004236:	46c2      	mov	sl, r8
 8004238:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800423c:	f7fc fbac 	bl	8000998 <__aeabi_dcmpeq>
 8004240:	2800      	cmp	r0, #0
 8004242:	d1f4      	bne.n	800422e <__ieee754_rem_pio2+0x396>
 8004244:	4b0e      	ldr	r3, [pc, #56]	@ (8004280 <__ieee754_rem_pio2+0x3e8>)
 8004246:	462a      	mov	r2, r5
 8004248:	9301      	str	r3, [sp, #4]
 800424a:	2302      	movs	r3, #2
 800424c:	4621      	mov	r1, r4
 800424e:	9300      	str	r3, [sp, #0]
 8004250:	a806      	add	r0, sp, #24
 8004252:	4653      	mov	r3, sl
 8004254:	f000 f81a 	bl	800428c <__kernel_rem_pio2>
 8004258:	9b04      	ldr	r3, [sp, #16]
 800425a:	4605      	mov	r5, r0
 800425c:	2b00      	cmp	r3, #0
 800425e:	f6bf ae56 	bge.w	8003f0e <__ieee754_rem_pio2+0x76>
 8004262:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004266:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800426a:	e9c4 2300 	strd	r2, r3, [r4]
 800426e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004272:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004276:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800427a:	e741      	b.n	8004100 <__ieee754_rem_pio2+0x268>
 800427c:	41700000 	.word	0x41700000
 8004280:	08004b84 	.word	0x08004b84

08004284 <fabs>:
 8004284:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004288:	4619      	mov	r1, r3
 800428a:	4770      	bx	lr

0800428c <__kernel_rem_pio2>:
 800428c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004290:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004294:	9308      	str	r3, [sp, #32]
 8004296:	9104      	str	r1, [sp, #16]
 8004298:	4bb6      	ldr	r3, [pc, #728]	@ (8004574 <__kernel_rem_pio2+0x2e8>)
 800429a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800429c:	f112 0f14 	cmn.w	r2, #20
 80042a0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80042a4:	bfa8      	it	ge
 80042a6:	1ed4      	subge	r4, r2, #3
 80042a8:	9302      	str	r3, [sp, #8]
 80042aa:	9b08      	ldr	r3, [sp, #32]
 80042ac:	bfb8      	it	lt
 80042ae:	2400      	movlt	r4, #0
 80042b0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80042b4:	9306      	str	r3, [sp, #24]
 80042b6:	bfa4      	itt	ge
 80042b8:	2318      	movge	r3, #24
 80042ba:	fb94 f4f3 	sdivge	r4, r4, r3
 80042be:	f06f 0317 	mvn.w	r3, #23
 80042c2:	fb04 3303 	mla	r3, r4, r3, r3
 80042c6:	eb03 0a02 	add.w	sl, r3, r2
 80042ca:	9a06      	ldr	r2, [sp, #24]
 80042cc:	9b02      	ldr	r3, [sp, #8]
 80042ce:	1aa7      	subs	r7, r4, r2
 80042d0:	eb03 0802 	add.w	r8, r3, r2
 80042d4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80042d6:	2500      	movs	r5, #0
 80042d8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80042dc:	2200      	movs	r2, #0
 80042de:	2300      	movs	r3, #0
 80042e0:	9009      	str	r0, [sp, #36]	@ 0x24
 80042e2:	ae20      	add	r6, sp, #128	@ 0x80
 80042e4:	4545      	cmp	r5, r8
 80042e6:	dd14      	ble.n	8004312 <__kernel_rem_pio2+0x86>
 80042e8:	f04f 0800 	mov.w	r8, #0
 80042ec:	9a08      	ldr	r2, [sp, #32]
 80042ee:	ab20      	add	r3, sp, #128	@ 0x80
 80042f0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80042f4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80042f8:	9b02      	ldr	r3, [sp, #8]
 80042fa:	4598      	cmp	r8, r3
 80042fc:	dc35      	bgt.n	800436a <__kernel_rem_pio2+0xde>
 80042fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004300:	2200      	movs	r2, #0
 8004302:	f1a3 0908 	sub.w	r9, r3, #8
 8004306:	2300      	movs	r3, #0
 8004308:	462f      	mov	r7, r5
 800430a:	2600      	movs	r6, #0
 800430c:	e9cd 2300 	strd	r2, r3, [sp]
 8004310:	e01f      	b.n	8004352 <__kernel_rem_pio2+0xc6>
 8004312:	42ef      	cmn	r7, r5
 8004314:	d40b      	bmi.n	800432e <__kernel_rem_pio2+0xa2>
 8004316:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800431a:	e9cd 2300 	strd	r2, r3, [sp]
 800431e:	f7fc f869 	bl	80003f4 <__aeabi_i2d>
 8004322:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004326:	e8e6 0102 	strd	r0, r1, [r6], #8
 800432a:	3501      	adds	r5, #1
 800432c:	e7da      	b.n	80042e4 <__kernel_rem_pio2+0x58>
 800432e:	4610      	mov	r0, r2
 8004330:	4619      	mov	r1, r3
 8004332:	e7f8      	b.n	8004326 <__kernel_rem_pio2+0x9a>
 8004334:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004338:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800433c:	f7fc f8c4 	bl	80004c8 <__aeabi_dmul>
 8004340:	4602      	mov	r2, r0
 8004342:	460b      	mov	r3, r1
 8004344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004348:	f7fb ff08 	bl	800015c <__adddf3>
 800434c:	e9cd 0100 	strd	r0, r1, [sp]
 8004350:	3601      	adds	r6, #1
 8004352:	9b06      	ldr	r3, [sp, #24]
 8004354:	3f08      	subs	r7, #8
 8004356:	429e      	cmp	r6, r3
 8004358:	ddec      	ble.n	8004334 <__kernel_rem_pio2+0xa8>
 800435a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800435e:	f108 0801 	add.w	r8, r8, #1
 8004362:	e8eb 2302 	strd	r2, r3, [fp], #8
 8004366:	3508      	adds	r5, #8
 8004368:	e7c6      	b.n	80042f8 <__kernel_rem_pio2+0x6c>
 800436a:	9b02      	ldr	r3, [sp, #8]
 800436c:	aa0c      	add	r2, sp, #48	@ 0x30
 800436e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8004372:	930b      	str	r3, [sp, #44]	@ 0x2c
 8004374:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8004376:	f8dd b008 	ldr.w	fp, [sp, #8]
 800437a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800437e:	930a      	str	r3, [sp, #40]	@ 0x28
 8004380:	ab98      	add	r3, sp, #608	@ 0x260
 8004382:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004386:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800438a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800438c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004390:	ae0c      	add	r6, sp, #48	@ 0x30
 8004392:	4698      	mov	r8, r3
 8004394:	46b1      	mov	r9, r6
 8004396:	465f      	mov	r7, fp
 8004398:	9307      	str	r3, [sp, #28]
 800439a:	2f00      	cmp	r7, #0
 800439c:	f1a8 0808 	sub.w	r8, r8, #8
 80043a0:	dc71      	bgt.n	8004486 <__kernel_rem_pio2+0x1fa>
 80043a2:	4652      	mov	r2, sl
 80043a4:	4620      	mov	r0, r4
 80043a6:	4629      	mov	r1, r5
 80043a8:	f000 fa96 	bl	80048d8 <scalbn>
 80043ac:	2200      	movs	r2, #0
 80043ae:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80043b2:	4604      	mov	r4, r0
 80043b4:	460d      	mov	r5, r1
 80043b6:	f7fc f887 	bl	80004c8 <__aeabi_dmul>
 80043ba:	f000 fb05 	bl	80049c8 <floor>
 80043be:	2200      	movs	r2, #0
 80043c0:	4b6d      	ldr	r3, [pc, #436]	@ (8004578 <__kernel_rem_pio2+0x2ec>)
 80043c2:	f7fc f881 	bl	80004c8 <__aeabi_dmul>
 80043c6:	4602      	mov	r2, r0
 80043c8:	460b      	mov	r3, r1
 80043ca:	4620      	mov	r0, r4
 80043cc:	4629      	mov	r1, r5
 80043ce:	f7fb fec3 	bl	8000158 <__aeabi_dsub>
 80043d2:	460d      	mov	r5, r1
 80043d4:	4604      	mov	r4, r0
 80043d6:	f7fc fb11 	bl	80009fc <__aeabi_d2iz>
 80043da:	9005      	str	r0, [sp, #20]
 80043dc:	f7fc f80a 	bl	80003f4 <__aeabi_i2d>
 80043e0:	4602      	mov	r2, r0
 80043e2:	460b      	mov	r3, r1
 80043e4:	4620      	mov	r0, r4
 80043e6:	4629      	mov	r1, r5
 80043e8:	f7fb feb6 	bl	8000158 <__aeabi_dsub>
 80043ec:	f1ba 0f00 	cmp.w	sl, #0
 80043f0:	4680      	mov	r8, r0
 80043f2:	4689      	mov	r9, r1
 80043f4:	dd6d      	ble.n	80044d2 <__kernel_rem_pio2+0x246>
 80043f6:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 80043fa:	ab0c      	add	r3, sp, #48	@ 0x30
 80043fc:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004400:	9c05      	ldr	r4, [sp, #20]
 8004402:	f1ca 0018 	rsb	r0, sl, #24
 8004406:	fa43 f200 	asr.w	r2, r3, r0
 800440a:	4414      	add	r4, r2
 800440c:	4082      	lsls	r2, r0
 800440e:	1a9b      	subs	r3, r3, r2
 8004410:	aa0c      	add	r2, sp, #48	@ 0x30
 8004412:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8004416:	f1ca 0217 	rsb	r2, sl, #23
 800441a:	9405      	str	r4, [sp, #20]
 800441c:	4113      	asrs	r3, r2
 800441e:	9300      	str	r3, [sp, #0]
 8004420:	9b00      	ldr	r3, [sp, #0]
 8004422:	2b00      	cmp	r3, #0
 8004424:	dd64      	ble.n	80044f0 <__kernel_rem_pio2+0x264>
 8004426:	2200      	movs	r2, #0
 8004428:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800442c:	4614      	mov	r4, r2
 800442e:	9b05      	ldr	r3, [sp, #20]
 8004430:	3301      	adds	r3, #1
 8004432:	9305      	str	r3, [sp, #20]
 8004434:	4593      	cmp	fp, r2
 8004436:	f300 80ab 	bgt.w	8004590 <__kernel_rem_pio2+0x304>
 800443a:	f1ba 0f00 	cmp.w	sl, #0
 800443e:	dd07      	ble.n	8004450 <__kernel_rem_pio2+0x1c4>
 8004440:	f1ba 0f01 	cmp.w	sl, #1
 8004444:	f000 80b2 	beq.w	80045ac <__kernel_rem_pio2+0x320>
 8004448:	f1ba 0f02 	cmp.w	sl, #2
 800444c:	f000 80b9 	beq.w	80045c2 <__kernel_rem_pio2+0x336>
 8004450:	9b00      	ldr	r3, [sp, #0]
 8004452:	2b02      	cmp	r3, #2
 8004454:	d14c      	bne.n	80044f0 <__kernel_rem_pio2+0x264>
 8004456:	4642      	mov	r2, r8
 8004458:	464b      	mov	r3, r9
 800445a:	2000      	movs	r0, #0
 800445c:	4947      	ldr	r1, [pc, #284]	@ (800457c <__kernel_rem_pio2+0x2f0>)
 800445e:	f7fb fe7b 	bl	8000158 <__aeabi_dsub>
 8004462:	4680      	mov	r8, r0
 8004464:	4689      	mov	r9, r1
 8004466:	2c00      	cmp	r4, #0
 8004468:	d042      	beq.n	80044f0 <__kernel_rem_pio2+0x264>
 800446a:	4652      	mov	r2, sl
 800446c:	2000      	movs	r0, #0
 800446e:	4943      	ldr	r1, [pc, #268]	@ (800457c <__kernel_rem_pio2+0x2f0>)
 8004470:	f000 fa32 	bl	80048d8 <scalbn>
 8004474:	4602      	mov	r2, r0
 8004476:	460b      	mov	r3, r1
 8004478:	4640      	mov	r0, r8
 800447a:	4649      	mov	r1, r9
 800447c:	f7fb fe6c 	bl	8000158 <__aeabi_dsub>
 8004480:	4680      	mov	r8, r0
 8004482:	4689      	mov	r9, r1
 8004484:	e034      	b.n	80044f0 <__kernel_rem_pio2+0x264>
 8004486:	2200      	movs	r2, #0
 8004488:	4b3d      	ldr	r3, [pc, #244]	@ (8004580 <__kernel_rem_pio2+0x2f4>)
 800448a:	4620      	mov	r0, r4
 800448c:	4629      	mov	r1, r5
 800448e:	f7fc f81b 	bl	80004c8 <__aeabi_dmul>
 8004492:	f7fc fab3 	bl	80009fc <__aeabi_d2iz>
 8004496:	f7fb ffad 	bl	80003f4 <__aeabi_i2d>
 800449a:	4602      	mov	r2, r0
 800449c:	460b      	mov	r3, r1
 800449e:	e9cd 2300 	strd	r2, r3, [sp]
 80044a2:	2200      	movs	r2, #0
 80044a4:	4b37      	ldr	r3, [pc, #220]	@ (8004584 <__kernel_rem_pio2+0x2f8>)
 80044a6:	f7fc f80f 	bl	80004c8 <__aeabi_dmul>
 80044aa:	4602      	mov	r2, r0
 80044ac:	460b      	mov	r3, r1
 80044ae:	4620      	mov	r0, r4
 80044b0:	4629      	mov	r1, r5
 80044b2:	f7fb fe51 	bl	8000158 <__aeabi_dsub>
 80044b6:	f7fc faa1 	bl	80009fc <__aeabi_d2iz>
 80044ba:	e9d8 2300 	ldrd	r2, r3, [r8]
 80044be:	f849 0b04 	str.w	r0, [r9], #4
 80044c2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80044c6:	f7fb fe49 	bl	800015c <__adddf3>
 80044ca:	3f01      	subs	r7, #1
 80044cc:	4604      	mov	r4, r0
 80044ce:	460d      	mov	r5, r1
 80044d0:	e763      	b.n	800439a <__kernel_rem_pio2+0x10e>
 80044d2:	d106      	bne.n	80044e2 <__kernel_rem_pio2+0x256>
 80044d4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80044d8:	aa0c      	add	r2, sp, #48	@ 0x30
 80044da:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80044de:	15db      	asrs	r3, r3, #23
 80044e0:	e79d      	b.n	800441e <__kernel_rem_pio2+0x192>
 80044e2:	2200      	movs	r2, #0
 80044e4:	4b28      	ldr	r3, [pc, #160]	@ (8004588 <__kernel_rem_pio2+0x2fc>)
 80044e6:	f7fc fa75 	bl	80009d4 <__aeabi_dcmpge>
 80044ea:	2800      	cmp	r0, #0
 80044ec:	d13f      	bne.n	800456e <__kernel_rem_pio2+0x2e2>
 80044ee:	9000      	str	r0, [sp, #0]
 80044f0:	2200      	movs	r2, #0
 80044f2:	2300      	movs	r3, #0
 80044f4:	4640      	mov	r0, r8
 80044f6:	4649      	mov	r1, r9
 80044f8:	f7fc fa4e 	bl	8000998 <__aeabi_dcmpeq>
 80044fc:	2800      	cmp	r0, #0
 80044fe:	f000 80af 	beq.w	8004660 <__kernel_rem_pio2+0x3d4>
 8004502:	2200      	movs	r2, #0
 8004504:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8004508:	9902      	ldr	r1, [sp, #8]
 800450a:	428b      	cmp	r3, r1
 800450c:	da61      	bge.n	80045d2 <__kernel_rem_pio2+0x346>
 800450e:	2a00      	cmp	r2, #0
 8004510:	d076      	beq.n	8004600 <__kernel_rem_pio2+0x374>
 8004512:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004516:	ab0c      	add	r3, sp, #48	@ 0x30
 8004518:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 800451c:	f1aa 0a18 	sub.w	sl, sl, #24
 8004520:	2b00      	cmp	r3, #0
 8004522:	d0f6      	beq.n	8004512 <__kernel_rem_pio2+0x286>
 8004524:	4652      	mov	r2, sl
 8004526:	2000      	movs	r0, #0
 8004528:	4914      	ldr	r1, [pc, #80]	@ (800457c <__kernel_rem_pio2+0x2f0>)
 800452a:	f000 f9d5 	bl	80048d8 <scalbn>
 800452e:	465d      	mov	r5, fp
 8004530:	4606      	mov	r6, r0
 8004532:	460f      	mov	r7, r1
 8004534:	f04f 0900 	mov.w	r9, #0
 8004538:	ab70      	add	r3, sp, #448	@ 0x1c0
 800453a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8004580 <__kernel_rem_pio2+0x2f4>
 800453e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8004542:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8004546:	2d00      	cmp	r5, #0
 8004548:	f280 80c0 	bge.w	80046cc <__kernel_rem_pio2+0x440>
 800454c:	465d      	mov	r5, fp
 800454e:	2d00      	cmp	r5, #0
 8004550:	f2c0 80f0 	blt.w	8004734 <__kernel_rem_pio2+0x4a8>
 8004554:	4b0d      	ldr	r3, [pc, #52]	@ (800458c <__kernel_rem_pio2+0x300>)
 8004556:	f04f 0900 	mov.w	r9, #0
 800455a:	9306      	str	r3, [sp, #24]
 800455c:	ab70      	add	r3, sp, #448	@ 0x1c0
 800455e:	f04f 0a00 	mov.w	sl, #0
 8004562:	2700      	movs	r7, #0
 8004564:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004568:	ebab 0605 	sub.w	r6, fp, r5
 800456c:	e0d6      	b.n	800471c <__kernel_rem_pio2+0x490>
 800456e:	2302      	movs	r3, #2
 8004570:	9300      	str	r3, [sp, #0]
 8004572:	e758      	b.n	8004426 <__kernel_rem_pio2+0x19a>
 8004574:	08004cd0 	.word	0x08004cd0
 8004578:	40200000 	.word	0x40200000
 800457c:	3ff00000 	.word	0x3ff00000
 8004580:	3e700000 	.word	0x3e700000
 8004584:	41700000 	.word	0x41700000
 8004588:	3fe00000 	.word	0x3fe00000
 800458c:	08004c90 	.word	0x08004c90
 8004590:	f856 3b04 	ldr.w	r3, [r6], #4
 8004594:	b944      	cbnz	r4, 80045a8 <__kernel_rem_pio2+0x31c>
 8004596:	b123      	cbz	r3, 80045a2 <__kernel_rem_pio2+0x316>
 8004598:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 800459c:	f846 3c04 	str.w	r3, [r6, #-4]
 80045a0:	2301      	movs	r3, #1
 80045a2:	461c      	mov	r4, r3
 80045a4:	3201      	adds	r2, #1
 80045a6:	e745      	b.n	8004434 <__kernel_rem_pio2+0x1a8>
 80045a8:	1acb      	subs	r3, r1, r3
 80045aa:	e7f7      	b.n	800459c <__kernel_rem_pio2+0x310>
 80045ac:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80045b0:	ab0c      	add	r3, sp, #48	@ 0x30
 80045b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045b6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80045ba:	a90c      	add	r1, sp, #48	@ 0x30
 80045bc:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80045c0:	e746      	b.n	8004450 <__kernel_rem_pio2+0x1c4>
 80045c2:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80045c6:	ab0c      	add	r3, sp, #48	@ 0x30
 80045c8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80045cc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80045d0:	e7f3      	b.n	80045ba <__kernel_rem_pio2+0x32e>
 80045d2:	a90c      	add	r1, sp, #48	@ 0x30
 80045d4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80045d8:	3b01      	subs	r3, #1
 80045da:	430a      	orrs	r2, r1
 80045dc:	e794      	b.n	8004508 <__kernel_rem_pio2+0x27c>
 80045de:	3401      	adds	r4, #1
 80045e0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80045e4:	2a00      	cmp	r2, #0
 80045e6:	d0fa      	beq.n	80045de <__kernel_rem_pio2+0x352>
 80045e8:	9b08      	ldr	r3, [sp, #32]
 80045ea:	aa20      	add	r2, sp, #128	@ 0x80
 80045ec:	445b      	add	r3, fp
 80045ee:	f10b 0801 	add.w	r8, fp, #1
 80045f2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80045f6:	445c      	add	r4, fp
 80045f8:	4544      	cmp	r4, r8
 80045fa:	da04      	bge.n	8004606 <__kernel_rem_pio2+0x37a>
 80045fc:	46a3      	mov	fp, r4
 80045fe:	e6bf      	b.n	8004380 <__kernel_rem_pio2+0xf4>
 8004600:	2401      	movs	r4, #1
 8004602:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004604:	e7ec      	b.n	80045e0 <__kernel_rem_pio2+0x354>
 8004606:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004608:	46ab      	mov	fp, r5
 800460a:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 800460e:	f7fb fef1 	bl	80003f4 <__aeabi_i2d>
 8004612:	f04f 0900 	mov.w	r9, #0
 8004616:	2600      	movs	r6, #0
 8004618:	2700      	movs	r7, #0
 800461a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800461c:	e9c5 0100 	strd	r0, r1, [r5]
 8004620:	3b08      	subs	r3, #8
 8004622:	9300      	str	r3, [sp, #0]
 8004624:	9b06      	ldr	r3, [sp, #24]
 8004626:	4599      	cmp	r9, r3
 8004628:	dd07      	ble.n	800463a <__kernel_rem_pio2+0x3ae>
 800462a:	9b07      	ldr	r3, [sp, #28]
 800462c:	f108 0801 	add.w	r8, r8, #1
 8004630:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8004634:	3508      	adds	r5, #8
 8004636:	9307      	str	r3, [sp, #28]
 8004638:	e7de      	b.n	80045f8 <__kernel_rem_pio2+0x36c>
 800463a:	9900      	ldr	r1, [sp, #0]
 800463c:	f109 0901 	add.w	r9, r9, #1
 8004640:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004644:	9100      	str	r1, [sp, #0]
 8004646:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 800464a:	f7fb ff3d 	bl	80004c8 <__aeabi_dmul>
 800464e:	4602      	mov	r2, r0
 8004650:	460b      	mov	r3, r1
 8004652:	4630      	mov	r0, r6
 8004654:	4639      	mov	r1, r7
 8004656:	f7fb fd81 	bl	800015c <__adddf3>
 800465a:	4606      	mov	r6, r0
 800465c:	460f      	mov	r7, r1
 800465e:	e7e1      	b.n	8004624 <__kernel_rem_pio2+0x398>
 8004660:	f1ca 0200 	rsb	r2, sl, #0
 8004664:	4640      	mov	r0, r8
 8004666:	4649      	mov	r1, r9
 8004668:	f000 f936 	bl	80048d8 <scalbn>
 800466c:	2200      	movs	r2, #0
 800466e:	4b97      	ldr	r3, [pc, #604]	@ (80048cc <__kernel_rem_pio2+0x640>)
 8004670:	4604      	mov	r4, r0
 8004672:	460d      	mov	r5, r1
 8004674:	f7fc f9ae 	bl	80009d4 <__aeabi_dcmpge>
 8004678:	b300      	cbz	r0, 80046bc <__kernel_rem_pio2+0x430>
 800467a:	2200      	movs	r2, #0
 800467c:	4b94      	ldr	r3, [pc, #592]	@ (80048d0 <__kernel_rem_pio2+0x644>)
 800467e:	4620      	mov	r0, r4
 8004680:	4629      	mov	r1, r5
 8004682:	f7fb ff21 	bl	80004c8 <__aeabi_dmul>
 8004686:	f7fc f9b9 	bl	80009fc <__aeabi_d2iz>
 800468a:	4606      	mov	r6, r0
 800468c:	f7fb feb2 	bl	80003f4 <__aeabi_i2d>
 8004690:	2200      	movs	r2, #0
 8004692:	4b8e      	ldr	r3, [pc, #568]	@ (80048cc <__kernel_rem_pio2+0x640>)
 8004694:	f7fb ff18 	bl	80004c8 <__aeabi_dmul>
 8004698:	460b      	mov	r3, r1
 800469a:	4602      	mov	r2, r0
 800469c:	4629      	mov	r1, r5
 800469e:	4620      	mov	r0, r4
 80046a0:	f7fb fd5a 	bl	8000158 <__aeabi_dsub>
 80046a4:	f7fc f9aa 	bl	80009fc <__aeabi_d2iz>
 80046a8:	ab0c      	add	r3, sp, #48	@ 0x30
 80046aa:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80046ae:	f10b 0b01 	add.w	fp, fp, #1
 80046b2:	f10a 0a18 	add.w	sl, sl, #24
 80046b6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 80046ba:	e733      	b.n	8004524 <__kernel_rem_pio2+0x298>
 80046bc:	4620      	mov	r0, r4
 80046be:	4629      	mov	r1, r5
 80046c0:	f7fc f99c 	bl	80009fc <__aeabi_d2iz>
 80046c4:	ab0c      	add	r3, sp, #48	@ 0x30
 80046c6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 80046ca:	e72b      	b.n	8004524 <__kernel_rem_pio2+0x298>
 80046cc:	ab0c      	add	r3, sp, #48	@ 0x30
 80046ce:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80046d2:	f7fb fe8f 	bl	80003f4 <__aeabi_i2d>
 80046d6:	4632      	mov	r2, r6
 80046d8:	463b      	mov	r3, r7
 80046da:	f7fb fef5 	bl	80004c8 <__aeabi_dmul>
 80046de:	464a      	mov	r2, r9
 80046e0:	e868 0102 	strd	r0, r1, [r8], #-8
 80046e4:	4653      	mov	r3, sl
 80046e6:	4630      	mov	r0, r6
 80046e8:	4639      	mov	r1, r7
 80046ea:	f7fb feed 	bl	80004c8 <__aeabi_dmul>
 80046ee:	3d01      	subs	r5, #1
 80046f0:	4606      	mov	r6, r0
 80046f2:	460f      	mov	r7, r1
 80046f4:	e727      	b.n	8004546 <__kernel_rem_pio2+0x2ba>
 80046f6:	f8dd c018 	ldr.w	ip, [sp, #24]
 80046fa:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 80046fe:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004702:	f8cd c018 	str.w	ip, [sp, #24]
 8004706:	f7fb fedf 	bl	80004c8 <__aeabi_dmul>
 800470a:	4602      	mov	r2, r0
 800470c:	460b      	mov	r3, r1
 800470e:	4648      	mov	r0, r9
 8004710:	4651      	mov	r1, sl
 8004712:	f7fb fd23 	bl	800015c <__adddf3>
 8004716:	4681      	mov	r9, r0
 8004718:	468a      	mov	sl, r1
 800471a:	3701      	adds	r7, #1
 800471c:	9b02      	ldr	r3, [sp, #8]
 800471e:	429f      	cmp	r7, r3
 8004720:	dc01      	bgt.n	8004726 <__kernel_rem_pio2+0x49a>
 8004722:	42be      	cmp	r6, r7
 8004724:	dae7      	bge.n	80046f6 <__kernel_rem_pio2+0x46a>
 8004726:	ab48      	add	r3, sp, #288	@ 0x120
 8004728:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800472c:	e9c6 9a00 	strd	r9, sl, [r6]
 8004730:	3d01      	subs	r5, #1
 8004732:	e70c      	b.n	800454e <__kernel_rem_pio2+0x2c2>
 8004734:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004736:	2b02      	cmp	r3, #2
 8004738:	dc09      	bgt.n	800474e <__kernel_rem_pio2+0x4c2>
 800473a:	2b00      	cmp	r3, #0
 800473c:	dc2c      	bgt.n	8004798 <__kernel_rem_pio2+0x50c>
 800473e:	d04e      	beq.n	80047de <__kernel_rem_pio2+0x552>
 8004740:	9b05      	ldr	r3, [sp, #20]
 8004742:	f003 0007 	and.w	r0, r3, #7
 8004746:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 800474a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800474e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004750:	2b03      	cmp	r3, #3
 8004752:	d1f5      	bne.n	8004740 <__kernel_rem_pio2+0x4b4>
 8004754:	ab48      	add	r3, sp, #288	@ 0x120
 8004756:	441c      	add	r4, r3
 8004758:	4625      	mov	r5, r4
 800475a:	46da      	mov	sl, fp
 800475c:	f1ba 0f00 	cmp.w	sl, #0
 8004760:	dc63      	bgt.n	800482a <__kernel_rem_pio2+0x59e>
 8004762:	4625      	mov	r5, r4
 8004764:	46da      	mov	sl, fp
 8004766:	f1ba 0f01 	cmp.w	sl, #1
 800476a:	dc7b      	bgt.n	8004864 <__kernel_rem_pio2+0x5d8>
 800476c:	2000      	movs	r0, #0
 800476e:	2100      	movs	r1, #0
 8004770:	f1bb 0f01 	cmp.w	fp, #1
 8004774:	f300 8093 	bgt.w	800489e <__kernel_rem_pio2+0x612>
 8004778:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 800477c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004780:	9b00      	ldr	r3, [sp, #0]
 8004782:	2b00      	cmp	r3, #0
 8004784:	f040 8092 	bne.w	80048ac <__kernel_rem_pio2+0x620>
 8004788:	9b04      	ldr	r3, [sp, #16]
 800478a:	e9c3 7800 	strd	r7, r8, [r3]
 800478e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004792:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004796:	e7d3      	b.n	8004740 <__kernel_rem_pio2+0x4b4>
 8004798:	465d      	mov	r5, fp
 800479a:	2000      	movs	r0, #0
 800479c:	2100      	movs	r1, #0
 800479e:	ab48      	add	r3, sp, #288	@ 0x120
 80047a0:	441c      	add	r4, r3
 80047a2:	2d00      	cmp	r5, #0
 80047a4:	da32      	bge.n	800480c <__kernel_rem_pio2+0x580>
 80047a6:	9b00      	ldr	r3, [sp, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d035      	beq.n	8004818 <__kernel_rem_pio2+0x58c>
 80047ac:	4602      	mov	r2, r0
 80047ae:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047b2:	9c04      	ldr	r4, [sp, #16]
 80047b4:	2501      	movs	r5, #1
 80047b6:	e9c4 2300 	strd	r2, r3, [r4]
 80047ba:	4602      	mov	r2, r0
 80047bc:	460b      	mov	r3, r1
 80047be:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 80047c2:	f7fb fcc9 	bl	8000158 <__aeabi_dsub>
 80047c6:	ac48      	add	r4, sp, #288	@ 0x120
 80047c8:	45ab      	cmp	fp, r5
 80047ca:	da28      	bge.n	800481e <__kernel_rem_pio2+0x592>
 80047cc:	9b00      	ldr	r3, [sp, #0]
 80047ce:	b113      	cbz	r3, 80047d6 <__kernel_rem_pio2+0x54a>
 80047d0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047d4:	4619      	mov	r1, r3
 80047d6:	9b04      	ldr	r3, [sp, #16]
 80047d8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 80047dc:	e7b0      	b.n	8004740 <__kernel_rem_pio2+0x4b4>
 80047de:	2000      	movs	r0, #0
 80047e0:	2100      	movs	r1, #0
 80047e2:	ab48      	add	r3, sp, #288	@ 0x120
 80047e4:	441c      	add	r4, r3
 80047e6:	f1bb 0f00 	cmp.w	fp, #0
 80047ea:	da08      	bge.n	80047fe <__kernel_rem_pio2+0x572>
 80047ec:	9b00      	ldr	r3, [sp, #0]
 80047ee:	b113      	cbz	r3, 80047f6 <__kernel_rem_pio2+0x56a>
 80047f0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80047f4:	4619      	mov	r1, r3
 80047f6:	9b04      	ldr	r3, [sp, #16]
 80047f8:	e9c3 0100 	strd	r0, r1, [r3]
 80047fc:	e7a0      	b.n	8004740 <__kernel_rem_pio2+0x4b4>
 80047fe:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004802:	f7fb fcab 	bl	800015c <__adddf3>
 8004806:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800480a:	e7ec      	b.n	80047e6 <__kernel_rem_pio2+0x55a>
 800480c:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004810:	f7fb fca4 	bl	800015c <__adddf3>
 8004814:	3d01      	subs	r5, #1
 8004816:	e7c4      	b.n	80047a2 <__kernel_rem_pio2+0x516>
 8004818:	4602      	mov	r2, r0
 800481a:	460b      	mov	r3, r1
 800481c:	e7c9      	b.n	80047b2 <__kernel_rem_pio2+0x526>
 800481e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8004822:	f7fb fc9b 	bl	800015c <__adddf3>
 8004826:	3501      	adds	r5, #1
 8004828:	e7ce      	b.n	80047c8 <__kernel_rem_pio2+0x53c>
 800482a:	e9d5 2300 	ldrd	r2, r3, [r5]
 800482e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004832:	4640      	mov	r0, r8
 8004834:	4649      	mov	r1, r9
 8004836:	e9cd 2302 	strd	r2, r3, [sp, #8]
 800483a:	f7fb fc8f 	bl	800015c <__adddf3>
 800483e:	4602      	mov	r2, r0
 8004840:	460b      	mov	r3, r1
 8004842:	4606      	mov	r6, r0
 8004844:	460f      	mov	r7, r1
 8004846:	4640      	mov	r0, r8
 8004848:	4649      	mov	r1, r9
 800484a:	f7fb fc85 	bl	8000158 <__aeabi_dsub>
 800484e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004852:	f7fb fc83 	bl	800015c <__adddf3>
 8004856:	e865 0102 	strd	r0, r1, [r5], #-8
 800485a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 800485e:	e9c5 6700 	strd	r6, r7, [r5]
 8004862:	e77b      	b.n	800475c <__kernel_rem_pio2+0x4d0>
 8004864:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004868:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800486c:	4640      	mov	r0, r8
 800486e:	4649      	mov	r1, r9
 8004870:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004874:	f7fb fc72 	bl	800015c <__adddf3>
 8004878:	4602      	mov	r2, r0
 800487a:	460b      	mov	r3, r1
 800487c:	4606      	mov	r6, r0
 800487e:	460f      	mov	r7, r1
 8004880:	4640      	mov	r0, r8
 8004882:	4649      	mov	r1, r9
 8004884:	f7fb fc68 	bl	8000158 <__aeabi_dsub>
 8004888:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800488c:	f7fb fc66 	bl	800015c <__adddf3>
 8004890:	e865 0102 	strd	r0, r1, [r5], #-8
 8004894:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004898:	e9c5 6700 	strd	r6, r7, [r5]
 800489c:	e763      	b.n	8004766 <__kernel_rem_pio2+0x4da>
 800489e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 80048a2:	f7fb fc5b 	bl	800015c <__adddf3>
 80048a6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80048aa:	e761      	b.n	8004770 <__kernel_rem_pio2+0x4e4>
 80048ac:	9b04      	ldr	r3, [sp, #16]
 80048ae:	9a04      	ldr	r2, [sp, #16]
 80048b0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 80048b4:	601f      	str	r7, [r3, #0]
 80048b6:	605c      	str	r4, [r3, #4]
 80048b8:	609d      	str	r5, [r3, #8]
 80048ba:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80048be:	60d3      	str	r3, [r2, #12]
 80048c0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80048c4:	6110      	str	r0, [r2, #16]
 80048c6:	6153      	str	r3, [r2, #20]
 80048c8:	e73a      	b.n	8004740 <__kernel_rem_pio2+0x4b4>
 80048ca:	bf00      	nop
 80048cc:	41700000 	.word	0x41700000
 80048d0:	3e700000 	.word	0x3e700000
 80048d4:	00000000 	.word	0x00000000

080048d8 <scalbn>:
 80048d8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 80048dc:	4616      	mov	r6, r2
 80048de:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80048e2:	4683      	mov	fp, r0
 80048e4:	468c      	mov	ip, r1
 80048e6:	460b      	mov	r3, r1
 80048e8:	b982      	cbnz	r2, 800490c <scalbn+0x34>
 80048ea:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80048ee:	4303      	orrs	r3, r0
 80048f0:	d039      	beq.n	8004966 <scalbn+0x8e>
 80048f2:	4b2f      	ldr	r3, [pc, #188]	@ (80049b0 <scalbn+0xd8>)
 80048f4:	2200      	movs	r2, #0
 80048f6:	f7fb fde7 	bl	80004c8 <__aeabi_dmul>
 80048fa:	4b2e      	ldr	r3, [pc, #184]	@ (80049b4 <scalbn+0xdc>)
 80048fc:	4683      	mov	fp, r0
 80048fe:	429e      	cmp	r6, r3
 8004900:	468c      	mov	ip, r1
 8004902:	da0d      	bge.n	8004920 <scalbn+0x48>
 8004904:	a326      	add	r3, pc, #152	@ (adr r3, 80049a0 <scalbn+0xc8>)
 8004906:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490a:	e01b      	b.n	8004944 <scalbn+0x6c>
 800490c:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004910:	42ba      	cmp	r2, r7
 8004912:	d109      	bne.n	8004928 <scalbn+0x50>
 8004914:	4602      	mov	r2, r0
 8004916:	f7fb fc21 	bl	800015c <__adddf3>
 800491a:	4683      	mov	fp, r0
 800491c:	468c      	mov	ip, r1
 800491e:	e022      	b.n	8004966 <scalbn+0x8e>
 8004920:	460b      	mov	r3, r1
 8004922:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004926:	3a36      	subs	r2, #54	@ 0x36
 8004928:	f24c 3150 	movw	r1, #50000	@ 0xc350
 800492c:	428e      	cmp	r6, r1
 800492e:	dd0c      	ble.n	800494a <scalbn+0x72>
 8004930:	a31d      	add	r3, pc, #116	@ (adr r3, 80049a8 <scalbn+0xd0>)
 8004932:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004936:	461c      	mov	r4, r3
 8004938:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 800493c:	f361 74df 	bfi	r4, r1, #31, #1
 8004940:	4621      	mov	r1, r4
 8004942:	481d      	ldr	r0, [pc, #116]	@ (80049b8 <scalbn+0xe0>)
 8004944:	f7fb fdc0 	bl	80004c8 <__aeabi_dmul>
 8004948:	e7e7      	b.n	800491a <scalbn+0x42>
 800494a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 800494e:	4432      	add	r2, r6
 8004950:	428a      	cmp	r2, r1
 8004952:	dced      	bgt.n	8004930 <scalbn+0x58>
 8004954:	2a00      	cmp	r2, #0
 8004956:	dd0a      	ble.n	800496e <scalbn+0x96>
 8004958:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800495c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004960:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004964:	46ac      	mov	ip, r5
 8004966:	4658      	mov	r0, fp
 8004968:	4661      	mov	r1, ip
 800496a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 800496e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004972:	da09      	bge.n	8004988 <scalbn+0xb0>
 8004974:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004978:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 800497c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004980:	480e      	ldr	r0, [pc, #56]	@ (80049bc <scalbn+0xe4>)
 8004982:	f041 011f 	orr.w	r1, r1, #31
 8004986:	e7bd      	b.n	8004904 <scalbn+0x2c>
 8004988:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 800498c:	3236      	adds	r2, #54	@ 0x36
 800498e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004992:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004996:	4658      	mov	r0, fp
 8004998:	4629      	mov	r1, r5
 800499a:	2200      	movs	r2, #0
 800499c:	4b08      	ldr	r3, [pc, #32]	@ (80049c0 <scalbn+0xe8>)
 800499e:	e7d1      	b.n	8004944 <scalbn+0x6c>
 80049a0:	c2f8f359 	.word	0xc2f8f359
 80049a4:	01a56e1f 	.word	0x01a56e1f
 80049a8:	8800759c 	.word	0x8800759c
 80049ac:	7e37e43c 	.word	0x7e37e43c
 80049b0:	43500000 	.word	0x43500000
 80049b4:	ffff3cb0 	.word	0xffff3cb0
 80049b8:	8800759c 	.word	0x8800759c
 80049bc:	c2f8f359 	.word	0xc2f8f359
 80049c0:	3c900000 	.word	0x3c900000
 80049c4:	00000000 	.word	0x00000000

080049c8 <floor>:
 80049c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80049cc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 80049d0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 80049d4:	2e13      	cmp	r6, #19
 80049d6:	4602      	mov	r2, r0
 80049d8:	460b      	mov	r3, r1
 80049da:	460c      	mov	r4, r1
 80049dc:	4605      	mov	r5, r0
 80049de:	4680      	mov	r8, r0
 80049e0:	dc35      	bgt.n	8004a4e <floor+0x86>
 80049e2:	2e00      	cmp	r6, #0
 80049e4:	da17      	bge.n	8004a16 <floor+0x4e>
 80049e6:	a334      	add	r3, pc, #208	@ (adr r3, 8004ab8 <floor+0xf0>)
 80049e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049ec:	f7fb fbb6 	bl	800015c <__adddf3>
 80049f0:	2200      	movs	r2, #0
 80049f2:	2300      	movs	r3, #0
 80049f4:	f7fb fff8 	bl	80009e8 <__aeabi_dcmpgt>
 80049f8:	b150      	cbz	r0, 8004a10 <floor+0x48>
 80049fa:	2c00      	cmp	r4, #0
 80049fc:	da57      	bge.n	8004aae <floor+0xe6>
 80049fe:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004a02:	432c      	orrs	r4, r5
 8004a04:	2500      	movs	r5, #0
 8004a06:	42ac      	cmp	r4, r5
 8004a08:	4c2d      	ldr	r4, [pc, #180]	@ (8004ac0 <floor+0xf8>)
 8004a0a:	bf08      	it	eq
 8004a0c:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004a10:	4623      	mov	r3, r4
 8004a12:	462a      	mov	r2, r5
 8004a14:	e024      	b.n	8004a60 <floor+0x98>
 8004a16:	4f2b      	ldr	r7, [pc, #172]	@ (8004ac4 <floor+0xfc>)
 8004a18:	4137      	asrs	r7, r6
 8004a1a:	ea01 0c07 	and.w	ip, r1, r7
 8004a1e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004a22:	d01d      	beq.n	8004a60 <floor+0x98>
 8004a24:	a324      	add	r3, pc, #144	@ (adr r3, 8004ab8 <floor+0xf0>)
 8004a26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a2a:	f7fb fb97 	bl	800015c <__adddf3>
 8004a2e:	2200      	movs	r2, #0
 8004a30:	2300      	movs	r3, #0
 8004a32:	f7fb ffd9 	bl	80009e8 <__aeabi_dcmpgt>
 8004a36:	2800      	cmp	r0, #0
 8004a38:	d0ea      	beq.n	8004a10 <floor+0x48>
 8004a3a:	2c00      	cmp	r4, #0
 8004a3c:	bfbe      	ittt	lt
 8004a3e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004a42:	4133      	asrlt	r3, r6
 8004a44:	18e4      	addlt	r4, r4, r3
 8004a46:	2500      	movs	r5, #0
 8004a48:	ea24 0407 	bic.w	r4, r4, r7
 8004a4c:	e7e0      	b.n	8004a10 <floor+0x48>
 8004a4e:	2e33      	cmp	r6, #51	@ 0x33
 8004a50:	dd0a      	ble.n	8004a68 <floor+0xa0>
 8004a52:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004a56:	d103      	bne.n	8004a60 <floor+0x98>
 8004a58:	f7fb fb80 	bl	800015c <__adddf3>
 8004a5c:	4602      	mov	r2, r0
 8004a5e:	460b      	mov	r3, r1
 8004a60:	4610      	mov	r0, r2
 8004a62:	4619      	mov	r1, r3
 8004a64:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004a68:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8004a6c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8004a70:	fa2c f707 	lsr.w	r7, ip, r7
 8004a74:	4207      	tst	r7, r0
 8004a76:	d0f3      	beq.n	8004a60 <floor+0x98>
 8004a78:	a30f      	add	r3, pc, #60	@ (adr r3, 8004ab8 <floor+0xf0>)
 8004a7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004a7e:	f7fb fb6d 	bl	800015c <__adddf3>
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	f7fb ffaf 	bl	80009e8 <__aeabi_dcmpgt>
 8004a8a:	2800      	cmp	r0, #0
 8004a8c:	d0c0      	beq.n	8004a10 <floor+0x48>
 8004a8e:	2c00      	cmp	r4, #0
 8004a90:	da0a      	bge.n	8004aa8 <floor+0xe0>
 8004a92:	2e14      	cmp	r6, #20
 8004a94:	d101      	bne.n	8004a9a <floor+0xd2>
 8004a96:	3401      	adds	r4, #1
 8004a98:	e006      	b.n	8004aa8 <floor+0xe0>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004aa0:	40b3      	lsls	r3, r6
 8004aa2:	441d      	add	r5, r3
 8004aa4:	4545      	cmp	r5, r8
 8004aa6:	d3f6      	bcc.n	8004a96 <floor+0xce>
 8004aa8:	ea25 0507 	bic.w	r5, r5, r7
 8004aac:	e7b0      	b.n	8004a10 <floor+0x48>
 8004aae:	2500      	movs	r5, #0
 8004ab0:	462c      	mov	r4, r5
 8004ab2:	e7ad      	b.n	8004a10 <floor+0x48>
 8004ab4:	f3af 8000 	nop.w
 8004ab8:	8800759c 	.word	0x8800759c
 8004abc:	7e37e43c 	.word	0x7e37e43c
 8004ac0:	bff00000 	.word	0xbff00000
 8004ac4:	000fffff 	.word	0x000fffff

08004ac8 <_init>:
 8004ac8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004aca:	bf00      	nop
 8004acc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ace:	bc08      	pop	{r3}
 8004ad0:	469e      	mov	lr, r3
 8004ad2:	4770      	bx	lr

08004ad4 <_fini>:
 8004ad4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ad6:	bf00      	nop
 8004ad8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ada:	bc08      	pop	{r3}
 8004adc:	469e      	mov	lr, r3
 8004ade:	4770      	bx	lr
