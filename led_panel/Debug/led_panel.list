
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ec0  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005fd0  08005fd0  00006fd0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061d0  080061d0  000080fc  2**0
                  CONTENTS
  4 .ARM          00000000  080061d0  080061d0  000080fc  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061d0  080061d0  000080fc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061d0  080061d0  000071d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061d4  080061d4  000071d4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000fc  20000000  080061d8  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e8  20000100  080062d4  00008100  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200012e8  080062d4  000082e8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000080fc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000afd3  00000000  00000000  00008125  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fad  00000000  00000000  000130f8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd8  00000000  00000000  000150a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a00  00000000  00000000  00015d80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824f  00000000  00000000  00016780  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000de4d  00000000  00000000  0002e9cf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a96f  00000000  00000000  0003c81c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c718b  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ae8  00000000  00000000  000c71d0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cacb8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000100 	.word	0x20000100
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fb8 	.word	0x08005fb8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000104 	.word	0x20000104
 800014c:	08005fb8 	.word	0x08005fb8

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <draw_cube>:
    .transform = { 0,0,0, 0,0,0, 3,3,3 }
};



void draw_cube(Cube *cube) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b0d9      	sub	sp, #356	@ 0x164
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80010ea:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80010ee:	6018      	str	r0, [r3, #0]
	Mat4 transform_matrix = calculate_transform_matrix(&cube->transform);
 80010f0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80010f4:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80010fe:	f507 738c 	add.w	r3, r7, #280	@ 0x118
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f8fe 	bl	8002306 <calculate_transform_matrix>
	Mat4 transform_proj_matrix = mat4_mul_mat4(&view_projection_matrix, &transform_matrix);
 800110a:	f107 03d8 	add.w	r3, r7, #216	@ 0xd8
 800110e:	f507 728c 	add.w	r2, r7, #280	@ 0x118
 8001112:	4989      	ldr	r1, [pc, #548]	@ (8001338 <draw_cube+0x258>)
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fcad 	bl	8001a74 <mat4_mul_mat4>


	Vec4 transformed[POINT_COUNT];

	for (int i = 0; i < POINT_COUNT; ++i) {
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001120:	e099      	b.n	8001256 <draw_cube+0x176>
		Vec4 point;
		point.x = cube->p[i].x;
 8001122:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001126:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001140:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001144:	601a      	str	r2, [r3, #0]
		point.y = cube->p[i].y;
 8001146:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800114a:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001166:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800116a:	605a      	str	r2, [r3, #4]
		point.z = cube->p[i].z;
 800116c:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001170:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	f8d7 215c 	ldr.w	r2, [r7, #348]	@ 0x15c
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3308      	adds	r3, #8
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800118c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001190:	609a      	str	r2, [r3, #8]
		point.w = 1.0;
 8001192:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001196:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800119a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800119e:	60da      	str	r2, [r3, #12]

		// model space -> world space
		Vec4 model_space = mat4_mul_vec4(&transform_matrix, &point);
 80011a0:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011a4:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80011a8:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 80011ac:	f507 718c 	add.w	r1, r7, #280	@ 0x118
 80011b0:	4618      	mov	r0, r3
 80011b2:	f000 fcce 	bl	8001b52 <mat4_mul_vec4>

		// world space -> camera space -> screen space
		transformed[i] = mat4_mul_vec4_project(&transform_proj_matrix, &model_space);
 80011b6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011ba:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80011be:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80011c2:	011b      	lsls	r3, r3, #4
 80011c4:	18d4      	adds	r4, r2, r3
 80011c6:	463b      	mov	r3, r7
 80011c8:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80011cc:	f107 01d8 	add.w	r1, r7, #216	@ 0xd8
 80011d0:	4618      	mov	r0, r3
 80011d2:	f000 fe37 	bl	8001e44 <mat4_mul_vec4_project>
 80011d6:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011da:	f5a3 73b0 	sub.w	r3, r3, #352	@ 0x160
 80011de:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// center
		transformed[i].x += (float)WIDTH/2.0;
 80011e4:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80011e8:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80011ec:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 80011f0:	011b      	lsls	r3, r3, #4
 80011f2:	4413      	add	r3, r2
 80011f4:	681b      	ldr	r3, [r3, #0]
 80011f6:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80011fa:	4618      	mov	r0, r3
 80011fc:	f7ff fc7c 	bl	8000af8 <__addsf3>
 8001200:	4603      	mov	r3, r0
 8001202:	4619      	mov	r1, r3
 8001204:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001208:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800120c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001210:	011b      	lsls	r3, r3, #4
 8001212:	4413      	add	r3, r2
 8001214:	6019      	str	r1, [r3, #0]
		transformed[i].y += (float)HEIGHT/2.0;
 8001216:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800121a:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800121e:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001222:	011b      	lsls	r3, r3, #4
 8001224:	4413      	add	r3, r2
 8001226:	3304      	adds	r3, #4
 8001228:	681b      	ldr	r3, [r3, #0]
 800122a:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 800122e:	4618      	mov	r0, r3
 8001230:	f7ff fc62 	bl	8000af8 <__addsf3>
 8001234:	4603      	mov	r3, r0
 8001236:	4619      	mov	r1, r3
 8001238:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800123c:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8001240:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001244:	011b      	lsls	r3, r3, #4
 8001246:	4413      	add	r3, r2
 8001248:	3304      	adds	r3, #4
 800124a:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < POINT_COUNT; ++i) {
 800124c:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 8001250:	3301      	adds	r3, #1
 8001252:	f8c7 315c 	str.w	r3, [r7, #348]	@ 0x15c
 8001256:	f8d7 315c 	ldr.w	r3, [r7, #348]	@ 0x15c
 800125a:	2b07      	cmp	r3, #7
 800125c:	f77f af61 	ble.w	8001122 <draw_cube+0x42>
	}

	for (int i = 0; i < EDGE_COUNT; ++i) {
 8001260:	2300      	movs	r3, #0
 8001262:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001266:	e05d      	b.n	8001324 <draw_cube+0x244>
		Vec4 a = transformed[cube->edges[i][0]];
 8001268:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800126c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 8001270:	681b      	ldr	r3, [r3, #0]
 8001272:	f8d7 2158 	ldr.w	r2, [r7, #344]	@ 0x158
 8001276:	320c      	adds	r2, #12
 8001278:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800127c:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001280:	f5a2 719c 	sub.w	r1, r2, #312	@ 0x138
 8001284:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 8001288:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 800128c:	011b      	lsls	r3, r3, #4
 800128e:	4413      	add	r3, r2
 8001290:	460c      	mov	r4, r1
 8001292:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001294:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Vec4 b = transformed[cube->edges[i][1]];
 8001298:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 800129c:	f5a3 73a6 	sub.w	r3, r3, #332	@ 0x14c
 80012a0:	681a      	ldr	r2, [r3, #0]
 80012a2:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 80012a6:	00db      	lsls	r3, r3, #3
 80012a8:	4413      	add	r3, r2
 80012aa:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 80012ac:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80012b0:	f5a2 71a4 	sub.w	r1, r2, #328	@ 0x148
 80012b4:	f507 72b0 	add.w	r2, r7, #352	@ 0x160
 80012b8:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80012bc:	011b      	lsls	r3, r3, #4
 80012be:	4413      	add	r3, r2
 80012c0:	460c      	mov	r4, r1
 80012c2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012c4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		draw_line(a.x, a.y, b.x, b.y);
 80012c8:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012cc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	4618      	mov	r0, r3
 80012d4:	f7ff fede 	bl	8001094 <__aeabi_f2iz>
 80012d8:	4604      	mov	r4, r0
 80012da:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012de:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80012e2:	685b      	ldr	r3, [r3, #4]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff fed5 	bl	8001094 <__aeabi_f2iz>
 80012ea:	4605      	mov	r5, r0
 80012ec:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 80012f0:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 80012f4:	681b      	ldr	r3, [r3, #0]
 80012f6:	4618      	mov	r0, r3
 80012f8:	f7ff fecc 	bl	8001094 <__aeabi_f2iz>
 80012fc:	4606      	mov	r6, r0
 80012fe:	f507 73b0 	add.w	r3, r7, #352	@ 0x160
 8001302:	f5a3 73a4 	sub.w	r3, r3, #328	@ 0x148
 8001306:	685b      	ldr	r3, [r3, #4]
 8001308:	4618      	mov	r0, r3
 800130a:	f7ff fec3 	bl	8001094 <__aeabi_f2iz>
 800130e:	4603      	mov	r3, r0
 8001310:	4632      	mov	r2, r6
 8001312:	4629      	mov	r1, r5
 8001314:	4620      	mov	r0, r4
 8001316:	f001 fae7 	bl	80028e8 <draw_line>
	for (int i = 0; i < EDGE_COUNT; ++i) {
 800131a:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 800131e:	3301      	adds	r3, #1
 8001320:	f8c7 3158 	str.w	r3, [r7, #344]	@ 0x158
 8001324:	f8d7 3158 	ldr.w	r3, [r7, #344]	@ 0x158
 8001328:	2b0b      	cmp	r3, #11
 800132a:	dd9d      	ble.n	8001268 <draw_cube+0x188>
	}
}
 800132c:	bf00      	nop
 800132e:	bf00      	nop
 8001330:	f507 77b2 	add.w	r7, r7, #356	@ 0x164
 8001334:	46bd      	mov	sp, r7
 8001336:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001338:	2000019c 	.word	0x2000019c

0800133c <on_ready>:

void on_ready() {
 800133c:	b5b0      	push	{r4, r5, r7, lr}
 800133e:	b092      	sub	sp, #72	@ 0x48
 8001340:	af02      	add	r7, sp, #8
	perspective_projection = mat4_make_perspective(10.0 * (M_PI / 180.0), 1, 1.0, 100.0);
 8001342:	4c21      	ldr	r4, [pc, #132]	@ (80013c8 <on_ready+0x8c>)
 8001344:	4638      	mov	r0, r7
 8001346:	4b21      	ldr	r3, [pc, #132]	@ (80013cc <on_ready+0x90>)
 8001348:	9300      	str	r3, [sp, #0]
 800134a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800134e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001352:	491f      	ldr	r1, [pc, #124]	@ (80013d0 <on_ready+0x94>)
 8001354:	f000 fcea 	bl	8001d2c <mat4_make_perspective>
 8001358:	4625      	mov	r5, r4
 800135a:	463c      	mov	r4, r7
 800135c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800135e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001360:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001362:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001364:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001366:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001368:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800136c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	view_matrix = get_view_matrix(0, 0, -20); // camera position
 8001370:	4c18      	ldr	r4, [pc, #96]	@ (80013d4 <on_ready+0x98>)
 8001372:	4638      	mov	r0, r7
 8001374:	4b18      	ldr	r3, [pc, #96]	@ (80013d8 <on_ready+0x9c>)
 8001376:	f04f 0200 	mov.w	r2, #0
 800137a:	f04f 0100 	mov.w	r1, #0
 800137e:	f000 ffab 	bl	80022d8 <get_view_matrix>
 8001382:	4625      	mov	r5, r4
 8001384:	463c      	mov	r4, r7
 8001386:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001388:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800138c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800138e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001390:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001392:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001396:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	view_projection_matrix = mat4_mul_mat4(&perspective_projection, &view_matrix);
 800139a:	4c10      	ldr	r4, [pc, #64]	@ (80013dc <on_ready+0xa0>)
 800139c:	463b      	mov	r3, r7
 800139e:	4a0d      	ldr	r2, [pc, #52]	@ (80013d4 <on_ready+0x98>)
 80013a0:	4909      	ldr	r1, [pc, #36]	@ (80013c8 <on_ready+0x8c>)
 80013a2:	4618      	mov	r0, r3
 80013a4:	f000 fb66 	bl	8001a74 <mat4_mul_mat4>
 80013a8:	4625      	mov	r5, r4
 80013aa:	463c      	mov	r4, r7
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b8:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013bc:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80013c0:	bf00      	nop
 80013c2:	3740      	adds	r7, #64	@ 0x40
 80013c4:	46bd      	mov	sp, r7
 80013c6:	bdb0      	pop	{r4, r5, r7, pc}
 80013c8:	2000011c 	.word	0x2000011c
 80013cc:	42c80000 	.word	0x42c80000
 80013d0:	3e32b8c2 	.word	0x3e32b8c2
 80013d4:	2000015c 	.word	0x2000015c
 80013d8:	c1a00000 	.word	0xc1a00000
 80013dc:	2000019c 	.word	0x2000019c

080013e0 <on_update>:


float speed = 0.02;
void on_update() {
 80013e0:	b580      	push	{r7, lr}
 80013e2:	af00      	add	r7, sp, #0
	clear_back_buffer();
 80013e4:	f001 f8ba 	bl	800255c <clear_back_buffer>
	cube0.transform.rot_x += speed;
 80013e8:	4b17      	ldr	r3, [pc, #92]	@ (8001448 <on_update+0x68>)
 80013ea:	f8d3 30cc 	ldr.w	r3, [r3, #204]	@ 0xcc
 80013ee:	4a17      	ldr	r2, [pc, #92]	@ (800144c <on_update+0x6c>)
 80013f0:	6812      	ldr	r2, [r2, #0]
 80013f2:	4611      	mov	r1, r2
 80013f4:	4618      	mov	r0, r3
 80013f6:	f7ff fb7f 	bl	8000af8 <__addsf3>
 80013fa:	4603      	mov	r3, r0
 80013fc:	461a      	mov	r2, r3
 80013fe:	4b12      	ldr	r3, [pc, #72]	@ (8001448 <on_update+0x68>)
 8001400:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	cube0.transform.rot_y += speed;
 8001404:	4b10      	ldr	r3, [pc, #64]	@ (8001448 <on_update+0x68>)
 8001406:	f8d3 30d0 	ldr.w	r3, [r3, #208]	@ 0xd0
 800140a:	4a10      	ldr	r2, [pc, #64]	@ (800144c <on_update+0x6c>)
 800140c:	6812      	ldr	r2, [r2, #0]
 800140e:	4611      	mov	r1, r2
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fb71 	bl	8000af8 <__addsf3>
 8001416:	4603      	mov	r3, r0
 8001418:	461a      	mov	r2, r3
 800141a:	4b0b      	ldr	r3, [pc, #44]	@ (8001448 <on_update+0x68>)
 800141c:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	cube0.transform.rot_z += speed;
 8001420:	4b09      	ldr	r3, [pc, #36]	@ (8001448 <on_update+0x68>)
 8001422:	f8d3 30d4 	ldr.w	r3, [r3, #212]	@ 0xd4
 8001426:	4a09      	ldr	r2, [pc, #36]	@ (800144c <on_update+0x6c>)
 8001428:	6812      	ldr	r2, [r2, #0]
 800142a:	4611      	mov	r1, r2
 800142c:	4618      	mov	r0, r3
 800142e:	f7ff fb63 	bl	8000af8 <__addsf3>
 8001432:	4603      	mov	r3, r0
 8001434:	461a      	mov	r2, r3
 8001436:	4b04      	ldr	r3, [pc, #16]	@ (8001448 <on_update+0x68>)
 8001438:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	draw_cube(&cube0);
 800143c:	4802      	ldr	r0, [pc, #8]	@ (8001448 <on_update+0x68>)
 800143e:	f7ff fe4f 	bl	80010e0 <draw_cube>
}
 8001442:	bf00      	nop
 8001444:	bd80      	pop	{r7, pc}
 8001446:	bf00      	nop
 8001448:	20000000 	.word	0x20000000
 800144c:	200000e4 	.word	0x200000e4

08001450 <on_button_pressed>:


void on_button_pressed() {
 8001450:	b580      	push	{r7, lr}
 8001452:	af00      	add	r7, sp, #0
	speed *= 2.0;
 8001454:	4b10      	ldr	r3, [pc, #64]	@ (8001498 <on_button_pressed+0x48>)
 8001456:	681b      	ldr	r3, [r3, #0]
 8001458:	4619      	mov	r1, r3
 800145a:	4618      	mov	r0, r3
 800145c:	f7ff fb4c 	bl	8000af8 <__addsf3>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b0c      	ldr	r3, [pc, #48]	@ (8001498 <on_button_pressed+0x48>)
 8001466:	601a      	str	r2, [r3, #0]
	if (speed > 0.16) {
 8001468:	4b0b      	ldr	r3, [pc, #44]	@ (8001498 <on_button_pressed+0x48>)
 800146a:	681b      	ldr	r3, [r3, #0]
 800146c:	4618      	mov	r0, r3
 800146e:	f7fe ffd3 	bl	8000418 <__aeabi_f2d>
 8001472:	a307      	add	r3, pc, #28	@ (adr r3, 8001490 <on_button_pressed+0x40>)
 8001474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001478:	f7ff fab6 	bl	80009e8 <__aeabi_dcmpgt>
 800147c:	4603      	mov	r3, r0
 800147e:	2b00      	cmp	r3, #0
 8001480:	d100      	bne.n	8001484 <on_button_pressed+0x34>
		speed = 0.01;
	}
}
 8001482:	e002      	b.n	800148a <on_button_pressed+0x3a>
		speed = 0.01;
 8001484:	4b04      	ldr	r3, [pc, #16]	@ (8001498 <on_button_pressed+0x48>)
 8001486:	4a05      	ldr	r2, [pc, #20]	@ (800149c <on_button_pressed+0x4c>)
 8001488:	601a      	str	r2, [r3, #0]
}
 800148a:	bf00      	nop
 800148c:	bd80      	pop	{r7, pc}
 800148e:	bf00      	nop
 8001490:	47ae147b 	.word	0x47ae147b
 8001494:	3fc47ae1 	.word	0x3fc47ae1
 8001498:	200000e4 	.word	0x200000e4
 800149c:	3c23d70a 	.word	0x3c23d70a

080014a0 <on_button_held>:

#include "base.h"
#include "event.h"

__WEAK void on_button_pressed() {}
__WEAK void on_button_held() {}
 80014a0:	b480      	push	{r7}
 80014a2:	af00      	add	r7, sp, #0
 80014a4:	bf00      	nop
 80014a6:	46bd      	mov	sp, r7
 80014a8:	bc80      	pop	{r7}
 80014aa:	4770      	bx	lr

080014ac <on_button_released>:
__WEAK void on_button_released() {}
 80014ac:	b480      	push	{r7}
 80014ae:	af00      	add	r7, sp, #0
 80014b0:	bf00      	nop
 80014b2:	46bd      	mov	sp, r7
 80014b4:	bc80      	pop	{r7}
 80014b6:	4770      	bx	lr

080014b8 <on_event>:


static uint8_t is_button_held = 0;

void on_event() {
 80014b8:	b580      	push	{r7, lr}
 80014ba:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 80014bc:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80014c0:	480e      	ldr	r0, [pc, #56]	@ (80014fc <on_event+0x44>)
 80014c2:	f001 ff05 	bl	80032d0 <HAL_GPIO_ReadPin>
 80014c6:	4603      	mov	r3, r0
 80014c8:	2b00      	cmp	r3, #0
 80014ca:	d10c      	bne.n	80014e6 <on_event+0x2e>
		if (!is_button_held) {
 80014cc:	4b0c      	ldr	r3, [pc, #48]	@ (8001500 <on_event+0x48>)
 80014ce:	781b      	ldrb	r3, [r3, #0]
 80014d0:	2b00      	cmp	r3, #0
 80014d2:	d105      	bne.n	80014e0 <on_event+0x28>
			is_button_held = 1;
 80014d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001500 <on_event+0x48>)
 80014d6:	2201      	movs	r2, #1
 80014d8:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 80014da:	f7ff ffb9 	bl	8001450 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 80014de:	e00b      	b.n	80014f8 <on_event+0x40>
			on_button_held();
 80014e0:	f7ff ffde 	bl	80014a0 <on_button_held>
}
 80014e4:	e008      	b.n	80014f8 <on_event+0x40>
		if (is_button_held) {
 80014e6:	4b06      	ldr	r3, [pc, #24]	@ (8001500 <on_event+0x48>)
 80014e8:	781b      	ldrb	r3, [r3, #0]
 80014ea:	2b00      	cmp	r3, #0
 80014ec:	d004      	beq.n	80014f8 <on_event+0x40>
			is_button_held = 0;
 80014ee:	4b04      	ldr	r3, [pc, #16]	@ (8001500 <on_event+0x48>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	701a      	strb	r2, [r3, #0]
			on_button_released();
 80014f4:	f7ff ffda 	bl	80014ac <on_button_released>
}
 80014f8:	bf00      	nop
 80014fa:	bd80      	pop	{r7, pc}
 80014fc:	40011000 	.word	0x40011000
 8001500:	200001dc 	.word	0x200001dc

08001504 <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8001504:	b580      	push	{r7, lr}
 8001506:	b082      	sub	sp, #8
 8001508:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800150a:	f001 fc45 	bl	8002d98 <HAL_GetTick>
 800150e:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <get_tick_delta_time+0x28>)
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	687a      	ldr	r2, [r7, #4]
 8001516:	1ad3      	subs	r3, r2, r3
 8001518:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 800151a:	4a04      	ldr	r2, [pc, #16]	@ (800152c <get_tick_delta_time+0x28>)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8001520:	683b      	ldr	r3, [r7, #0]
}
 8001522:	4618      	mov	r0, r3
 8001524:	3708      	adds	r7, #8
 8001526:	46bd      	mov	sp, r7
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	200002d0 	.word	0x200002d0

08001530 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001536:	f001 fbd7 	bl	8002ce8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800153a:	f000 f86d 	bl	8001618 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800153e:	f000 f9cf 	bl	80018e0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8001542:	f000 f8ab 	bl	800169c <MX_SPI1_Init>
  MX_TIM2_Init();
 8001546:	f000 f8df 	bl	8001708 <MX_TIM2_Init>
  MX_TIM3_Init();
 800154a:	f000 f953 	bl	80017f4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 800154e:	4829      	ldr	r0, [pc, #164]	@ (80015f4 <main+0xc4>)
 8001550:	f002 fba0 	bl	8003c94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001554:	4828      	ldr	r0, [pc, #160]	@ (80015f8 <main+0xc8>)
 8001556:	f002 fb9d 	bl	8003c94 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800155a:	2100      	movs	r1, #0
 800155c:	4826      	ldr	r0, [pc, #152]	@ (80015f8 <main+0xc8>)
 800155e:	f002 fc43 	bl	8003de8 <HAL_TIM_PWM_Start>
	OE_H;
 8001562:	2201      	movs	r2, #1
 8001564:	2140      	movs	r1, #64	@ 0x40
 8001566:	4825      	ldr	r0, [pc, #148]	@ (80015fc <main+0xcc>)
 8001568:	f001 fec9 	bl	80032fe <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 800156c:	f000 fff6 	bl	800255c <clear_back_buffer>
	on_ready();
 8001570:	f7ff fee4 	bl	800133c <on_ready>

#if DEBUG_NUMBERS
	uint32_t debug_var = 0;
#endif

	uint32_t accumulator = 0;
 8001574:	2300      	movs	r3, #0
 8001576:	607b      	str	r3, [r7, #4]

	while (1) {
		uint32_t delta = get_tick_delta_time();
 8001578:	f7ff ffc4 	bl	8001504 <get_tick_delta_time>
 800157c:	6038      	str	r0, [r7, #0]

		accumulator += delta;
 800157e:	687a      	ldr	r2, [r7, #4]
 8001580:	683b      	ldr	r3, [r7, #0]
 8001582:	4413      	add	r3, r2
 8001584:	607b      	str	r3, [r7, #4]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	2b13      	cmp	r3, #19
 800158a:	d91a      	bls.n	80015c2 <main+0x92>
			if (is_back_buffer_new){
 800158c:	4b1c      	ldr	r3, [pc, #112]	@ (8001600 <main+0xd0>)
 800158e:	781b      	ldrb	r3, [r3, #0]
 8001590:	2b00      	cmp	r3, #0
 8001592:	d12c      	bne.n	80015ee <main+0xbe>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 8001594:	6878      	ldr	r0, [r7, #4]
 8001596:	f7fe ff1d 	bl	80003d4 <__aeabi_ui2d>
 800159a:	f04f 0200 	mov.w	r2, #0
 800159e:	4b19      	ldr	r3, [pc, #100]	@ (8001604 <main+0xd4>)
 80015a0:	f7ff f8bc 	bl	800071c <__aeabi_ddiv>
 80015a4:	4602      	mov	r2, r0
 80015a6:	460b      	mov	r3, r1
 80015a8:	4917      	ldr	r1, [pc, #92]	@ (8001608 <main+0xd8>)
 80015aa:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 80015ae:	f7ff ff83 	bl	80014b8 <on_event>
			on_update();
 80015b2:	f7ff ff15 	bl	80013e0 <on_update>
#if DEBUG_NUMBERS
			draw_number(accumulator, 0, HEIGHT-7, false);
			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
#endif

			accumulator -= UPDATE_INTERVAL_MS;
 80015b6:	687b      	ldr	r3, [r7, #4]
 80015b8:	3b14      	subs	r3, #20
 80015ba:	607b      	str	r3, [r7, #4]
			//accumulator = 0;
			is_back_buffer_new = true;
 80015bc:	4b10      	ldr	r3, [pc, #64]	@ (8001600 <main+0xd0>)
 80015be:	2201      	movs	r2, #1
 80015c0:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 80015c2:	4b12      	ldr	r3, [pc, #72]	@ (800160c <main+0xdc>)
 80015c4:	781b      	ldrb	r3, [r3, #0]
 80015c6:	2b00      	cmp	r3, #0
 80015c8:	d0d6      	beq.n	8001578 <main+0x48>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 80015ca:	f001 fbe5 	bl	8002d98 <HAL_GetTick>
 80015ce:	4602      	mov	r2, r0
 80015d0:	4b0f      	ldr	r3, [pc, #60]	@ (8001610 <main+0xe0>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	1ad3      	subs	r3, r2, r3
 80015d6:	2b14      	cmp	r3, #20
 80015d8:	d9ce      	bls.n	8001578 <main+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 80015da:	2200      	movs	r2, #0
 80015dc:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80015e0:	480c      	ldr	r0, [pc, #48]	@ (8001614 <main+0xe4>)
 80015e2:	f001 fe8c 	bl	80032fe <HAL_GPIO_WritePin>
				buzzer_request = false;
 80015e6:	4b09      	ldr	r3, [pc, #36]	@ (800160c <main+0xdc>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	701a      	strb	r2, [r3, #0]
 80015ec:	e7c4      	b.n	8001578 <main+0x48>
				continue;
 80015ee:	bf00      	nop
	while (1) {
 80015f0:	e7c2      	b.n	8001578 <main+0x48>
 80015f2:	bf00      	nop
 80015f4:	20000238 	.word	0x20000238
 80015f8:	20000280 	.word	0x20000280
 80015fc:	40011000 	.word	0x40011000
 8001600:	200012dc 	.word	0x200012dc
 8001604:	408f4000 	.word	0x408f4000
 8001608:	200002c8 	.word	0x200002c8
 800160c:	200002d4 	.word	0x200002d4
 8001610:	200002d8 	.word	0x200002d8
 8001614:	40010800 	.word	0x40010800

08001618 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	b090      	sub	sp, #64	@ 0x40
 800161c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800161e:	f107 0318 	add.w	r3, r7, #24
 8001622:	2228      	movs	r2, #40	@ 0x28
 8001624:	2100      	movs	r1, #0
 8001626:	4618      	mov	r0, r3
 8001628:	f003 fa52 	bl	8004ad0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800162c:	1d3b      	adds	r3, r7, #4
 800162e:	2200      	movs	r2, #0
 8001630:	601a      	str	r2, [r3, #0]
 8001632:	605a      	str	r2, [r3, #4]
 8001634:	609a      	str	r2, [r3, #8]
 8001636:	60da      	str	r2, [r3, #12]
 8001638:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 800163a:	2302      	movs	r3, #2
 800163c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800163e:	2301      	movs	r3, #1
 8001640:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001642:	2310      	movs	r3, #16
 8001644:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001646:	2302      	movs	r3, #2
 8001648:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 800164a:	2300      	movs	r3, #0
 800164c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 800164e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001652:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001654:	f107 0318 	add.w	r3, r7, #24
 8001658:	4618      	mov	r0, r3
 800165a:	f001 fe69 	bl	8003330 <HAL_RCC_OscConfig>
 800165e:	4603      	mov	r3, r0
 8001660:	2b00      	cmp	r3, #0
 8001662:	d001      	beq.n	8001668 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001664:	f000 fa00 	bl	8001a68 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001668:	230f      	movs	r3, #15
 800166a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800166c:	2302      	movs	r3, #2
 800166e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001670:	2300      	movs	r3, #0
 8001672:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001674:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001678:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800167a:	2300      	movs	r3, #0
 800167c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800167e:	1d3b      	adds	r3, r7, #4
 8001680:	2102      	movs	r1, #2
 8001682:	4618      	mov	r0, r3
 8001684:	f002 f8d6 	bl	8003834 <HAL_RCC_ClockConfig>
 8001688:	4603      	mov	r3, r0
 800168a:	2b00      	cmp	r3, #0
 800168c:	d001      	beq.n	8001692 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 800168e:	f000 f9eb 	bl	8001a68 <Error_Handler>
  }
}
 8001692:	bf00      	nop
 8001694:	3740      	adds	r7, #64	@ 0x40
 8001696:	46bd      	mov	sp, r7
 8001698:	bd80      	pop	{r7, pc}
	...

0800169c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80016a0:	4b17      	ldr	r3, [pc, #92]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016a2:	4a18      	ldr	r2, [pc, #96]	@ (8001704 <MX_SPI1_Init+0x68>)
 80016a4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80016a6:	4b16      	ldr	r3, [pc, #88]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016a8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80016ac:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016ae:	4b14      	ldr	r3, [pc, #80]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016b4:	4b12      	ldr	r3, [pc, #72]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ba:	4b11      	ldr	r3, [pc, #68]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016bc:	2200      	movs	r2, #0
 80016be:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016c0:	4b0f      	ldr	r3, [pc, #60]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 80016c6:	4b0e      	ldr	r3, [pc, #56]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016c8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80016cc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80016ce:	4b0c      	ldr	r3, [pc, #48]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016d0:	2210      	movs	r2, #16
 80016d2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016d4:	4b0a      	ldr	r3, [pc, #40]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016d6:	2200      	movs	r2, #0
 80016d8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016dc:	2200      	movs	r2, #0
 80016de:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016e0:	4b07      	ldr	r3, [pc, #28]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016e2:	2200      	movs	r2, #0
 80016e4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016e8:	220a      	movs	r2, #10
 80016ea:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016ec:	4804      	ldr	r0, [pc, #16]	@ (8001700 <MX_SPI1_Init+0x64>)
 80016ee:	f002 f9fd 	bl	8003aec <HAL_SPI_Init>
 80016f2:	4603      	mov	r3, r0
 80016f4:	2b00      	cmp	r3, #0
 80016f6:	d001      	beq.n	80016fc <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80016f8:	f000 f9b6 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016fc:	bf00      	nop
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	200001e0 	.word	0x200001e0
 8001704:	40013000 	.word	0x40013000

08001708 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001708:	b580      	push	{r7, lr}
 800170a:	b08e      	sub	sp, #56	@ 0x38
 800170c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800170e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001712:	2200      	movs	r2, #0
 8001714:	601a      	str	r2, [r3, #0]
 8001716:	605a      	str	r2, [r3, #4]
 8001718:	609a      	str	r2, [r3, #8]
 800171a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800171c:	f107 0320 	add.w	r3, r7, #32
 8001720:	2200      	movs	r2, #0
 8001722:	601a      	str	r2, [r3, #0]
 8001724:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2200      	movs	r2, #0
 800172a:	601a      	str	r2, [r3, #0]
 800172c:	605a      	str	r2, [r3, #4]
 800172e:	609a      	str	r2, [r3, #8]
 8001730:	60da      	str	r2, [r3, #12]
 8001732:	611a      	str	r2, [r3, #16]
 8001734:	615a      	str	r2, [r3, #20]
 8001736:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001738:	4b2d      	ldr	r3, [pc, #180]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 800173a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 800173e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8001740:	4b2b      	ldr	r3, [pc, #172]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 8001742:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001746:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001748:	4b29      	ldr	r3, [pc, #164]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 800174a:	2200      	movs	r2, #0
 800174c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 800174e:	4b28      	ldr	r3, [pc, #160]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 8001750:	2205      	movs	r2, #5
 8001752:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001754:	4b26      	ldr	r3, [pc, #152]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 8001756:	2200      	movs	r2, #0
 8001758:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800175a:	4b25      	ldr	r3, [pc, #148]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 800175c:	2200      	movs	r2, #0
 800175e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001760:	4823      	ldr	r0, [pc, #140]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 8001762:	f002 fa47 	bl	8003bf4 <HAL_TIM_Base_Init>
 8001766:	4603      	mov	r3, r0
 8001768:	2b00      	cmp	r3, #0
 800176a:	d001      	beq.n	8001770 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 800176c:	f000 f97c 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001770:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001774:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001776:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800177a:	4619      	mov	r1, r3
 800177c:	481c      	ldr	r0, [pc, #112]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 800177e:	f002 fd9f 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 8001782:	4603      	mov	r3, r0
 8001784:	2b00      	cmp	r3, #0
 8001786:	d001      	beq.n	800178c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001788:	f000 f96e 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800178c:	4818      	ldr	r0, [pc, #96]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 800178e:	f002 fad3 	bl	8003d38 <HAL_TIM_PWM_Init>
 8001792:	4603      	mov	r3, r0
 8001794:	2b00      	cmp	r3, #0
 8001796:	d001      	beq.n	800179c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001798:	f000 f966 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800179c:	2300      	movs	r3, #0
 800179e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80017a0:	2300      	movs	r3, #0
 80017a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80017a4:	f107 0320 	add.w	r3, r7, #32
 80017a8:	4619      	mov	r1, r3
 80017aa:	4811      	ldr	r0, [pc, #68]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 80017ac:	f003 f920 	bl	80049f0 <HAL_TIMEx_MasterConfigSynchronization>
 80017b0:	4603      	mov	r3, r0
 80017b2:	2b00      	cmp	r3, #0
 80017b4:	d001      	beq.n	80017ba <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 80017b6:	f000 f957 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80017ba:	2360      	movs	r3, #96	@ 0x60
 80017bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80017be:	2300      	movs	r3, #0
 80017c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80017c2:	2300      	movs	r3, #0
 80017c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80017c6:	2300      	movs	r3, #0
 80017c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80017ca:	1d3b      	adds	r3, r7, #4
 80017cc:	2200      	movs	r2, #0
 80017ce:	4619      	mov	r1, r3
 80017d0:	4807      	ldr	r0, [pc, #28]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 80017d2:	f002 fcb3 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 80017d6:	4603      	mov	r3, r0
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d001      	beq.n	80017e0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 80017dc:	f000 f944 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80017e0:	4803      	ldr	r0, [pc, #12]	@ (80017f0 <MX_TIM2_Init+0xe8>)
 80017e2:	f001 f9b7 	bl	8002b54 <HAL_TIM_MspPostInit>

}
 80017e6:	bf00      	nop
 80017e8:	3738      	adds	r7, #56	@ 0x38
 80017ea:	46bd      	mov	sp, r7
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000238 	.word	0x20000238

080017f4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	b08e      	sub	sp, #56	@ 0x38
 80017f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017fa:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017fe:	2200      	movs	r2, #0
 8001800:	601a      	str	r2, [r3, #0]
 8001802:	605a      	str	r2, [r3, #4]
 8001804:	609a      	str	r2, [r3, #8]
 8001806:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001808:	f107 0320 	add.w	r3, r7, #32
 800180c:	2200      	movs	r2, #0
 800180e:	601a      	str	r2, [r3, #0]
 8001810:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001812:	1d3b      	adds	r3, r7, #4
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
 8001818:	605a      	str	r2, [r3, #4]
 800181a:	609a      	str	r2, [r3, #8]
 800181c:	60da      	str	r2, [r3, #12]
 800181e:	611a      	str	r2, [r3, #16]
 8001820:	615a      	str	r2, [r3, #20]
 8001822:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001824:	4b2c      	ldr	r3, [pc, #176]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001826:	4a2d      	ldr	r2, [pc, #180]	@ (80018dc <MX_TIM3_Init+0xe8>)
 8001828:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800182a:	4b2b      	ldr	r3, [pc, #172]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 800182c:	223f      	movs	r2, #63	@ 0x3f
 800182e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001830:	4b29      	ldr	r3, [pc, #164]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001832:	2200      	movs	r2, #0
 8001834:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001836:	4b28      	ldr	r3, [pc, #160]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001838:	2263      	movs	r2, #99	@ 0x63
 800183a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800183c:	4b26      	ldr	r3, [pc, #152]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 800183e:	2200      	movs	r2, #0
 8001840:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001842:	4b25      	ldr	r3, [pc, #148]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001844:	2200      	movs	r2, #0
 8001846:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001848:	4823      	ldr	r0, [pc, #140]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 800184a:	f002 f9d3 	bl	8003bf4 <HAL_TIM_Base_Init>
 800184e:	4603      	mov	r3, r0
 8001850:	2b00      	cmp	r3, #0
 8001852:	d001      	beq.n	8001858 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001854:	f000 f908 	bl	8001a68 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001858:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800185c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800185e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001862:	4619      	mov	r1, r3
 8001864:	481c      	ldr	r0, [pc, #112]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001866:	f002 fd2b 	bl	80042c0 <HAL_TIM_ConfigClockSource>
 800186a:	4603      	mov	r3, r0
 800186c:	2b00      	cmp	r3, #0
 800186e:	d001      	beq.n	8001874 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001870:	f000 f8fa 	bl	8001a68 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001874:	4818      	ldr	r0, [pc, #96]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001876:	f002 fa5f 	bl	8003d38 <HAL_TIM_PWM_Init>
 800187a:	4603      	mov	r3, r0
 800187c:	2b00      	cmp	r3, #0
 800187e:	d001      	beq.n	8001884 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001880:	f000 f8f2 	bl	8001a68 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001884:	2300      	movs	r3, #0
 8001886:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001888:	2300      	movs	r3, #0
 800188a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800188c:	f107 0320 	add.w	r3, r7, #32
 8001890:	4619      	mov	r1, r3
 8001892:	4811      	ldr	r0, [pc, #68]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 8001894:	f003 f8ac 	bl	80049f0 <HAL_TIMEx_MasterConfigSynchronization>
 8001898:	4603      	mov	r3, r0
 800189a:	2b00      	cmp	r3, #0
 800189c:	d001      	beq.n	80018a2 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800189e:	f000 f8e3 	bl	8001a68 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80018a2:	2360      	movs	r3, #96	@ 0x60
 80018a4:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80018a6:	230a      	movs	r3, #10
 80018a8:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80018aa:	2302      	movs	r3, #2
 80018ac:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80018ae:	2300      	movs	r3, #0
 80018b0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80018b2:	1d3b      	adds	r3, r7, #4
 80018b4:	2200      	movs	r2, #0
 80018b6:	4619      	mov	r1, r3
 80018b8:	4807      	ldr	r0, [pc, #28]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 80018ba:	f002 fc3f 	bl	800413c <HAL_TIM_PWM_ConfigChannel>
 80018be:	4603      	mov	r3, r0
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d001      	beq.n	80018c8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80018c4:	f000 f8d0 	bl	8001a68 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80018c8:	4803      	ldr	r0, [pc, #12]	@ (80018d8 <MX_TIM3_Init+0xe4>)
 80018ca:	f001 f943 	bl	8002b54 <HAL_TIM_MspPostInit>

}
 80018ce:	bf00      	nop
 80018d0:	3738      	adds	r7, #56	@ 0x38
 80018d2:	46bd      	mov	sp, r7
 80018d4:	bd80      	pop	{r7, pc}
 80018d6:	bf00      	nop
 80018d8:	20000280 	.word	0x20000280
 80018dc:	40000400 	.word	0x40000400

080018e0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	b088      	sub	sp, #32
 80018e4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018e6:	f107 0310 	add.w	r3, r7, #16
 80018ea:	2200      	movs	r2, #0
 80018ec:	601a      	str	r2, [r3, #0]
 80018ee:	605a      	str	r2, [r3, #4]
 80018f0:	609a      	str	r2, [r3, #8]
 80018f2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80018f4:	4b56      	ldr	r3, [pc, #344]	@ (8001a50 <MX_GPIO_Init+0x170>)
 80018f6:	699b      	ldr	r3, [r3, #24]
 80018f8:	4a55      	ldr	r2, [pc, #340]	@ (8001a50 <MX_GPIO_Init+0x170>)
 80018fa:	f043 0310 	orr.w	r3, r3, #16
 80018fe:	6193      	str	r3, [r2, #24]
 8001900:	4b53      	ldr	r3, [pc, #332]	@ (8001a50 <MX_GPIO_Init+0x170>)
 8001902:	699b      	ldr	r3, [r3, #24]
 8001904:	f003 0310 	and.w	r3, r3, #16
 8001908:	60fb      	str	r3, [r7, #12]
 800190a:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800190c:	4b50      	ldr	r3, [pc, #320]	@ (8001a50 <MX_GPIO_Init+0x170>)
 800190e:	699b      	ldr	r3, [r3, #24]
 8001910:	4a4f      	ldr	r2, [pc, #316]	@ (8001a50 <MX_GPIO_Init+0x170>)
 8001912:	f043 0304 	orr.w	r3, r3, #4
 8001916:	6193      	str	r3, [r2, #24]
 8001918:	4b4d      	ldr	r3, [pc, #308]	@ (8001a50 <MX_GPIO_Init+0x170>)
 800191a:	699b      	ldr	r3, [r3, #24]
 800191c:	f003 0304 	and.w	r3, r3, #4
 8001920:	60bb      	str	r3, [r7, #8]
 8001922:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001924:	4b4a      	ldr	r3, [pc, #296]	@ (8001a50 <MX_GPIO_Init+0x170>)
 8001926:	699b      	ldr	r3, [r3, #24]
 8001928:	4a49      	ldr	r2, [pc, #292]	@ (8001a50 <MX_GPIO_Init+0x170>)
 800192a:	f043 0308 	orr.w	r3, r3, #8
 800192e:	6193      	str	r3, [r2, #24]
 8001930:	4b47      	ldr	r3, [pc, #284]	@ (8001a50 <MX_GPIO_Init+0x170>)
 8001932:	699b      	ldr	r3, [r3, #24]
 8001934:	f003 0308 	and.w	r3, r3, #8
 8001938:	607b      	str	r3, [r7, #4]
 800193a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800193c:	4b44      	ldr	r3, [pc, #272]	@ (8001a50 <MX_GPIO_Init+0x170>)
 800193e:	699b      	ldr	r3, [r3, #24]
 8001940:	4a43      	ldr	r2, [pc, #268]	@ (8001a50 <MX_GPIO_Init+0x170>)
 8001942:	f043 0320 	orr.w	r3, r3, #32
 8001946:	6193      	str	r3, [r2, #24]
 8001948:	4b41      	ldr	r3, [pc, #260]	@ (8001a50 <MX_GPIO_Init+0x170>)
 800194a:	699b      	ldr	r3, [r3, #24]
 800194c:	f003 0320 	and.w	r3, r3, #32
 8001950:	603b      	str	r3, [r7, #0]
 8001952:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001954:	2200      	movs	r2, #0
 8001956:	f24e 0138 	movw	r1, #57400	@ 0xe038
 800195a:	483e      	ldr	r0, [pc, #248]	@ (8001a54 <MX_GPIO_Init+0x174>)
 800195c:	f001 fccf 	bl	80032fe <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001960:	2200      	movs	r2, #0
 8001962:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8001966:	483c      	ldr	r0, [pc, #240]	@ (8001a58 <MX_GPIO_Init+0x178>)
 8001968:	f001 fcc9 	bl	80032fe <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 800196c:	2200      	movs	r2, #0
 800196e:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001972:	483a      	ldr	r0, [pc, #232]	@ (8001a5c <MX_GPIO_Init+0x17c>)
 8001974:	f001 fcc3 	bl	80032fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001978:	2200      	movs	r2, #0
 800197a:	2104      	movs	r1, #4
 800197c:	4838      	ldr	r0, [pc, #224]	@ (8001a60 <MX_GPIO_Init+0x180>)
 800197e:	f001 fcbe 	bl	80032fe <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001982:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001986:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001988:	4b36      	ldr	r3, [pc, #216]	@ (8001a64 <MX_GPIO_Init+0x184>)
 800198a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800198c:	2300      	movs	r3, #0
 800198e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001990:	f107 0310 	add.w	r3, r7, #16
 8001994:	4619      	mov	r1, r3
 8001996:	4830      	ldr	r0, [pc, #192]	@ (8001a58 <MX_GPIO_Init+0x178>)
 8001998:	f001 fb16 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 800199c:	f24e 0338 	movw	r3, #57400	@ 0xe038
 80019a0:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019a2:	2301      	movs	r3, #1
 80019a4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019a6:	2300      	movs	r3, #0
 80019a8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ae:	f107 0310 	add.w	r3, r7, #16
 80019b2:	4619      	mov	r1, r3
 80019b4:	4827      	ldr	r0, [pc, #156]	@ (8001a54 <MX_GPIO_Init+0x174>)
 80019b6:	f001 fb07 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 80019ba:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 80019be:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019c0:	2301      	movs	r3, #1
 80019c2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019c4:	2300      	movs	r3, #0
 80019c6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019c8:	2302      	movs	r3, #2
 80019ca:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019cc:	f107 0310 	add.w	r3, r7, #16
 80019d0:	4619      	mov	r1, r3
 80019d2:	4821      	ldr	r0, [pc, #132]	@ (8001a58 <MX_GPIO_Init+0x178>)
 80019d4:	f001 faf8 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80019d8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80019dc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80019de:	2301      	movs	r3, #1
 80019e0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e2:	2300      	movs	r3, #0
 80019e4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80019e6:	2302      	movs	r3, #2
 80019e8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80019ea:	f107 0310 	add.w	r3, r7, #16
 80019ee:	4619      	mov	r1, r3
 80019f0:	481a      	ldr	r0, [pc, #104]	@ (8001a5c <MX_GPIO_Init+0x17c>)
 80019f2:	f001 fae9 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019f6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80019fa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80019fc:	2300      	movs	r3, #0
 80019fe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a04:	f107 0310 	add.w	r3, r7, #16
 8001a08:	4619      	mov	r1, r3
 8001a0a:	4813      	ldr	r0, [pc, #76]	@ (8001a58 <MX_GPIO_Init+0x178>)
 8001a0c:	f001 fadc 	bl	8002fc8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001a10:	2304      	movs	r3, #4
 8001a12:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a14:	2301      	movs	r3, #1
 8001a16:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a1c:	2302      	movs	r3, #2
 8001a1e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001a20:	f107 0310 	add.w	r3, r7, #16
 8001a24:	4619      	mov	r1, r3
 8001a26:	480e      	ldr	r0, [pc, #56]	@ (8001a60 <MX_GPIO_Init+0x180>)
 8001a28:	f001 face 	bl	8002fc8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001a2c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001a30:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001a32:	2300      	movs	r3, #0
 8001a34:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001a36:	2301      	movs	r3, #1
 8001a38:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001a3a:	f107 0310 	add.w	r3, r7, #16
 8001a3e:	4619      	mov	r1, r3
 8001a40:	4805      	ldr	r0, [pc, #20]	@ (8001a58 <MX_GPIO_Init+0x178>)
 8001a42:	f001 fac1 	bl	8002fc8 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001a46:	bf00      	nop
 8001a48:	3720      	adds	r7, #32
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	bd80      	pop	{r7, pc}
 8001a4e:	bf00      	nop
 8001a50:	40021000 	.word	0x40021000
 8001a54:	40010c00 	.word	0x40010c00
 8001a58:	40011000 	.word	0x40011000
 8001a5c:	40010800 	.word	0x40010800
 8001a60:	40011400 	.word	0x40011400
 8001a64:	10110000 	.word	0x10110000

08001a68 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001a6c:	b672      	cpsid	i
}
 8001a6e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001a70:	bf00      	nop
 8001a72:	e7fd      	b.n	8001a70 <Error_Handler+0x8>

08001a74 <mat4_mul_mat4>:
Mat4 get_rotation_matrix_y(float angle);
Mat4 get_rotation_matrix_z(float angle);
Mat4 get_scaling_matrix(float sx, float sy, float sz);


Mat4 mat4_mul_mat4(const Mat4 *a, const Mat4 *b) {
 8001a74:	b5b0      	push	{r4, r5, r7, lr}
 8001a76:	b098      	sub	sp, #96	@ 0x60
 8001a78:	af00      	add	r7, sp, #0
 8001a7a:	60f8      	str	r0, [r7, #12]
 8001a7c:	60b9      	str	r1, [r7, #8]
 8001a7e:	607a      	str	r2, [r7, #4]
	Mat4 result = {0};
 8001a80:	f107 0314 	add.w	r3, r7, #20
 8001a84:	2240      	movs	r2, #64	@ 0x40
 8001a86:	2100      	movs	r1, #0
 8001a88:	4618      	mov	r0, r3
 8001a8a:	f003 f821 	bl	8004ad0 <memset>
	for (int i = 0; i < 4; ++i) {
 8001a8e:	2300      	movs	r3, #0
 8001a90:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001a92:	e049      	b.n	8001b28 <mat4_mul_mat4+0xb4>
		for (int j = 0; j < 4; ++j) {
 8001a94:	2300      	movs	r3, #0
 8001a96:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001a98:	e040      	b.n	8001b1c <mat4_mul_mat4+0xa8>
			result.m[i][j] = 0.0f;
 8001a9a:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001a9c:	009a      	lsls	r2, r3, #2
 8001a9e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001aa0:	4413      	add	r3, r2
 8001aa2:	009b      	lsls	r3, r3, #2
 8001aa4:	3360      	adds	r3, #96	@ 0x60
 8001aa6:	443b      	add	r3, r7
 8001aa8:	f04f 0200 	mov.w	r2, #0
 8001aac:	f843 2c4c 	str.w	r2, [r3, #-76]
			for (int k = 0; k < 4; ++k) {
 8001ab0:	2300      	movs	r3, #0
 8001ab2:	657b      	str	r3, [r7, #84]	@ 0x54
 8001ab4:	e02c      	b.n	8001b10 <mat4_mul_mat4+0x9c>
				result.m[i][j] += a->m[i][k] * b->m[k][j];
 8001ab6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ab8:	009a      	lsls	r2, r3, #2
 8001aba:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001abc:	4413      	add	r3, r2
 8001abe:	009b      	lsls	r3, r3, #2
 8001ac0:	3360      	adds	r3, #96	@ 0x60
 8001ac2:	443b      	add	r3, r7
 8001ac4:	f853 4c4c 	ldr.w	r4, [r3, #-76]
 8001ac8:	68bb      	ldr	r3, [r7, #8]
 8001aca:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001acc:	0091      	lsls	r1, r2, #2
 8001ace:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ad0:	440a      	add	r2, r1
 8001ad2:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001ada:	0091      	lsls	r1, r2, #2
 8001adc:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001ade:	440a      	add	r2, r1
 8001ae0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f90f 	bl	8000d08 <__aeabi_fmul>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4619      	mov	r1, r3
 8001aee:	4620      	mov	r0, r4
 8001af0:	f7ff f802 	bl	8000af8 <__addsf3>
 8001af4:	4603      	mov	r3, r0
 8001af6:	4619      	mov	r1, r3
 8001af8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001afa:	009a      	lsls	r2, r3, #2
 8001afc:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001afe:	4413      	add	r3, r2
 8001b00:	009b      	lsls	r3, r3, #2
 8001b02:	3360      	adds	r3, #96	@ 0x60
 8001b04:	443b      	add	r3, r7
 8001b06:	f843 1c4c 	str.w	r1, [r3, #-76]
			for (int k = 0; k < 4; ++k) {
 8001b0a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b0c:	3301      	adds	r3, #1
 8001b0e:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001b12:	2b03      	cmp	r3, #3
 8001b14:	ddcf      	ble.n	8001ab6 <mat4_mul_mat4+0x42>
		for (int j = 0; j < 4; ++j) {
 8001b16:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b18:	3301      	adds	r3, #1
 8001b1a:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b1c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b1e:	2b03      	cmp	r3, #3
 8001b20:	ddbb      	ble.n	8001a9a <mat4_mul_mat4+0x26>
	for (int i = 0; i < 4; ++i) {
 8001b22:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b24:	3301      	adds	r3, #1
 8001b26:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b28:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b2a:	2b03      	cmp	r3, #3
 8001b2c:	ddb2      	ble.n	8001a94 <mat4_mul_mat4+0x20>
			}
		}
	}
	return result;
 8001b2e:	68fb      	ldr	r3, [r7, #12]
 8001b30:	461d      	mov	r5, r3
 8001b32:	f107 0414 	add.w	r4, r7, #20
 8001b36:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b38:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b3c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b3e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001b40:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001b42:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001b46:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001b4a:	68f8      	ldr	r0, [r7, #12]
 8001b4c:	3760      	adds	r7, #96	@ 0x60
 8001b4e:	46bd      	mov	sp, r7
 8001b50:	bdb0      	pop	{r4, r5, r7, pc}

08001b52 <mat4_mul_vec4>:

Vec4 mat4_mul_vec4(const Mat4 *m, const Vec4 *v) {
 8001b52:	b590      	push	{r4, r7, lr}
 8001b54:	b089      	sub	sp, #36	@ 0x24
 8001b56:	af00      	add	r7, sp, #0
 8001b58:	60f8      	str	r0, [r7, #12]
 8001b5a:	60b9      	str	r1, [r7, #8]
 8001b5c:	607a      	str	r2, [r7, #4]
	Vec4 result;
    result.x = m->m[0][0] * v->x + m->m[0][1] * v->y + m->m[0][2] * v->z + m->m[0][3] * v->w;
 8001b5e:	68bb      	ldr	r3, [r7, #8]
 8001b60:	681a      	ldr	r2, [r3, #0]
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4619      	mov	r1, r3
 8001b68:	4610      	mov	r0, r2
 8001b6a:	f7ff f8cd 	bl	8000d08 <__aeabi_fmul>
 8001b6e:	4603      	mov	r3, r0
 8001b70:	461c      	mov	r4, r3
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	685a      	ldr	r2, [r3, #4]
 8001b76:	687b      	ldr	r3, [r7, #4]
 8001b78:	685b      	ldr	r3, [r3, #4]
 8001b7a:	4619      	mov	r1, r3
 8001b7c:	4610      	mov	r0, r2
 8001b7e:	f7ff f8c3 	bl	8000d08 <__aeabi_fmul>
 8001b82:	4603      	mov	r3, r0
 8001b84:	4619      	mov	r1, r3
 8001b86:	4620      	mov	r0, r4
 8001b88:	f7fe ffb6 	bl	8000af8 <__addsf3>
 8001b8c:	4603      	mov	r3, r0
 8001b8e:	461c      	mov	r4, r3
 8001b90:	68bb      	ldr	r3, [r7, #8]
 8001b92:	689a      	ldr	r2, [r3, #8]
 8001b94:	687b      	ldr	r3, [r7, #4]
 8001b96:	689b      	ldr	r3, [r3, #8]
 8001b98:	4619      	mov	r1, r3
 8001b9a:	4610      	mov	r0, r2
 8001b9c:	f7ff f8b4 	bl	8000d08 <__aeabi_fmul>
 8001ba0:	4603      	mov	r3, r0
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	4620      	mov	r0, r4
 8001ba6:	f7fe ffa7 	bl	8000af8 <__addsf3>
 8001baa:	4603      	mov	r3, r0
 8001bac:	461c      	mov	r4, r3
 8001bae:	68bb      	ldr	r3, [r7, #8]
 8001bb0:	68da      	ldr	r2, [r3, #12]
 8001bb2:	687b      	ldr	r3, [r7, #4]
 8001bb4:	68db      	ldr	r3, [r3, #12]
 8001bb6:	4619      	mov	r1, r3
 8001bb8:	4610      	mov	r0, r2
 8001bba:	f7ff f8a5 	bl	8000d08 <__aeabi_fmul>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4620      	mov	r0, r4
 8001bc4:	f7fe ff98 	bl	8000af8 <__addsf3>
 8001bc8:	4603      	mov	r3, r0
 8001bca:	613b      	str	r3, [r7, #16]
    result.y = m->m[1][0] * v->x + m->m[1][1] * v->y + m->m[1][2] * v->z + m->m[1][3] * v->w;
 8001bcc:	68bb      	ldr	r3, [r7, #8]
 8001bce:	691a      	ldr	r2, [r3, #16]
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4619      	mov	r1, r3
 8001bd6:	4610      	mov	r0, r2
 8001bd8:	f7ff f896 	bl	8000d08 <__aeabi_fmul>
 8001bdc:	4603      	mov	r3, r0
 8001bde:	461c      	mov	r4, r3
 8001be0:	68bb      	ldr	r3, [r7, #8]
 8001be2:	695a      	ldr	r2, [r3, #20]
 8001be4:	687b      	ldr	r3, [r7, #4]
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	4619      	mov	r1, r3
 8001bea:	4610      	mov	r0, r2
 8001bec:	f7ff f88c 	bl	8000d08 <__aeabi_fmul>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	4619      	mov	r1, r3
 8001bf4:	4620      	mov	r0, r4
 8001bf6:	f7fe ff7f 	bl	8000af8 <__addsf3>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	461c      	mov	r4, r3
 8001bfe:	68bb      	ldr	r3, [r7, #8]
 8001c00:	699a      	ldr	r2, [r3, #24]
 8001c02:	687b      	ldr	r3, [r7, #4]
 8001c04:	689b      	ldr	r3, [r3, #8]
 8001c06:	4619      	mov	r1, r3
 8001c08:	4610      	mov	r0, r2
 8001c0a:	f7ff f87d 	bl	8000d08 <__aeabi_fmul>
 8001c0e:	4603      	mov	r3, r0
 8001c10:	4619      	mov	r1, r3
 8001c12:	4620      	mov	r0, r4
 8001c14:	f7fe ff70 	bl	8000af8 <__addsf3>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	69da      	ldr	r2, [r3, #28]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	68db      	ldr	r3, [r3, #12]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f7ff f86e 	bl	8000d08 <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7fe ff61 	bl	8000af8 <__addsf3>
 8001c36:	4603      	mov	r3, r0
 8001c38:	617b      	str	r3, [r7, #20]
    result.z = m->m[2][0] * v->x + m->m[2][1] * v->y + m->m[2][2] * v->z + m->m[2][3] * v->w;
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	6a1a      	ldr	r2, [r3, #32]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	681b      	ldr	r3, [r3, #0]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7ff f85f 	bl	8000d08 <__aeabi_fmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	461c      	mov	r4, r3
 8001c4e:	68bb      	ldr	r3, [r7, #8]
 8001c50:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	685b      	ldr	r3, [r3, #4]
 8001c56:	4619      	mov	r1, r3
 8001c58:	4610      	mov	r0, r2
 8001c5a:	f7ff f855 	bl	8000d08 <__aeabi_fmul>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	4619      	mov	r1, r3
 8001c62:	4620      	mov	r0, r4
 8001c64:	f7fe ff48 	bl	8000af8 <__addsf3>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	461c      	mov	r4, r3
 8001c6c:	68bb      	ldr	r3, [r7, #8]
 8001c6e:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	689b      	ldr	r3, [r3, #8]
 8001c74:	4619      	mov	r1, r3
 8001c76:	4610      	mov	r0, r2
 8001c78:	f7ff f846 	bl	8000d08 <__aeabi_fmul>
 8001c7c:	4603      	mov	r3, r0
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4620      	mov	r0, r4
 8001c82:	f7fe ff39 	bl	8000af8 <__addsf3>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461c      	mov	r4, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	68db      	ldr	r3, [r3, #12]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f7ff f837 	bl	8000d08 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7fe ff2a 	bl	8000af8 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	61bb      	str	r3, [r7, #24]
    result.w = m->m[3][0] * v->x + m->m[3][1] * v->y + m->m[3][2] * v->z + m->m[3][3] * v->w;
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff f828 	bl	8000d08 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	461c      	mov	r4, r3
 8001cbc:	68bb      	ldr	r3, [r7, #8]
 8001cbe:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001cc0:	687b      	ldr	r3, [r7, #4]
 8001cc2:	685b      	ldr	r3, [r3, #4]
 8001cc4:	4619      	mov	r1, r3
 8001cc6:	4610      	mov	r0, r2
 8001cc8:	f7ff f81e 	bl	8000d08 <__aeabi_fmul>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4620      	mov	r0, r4
 8001cd2:	f7fe ff11 	bl	8000af8 <__addsf3>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	461c      	mov	r4, r3
 8001cda:	68bb      	ldr	r3, [r7, #8]
 8001cdc:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	689b      	ldr	r3, [r3, #8]
 8001ce2:	4619      	mov	r1, r3
 8001ce4:	4610      	mov	r0, r2
 8001ce6:	f7ff f80f 	bl	8000d08 <__aeabi_fmul>
 8001cea:	4603      	mov	r3, r0
 8001cec:	4619      	mov	r1, r3
 8001cee:	4620      	mov	r0, r4
 8001cf0:	f7fe ff02 	bl	8000af8 <__addsf3>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461c      	mov	r4, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	68db      	ldr	r3, [r3, #12]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7ff f800 	bl	8000d08 <__aeabi_fmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7fe fef3 	bl	8000af8 <__addsf3>
 8001d12:	4603      	mov	r3, r0
 8001d14:	61fb      	str	r3, [r7, #28]
    return result;
 8001d16:	68fb      	ldr	r3, [r7, #12]
 8001d18:	461c      	mov	r4, r3
 8001d1a:	f107 0310 	add.w	r3, r7, #16
 8001d1e:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001d20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001d24:	68f8      	ldr	r0, [r7, #12]
 8001d26:	3724      	adds	r7, #36	@ 0x24
 8001d28:	46bd      	mov	sp, r7
 8001d2a:	bd90      	pop	{r4, r7, pc}

08001d2c <mat4_make_perspective>:

Mat4 mat4_make_perspective(float fov, float aspect, float znear, float zfar) {
 8001d2c:	b5b0      	push	{r4, r5, r7, lr}
 8001d2e:	b094      	sub	sp, #80	@ 0x50
 8001d30:	af00      	add	r7, sp, #0
 8001d32:	60f8      	str	r0, [r7, #12]
 8001d34:	60b9      	str	r1, [r7, #8]
 8001d36:	607a      	str	r2, [r7, #4]
 8001d38:	603b      	str	r3, [r7, #0]
	Mat4 m = {0};
 8001d3a:	f107 0310 	add.w	r3, r7, #16
 8001d3e:	2240      	movs	r2, #64	@ 0x40
 8001d40:	2100      	movs	r1, #0
 8001d42:	4618      	mov	r0, r3
 8001d44:	f002 fec4 	bl	8004ad0 <memset>
	m.m[0][0] = aspect * (1 / tan(fov/2));
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f7fe fb65 	bl	8000418 <__aeabi_f2d>
 8001d4e:	4604      	mov	r4, r0
 8001d50:	460d      	mov	r5, r1
 8001d52:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d56:	68b8      	ldr	r0, [r7, #8]
 8001d58:	f7ff f88a 	bl	8000e70 <__aeabi_fdiv>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	4618      	mov	r0, r3
 8001d60:	f7fe fb5a 	bl	8000418 <__aeabi_f2d>
 8001d64:	4602      	mov	r2, r0
 8001d66:	460b      	mov	r3, r1
 8001d68:	4610      	mov	r0, r2
 8001d6a:	4619      	mov	r1, r3
 8001d6c:	f002 ff68 	bl	8004c40 <tan>
 8001d70:	4602      	mov	r2, r0
 8001d72:	460b      	mov	r3, r1
 8001d74:	f04f 0000 	mov.w	r0, #0
 8001d78:	4931      	ldr	r1, [pc, #196]	@ (8001e40 <mat4_make_perspective+0x114>)
 8001d7a:	f7fe fccf 	bl	800071c <__aeabi_ddiv>
 8001d7e:	4602      	mov	r2, r0
 8001d80:	460b      	mov	r3, r1
 8001d82:	4620      	mov	r0, r4
 8001d84:	4629      	mov	r1, r5
 8001d86:	f7fe fb9f 	bl	80004c8 <__aeabi_dmul>
 8001d8a:	4602      	mov	r2, r0
 8001d8c:	460b      	mov	r3, r1
 8001d8e:	4610      	mov	r0, r2
 8001d90:	4619      	mov	r1, r3
 8001d92:	f7fe fe5b 	bl	8000a4c <__aeabi_d2f>
 8001d96:	4603      	mov	r3, r0
 8001d98:	613b      	str	r3, [r7, #16]
	m.m[1][1] = 1 / tan(fov/2);
 8001d9a:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001d9e:	68b8      	ldr	r0, [r7, #8]
 8001da0:	f7ff f866 	bl	8000e70 <__aeabi_fdiv>
 8001da4:	4603      	mov	r3, r0
 8001da6:	4618      	mov	r0, r3
 8001da8:	f7fe fb36 	bl	8000418 <__aeabi_f2d>
 8001dac:	4602      	mov	r2, r0
 8001dae:	460b      	mov	r3, r1
 8001db0:	4610      	mov	r0, r2
 8001db2:	4619      	mov	r1, r3
 8001db4:	f002 ff44 	bl	8004c40 <tan>
 8001db8:	4602      	mov	r2, r0
 8001dba:	460b      	mov	r3, r1
 8001dbc:	f04f 0000 	mov.w	r0, #0
 8001dc0:	491f      	ldr	r1, [pc, #124]	@ (8001e40 <mat4_make_perspective+0x114>)
 8001dc2:	f7fe fcab 	bl	800071c <__aeabi_ddiv>
 8001dc6:	4602      	mov	r2, r0
 8001dc8:	460b      	mov	r3, r1
 8001dca:	4610      	mov	r0, r2
 8001dcc:	4619      	mov	r1, r3
 8001dce:	f7fe fe3d 	bl	8000a4c <__aeabi_d2f>
 8001dd2:	4603      	mov	r3, r0
 8001dd4:	627b      	str	r3, [r7, #36]	@ 0x24
	m.m[2][2] = zfar / (zfar - znear);
 8001dd6:	6839      	ldr	r1, [r7, #0]
 8001dd8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001dda:	f7fe fe8b 	bl	8000af4 <__aeabi_fsub>
 8001dde:	4603      	mov	r3, r0
 8001de0:	4619      	mov	r1, r3
 8001de2:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001de4:	f7ff f844 	bl	8000e70 <__aeabi_fdiv>
 8001de8:	4603      	mov	r3, r0
 8001dea:	63bb      	str	r3, [r7, #56]	@ 0x38
	m.m[2][3] = (-zfar * znear) / (zfar - znear);
 8001dec:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001dee:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001df2:	6839      	ldr	r1, [r7, #0]
 8001df4:	4618      	mov	r0, r3
 8001df6:	f7fe ff87 	bl	8000d08 <__aeabi_fmul>
 8001dfa:	4603      	mov	r3, r0
 8001dfc:	461c      	mov	r4, r3
 8001dfe:	6839      	ldr	r1, [r7, #0]
 8001e00:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e02:	f7fe fe77 	bl	8000af4 <__aeabi_fsub>
 8001e06:	4603      	mov	r3, r0
 8001e08:	4619      	mov	r1, r3
 8001e0a:	4620      	mov	r0, r4
 8001e0c:	f7ff f830 	bl	8000e70 <__aeabi_fdiv>
 8001e10:	4603      	mov	r3, r0
 8001e12:	63fb      	str	r3, [r7, #60]	@ 0x3c
	m.m[3][2] = 1.0;
 8001e14:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001e18:	64bb      	str	r3, [r7, #72]	@ 0x48
	return m;
 8001e1a:	68fb      	ldr	r3, [r7, #12]
 8001e1c:	461d      	mov	r5, r3
 8001e1e:	f107 0410 	add.w	r4, r7, #16
 8001e22:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e24:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001e2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001e2e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001e32:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001e36:	68f8      	ldr	r0, [r7, #12]
 8001e38:	3750      	adds	r7, #80	@ 0x50
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bdb0      	pop	{r4, r5, r7, pc}
 8001e3e:	bf00      	nop
 8001e40:	3ff00000 	.word	0x3ff00000

08001e44 <mat4_mul_vec4_project>:

Vec4 mat4_mul_vec4_project(Mat4* mat_proj, Vec4* v) {
 8001e44:	b590      	push	{r4, r7, lr}
 8001e46:	b089      	sub	sp, #36	@ 0x24
 8001e48:	af00      	add	r7, sp, #0
 8001e4a:	60f8      	str	r0, [r7, #12]
 8001e4c:	60b9      	str	r1, [r7, #8]
 8001e4e:	607a      	str	r2, [r7, #4]
	Vec4 result = mat4_mul_vec4(mat_proj, v);
 8001e50:	f107 0310 	add.w	r3, r7, #16
 8001e54:	687a      	ldr	r2, [r7, #4]
 8001e56:	68b9      	ldr	r1, [r7, #8]
 8001e58:	4618      	mov	r0, r3
 8001e5a:	f7ff fe7a 	bl	8001b52 <mat4_mul_vec4>

	if (result.w != 0.0) {
 8001e5e:	69fb      	ldr	r3, [r7, #28]
 8001e60:	f04f 0100 	mov.w	r1, #0
 8001e64:	4618      	mov	r0, r3
 8001e66:	f7ff f8e3 	bl	8001030 <__aeabi_fcmpeq>
 8001e6a:	4603      	mov	r3, r0
 8001e6c:	2b00      	cmp	r3, #0
 8001e6e:	d117      	bne.n	8001ea0 <mat4_mul_vec4_project+0x5c>
		result.x /= result.w;
 8001e70:	693b      	ldr	r3, [r7, #16]
 8001e72:	69fa      	ldr	r2, [r7, #28]
 8001e74:	4611      	mov	r1, r2
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fffa 	bl	8000e70 <__aeabi_fdiv>
 8001e7c:	4603      	mov	r3, r0
 8001e7e:	613b      	str	r3, [r7, #16]
		result.y /= result.w;
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	69fa      	ldr	r2, [r7, #28]
 8001e84:	4611      	mov	r1, r2
 8001e86:	4618      	mov	r0, r3
 8001e88:	f7fe fff2 	bl	8000e70 <__aeabi_fdiv>
 8001e8c:	4603      	mov	r3, r0
 8001e8e:	617b      	str	r3, [r7, #20]
		result.z /= result.w;
 8001e90:	69bb      	ldr	r3, [r7, #24]
 8001e92:	69fa      	ldr	r2, [r7, #28]
 8001e94:	4611      	mov	r1, r2
 8001e96:	4618      	mov	r0, r3
 8001e98:	f7fe ffea 	bl	8000e70 <__aeabi_fdiv>
 8001e9c:	4603      	mov	r3, r0
 8001e9e:	61bb      	str	r3, [r7, #24]
	}
	return result;
 8001ea0:	68fb      	ldr	r3, [r7, #12]
 8001ea2:	461c      	mov	r4, r3
 8001ea4:	f107 0310 	add.w	r3, r7, #16
 8001ea8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001eaa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001eae:	68f8      	ldr	r0, [r7, #12]
 8001eb0:	3724      	adds	r7, #36	@ 0x24
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd90      	pop	{r4, r7, pc}

08001eb6 <get_translation_matrix>:




Mat4 get_translation_matrix(float tx, float ty, float tz) {
 8001eb6:	b4b0      	push	{r4, r5, r7}
 8001eb8:	b095      	sub	sp, #84	@ 0x54
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	60f8      	str	r0, [r7, #12]
 8001ebe:	60b9      	str	r1, [r7, #8]
 8001ec0:	607a      	str	r2, [r7, #4]
 8001ec2:	603b      	str	r3, [r7, #0]
	Mat4 mat = {{
 8001ec4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ec8:	613b      	str	r3, [r7, #16]
 8001eca:	f04f 0300 	mov.w	r3, #0
 8001ece:	617b      	str	r3, [r7, #20]
 8001ed0:	f04f 0300 	mov.w	r3, #0
 8001ed4:	61bb      	str	r3, [r7, #24]
 8001ed6:	68bb      	ldr	r3, [r7, #8]
 8001ed8:	61fb      	str	r3, [r7, #28]
 8001eda:	f04f 0300 	mov.w	r3, #0
 8001ede:	623b      	str	r3, [r7, #32]
 8001ee0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ee4:	627b      	str	r3, [r7, #36]	@ 0x24
 8001ee6:	f04f 0300 	mov.w	r3, #0
 8001eea:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001ef0:	f04f 0300 	mov.w	r3, #0
 8001ef4:	633b      	str	r3, [r7, #48]	@ 0x30
 8001ef6:	f04f 0300 	mov.w	r3, #0
 8001efa:	637b      	str	r3, [r7, #52]	@ 0x34
 8001efc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f00:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001f02:	683b      	ldr	r3, [r7, #0]
 8001f04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001f06:	f04f 0300 	mov.w	r3, #0
 8001f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8001f0c:	f04f 0300 	mov.w	r3, #0
 8001f10:	647b      	str	r3, [r7, #68]	@ 0x44
 8001f12:	f04f 0300 	mov.w	r3, #0
 8001f16:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001f18:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f1c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		{1, 0, 0, tx},
		{0, 1, 0, ty},
		{0, 0, 1, tz},
		{0, 0, 0, 1}
	}};
	return mat;
 8001f1e:	68fb      	ldr	r3, [r7, #12]
 8001f20:	461d      	mov	r5, r3
 8001f22:	f107 0410 	add.w	r4, r7, #16
 8001f26:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f28:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f2c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f2e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001f30:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001f32:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001f36:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001f3a:	68f8      	ldr	r0, [r7, #12]
 8001f3c:	3754      	adds	r7, #84	@ 0x54
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bcb0      	pop	{r4, r5, r7}
 8001f42:	4770      	bx	lr

08001f44 <get_rotation_matrix_x>:
Mat4 get_rotation_matrix_x(float angle) {
 8001f44:	b5b0      	push	{r4, r5, r7, lr}
 8001f46:	b092      	sub	sp, #72	@ 0x48
 8001f48:	af00      	add	r7, sp, #0
 8001f4a:	6078      	str	r0, [r7, #4]
 8001f4c:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
 8001f4e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f52:	60bb      	str	r3, [r7, #8]
 8001f54:	f04f 0300 	mov.w	r3, #0
 8001f58:	60fb      	str	r3, [r7, #12]
 8001f5a:	f04f 0300 	mov.w	r3, #0
 8001f5e:	613b      	str	r3, [r7, #16]
 8001f60:	f04f 0300 	mov.w	r3, #0
 8001f64:	617b      	str	r3, [r7, #20]
 8001f66:	f04f 0300 	mov.w	r3, #0
 8001f6a:	61bb      	str	r3, [r7, #24]
		{1, 0, 0, 0},
		{0, cos(angle), -sin(angle), 0},
 8001f6c:	6838      	ldr	r0, [r7, #0]
 8001f6e:	f7fe fa53 	bl	8000418 <__aeabi_f2d>
 8001f72:	4602      	mov	r2, r0
 8001f74:	460b      	mov	r3, r1
 8001f76:	4610      	mov	r0, r2
 8001f78:	4619      	mov	r1, r3
 8001f7a:	f002 fdd5 	bl	8004b28 <cos>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4610      	mov	r0, r2
 8001f84:	4619      	mov	r1, r3
 8001f86:	f7fe fd61 	bl	8000a4c <__aeabi_d2f>
 8001f8a:	4603      	mov	r3, r0
	Mat4 mat = {{
 8001f8c:	61fb      	str	r3, [r7, #28]
		{0, cos(angle), -sin(angle), 0},
 8001f8e:	6838      	ldr	r0, [r7, #0]
 8001f90:	f7fe fa42 	bl	8000418 <__aeabi_f2d>
 8001f94:	4602      	mov	r2, r0
 8001f96:	460b      	mov	r3, r1
 8001f98:	4610      	mov	r0, r2
 8001f9a:	4619      	mov	r1, r3
 8001f9c:	f002 fe0a 	bl	8004bb4 <sin>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	4610      	mov	r0, r2
 8001fa6:	4619      	mov	r1, r3
 8001fa8:	f7fe fd50 	bl	8000a4c <__aeabi_d2f>
 8001fac:	4603      	mov	r3, r0
	Mat4 mat = {{
 8001fae:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001fb2:	623b      	str	r3, [r7, #32]
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	627b      	str	r3, [r7, #36]	@ 0x24
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	62bb      	str	r3, [r7, #40]	@ 0x28
		{0, sin(angle), cos(angle), 0},
 8001fc0:	6838      	ldr	r0, [r7, #0]
 8001fc2:	f7fe fa29 	bl	8000418 <__aeabi_f2d>
 8001fc6:	4602      	mov	r2, r0
 8001fc8:	460b      	mov	r3, r1
 8001fca:	4610      	mov	r0, r2
 8001fcc:	4619      	mov	r1, r3
 8001fce:	f002 fdf1 	bl	8004bb4 <sin>
 8001fd2:	4602      	mov	r2, r0
 8001fd4:	460b      	mov	r3, r1
 8001fd6:	4610      	mov	r0, r2
 8001fd8:	4619      	mov	r1, r3
 8001fda:	f7fe fd37 	bl	8000a4c <__aeabi_d2f>
 8001fde:	4603      	mov	r3, r0
	Mat4 mat = {{
 8001fe0:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{0, sin(angle), cos(angle), 0},
 8001fe2:	6838      	ldr	r0, [r7, #0]
 8001fe4:	f7fe fa18 	bl	8000418 <__aeabi_f2d>
 8001fe8:	4602      	mov	r2, r0
 8001fea:	460b      	mov	r3, r1
 8001fec:	4610      	mov	r0, r2
 8001fee:	4619      	mov	r1, r3
 8001ff0:	f002 fd9a 	bl	8004b28 <cos>
 8001ff4:	4602      	mov	r2, r0
 8001ff6:	460b      	mov	r3, r1
 8001ff8:	4610      	mov	r0, r2
 8001ffa:	4619      	mov	r1, r3
 8001ffc:	f7fe fd26 	bl	8000a4c <__aeabi_d2f>
 8002000:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002002:	633b      	str	r3, [r7, #48]	@ 0x30
 8002004:	f04f 0300 	mov.w	r3, #0
 8002008:	637b      	str	r3, [r7, #52]	@ 0x34
 800200a:	f04f 0300 	mov.w	r3, #0
 800200e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002010:	f04f 0300 	mov.w	r3, #0
 8002014:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002016:	f04f 0300 	mov.w	r3, #0
 800201a:	643b      	str	r3, [r7, #64]	@ 0x40
 800201c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002020:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 0, 1}
	}};
	return mat;
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	461d      	mov	r5, r3
 8002026:	f107 0408 	add.w	r4, r7, #8
 800202a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800202c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800202e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002030:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002032:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002034:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002036:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800203a:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800203e:	6878      	ldr	r0, [r7, #4]
 8002040:	3748      	adds	r7, #72	@ 0x48
 8002042:	46bd      	mov	sp, r7
 8002044:	bdb0      	pop	{r4, r5, r7, pc}

08002046 <get_rotation_matrix_y>:

Mat4 get_rotation_matrix_y(float angle) {
 8002046:	b5b0      	push	{r4, r5, r7, lr}
 8002048:	b092      	sub	sp, #72	@ 0x48
 800204a:	af00      	add	r7, sp, #0
 800204c:	6078      	str	r0, [r7, #4]
 800204e:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
		{cos(angle), 0, sin(angle), 0},
 8002050:	6838      	ldr	r0, [r7, #0]
 8002052:	f7fe f9e1 	bl	8000418 <__aeabi_f2d>
 8002056:	4602      	mov	r2, r0
 8002058:	460b      	mov	r3, r1
 800205a:	4610      	mov	r0, r2
 800205c:	4619      	mov	r1, r3
 800205e:	f002 fd63 	bl	8004b28 <cos>
 8002062:	4602      	mov	r2, r0
 8002064:	460b      	mov	r3, r1
 8002066:	4610      	mov	r0, r2
 8002068:	4619      	mov	r1, r3
 800206a:	f7fe fcef 	bl	8000a4c <__aeabi_d2f>
 800206e:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002070:	60bb      	str	r3, [r7, #8]
 8002072:	f04f 0300 	mov.w	r3, #0
 8002076:	60fb      	str	r3, [r7, #12]
		{cos(angle), 0, sin(angle), 0},
 8002078:	6838      	ldr	r0, [r7, #0]
 800207a:	f7fe f9cd 	bl	8000418 <__aeabi_f2d>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f002 fd95 	bl	8004bb4 <sin>
 800208a:	4602      	mov	r2, r0
 800208c:	460b      	mov	r3, r1
 800208e:	4610      	mov	r0, r2
 8002090:	4619      	mov	r1, r3
 8002092:	f7fe fcdb 	bl	8000a4c <__aeabi_d2f>
 8002096:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002098:	613b      	str	r3, [r7, #16]
 800209a:	f04f 0300 	mov.w	r3, #0
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	61bb      	str	r3, [r7, #24]
 80020a6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020aa:	61fb      	str	r3, [r7, #28]
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	623b      	str	r3, [r7, #32]
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	627b      	str	r3, [r7, #36]	@ 0x24
		{0, 1, 0, 0},
		{-sin(angle), 0, cos(angle), 0},
 80020b8:	6838      	ldr	r0, [r7, #0]
 80020ba:	f7fe f9ad 	bl	8000418 <__aeabi_f2d>
 80020be:	4602      	mov	r2, r0
 80020c0:	460b      	mov	r3, r1
 80020c2:	4610      	mov	r0, r2
 80020c4:	4619      	mov	r1, r3
 80020c6:	f002 fd75 	bl	8004bb4 <sin>
 80020ca:	4602      	mov	r2, r0
 80020cc:	460b      	mov	r3, r1
 80020ce:	4610      	mov	r0, r2
 80020d0:	4619      	mov	r1, r3
 80020d2:	f7fe fcbb 	bl	8000a4c <__aeabi_d2f>
 80020d6:	4603      	mov	r3, r0
	Mat4 mat = {{
 80020d8:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80020dc:	62bb      	str	r3, [r7, #40]	@ 0x28
 80020de:	f04f 0300 	mov.w	r3, #0
 80020e2:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{-sin(angle), 0, cos(angle), 0},
 80020e4:	6838      	ldr	r0, [r7, #0]
 80020e6:	f7fe f997 	bl	8000418 <__aeabi_f2d>
 80020ea:	4602      	mov	r2, r0
 80020ec:	460b      	mov	r3, r1
 80020ee:	4610      	mov	r0, r2
 80020f0:	4619      	mov	r1, r3
 80020f2:	f002 fd19 	bl	8004b28 <cos>
 80020f6:	4602      	mov	r2, r0
 80020f8:	460b      	mov	r3, r1
 80020fa:	4610      	mov	r0, r2
 80020fc:	4619      	mov	r1, r3
 80020fe:	f7fe fca5 	bl	8000a4c <__aeabi_d2f>
 8002102:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002104:	633b      	str	r3, [r7, #48]	@ 0x30
 8002106:	f04f 0300 	mov.w	r3, #0
 800210a:	637b      	str	r3, [r7, #52]	@ 0x34
 800210c:	f04f 0300 	mov.w	r3, #0
 8002110:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002112:	f04f 0300 	mov.w	r3, #0
 8002116:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002118:	f04f 0300 	mov.w	r3, #0
 800211c:	643b      	str	r3, [r7, #64]	@ 0x40
 800211e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002122:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 0, 1}
	}};
	return mat;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	461d      	mov	r5, r3
 8002128:	f107 0408 	add.w	r4, r7, #8
 800212c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800212e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002130:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002132:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002134:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002136:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002138:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800213c:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002140:	6878      	ldr	r0, [r7, #4]
 8002142:	3748      	adds	r7, #72	@ 0x48
 8002144:	46bd      	mov	sp, r7
 8002146:	bdb0      	pop	{r4, r5, r7, pc}

08002148 <get_rotation_matrix_z>:

Mat4 get_rotation_matrix_z(float angle) {
 8002148:	b5b0      	push	{r4, r5, r7, lr}
 800214a:	b092      	sub	sp, #72	@ 0x48
 800214c:	af00      	add	r7, sp, #0
 800214e:	6078      	str	r0, [r7, #4]
 8002150:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
		{cos(angle), -sin(angle), 0, 0},
 8002152:	6838      	ldr	r0, [r7, #0]
 8002154:	f7fe f960 	bl	8000418 <__aeabi_f2d>
 8002158:	4602      	mov	r2, r0
 800215a:	460b      	mov	r3, r1
 800215c:	4610      	mov	r0, r2
 800215e:	4619      	mov	r1, r3
 8002160:	f002 fce2 	bl	8004b28 <cos>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4610      	mov	r0, r2
 800216a:	4619      	mov	r1, r3
 800216c:	f7fe fc6e 	bl	8000a4c <__aeabi_d2f>
 8002170:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002172:	60bb      	str	r3, [r7, #8]
		{cos(angle), -sin(angle), 0, 0},
 8002174:	6838      	ldr	r0, [r7, #0]
 8002176:	f7fe f94f 	bl	8000418 <__aeabi_f2d>
 800217a:	4602      	mov	r2, r0
 800217c:	460b      	mov	r3, r1
 800217e:	4610      	mov	r0, r2
 8002180:	4619      	mov	r1, r3
 8002182:	f002 fd17 	bl	8004bb4 <sin>
 8002186:	4602      	mov	r2, r0
 8002188:	460b      	mov	r3, r1
 800218a:	4610      	mov	r0, r2
 800218c:	4619      	mov	r1, r3
 800218e:	f7fe fc5d 	bl	8000a4c <__aeabi_d2f>
 8002192:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002194:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002198:	60fb      	str	r3, [r7, #12]
 800219a:	f04f 0300 	mov.w	r3, #0
 800219e:	613b      	str	r3, [r7, #16]
 80021a0:	f04f 0300 	mov.w	r3, #0
 80021a4:	617b      	str	r3, [r7, #20]
		{sin(angle), cos(angle), 0, 0},
 80021a6:	6838      	ldr	r0, [r7, #0]
 80021a8:	f7fe f936 	bl	8000418 <__aeabi_f2d>
 80021ac:	4602      	mov	r2, r0
 80021ae:	460b      	mov	r3, r1
 80021b0:	4610      	mov	r0, r2
 80021b2:	4619      	mov	r1, r3
 80021b4:	f002 fcfe 	bl	8004bb4 <sin>
 80021b8:	4602      	mov	r2, r0
 80021ba:	460b      	mov	r3, r1
 80021bc:	4610      	mov	r0, r2
 80021be:	4619      	mov	r1, r3
 80021c0:	f7fe fc44 	bl	8000a4c <__aeabi_d2f>
 80021c4:	4603      	mov	r3, r0
	Mat4 mat = {{
 80021c6:	61bb      	str	r3, [r7, #24]
		{sin(angle), cos(angle), 0, 0},
 80021c8:	6838      	ldr	r0, [r7, #0]
 80021ca:	f7fe f925 	bl	8000418 <__aeabi_f2d>
 80021ce:	4602      	mov	r2, r0
 80021d0:	460b      	mov	r3, r1
 80021d2:	4610      	mov	r0, r2
 80021d4:	4619      	mov	r1, r3
 80021d6:	f002 fca7 	bl	8004b28 <cos>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	4610      	mov	r0, r2
 80021e0:	4619      	mov	r1, r3
 80021e2:	f7fe fc33 	bl	8000a4c <__aeabi_d2f>
 80021e6:	4603      	mov	r3, r0
	Mat4 mat = {{
 80021e8:	61fb      	str	r3, [r7, #28]
 80021ea:	f04f 0300 	mov.w	r3, #0
 80021ee:	623b      	str	r3, [r7, #32]
 80021f0:	f04f 0300 	mov.w	r3, #0
 80021f4:	627b      	str	r3, [r7, #36]	@ 0x24
 80021f6:	f04f 0300 	mov.w	r3, #0
 80021fa:	62bb      	str	r3, [r7, #40]	@ 0x28
 80021fc:	f04f 0300 	mov.w	r3, #0
 8002200:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002202:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002206:	633b      	str	r3, [r7, #48]	@ 0x30
 8002208:	f04f 0300 	mov.w	r3, #0
 800220c:	637b      	str	r3, [r7, #52]	@ 0x34
 800220e:	f04f 0300 	mov.w	r3, #0
 8002212:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002214:	f04f 0300 	mov.w	r3, #0
 8002218:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800221a:	f04f 0300 	mov.w	r3, #0
 800221e:	643b      	str	r3, [r7, #64]	@ 0x40
 8002220:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002224:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 1, 0},
		{0, 0, 0, 1}
	}};
	return mat;
 8002226:	687b      	ldr	r3, [r7, #4]
 8002228:	461d      	mov	r5, r3
 800222a:	f107 0408 	add.w	r4, r7, #8
 800222e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002230:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002232:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002234:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002236:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002238:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800223a:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 800223e:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	3748      	adds	r7, #72	@ 0x48
 8002246:	46bd      	mov	sp, r7
 8002248:	bdb0      	pop	{r4, r5, r7, pc}

0800224a <get_scaling_matrix>:
Mat4 get_scaling_matrix(float sx, float sy, float sz) {
 800224a:	b4b0      	push	{r4, r5, r7}
 800224c:	b095      	sub	sp, #84	@ 0x54
 800224e:	af00      	add	r7, sp, #0
 8002250:	60f8      	str	r0, [r7, #12]
 8002252:	60b9      	str	r1, [r7, #8]
 8002254:	607a      	str	r2, [r7, #4]
 8002256:	603b      	str	r3, [r7, #0]
	Mat4 mat = {{
 8002258:	68bb      	ldr	r3, [r7, #8]
 800225a:	613b      	str	r3, [r7, #16]
 800225c:	f04f 0300 	mov.w	r3, #0
 8002260:	617b      	str	r3, [r7, #20]
 8002262:	f04f 0300 	mov.w	r3, #0
 8002266:	61bb      	str	r3, [r7, #24]
 8002268:	f04f 0300 	mov.w	r3, #0
 800226c:	61fb      	str	r3, [r7, #28]
 800226e:	f04f 0300 	mov.w	r3, #0
 8002272:	623b      	str	r3, [r7, #32]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	627b      	str	r3, [r7, #36]	@ 0x24
 8002278:	f04f 0300 	mov.w	r3, #0
 800227c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800227e:	f04f 0300 	mov.w	r3, #0
 8002282:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002284:	f04f 0300 	mov.w	r3, #0
 8002288:	633b      	str	r3, [r7, #48]	@ 0x30
 800228a:	f04f 0300 	mov.w	r3, #0
 800228e:	637b      	str	r3, [r7, #52]	@ 0x34
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002294:	f04f 0300 	mov.w	r3, #0
 8002298:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800229a:	f04f 0300 	mov.w	r3, #0
 800229e:	643b      	str	r3, [r7, #64]	@ 0x40
 80022a0:	f04f 0300 	mov.w	r3, #0
 80022a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80022a6:	f04f 0300 	mov.w	r3, #0
 80022aa:	64bb      	str	r3, [r7, #72]	@ 0x48
 80022ac:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80022b0:	64fb      	str	r3, [r7, #76]	@ 0x4c
		{sx, 0, 0, 0},
		{0, sy, 0, 0},
		{0, 0, sz, 0},
		{0, 0, 0, 1}
	}};
	return mat;
 80022b2:	68fb      	ldr	r3, [r7, #12]
 80022b4:	461d      	mov	r5, r3
 80022b6:	f107 0410 	add.w	r4, r7, #16
 80022ba:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022bc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022be:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022c4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022c6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ca:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80022ce:	68f8      	ldr	r0, [r7, #12]
 80022d0:	3754      	adds	r7, #84	@ 0x54
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bcb0      	pop	{r4, r5, r7}
 80022d6:	4770      	bx	lr

080022d8 <get_view_matrix>:


Mat4 get_view_matrix(float cam_x, float cam_y, float cam_z) {
 80022d8:	b580      	push	{r7, lr}
 80022da:	b084      	sub	sp, #16
 80022dc:	af00      	add	r7, sp, #0
 80022de:	60f8      	str	r0, [r7, #12]
 80022e0:	60b9      	str	r1, [r7, #8]
 80022e2:	607a      	str	r2, [r7, #4]
 80022e4:	603b      	str	r3, [r7, #0]
	return get_translation_matrix(-cam_x, -cam_y, -cam_z);
 80022e6:	68bb      	ldr	r3, [r7, #8]
 80022e8:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80022f8:	68f8      	ldr	r0, [r7, #12]
 80022fa:	f7ff fddc 	bl	8001eb6 <get_translation_matrix>
}
 80022fe:	68f8      	ldr	r0, [r7, #12]
 8002300:	3710      	adds	r7, #16
 8002302:	46bd      	mov	sp, r7
 8002304:	bd80      	pop	{r7, pc}

08002306 <calculate_transform_matrix>:



Mat4 calculate_transform_matrix(const Transform *transform) {
 8002306:	b5b0      	push	{r4, r5, r7, lr}
 8002308:	f5ad 7d12 	sub.w	sp, sp, #584	@ 0x248
 800230c:	af00      	add	r7, sp, #0
 800230e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002312:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002316:	6018      	str	r0, [r3, #0]
 8002318:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800231c:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002320:	6019      	str	r1, [r3, #0]
	Mat4 translation_to_origin = get_translation_matrix(-transform->x, -transform->y, -transform->z);
 8002322:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002326:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8002332:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002336:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	685b      	ldr	r3, [r3, #4]
 800233e:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 8002342:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002346:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800234a:	681b      	ldr	r3, [r3, #0]
 800234c:	689b      	ldr	r3, [r3, #8]
 800234e:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002352:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8002356:	f7ff fdae 	bl	8001eb6 <get_translation_matrix>
	Mat4 translation_back = get_translation_matrix(transform->x, transform->y, transform->z);
 800235a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800235e:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002362:	681b      	ldr	r3, [r3, #0]
 8002364:	6819      	ldr	r1, [r3, #0]
 8002366:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800236a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800236e:	681b      	ldr	r3, [r3, #0]
 8002370:	685a      	ldr	r2, [r3, #4]
 8002372:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002376:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800237a:	681b      	ldr	r3, [r3, #0]
 800237c:	689b      	ldr	r3, [r3, #8]
 800237e:	f507 70e4 	add.w	r0, r7, #456	@ 0x1c8
 8002382:	f7ff fd98 	bl	8001eb6 <get_translation_matrix>

	Mat4 rotation_x = get_rotation_matrix_x(transform->rot_x);
 8002386:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800238a:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800238e:	681b      	ldr	r3, [r3, #0]
 8002390:	68da      	ldr	r2, [r3, #12]
 8002392:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 8002396:	4611      	mov	r1, r2
 8002398:	4618      	mov	r0, r3
 800239a:	f7ff fdd3 	bl	8001f44 <get_rotation_matrix_x>
	Mat4 rotation_y = get_rotation_matrix_y(transform->rot_y);
 800239e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023a2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80023a6:	681b      	ldr	r3, [r3, #0]
 80023a8:	691a      	ldr	r2, [r3, #16]
 80023aa:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023ae:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 80023b2:	4611      	mov	r1, r2
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7ff fe46 	bl	8002046 <get_rotation_matrix_y>
	Mat4 rotation_z = get_rotation_matrix_z(transform->rot_z);
 80023ba:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023be:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80023c2:	681b      	ldr	r3, [r3, #0]
 80023c4:	695a      	ldr	r2, [r3, #20]
 80023c6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023ca:	f5a3 73a0 	sub.w	r3, r3, #320	@ 0x140
 80023ce:	4611      	mov	r1, r2
 80023d0:	4618      	mov	r0, r3
 80023d2:	f7ff feb9 	bl	8002148 <get_rotation_matrix_z>

	Mat4 scaling = get_scaling_matrix(transform->scale_x, transform->scale_y, transform->scale_z);
 80023d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023da:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	6999      	ldr	r1, [r3, #24]
 80023e2:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023e6:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	69da      	ldr	r2, [r3, #28]
 80023ee:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80023f2:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	6a1b      	ldr	r3, [r3, #32]
 80023fa:	f507 7012 	add.w	r0, r7, #584	@ 0x248
 80023fe:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 8002402:	f7ff ff22 	bl	800224a <get_scaling_matrix>


	Mat4 rotation_combined = mat4_mul_mat4(&rotation_z, &rotation_y);
 8002406:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800240a:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800240e:	f507 72a4 	add.w	r2, r7, #328	@ 0x148
 8002412:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 8002416:	4618      	mov	r0, r3
 8002418:	f7ff fb2c 	bl	8001a74 <mat4_mul_mat4>
	rotation_combined = mat4_mul_mat4(&rotation_combined, &rotation_x);
 800241c:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002420:	f5a3 74e0 	sub.w	r4, r3, #448	@ 0x1c0
 8002424:	463b      	mov	r3, r7
 8002426:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 800242a:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800242e:	4618      	mov	r0, r3
 8002430:	f7ff fb20 	bl	8001a74 <mat4_mul_mat4>
 8002434:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002438:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 800243c:	461d      	mov	r5, r3
 800243e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002440:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002442:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002444:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002446:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002448:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800244e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Mat4 transform_matrix;
	// translate to origin and rotate
	transform_matrix = mat4_mul_mat4(&translation_to_origin, &rotation_combined);
 8002452:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002456:	f5a3 7400 	sub.w	r4, r3, #512	@ 0x200
 800245a:	463b      	mov	r3, r7
 800245c:	f107 0288 	add.w	r2, r7, #136	@ 0x88
 8002460:	f507 7102 	add.w	r1, r7, #520	@ 0x208
 8002464:	4618      	mov	r0, r3
 8002466:	f7ff fb05 	bl	8001a74 <mat4_mul_mat4>
 800246a:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800246e:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 8002472:	461d      	mov	r5, r3
 8002474:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002476:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002478:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800247c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800247e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002480:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002484:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// scale
	transform_matrix = mat4_mul_mat4(&transform_matrix, &scaling);
 8002488:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 800248c:	f5a3 7400 	sub.w	r4, r3, #512	@ 0x200
 8002490:	463b      	mov	r3, r7
 8002492:	f107 02c8 	add.w	r2, r7, #200	@ 0xc8
 8002496:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 800249a:	4618      	mov	r0, r3
 800249c:	f7ff faea 	bl	8001a74 <mat4_mul_mat4>
 80024a0:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80024a4:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80024a8:	461d      	mov	r5, r3
 80024aa:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ac:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ae:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024b4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024b6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024ba:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	// translate back
	transform_matrix = mat4_mul_mat4(&transform_matrix, &translation_back);
 80024be:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80024c2:	f5a3 7400 	sub.w	r4, r3, #512	@ 0x200
 80024c6:	463b      	mov	r3, r7
 80024c8:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 80024cc:	f107 0148 	add.w	r1, r7, #72	@ 0x48
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff facf 	bl	8001a74 <mat4_mul_mat4>
 80024d6:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80024da:	f5a3 7312 	sub.w	r3, r3, #584	@ 0x248
 80024de:	461d      	mov	r5, r3
 80024e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return transform_matrix;
 80024f4:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 80024f8:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002502:	f5a3 7300 	sub.w	r3, r3, #512	@ 0x200
 8002506:	4614      	mov	r4, r2
 8002508:	461d      	mov	r5, r3
 800250a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800250c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800250e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002510:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002512:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002514:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002516:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800251a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 800251e:	f507 7312 	add.w	r3, r7, #584	@ 0x248
 8002522:	f5a3 7301 	sub.w	r3, r3, #516	@ 0x204
 8002526:	6818      	ldr	r0, [r3, #0]
 8002528:	f507 7712 	add.w	r7, r7, #584	@ 0x248
 800252c:	46bd      	mov	sp, r7
 800252e:	bdb0      	pop	{r4, r5, r7, pc}

08002530 <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 8002530:	b480      	push	{r7}
 8002532:	b083      	sub	sp, #12
 8002534:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 8002536:	4b07      	ldr	r3, [pc, #28]	@ (8002554 <swap_buffers+0x24>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 800253c:	4b06      	ldr	r3, [pc, #24]	@ (8002558 <swap_buffers+0x28>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4a04      	ldr	r2, [pc, #16]	@ (8002554 <swap_buffers+0x24>)
 8002542:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8002544:	4a04      	ldr	r2, [pc, #16]	@ (8002558 <swap_buffers+0x28>)
 8002546:	687b      	ldr	r3, [r7, #4]
 8002548:	6013      	str	r3, [r2, #0]
}
 800254a:	bf00      	nop
 800254c:	370c      	adds	r7, #12
 800254e:	46bd      	mov	sp, r7
 8002550:	bc80      	pop	{r7}
 8002552:	4770      	bx	lr
 8002554:	200000e8 	.word	0x200000e8
 8002558:	200000ec 	.word	0x200000ec

0800255c <clear_back_buffer>:


void clear_back_buffer(void) {
 800255c:	b580      	push	{r7, lr}
 800255e:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 8002560:	4b04      	ldr	r3, [pc, #16]	@ (8002574 <clear_back_buffer+0x18>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002568:	2100      	movs	r1, #0
 800256a:	4618      	mov	r0, r3
 800256c:	f002 fab0 	bl	8004ad0 <memset>
}
 8002570:	bf00      	nop
 8002572:	bd80      	pop	{r7, pc}
 8002574:	200000ec 	.word	0x200000ec

08002578 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 8002578:	b480      	push	{r7}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	60f8      	str	r0, [r7, #12]
 8002580:	60b9      	str	r1, [r7, #8]
 8002582:	4611      	mov	r1, r2
 8002584:	461a      	mov	r2, r3
 8002586:	460b      	mov	r3, r1
 8002588:	71fb      	strb	r3, [r7, #7]
 800258a:	4613      	mov	r3, r2
 800258c:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	2b00      	cmp	r3, #0
 8002592:	db34      	blt.n	80025fe <set_pixel+0x86>
 8002594:	68fb      	ldr	r3, [r7, #12]
 8002596:	2b3f      	cmp	r3, #63	@ 0x3f
 8002598:	dc31      	bgt.n	80025fe <set_pixel+0x86>
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	2b00      	cmp	r3, #0
 800259e:	db2e      	blt.n	80025fe <set_pixel+0x86>
 80025a0:	68bb      	ldr	r3, [r7, #8]
 80025a2:	2b1f      	cmp	r3, #31
 80025a4:	dc2b      	bgt.n	80025fe <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 80025a6:	79fb      	ldrb	r3, [r7, #7]
 80025a8:	2b00      	cmp	r3, #0
 80025aa:	bf14      	ite	ne
 80025ac:	2301      	movne	r3, #1
 80025ae:	2300      	moveq	r3, #0
 80025b0:	b2db      	uxtb	r3, r3
 80025b2:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 80025b4:	79bb      	ldrb	r3, [r7, #6]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	bf14      	ite	ne
 80025ba:	2301      	movne	r3, #1
 80025bc:	2300      	moveq	r3, #0
 80025be:	b2db      	uxtb	r3, r3
 80025c0:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 80025c2:	7e3b      	ldrb	r3, [r7, #24]
 80025c4:	2b00      	cmp	r3, #0
 80025c6:	bf14      	ite	ne
 80025c8:	2301      	movne	r3, #1
 80025ca:	2300      	moveq	r3, #0
 80025cc:	b2db      	uxtb	r3, r3
 80025ce:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 80025d0:	79fb      	ldrb	r3, [r7, #7]
 80025d2:	009b      	lsls	r3, r3, #2
 80025d4:	b25a      	sxtb	r2, r3
 80025d6:	79bb      	ldrb	r3, [r7, #6]
 80025d8:	005b      	lsls	r3, r3, #1
 80025da:	b25b      	sxtb	r3, r3
 80025dc:	4313      	orrs	r3, r2
 80025de:	b25a      	sxtb	r2, r3
 80025e0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80025e4:	4313      	orrs	r3, r2
 80025e6:	b259      	sxtb	r1, r3
 80025e8:	4b07      	ldr	r3, [pc, #28]	@ (8002608 <set_pixel+0x90>)
 80025ea:	681a      	ldr	r2, [r3, #0]
 80025ec:	b2c9      	uxtb	r1, r1
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	015b      	lsls	r3, r3, #5
 80025f2:	441a      	add	r2, r3
 80025f4:	68bb      	ldr	r3, [r7, #8]
 80025f6:	4413      	add	r3, r2
 80025f8:	460a      	mov	r2, r1
 80025fa:	701a      	strb	r2, [r3, #0]
 80025fc:	e000      	b.n	8002600 <set_pixel+0x88>
		return;
 80025fe:	bf00      	nop
}
 8002600:	3714      	adds	r7, #20
 8002602:	46bd      	mov	sp, r7
 8002604:	bc80      	pop	{r7}
 8002606:	4770      	bx	lr
 8002608:	200000ec 	.word	0x200000ec

0800260c <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 800260c:	b580      	push	{r7, lr}
 800260e:	b086      	sub	sp, #24
 8002610:	af02      	add	r7, sp, #8
 8002612:	60f8      	str	r0, [r7, #12]
 8002614:	60b9      	str	r1, [r7, #8]
 8002616:	4613      	mov	r3, r2
 8002618:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 800261a:	79f9      	ldrb	r1, [r7, #7]
 800261c:	79fa      	ldrb	r2, [r7, #7]
 800261e:	79fb      	ldrb	r3, [r7, #7]
 8002620:	9300      	str	r3, [sp, #0]
 8002622:	460b      	mov	r3, r1
 8002624:	68b9      	ldr	r1, [r7, #8]
 8002626:	68f8      	ldr	r0, [r7, #12]
 8002628:	f7ff ffa6 	bl	8002578 <set_pixel>
}
 800262c:	bf00      	nop
 800262e:	3710      	adds	r7, #16
 8002630:	46bd      	mov	sp, r7
 8002632:	bd80      	pop	{r7, pc}

08002634 <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8002634:	b480      	push	{r7}
 8002636:	b085      	sub	sp, #20
 8002638:	af00      	add	r7, sp, #0
 800263a:	60b9      	str	r1, [r7, #8]
 800263c:	607a      	str	r2, [r7, #4]
 800263e:	603b      	str	r3, [r7, #0]
 8002640:	4603      	mov	r3, r0
 8002642:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8002644:	7bfb      	ldrb	r3, [r7, #15]
 8002646:	089b      	lsrs	r3, r3, #2
 8002648:	b2db      	uxtb	r3, r3
 800264a:	f003 0301 	and.w	r3, r3, #1
 800264e:	b2da      	uxtb	r2, r3
 8002650:	68bb      	ldr	r3, [r7, #8]
 8002652:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8002654:	7bfb      	ldrb	r3, [r7, #15]
 8002656:	085b      	lsrs	r3, r3, #1
 8002658:	b2db      	uxtb	r3, r3
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	b2da      	uxtb	r2, r3
 8002660:	687b      	ldr	r3, [r7, #4]
 8002662:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	f003 0301 	and.w	r3, r3, #1
 800266a:	b2da      	uxtb	r2, r3
 800266c:	683b      	ldr	r3, [r7, #0]
 800266e:	701a      	strb	r2, [r3, #0]
}
 8002670:	bf00      	nop
 8002672:	3714      	adds	r7, #20
 8002674:	46bd      	mov	sp, r7
 8002676:	bc80      	pop	{r7}
 8002678:	4770      	bx	lr
	...

0800267c <render_row>:

uint8_t current_row = 0;
void render_row() {
 800267c:	b580      	push	{r7, lr}
 800267e:	b084      	sub	sp, #16
 8002680:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 8002682:	2300      	movs	r3, #0
 8002684:	73fb      	strb	r3, [r7, #15]
 8002686:	e092      	b.n	80027ae <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 8002688:	2301      	movs	r3, #1
 800268a:	73bb      	strb	r3, [r7, #14]
 800268c:	e087      	b.n	800279e <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 800268e:	2300      	movs	r3, #0
 8002690:	737b      	strb	r3, [r7, #13]
 8002692:	e07c      	b.n	800278e <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 8002694:	7bfb      	ldrb	r3, [r7, #15]
 8002696:	009b      	lsls	r3, r3, #2
 8002698:	b2da      	uxtb	r2, r3
 800269a:	7b7b      	ldrb	r3, [r7, #13]
 800269c:	4413      	add	r3, r2
 800269e:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 80026a0:	7bbb      	ldrb	r3, [r7, #14]
 80026a2:	00db      	lsls	r3, r3, #3
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	4b6f      	ldr	r3, [pc, #444]	@ (8002864 <render_row+0x1e8>)
 80026a8:	781b      	ldrb	r3, [r3, #0]
 80026aa:	4413      	add	r3, r2
 80026ac:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 80026ae:	4b6e      	ldr	r3, [pc, #440]	@ (8002868 <render_row+0x1ec>)
 80026b0:	6819      	ldr	r1, [r3, #0]
 80026b2:	7b3a      	ldrb	r2, [r7, #12]
 80026b4:	7afb      	ldrb	r3, [r7, #11]
 80026b6:	0152      	lsls	r2, r2, #5
 80026b8:	440a      	add	r2, r1
 80026ba:	4413      	add	r3, r2
 80026bc:	781b      	ldrb	r3, [r3, #0]
 80026be:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 80026c0:	4b69      	ldr	r3, [pc, #420]	@ (8002868 <render_row+0x1ec>)
 80026c2:	6819      	ldr	r1, [r3, #0]
 80026c4:	7b3a      	ldrb	r2, [r7, #12]
 80026c6:	7afb      	ldrb	r3, [r7, #11]
 80026c8:	3310      	adds	r3, #16
 80026ca:	0152      	lsls	r2, r2, #5
 80026cc:	440a      	add	r2, r1
 80026ce:	4413      	add	r3, r2
 80026d0:	781b      	ldrb	r3, [r3, #0]
 80026d2:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 80026d4:	1dbb      	adds	r3, r7, #6
 80026d6:	1dfa      	adds	r2, r7, #7
 80026d8:	f107 0108 	add.w	r1, r7, #8
 80026dc:	7ab8      	ldrb	r0, [r7, #10]
 80026de:	f7ff ffa9 	bl	8002634 <get_rgb>
				R1(r);
 80026e2:	7a3b      	ldrb	r3, [r7, #8]
 80026e4:	2b00      	cmp	r3, #0
 80026e6:	d003      	beq.n	80026f0 <render_row+0x74>
 80026e8:	4b60      	ldr	r3, [pc, #384]	@ (800286c <render_row+0x1f0>)
 80026ea:	2220      	movs	r2, #32
 80026ec:	611a      	str	r2, [r3, #16]
 80026ee:	e002      	b.n	80026f6 <render_row+0x7a>
 80026f0:	4b5e      	ldr	r3, [pc, #376]	@ (800286c <render_row+0x1f0>)
 80026f2:	2220      	movs	r2, #32
 80026f4:	615a      	str	r2, [r3, #20]
				G1(g);
 80026f6:	79fb      	ldrb	r3, [r7, #7]
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d003      	beq.n	8002704 <render_row+0x88>
 80026fc:	4b5b      	ldr	r3, [pc, #364]	@ (800286c <render_row+0x1f0>)
 80026fe:	2208      	movs	r2, #8
 8002700:	611a      	str	r2, [r3, #16]
 8002702:	e002      	b.n	800270a <render_row+0x8e>
 8002704:	4b59      	ldr	r3, [pc, #356]	@ (800286c <render_row+0x1f0>)
 8002706:	2208      	movs	r2, #8
 8002708:	615a      	str	r2, [r3, #20]
				B1(b);
 800270a:	79bb      	ldrb	r3, [r7, #6]
 800270c:	2b00      	cmp	r3, #0
 800270e:	d004      	beq.n	800271a <render_row+0x9e>
 8002710:	4b57      	ldr	r3, [pc, #348]	@ (8002870 <render_row+0x1f4>)
 8002712:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002716:	611a      	str	r2, [r3, #16]
 8002718:	e003      	b.n	8002722 <render_row+0xa6>
 800271a:	4b55      	ldr	r3, [pc, #340]	@ (8002870 <render_row+0x1f4>)
 800271c:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002720:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 8002722:	1dbb      	adds	r3, r7, #6
 8002724:	1dfa      	adds	r2, r7, #7
 8002726:	f107 0108 	add.w	r1, r7, #8
 800272a:	7a78      	ldrb	r0, [r7, #9]
 800272c:	f7ff ff82 	bl	8002634 <get_rgb>
				R2(r);
 8002730:	7a3b      	ldrb	r3, [r7, #8]
 8002732:	2b00      	cmp	r3, #0
 8002734:	d003      	beq.n	800273e <render_row+0xc2>
 8002736:	4b4d      	ldr	r3, [pc, #308]	@ (800286c <render_row+0x1f0>)
 8002738:	2210      	movs	r2, #16
 800273a:	611a      	str	r2, [r3, #16]
 800273c:	e002      	b.n	8002744 <render_row+0xc8>
 800273e:	4b4b      	ldr	r3, [pc, #300]	@ (800286c <render_row+0x1f0>)
 8002740:	2210      	movs	r2, #16
 8002742:	615a      	str	r2, [r3, #20]
				G2(g);
 8002744:	79fb      	ldrb	r3, [r7, #7]
 8002746:	2b00      	cmp	r3, #0
 8002748:	d003      	beq.n	8002752 <render_row+0xd6>
 800274a:	4b4a      	ldr	r3, [pc, #296]	@ (8002874 <render_row+0x1f8>)
 800274c:	2204      	movs	r2, #4
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	e002      	b.n	8002758 <render_row+0xdc>
 8002752:	4b48      	ldr	r3, [pc, #288]	@ (8002874 <render_row+0x1f8>)
 8002754:	2204      	movs	r2, #4
 8002756:	615a      	str	r2, [r3, #20]
				B2(b);
 8002758:	79bb      	ldrb	r3, [r7, #6]
 800275a:	2b00      	cmp	r3, #0
 800275c:	d004      	beq.n	8002768 <render_row+0xec>
 800275e:	4b44      	ldr	r3, [pc, #272]	@ (8002870 <render_row+0x1f4>)
 8002760:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002764:	611a      	str	r2, [r3, #16]
 8002766:	e003      	b.n	8002770 <render_row+0xf4>
 8002768:	4b41      	ldr	r3, [pc, #260]	@ (8002870 <render_row+0x1f4>)
 800276a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800276e:	615a      	str	r2, [r3, #20]

				CLK_H;
 8002770:	2201      	movs	r2, #1
 8002772:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002776:	483d      	ldr	r0, [pc, #244]	@ (800286c <render_row+0x1f0>)
 8002778:	f000 fdc1 	bl	80032fe <HAL_GPIO_WritePin>
				CLK_L;
 800277c:	2200      	movs	r2, #0
 800277e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002782:	483a      	ldr	r0, [pc, #232]	@ (800286c <render_row+0x1f0>)
 8002784:	f000 fdbb 	bl	80032fe <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 8002788:	7b7b      	ldrb	r3, [r7, #13]
 800278a:	3301      	adds	r3, #1
 800278c:	737b      	strb	r3, [r7, #13]
 800278e:	7b7b      	ldrb	r3, [r7, #13]
 8002790:	2b03      	cmp	r3, #3
 8002792:	f67f af7f 	bls.w	8002694 <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 8002796:	7bbb      	ldrb	r3, [r7, #14]
 8002798:	3b01      	subs	r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	73bb      	strb	r3, [r7, #14]
 800279e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027a2:	2b00      	cmp	r3, #0
 80027a4:	f6bf af73 	bge.w	800268e <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80027a8:	7bfb      	ldrb	r3, [r7, #15]
 80027aa:	3301      	adds	r3, #1
 80027ac:	73fb      	strb	r3, [r7, #15]
 80027ae:	7bfb      	ldrb	r3, [r7, #15]
 80027b0:	2b0f      	cmp	r3, #15
 80027b2:	f67f af69 	bls.w	8002688 <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 80027b6:	4b2e      	ldr	r3, [pc, #184]	@ (8002870 <render_row+0x1f4>)
 80027b8:	681b      	ldr	r3, [r3, #0]
 80027ba:	4a2d      	ldr	r2, [pc, #180]	@ (8002870 <render_row+0x1f4>)
 80027bc:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80027c0:	6013      	str	r3, [r2, #0]
	LAT_H;
 80027c2:	2201      	movs	r2, #1
 80027c4:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027c8:	4828      	ldr	r0, [pc, #160]	@ (800286c <render_row+0x1f0>)
 80027ca:	f000 fd98 	bl	80032fe <HAL_GPIO_WritePin>
	LAT_L;
 80027ce:	2200      	movs	r2, #0
 80027d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027d4:	4825      	ldr	r0, [pc, #148]	@ (800286c <render_row+0x1f0>)
 80027d6:	f000 fd92 	bl	80032fe <HAL_GPIO_WritePin>
	ROW(current_row);
 80027da:	4b22      	ldr	r3, [pc, #136]	@ (8002864 <render_row+0x1e8>)
 80027dc:	781b      	ldrb	r3, [r3, #0]
 80027de:	f003 0301 	and.w	r3, r3, #1
 80027e2:	2b00      	cmp	r3, #0
 80027e4:	d004      	beq.n	80027f0 <render_row+0x174>
 80027e6:	4b24      	ldr	r3, [pc, #144]	@ (8002878 <render_row+0x1fc>)
 80027e8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027ec:	611a      	str	r2, [r3, #16]
 80027ee:	e003      	b.n	80027f8 <render_row+0x17c>
 80027f0:	4b21      	ldr	r3, [pc, #132]	@ (8002878 <render_row+0x1fc>)
 80027f2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027f6:	615a      	str	r2, [r3, #20]
 80027f8:	4b1a      	ldr	r3, [pc, #104]	@ (8002864 <render_row+0x1e8>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f003 0302 	and.w	r3, r3, #2
 8002800:	2b00      	cmp	r3, #0
 8002802:	d004      	beq.n	800280e <render_row+0x192>
 8002804:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <render_row+0x1f4>)
 8002806:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800280a:	611a      	str	r2, [r3, #16]
 800280c:	e003      	b.n	8002816 <render_row+0x19a>
 800280e:	4b18      	ldr	r3, [pc, #96]	@ (8002870 <render_row+0x1f4>)
 8002810:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002814:	615a      	str	r2, [r3, #20]
 8002816:	4b13      	ldr	r3, [pc, #76]	@ (8002864 <render_row+0x1e8>)
 8002818:	781b      	ldrb	r3, [r3, #0]
 800281a:	f003 0304 	and.w	r3, r3, #4
 800281e:	2b00      	cmp	r3, #0
 8002820:	d004      	beq.n	800282c <render_row+0x1b0>
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <render_row+0x1f4>)
 8002824:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002828:	611a      	str	r2, [r3, #16]
 800282a:	e003      	b.n	8002834 <render_row+0x1b8>
 800282c:	4b10      	ldr	r3, [pc, #64]	@ (8002870 <render_row+0x1f4>)
 800282e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002832:	615a      	str	r2, [r3, #20]
 8002834:	4b0b      	ldr	r3, [pc, #44]	@ (8002864 <render_row+0x1e8>)
 8002836:	781b      	ldrb	r3, [r3, #0]
 8002838:	f003 0308 	and.w	r3, r3, #8
 800283c:	2b00      	cmp	r3, #0
 800283e:	d003      	beq.n	8002848 <render_row+0x1cc>
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <render_row+0x1f4>)
 8002842:	2280      	movs	r2, #128	@ 0x80
 8002844:	611a      	str	r2, [r3, #16]
 8002846:	e002      	b.n	800284e <render_row+0x1d2>
 8002848:	4b09      	ldr	r3, [pc, #36]	@ (8002870 <render_row+0x1f4>)
 800284a:	2280      	movs	r2, #128	@ 0x80
 800284c:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 800284e:	4b08      	ldr	r3, [pc, #32]	@ (8002870 <render_row+0x1f4>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4a07      	ldr	r2, [pc, #28]	@ (8002870 <render_row+0x1f4>)
 8002854:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002858:	6013      	str	r3, [r2, #0]
}
 800285a:	bf00      	nop
 800285c:	3710      	adds	r7, #16
 800285e:	46bd      	mov	sp, r7
 8002860:	bd80      	pop	{r7, pc}
 8002862:	bf00      	nop
 8002864:	200012dd 	.word	0x200012dd
 8002868:	200000e8 	.word	0x200000e8
 800286c:	40010c00 	.word	0x40010c00
 8002870:	40011000 	.word	0x40011000
 8002874:	40011400 	.word	0x40011400
 8002878:	40010800 	.word	0x40010800

0800287c <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
#define RENDER_INTERVAL_MS 10
uint32_t last_render_time = 0;

void render_buffer() {
 800287c:	b580      	push	{r7, lr}
 800287e:	b082      	sub	sp, #8
 8002880:	af00      	add	r7, sp, #0
	if (current_row == 0) {
 8002882:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <render_buffer+0x60>)
 8002884:	781b      	ldrb	r3, [r3, #0]
 8002886:	2b00      	cmp	r3, #0
 8002888:	d10b      	bne.n	80028a2 <render_buffer+0x26>
		uint32_t tick = HAL_GetTick();
 800288a:	f000 fa85 	bl	8002d98 <HAL_GetTick>
 800288e:	6078      	str	r0, [r7, #4]
		if (tick - last_render_time < RENDER_INTERVAL_MS) {
 8002890:	4b13      	ldr	r3, [pc, #76]	@ (80028e0 <render_buffer+0x64>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	687a      	ldr	r2, [r7, #4]
 8002896:	1ad3      	subs	r3, r2, r3
 8002898:	2b09      	cmp	r3, #9
 800289a:	d91b      	bls.n	80028d4 <render_buffer+0x58>
			return;
		} else {
			last_render_time = tick;
 800289c:	4a10      	ldr	r2, [pc, #64]	@ (80028e0 <render_buffer+0x64>)
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	6013      	str	r3, [r2, #0]
		}
	}


	render_row();
 80028a2:	f7ff feeb 	bl	800267c <render_row>

	if (++current_row == 8) {
 80028a6:	4b0d      	ldr	r3, [pc, #52]	@ (80028dc <render_buffer+0x60>)
 80028a8:	781b      	ldrb	r3, [r3, #0]
 80028aa:	3301      	adds	r3, #1
 80028ac:	b2da      	uxtb	r2, r3
 80028ae:	4b0b      	ldr	r3, [pc, #44]	@ (80028dc <render_buffer+0x60>)
 80028b0:	701a      	strb	r2, [r3, #0]
 80028b2:	4b0a      	ldr	r3, [pc, #40]	@ (80028dc <render_buffer+0x60>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b08      	cmp	r3, #8
 80028b8:	d10d      	bne.n	80028d6 <render_buffer+0x5a>
		current_row = 0;
 80028ba:	4b08      	ldr	r3, [pc, #32]	@ (80028dc <render_buffer+0x60>)
 80028bc:	2200      	movs	r2, #0
 80028be:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 80028c0:	4b08      	ldr	r3, [pc, #32]	@ (80028e4 <render_buffer+0x68>)
 80028c2:	781b      	ldrb	r3, [r3, #0]
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d006      	beq.n	80028d6 <render_buffer+0x5a>
			swap_buffers();
 80028c8:	f7ff fe32 	bl	8002530 <swap_buffers>
			is_back_buffer_new = false;
 80028cc:	4b05      	ldr	r3, [pc, #20]	@ (80028e4 <render_buffer+0x68>)
 80028ce:	2200      	movs	r2, #0
 80028d0:	701a      	strb	r2, [r3, #0]
 80028d2:	e000      	b.n	80028d6 <render_buffer+0x5a>
			return;
 80028d4:	bf00      	nop
		}
	}
}
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	200012dd 	.word	0x200012dd
 80028e0:	200012e0 	.word	0x200012e0
 80028e4:	200012dc 	.word	0x200012dc

080028e8 <draw_line>:

// Bresenham's line algorithm
// (https://en.wikipedia.org/wiki/Bresenham's_line_algorithm)
void draw_line(int x0, int y0, int x1, int y1) {
 80028e8:	b580      	push	{r7, lr}
 80028ea:	b08a      	sub	sp, #40	@ 0x28
 80028ec:	af00      	add	r7, sp, #0
 80028ee:	60f8      	str	r0, [r7, #12]
 80028f0:	60b9      	str	r1, [r7, #8]
 80028f2:	607a      	str	r2, [r7, #4]
 80028f4:	603b      	str	r3, [r7, #0]
	if (x0 < 0) { x0 = 0; }
 80028f6:	68fb      	ldr	r3, [r7, #12]
 80028f8:	2b00      	cmp	r3, #0
 80028fa:	da01      	bge.n	8002900 <draw_line+0x18>
 80028fc:	2300      	movs	r3, #0
 80028fe:	60fb      	str	r3, [r7, #12]
	if (x1 < 0) { x1 = 0; }
 8002900:	687b      	ldr	r3, [r7, #4]
 8002902:	2b00      	cmp	r3, #0
 8002904:	da01      	bge.n	800290a <draw_line+0x22>
 8002906:	2300      	movs	r3, #0
 8002908:	607b      	str	r3, [r7, #4]
	if (y0 < 0) { y0 = 0; }
 800290a:	68bb      	ldr	r3, [r7, #8]
 800290c:	2b00      	cmp	r3, #0
 800290e:	da01      	bge.n	8002914 <draw_line+0x2c>
 8002910:	2300      	movs	r3, #0
 8002912:	60bb      	str	r3, [r7, #8]
	if (y1 < 0) { y1 = 0; }
 8002914:	683b      	ldr	r3, [r7, #0]
 8002916:	2b00      	cmp	r3, #0
 8002918:	da01      	bge.n	800291e <draw_line+0x36>
 800291a:	2300      	movs	r3, #0
 800291c:	603b      	str	r3, [r7, #0]
	if (x0 >= WIDTH) { x0 = WIDTH-1; }
 800291e:	68fb      	ldr	r3, [r7, #12]
 8002920:	2b3f      	cmp	r3, #63	@ 0x3f
 8002922:	dd01      	ble.n	8002928 <draw_line+0x40>
 8002924:	233f      	movs	r3, #63	@ 0x3f
 8002926:	60fb      	str	r3, [r7, #12]
	if (x1 >= WIDTH) { x1 = WIDTH-1; }
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	2b3f      	cmp	r3, #63	@ 0x3f
 800292c:	dd01      	ble.n	8002932 <draw_line+0x4a>
 800292e:	233f      	movs	r3, #63	@ 0x3f
 8002930:	607b      	str	r3, [r7, #4]
	if (y0 >= HEIGHT) { y0 = HEIGHT-1; }
 8002932:	68bb      	ldr	r3, [r7, #8]
 8002934:	2b1f      	cmp	r3, #31
 8002936:	dd01      	ble.n	800293c <draw_line+0x54>
 8002938:	231f      	movs	r3, #31
 800293a:	60bb      	str	r3, [r7, #8]
	if (y1 >= HEIGHT) { y1 = HEIGHT-1; }
 800293c:	683b      	ldr	r3, [r7, #0]
 800293e:	2b1f      	cmp	r3, #31
 8002940:	dd01      	ble.n	8002946 <draw_line+0x5e>
 8002942:	231f      	movs	r3, #31
 8002944:	603b      	str	r3, [r7, #0]


	int dx = abs(x1 - x0);
 8002946:	687a      	ldr	r2, [r7, #4]
 8002948:	68fb      	ldr	r3, [r7, #12]
 800294a:	1ad3      	subs	r3, r2, r3
 800294c:	2b00      	cmp	r3, #0
 800294e:	bfb8      	it	lt
 8002950:	425b      	neglt	r3, r3
 8002952:	623b      	str	r3, [r7, #32]
	int sx = (x0 < x1) ? 1 : -1;
 8002954:	68fa      	ldr	r2, [r7, #12]
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	429a      	cmp	r2, r3
 800295a:	da01      	bge.n	8002960 <draw_line+0x78>
 800295c:	2301      	movs	r3, #1
 800295e:	e001      	b.n	8002964 <draw_line+0x7c>
 8002960:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002964:	61fb      	str	r3, [r7, #28]
	int dy = -abs(y1 - y0);
 8002966:	683a      	ldr	r2, [r7, #0]
 8002968:	68bb      	ldr	r3, [r7, #8]
 800296a:	1ad3      	subs	r3, r2, r3
 800296c:	2b00      	cmp	r3, #0
 800296e:	bfb8      	it	lt
 8002970:	425b      	neglt	r3, r3
 8002972:	425b      	negs	r3, r3
 8002974:	61bb      	str	r3, [r7, #24]
	int sy = (y0 < y1) ? 1 : -1;
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	da01      	bge.n	8002982 <draw_line+0x9a>
 800297e:	2301      	movs	r3, #1
 8002980:	e001      	b.n	8002986 <draw_line+0x9e>
 8002982:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002986:	617b      	str	r3, [r7, #20]
	int error = dx + dy;
 8002988:	6a3a      	ldr	r2, [r7, #32]
 800298a:	69bb      	ldr	r3, [r7, #24]
 800298c:	4413      	add	r3, r2
 800298e:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		set_pixel_w(x0, y0, 1);
 8002990:	2201      	movs	r2, #1
 8002992:	68b9      	ldr	r1, [r7, #8]
 8002994:	68f8      	ldr	r0, [r7, #12]
 8002996:	f7ff fe39 	bl	800260c <set_pixel_w>

		if (x0 == x1 && y0 == y1) {
 800299a:	68fa      	ldr	r2, [r7, #12]
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	429a      	cmp	r2, r3
 80029a0:	d103      	bne.n	80029aa <draw_line+0xc2>
 80029a2:	68ba      	ldr	r2, [r7, #8]
 80029a4:	683b      	ldr	r3, [r7, #0]
 80029a6:	429a      	cmp	r2, r3
 80029a8:	d023      	beq.n	80029f2 <draw_line+0x10a>
			break;
		}

		int e2 = 2 * error;
 80029aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80029ac:	005b      	lsls	r3, r3, #1
 80029ae:	613b      	str	r3, [r7, #16]
		if (e2 >= dy) {
 80029b0:	693a      	ldr	r2, [r7, #16]
 80029b2:	69bb      	ldr	r3, [r7, #24]
 80029b4:	429a      	cmp	r2, r3
 80029b6:	db0b      	blt.n	80029d0 <draw_line+0xe8>
			if (x0 == x1) {
 80029b8:	68fa      	ldr	r2, [r7, #12]
 80029ba:	687b      	ldr	r3, [r7, #4]
 80029bc:	429a      	cmp	r2, r3
 80029be:	d01a      	beq.n	80029f6 <draw_line+0x10e>
				break;
			}
			error += dy;
 80029c0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029c2:	69bb      	ldr	r3, [r7, #24]
 80029c4:	4413      	add	r3, r2
 80029c6:	627b      	str	r3, [r7, #36]	@ 0x24
			x0 += sx;
 80029c8:	68fa      	ldr	r2, [r7, #12]
 80029ca:	69fb      	ldr	r3, [r7, #28]
 80029cc:	4413      	add	r3, r2
 80029ce:	60fb      	str	r3, [r7, #12]
		}
		if (e2 <= dx) {
 80029d0:	693a      	ldr	r2, [r7, #16]
 80029d2:	6a3b      	ldr	r3, [r7, #32]
 80029d4:	429a      	cmp	r2, r3
 80029d6:	dcdb      	bgt.n	8002990 <draw_line+0xa8>
			if (y0 == y1) {
 80029d8:	68ba      	ldr	r2, [r7, #8]
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	429a      	cmp	r2, r3
 80029de:	d00c      	beq.n	80029fa <draw_line+0x112>
				break;
			}
			error += dx;
 80029e0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029e2:	6a3b      	ldr	r3, [r7, #32]
 80029e4:	4413      	add	r3, r2
 80029e6:	627b      	str	r3, [r7, #36]	@ 0x24
			y0 += sy;
 80029e8:	68ba      	ldr	r2, [r7, #8]
 80029ea:	697b      	ldr	r3, [r7, #20]
 80029ec:	4413      	add	r3, r2
 80029ee:	60bb      	str	r3, [r7, #8]
	while (1) {
 80029f0:	e7ce      	b.n	8002990 <draw_line+0xa8>
			break;
 80029f2:	bf00      	nop
 80029f4:	e002      	b.n	80029fc <draw_line+0x114>
				break;
 80029f6:	bf00      	nop
 80029f8:	e000      	b.n	80029fc <draw_line+0x114>
				break;
 80029fa:	bf00      	nop
		}
	}
}
 80029fc:	bf00      	nop
 80029fe:	3728      	adds	r7, #40	@ 0x28
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bd80      	pop	{r7, pc}

08002a04 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a04:	b480      	push	{r7}
 8002a06:	b085      	sub	sp, #20
 8002a08:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002a0a:	4b15      	ldr	r3, [pc, #84]	@ (8002a60 <HAL_MspInit+0x5c>)
 8002a0c:	699b      	ldr	r3, [r3, #24]
 8002a0e:	4a14      	ldr	r2, [pc, #80]	@ (8002a60 <HAL_MspInit+0x5c>)
 8002a10:	f043 0301 	orr.w	r3, r3, #1
 8002a14:	6193      	str	r3, [r2, #24]
 8002a16:	4b12      	ldr	r3, [pc, #72]	@ (8002a60 <HAL_MspInit+0x5c>)
 8002a18:	699b      	ldr	r3, [r3, #24]
 8002a1a:	f003 0301 	and.w	r3, r3, #1
 8002a1e:	60bb      	str	r3, [r7, #8]
 8002a20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a22:	4b0f      	ldr	r3, [pc, #60]	@ (8002a60 <HAL_MspInit+0x5c>)
 8002a24:	69db      	ldr	r3, [r3, #28]
 8002a26:	4a0e      	ldr	r2, [pc, #56]	@ (8002a60 <HAL_MspInit+0x5c>)
 8002a28:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a2c:	61d3      	str	r3, [r2, #28]
 8002a2e:	4b0c      	ldr	r3, [pc, #48]	@ (8002a60 <HAL_MspInit+0x5c>)
 8002a30:	69db      	ldr	r3, [r3, #28]
 8002a32:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a36:	607b      	str	r3, [r7, #4]
 8002a38:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a3a:	4b0a      	ldr	r3, [pc, #40]	@ (8002a64 <HAL_MspInit+0x60>)
 8002a3c:	685b      	ldr	r3, [r3, #4]
 8002a3e:	60fb      	str	r3, [r7, #12]
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a46:	60fb      	str	r3, [r7, #12]
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a4e:	60fb      	str	r3, [r7, #12]
 8002a50:	4a04      	ldr	r2, [pc, #16]	@ (8002a64 <HAL_MspInit+0x60>)
 8002a52:	68fb      	ldr	r3, [r7, #12]
 8002a54:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a56:	bf00      	nop
 8002a58:	3714      	adds	r7, #20
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	40021000 	.word	0x40021000
 8002a64:	40010000 	.word	0x40010000

08002a68 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a68:	b580      	push	{r7, lr}
 8002a6a:	b088      	sub	sp, #32
 8002a6c:	af00      	add	r7, sp, #0
 8002a6e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a70:	f107 0310 	add.w	r3, r7, #16
 8002a74:	2200      	movs	r2, #0
 8002a76:	601a      	str	r2, [r3, #0]
 8002a78:	605a      	str	r2, [r3, #4]
 8002a7a:	609a      	str	r2, [r3, #8]
 8002a7c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002a7e:	687b      	ldr	r3, [r7, #4]
 8002a80:	681b      	ldr	r3, [r3, #0]
 8002a82:	4a15      	ldr	r2, [pc, #84]	@ (8002ad8 <HAL_SPI_MspInit+0x70>)
 8002a84:	4293      	cmp	r3, r2
 8002a86:	d123      	bne.n	8002ad0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a88:	4b14      	ldr	r3, [pc, #80]	@ (8002adc <HAL_SPI_MspInit+0x74>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a13      	ldr	r2, [pc, #76]	@ (8002adc <HAL_SPI_MspInit+0x74>)
 8002a8e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b11      	ldr	r3, [pc, #68]	@ (8002adc <HAL_SPI_MspInit+0x74>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aa0:	4b0e      	ldr	r3, [pc, #56]	@ (8002adc <HAL_SPI_MspInit+0x74>)
 8002aa2:	699b      	ldr	r3, [r3, #24]
 8002aa4:	4a0d      	ldr	r2, [pc, #52]	@ (8002adc <HAL_SPI_MspInit+0x74>)
 8002aa6:	f043 0304 	orr.w	r3, r3, #4
 8002aaa:	6193      	str	r3, [r2, #24]
 8002aac:	4b0b      	ldr	r3, [pc, #44]	@ (8002adc <HAL_SPI_MspInit+0x74>)
 8002aae:	699b      	ldr	r3, [r3, #24]
 8002ab0:	f003 0304 	and.w	r3, r3, #4
 8002ab4:	60bb      	str	r3, [r7, #8]
 8002ab6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002ab8:	23a0      	movs	r3, #160	@ 0xa0
 8002aba:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002abc:	2302      	movs	r3, #2
 8002abe:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002ac0:	2303      	movs	r3, #3
 8002ac2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ac4:	f107 0310 	add.w	r3, r7, #16
 8002ac8:	4619      	mov	r1, r3
 8002aca:	4805      	ldr	r0, [pc, #20]	@ (8002ae0 <HAL_SPI_MspInit+0x78>)
 8002acc:	f000 fa7c 	bl	8002fc8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ad0:	bf00      	nop
 8002ad2:	3720      	adds	r7, #32
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bd80      	pop	{r7, pc}
 8002ad8:	40013000 	.word	0x40013000
 8002adc:	40021000 	.word	0x40021000
 8002ae0:	40010800 	.word	0x40010800

08002ae4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002ae4:	b580      	push	{r7, lr}
 8002ae6:	b084      	sub	sp, #16
 8002ae8:	af00      	add	r7, sp, #0
 8002aea:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002aec:	687b      	ldr	r3, [r7, #4]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002af4:	d114      	bne.n	8002b20 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002af6:	4b15      	ldr	r3, [pc, #84]	@ (8002b4c <HAL_TIM_Base_MspInit+0x68>)
 8002af8:	69db      	ldr	r3, [r3, #28]
 8002afa:	4a14      	ldr	r2, [pc, #80]	@ (8002b4c <HAL_TIM_Base_MspInit+0x68>)
 8002afc:	f043 0301 	orr.w	r3, r3, #1
 8002b00:	61d3      	str	r3, [r2, #28]
 8002b02:	4b12      	ldr	r3, [pc, #72]	@ (8002b4c <HAL_TIM_Base_MspInit+0x68>)
 8002b04:	69db      	ldr	r3, [r3, #28]
 8002b06:	f003 0301 	and.w	r3, r3, #1
 8002b0a:	60fb      	str	r3, [r7, #12]
 8002b0c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002b0e:	2200      	movs	r2, #0
 8002b10:	2100      	movs	r1, #0
 8002b12:	201c      	movs	r0, #28
 8002b14:	f000 fa21 	bl	8002f5a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b18:	201c      	movs	r0, #28
 8002b1a:	f000 fa3a 	bl	8002f92 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b1e:	e010      	b.n	8002b42 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002b20:	687b      	ldr	r3, [r7, #4]
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4a0a      	ldr	r2, [pc, #40]	@ (8002b50 <HAL_TIM_Base_MspInit+0x6c>)
 8002b26:	4293      	cmp	r3, r2
 8002b28:	d10b      	bne.n	8002b42 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b2a:	4b08      	ldr	r3, [pc, #32]	@ (8002b4c <HAL_TIM_Base_MspInit+0x68>)
 8002b2c:	69db      	ldr	r3, [r3, #28]
 8002b2e:	4a07      	ldr	r2, [pc, #28]	@ (8002b4c <HAL_TIM_Base_MspInit+0x68>)
 8002b30:	f043 0302 	orr.w	r3, r3, #2
 8002b34:	61d3      	str	r3, [r2, #28]
 8002b36:	4b05      	ldr	r3, [pc, #20]	@ (8002b4c <HAL_TIM_Base_MspInit+0x68>)
 8002b38:	69db      	ldr	r3, [r3, #28]
 8002b3a:	f003 0302 	and.w	r3, r3, #2
 8002b3e:	60bb      	str	r3, [r7, #8]
 8002b40:	68bb      	ldr	r3, [r7, #8]
}
 8002b42:	bf00      	nop
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	40021000 	.word	0x40021000
 8002b50:	40000400 	.word	0x40000400

08002b54 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b54:	b580      	push	{r7, lr}
 8002b56:	b08a      	sub	sp, #40	@ 0x28
 8002b58:	af00      	add	r7, sp, #0
 8002b5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b5c:	f107 0314 	add.w	r3, r7, #20
 8002b60:	2200      	movs	r2, #0
 8002b62:	601a      	str	r2, [r3, #0]
 8002b64:	605a      	str	r2, [r3, #4]
 8002b66:	609a      	str	r2, [r3, #8]
 8002b68:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b72:	d118      	bne.n	8002ba6 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b74:	4b25      	ldr	r3, [pc, #148]	@ (8002c0c <HAL_TIM_MspPostInit+0xb8>)
 8002b76:	699b      	ldr	r3, [r3, #24]
 8002b78:	4a24      	ldr	r2, [pc, #144]	@ (8002c0c <HAL_TIM_MspPostInit+0xb8>)
 8002b7a:	f043 0304 	orr.w	r3, r3, #4
 8002b7e:	6193      	str	r3, [r2, #24]
 8002b80:	4b22      	ldr	r3, [pc, #136]	@ (8002c0c <HAL_TIM_MspPostInit+0xb8>)
 8002b82:	699b      	ldr	r3, [r3, #24]
 8002b84:	f003 0304 	and.w	r3, r3, #4
 8002b88:	613b      	str	r3, [r7, #16]
 8002b8a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b8c:	2301      	movs	r3, #1
 8002b8e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b90:	2302      	movs	r3, #2
 8002b92:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b94:	2302      	movs	r3, #2
 8002b96:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b98:	f107 0314 	add.w	r3, r7, #20
 8002b9c:	4619      	mov	r1, r3
 8002b9e:	481c      	ldr	r0, [pc, #112]	@ (8002c10 <HAL_TIM_MspPostInit+0xbc>)
 8002ba0:	f000 fa12 	bl	8002fc8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ba4:	e02e      	b.n	8002c04 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8002ba6:	687b      	ldr	r3, [r7, #4]
 8002ba8:	681b      	ldr	r3, [r3, #0]
 8002baa:	4a1a      	ldr	r2, [pc, #104]	@ (8002c14 <HAL_TIM_MspPostInit+0xc0>)
 8002bac:	4293      	cmp	r3, r2
 8002bae:	d129      	bne.n	8002c04 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002bb0:	4b16      	ldr	r3, [pc, #88]	@ (8002c0c <HAL_TIM_MspPostInit+0xb8>)
 8002bb2:	699b      	ldr	r3, [r3, #24]
 8002bb4:	4a15      	ldr	r2, [pc, #84]	@ (8002c0c <HAL_TIM_MspPostInit+0xb8>)
 8002bb6:	f043 0310 	orr.w	r3, r3, #16
 8002bba:	6193      	str	r3, [r2, #24]
 8002bbc:	4b13      	ldr	r3, [pc, #76]	@ (8002c0c <HAL_TIM_MspPostInit+0xb8>)
 8002bbe:	699b      	ldr	r3, [r3, #24]
 8002bc0:	f003 0310 	and.w	r3, r3, #16
 8002bc4:	60fb      	str	r3, [r7, #12]
 8002bc6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bc8:	2340      	movs	r3, #64	@ 0x40
 8002bca:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bcc:	2302      	movs	r3, #2
 8002bce:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bd0:	2302      	movs	r3, #2
 8002bd2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bd4:	f107 0314 	add.w	r3, r7, #20
 8002bd8:	4619      	mov	r1, r3
 8002bda:	480f      	ldr	r0, [pc, #60]	@ (8002c18 <HAL_TIM_MspPostInit+0xc4>)
 8002bdc:	f000 f9f4 	bl	8002fc8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002be0:	4b0e      	ldr	r3, [pc, #56]	@ (8002c1c <HAL_TIM_MspPostInit+0xc8>)
 8002be2:	685b      	ldr	r3, [r3, #4]
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002bec:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bf4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bf6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bf8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002bfc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bfe:	4a07      	ldr	r2, [pc, #28]	@ (8002c1c <HAL_TIM_MspPostInit+0xc8>)
 8002c00:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c02:	6053      	str	r3, [r2, #4]
}
 8002c04:	bf00      	nop
 8002c06:	3728      	adds	r7, #40	@ 0x28
 8002c08:	46bd      	mov	sp, r7
 8002c0a:	bd80      	pop	{r7, pc}
 8002c0c:	40021000 	.word	0x40021000
 8002c10:	40010800 	.word	0x40010800
 8002c14:	40000400 	.word	0x40000400
 8002c18:	40011000 	.word	0x40011000
 8002c1c:	40010000 	.word	0x40010000

08002c20 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <NMI_Handler+0x4>

08002c28 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <HardFault_Handler+0x4>

08002c30 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c34:	bf00      	nop
 8002c36:	e7fd      	b.n	8002c34 <MemManage_Handler+0x4>

08002c38 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c38:	b480      	push	{r7}
 8002c3a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c3c:	bf00      	nop
 8002c3e:	e7fd      	b.n	8002c3c <BusFault_Handler+0x4>

08002c40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c40:	b480      	push	{r7}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c44:	bf00      	nop
 8002c46:	e7fd      	b.n	8002c44 <UsageFault_Handler+0x4>

08002c48 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c54:	b480      	push	{r7}
 8002c56:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c58:	bf00      	nop
 8002c5a:	46bd      	mov	sp, r7
 8002c5c:	bc80      	pop	{r7}
 8002c5e:	4770      	bx	lr

08002c60 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c60:	b480      	push	{r7}
 8002c62:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c64:	bf00      	nop
 8002c66:	46bd      	mov	sp, r7
 8002c68:	bc80      	pop	{r7}
 8002c6a:	4770      	bx	lr

08002c6c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c6c:	b580      	push	{r7, lr}
 8002c6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c70:	f000 f880 	bl	8002d74 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c74:	bf00      	nop
 8002c76:	bd80      	pop	{r7, pc}

08002c78 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c78:	b580      	push	{r7, lr}
 8002c7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 8002c7c:	f7ff fdfe 	bl	800287c <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c80:	4802      	ldr	r0, [pc, #8]	@ (8002c8c <TIM2_IRQHandler+0x14>)
 8002c82:	f001 f953 	bl	8003f2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c86:	bf00      	nop
 8002c88:	bd80      	pop	{r7, pc}
 8002c8a:	bf00      	nop
 8002c8c:	20000238 	.word	0x20000238

08002c90 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c90:	b480      	push	{r7}
 8002c92:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c94:	bf00      	nop
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bc80      	pop	{r7}
 8002c9a:	4770      	bx	lr

08002c9c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c9c:	f7ff fff8 	bl	8002c90 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002ca0:	480b      	ldr	r0, [pc, #44]	@ (8002cd0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002ca2:	490c      	ldr	r1, [pc, #48]	@ (8002cd4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002ca4:	4a0c      	ldr	r2, [pc, #48]	@ (8002cd8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002ca6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002ca8:	e002      	b.n	8002cb0 <LoopCopyDataInit>

08002caa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002caa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002cac:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002cae:	3304      	adds	r3, #4

08002cb0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002cb0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002cb2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002cb4:	d3f9      	bcc.n	8002caa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cb6:	4a09      	ldr	r2, [pc, #36]	@ (8002cdc <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002cb8:	4c09      	ldr	r4, [pc, #36]	@ (8002ce0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cba:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cbc:	e001      	b.n	8002cc2 <LoopFillZerobss>

08002cbe <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cbe:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cc0:	3204      	adds	r2, #4

08002cc2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cc2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cc4:	d3fb      	bcc.n	8002cbe <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cc6:	f001 ff0b 	bl	8004ae0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cca:	f7fe fc31 	bl	8001530 <main>
  bx lr
 8002cce:	4770      	bx	lr
  ldr r0, =_sdata
 8002cd0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cd4:	200000fc 	.word	0x200000fc
  ldr r2, =_sidata
 8002cd8:	080061d8 	.word	0x080061d8
  ldr r2, =_sbss
 8002cdc:	20000100 	.word	0x20000100
  ldr r4, =_ebss
 8002ce0:	200012e8 	.word	0x200012e8

08002ce4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ce4:	e7fe      	b.n	8002ce4 <ADC1_2_IRQHandler>
	...

08002ce8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002ce8:	b580      	push	{r7, lr}
 8002cea:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cec:	4b08      	ldr	r3, [pc, #32]	@ (8002d10 <HAL_Init+0x28>)
 8002cee:	681b      	ldr	r3, [r3, #0]
 8002cf0:	4a07      	ldr	r2, [pc, #28]	@ (8002d10 <HAL_Init+0x28>)
 8002cf2:	f043 0310 	orr.w	r3, r3, #16
 8002cf6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002cf8:	2003      	movs	r0, #3
 8002cfa:	f000 f923 	bl	8002f44 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002cfe:	200f      	movs	r0, #15
 8002d00:	f000 f808 	bl	8002d14 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d04:	f7ff fe7e 	bl	8002a04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d08:	2300      	movs	r3, #0
}
 8002d0a:	4618      	mov	r0, r3
 8002d0c:	bd80      	pop	{r7, pc}
 8002d0e:	bf00      	nop
 8002d10:	40022000 	.word	0x40022000

08002d14 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d14:	b580      	push	{r7, lr}
 8002d16:	b082      	sub	sp, #8
 8002d18:	af00      	add	r7, sp, #0
 8002d1a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d1c:	4b12      	ldr	r3, [pc, #72]	@ (8002d68 <HAL_InitTick+0x54>)
 8002d1e:	681a      	ldr	r2, [r3, #0]
 8002d20:	4b12      	ldr	r3, [pc, #72]	@ (8002d6c <HAL_InitTick+0x58>)
 8002d22:	781b      	ldrb	r3, [r3, #0]
 8002d24:	4619      	mov	r1, r3
 8002d26:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d2a:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d2e:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d32:	4618      	mov	r0, r3
 8002d34:	f000 f93b 	bl	8002fae <HAL_SYSTICK_Config>
 8002d38:	4603      	mov	r3, r0
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	d001      	beq.n	8002d42 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d3e:	2301      	movs	r3, #1
 8002d40:	e00e      	b.n	8002d60 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	2b0f      	cmp	r3, #15
 8002d46:	d80a      	bhi.n	8002d5e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d48:	2200      	movs	r2, #0
 8002d4a:	6879      	ldr	r1, [r7, #4]
 8002d4c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d50:	f000 f903 	bl	8002f5a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d54:	4a06      	ldr	r2, [pc, #24]	@ (8002d70 <HAL_InitTick+0x5c>)
 8002d56:	687b      	ldr	r3, [r7, #4]
 8002d58:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	e000      	b.n	8002d60 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d5e:	2301      	movs	r3, #1
}
 8002d60:	4618      	mov	r0, r3
 8002d62:	3708      	adds	r7, #8
 8002d64:	46bd      	mov	sp, r7
 8002d66:	bd80      	pop	{r7, pc}
 8002d68:	200000f0 	.word	0x200000f0
 8002d6c:	200000f8 	.word	0x200000f8
 8002d70:	200000f4 	.word	0x200000f4

08002d74 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d74:	b480      	push	{r7}
 8002d76:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d78:	4b05      	ldr	r3, [pc, #20]	@ (8002d90 <HAL_IncTick+0x1c>)
 8002d7a:	781b      	ldrb	r3, [r3, #0]
 8002d7c:	461a      	mov	r2, r3
 8002d7e:	4b05      	ldr	r3, [pc, #20]	@ (8002d94 <HAL_IncTick+0x20>)
 8002d80:	681b      	ldr	r3, [r3, #0]
 8002d82:	4413      	add	r3, r2
 8002d84:	4a03      	ldr	r2, [pc, #12]	@ (8002d94 <HAL_IncTick+0x20>)
 8002d86:	6013      	str	r3, [r2, #0]
}
 8002d88:	bf00      	nop
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	200000f8 	.word	0x200000f8
 8002d94:	200012e4 	.word	0x200012e4

08002d98 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d98:	b480      	push	{r7}
 8002d9a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d9c:	4b02      	ldr	r3, [pc, #8]	@ (8002da8 <HAL_GetTick+0x10>)
 8002d9e:	681b      	ldr	r3, [r3, #0]
}
 8002da0:	4618      	mov	r0, r3
 8002da2:	46bd      	mov	sp, r7
 8002da4:	bc80      	pop	{r7}
 8002da6:	4770      	bx	lr
 8002da8:	200012e4 	.word	0x200012e4

08002dac <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002dac:	b480      	push	{r7}
 8002dae:	b085      	sub	sp, #20
 8002db0:	af00      	add	r7, sp, #0
 8002db2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	f003 0307 	and.w	r3, r3, #7
 8002dba:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002dbc:	4b0c      	ldr	r3, [pc, #48]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002dbe:	68db      	ldr	r3, [r3, #12]
 8002dc0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002dc2:	68ba      	ldr	r2, [r7, #8]
 8002dc4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002dc8:	4013      	ands	r3, r2
 8002dca:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002dd0:	68bb      	ldr	r3, [r7, #8]
 8002dd2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dd4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dd8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002ddc:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dde:	4a04      	ldr	r2, [pc, #16]	@ (8002df0 <__NVIC_SetPriorityGrouping+0x44>)
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	60d3      	str	r3, [r2, #12]
}
 8002de4:	bf00      	nop
 8002de6:	3714      	adds	r7, #20
 8002de8:	46bd      	mov	sp, r7
 8002dea:	bc80      	pop	{r7}
 8002dec:	4770      	bx	lr
 8002dee:	bf00      	nop
 8002df0:	e000ed00 	.word	0xe000ed00

08002df4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002df4:	b480      	push	{r7}
 8002df6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002df8:	4b04      	ldr	r3, [pc, #16]	@ (8002e0c <__NVIC_GetPriorityGrouping+0x18>)
 8002dfa:	68db      	ldr	r3, [r3, #12]
 8002dfc:	0a1b      	lsrs	r3, r3, #8
 8002dfe:	f003 0307 	and.w	r3, r3, #7
}
 8002e02:	4618      	mov	r0, r3
 8002e04:	46bd      	mov	sp, r7
 8002e06:	bc80      	pop	{r7}
 8002e08:	4770      	bx	lr
 8002e0a:	bf00      	nop
 8002e0c:	e000ed00 	.word	0xe000ed00

08002e10 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e10:	b480      	push	{r7}
 8002e12:	b083      	sub	sp, #12
 8002e14:	af00      	add	r7, sp, #0
 8002e16:	4603      	mov	r3, r0
 8002e18:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e1a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e1e:	2b00      	cmp	r3, #0
 8002e20:	db0b      	blt.n	8002e3a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e22:	79fb      	ldrb	r3, [r7, #7]
 8002e24:	f003 021f 	and.w	r2, r3, #31
 8002e28:	4906      	ldr	r1, [pc, #24]	@ (8002e44 <__NVIC_EnableIRQ+0x34>)
 8002e2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e2e:	095b      	lsrs	r3, r3, #5
 8002e30:	2001      	movs	r0, #1
 8002e32:	fa00 f202 	lsl.w	r2, r0, r2
 8002e36:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e3a:	bf00      	nop
 8002e3c:	370c      	adds	r7, #12
 8002e3e:	46bd      	mov	sp, r7
 8002e40:	bc80      	pop	{r7}
 8002e42:	4770      	bx	lr
 8002e44:	e000e100 	.word	0xe000e100

08002e48 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e48:	b480      	push	{r7}
 8002e4a:	b083      	sub	sp, #12
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	4603      	mov	r3, r0
 8002e50:	6039      	str	r1, [r7, #0]
 8002e52:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e54:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	db0a      	blt.n	8002e72 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5c:	683b      	ldr	r3, [r7, #0]
 8002e5e:	b2da      	uxtb	r2, r3
 8002e60:	490c      	ldr	r1, [pc, #48]	@ (8002e94 <__NVIC_SetPriority+0x4c>)
 8002e62:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e66:	0112      	lsls	r2, r2, #4
 8002e68:	b2d2      	uxtb	r2, r2
 8002e6a:	440b      	add	r3, r1
 8002e6c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e70:	e00a      	b.n	8002e88 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	b2da      	uxtb	r2, r3
 8002e76:	4908      	ldr	r1, [pc, #32]	@ (8002e98 <__NVIC_SetPriority+0x50>)
 8002e78:	79fb      	ldrb	r3, [r7, #7]
 8002e7a:	f003 030f 	and.w	r3, r3, #15
 8002e7e:	3b04      	subs	r3, #4
 8002e80:	0112      	lsls	r2, r2, #4
 8002e82:	b2d2      	uxtb	r2, r2
 8002e84:	440b      	add	r3, r1
 8002e86:	761a      	strb	r2, [r3, #24]
}
 8002e88:	bf00      	nop
 8002e8a:	370c      	adds	r7, #12
 8002e8c:	46bd      	mov	sp, r7
 8002e8e:	bc80      	pop	{r7}
 8002e90:	4770      	bx	lr
 8002e92:	bf00      	nop
 8002e94:	e000e100 	.word	0xe000e100
 8002e98:	e000ed00 	.word	0xe000ed00

08002e9c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e9c:	b480      	push	{r7}
 8002e9e:	b089      	sub	sp, #36	@ 0x24
 8002ea0:	af00      	add	r7, sp, #0
 8002ea2:	60f8      	str	r0, [r7, #12]
 8002ea4:	60b9      	str	r1, [r7, #8]
 8002ea6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002ea8:	68fb      	ldr	r3, [r7, #12]
 8002eaa:	f003 0307 	and.w	r3, r3, #7
 8002eae:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002eb0:	69fb      	ldr	r3, [r7, #28]
 8002eb2:	f1c3 0307 	rsb	r3, r3, #7
 8002eb6:	2b04      	cmp	r3, #4
 8002eb8:	bf28      	it	cs
 8002eba:	2304      	movcs	r3, #4
 8002ebc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ebe:	69fb      	ldr	r3, [r7, #28]
 8002ec0:	3304      	adds	r3, #4
 8002ec2:	2b06      	cmp	r3, #6
 8002ec4:	d902      	bls.n	8002ecc <NVIC_EncodePriority+0x30>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	3b03      	subs	r3, #3
 8002eca:	e000      	b.n	8002ece <NVIC_EncodePriority+0x32>
 8002ecc:	2300      	movs	r3, #0
 8002ece:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ed0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ed4:	69bb      	ldr	r3, [r7, #24]
 8002ed6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eda:	43da      	mvns	r2, r3
 8002edc:	68bb      	ldr	r3, [r7, #8]
 8002ede:	401a      	ands	r2, r3
 8002ee0:	697b      	ldr	r3, [r7, #20]
 8002ee2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ee4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ee8:	697b      	ldr	r3, [r7, #20]
 8002eea:	fa01 f303 	lsl.w	r3, r1, r3
 8002eee:	43d9      	mvns	r1, r3
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ef4:	4313      	orrs	r3, r2
         );
}
 8002ef6:	4618      	mov	r0, r3
 8002ef8:	3724      	adds	r7, #36	@ 0x24
 8002efa:	46bd      	mov	sp, r7
 8002efc:	bc80      	pop	{r7}
 8002efe:	4770      	bx	lr

08002f00 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002f00:	b580      	push	{r7, lr}
 8002f02:	b082      	sub	sp, #8
 8002f04:	af00      	add	r7, sp, #0
 8002f06:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	3b01      	subs	r3, #1
 8002f0c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002f10:	d301      	bcc.n	8002f16 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002f12:	2301      	movs	r3, #1
 8002f14:	e00f      	b.n	8002f36 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002f16:	4a0a      	ldr	r2, [pc, #40]	@ (8002f40 <SysTick_Config+0x40>)
 8002f18:	687b      	ldr	r3, [r7, #4]
 8002f1a:	3b01      	subs	r3, #1
 8002f1c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f1e:	210f      	movs	r1, #15
 8002f20:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f24:	f7ff ff90 	bl	8002e48 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f28:	4b05      	ldr	r3, [pc, #20]	@ (8002f40 <SysTick_Config+0x40>)
 8002f2a:	2200      	movs	r2, #0
 8002f2c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f2e:	4b04      	ldr	r3, [pc, #16]	@ (8002f40 <SysTick_Config+0x40>)
 8002f30:	2207      	movs	r2, #7
 8002f32:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f34:	2300      	movs	r3, #0
}
 8002f36:	4618      	mov	r0, r3
 8002f38:	3708      	adds	r7, #8
 8002f3a:	46bd      	mov	sp, r7
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	e000e010 	.word	0xe000e010

08002f44 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	b082      	sub	sp, #8
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f4c:	6878      	ldr	r0, [r7, #4]
 8002f4e:	f7ff ff2d 	bl	8002dac <__NVIC_SetPriorityGrouping>
}
 8002f52:	bf00      	nop
 8002f54:	3708      	adds	r7, #8
 8002f56:	46bd      	mov	sp, r7
 8002f58:	bd80      	pop	{r7, pc}

08002f5a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f5a:	b580      	push	{r7, lr}
 8002f5c:	b086      	sub	sp, #24
 8002f5e:	af00      	add	r7, sp, #0
 8002f60:	4603      	mov	r3, r0
 8002f62:	60b9      	str	r1, [r7, #8]
 8002f64:	607a      	str	r2, [r7, #4]
 8002f66:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f68:	2300      	movs	r3, #0
 8002f6a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f6c:	f7ff ff42 	bl	8002df4 <__NVIC_GetPriorityGrouping>
 8002f70:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f72:	687a      	ldr	r2, [r7, #4]
 8002f74:	68b9      	ldr	r1, [r7, #8]
 8002f76:	6978      	ldr	r0, [r7, #20]
 8002f78:	f7ff ff90 	bl	8002e9c <NVIC_EncodePriority>
 8002f7c:	4602      	mov	r2, r0
 8002f7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f82:	4611      	mov	r1, r2
 8002f84:	4618      	mov	r0, r3
 8002f86:	f7ff ff5f 	bl	8002e48 <__NVIC_SetPriority>
}
 8002f8a:	bf00      	nop
 8002f8c:	3718      	adds	r7, #24
 8002f8e:	46bd      	mov	sp, r7
 8002f90:	bd80      	pop	{r7, pc}

08002f92 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f92:	b580      	push	{r7, lr}
 8002f94:	b082      	sub	sp, #8
 8002f96:	af00      	add	r7, sp, #0
 8002f98:	4603      	mov	r3, r0
 8002f9a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002fa0:	4618      	mov	r0, r3
 8002fa2:	f7ff ff35 	bl	8002e10 <__NVIC_EnableIRQ>
}
 8002fa6:	bf00      	nop
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}

08002fae <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002fae:	b580      	push	{r7, lr}
 8002fb0:	b082      	sub	sp, #8
 8002fb2:	af00      	add	r7, sp, #0
 8002fb4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002fb6:	6878      	ldr	r0, [r7, #4]
 8002fb8:	f7ff ffa2 	bl	8002f00 <SysTick_Config>
 8002fbc:	4603      	mov	r3, r0
}
 8002fbe:	4618      	mov	r0, r3
 8002fc0:	3708      	adds	r7, #8
 8002fc2:	46bd      	mov	sp, r7
 8002fc4:	bd80      	pop	{r7, pc}
	...

08002fc8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fc8:	b480      	push	{r7}
 8002fca:	b08b      	sub	sp, #44	@ 0x2c
 8002fcc:	af00      	add	r7, sp, #0
 8002fce:	6078      	str	r0, [r7, #4]
 8002fd0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fd2:	2300      	movs	r3, #0
 8002fd4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fd6:	2300      	movs	r3, #0
 8002fd8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fda:	e169      	b.n	80032b0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fdc:	2201      	movs	r2, #1
 8002fde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fe6:	683b      	ldr	r3, [r7, #0]
 8002fe8:	681b      	ldr	r3, [r3, #0]
 8002fea:	69fa      	ldr	r2, [r7, #28]
 8002fec:	4013      	ands	r3, r2
 8002fee:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ff0:	69ba      	ldr	r2, [r7, #24]
 8002ff2:	69fb      	ldr	r3, [r7, #28]
 8002ff4:	429a      	cmp	r2, r3
 8002ff6:	f040 8158 	bne.w	80032aa <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002ffa:	683b      	ldr	r3, [r7, #0]
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	4a9a      	ldr	r2, [pc, #616]	@ (8003268 <HAL_GPIO_Init+0x2a0>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d05e      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003004:	4a98      	ldr	r2, [pc, #608]	@ (8003268 <HAL_GPIO_Init+0x2a0>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d875      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800300a:	4a98      	ldr	r2, [pc, #608]	@ (800326c <HAL_GPIO_Init+0x2a4>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d058      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003010:	4a96      	ldr	r2, [pc, #600]	@ (800326c <HAL_GPIO_Init+0x2a4>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d86f      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003016:	4a96      	ldr	r2, [pc, #600]	@ (8003270 <HAL_GPIO_Init+0x2a8>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d052      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 800301c:	4a94      	ldr	r2, [pc, #592]	@ (8003270 <HAL_GPIO_Init+0x2a8>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d869      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003022:	4a94      	ldr	r2, [pc, #592]	@ (8003274 <HAL_GPIO_Init+0x2ac>)
 8003024:	4293      	cmp	r3, r2
 8003026:	d04c      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003028:	4a92      	ldr	r2, [pc, #584]	@ (8003274 <HAL_GPIO_Init+0x2ac>)
 800302a:	4293      	cmp	r3, r2
 800302c:	d863      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800302e:	4a92      	ldr	r2, [pc, #584]	@ (8003278 <HAL_GPIO_Init+0x2b0>)
 8003030:	4293      	cmp	r3, r2
 8003032:	d046      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
 8003034:	4a90      	ldr	r2, [pc, #576]	@ (8003278 <HAL_GPIO_Init+0x2b0>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d85d      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 800303a:	2b12      	cmp	r3, #18
 800303c:	d82a      	bhi.n	8003094 <HAL_GPIO_Init+0xcc>
 800303e:	2b12      	cmp	r3, #18
 8003040:	d859      	bhi.n	80030f6 <HAL_GPIO_Init+0x12e>
 8003042:	a201      	add	r2, pc, #4	@ (adr r2, 8003048 <HAL_GPIO_Init+0x80>)
 8003044:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003048:	080030c3 	.word	0x080030c3
 800304c:	0800309d 	.word	0x0800309d
 8003050:	080030af 	.word	0x080030af
 8003054:	080030f1 	.word	0x080030f1
 8003058:	080030f7 	.word	0x080030f7
 800305c:	080030f7 	.word	0x080030f7
 8003060:	080030f7 	.word	0x080030f7
 8003064:	080030f7 	.word	0x080030f7
 8003068:	080030f7 	.word	0x080030f7
 800306c:	080030f7 	.word	0x080030f7
 8003070:	080030f7 	.word	0x080030f7
 8003074:	080030f7 	.word	0x080030f7
 8003078:	080030f7 	.word	0x080030f7
 800307c:	080030f7 	.word	0x080030f7
 8003080:	080030f7 	.word	0x080030f7
 8003084:	080030f7 	.word	0x080030f7
 8003088:	080030f7 	.word	0x080030f7
 800308c:	080030a5 	.word	0x080030a5
 8003090:	080030b9 	.word	0x080030b9
 8003094:	4a79      	ldr	r2, [pc, #484]	@ (800327c <HAL_GPIO_Init+0x2b4>)
 8003096:	4293      	cmp	r3, r2
 8003098:	d013      	beq.n	80030c2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800309a:	e02c      	b.n	80030f6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800309c:	683b      	ldr	r3, [r7, #0]
 800309e:	68db      	ldr	r3, [r3, #12]
 80030a0:	623b      	str	r3, [r7, #32]
          break;
 80030a2:	e029      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80030a4:	683b      	ldr	r3, [r7, #0]
 80030a6:	68db      	ldr	r3, [r3, #12]
 80030a8:	3304      	adds	r3, #4
 80030aa:	623b      	str	r3, [r7, #32]
          break;
 80030ac:	e024      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80030ae:	683b      	ldr	r3, [r7, #0]
 80030b0:	68db      	ldr	r3, [r3, #12]
 80030b2:	3308      	adds	r3, #8
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e01f      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	68db      	ldr	r3, [r3, #12]
 80030bc:	330c      	adds	r3, #12
 80030be:	623b      	str	r3, [r7, #32]
          break;
 80030c0:	e01a      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030c2:	683b      	ldr	r3, [r7, #0]
 80030c4:	689b      	ldr	r3, [r3, #8]
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d102      	bne.n	80030d0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030ca:	2304      	movs	r3, #4
 80030cc:	623b      	str	r3, [r7, #32]
          break;
 80030ce:	e013      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030d0:	683b      	ldr	r3, [r7, #0]
 80030d2:	689b      	ldr	r3, [r3, #8]
 80030d4:	2b01      	cmp	r3, #1
 80030d6:	d105      	bne.n	80030e4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030d8:	2308      	movs	r3, #8
 80030da:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030dc:	687b      	ldr	r3, [r7, #4]
 80030de:	69fa      	ldr	r2, [r7, #28]
 80030e0:	611a      	str	r2, [r3, #16]
          break;
 80030e2:	e009      	b.n	80030f8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030e4:	2308      	movs	r3, #8
 80030e6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030e8:	687b      	ldr	r3, [r7, #4]
 80030ea:	69fa      	ldr	r2, [r7, #28]
 80030ec:	615a      	str	r2, [r3, #20]
          break;
 80030ee:	e003      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030f0:	2300      	movs	r3, #0
 80030f2:	623b      	str	r3, [r7, #32]
          break;
 80030f4:	e000      	b.n	80030f8 <HAL_GPIO_Init+0x130>
          break;
 80030f6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030f8:	69bb      	ldr	r3, [r7, #24]
 80030fa:	2bff      	cmp	r3, #255	@ 0xff
 80030fc:	d801      	bhi.n	8003102 <HAL_GPIO_Init+0x13a>
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	e001      	b.n	8003106 <HAL_GPIO_Init+0x13e>
 8003102:	687b      	ldr	r3, [r7, #4]
 8003104:	3304      	adds	r3, #4
 8003106:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8003108:	69bb      	ldr	r3, [r7, #24]
 800310a:	2bff      	cmp	r3, #255	@ 0xff
 800310c:	d802      	bhi.n	8003114 <HAL_GPIO_Init+0x14c>
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	009b      	lsls	r3, r3, #2
 8003112:	e002      	b.n	800311a <HAL_GPIO_Init+0x152>
 8003114:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003116:	3b08      	subs	r3, #8
 8003118:	009b      	lsls	r3, r3, #2
 800311a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800311c:	697b      	ldr	r3, [r7, #20]
 800311e:	681a      	ldr	r2, [r3, #0]
 8003120:	210f      	movs	r1, #15
 8003122:	693b      	ldr	r3, [r7, #16]
 8003124:	fa01 f303 	lsl.w	r3, r1, r3
 8003128:	43db      	mvns	r3, r3
 800312a:	401a      	ands	r2, r3
 800312c:	6a39      	ldr	r1, [r7, #32]
 800312e:	693b      	ldr	r3, [r7, #16]
 8003130:	fa01 f303 	lsl.w	r3, r1, r3
 8003134:	431a      	orrs	r2, r3
 8003136:	697b      	ldr	r3, [r7, #20]
 8003138:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800313a:	683b      	ldr	r3, [r7, #0]
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	f000 80b1 	beq.w	80032aa <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003148:	4b4d      	ldr	r3, [pc, #308]	@ (8003280 <HAL_GPIO_Init+0x2b8>)
 800314a:	699b      	ldr	r3, [r3, #24]
 800314c:	4a4c      	ldr	r2, [pc, #304]	@ (8003280 <HAL_GPIO_Init+0x2b8>)
 800314e:	f043 0301 	orr.w	r3, r3, #1
 8003152:	6193      	str	r3, [r2, #24]
 8003154:	4b4a      	ldr	r3, [pc, #296]	@ (8003280 <HAL_GPIO_Init+0x2b8>)
 8003156:	699b      	ldr	r3, [r3, #24]
 8003158:	f003 0301 	and.w	r3, r3, #1
 800315c:	60bb      	str	r3, [r7, #8]
 800315e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003160:	4a48      	ldr	r2, [pc, #288]	@ (8003284 <HAL_GPIO_Init+0x2bc>)
 8003162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800316c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800316e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003170:	f003 0303 	and.w	r3, r3, #3
 8003174:	009b      	lsls	r3, r3, #2
 8003176:	220f      	movs	r2, #15
 8003178:	fa02 f303 	lsl.w	r3, r2, r3
 800317c:	43db      	mvns	r3, r3
 800317e:	68fa      	ldr	r2, [r7, #12]
 8003180:	4013      	ands	r3, r2
 8003182:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a40      	ldr	r2, [pc, #256]	@ (8003288 <HAL_GPIO_Init+0x2c0>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d013      	beq.n	80031b4 <HAL_GPIO_Init+0x1ec>
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	4a3f      	ldr	r2, [pc, #252]	@ (800328c <HAL_GPIO_Init+0x2c4>)
 8003190:	4293      	cmp	r3, r2
 8003192:	d00d      	beq.n	80031b0 <HAL_GPIO_Init+0x1e8>
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	4a3e      	ldr	r2, [pc, #248]	@ (8003290 <HAL_GPIO_Init+0x2c8>)
 8003198:	4293      	cmp	r3, r2
 800319a:	d007      	beq.n	80031ac <HAL_GPIO_Init+0x1e4>
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	4a3d      	ldr	r2, [pc, #244]	@ (8003294 <HAL_GPIO_Init+0x2cc>)
 80031a0:	4293      	cmp	r3, r2
 80031a2:	d101      	bne.n	80031a8 <HAL_GPIO_Init+0x1e0>
 80031a4:	2303      	movs	r3, #3
 80031a6:	e006      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031a8:	2304      	movs	r3, #4
 80031aa:	e004      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031ac:	2302      	movs	r3, #2
 80031ae:	e002      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b0:	2301      	movs	r3, #1
 80031b2:	e000      	b.n	80031b6 <HAL_GPIO_Init+0x1ee>
 80031b4:	2300      	movs	r3, #0
 80031b6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031b8:	f002 0203 	and.w	r2, r2, #3
 80031bc:	0092      	lsls	r2, r2, #2
 80031be:	4093      	lsls	r3, r2
 80031c0:	68fa      	ldr	r2, [r7, #12]
 80031c2:	4313      	orrs	r3, r2
 80031c4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031c6:	492f      	ldr	r1, [pc, #188]	@ (8003284 <HAL_GPIO_Init+0x2bc>)
 80031c8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031ca:	089b      	lsrs	r3, r3, #2
 80031cc:	3302      	adds	r3, #2
 80031ce:	68fa      	ldr	r2, [r7, #12]
 80031d0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d4:	683b      	ldr	r3, [r7, #0]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031dc:	2b00      	cmp	r3, #0
 80031de:	d006      	beq.n	80031ee <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031e0:	4b2d      	ldr	r3, [pc, #180]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e2:	689a      	ldr	r2, [r3, #8]
 80031e4:	492c      	ldr	r1, [pc, #176]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 80031e6:	69bb      	ldr	r3, [r7, #24]
 80031e8:	4313      	orrs	r3, r2
 80031ea:	608b      	str	r3, [r1, #8]
 80031ec:	e006      	b.n	80031fc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031ee:	4b2a      	ldr	r3, [pc, #168]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f0:	689a      	ldr	r2, [r3, #8]
 80031f2:	69bb      	ldr	r3, [r7, #24]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	4928      	ldr	r1, [pc, #160]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 80031f8:	4013      	ands	r3, r2
 80031fa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d006      	beq.n	8003216 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8003208:	4b23      	ldr	r3, [pc, #140]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 800320a:	68da      	ldr	r2, [r3, #12]
 800320c:	4922      	ldr	r1, [pc, #136]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 800320e:	69bb      	ldr	r3, [r7, #24]
 8003210:	4313      	orrs	r3, r2
 8003212:	60cb      	str	r3, [r1, #12]
 8003214:	e006      	b.n	8003224 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8003216:	4b20      	ldr	r3, [pc, #128]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 8003218:	68da      	ldr	r2, [r3, #12]
 800321a:	69bb      	ldr	r3, [r7, #24]
 800321c:	43db      	mvns	r3, r3
 800321e:	491e      	ldr	r1, [pc, #120]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 8003220:	4013      	ands	r3, r2
 8003222:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685b      	ldr	r3, [r3, #4]
 8003228:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800322c:	2b00      	cmp	r3, #0
 800322e:	d006      	beq.n	800323e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003230:	4b19      	ldr	r3, [pc, #100]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	4918      	ldr	r1, [pc, #96]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 8003236:	69bb      	ldr	r3, [r7, #24]
 8003238:	4313      	orrs	r3, r2
 800323a:	604b      	str	r3, [r1, #4]
 800323c:	e006      	b.n	800324c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800323e:	4b16      	ldr	r3, [pc, #88]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 8003240:	685a      	ldr	r2, [r3, #4]
 8003242:	69bb      	ldr	r3, [r7, #24]
 8003244:	43db      	mvns	r3, r3
 8003246:	4914      	ldr	r1, [pc, #80]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 8003248:	4013      	ands	r3, r2
 800324a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003254:	2b00      	cmp	r3, #0
 8003256:	d021      	beq.n	800329c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003258:	4b0f      	ldr	r3, [pc, #60]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 800325a:	681a      	ldr	r2, [r3, #0]
 800325c:	490e      	ldr	r1, [pc, #56]	@ (8003298 <HAL_GPIO_Init+0x2d0>)
 800325e:	69bb      	ldr	r3, [r7, #24]
 8003260:	4313      	orrs	r3, r2
 8003262:	600b      	str	r3, [r1, #0]
 8003264:	e021      	b.n	80032aa <HAL_GPIO_Init+0x2e2>
 8003266:	bf00      	nop
 8003268:	10320000 	.word	0x10320000
 800326c:	10310000 	.word	0x10310000
 8003270:	10220000 	.word	0x10220000
 8003274:	10210000 	.word	0x10210000
 8003278:	10120000 	.word	0x10120000
 800327c:	10110000 	.word	0x10110000
 8003280:	40021000 	.word	0x40021000
 8003284:	40010000 	.word	0x40010000
 8003288:	40010800 	.word	0x40010800
 800328c:	40010c00 	.word	0x40010c00
 8003290:	40011000 	.word	0x40011000
 8003294:	40011400 	.word	0x40011400
 8003298:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800329c:	4b0b      	ldr	r3, [pc, #44]	@ (80032cc <HAL_GPIO_Init+0x304>)
 800329e:	681a      	ldr	r2, [r3, #0]
 80032a0:	69bb      	ldr	r3, [r7, #24]
 80032a2:	43db      	mvns	r3, r3
 80032a4:	4909      	ldr	r1, [pc, #36]	@ (80032cc <HAL_GPIO_Init+0x304>)
 80032a6:	4013      	ands	r3, r2
 80032a8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80032aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032ac:	3301      	adds	r3, #1
 80032ae:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80032b0:	683b      	ldr	r3, [r7, #0]
 80032b2:	681a      	ldr	r2, [r3, #0]
 80032b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032b6:	fa22 f303 	lsr.w	r3, r2, r3
 80032ba:	2b00      	cmp	r3, #0
 80032bc:	f47f ae8e 	bne.w	8002fdc <HAL_GPIO_Init+0x14>
  }
}
 80032c0:	bf00      	nop
 80032c2:	bf00      	nop
 80032c4:	372c      	adds	r7, #44	@ 0x2c
 80032c6:	46bd      	mov	sp, r7
 80032c8:	bc80      	pop	{r7}
 80032ca:	4770      	bx	lr
 80032cc:	40010400 	.word	0x40010400

080032d0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032d0:	b480      	push	{r7}
 80032d2:	b085      	sub	sp, #20
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
 80032d8:	460b      	mov	r3, r1
 80032da:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	689a      	ldr	r2, [r3, #8]
 80032e0:	887b      	ldrh	r3, [r7, #2]
 80032e2:	4013      	ands	r3, r2
 80032e4:	2b00      	cmp	r3, #0
 80032e6:	d002      	beq.n	80032ee <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032e8:	2301      	movs	r3, #1
 80032ea:	73fb      	strb	r3, [r7, #15]
 80032ec:	e001      	b.n	80032f2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032ee:	2300      	movs	r3, #0
 80032f0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032f2:	7bfb      	ldrb	r3, [r7, #15]
}
 80032f4:	4618      	mov	r0, r3
 80032f6:	3714      	adds	r7, #20
 80032f8:	46bd      	mov	sp, r7
 80032fa:	bc80      	pop	{r7}
 80032fc:	4770      	bx	lr

080032fe <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032fe:	b480      	push	{r7}
 8003300:	b083      	sub	sp, #12
 8003302:	af00      	add	r7, sp, #0
 8003304:	6078      	str	r0, [r7, #4]
 8003306:	460b      	mov	r3, r1
 8003308:	807b      	strh	r3, [r7, #2]
 800330a:	4613      	mov	r3, r2
 800330c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800330e:	787b      	ldrb	r3, [r7, #1]
 8003310:	2b00      	cmp	r3, #0
 8003312:	d003      	beq.n	800331c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003314:	887a      	ldrh	r2, [r7, #2]
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800331a:	e003      	b.n	8003324 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800331c:	887b      	ldrh	r3, [r7, #2]
 800331e:	041a      	lsls	r2, r3, #16
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	611a      	str	r2, [r3, #16]
}
 8003324:	bf00      	nop
 8003326:	370c      	adds	r7, #12
 8003328:	46bd      	mov	sp, r7
 800332a:	bc80      	pop	{r7}
 800332c:	4770      	bx	lr
	...

08003330 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003330:	b580      	push	{r7, lr}
 8003332:	b086      	sub	sp, #24
 8003334:	af00      	add	r7, sp, #0
 8003336:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003338:	687b      	ldr	r3, [r7, #4]
 800333a:	2b00      	cmp	r3, #0
 800333c:	d101      	bne.n	8003342 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800333e:	2301      	movs	r3, #1
 8003340:	e272      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003342:	687b      	ldr	r3, [r7, #4]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	f003 0301 	and.w	r3, r3, #1
 800334a:	2b00      	cmp	r3, #0
 800334c:	f000 8087 	beq.w	800345e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003350:	4b92      	ldr	r3, [pc, #584]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f003 030c 	and.w	r3, r3, #12
 8003358:	2b04      	cmp	r3, #4
 800335a:	d00c      	beq.n	8003376 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800335c:	4b8f      	ldr	r3, [pc, #572]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 800335e:	685b      	ldr	r3, [r3, #4]
 8003360:	f003 030c 	and.w	r3, r3, #12
 8003364:	2b08      	cmp	r3, #8
 8003366:	d112      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
 8003368:	4b8c      	ldr	r3, [pc, #560]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003370:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003374:	d10b      	bne.n	800338e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003376:	4b89      	ldr	r3, [pc, #548]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d06c      	beq.n	800345c <HAL_RCC_OscConfig+0x12c>
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	685b      	ldr	r3, [r3, #4]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d168      	bne.n	800345c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800338a:	2301      	movs	r3, #1
 800338c:	e24c      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003396:	d106      	bne.n	80033a6 <HAL_RCC_OscConfig+0x76>
 8003398:	4b80      	ldr	r3, [pc, #512]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a7f      	ldr	r2, [pc, #508]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033a2:	6013      	str	r3, [r2, #0]
 80033a4:	e02e      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	685b      	ldr	r3, [r3, #4]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d10c      	bne.n	80033c8 <HAL_RCC_OscConfig+0x98>
 80033ae:	4b7b      	ldr	r3, [pc, #492]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	4a7a      	ldr	r2, [pc, #488]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033b4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033b8:	6013      	str	r3, [r2, #0]
 80033ba:	4b78      	ldr	r3, [pc, #480]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a77      	ldr	r2, [pc, #476]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	e01d      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	685b      	ldr	r3, [r3, #4]
 80033cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033d0:	d10c      	bne.n	80033ec <HAL_RCC_OscConfig+0xbc>
 80033d2:	4b72      	ldr	r3, [pc, #456]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	4a71      	ldr	r2, [pc, #452]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033dc:	6013      	str	r3, [r2, #0]
 80033de:	4b6f      	ldr	r3, [pc, #444]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	681b      	ldr	r3, [r3, #0]
 80033e2:	4a6e      	ldr	r2, [pc, #440]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033e8:	6013      	str	r3, [r2, #0]
 80033ea:	e00b      	b.n	8003404 <HAL_RCC_OscConfig+0xd4>
 80033ec:	4b6b      	ldr	r3, [pc, #428]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	4a6a      	ldr	r2, [pc, #424]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033f6:	6013      	str	r3, [r2, #0]
 80033f8:	4b68      	ldr	r3, [pc, #416]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4a67      	ldr	r2, [pc, #412]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80033fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003402:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	2b00      	cmp	r3, #0
 800340a:	d013      	beq.n	8003434 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800340c:	f7ff fcc4 	bl	8002d98 <HAL_GetTick>
 8003410:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003412:	e008      	b.n	8003426 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003414:	f7ff fcc0 	bl	8002d98 <HAL_GetTick>
 8003418:	4602      	mov	r2, r0
 800341a:	693b      	ldr	r3, [r7, #16]
 800341c:	1ad3      	subs	r3, r2, r3
 800341e:	2b64      	cmp	r3, #100	@ 0x64
 8003420:	d901      	bls.n	8003426 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003422:	2303      	movs	r3, #3
 8003424:	e200      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003426:	4b5d      	ldr	r3, [pc, #372]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d0f0      	beq.n	8003414 <HAL_RCC_OscConfig+0xe4>
 8003432:	e014      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003434:	f7ff fcb0 	bl	8002d98 <HAL_GetTick>
 8003438:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800343a:	e008      	b.n	800344e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800343c:	f7ff fcac 	bl	8002d98 <HAL_GetTick>
 8003440:	4602      	mov	r2, r0
 8003442:	693b      	ldr	r3, [r7, #16]
 8003444:	1ad3      	subs	r3, r2, r3
 8003446:	2b64      	cmp	r3, #100	@ 0x64
 8003448:	d901      	bls.n	800344e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800344a:	2303      	movs	r3, #3
 800344c:	e1ec      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800344e:	4b53      	ldr	r3, [pc, #332]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d1f0      	bne.n	800343c <HAL_RCC_OscConfig+0x10c>
 800345a:	e000      	b.n	800345e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800345c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	f003 0302 	and.w	r3, r3, #2
 8003466:	2b00      	cmp	r3, #0
 8003468:	d063      	beq.n	8003532 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800346a:	4b4c      	ldr	r3, [pc, #304]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f003 030c 	and.w	r3, r3, #12
 8003472:	2b00      	cmp	r3, #0
 8003474:	d00b      	beq.n	800348e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003476:	4b49      	ldr	r3, [pc, #292]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003478:	685b      	ldr	r3, [r3, #4]
 800347a:	f003 030c 	and.w	r3, r3, #12
 800347e:	2b08      	cmp	r3, #8
 8003480:	d11c      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
 8003482:	4b46      	ldr	r3, [pc, #280]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800348a:	2b00      	cmp	r3, #0
 800348c:	d116      	bne.n	80034bc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800348e:	4b43      	ldr	r3, [pc, #268]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f003 0302 	and.w	r3, r3, #2
 8003496:	2b00      	cmp	r3, #0
 8003498:	d005      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	691b      	ldr	r3, [r3, #16]
 800349e:	2b01      	cmp	r3, #1
 80034a0:	d001      	beq.n	80034a6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80034a2:	2301      	movs	r3, #1
 80034a4:	e1c0      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034a6:	4b3d      	ldr	r3, [pc, #244]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034ae:	687b      	ldr	r3, [r7, #4]
 80034b0:	695b      	ldr	r3, [r3, #20]
 80034b2:	00db      	lsls	r3, r3, #3
 80034b4:	4939      	ldr	r1, [pc, #228]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80034b6:	4313      	orrs	r3, r2
 80034b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034ba:	e03a      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034bc:	687b      	ldr	r3, [r7, #4]
 80034be:	691b      	ldr	r3, [r3, #16]
 80034c0:	2b00      	cmp	r3, #0
 80034c2:	d020      	beq.n	8003506 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034c4:	4b36      	ldr	r3, [pc, #216]	@ (80035a0 <HAL_RCC_OscConfig+0x270>)
 80034c6:	2201      	movs	r2, #1
 80034c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ca:	f7ff fc65 	bl	8002d98 <HAL_GetTick>
 80034ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034d0:	e008      	b.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034d2:	f7ff fc61 	bl	8002d98 <HAL_GetTick>
 80034d6:	4602      	mov	r2, r0
 80034d8:	693b      	ldr	r3, [r7, #16]
 80034da:	1ad3      	subs	r3, r2, r3
 80034dc:	2b02      	cmp	r3, #2
 80034de:	d901      	bls.n	80034e4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034e0:	2303      	movs	r3, #3
 80034e2:	e1a1      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034e4:	4b2d      	ldr	r3, [pc, #180]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80034e6:	681b      	ldr	r3, [r3, #0]
 80034e8:	f003 0302 	and.w	r3, r3, #2
 80034ec:	2b00      	cmp	r3, #0
 80034ee:	d0f0      	beq.n	80034d2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034f0:	4b2a      	ldr	r3, [pc, #168]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	695b      	ldr	r3, [r3, #20]
 80034fc:	00db      	lsls	r3, r3, #3
 80034fe:	4927      	ldr	r1, [pc, #156]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003500:	4313      	orrs	r3, r2
 8003502:	600b      	str	r3, [r1, #0]
 8003504:	e015      	b.n	8003532 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003506:	4b26      	ldr	r3, [pc, #152]	@ (80035a0 <HAL_RCC_OscConfig+0x270>)
 8003508:	2200      	movs	r2, #0
 800350a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800350c:	f7ff fc44 	bl	8002d98 <HAL_GetTick>
 8003510:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003512:	e008      	b.n	8003526 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003514:	f7ff fc40 	bl	8002d98 <HAL_GetTick>
 8003518:	4602      	mov	r2, r0
 800351a:	693b      	ldr	r3, [r7, #16]
 800351c:	1ad3      	subs	r3, r2, r3
 800351e:	2b02      	cmp	r3, #2
 8003520:	d901      	bls.n	8003526 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003522:	2303      	movs	r3, #3
 8003524:	e180      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003526:	4b1d      	ldr	r3, [pc, #116]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f003 0302 	and.w	r3, r3, #2
 800352e:	2b00      	cmp	r3, #0
 8003530:	d1f0      	bne.n	8003514 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003532:	687b      	ldr	r3, [r7, #4]
 8003534:	681b      	ldr	r3, [r3, #0]
 8003536:	f003 0308 	and.w	r3, r3, #8
 800353a:	2b00      	cmp	r3, #0
 800353c:	d03a      	beq.n	80035b4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	699b      	ldr	r3, [r3, #24]
 8003542:	2b00      	cmp	r3, #0
 8003544:	d019      	beq.n	800357a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003546:	4b17      	ldr	r3, [pc, #92]	@ (80035a4 <HAL_RCC_OscConfig+0x274>)
 8003548:	2201      	movs	r2, #1
 800354a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800354c:	f7ff fc24 	bl	8002d98 <HAL_GetTick>
 8003550:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003552:	e008      	b.n	8003566 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003554:	f7ff fc20 	bl	8002d98 <HAL_GetTick>
 8003558:	4602      	mov	r2, r0
 800355a:	693b      	ldr	r3, [r7, #16]
 800355c:	1ad3      	subs	r3, r2, r3
 800355e:	2b02      	cmp	r3, #2
 8003560:	d901      	bls.n	8003566 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003562:	2303      	movs	r3, #3
 8003564:	e160      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003566:	4b0d      	ldr	r3, [pc, #52]	@ (800359c <HAL_RCC_OscConfig+0x26c>)
 8003568:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800356a:	f003 0302 	and.w	r3, r3, #2
 800356e:	2b00      	cmp	r3, #0
 8003570:	d0f0      	beq.n	8003554 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003572:	2001      	movs	r0, #1
 8003574:	f000 fa9c 	bl	8003ab0 <RCC_Delay>
 8003578:	e01c      	b.n	80035b4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800357a:	4b0a      	ldr	r3, [pc, #40]	@ (80035a4 <HAL_RCC_OscConfig+0x274>)
 800357c:	2200      	movs	r2, #0
 800357e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003580:	f7ff fc0a 	bl	8002d98 <HAL_GetTick>
 8003584:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003586:	e00f      	b.n	80035a8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003588:	f7ff fc06 	bl	8002d98 <HAL_GetTick>
 800358c:	4602      	mov	r2, r0
 800358e:	693b      	ldr	r3, [r7, #16]
 8003590:	1ad3      	subs	r3, r2, r3
 8003592:	2b02      	cmp	r3, #2
 8003594:	d908      	bls.n	80035a8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003596:	2303      	movs	r3, #3
 8003598:	e146      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
 800359a:	bf00      	nop
 800359c:	40021000 	.word	0x40021000
 80035a0:	42420000 	.word	0x42420000
 80035a4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80035a8:	4b92      	ldr	r3, [pc, #584]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035ac:	f003 0302 	and.w	r3, r3, #2
 80035b0:	2b00      	cmp	r3, #0
 80035b2:	d1e9      	bne.n	8003588 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	f003 0304 	and.w	r3, r3, #4
 80035bc:	2b00      	cmp	r3, #0
 80035be:	f000 80a6 	beq.w	800370e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035c2:	2300      	movs	r3, #0
 80035c4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035c6:	4b8b      	ldr	r3, [pc, #556]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	2b00      	cmp	r3, #0
 80035d0:	d10d      	bne.n	80035ee <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035d2:	4b88      	ldr	r3, [pc, #544]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035d4:	69db      	ldr	r3, [r3, #28]
 80035d6:	4a87      	ldr	r2, [pc, #540]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035dc:	61d3      	str	r3, [r2, #28]
 80035de:	4b85      	ldr	r3, [pc, #532]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80035e0:	69db      	ldr	r3, [r3, #28]
 80035e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035e6:	60bb      	str	r3, [r7, #8]
 80035e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035ea:	2301      	movs	r3, #1
 80035ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ee:	4b82      	ldr	r3, [pc, #520]	@ (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d118      	bne.n	800362c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035fa:	4b7f      	ldr	r3, [pc, #508]	@ (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 80035fc:	681b      	ldr	r3, [r3, #0]
 80035fe:	4a7e      	ldr	r2, [pc, #504]	@ (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 8003600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8003606:	f7ff fbc7 	bl	8002d98 <HAL_GetTick>
 800360a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800360c:	e008      	b.n	8003620 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800360e:	f7ff fbc3 	bl	8002d98 <HAL_GetTick>
 8003612:	4602      	mov	r2, r0
 8003614:	693b      	ldr	r3, [r7, #16]
 8003616:	1ad3      	subs	r3, r2, r3
 8003618:	2b64      	cmp	r3, #100	@ 0x64
 800361a:	d901      	bls.n	8003620 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800361c:	2303      	movs	r3, #3
 800361e:	e103      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003620:	4b75      	ldr	r3, [pc, #468]	@ (80037f8 <HAL_RCC_OscConfig+0x4c8>)
 8003622:	681b      	ldr	r3, [r3, #0]
 8003624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003628:	2b00      	cmp	r3, #0
 800362a:	d0f0      	beq.n	800360e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800362c:	687b      	ldr	r3, [r7, #4]
 800362e:	68db      	ldr	r3, [r3, #12]
 8003630:	2b01      	cmp	r3, #1
 8003632:	d106      	bne.n	8003642 <HAL_RCC_OscConfig+0x312>
 8003634:	4b6f      	ldr	r3, [pc, #444]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003636:	6a1b      	ldr	r3, [r3, #32]
 8003638:	4a6e      	ldr	r2, [pc, #440]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800363a:	f043 0301 	orr.w	r3, r3, #1
 800363e:	6213      	str	r3, [r2, #32]
 8003640:	e02d      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	68db      	ldr	r3, [r3, #12]
 8003646:	2b00      	cmp	r3, #0
 8003648:	d10c      	bne.n	8003664 <HAL_RCC_OscConfig+0x334>
 800364a:	4b6a      	ldr	r3, [pc, #424]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800364c:	6a1b      	ldr	r3, [r3, #32]
 800364e:	4a69      	ldr	r2, [pc, #420]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	f023 0301 	bic.w	r3, r3, #1
 8003654:	6213      	str	r3, [r2, #32]
 8003656:	4b67      	ldr	r3, [pc, #412]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003658:	6a1b      	ldr	r3, [r3, #32]
 800365a:	4a66      	ldr	r2, [pc, #408]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800365c:	f023 0304 	bic.w	r3, r3, #4
 8003660:	6213      	str	r3, [r2, #32]
 8003662:	e01c      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003664:	687b      	ldr	r3, [r7, #4]
 8003666:	68db      	ldr	r3, [r3, #12]
 8003668:	2b05      	cmp	r3, #5
 800366a:	d10c      	bne.n	8003686 <HAL_RCC_OscConfig+0x356>
 800366c:	4b61      	ldr	r3, [pc, #388]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800366e:	6a1b      	ldr	r3, [r3, #32]
 8003670:	4a60      	ldr	r2, [pc, #384]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003672:	f043 0304 	orr.w	r3, r3, #4
 8003676:	6213      	str	r3, [r2, #32]
 8003678:	4b5e      	ldr	r3, [pc, #376]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800367a:	6a1b      	ldr	r3, [r3, #32]
 800367c:	4a5d      	ldr	r2, [pc, #372]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800367e:	f043 0301 	orr.w	r3, r3, #1
 8003682:	6213      	str	r3, [r2, #32]
 8003684:	e00b      	b.n	800369e <HAL_RCC_OscConfig+0x36e>
 8003686:	4b5b      	ldr	r3, [pc, #364]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	4a5a      	ldr	r2, [pc, #360]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800368c:	f023 0301 	bic.w	r3, r3, #1
 8003690:	6213      	str	r3, [r2, #32]
 8003692:	4b58      	ldr	r3, [pc, #352]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003694:	6a1b      	ldr	r3, [r3, #32]
 8003696:	4a57      	ldr	r2, [pc, #348]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003698:	f023 0304 	bic.w	r3, r3, #4
 800369c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	68db      	ldr	r3, [r3, #12]
 80036a2:	2b00      	cmp	r3, #0
 80036a4:	d015      	beq.n	80036d2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036a6:	f7ff fb77 	bl	8002d98 <HAL_GetTick>
 80036aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	e00a      	b.n	80036c4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036ae:	f7ff fb73 	bl	8002d98 <HAL_GetTick>
 80036b2:	4602      	mov	r2, r0
 80036b4:	693b      	ldr	r3, [r7, #16]
 80036b6:	1ad3      	subs	r3, r2, r3
 80036b8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036bc:	4293      	cmp	r3, r2
 80036be:	d901      	bls.n	80036c4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036c0:	2303      	movs	r3, #3
 80036c2:	e0b1      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036c4:	4b4b      	ldr	r3, [pc, #300]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80036c6:	6a1b      	ldr	r3, [r3, #32]
 80036c8:	f003 0302 	and.w	r3, r3, #2
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d0ee      	beq.n	80036ae <HAL_RCC_OscConfig+0x37e>
 80036d0:	e014      	b.n	80036fc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036d2:	f7ff fb61 	bl	8002d98 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	e00a      	b.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036da:	f7ff fb5d 	bl	8002d98 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036e8:	4293      	cmp	r3, r2
 80036ea:	d901      	bls.n	80036f0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036ec:	2303      	movs	r3, #3
 80036ee:	e09b      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036f0:	4b40      	ldr	r3, [pc, #256]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80036f2:	6a1b      	ldr	r3, [r3, #32]
 80036f4:	f003 0302 	and.w	r3, r3, #2
 80036f8:	2b00      	cmp	r3, #0
 80036fa:	d1ee      	bne.n	80036da <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036fc:	7dfb      	ldrb	r3, [r7, #23]
 80036fe:	2b01      	cmp	r3, #1
 8003700:	d105      	bne.n	800370e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003702:	4b3c      	ldr	r3, [pc, #240]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	69db      	ldr	r3, [r3, #28]
 8003706:	4a3b      	ldr	r2, [pc, #236]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003708:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800370c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800370e:	687b      	ldr	r3, [r7, #4]
 8003710:	69db      	ldr	r3, [r3, #28]
 8003712:	2b00      	cmp	r3, #0
 8003714:	f000 8087 	beq.w	8003826 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003718:	4b36      	ldr	r3, [pc, #216]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800371a:	685b      	ldr	r3, [r3, #4]
 800371c:	f003 030c 	and.w	r3, r3, #12
 8003720:	2b08      	cmp	r3, #8
 8003722:	d061      	beq.n	80037e8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	69db      	ldr	r3, [r3, #28]
 8003728:	2b02      	cmp	r3, #2
 800372a:	d146      	bne.n	80037ba <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800372c:	4b33      	ldr	r3, [pc, #204]	@ (80037fc <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2200      	movs	r2, #0
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7ff fb31 	bl	8002d98 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7ff fb2d 	bl	8002d98 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e06d      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800374c:	4b29      	ldr	r3, [pc, #164]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d1f0      	bne.n	800373a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003760:	d108      	bne.n	8003774 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003762:	4b24      	ldr	r3, [pc, #144]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003764:	685b      	ldr	r3, [r3, #4]
 8003766:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	689b      	ldr	r3, [r3, #8]
 800376e:	4921      	ldr	r1, [pc, #132]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003774:	4b1f      	ldr	r3, [pc, #124]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003776:	685b      	ldr	r3, [r3, #4]
 8003778:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	6a19      	ldr	r1, [r3, #32]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003784:	430b      	orrs	r3, r1
 8003786:	491b      	ldr	r1, [pc, #108]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 8003788:	4313      	orrs	r3, r2
 800378a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800378c:	4b1b      	ldr	r3, [pc, #108]	@ (80037fc <HAL_RCC_OscConfig+0x4cc>)
 800378e:	2201      	movs	r2, #1
 8003790:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003792:	f7ff fb01 	bl	8002d98 <HAL_GetTick>
 8003796:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003798:	e008      	b.n	80037ac <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800379a:	f7ff fafd 	bl	8002d98 <HAL_GetTick>
 800379e:	4602      	mov	r2, r0
 80037a0:	693b      	ldr	r3, [r7, #16]
 80037a2:	1ad3      	subs	r3, r2, r3
 80037a4:	2b02      	cmp	r3, #2
 80037a6:	d901      	bls.n	80037ac <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80037a8:	2303      	movs	r3, #3
 80037aa:	e03d      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80037ac:	4b11      	ldr	r3, [pc, #68]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80037ae:	681b      	ldr	r3, [r3, #0]
 80037b0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037b4:	2b00      	cmp	r3, #0
 80037b6:	d0f0      	beq.n	800379a <HAL_RCC_OscConfig+0x46a>
 80037b8:	e035      	b.n	8003826 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037ba:	4b10      	ldr	r3, [pc, #64]	@ (80037fc <HAL_RCC_OscConfig+0x4cc>)
 80037bc:	2200      	movs	r2, #0
 80037be:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037c0:	f7ff faea 	bl	8002d98 <HAL_GetTick>
 80037c4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c6:	e008      	b.n	80037da <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037c8:	f7ff fae6 	bl	8002d98 <HAL_GetTick>
 80037cc:	4602      	mov	r2, r0
 80037ce:	693b      	ldr	r3, [r7, #16]
 80037d0:	1ad3      	subs	r3, r2, r3
 80037d2:	2b02      	cmp	r3, #2
 80037d4:	d901      	bls.n	80037da <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037d6:	2303      	movs	r3, #3
 80037d8:	e026      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037da:	4b06      	ldr	r3, [pc, #24]	@ (80037f4 <HAL_RCC_OscConfig+0x4c4>)
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037e2:	2b00      	cmp	r3, #0
 80037e4:	d1f0      	bne.n	80037c8 <HAL_RCC_OscConfig+0x498>
 80037e6:	e01e      	b.n	8003826 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	69db      	ldr	r3, [r3, #28]
 80037ec:	2b01      	cmp	r3, #1
 80037ee:	d107      	bne.n	8003800 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e019      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
 80037f4:	40021000 	.word	0x40021000
 80037f8:	40007000 	.word	0x40007000
 80037fc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003800:	4b0b      	ldr	r3, [pc, #44]	@ (8003830 <HAL_RCC_OscConfig+0x500>)
 8003802:	685b      	ldr	r3, [r3, #4]
 8003804:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800380c:	687b      	ldr	r3, [r7, #4]
 800380e:	6a1b      	ldr	r3, [r3, #32]
 8003810:	429a      	cmp	r2, r3
 8003812:	d106      	bne.n	8003822 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800381a:	687b      	ldr	r3, [r7, #4]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800381e:	429a      	cmp	r2, r3
 8003820:	d001      	beq.n	8003826 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003822:	2301      	movs	r3, #1
 8003824:	e000      	b.n	8003828 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003826:	2300      	movs	r3, #0
}
 8003828:	4618      	mov	r0, r3
 800382a:	3718      	adds	r7, #24
 800382c:	46bd      	mov	sp, r7
 800382e:	bd80      	pop	{r7, pc}
 8003830:	40021000 	.word	0x40021000

08003834 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003834:	b580      	push	{r7, lr}
 8003836:	b084      	sub	sp, #16
 8003838:	af00      	add	r7, sp, #0
 800383a:	6078      	str	r0, [r7, #4]
 800383c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	2b00      	cmp	r3, #0
 8003842:	d101      	bne.n	8003848 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003844:	2301      	movs	r3, #1
 8003846:	e0d0      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003848:	4b6a      	ldr	r3, [pc, #424]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f003 0307 	and.w	r3, r3, #7
 8003850:	683a      	ldr	r2, [r7, #0]
 8003852:	429a      	cmp	r2, r3
 8003854:	d910      	bls.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003856:	4b67      	ldr	r3, [pc, #412]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f023 0207 	bic.w	r2, r3, #7
 800385e:	4965      	ldr	r1, [pc, #404]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003860:	683b      	ldr	r3, [r7, #0]
 8003862:	4313      	orrs	r3, r2
 8003864:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003866:	4b63      	ldr	r3, [pc, #396]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0307 	and.w	r3, r3, #7
 800386e:	683a      	ldr	r2, [r7, #0]
 8003870:	429a      	cmp	r2, r3
 8003872:	d001      	beq.n	8003878 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003874:	2301      	movs	r3, #1
 8003876:	e0b8      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f003 0302 	and.w	r3, r3, #2
 8003880:	2b00      	cmp	r3, #0
 8003882:	d020      	beq.n	80038c6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0304 	and.w	r3, r3, #4
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003890:	4b59      	ldr	r3, [pc, #356]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a58      	ldr	r2, [pc, #352]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800389a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	f003 0308 	and.w	r3, r3, #8
 80038a4:	2b00      	cmp	r3, #0
 80038a6:	d005      	beq.n	80038b4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80038a8:	4b53      	ldr	r3, [pc, #332]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	4a52      	ldr	r2, [pc, #328]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038ae:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80038b2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80038b4:	4b50      	ldr	r3, [pc, #320]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	689b      	ldr	r3, [r3, #8]
 80038c0:	494d      	ldr	r1, [pc, #308]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038c2:	4313      	orrs	r3, r2
 80038c4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f003 0301 	and.w	r3, r3, #1
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d040      	beq.n	8003954 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b01      	cmp	r3, #1
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038da:	4b47      	ldr	r3, [pc, #284]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d115      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e07f      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	2b02      	cmp	r3, #2
 80038f0:	d107      	bne.n	8003902 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038f2:	4b41      	ldr	r3, [pc, #260]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80038f4:	681b      	ldr	r3, [r3, #0]
 80038f6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038fa:	2b00      	cmp	r3, #0
 80038fc:	d109      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038fe:	2301      	movs	r3, #1
 8003900:	e073      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003902:	4b3d      	ldr	r3, [pc, #244]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f003 0302 	and.w	r3, r3, #2
 800390a:	2b00      	cmp	r3, #0
 800390c:	d101      	bne.n	8003912 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800390e:	2301      	movs	r3, #1
 8003910:	e06b      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003912:	4b39      	ldr	r3, [pc, #228]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003914:	685b      	ldr	r3, [r3, #4]
 8003916:	f023 0203 	bic.w	r2, r3, #3
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	685b      	ldr	r3, [r3, #4]
 800391e:	4936      	ldr	r1, [pc, #216]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003920:	4313      	orrs	r3, r2
 8003922:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003924:	f7ff fa38 	bl	8002d98 <HAL_GetTick>
 8003928:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	e00a      	b.n	8003942 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800392c:	f7ff fa34 	bl	8002d98 <HAL_GetTick>
 8003930:	4602      	mov	r2, r0
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	1ad3      	subs	r3, r2, r3
 8003936:	f241 3288 	movw	r2, #5000	@ 0x1388
 800393a:	4293      	cmp	r3, r2
 800393c:	d901      	bls.n	8003942 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800393e:	2303      	movs	r3, #3
 8003940:	e053      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003942:	4b2d      	ldr	r3, [pc, #180]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	f003 020c 	and.w	r2, r3, #12
 800394a:	687b      	ldr	r3, [r7, #4]
 800394c:	685b      	ldr	r3, [r3, #4]
 800394e:	009b      	lsls	r3, r3, #2
 8003950:	429a      	cmp	r2, r3
 8003952:	d1eb      	bne.n	800392c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003954:	4b27      	ldr	r3, [pc, #156]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003956:	681b      	ldr	r3, [r3, #0]
 8003958:	f003 0307 	and.w	r3, r3, #7
 800395c:	683a      	ldr	r2, [r7, #0]
 800395e:	429a      	cmp	r2, r3
 8003960:	d210      	bcs.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003962:	4b24      	ldr	r3, [pc, #144]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003964:	681b      	ldr	r3, [r3, #0]
 8003966:	f023 0207 	bic.w	r2, r3, #7
 800396a:	4922      	ldr	r1, [pc, #136]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 800396c:	683b      	ldr	r3, [r7, #0]
 800396e:	4313      	orrs	r3, r2
 8003970:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003972:	4b20      	ldr	r3, [pc, #128]	@ (80039f4 <HAL_RCC_ClockConfig+0x1c0>)
 8003974:	681b      	ldr	r3, [r3, #0]
 8003976:	f003 0307 	and.w	r3, r3, #7
 800397a:	683a      	ldr	r2, [r7, #0]
 800397c:	429a      	cmp	r2, r3
 800397e:	d001      	beq.n	8003984 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003980:	2301      	movs	r3, #1
 8003982:	e032      	b.n	80039ea <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	f003 0304 	and.w	r3, r3, #4
 800398c:	2b00      	cmp	r3, #0
 800398e:	d008      	beq.n	80039a2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003990:	4b19      	ldr	r3, [pc, #100]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 8003992:	685b      	ldr	r3, [r3, #4]
 8003994:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	68db      	ldr	r3, [r3, #12]
 800399c:	4916      	ldr	r1, [pc, #88]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 800399e:	4313      	orrs	r3, r2
 80039a0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	681b      	ldr	r3, [r3, #0]
 80039a6:	f003 0308 	and.w	r3, r3, #8
 80039aa:	2b00      	cmp	r3, #0
 80039ac:	d009      	beq.n	80039c2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80039ae:	4b12      	ldr	r3, [pc, #72]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	691b      	ldr	r3, [r3, #16]
 80039ba:	00db      	lsls	r3, r3, #3
 80039bc:	490e      	ldr	r1, [pc, #56]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039be:	4313      	orrs	r3, r2
 80039c0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039c2:	f000 f821 	bl	8003a08 <HAL_RCC_GetSysClockFreq>
 80039c6:	4602      	mov	r2, r0
 80039c8:	4b0b      	ldr	r3, [pc, #44]	@ (80039f8 <HAL_RCC_ClockConfig+0x1c4>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	091b      	lsrs	r3, r3, #4
 80039ce:	f003 030f 	and.w	r3, r3, #15
 80039d2:	490a      	ldr	r1, [pc, #40]	@ (80039fc <HAL_RCC_ClockConfig+0x1c8>)
 80039d4:	5ccb      	ldrb	r3, [r1, r3]
 80039d6:	fa22 f303 	lsr.w	r3, r2, r3
 80039da:	4a09      	ldr	r2, [pc, #36]	@ (8003a00 <HAL_RCC_ClockConfig+0x1cc>)
 80039dc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039de:	4b09      	ldr	r3, [pc, #36]	@ (8003a04 <HAL_RCC_ClockConfig+0x1d0>)
 80039e0:	681b      	ldr	r3, [r3, #0]
 80039e2:	4618      	mov	r0, r3
 80039e4:	f7ff f996 	bl	8002d14 <HAL_InitTick>

  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	3710      	adds	r7, #16
 80039ee:	46bd      	mov	sp, r7
 80039f0:	bd80      	pop	{r7, pc}
 80039f2:	bf00      	nop
 80039f4:	40022000 	.word	0x40022000
 80039f8:	40021000 	.word	0x40021000
 80039fc:	08005fd0 	.word	0x08005fd0
 8003a00:	200000f0 	.word	0x200000f0
 8003a04:	200000f4 	.word	0x200000f4

08003a08 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003a08:	b480      	push	{r7}
 8003a0a:	b087      	sub	sp, #28
 8003a0c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003a0e:	2300      	movs	r3, #0
 8003a10:	60fb      	str	r3, [r7, #12]
 8003a12:	2300      	movs	r3, #0
 8003a14:	60bb      	str	r3, [r7, #8]
 8003a16:	2300      	movs	r3, #0
 8003a18:	617b      	str	r3, [r7, #20]
 8003a1a:	2300      	movs	r3, #0
 8003a1c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a1e:	2300      	movs	r3, #0
 8003a20:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a22:	4b1e      	ldr	r3, [pc, #120]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a28:	68fb      	ldr	r3, [r7, #12]
 8003a2a:	f003 030c 	and.w	r3, r3, #12
 8003a2e:	2b04      	cmp	r3, #4
 8003a30:	d002      	beq.n	8003a38 <HAL_RCC_GetSysClockFreq+0x30>
 8003a32:	2b08      	cmp	r3, #8
 8003a34:	d003      	beq.n	8003a3e <HAL_RCC_GetSysClockFreq+0x36>
 8003a36:	e027      	b.n	8003a88 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a38:	4b19      	ldr	r3, [pc, #100]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a3a:	613b      	str	r3, [r7, #16]
      break;
 8003a3c:	e027      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a3e:	68fb      	ldr	r3, [r7, #12]
 8003a40:	0c9b      	lsrs	r3, r3, #18
 8003a42:	f003 030f 	and.w	r3, r3, #15
 8003a46:	4a17      	ldr	r2, [pc, #92]	@ (8003aa4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a48:	5cd3      	ldrb	r3, [r2, r3]
 8003a4a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a4c:	68fb      	ldr	r3, [r7, #12]
 8003a4e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a52:	2b00      	cmp	r3, #0
 8003a54:	d010      	beq.n	8003a78 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a56:	4b11      	ldr	r3, [pc, #68]	@ (8003a9c <HAL_RCC_GetSysClockFreq+0x94>)
 8003a58:	685b      	ldr	r3, [r3, #4]
 8003a5a:	0c5b      	lsrs	r3, r3, #17
 8003a5c:	f003 0301 	and.w	r3, r3, #1
 8003a60:	4a11      	ldr	r2, [pc, #68]	@ (8003aa8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a62:	5cd3      	ldrb	r3, [r2, r3]
 8003a64:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	4a0d      	ldr	r2, [pc, #52]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a6a:	fb03 f202 	mul.w	r2, r3, r2
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a74:	617b      	str	r3, [r7, #20]
 8003a76:	e004      	b.n	8003a82 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	4a0c      	ldr	r2, [pc, #48]	@ (8003aac <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a7c:	fb02 f303 	mul.w	r3, r2, r3
 8003a80:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a82:	697b      	ldr	r3, [r7, #20]
 8003a84:	613b      	str	r3, [r7, #16]
      break;
 8003a86:	e002      	b.n	8003a8e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a88:	4b05      	ldr	r3, [pc, #20]	@ (8003aa0 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a8a:	613b      	str	r3, [r7, #16]
      break;
 8003a8c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a8e:	693b      	ldr	r3, [r7, #16]
}
 8003a90:	4618      	mov	r0, r3
 8003a92:	371c      	adds	r7, #28
 8003a94:	46bd      	mov	sp, r7
 8003a96:	bc80      	pop	{r7}
 8003a98:	4770      	bx	lr
 8003a9a:	bf00      	nop
 8003a9c:	40021000 	.word	0x40021000
 8003aa0:	007a1200 	.word	0x007a1200
 8003aa4:	08005fe0 	.word	0x08005fe0
 8003aa8:	08005ff0 	.word	0x08005ff0
 8003aac:	003d0900 	.word	0x003d0900

08003ab0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003ab0:	b480      	push	{r7}
 8003ab2:	b085      	sub	sp, #20
 8003ab4:	af00      	add	r7, sp, #0
 8003ab6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003ab8:	4b0a      	ldr	r3, [pc, #40]	@ (8003ae4 <RCC_Delay+0x34>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	4a0a      	ldr	r2, [pc, #40]	@ (8003ae8 <RCC_Delay+0x38>)
 8003abe:	fba2 2303 	umull	r2, r3, r2, r3
 8003ac2:	0a5b      	lsrs	r3, r3, #9
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	fb02 f303 	mul.w	r3, r2, r3
 8003aca:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003acc:	bf00      	nop
  }
  while (Delay --);
 8003ace:	68fb      	ldr	r3, [r7, #12]
 8003ad0:	1e5a      	subs	r2, r3, #1
 8003ad2:	60fa      	str	r2, [r7, #12]
 8003ad4:	2b00      	cmp	r3, #0
 8003ad6:	d1f9      	bne.n	8003acc <RCC_Delay+0x1c>
}
 8003ad8:	bf00      	nop
 8003ada:	bf00      	nop
 8003adc:	3714      	adds	r7, #20
 8003ade:	46bd      	mov	sp, r7
 8003ae0:	bc80      	pop	{r7}
 8003ae2:	4770      	bx	lr
 8003ae4:	200000f0 	.word	0x200000f0
 8003ae8:	10624dd3 	.word	0x10624dd3

08003aec <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003aec:	b580      	push	{r7, lr}
 8003aee:	b082      	sub	sp, #8
 8003af0:	af00      	add	r7, sp, #0
 8003af2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2b00      	cmp	r3, #0
 8003af8:	d101      	bne.n	8003afe <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003afa:	2301      	movs	r3, #1
 8003afc:	e076      	b.n	8003bec <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003b02:	2b00      	cmp	r3, #0
 8003b04:	d108      	bne.n	8003b18 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	685b      	ldr	r3, [r3, #4]
 8003b0a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003b0e:	d009      	beq.n	8003b24 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	2200      	movs	r2, #0
 8003b14:	61da      	str	r2, [r3, #28]
 8003b16:	e005      	b.n	8003b24 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2200      	movs	r2, #0
 8003b28:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b30:	b2db      	uxtb	r3, r3
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d106      	bne.n	8003b44 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	2200      	movs	r2, #0
 8003b3a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f7fe ff92 	bl	8002a68 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	2202      	movs	r2, #2
 8003b48:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	681b      	ldr	r3, [r3, #0]
 8003b50:	681a      	ldr	r2, [r3, #0]
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b5a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	685b      	ldr	r3, [r3, #4]
 8003b60:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	689b      	ldr	r3, [r3, #8]
 8003b68:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b6c:	431a      	orrs	r2, r3
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	68db      	ldr	r3, [r3, #12]
 8003b72:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b76:	431a      	orrs	r2, r3
 8003b78:	687b      	ldr	r3, [r7, #4]
 8003b7a:	691b      	ldr	r3, [r3, #16]
 8003b7c:	f003 0302 	and.w	r3, r3, #2
 8003b80:	431a      	orrs	r2, r3
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	695b      	ldr	r3, [r3, #20]
 8003b86:	f003 0301 	and.w	r3, r3, #1
 8003b8a:	431a      	orrs	r2, r3
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	699b      	ldr	r3, [r3, #24]
 8003b90:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b94:	431a      	orrs	r2, r3
 8003b96:	687b      	ldr	r3, [r7, #4]
 8003b98:	69db      	ldr	r3, [r3, #28]
 8003b9a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b9e:	431a      	orrs	r2, r3
 8003ba0:	687b      	ldr	r3, [r7, #4]
 8003ba2:	6a1b      	ldr	r3, [r3, #32]
 8003ba4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003ba8:	ea42 0103 	orr.w	r1, r2, r3
 8003bac:	687b      	ldr	r3, [r7, #4]
 8003bae:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003bb0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	430a      	orrs	r2, r1
 8003bba:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003bbc:	687b      	ldr	r3, [r7, #4]
 8003bbe:	699b      	ldr	r3, [r3, #24]
 8003bc0:	0c1a      	lsrs	r2, r3, #16
 8003bc2:	687b      	ldr	r3, [r7, #4]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f002 0204 	and.w	r2, r2, #4
 8003bca:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	69da      	ldr	r2, [r3, #28]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bda:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2200      	movs	r2, #0
 8003be0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2201      	movs	r2, #1
 8003be6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bea:	2300      	movs	r3, #0
}
 8003bec:	4618      	mov	r0, r3
 8003bee:	3708      	adds	r7, #8
 8003bf0:	46bd      	mov	sp, r7
 8003bf2:	bd80      	pop	{r7, pc}

08003bf4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bf4:	b580      	push	{r7, lr}
 8003bf6:	b082      	sub	sp, #8
 8003bf8:	af00      	add	r7, sp, #0
 8003bfa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d101      	bne.n	8003c06 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003c02:	2301      	movs	r3, #1
 8003c04:	e041      	b.n	8003c8a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c0c:	b2db      	uxtb	r3, r3
 8003c0e:	2b00      	cmp	r3, #0
 8003c10:	d106      	bne.n	8003c20 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	2200      	movs	r2, #0
 8003c16:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f7fe ff62 	bl	8002ae4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2202      	movs	r2, #2
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	681a      	ldr	r2, [r3, #0]
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	3304      	adds	r3, #4
 8003c30:	4619      	mov	r1, r3
 8003c32:	4610      	mov	r0, r2
 8003c34:	f000 fc38 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2201      	movs	r2, #1
 8003c74:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	2201      	movs	r2, #1
 8003c84:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c88:	2300      	movs	r3, #0
}
 8003c8a:	4618      	mov	r0, r3
 8003c8c:	3708      	adds	r7, #8
 8003c8e:	46bd      	mov	sp, r7
 8003c90:	bd80      	pop	{r7, pc}
	...

08003c94 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c94:	b480      	push	{r7}
 8003c96:	b085      	sub	sp, #20
 8003c98:	af00      	add	r7, sp, #0
 8003c9a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ca2:	b2db      	uxtb	r3, r3
 8003ca4:	2b01      	cmp	r3, #1
 8003ca6:	d001      	beq.n	8003cac <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003ca8:	2301      	movs	r3, #1
 8003caa:	e03a      	b.n	8003d22 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	2202      	movs	r2, #2
 8003cb0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	681b      	ldr	r3, [r3, #0]
 8003cb8:	68da      	ldr	r2, [r3, #12]
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	f042 0201 	orr.w	r2, r2, #1
 8003cc2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	681b      	ldr	r3, [r3, #0]
 8003cc8:	4a18      	ldr	r2, [pc, #96]	@ (8003d2c <HAL_TIM_Base_Start_IT+0x98>)
 8003cca:	4293      	cmp	r3, r2
 8003ccc:	d00e      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x58>
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cd6:	d009      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x58>
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	4a14      	ldr	r2, [pc, #80]	@ (8003d30 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cde:	4293      	cmp	r3, r2
 8003ce0:	d004      	beq.n	8003cec <HAL_TIM_Base_Start_IT+0x58>
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	4a13      	ldr	r2, [pc, #76]	@ (8003d34 <HAL_TIM_Base_Start_IT+0xa0>)
 8003ce8:	4293      	cmp	r3, r2
 8003cea:	d111      	bne.n	8003d10 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	689b      	ldr	r3, [r3, #8]
 8003cf2:	f003 0307 	and.w	r3, r3, #7
 8003cf6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf8:	68fb      	ldr	r3, [r7, #12]
 8003cfa:	2b06      	cmp	r3, #6
 8003cfc:	d010      	beq.n	8003d20 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	681a      	ldr	r2, [r3, #0]
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	681b      	ldr	r3, [r3, #0]
 8003d08:	f042 0201 	orr.w	r2, r2, #1
 8003d0c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003d0e:	e007      	b.n	8003d20 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	681b      	ldr	r3, [r3, #0]
 8003d14:	681a      	ldr	r2, [r3, #0]
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	681b      	ldr	r3, [r3, #0]
 8003d1a:	f042 0201 	orr.w	r2, r2, #1
 8003d1e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d20:	2300      	movs	r3, #0
}
 8003d22:	4618      	mov	r0, r3
 8003d24:	3714      	adds	r7, #20
 8003d26:	46bd      	mov	sp, r7
 8003d28:	bc80      	pop	{r7}
 8003d2a:	4770      	bx	lr
 8003d2c:	40012c00 	.word	0x40012c00
 8003d30:	40000400 	.word	0x40000400
 8003d34:	40000800 	.word	0x40000800

08003d38 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d38:	b580      	push	{r7, lr}
 8003d3a:	b082      	sub	sp, #8
 8003d3c:	af00      	add	r7, sp, #0
 8003d3e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	2b00      	cmp	r3, #0
 8003d44:	d101      	bne.n	8003d4a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d46:	2301      	movs	r3, #1
 8003d48:	e041      	b.n	8003dce <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d50:	b2db      	uxtb	r3, r3
 8003d52:	2b00      	cmp	r3, #0
 8003d54:	d106      	bne.n	8003d64 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	2200      	movs	r2, #0
 8003d5a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d5e:	6878      	ldr	r0, [r7, #4]
 8003d60:	f000 f839 	bl	8003dd6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2202      	movs	r2, #2
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681a      	ldr	r2, [r3, #0]
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	3304      	adds	r3, #4
 8003d74:	4619      	mov	r1, r3
 8003d76:	4610      	mov	r0, r2
 8003d78:	f000 fb96 	bl	80044a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	2201      	movs	r2, #1
 8003db8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	2201      	movs	r2, #1
 8003dc0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	2201      	movs	r2, #1
 8003dc8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	3708      	adds	r7, #8
 8003dd2:	46bd      	mov	sp, r7
 8003dd4:	bd80      	pop	{r7, pc}

08003dd6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dd6:	b480      	push	{r7}
 8003dd8:	b083      	sub	sp, #12
 8003dda:	af00      	add	r7, sp, #0
 8003ddc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dde:	bf00      	nop
 8003de0:	370c      	adds	r7, #12
 8003de2:	46bd      	mov	sp, r7
 8003de4:	bc80      	pop	{r7}
 8003de6:	4770      	bx	lr

08003de8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003de8:	b580      	push	{r7, lr}
 8003dea:	b084      	sub	sp, #16
 8003dec:	af00      	add	r7, sp, #0
 8003dee:	6078      	str	r0, [r7, #4]
 8003df0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003df2:	683b      	ldr	r3, [r7, #0]
 8003df4:	2b00      	cmp	r3, #0
 8003df6:	d109      	bne.n	8003e0c <HAL_TIM_PWM_Start+0x24>
 8003df8:	687b      	ldr	r3, [r7, #4]
 8003dfa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003dfe:	b2db      	uxtb	r3, r3
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	bf14      	ite	ne
 8003e04:	2301      	movne	r3, #1
 8003e06:	2300      	moveq	r3, #0
 8003e08:	b2db      	uxtb	r3, r3
 8003e0a:	e022      	b.n	8003e52 <HAL_TIM_PWM_Start+0x6a>
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d109      	bne.n	8003e26 <HAL_TIM_PWM_Start+0x3e>
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e18:	b2db      	uxtb	r3, r3
 8003e1a:	2b01      	cmp	r3, #1
 8003e1c:	bf14      	ite	ne
 8003e1e:	2301      	movne	r3, #1
 8003e20:	2300      	moveq	r3, #0
 8003e22:	b2db      	uxtb	r3, r3
 8003e24:	e015      	b.n	8003e52 <HAL_TIM_PWM_Start+0x6a>
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	2b08      	cmp	r3, #8
 8003e2a:	d109      	bne.n	8003e40 <HAL_TIM_PWM_Start+0x58>
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e32:	b2db      	uxtb	r3, r3
 8003e34:	2b01      	cmp	r3, #1
 8003e36:	bf14      	ite	ne
 8003e38:	2301      	movne	r3, #1
 8003e3a:	2300      	moveq	r3, #0
 8003e3c:	b2db      	uxtb	r3, r3
 8003e3e:	e008      	b.n	8003e52 <HAL_TIM_PWM_Start+0x6a>
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e46:	b2db      	uxtb	r3, r3
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	bf14      	ite	ne
 8003e4c:	2301      	movne	r3, #1
 8003e4e:	2300      	moveq	r3, #0
 8003e50:	b2db      	uxtb	r3, r3
 8003e52:	2b00      	cmp	r3, #0
 8003e54:	d001      	beq.n	8003e5a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e56:	2301      	movs	r3, #1
 8003e58:	e05e      	b.n	8003f18 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e5a:	683b      	ldr	r3, [r7, #0]
 8003e5c:	2b00      	cmp	r3, #0
 8003e5e:	d104      	bne.n	8003e6a <HAL_TIM_PWM_Start+0x82>
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	2202      	movs	r2, #2
 8003e64:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e68:	e013      	b.n	8003e92 <HAL_TIM_PWM_Start+0xaa>
 8003e6a:	683b      	ldr	r3, [r7, #0]
 8003e6c:	2b04      	cmp	r3, #4
 8003e6e:	d104      	bne.n	8003e7a <HAL_TIM_PWM_Start+0x92>
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	2202      	movs	r2, #2
 8003e74:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e78:	e00b      	b.n	8003e92 <HAL_TIM_PWM_Start+0xaa>
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	2b08      	cmp	r3, #8
 8003e7e:	d104      	bne.n	8003e8a <HAL_TIM_PWM_Start+0xa2>
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	2202      	movs	r2, #2
 8003e84:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e88:	e003      	b.n	8003e92 <HAL_TIM_PWM_Start+0xaa>
 8003e8a:	687b      	ldr	r3, [r7, #4]
 8003e8c:	2202      	movs	r2, #2
 8003e8e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	2201      	movs	r2, #1
 8003e98:	6839      	ldr	r1, [r7, #0]
 8003e9a:	4618      	mov	r0, r3
 8003e9c:	f000 fd84 	bl	80049a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	4a1e      	ldr	r2, [pc, #120]	@ (8003f20 <HAL_TIM_PWM_Start+0x138>)
 8003ea6:	4293      	cmp	r3, r2
 8003ea8:	d107      	bne.n	8003eba <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003eb8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a18      	ldr	r2, [pc, #96]	@ (8003f20 <HAL_TIM_PWM_Start+0x138>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0xfa>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0xfa>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a14      	ldr	r2, [pc, #80]	@ (8003f24 <HAL_TIM_PWM_Start+0x13c>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0xfa>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a12      	ldr	r2, [pc, #72]	@ (8003f28 <HAL_TIM_PWM_Start+0x140>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d010      	beq.n	8003f16 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e007      	b.n	8003f16 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40012c00 	.word	0x40012c00
 8003f24:	40000400 	.word	0x40000400
 8003f28:	40000800 	.word	0x40000800

08003f2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f2c:	b580      	push	{r7, lr}
 8003f2e:	b082      	sub	sp, #8
 8003f30:	af00      	add	r7, sp, #0
 8003f32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	691b      	ldr	r3, [r3, #16]
 8003f3a:	f003 0302 	and.w	r3, r3, #2
 8003f3e:	2b02      	cmp	r3, #2
 8003f40:	d122      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	68db      	ldr	r3, [r3, #12]
 8003f48:	f003 0302 	and.w	r3, r3, #2
 8003f4c:	2b02      	cmp	r3, #2
 8003f4e:	d11b      	bne.n	8003f88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f50:	687b      	ldr	r3, [r7, #4]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f06f 0202 	mvn.w	r2, #2
 8003f58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f5a:	687b      	ldr	r3, [r7, #4]
 8003f5c:	2201      	movs	r2, #1
 8003f5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	699b      	ldr	r3, [r3, #24]
 8003f66:	f003 0303 	and.w	r3, r3, #3
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d003      	beq.n	8003f76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f6e:	6878      	ldr	r0, [r7, #4]
 8003f70:	f000 fa7f 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8003f74:	e005      	b.n	8003f82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f76:	6878      	ldr	r0, [r7, #4]
 8003f78:	f000 fa72 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f7c:	6878      	ldr	r0, [r7, #4]
 8003f7e:	f000 fa81 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	2200      	movs	r2, #0
 8003f86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	691b      	ldr	r3, [r3, #16]
 8003f8e:	f003 0304 	and.w	r3, r3, #4
 8003f92:	2b04      	cmp	r3, #4
 8003f94:	d122      	bne.n	8003fdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	681b      	ldr	r3, [r3, #0]
 8003f9a:	68db      	ldr	r3, [r3, #12]
 8003f9c:	f003 0304 	and.w	r3, r3, #4
 8003fa0:	2b04      	cmp	r3, #4
 8003fa2:	d11b      	bne.n	8003fdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	f06f 0204 	mvn.w	r2, #4
 8003fac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	2202      	movs	r2, #2
 8003fb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	699b      	ldr	r3, [r3, #24]
 8003fba:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fbe:	2b00      	cmp	r3, #0
 8003fc0:	d003      	beq.n	8003fca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fc2:	6878      	ldr	r0, [r7, #4]
 8003fc4:	f000 fa55 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8003fc8:	e005      	b.n	8003fd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fca:	6878      	ldr	r0, [r7, #4]
 8003fcc:	f000 fa48 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fd0:	6878      	ldr	r0, [r7, #4]
 8003fd2:	f000 fa57 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	2200      	movs	r2, #0
 8003fda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	691b      	ldr	r3, [r3, #16]
 8003fe2:	f003 0308 	and.w	r3, r3, #8
 8003fe6:	2b08      	cmp	r3, #8
 8003fe8:	d122      	bne.n	8004030 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	681b      	ldr	r3, [r3, #0]
 8003fee:	68db      	ldr	r3, [r3, #12]
 8003ff0:	f003 0308 	and.w	r3, r3, #8
 8003ff4:	2b08      	cmp	r3, #8
 8003ff6:	d11b      	bne.n	8004030 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	681b      	ldr	r3, [r3, #0]
 8003ffc:	f06f 0208 	mvn.w	r2, #8
 8004000:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2204      	movs	r2, #4
 8004006:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	69db      	ldr	r3, [r3, #28]
 800400e:	f003 0303 	and.w	r3, r3, #3
 8004012:	2b00      	cmp	r3, #0
 8004014:	d003      	beq.n	800401e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004016:	6878      	ldr	r0, [r7, #4]
 8004018:	f000 fa2b 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 800401c:	e005      	b.n	800402a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800401e:	6878      	ldr	r0, [r7, #4]
 8004020:	f000 fa1e 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004024:	6878      	ldr	r0, [r7, #4]
 8004026:	f000 fa2d 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	2200      	movs	r2, #0
 800402e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004030:	687b      	ldr	r3, [r7, #4]
 8004032:	681b      	ldr	r3, [r3, #0]
 8004034:	691b      	ldr	r3, [r3, #16]
 8004036:	f003 0310 	and.w	r3, r3, #16
 800403a:	2b10      	cmp	r3, #16
 800403c:	d122      	bne.n	8004084 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	68db      	ldr	r3, [r3, #12]
 8004044:	f003 0310 	and.w	r3, r3, #16
 8004048:	2b10      	cmp	r3, #16
 800404a:	d11b      	bne.n	8004084 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	681b      	ldr	r3, [r3, #0]
 8004050:	f06f 0210 	mvn.w	r2, #16
 8004054:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2208      	movs	r2, #8
 800405a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	69db      	ldr	r3, [r3, #28]
 8004062:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004066:	2b00      	cmp	r3, #0
 8004068:	d003      	beq.n	8004072 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800406a:	6878      	ldr	r0, [r7, #4]
 800406c:	f000 fa01 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004070:	e005      	b.n	800407e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004072:	6878      	ldr	r0, [r7, #4]
 8004074:	f000 f9f4 	bl	8004460 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004078:	6878      	ldr	r0, [r7, #4]
 800407a:	f000 fa03 	bl	8004484 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	2200      	movs	r2, #0
 8004082:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004084:	687b      	ldr	r3, [r7, #4]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	691b      	ldr	r3, [r3, #16]
 800408a:	f003 0301 	and.w	r3, r3, #1
 800408e:	2b01      	cmp	r3, #1
 8004090:	d10e      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	681b      	ldr	r3, [r3, #0]
 8004096:	68db      	ldr	r3, [r3, #12]
 8004098:	f003 0301 	and.w	r3, r3, #1
 800409c:	2b01      	cmp	r3, #1
 800409e:	d107      	bne.n	80040b0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	f06f 0201 	mvn.w	r2, #1
 80040a8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040aa:	6878      	ldr	r0, [r7, #4]
 80040ac:	f000 f9cf 	bl	800444e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	691b      	ldr	r3, [r3, #16]
 80040b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040ba:	2b80      	cmp	r3, #128	@ 0x80
 80040bc:	d10e      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	68db      	ldr	r3, [r3, #12]
 80040c4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040c8:	2b80      	cmp	r3, #128	@ 0x80
 80040ca:	d107      	bne.n	80040dc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040cc:	687b      	ldr	r3, [r7, #4]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040d6:	6878      	ldr	r0, [r7, #4]
 80040d8:	f000 fcf1 	bl	8004abe <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	691b      	ldr	r3, [r3, #16]
 80040e2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040e6:	2b40      	cmp	r3, #64	@ 0x40
 80040e8:	d10e      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	68db      	ldr	r3, [r3, #12]
 80040f0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040f4:	2b40      	cmp	r3, #64	@ 0x40
 80040f6:	d107      	bne.n	8004108 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8004100:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004102:	6878      	ldr	r0, [r7, #4]
 8004104:	f000 f9c7 	bl	8004496 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	691b      	ldr	r3, [r3, #16]
 800410e:	f003 0320 	and.w	r3, r3, #32
 8004112:	2b20      	cmp	r3, #32
 8004114:	d10e      	bne.n	8004134 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	68db      	ldr	r3, [r3, #12]
 800411c:	f003 0320 	and.w	r3, r3, #32
 8004120:	2b20      	cmp	r3, #32
 8004122:	d107      	bne.n	8004134 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	f06f 0220 	mvn.w	r2, #32
 800412c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800412e:	6878      	ldr	r0, [r7, #4]
 8004130:	f000 fcbc 	bl	8004aac <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004134:	bf00      	nop
 8004136:	3708      	adds	r7, #8
 8004138:	46bd      	mov	sp, r7
 800413a:	bd80      	pop	{r7, pc}

0800413c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800413c:	b580      	push	{r7, lr}
 800413e:	b086      	sub	sp, #24
 8004140:	af00      	add	r7, sp, #0
 8004142:	60f8      	str	r0, [r7, #12]
 8004144:	60b9      	str	r1, [r7, #8]
 8004146:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004148:	2300      	movs	r3, #0
 800414a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004152:	2b01      	cmp	r3, #1
 8004154:	d101      	bne.n	800415a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004156:	2302      	movs	r3, #2
 8004158:	e0ae      	b.n	80042b8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	2201      	movs	r2, #1
 800415e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	2b0c      	cmp	r3, #12
 8004166:	f200 809f 	bhi.w	80042a8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800416a:	a201      	add	r2, pc, #4	@ (adr r2, 8004170 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800416c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004170:	080041a5 	.word	0x080041a5
 8004174:	080042a9 	.word	0x080042a9
 8004178:	080042a9 	.word	0x080042a9
 800417c:	080042a9 	.word	0x080042a9
 8004180:	080041e5 	.word	0x080041e5
 8004184:	080042a9 	.word	0x080042a9
 8004188:	080042a9 	.word	0x080042a9
 800418c:	080042a9 	.word	0x080042a9
 8004190:	08004227 	.word	0x08004227
 8004194:	080042a9 	.word	0x080042a9
 8004198:	080042a9 	.word	0x080042a9
 800419c:	080042a9 	.word	0x080042a9
 80041a0:	08004267 	.word	0x08004267
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	68b9      	ldr	r1, [r7, #8]
 80041aa:	4618      	mov	r0, r3
 80041ac:	f000 f9de 	bl	800456c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	699a      	ldr	r2, [r3, #24]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0208 	orr.w	r2, r2, #8
 80041be:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f022 0204 	bic.w	r2, r2, #4
 80041ce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	6999      	ldr	r1, [r3, #24]
 80041d6:	68bb      	ldr	r3, [r7, #8]
 80041d8:	691a      	ldr	r2, [r3, #16]
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	681b      	ldr	r3, [r3, #0]
 80041de:	430a      	orrs	r2, r1
 80041e0:	619a      	str	r2, [r3, #24]
      break;
 80041e2:	e064      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041e4:	68fb      	ldr	r3, [r7, #12]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	68b9      	ldr	r1, [r7, #8]
 80041ea:	4618      	mov	r0, r3
 80041ec:	f000 fa24 	bl	8004638 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	699a      	ldr	r2, [r3, #24]
 80041f6:	68fb      	ldr	r3, [r7, #12]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041fe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800420e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	6999      	ldr	r1, [r3, #24]
 8004216:	68bb      	ldr	r3, [r7, #8]
 8004218:	691b      	ldr	r3, [r3, #16]
 800421a:	021a      	lsls	r2, r3, #8
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	681b      	ldr	r3, [r3, #0]
 8004220:	430a      	orrs	r2, r1
 8004222:	619a      	str	r2, [r3, #24]
      break;
 8004224:	e043      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004226:	68fb      	ldr	r3, [r7, #12]
 8004228:	681b      	ldr	r3, [r3, #0]
 800422a:	68b9      	ldr	r1, [r7, #8]
 800422c:	4618      	mov	r0, r3
 800422e:	f000 fa6d 	bl	800470c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69da      	ldr	r2, [r3, #28]
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f042 0208 	orr.w	r2, r2, #8
 8004240:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0204 	bic.w	r2, r2, #4
 8004250:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69d9      	ldr	r1, [r3, #28]
 8004258:	68bb      	ldr	r3, [r7, #8]
 800425a:	691a      	ldr	r2, [r3, #16]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	430a      	orrs	r2, r1
 8004262:	61da      	str	r2, [r3, #28]
      break;
 8004264:	e023      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	681b      	ldr	r3, [r3, #0]
 800426a:	68b9      	ldr	r1, [r7, #8]
 800426c:	4618      	mov	r0, r3
 800426e:	f000 fab7 	bl	80047e0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	69da      	ldr	r2, [r3, #28]
 8004278:	68fb      	ldr	r3, [r7, #12]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004280:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004290:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69d9      	ldr	r1, [r3, #28]
 8004298:	68bb      	ldr	r3, [r7, #8]
 800429a:	691b      	ldr	r3, [r3, #16]
 800429c:	021a      	lsls	r2, r3, #8
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	430a      	orrs	r2, r1
 80042a4:	61da      	str	r2, [r3, #28]
      break;
 80042a6:	e002      	b.n	80042ae <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042a8:	2301      	movs	r3, #1
 80042aa:	75fb      	strb	r3, [r7, #23]
      break;
 80042ac:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	2200      	movs	r2, #0
 80042b2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042b8:	4618      	mov	r0, r3
 80042ba:	3718      	adds	r7, #24
 80042bc:	46bd      	mov	sp, r7
 80042be:	bd80      	pop	{r7, pc}

080042c0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042c0:	b580      	push	{r7, lr}
 80042c2:	b084      	sub	sp, #16
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	6078      	str	r0, [r7, #4]
 80042c8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042ca:	2300      	movs	r3, #0
 80042cc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042d4:	2b01      	cmp	r3, #1
 80042d6:	d101      	bne.n	80042dc <HAL_TIM_ConfigClockSource+0x1c>
 80042d8:	2302      	movs	r3, #2
 80042da:	e0b4      	b.n	8004446 <HAL_TIM_ConfigClockSource+0x186>
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	2201      	movs	r2, #1
 80042e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	2202      	movs	r2, #2
 80042e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	689b      	ldr	r3, [r3, #8]
 80042f2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042f4:	68bb      	ldr	r3, [r7, #8]
 80042f6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042fc:	68bb      	ldr	r3, [r7, #8]
 80042fe:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004302:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	68ba      	ldr	r2, [r7, #8]
 800430a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800430c:	683b      	ldr	r3, [r7, #0]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004314:	d03e      	beq.n	8004394 <HAL_TIM_ConfigClockSource+0xd4>
 8004316:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800431a:	f200 8087 	bhi.w	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800431e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004322:	f000 8086 	beq.w	8004432 <HAL_TIM_ConfigClockSource+0x172>
 8004326:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800432a:	d87f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b70      	cmp	r3, #112	@ 0x70
 800432e:	d01a      	beq.n	8004366 <HAL_TIM_ConfigClockSource+0xa6>
 8004330:	2b70      	cmp	r3, #112	@ 0x70
 8004332:	d87b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b60      	cmp	r3, #96	@ 0x60
 8004336:	d050      	beq.n	80043da <HAL_TIM_ConfigClockSource+0x11a>
 8004338:	2b60      	cmp	r3, #96	@ 0x60
 800433a:	d877      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b50      	cmp	r3, #80	@ 0x50
 800433e:	d03c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0xfa>
 8004340:	2b50      	cmp	r3, #80	@ 0x50
 8004342:	d873      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b40      	cmp	r3, #64	@ 0x40
 8004346:	d058      	beq.n	80043fa <HAL_TIM_ConfigClockSource+0x13a>
 8004348:	2b40      	cmp	r3, #64	@ 0x40
 800434a:	d86f      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b30      	cmp	r3, #48	@ 0x30
 800434e:	d064      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004350:	2b30      	cmp	r3, #48	@ 0x30
 8004352:	d86b      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b20      	cmp	r3, #32
 8004356:	d060      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004358:	2b20      	cmp	r3, #32
 800435a:	d867      	bhi.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b00      	cmp	r3, #0
 800435e:	d05c      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b10      	cmp	r3, #16
 8004362:	d05a      	beq.n	800441a <HAL_TIM_ConfigClockSource+0x15a>
 8004364:	e062      	b.n	800442c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800436a:	683b      	ldr	r3, [r7, #0]
 800436c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800436e:	683b      	ldr	r3, [r7, #0]
 8004370:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	f000 faf8 	bl	800496a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	681b      	ldr	r3, [r3, #0]
 800437e:	689b      	ldr	r3, [r3, #8]
 8004380:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004382:	68bb      	ldr	r3, [r7, #8]
 8004384:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004388:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	68ba      	ldr	r2, [r7, #8]
 8004390:	609a      	str	r2, [r3, #8]
      break;
 8004392:	e04f      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004398:	683b      	ldr	r3, [r7, #0]
 800439a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	f000 fae1 	bl	800496a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	681b      	ldr	r3, [r3, #0]
 80043ac:	689a      	ldr	r2, [r3, #8]
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80043b6:	609a      	str	r2, [r3, #8]
      break;
 80043b8:	e03c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043c2:	683b      	ldr	r3, [r7, #0]
 80043c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043c6:	461a      	mov	r2, r3
 80043c8:	f000 fa58 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	681b      	ldr	r3, [r3, #0]
 80043d0:	2150      	movs	r1, #80	@ 0x50
 80043d2:	4618      	mov	r0, r3
 80043d4:	f000 faaf 	bl	8004936 <TIM_ITRx_SetConfig>
      break;
 80043d8:	e02c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043de:	683b      	ldr	r3, [r7, #0]
 80043e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043e2:	683b      	ldr	r3, [r7, #0]
 80043e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043e6:	461a      	mov	r2, r3
 80043e8:	f000 fa76 	bl	80048d8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	681b      	ldr	r3, [r3, #0]
 80043f0:	2160      	movs	r1, #96	@ 0x60
 80043f2:	4618      	mov	r0, r3
 80043f4:	f000 fa9f 	bl	8004936 <TIM_ITRx_SetConfig>
      break;
 80043f8:	e01c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043fa:	687b      	ldr	r3, [r7, #4]
 80043fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043fe:	683b      	ldr	r3, [r7, #0]
 8004400:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004402:	683b      	ldr	r3, [r7, #0]
 8004404:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004406:	461a      	mov	r2, r3
 8004408:	f000 fa38 	bl	800487c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	2140      	movs	r1, #64	@ 0x40
 8004412:	4618      	mov	r0, r3
 8004414:	f000 fa8f 	bl	8004936 <TIM_ITRx_SetConfig>
      break;
 8004418:	e00c      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681a      	ldr	r2, [r3, #0]
 800441e:	683b      	ldr	r3, [r7, #0]
 8004420:	681b      	ldr	r3, [r3, #0]
 8004422:	4619      	mov	r1, r3
 8004424:	4610      	mov	r0, r2
 8004426:	f000 fa86 	bl	8004936 <TIM_ITRx_SetConfig>
      break;
 800442a:	e003      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800442c:	2301      	movs	r3, #1
 800442e:	73fb      	strb	r3, [r7, #15]
      break;
 8004430:	e000      	b.n	8004434 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004432:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	2201      	movs	r2, #1
 8004438:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2200      	movs	r2, #0
 8004440:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004444:	7bfb      	ldrb	r3, [r7, #15]
}
 8004446:	4618      	mov	r0, r3
 8004448:	3710      	adds	r7, #16
 800444a:	46bd      	mov	sp, r7
 800444c:	bd80      	pop	{r7, pc}

0800444e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800444e:	b480      	push	{r7}
 8004450:	b083      	sub	sp, #12
 8004452:	af00      	add	r7, sp, #0
 8004454:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004456:	bf00      	nop
 8004458:	370c      	adds	r7, #12
 800445a:	46bd      	mov	sp, r7
 800445c:	bc80      	pop	{r7}
 800445e:	4770      	bx	lr

08004460 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004460:	b480      	push	{r7}
 8004462:	b083      	sub	sp, #12
 8004464:	af00      	add	r7, sp, #0
 8004466:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004468:	bf00      	nop
 800446a:	370c      	adds	r7, #12
 800446c:	46bd      	mov	sp, r7
 800446e:	bc80      	pop	{r7}
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	bc80      	pop	{r7}
 8004482:	4770      	bx	lr

08004484 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004484:	b480      	push	{r7}
 8004486:	b083      	sub	sp, #12
 8004488:	af00      	add	r7, sp, #0
 800448a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448c:	bf00      	nop
 800448e:	370c      	adds	r7, #12
 8004490:	46bd      	mov	sp, r7
 8004492:	bc80      	pop	{r7}
 8004494:	4770      	bx	lr

08004496 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004496:	b480      	push	{r7}
 8004498:	b083      	sub	sp, #12
 800449a:	af00      	add	r7, sp, #0
 800449c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800449e:	bf00      	nop
 80044a0:	370c      	adds	r7, #12
 80044a2:	46bd      	mov	sp, r7
 80044a4:	bc80      	pop	{r7}
 80044a6:	4770      	bx	lr

080044a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80044a8:	b480      	push	{r7}
 80044aa:	b085      	sub	sp, #20
 80044ac:	af00      	add	r7, sp, #0
 80044ae:	6078      	str	r0, [r7, #4]
 80044b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a29      	ldr	r2, [pc, #164]	@ (8004560 <TIM_Base_SetConfig+0xb8>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d00b      	beq.n	80044d8 <TIM_Base_SetConfig+0x30>
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044c6:	d007      	beq.n	80044d8 <TIM_Base_SetConfig+0x30>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	4a26      	ldr	r2, [pc, #152]	@ (8004564 <TIM_Base_SetConfig+0xbc>)
 80044cc:	4293      	cmp	r3, r2
 80044ce:	d003      	beq.n	80044d8 <TIM_Base_SetConfig+0x30>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a25      	ldr	r2, [pc, #148]	@ (8004568 <TIM_Base_SetConfig+0xc0>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d108      	bne.n	80044ea <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044de:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044e0:	683b      	ldr	r3, [r7, #0]
 80044e2:	685b      	ldr	r3, [r3, #4]
 80044e4:	68fa      	ldr	r2, [r7, #12]
 80044e6:	4313      	orrs	r3, r2
 80044e8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a1c      	ldr	r2, [pc, #112]	@ (8004560 <TIM_Base_SetConfig+0xb8>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d00b      	beq.n	800450a <TIM_Base_SetConfig+0x62>
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044f8:	d007      	beq.n	800450a <TIM_Base_SetConfig+0x62>
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	4a19      	ldr	r2, [pc, #100]	@ (8004564 <TIM_Base_SetConfig+0xbc>)
 80044fe:	4293      	cmp	r3, r2
 8004500:	d003      	beq.n	800450a <TIM_Base_SetConfig+0x62>
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a18      	ldr	r2, [pc, #96]	@ (8004568 <TIM_Base_SetConfig+0xc0>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d108      	bne.n	800451c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800450a:	68fb      	ldr	r3, [r7, #12]
 800450c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004510:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004512:	683b      	ldr	r3, [r7, #0]
 8004514:	68db      	ldr	r3, [r3, #12]
 8004516:	68fa      	ldr	r2, [r7, #12]
 8004518:	4313      	orrs	r3, r2
 800451a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800451c:	68fb      	ldr	r3, [r7, #12]
 800451e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	4313      	orrs	r3, r2
 8004528:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	689a      	ldr	r2, [r3, #8]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004538:	683b      	ldr	r3, [r7, #0]
 800453a:	681a      	ldr	r2, [r3, #0]
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	4a07      	ldr	r2, [pc, #28]	@ (8004560 <TIM_Base_SetConfig+0xb8>)
 8004544:	4293      	cmp	r3, r2
 8004546:	d103      	bne.n	8004550 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004548:	683b      	ldr	r3, [r7, #0]
 800454a:	691a      	ldr	r2, [r3, #16]
 800454c:	687b      	ldr	r3, [r7, #4]
 800454e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	2201      	movs	r2, #1
 8004554:	615a      	str	r2, [r3, #20]
}
 8004556:	bf00      	nop
 8004558:	3714      	adds	r7, #20
 800455a:	46bd      	mov	sp, r7
 800455c:	bc80      	pop	{r7}
 800455e:	4770      	bx	lr
 8004560:	40012c00 	.word	0x40012c00
 8004564:	40000400 	.word	0x40000400
 8004568:	40000800 	.word	0x40000800

0800456c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800456c:	b480      	push	{r7}
 800456e:	b087      	sub	sp, #28
 8004570:	af00      	add	r7, sp, #0
 8004572:	6078      	str	r0, [r7, #4]
 8004574:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	6a1b      	ldr	r3, [r3, #32]
 800457a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	6a1b      	ldr	r3, [r3, #32]
 8004580:	f023 0201 	bic.w	r2, r3, #1
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	685b      	ldr	r3, [r3, #4]
 800458c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	699b      	ldr	r3, [r3, #24]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800459a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0303 	bic.w	r3, r3, #3
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	f023 0302 	bic.w	r3, r3, #2
 80045b4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	689b      	ldr	r3, [r3, #8]
 80045ba:	697a      	ldr	r2, [r7, #20]
 80045bc:	4313      	orrs	r3, r2
 80045be:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	4a1c      	ldr	r2, [pc, #112]	@ (8004634 <TIM_OC1_SetConfig+0xc8>)
 80045c4:	4293      	cmp	r3, r2
 80045c6:	d10c      	bne.n	80045e2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045c8:	697b      	ldr	r3, [r7, #20]
 80045ca:	f023 0308 	bic.w	r3, r3, #8
 80045ce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045d0:	683b      	ldr	r3, [r7, #0]
 80045d2:	68db      	ldr	r3, [r3, #12]
 80045d4:	697a      	ldr	r2, [r7, #20]
 80045d6:	4313      	orrs	r3, r2
 80045d8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045da:	697b      	ldr	r3, [r7, #20]
 80045dc:	f023 0304 	bic.w	r3, r3, #4
 80045e0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	4a13      	ldr	r2, [pc, #76]	@ (8004634 <TIM_OC1_SetConfig+0xc8>)
 80045e6:	4293      	cmp	r3, r2
 80045e8:	d111      	bne.n	800460e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045ea:	693b      	ldr	r3, [r7, #16]
 80045ec:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045f0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045f2:	693b      	ldr	r3, [r7, #16]
 80045f4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045f8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045fa:	683b      	ldr	r3, [r7, #0]
 80045fc:	695b      	ldr	r3, [r3, #20]
 80045fe:	693a      	ldr	r2, [r7, #16]
 8004600:	4313      	orrs	r3, r2
 8004602:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004604:	683b      	ldr	r3, [r7, #0]
 8004606:	699b      	ldr	r3, [r3, #24]
 8004608:	693a      	ldr	r2, [r7, #16]
 800460a:	4313      	orrs	r3, r2
 800460c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800460e:	687b      	ldr	r3, [r7, #4]
 8004610:	693a      	ldr	r2, [r7, #16]
 8004612:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800461a:	683b      	ldr	r3, [r7, #0]
 800461c:	685a      	ldr	r2, [r3, #4]
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004622:	687b      	ldr	r3, [r7, #4]
 8004624:	697a      	ldr	r2, [r7, #20]
 8004626:	621a      	str	r2, [r3, #32]
}
 8004628:	bf00      	nop
 800462a:	371c      	adds	r7, #28
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr
 8004632:	bf00      	nop
 8004634:	40012c00 	.word	0x40012c00

08004638 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004638:	b480      	push	{r7}
 800463a:	b087      	sub	sp, #28
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
 8004640:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	6a1b      	ldr	r3, [r3, #32]
 8004646:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004648:	687b      	ldr	r3, [r7, #4]
 800464a:	6a1b      	ldr	r3, [r3, #32]
 800464c:	f023 0210 	bic.w	r2, r3, #16
 8004650:	687b      	ldr	r3, [r7, #4]
 8004652:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	685b      	ldr	r3, [r3, #4]
 8004658:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	699b      	ldr	r3, [r3, #24]
 800465e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004666:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800466e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004670:	683b      	ldr	r3, [r7, #0]
 8004672:	681b      	ldr	r3, [r3, #0]
 8004674:	021b      	lsls	r3, r3, #8
 8004676:	68fa      	ldr	r2, [r7, #12]
 8004678:	4313      	orrs	r3, r2
 800467a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800467c:	697b      	ldr	r3, [r7, #20]
 800467e:	f023 0320 	bic.w	r3, r3, #32
 8004682:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004684:	683b      	ldr	r3, [r7, #0]
 8004686:	689b      	ldr	r3, [r3, #8]
 8004688:	011b      	lsls	r3, r3, #4
 800468a:	697a      	ldr	r2, [r7, #20]
 800468c:	4313      	orrs	r3, r2
 800468e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004690:	687b      	ldr	r3, [r7, #4]
 8004692:	4a1d      	ldr	r2, [pc, #116]	@ (8004708 <TIM_OC2_SetConfig+0xd0>)
 8004694:	4293      	cmp	r3, r2
 8004696:	d10d      	bne.n	80046b4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004698:	697b      	ldr	r3, [r7, #20]
 800469a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800469e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80046a0:	683b      	ldr	r3, [r7, #0]
 80046a2:	68db      	ldr	r3, [r3, #12]
 80046a4:	011b      	lsls	r3, r3, #4
 80046a6:	697a      	ldr	r2, [r7, #20]
 80046a8:	4313      	orrs	r3, r2
 80046aa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80046ac:	697b      	ldr	r3, [r7, #20]
 80046ae:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80046b2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	4a14      	ldr	r2, [pc, #80]	@ (8004708 <TIM_OC2_SetConfig+0xd0>)
 80046b8:	4293      	cmp	r3, r2
 80046ba:	d113      	bne.n	80046e4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046bc:	693b      	ldr	r3, [r7, #16]
 80046be:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046c2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046c4:	693b      	ldr	r3, [r7, #16]
 80046c6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046ca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046cc:	683b      	ldr	r3, [r7, #0]
 80046ce:	695b      	ldr	r3, [r3, #20]
 80046d0:	009b      	lsls	r3, r3, #2
 80046d2:	693a      	ldr	r2, [r7, #16]
 80046d4:	4313      	orrs	r3, r2
 80046d6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	699b      	ldr	r3, [r3, #24]
 80046dc:	009b      	lsls	r3, r3, #2
 80046de:	693a      	ldr	r2, [r7, #16]
 80046e0:	4313      	orrs	r3, r2
 80046e2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046e4:	687b      	ldr	r3, [r7, #4]
 80046e6:	693a      	ldr	r2, [r7, #16]
 80046e8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	68fa      	ldr	r2, [r7, #12]
 80046ee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046f0:	683b      	ldr	r3, [r7, #0]
 80046f2:	685a      	ldr	r2, [r3, #4]
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	697a      	ldr	r2, [r7, #20]
 80046fc:	621a      	str	r2, [r3, #32]
}
 80046fe:	bf00      	nop
 8004700:	371c      	adds	r7, #28
 8004702:	46bd      	mov	sp, r7
 8004704:	bc80      	pop	{r7}
 8004706:	4770      	bx	lr
 8004708:	40012c00 	.word	0x40012c00

0800470c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800470c:	b480      	push	{r7}
 800470e:	b087      	sub	sp, #28
 8004710:	af00      	add	r7, sp, #0
 8004712:	6078      	str	r0, [r7, #4]
 8004714:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	6a1b      	ldr	r3, [r3, #32]
 800471a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	6a1b      	ldr	r3, [r3, #32]
 8004720:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	685b      	ldr	r3, [r3, #4]
 800472c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	69db      	ldr	r3, [r3, #28]
 8004732:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004734:	68fb      	ldr	r3, [r7, #12]
 8004736:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800473a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	f023 0303 	bic.w	r3, r3, #3
 8004742:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004744:	683b      	ldr	r3, [r7, #0]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	68fa      	ldr	r2, [r7, #12]
 800474a:	4313      	orrs	r3, r2
 800474c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800474e:	697b      	ldr	r3, [r7, #20]
 8004750:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004754:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004756:	683b      	ldr	r3, [r7, #0]
 8004758:	689b      	ldr	r3, [r3, #8]
 800475a:	021b      	lsls	r3, r3, #8
 800475c:	697a      	ldr	r2, [r7, #20]
 800475e:	4313      	orrs	r3, r2
 8004760:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a1d      	ldr	r2, [pc, #116]	@ (80047dc <TIM_OC3_SetConfig+0xd0>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d10d      	bne.n	8004786 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800476a:	697b      	ldr	r3, [r7, #20]
 800476c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004770:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004772:	683b      	ldr	r3, [r7, #0]
 8004774:	68db      	ldr	r3, [r3, #12]
 8004776:	021b      	lsls	r3, r3, #8
 8004778:	697a      	ldr	r2, [r7, #20]
 800477a:	4313      	orrs	r3, r2
 800477c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800477e:	697b      	ldr	r3, [r7, #20]
 8004780:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004784:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	4a14      	ldr	r2, [pc, #80]	@ (80047dc <TIM_OC3_SetConfig+0xd0>)
 800478a:	4293      	cmp	r3, r2
 800478c:	d113      	bne.n	80047b6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800478e:	693b      	ldr	r3, [r7, #16]
 8004790:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004794:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004796:	693b      	ldr	r3, [r7, #16]
 8004798:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800479c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800479e:	683b      	ldr	r3, [r7, #0]
 80047a0:	695b      	ldr	r3, [r3, #20]
 80047a2:	011b      	lsls	r3, r3, #4
 80047a4:	693a      	ldr	r2, [r7, #16]
 80047a6:	4313      	orrs	r3, r2
 80047a8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	699b      	ldr	r3, [r3, #24]
 80047ae:	011b      	lsls	r3, r3, #4
 80047b0:	693a      	ldr	r2, [r7, #16]
 80047b2:	4313      	orrs	r3, r2
 80047b4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	693a      	ldr	r2, [r7, #16]
 80047ba:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047c2:	683b      	ldr	r3, [r7, #0]
 80047c4:	685a      	ldr	r2, [r3, #4]
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	697a      	ldr	r2, [r7, #20]
 80047ce:	621a      	str	r2, [r3, #32]
}
 80047d0:	bf00      	nop
 80047d2:	371c      	adds	r7, #28
 80047d4:	46bd      	mov	sp, r7
 80047d6:	bc80      	pop	{r7}
 80047d8:	4770      	bx	lr
 80047da:	bf00      	nop
 80047dc:	40012c00 	.word	0x40012c00

080047e0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047e0:	b480      	push	{r7}
 80047e2:	b087      	sub	sp, #28
 80047e4:	af00      	add	r7, sp, #0
 80047e6:	6078      	str	r0, [r7, #4]
 80047e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	6a1b      	ldr	r3, [r3, #32]
 80047ee:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047f0:	687b      	ldr	r3, [r7, #4]
 80047f2:	6a1b      	ldr	r3, [r3, #32]
 80047f4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	685b      	ldr	r3, [r3, #4]
 8004800:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004802:	687b      	ldr	r3, [r7, #4]
 8004804:	69db      	ldr	r3, [r3, #28]
 8004806:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8004808:	68fb      	ldr	r3, [r7, #12]
 800480a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800480e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004810:	68fb      	ldr	r3, [r7, #12]
 8004812:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004816:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004818:	683b      	ldr	r3, [r7, #0]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	021b      	lsls	r3, r3, #8
 800481e:	68fa      	ldr	r2, [r7, #12]
 8004820:	4313      	orrs	r3, r2
 8004822:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004824:	693b      	ldr	r3, [r7, #16]
 8004826:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800482a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800482c:	683b      	ldr	r3, [r7, #0]
 800482e:	689b      	ldr	r3, [r3, #8]
 8004830:	031b      	lsls	r3, r3, #12
 8004832:	693a      	ldr	r2, [r7, #16]
 8004834:	4313      	orrs	r3, r2
 8004836:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	4a0f      	ldr	r2, [pc, #60]	@ (8004878 <TIM_OC4_SetConfig+0x98>)
 800483c:	4293      	cmp	r3, r2
 800483e:	d109      	bne.n	8004854 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004840:	697b      	ldr	r3, [r7, #20]
 8004842:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004846:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	695b      	ldr	r3, [r3, #20]
 800484c:	019b      	lsls	r3, r3, #6
 800484e:	697a      	ldr	r2, [r7, #20]
 8004850:	4313      	orrs	r3, r2
 8004852:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	697a      	ldr	r2, [r7, #20]
 8004858:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	68fa      	ldr	r2, [r7, #12]
 800485e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004860:	683b      	ldr	r3, [r7, #0]
 8004862:	685a      	ldr	r2, [r3, #4]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004868:	687b      	ldr	r3, [r7, #4]
 800486a:	693a      	ldr	r2, [r7, #16]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr
 8004878:	40012c00 	.word	0x40012c00

0800487c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800487c:	b480      	push	{r7}
 800487e:	b087      	sub	sp, #28
 8004880:	af00      	add	r7, sp, #0
 8004882:	60f8      	str	r0, [r7, #12]
 8004884:	60b9      	str	r1, [r7, #8]
 8004886:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004888:	68fb      	ldr	r3, [r7, #12]
 800488a:	6a1b      	ldr	r3, [r3, #32]
 800488c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800488e:	68fb      	ldr	r3, [r7, #12]
 8004890:	6a1b      	ldr	r3, [r3, #32]
 8004892:	f023 0201 	bic.w	r2, r3, #1
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800489a:	68fb      	ldr	r3, [r7, #12]
 800489c:	699b      	ldr	r3, [r3, #24]
 800489e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80048a0:	693b      	ldr	r3, [r7, #16]
 80048a2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80048a6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	011b      	lsls	r3, r3, #4
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	4313      	orrs	r3, r2
 80048b0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80048b2:	697b      	ldr	r3, [r7, #20]
 80048b4:	f023 030a 	bic.w	r3, r3, #10
 80048b8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	68bb      	ldr	r3, [r7, #8]
 80048be:	4313      	orrs	r3, r2
 80048c0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	693a      	ldr	r2, [r7, #16]
 80048c6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	697a      	ldr	r2, [r7, #20]
 80048cc:	621a      	str	r2, [r3, #32]
}
 80048ce:	bf00      	nop
 80048d0:	371c      	adds	r7, #28
 80048d2:	46bd      	mov	sp, r7
 80048d4:	bc80      	pop	{r7}
 80048d6:	4770      	bx	lr

080048d8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048d8:	b480      	push	{r7}
 80048da:	b087      	sub	sp, #28
 80048dc:	af00      	add	r7, sp, #0
 80048de:	60f8      	str	r0, [r7, #12]
 80048e0:	60b9      	str	r1, [r7, #8]
 80048e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048e4:	68fb      	ldr	r3, [r7, #12]
 80048e6:	6a1b      	ldr	r3, [r3, #32]
 80048e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048ea:	68fb      	ldr	r3, [r7, #12]
 80048ec:	6a1b      	ldr	r3, [r3, #32]
 80048ee:	f023 0210 	bic.w	r2, r3, #16
 80048f2:	68fb      	ldr	r3, [r7, #12]
 80048f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048f6:	68fb      	ldr	r3, [r7, #12]
 80048f8:	699b      	ldr	r3, [r3, #24]
 80048fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048fc:	693b      	ldr	r3, [r7, #16]
 80048fe:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004902:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	031b      	lsls	r3, r3, #12
 8004908:	693a      	ldr	r2, [r7, #16]
 800490a:	4313      	orrs	r3, r2
 800490c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800490e:	697b      	ldr	r3, [r7, #20]
 8004910:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004914:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8004916:	68bb      	ldr	r3, [r7, #8]
 8004918:	011b      	lsls	r3, r3, #4
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004920:	68fb      	ldr	r3, [r7, #12]
 8004922:	693a      	ldr	r2, [r7, #16]
 8004924:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	697a      	ldr	r2, [r7, #20]
 800492a:	621a      	str	r2, [r3, #32]
}
 800492c:	bf00      	nop
 800492e:	371c      	adds	r7, #28
 8004930:	46bd      	mov	sp, r7
 8004932:	bc80      	pop	{r7}
 8004934:	4770      	bx	lr

08004936 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004936:	b480      	push	{r7}
 8004938:	b085      	sub	sp, #20
 800493a:	af00      	add	r7, sp, #0
 800493c:	6078      	str	r0, [r7, #4]
 800493e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004940:	687b      	ldr	r3, [r7, #4]
 8004942:	689b      	ldr	r3, [r3, #8]
 8004944:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004946:	68fb      	ldr	r3, [r7, #12]
 8004948:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800494c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800494e:	683a      	ldr	r2, [r7, #0]
 8004950:	68fb      	ldr	r3, [r7, #12]
 8004952:	4313      	orrs	r3, r2
 8004954:	f043 0307 	orr.w	r3, r3, #7
 8004958:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	68fa      	ldr	r2, [r7, #12]
 800495e:	609a      	str	r2, [r3, #8]
}
 8004960:	bf00      	nop
 8004962:	3714      	adds	r7, #20
 8004964:	46bd      	mov	sp, r7
 8004966:	bc80      	pop	{r7}
 8004968:	4770      	bx	lr

0800496a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800496a:	b480      	push	{r7}
 800496c:	b087      	sub	sp, #28
 800496e:	af00      	add	r7, sp, #0
 8004970:	60f8      	str	r0, [r7, #12]
 8004972:	60b9      	str	r1, [r7, #8]
 8004974:	607a      	str	r2, [r7, #4]
 8004976:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004978:	68fb      	ldr	r3, [r7, #12]
 800497a:	689b      	ldr	r3, [r3, #8]
 800497c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004984:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004986:	683b      	ldr	r3, [r7, #0]
 8004988:	021a      	lsls	r2, r3, #8
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	431a      	orrs	r2, r3
 800498e:	68bb      	ldr	r3, [r7, #8]
 8004990:	4313      	orrs	r3, r2
 8004992:	697a      	ldr	r2, [r7, #20]
 8004994:	4313      	orrs	r3, r2
 8004996:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004998:	68fb      	ldr	r3, [r7, #12]
 800499a:	697a      	ldr	r2, [r7, #20]
 800499c:	609a      	str	r2, [r3, #8]
}
 800499e:	bf00      	nop
 80049a0:	371c      	adds	r7, #28
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bc80      	pop	{r7}
 80049a6:	4770      	bx	lr

080049a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80049a8:	b480      	push	{r7}
 80049aa:	b087      	sub	sp, #28
 80049ac:	af00      	add	r7, sp, #0
 80049ae:	60f8      	str	r0, [r7, #12]
 80049b0:	60b9      	str	r1, [r7, #8]
 80049b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80049b4:	68bb      	ldr	r3, [r7, #8]
 80049b6:	f003 031f 	and.w	r3, r3, #31
 80049ba:	2201      	movs	r2, #1
 80049bc:	fa02 f303 	lsl.w	r3, r2, r3
 80049c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	6a1a      	ldr	r2, [r3, #32]
 80049c6:	697b      	ldr	r3, [r7, #20]
 80049c8:	43db      	mvns	r3, r3
 80049ca:	401a      	ands	r2, r3
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049d0:	68fb      	ldr	r3, [r7, #12]
 80049d2:	6a1a      	ldr	r2, [r3, #32]
 80049d4:	68bb      	ldr	r3, [r7, #8]
 80049d6:	f003 031f 	and.w	r3, r3, #31
 80049da:	6879      	ldr	r1, [r7, #4]
 80049dc:	fa01 f303 	lsl.w	r3, r1, r3
 80049e0:	431a      	orrs	r2, r3
 80049e2:	68fb      	ldr	r3, [r7, #12]
 80049e4:	621a      	str	r2, [r3, #32]
}
 80049e6:	bf00      	nop
 80049e8:	371c      	adds	r7, #28
 80049ea:	46bd      	mov	sp, r7
 80049ec:	bc80      	pop	{r7}
 80049ee:	4770      	bx	lr

080049f0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049f0:	b480      	push	{r7}
 80049f2:	b085      	sub	sp, #20
 80049f4:	af00      	add	r7, sp, #0
 80049f6:	6078      	str	r0, [r7, #4]
 80049f8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004a00:	2b01      	cmp	r3, #1
 8004a02:	d101      	bne.n	8004a08 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004a04:	2302      	movs	r3, #2
 8004a06:	e046      	b.n	8004a96 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	2201      	movs	r2, #1
 8004a0c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	2202      	movs	r2, #2
 8004a14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	685b      	ldr	r3, [r3, #4]
 8004a1e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	681b      	ldr	r3, [r3, #0]
 8004a24:	689b      	ldr	r3, [r3, #8]
 8004a26:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a2e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a30:	683b      	ldr	r3, [r7, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	4313      	orrs	r3, r2
 8004a38:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a3a:	687b      	ldr	r3, [r7, #4]
 8004a3c:	681b      	ldr	r3, [r3, #0]
 8004a3e:	68fa      	ldr	r2, [r7, #12]
 8004a40:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	4a16      	ldr	r2, [pc, #88]	@ (8004aa0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a48:	4293      	cmp	r3, r2
 8004a4a:	d00e      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	681b      	ldr	r3, [r3, #0]
 8004a50:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a54:	d009      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a12      	ldr	r2, [pc, #72]	@ (8004aa4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d004      	beq.n	8004a6a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a60:	687b      	ldr	r3, [r7, #4]
 8004a62:	681b      	ldr	r3, [r3, #0]
 8004a64:	4a10      	ldr	r2, [pc, #64]	@ (8004aa8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d10c      	bne.n	8004a84 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a6a:	68bb      	ldr	r3, [r7, #8]
 8004a6c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a70:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	685b      	ldr	r3, [r3, #4]
 8004a76:	68ba      	ldr	r2, [r7, #8]
 8004a78:	4313      	orrs	r3, r2
 8004a7a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	68ba      	ldr	r2, [r7, #8]
 8004a82:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a84:	687b      	ldr	r3, [r7, #4]
 8004a86:	2201      	movs	r2, #1
 8004a88:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	2200      	movs	r2, #0
 8004a90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a94:	2300      	movs	r3, #0
}
 8004a96:	4618      	mov	r0, r3
 8004a98:	3714      	adds	r7, #20
 8004a9a:	46bd      	mov	sp, r7
 8004a9c:	bc80      	pop	{r7}
 8004a9e:	4770      	bx	lr
 8004aa0:	40012c00 	.word	0x40012c00
 8004aa4:	40000400 	.word	0x40000400
 8004aa8:	40000800 	.word	0x40000800

08004aac <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004aac:	b480      	push	{r7}
 8004aae:	b083      	sub	sp, #12
 8004ab0:	af00      	add	r7, sp, #0
 8004ab2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004ab4:	bf00      	nop
 8004ab6:	370c      	adds	r7, #12
 8004ab8:	46bd      	mov	sp, r7
 8004aba:	bc80      	pop	{r7}
 8004abc:	4770      	bx	lr

08004abe <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004abe:	b480      	push	{r7}
 8004ac0:	b083      	sub	sp, #12
 8004ac2:	af00      	add	r7, sp, #0
 8004ac4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004ac6:	bf00      	nop
 8004ac8:	370c      	adds	r7, #12
 8004aca:	46bd      	mov	sp, r7
 8004acc:	bc80      	pop	{r7}
 8004ace:	4770      	bx	lr

08004ad0 <memset>:
 8004ad0:	4603      	mov	r3, r0
 8004ad2:	4402      	add	r2, r0
 8004ad4:	4293      	cmp	r3, r2
 8004ad6:	d100      	bne.n	8004ada <memset+0xa>
 8004ad8:	4770      	bx	lr
 8004ada:	f803 1b01 	strb.w	r1, [r3], #1
 8004ade:	e7f9      	b.n	8004ad4 <memset+0x4>

08004ae0 <__libc_init_array>:
 8004ae0:	b570      	push	{r4, r5, r6, lr}
 8004ae2:	2600      	movs	r6, #0
 8004ae4:	4d0c      	ldr	r5, [pc, #48]	@ (8004b18 <__libc_init_array+0x38>)
 8004ae6:	4c0d      	ldr	r4, [pc, #52]	@ (8004b1c <__libc_init_array+0x3c>)
 8004ae8:	1b64      	subs	r4, r4, r5
 8004aea:	10a4      	asrs	r4, r4, #2
 8004aec:	42a6      	cmp	r6, r4
 8004aee:	d109      	bne.n	8004b04 <__libc_init_array+0x24>
 8004af0:	f001 fa62 	bl	8005fb8 <_init>
 8004af4:	2600      	movs	r6, #0
 8004af6:	4d0a      	ldr	r5, [pc, #40]	@ (8004b20 <__libc_init_array+0x40>)
 8004af8:	4c0a      	ldr	r4, [pc, #40]	@ (8004b24 <__libc_init_array+0x44>)
 8004afa:	1b64      	subs	r4, r4, r5
 8004afc:	10a4      	asrs	r4, r4, #2
 8004afe:	42a6      	cmp	r6, r4
 8004b00:	d105      	bne.n	8004b0e <__libc_init_array+0x2e>
 8004b02:	bd70      	pop	{r4, r5, r6, pc}
 8004b04:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b08:	4798      	blx	r3
 8004b0a:	3601      	adds	r6, #1
 8004b0c:	e7ee      	b.n	8004aec <__libc_init_array+0xc>
 8004b0e:	f855 3b04 	ldr.w	r3, [r5], #4
 8004b12:	4798      	blx	r3
 8004b14:	3601      	adds	r6, #1
 8004b16:	e7f2      	b.n	8004afe <__libc_init_array+0x1e>
 8004b18:	080061d0 	.word	0x080061d0
 8004b1c:	080061d0 	.word	0x080061d0
 8004b20:	080061d0 	.word	0x080061d0
 8004b24:	080061d4 	.word	0x080061d4

08004b28 <cos>:
 8004b28:	b530      	push	{r4, r5, lr}
 8004b2a:	4d20      	ldr	r5, [pc, #128]	@ (8004bac <cos+0x84>)
 8004b2c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004b30:	42ac      	cmp	r4, r5
 8004b32:	4602      	mov	r2, r0
 8004b34:	460b      	mov	r3, r1
 8004b36:	b087      	sub	sp, #28
 8004b38:	d806      	bhi.n	8004b48 <cos+0x20>
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	2300      	movs	r3, #0
 8004b3e:	b007      	add	sp, #28
 8004b40:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b44:	f000 b8a8 	b.w	8004c98 <__kernel_cos>
 8004b48:	4d19      	ldr	r5, [pc, #100]	@ (8004bb0 <cos+0x88>)
 8004b4a:	42ac      	cmp	r4, r5
 8004b4c:	d903      	bls.n	8004b56 <cos+0x2e>
 8004b4e:	f7fb fb03 	bl	8000158 <__aeabi_dsub>
 8004b52:	b007      	add	sp, #28
 8004b54:	bd30      	pop	{r4, r5, pc}
 8004b56:	aa02      	add	r2, sp, #8
 8004b58:	f000 fc16 	bl	8005388 <__ieee754_rem_pio2>
 8004b5c:	f000 0003 	and.w	r0, r0, #3
 8004b60:	2801      	cmp	r0, #1
 8004b62:	d009      	beq.n	8004b78 <cos+0x50>
 8004b64:	2802      	cmp	r0, #2
 8004b66:	d011      	beq.n	8004b8c <cos+0x64>
 8004b68:	b9b8      	cbnz	r0, 8004b9a <cos+0x72>
 8004b6a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b6e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b72:	f000 f891 	bl	8004c98 <__kernel_cos>
 8004b76:	e7ec      	b.n	8004b52 <cos+0x2a>
 8004b78:	9000      	str	r0, [sp, #0]
 8004b7a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b82:	f000 f949 	bl	8004e18 <__kernel_sin>
 8004b86:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004b8a:	e7e2      	b.n	8004b52 <cos+0x2a>
 8004b8c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b90:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b94:	f000 f880 	bl	8004c98 <__kernel_cos>
 8004b98:	e7f5      	b.n	8004b86 <cos+0x5e>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ba0:	9300      	str	r3, [sp, #0]
 8004ba2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ba6:	f000 f937 	bl	8004e18 <__kernel_sin>
 8004baa:	e7d2      	b.n	8004b52 <cos+0x2a>
 8004bac:	3fe921fb 	.word	0x3fe921fb
 8004bb0:	7fefffff 	.word	0x7fefffff

08004bb4 <sin>:
 8004bb4:	b530      	push	{r4, r5, lr}
 8004bb6:	4d20      	ldr	r5, [pc, #128]	@ (8004c38 <sin+0x84>)
 8004bb8:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004bbc:	42ac      	cmp	r4, r5
 8004bbe:	4602      	mov	r2, r0
 8004bc0:	460b      	mov	r3, r1
 8004bc2:	b087      	sub	sp, #28
 8004bc4:	d806      	bhi.n	8004bd4 <sin+0x20>
 8004bc6:	2300      	movs	r3, #0
 8004bc8:	2200      	movs	r2, #0
 8004bca:	9300      	str	r3, [sp, #0]
 8004bcc:	2300      	movs	r3, #0
 8004bce:	f000 f923 	bl	8004e18 <__kernel_sin>
 8004bd2:	e004      	b.n	8004bde <sin+0x2a>
 8004bd4:	4d19      	ldr	r5, [pc, #100]	@ (8004c3c <sin+0x88>)
 8004bd6:	42ac      	cmp	r4, r5
 8004bd8:	d903      	bls.n	8004be2 <sin+0x2e>
 8004bda:	f7fb fabd 	bl	8000158 <__aeabi_dsub>
 8004bde:	b007      	add	sp, #28
 8004be0:	bd30      	pop	{r4, r5, pc}
 8004be2:	aa02      	add	r2, sp, #8
 8004be4:	f000 fbd0 	bl	8005388 <__ieee754_rem_pio2>
 8004be8:	f000 0003 	and.w	r0, r0, #3
 8004bec:	2801      	cmp	r0, #1
 8004bee:	d009      	beq.n	8004c04 <sin+0x50>
 8004bf0:	2802      	cmp	r0, #2
 8004bf2:	d00e      	beq.n	8004c12 <sin+0x5e>
 8004bf4:	b9c0      	cbnz	r0, 8004c28 <sin+0x74>
 8004bf6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	9300      	str	r3, [sp, #0]
 8004bfe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c02:	e7e4      	b.n	8004bce <sin+0x1a>
 8004c04:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c08:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c0c:	f000 f844 	bl	8004c98 <__kernel_cos>
 8004c10:	e7e5      	b.n	8004bde <sin+0x2a>
 8004c12:	2301      	movs	r3, #1
 8004c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c18:	9300      	str	r3, [sp, #0]
 8004c1a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c1e:	f000 f8fb 	bl	8004e18 <__kernel_sin>
 8004c22:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004c26:	e7da      	b.n	8004bde <sin+0x2a>
 8004c28:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c2c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c30:	f000 f832 	bl	8004c98 <__kernel_cos>
 8004c34:	e7f5      	b.n	8004c22 <sin+0x6e>
 8004c36:	bf00      	nop
 8004c38:	3fe921fb 	.word	0x3fe921fb
 8004c3c:	7fefffff 	.word	0x7fefffff

08004c40 <tan>:
 8004c40:	b530      	push	{r4, r5, lr}
 8004c42:	4d12      	ldr	r5, [pc, #72]	@ (8004c8c <tan+0x4c>)
 8004c44:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004c48:	42ac      	cmp	r4, r5
 8004c4a:	4602      	mov	r2, r0
 8004c4c:	460b      	mov	r3, r1
 8004c4e:	b087      	sub	sp, #28
 8004c50:	d806      	bhi.n	8004c60 <tan+0x20>
 8004c52:	2301      	movs	r3, #1
 8004c54:	2200      	movs	r2, #0
 8004c56:	9300      	str	r3, [sp, #0]
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f000 f995 	bl	8004f88 <__kernel_tan>
 8004c5e:	e004      	b.n	8004c6a <tan+0x2a>
 8004c60:	4d0b      	ldr	r5, [pc, #44]	@ (8004c90 <tan+0x50>)
 8004c62:	42ac      	cmp	r4, r5
 8004c64:	d903      	bls.n	8004c6e <tan+0x2e>
 8004c66:	f7fb fa77 	bl	8000158 <__aeabi_dsub>
 8004c6a:	b007      	add	sp, #28
 8004c6c:	bd30      	pop	{r4, r5, pc}
 8004c6e:	aa02      	add	r2, sp, #8
 8004c70:	f000 fb8a 	bl	8005388 <__ieee754_rem_pio2>
 8004c74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c78:	0040      	lsls	r0, r0, #1
 8004c7a:	f000 0002 	and.w	r0, r0, #2
 8004c7e:	f1c0 0001 	rsb	r0, r0, #1
 8004c82:	9000      	str	r0, [sp, #0]
 8004c84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c88:	e7e7      	b.n	8004c5a <tan+0x1a>
 8004c8a:	bf00      	nop
 8004c8c:	3fe921fb 	.word	0x3fe921fb
 8004c90:	7fefffff 	.word	0x7fefffff
 8004c94:	00000000 	.word	0x00000000

08004c98 <__kernel_cos>:
 8004c98:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c9c:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004ca0:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004ca4:	4680      	mov	r8, r0
 8004ca6:	4689      	mov	r9, r1
 8004ca8:	e9cd 2300 	strd	r2, r3, [sp]
 8004cac:	d204      	bcs.n	8004cb8 <__kernel_cos+0x20>
 8004cae:	f7fb fea5 	bl	80009fc <__aeabi_d2iz>
 8004cb2:	2800      	cmp	r0, #0
 8004cb4:	f000 8086 	beq.w	8004dc4 <__kernel_cos+0x12c>
 8004cb8:	4642      	mov	r2, r8
 8004cba:	464b      	mov	r3, r9
 8004cbc:	4640      	mov	r0, r8
 8004cbe:	4649      	mov	r1, r9
 8004cc0:	f7fb fc02 	bl	80004c8 <__aeabi_dmul>
 8004cc4:	2200      	movs	r2, #0
 8004cc6:	4b4e      	ldr	r3, [pc, #312]	@ (8004e00 <__kernel_cos+0x168>)
 8004cc8:	4604      	mov	r4, r0
 8004cca:	460d      	mov	r5, r1
 8004ccc:	f7fb fbfc 	bl	80004c8 <__aeabi_dmul>
 8004cd0:	a33f      	add	r3, pc, #252	@ (adr r3, 8004dd0 <__kernel_cos+0x138>)
 8004cd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd6:	4682      	mov	sl, r0
 8004cd8:	468b      	mov	fp, r1
 8004cda:	4620      	mov	r0, r4
 8004cdc:	4629      	mov	r1, r5
 8004cde:	f7fb fbf3 	bl	80004c8 <__aeabi_dmul>
 8004ce2:	a33d      	add	r3, pc, #244	@ (adr r3, 8004dd8 <__kernel_cos+0x140>)
 8004ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce8:	f7fb fa38 	bl	800015c <__adddf3>
 8004cec:	4622      	mov	r2, r4
 8004cee:	462b      	mov	r3, r5
 8004cf0:	f7fb fbea 	bl	80004c8 <__aeabi_dmul>
 8004cf4:	a33a      	add	r3, pc, #232	@ (adr r3, 8004de0 <__kernel_cos+0x148>)
 8004cf6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfa:	f7fb fa2d 	bl	8000158 <__aeabi_dsub>
 8004cfe:	4622      	mov	r2, r4
 8004d00:	462b      	mov	r3, r5
 8004d02:	f7fb fbe1 	bl	80004c8 <__aeabi_dmul>
 8004d06:	a338      	add	r3, pc, #224	@ (adr r3, 8004de8 <__kernel_cos+0x150>)
 8004d08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d0c:	f7fb fa26 	bl	800015c <__adddf3>
 8004d10:	4622      	mov	r2, r4
 8004d12:	462b      	mov	r3, r5
 8004d14:	f7fb fbd8 	bl	80004c8 <__aeabi_dmul>
 8004d18:	a335      	add	r3, pc, #212	@ (adr r3, 8004df0 <__kernel_cos+0x158>)
 8004d1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1e:	f7fb fa1b 	bl	8000158 <__aeabi_dsub>
 8004d22:	4622      	mov	r2, r4
 8004d24:	462b      	mov	r3, r5
 8004d26:	f7fb fbcf 	bl	80004c8 <__aeabi_dmul>
 8004d2a:	a333      	add	r3, pc, #204	@ (adr r3, 8004df8 <__kernel_cos+0x160>)
 8004d2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d30:	f7fb fa14 	bl	800015c <__adddf3>
 8004d34:	4622      	mov	r2, r4
 8004d36:	462b      	mov	r3, r5
 8004d38:	f7fb fbc6 	bl	80004c8 <__aeabi_dmul>
 8004d3c:	4622      	mov	r2, r4
 8004d3e:	462b      	mov	r3, r5
 8004d40:	f7fb fbc2 	bl	80004c8 <__aeabi_dmul>
 8004d44:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d48:	4604      	mov	r4, r0
 8004d4a:	460d      	mov	r5, r1
 8004d4c:	4640      	mov	r0, r8
 8004d4e:	4649      	mov	r1, r9
 8004d50:	f7fb fbba 	bl	80004c8 <__aeabi_dmul>
 8004d54:	460b      	mov	r3, r1
 8004d56:	4602      	mov	r2, r0
 8004d58:	4629      	mov	r1, r5
 8004d5a:	4620      	mov	r0, r4
 8004d5c:	f7fb f9fc 	bl	8000158 <__aeabi_dsub>
 8004d60:	4b28      	ldr	r3, [pc, #160]	@ (8004e04 <__kernel_cos+0x16c>)
 8004d62:	4680      	mov	r8, r0
 8004d64:	429e      	cmp	r6, r3
 8004d66:	4689      	mov	r9, r1
 8004d68:	d80e      	bhi.n	8004d88 <__kernel_cos+0xf0>
 8004d6a:	4602      	mov	r2, r0
 8004d6c:	460b      	mov	r3, r1
 8004d6e:	4650      	mov	r0, sl
 8004d70:	4659      	mov	r1, fp
 8004d72:	f7fb f9f1 	bl	8000158 <__aeabi_dsub>
 8004d76:	4602      	mov	r2, r0
 8004d78:	2000      	movs	r0, #0
 8004d7a:	460b      	mov	r3, r1
 8004d7c:	4922      	ldr	r1, [pc, #136]	@ (8004e08 <__kernel_cos+0x170>)
 8004d7e:	f7fb f9eb 	bl	8000158 <__aeabi_dsub>
 8004d82:	b003      	add	sp, #12
 8004d84:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d88:	2400      	movs	r4, #0
 8004d8a:	4b20      	ldr	r3, [pc, #128]	@ (8004e0c <__kernel_cos+0x174>)
 8004d8c:	4622      	mov	r2, r4
 8004d8e:	429e      	cmp	r6, r3
 8004d90:	bf8c      	ite	hi
 8004d92:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004e10 <__kernel_cos+0x178>)
 8004d94:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004d98:	462b      	mov	r3, r5
 8004d9a:	2000      	movs	r0, #0
 8004d9c:	491a      	ldr	r1, [pc, #104]	@ (8004e08 <__kernel_cos+0x170>)
 8004d9e:	f7fb f9db 	bl	8000158 <__aeabi_dsub>
 8004da2:	4622      	mov	r2, r4
 8004da4:	4606      	mov	r6, r0
 8004da6:	460f      	mov	r7, r1
 8004da8:	462b      	mov	r3, r5
 8004daa:	4650      	mov	r0, sl
 8004dac:	4659      	mov	r1, fp
 8004dae:	f7fb f9d3 	bl	8000158 <__aeabi_dsub>
 8004db2:	4642      	mov	r2, r8
 8004db4:	464b      	mov	r3, r9
 8004db6:	f7fb f9cf 	bl	8000158 <__aeabi_dsub>
 8004dba:	4602      	mov	r2, r0
 8004dbc:	460b      	mov	r3, r1
 8004dbe:	4630      	mov	r0, r6
 8004dc0:	4639      	mov	r1, r7
 8004dc2:	e7dc      	b.n	8004d7e <__kernel_cos+0xe6>
 8004dc4:	2000      	movs	r0, #0
 8004dc6:	4910      	ldr	r1, [pc, #64]	@ (8004e08 <__kernel_cos+0x170>)
 8004dc8:	e7db      	b.n	8004d82 <__kernel_cos+0xea>
 8004dca:	bf00      	nop
 8004dcc:	f3af 8000 	nop.w
 8004dd0:	be8838d4 	.word	0xbe8838d4
 8004dd4:	bda8fae9 	.word	0xbda8fae9
 8004dd8:	bdb4b1c4 	.word	0xbdb4b1c4
 8004ddc:	3e21ee9e 	.word	0x3e21ee9e
 8004de0:	809c52ad 	.word	0x809c52ad
 8004de4:	3e927e4f 	.word	0x3e927e4f
 8004de8:	19cb1590 	.word	0x19cb1590
 8004dec:	3efa01a0 	.word	0x3efa01a0
 8004df0:	16c15177 	.word	0x16c15177
 8004df4:	3f56c16c 	.word	0x3f56c16c
 8004df8:	5555554c 	.word	0x5555554c
 8004dfc:	3fa55555 	.word	0x3fa55555
 8004e00:	3fe00000 	.word	0x3fe00000
 8004e04:	3fd33332 	.word	0x3fd33332
 8004e08:	3ff00000 	.word	0x3ff00000
 8004e0c:	3fe90000 	.word	0x3fe90000
 8004e10:	3fd20000 	.word	0x3fd20000
 8004e14:	00000000 	.word	0x00000000

08004e18 <__kernel_sin>:
 8004e18:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e1c:	461f      	mov	r7, r3
 8004e1e:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e22:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004e26:	4604      	mov	r4, r0
 8004e28:	460d      	mov	r5, r1
 8004e2a:	4616      	mov	r6, r2
 8004e2c:	b085      	sub	sp, #20
 8004e2e:	d203      	bcs.n	8004e38 <__kernel_sin+0x20>
 8004e30:	f7fb fde4 	bl	80009fc <__aeabi_d2iz>
 8004e34:	2800      	cmp	r0, #0
 8004e36:	d051      	beq.n	8004edc <__kernel_sin+0xc4>
 8004e38:	4622      	mov	r2, r4
 8004e3a:	462b      	mov	r3, r5
 8004e3c:	4620      	mov	r0, r4
 8004e3e:	4629      	mov	r1, r5
 8004e40:	f7fb fb42 	bl	80004c8 <__aeabi_dmul>
 8004e44:	4682      	mov	sl, r0
 8004e46:	468b      	mov	fp, r1
 8004e48:	4602      	mov	r2, r0
 8004e4a:	460b      	mov	r3, r1
 8004e4c:	4620      	mov	r0, r4
 8004e4e:	4629      	mov	r1, r5
 8004e50:	f7fb fb3a 	bl	80004c8 <__aeabi_dmul>
 8004e54:	a33e      	add	r3, pc, #248	@ (adr r3, 8004f50 <__kernel_sin+0x138>)
 8004e56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5a:	4680      	mov	r8, r0
 8004e5c:	4689      	mov	r9, r1
 8004e5e:	4650      	mov	r0, sl
 8004e60:	4659      	mov	r1, fp
 8004e62:	f7fb fb31 	bl	80004c8 <__aeabi_dmul>
 8004e66:	a33c      	add	r3, pc, #240	@ (adr r3, 8004f58 <__kernel_sin+0x140>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	f7fb f974 	bl	8000158 <__aeabi_dsub>
 8004e70:	4652      	mov	r2, sl
 8004e72:	465b      	mov	r3, fp
 8004e74:	f7fb fb28 	bl	80004c8 <__aeabi_dmul>
 8004e78:	a339      	add	r3, pc, #228	@ (adr r3, 8004f60 <__kernel_sin+0x148>)
 8004e7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e7e:	f7fb f96d 	bl	800015c <__adddf3>
 8004e82:	4652      	mov	r2, sl
 8004e84:	465b      	mov	r3, fp
 8004e86:	f7fb fb1f 	bl	80004c8 <__aeabi_dmul>
 8004e8a:	a337      	add	r3, pc, #220	@ (adr r3, 8004f68 <__kernel_sin+0x150>)
 8004e8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e90:	f7fb f962 	bl	8000158 <__aeabi_dsub>
 8004e94:	4652      	mov	r2, sl
 8004e96:	465b      	mov	r3, fp
 8004e98:	f7fb fb16 	bl	80004c8 <__aeabi_dmul>
 8004e9c:	a334      	add	r3, pc, #208	@ (adr r3, 8004f70 <__kernel_sin+0x158>)
 8004e9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea2:	f7fb f95b 	bl	800015c <__adddf3>
 8004ea6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004ea8:	e9cd 0100 	strd	r0, r1, [sp]
 8004eac:	b9db      	cbnz	r3, 8004ee6 <__kernel_sin+0xce>
 8004eae:	4602      	mov	r2, r0
 8004eb0:	460b      	mov	r3, r1
 8004eb2:	4650      	mov	r0, sl
 8004eb4:	4659      	mov	r1, fp
 8004eb6:	f7fb fb07 	bl	80004c8 <__aeabi_dmul>
 8004eba:	a32f      	add	r3, pc, #188	@ (adr r3, 8004f78 <__kernel_sin+0x160>)
 8004ebc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ec0:	f7fb f94a 	bl	8000158 <__aeabi_dsub>
 8004ec4:	4642      	mov	r2, r8
 8004ec6:	464b      	mov	r3, r9
 8004ec8:	f7fb fafe 	bl	80004c8 <__aeabi_dmul>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	460b      	mov	r3, r1
 8004ed0:	4620      	mov	r0, r4
 8004ed2:	4629      	mov	r1, r5
 8004ed4:	f7fb f942 	bl	800015c <__adddf3>
 8004ed8:	4604      	mov	r4, r0
 8004eda:	460d      	mov	r5, r1
 8004edc:	4620      	mov	r0, r4
 8004ede:	4629      	mov	r1, r5
 8004ee0:	b005      	add	sp, #20
 8004ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	4630      	mov	r0, r6
 8004eea:	4639      	mov	r1, r7
 8004eec:	4b24      	ldr	r3, [pc, #144]	@ (8004f80 <__kernel_sin+0x168>)
 8004eee:	f7fb faeb 	bl	80004c8 <__aeabi_dmul>
 8004ef2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ef6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004efa:	4640      	mov	r0, r8
 8004efc:	4649      	mov	r1, r9
 8004efe:	f7fb fae3 	bl	80004c8 <__aeabi_dmul>
 8004f02:	4602      	mov	r2, r0
 8004f04:	460b      	mov	r3, r1
 8004f06:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004f0a:	f7fb f925 	bl	8000158 <__aeabi_dsub>
 8004f0e:	4652      	mov	r2, sl
 8004f10:	465b      	mov	r3, fp
 8004f12:	f7fb fad9 	bl	80004c8 <__aeabi_dmul>
 8004f16:	4632      	mov	r2, r6
 8004f18:	463b      	mov	r3, r7
 8004f1a:	f7fb f91d 	bl	8000158 <__aeabi_dsub>
 8004f1e:	a316      	add	r3, pc, #88	@ (adr r3, 8004f78 <__kernel_sin+0x160>)
 8004f20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f24:	4606      	mov	r6, r0
 8004f26:	460f      	mov	r7, r1
 8004f28:	4640      	mov	r0, r8
 8004f2a:	4649      	mov	r1, r9
 8004f2c:	f7fb facc 	bl	80004c8 <__aeabi_dmul>
 8004f30:	4602      	mov	r2, r0
 8004f32:	460b      	mov	r3, r1
 8004f34:	4630      	mov	r0, r6
 8004f36:	4639      	mov	r1, r7
 8004f38:	f7fb f910 	bl	800015c <__adddf3>
 8004f3c:	4602      	mov	r2, r0
 8004f3e:	460b      	mov	r3, r1
 8004f40:	4620      	mov	r0, r4
 8004f42:	4629      	mov	r1, r5
 8004f44:	f7fb f908 	bl	8000158 <__aeabi_dsub>
 8004f48:	e7c6      	b.n	8004ed8 <__kernel_sin+0xc0>
 8004f4a:	bf00      	nop
 8004f4c:	f3af 8000 	nop.w
 8004f50:	5acfd57c 	.word	0x5acfd57c
 8004f54:	3de5d93a 	.word	0x3de5d93a
 8004f58:	8a2b9ceb 	.word	0x8a2b9ceb
 8004f5c:	3e5ae5e6 	.word	0x3e5ae5e6
 8004f60:	57b1fe7d 	.word	0x57b1fe7d
 8004f64:	3ec71de3 	.word	0x3ec71de3
 8004f68:	19c161d5 	.word	0x19c161d5
 8004f6c:	3f2a01a0 	.word	0x3f2a01a0
 8004f70:	1110f8a6 	.word	0x1110f8a6
 8004f74:	3f811111 	.word	0x3f811111
 8004f78:	55555549 	.word	0x55555549
 8004f7c:	3fc55555 	.word	0x3fc55555
 8004f80:	3fe00000 	.word	0x3fe00000
 8004f84:	00000000 	.word	0x00000000

08004f88 <__kernel_tan>:
 8004f88:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f8c:	4699      	mov	r9, r3
 8004f8e:	4b34      	ldr	r3, [pc, #208]	@ (8005060 <__kernel_tan+0xd8>)
 8004f90:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004f94:	b089      	sub	sp, #36	@ 0x24
 8004f96:	429e      	cmp	r6, r3
 8004f98:	4682      	mov	sl, r0
 8004f9a:	468b      	mov	fp, r1
 8004f9c:	4690      	mov	r8, r2
 8004f9e:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8004fa0:	9102      	str	r1, [sp, #8]
 8004fa2:	d863      	bhi.n	800506c <__kernel_tan+0xe4>
 8004fa4:	f7fb fd2a 	bl	80009fc <__aeabi_d2iz>
 8004fa8:	4605      	mov	r5, r0
 8004faa:	2800      	cmp	r0, #0
 8004fac:	f040 8084 	bne.w	80050b8 <__kernel_tan+0x130>
 8004fb0:	4652      	mov	r2, sl
 8004fb2:	1c7b      	adds	r3, r7, #1
 8004fb4:	4313      	orrs	r3, r2
 8004fb6:	4333      	orrs	r3, r6
 8004fb8:	d110      	bne.n	8004fdc <__kernel_tan+0x54>
 8004fba:	4650      	mov	r0, sl
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	f000 fbd9 	bl	8005774 <fabs>
 8004fc2:	4602      	mov	r2, r0
 8004fc4:	460b      	mov	r3, r1
 8004fc6:	2000      	movs	r0, #0
 8004fc8:	4926      	ldr	r1, [pc, #152]	@ (8005064 <__kernel_tan+0xdc>)
 8004fca:	f7fb fba7 	bl	800071c <__aeabi_ddiv>
 8004fce:	4682      	mov	sl, r0
 8004fd0:	468b      	mov	fp, r1
 8004fd2:	4650      	mov	r0, sl
 8004fd4:	4659      	mov	r1, fp
 8004fd6:	b009      	add	sp, #36	@ 0x24
 8004fd8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fdc:	2f01      	cmp	r7, #1
 8004fde:	d0f8      	beq.n	8004fd2 <__kernel_tan+0x4a>
 8004fe0:	4642      	mov	r2, r8
 8004fe2:	464b      	mov	r3, r9
 8004fe4:	4650      	mov	r0, sl
 8004fe6:	4659      	mov	r1, fp
 8004fe8:	f7fb f8b8 	bl	800015c <__adddf3>
 8004fec:	4602      	mov	r2, r0
 8004fee:	460b      	mov	r3, r1
 8004ff0:	460f      	mov	r7, r1
 8004ff2:	2000      	movs	r0, #0
 8004ff4:	491c      	ldr	r1, [pc, #112]	@ (8005068 <__kernel_tan+0xe0>)
 8004ff6:	f7fb fb91 	bl	800071c <__aeabi_ddiv>
 8004ffa:	462e      	mov	r6, r5
 8004ffc:	e9cd 0100 	strd	r0, r1, [sp]
 8005000:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005004:	462c      	mov	r4, r5
 8005006:	4652      	mov	r2, sl
 8005008:	461d      	mov	r5, r3
 800500a:	4630      	mov	r0, r6
 800500c:	465b      	mov	r3, fp
 800500e:	4639      	mov	r1, r7
 8005010:	f7fb f8a2 	bl	8000158 <__aeabi_dsub>
 8005014:	4602      	mov	r2, r0
 8005016:	460b      	mov	r3, r1
 8005018:	4640      	mov	r0, r8
 800501a:	4649      	mov	r1, r9
 800501c:	f7fb f89c 	bl	8000158 <__aeabi_dsub>
 8005020:	4632      	mov	r2, r6
 8005022:	462b      	mov	r3, r5
 8005024:	f7fb fa50 	bl	80004c8 <__aeabi_dmul>
 8005028:	4632      	mov	r2, r6
 800502a:	4682      	mov	sl, r0
 800502c:	468b      	mov	fp, r1
 800502e:	462b      	mov	r3, r5
 8005030:	4630      	mov	r0, r6
 8005032:	4639      	mov	r1, r7
 8005034:	f7fb fa48 	bl	80004c8 <__aeabi_dmul>
 8005038:	2200      	movs	r2, #0
 800503a:	4b0a      	ldr	r3, [pc, #40]	@ (8005064 <__kernel_tan+0xdc>)
 800503c:	f7fb f88e 	bl	800015c <__adddf3>
 8005040:	4602      	mov	r2, r0
 8005042:	460b      	mov	r3, r1
 8005044:	4650      	mov	r0, sl
 8005046:	4659      	mov	r1, fp
 8005048:	f7fb f888 	bl	800015c <__adddf3>
 800504c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005050:	f7fb fa3a 	bl	80004c8 <__aeabi_dmul>
 8005054:	4622      	mov	r2, r4
 8005056:	462b      	mov	r3, r5
 8005058:	f7fb f880 	bl	800015c <__adddf3>
 800505c:	e7b7      	b.n	8004fce <__kernel_tan+0x46>
 800505e:	bf00      	nop
 8005060:	3e2fffff 	.word	0x3e2fffff
 8005064:	3ff00000 	.word	0x3ff00000
 8005068:	bff00000 	.word	0xbff00000
 800506c:	4bc2      	ldr	r3, [pc, #776]	@ (8005378 <__kernel_tan+0x3f0>)
 800506e:	429e      	cmp	r6, r3
 8005070:	d922      	bls.n	80050b8 <__kernel_tan+0x130>
 8005072:	9b02      	ldr	r3, [sp, #8]
 8005074:	2b00      	cmp	r3, #0
 8005076:	da05      	bge.n	8005084 <__kernel_tan+0xfc>
 8005078:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800507c:	469b      	mov	fp, r3
 800507e:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8005082:	4699      	mov	r9, r3
 8005084:	a19e      	add	r1, pc, #632	@ (adr r1, 8005300 <__kernel_tan+0x378>)
 8005086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800508a:	4652      	mov	r2, sl
 800508c:	465b      	mov	r3, fp
 800508e:	f7fb f863 	bl	8000158 <__aeabi_dsub>
 8005092:	4604      	mov	r4, r0
 8005094:	460d      	mov	r5, r1
 8005096:	a19c      	add	r1, pc, #624	@ (adr r1, 8005308 <__kernel_tan+0x380>)
 8005098:	e9d1 0100 	ldrd	r0, r1, [r1]
 800509c:	4642      	mov	r2, r8
 800509e:	464b      	mov	r3, r9
 80050a0:	f7fb f85a 	bl	8000158 <__aeabi_dsub>
 80050a4:	4622      	mov	r2, r4
 80050a6:	462b      	mov	r3, r5
 80050a8:	f7fb f858 	bl	800015c <__adddf3>
 80050ac:	f04f 0800 	mov.w	r8, #0
 80050b0:	4682      	mov	sl, r0
 80050b2:	468b      	mov	fp, r1
 80050b4:	f04f 0900 	mov.w	r9, #0
 80050b8:	4652      	mov	r2, sl
 80050ba:	465b      	mov	r3, fp
 80050bc:	4650      	mov	r0, sl
 80050be:	4659      	mov	r1, fp
 80050c0:	f7fb fa02 	bl	80004c8 <__aeabi_dmul>
 80050c4:	4602      	mov	r2, r0
 80050c6:	460b      	mov	r3, r1
 80050c8:	e9cd 2300 	strd	r2, r3, [sp]
 80050cc:	f7fb f9fc 	bl	80004c8 <__aeabi_dmul>
 80050d0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050d4:	4604      	mov	r4, r0
 80050d6:	460d      	mov	r5, r1
 80050d8:	4650      	mov	r0, sl
 80050da:	4659      	mov	r1, fp
 80050dc:	f7fb f9f4 	bl	80004c8 <__aeabi_dmul>
 80050e0:	a38b      	add	r3, pc, #556	@ (adr r3, 8005310 <__kernel_tan+0x388>)
 80050e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050ea:	4620      	mov	r0, r4
 80050ec:	4629      	mov	r1, r5
 80050ee:	f7fb f9eb 	bl	80004c8 <__aeabi_dmul>
 80050f2:	a389      	add	r3, pc, #548	@ (adr r3, 8005318 <__kernel_tan+0x390>)
 80050f4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f8:	f7fb f830 	bl	800015c <__adddf3>
 80050fc:	4622      	mov	r2, r4
 80050fe:	462b      	mov	r3, r5
 8005100:	f7fb f9e2 	bl	80004c8 <__aeabi_dmul>
 8005104:	a386      	add	r3, pc, #536	@ (adr r3, 8005320 <__kernel_tan+0x398>)
 8005106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800510a:	f7fb f827 	bl	800015c <__adddf3>
 800510e:	4622      	mov	r2, r4
 8005110:	462b      	mov	r3, r5
 8005112:	f7fb f9d9 	bl	80004c8 <__aeabi_dmul>
 8005116:	a384      	add	r3, pc, #528	@ (adr r3, 8005328 <__kernel_tan+0x3a0>)
 8005118:	e9d3 2300 	ldrd	r2, r3, [r3]
 800511c:	f7fb f81e 	bl	800015c <__adddf3>
 8005120:	4622      	mov	r2, r4
 8005122:	462b      	mov	r3, r5
 8005124:	f7fb f9d0 	bl	80004c8 <__aeabi_dmul>
 8005128:	a381      	add	r3, pc, #516	@ (adr r3, 8005330 <__kernel_tan+0x3a8>)
 800512a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512e:	f7fb f815 	bl	800015c <__adddf3>
 8005132:	4622      	mov	r2, r4
 8005134:	462b      	mov	r3, r5
 8005136:	f7fb f9c7 	bl	80004c8 <__aeabi_dmul>
 800513a:	a37f      	add	r3, pc, #508	@ (adr r3, 8005338 <__kernel_tan+0x3b0>)
 800513c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005140:	f7fb f80c 	bl	800015c <__adddf3>
 8005144:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005148:	f7fb f9be 	bl	80004c8 <__aeabi_dmul>
 800514c:	a37c      	add	r3, pc, #496	@ (adr r3, 8005340 <__kernel_tan+0x3b8>)
 800514e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005152:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005156:	4620      	mov	r0, r4
 8005158:	4629      	mov	r1, r5
 800515a:	f7fb f9b5 	bl	80004c8 <__aeabi_dmul>
 800515e:	a37a      	add	r3, pc, #488	@ (adr r3, 8005348 <__kernel_tan+0x3c0>)
 8005160:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005164:	f7fa fffa 	bl	800015c <__adddf3>
 8005168:	4622      	mov	r2, r4
 800516a:	462b      	mov	r3, r5
 800516c:	f7fb f9ac 	bl	80004c8 <__aeabi_dmul>
 8005170:	a377      	add	r3, pc, #476	@ (adr r3, 8005350 <__kernel_tan+0x3c8>)
 8005172:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005176:	f7fa fff1 	bl	800015c <__adddf3>
 800517a:	4622      	mov	r2, r4
 800517c:	462b      	mov	r3, r5
 800517e:	f7fb f9a3 	bl	80004c8 <__aeabi_dmul>
 8005182:	a375      	add	r3, pc, #468	@ (adr r3, 8005358 <__kernel_tan+0x3d0>)
 8005184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005188:	f7fa ffe8 	bl	800015c <__adddf3>
 800518c:	4622      	mov	r2, r4
 800518e:	462b      	mov	r3, r5
 8005190:	f7fb f99a 	bl	80004c8 <__aeabi_dmul>
 8005194:	a372      	add	r3, pc, #456	@ (adr r3, 8005360 <__kernel_tan+0x3d8>)
 8005196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800519a:	f7fa ffdf 	bl	800015c <__adddf3>
 800519e:	4622      	mov	r2, r4
 80051a0:	462b      	mov	r3, r5
 80051a2:	f7fb f991 	bl	80004c8 <__aeabi_dmul>
 80051a6:	a370      	add	r3, pc, #448	@ (adr r3, 8005368 <__kernel_tan+0x3e0>)
 80051a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ac:	f7fa ffd6 	bl	800015c <__adddf3>
 80051b0:	4602      	mov	r2, r0
 80051b2:	460b      	mov	r3, r1
 80051b4:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051b8:	f7fa ffd0 	bl	800015c <__adddf3>
 80051bc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051c0:	f7fb f982 	bl	80004c8 <__aeabi_dmul>
 80051c4:	4642      	mov	r2, r8
 80051c6:	464b      	mov	r3, r9
 80051c8:	f7fa ffc8 	bl	800015c <__adddf3>
 80051cc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051d0:	f7fb f97a 	bl	80004c8 <__aeabi_dmul>
 80051d4:	4642      	mov	r2, r8
 80051d6:	464b      	mov	r3, r9
 80051d8:	f7fa ffc0 	bl	800015c <__adddf3>
 80051dc:	a364      	add	r3, pc, #400	@ (adr r3, 8005370 <__kernel_tan+0x3e8>)
 80051de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e2:	4604      	mov	r4, r0
 80051e4:	460d      	mov	r5, r1
 80051e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051ea:	f7fb f96d 	bl	80004c8 <__aeabi_dmul>
 80051ee:	4622      	mov	r2, r4
 80051f0:	462b      	mov	r3, r5
 80051f2:	f7fa ffb3 	bl	800015c <__adddf3>
 80051f6:	460b      	mov	r3, r1
 80051f8:	e9cd 0100 	strd	r0, r1, [sp]
 80051fc:	4602      	mov	r2, r0
 80051fe:	4659      	mov	r1, fp
 8005200:	4650      	mov	r0, sl
 8005202:	f7fa ffab 	bl	800015c <__adddf3>
 8005206:	4b5c      	ldr	r3, [pc, #368]	@ (8005378 <__kernel_tan+0x3f0>)
 8005208:	4604      	mov	r4, r0
 800520a:	429e      	cmp	r6, r3
 800520c:	460d      	mov	r5, r1
 800520e:	d93e      	bls.n	800528e <__kernel_tan+0x306>
 8005210:	4638      	mov	r0, r7
 8005212:	f7fb f8ef 	bl	80003f4 <__aeabi_i2d>
 8005216:	4622      	mov	r2, r4
 8005218:	4680      	mov	r8, r0
 800521a:	4689      	mov	r9, r1
 800521c:	462b      	mov	r3, r5
 800521e:	4620      	mov	r0, r4
 8005220:	4629      	mov	r1, r5
 8005222:	f7fb f951 	bl	80004c8 <__aeabi_dmul>
 8005226:	4642      	mov	r2, r8
 8005228:	4606      	mov	r6, r0
 800522a:	460f      	mov	r7, r1
 800522c:	464b      	mov	r3, r9
 800522e:	4620      	mov	r0, r4
 8005230:	4629      	mov	r1, r5
 8005232:	f7fa ff93 	bl	800015c <__adddf3>
 8005236:	4602      	mov	r2, r0
 8005238:	460b      	mov	r3, r1
 800523a:	4630      	mov	r0, r6
 800523c:	4639      	mov	r1, r7
 800523e:	f7fb fa6d 	bl	800071c <__aeabi_ddiv>
 8005242:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005246:	f7fa ff87 	bl	8000158 <__aeabi_dsub>
 800524a:	4602      	mov	r2, r0
 800524c:	460b      	mov	r3, r1
 800524e:	4650      	mov	r0, sl
 8005250:	4659      	mov	r1, fp
 8005252:	f7fa ff81 	bl	8000158 <__aeabi_dsub>
 8005256:	4602      	mov	r2, r0
 8005258:	460b      	mov	r3, r1
 800525a:	f7fa ff7f 	bl	800015c <__adddf3>
 800525e:	4602      	mov	r2, r0
 8005260:	460b      	mov	r3, r1
 8005262:	4640      	mov	r0, r8
 8005264:	4649      	mov	r1, r9
 8005266:	f7fa ff77 	bl	8000158 <__aeabi_dsub>
 800526a:	9b02      	ldr	r3, [sp, #8]
 800526c:	4604      	mov	r4, r0
 800526e:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 8005272:	f00a 0a02 	and.w	sl, sl, #2
 8005276:	f1ca 0001 	rsb	r0, sl, #1
 800527a:	460d      	mov	r5, r1
 800527c:	f7fb f8ba 	bl	80003f4 <__aeabi_i2d>
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	4620      	mov	r0, r4
 8005286:	4629      	mov	r1, r5
 8005288:	f7fb f91e 	bl	80004c8 <__aeabi_dmul>
 800528c:	e69f      	b.n	8004fce <__kernel_tan+0x46>
 800528e:	2f01      	cmp	r7, #1
 8005290:	d033      	beq.n	80052fa <__kernel_tan+0x372>
 8005292:	f04f 0800 	mov.w	r8, #0
 8005296:	4689      	mov	r9, r1
 8005298:	4602      	mov	r2, r0
 800529a:	460b      	mov	r3, r1
 800529c:	2000      	movs	r0, #0
 800529e:	4937      	ldr	r1, [pc, #220]	@ (800537c <__kernel_tan+0x3f4>)
 80052a0:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80052a4:	f7fb fa3a 	bl	800071c <__aeabi_ddiv>
 80052a8:	4652      	mov	r2, sl
 80052aa:	460f      	mov	r7, r1
 80052ac:	465b      	mov	r3, fp
 80052ae:	4606      	mov	r6, r0
 80052b0:	460d      	mov	r5, r1
 80052b2:	4640      	mov	r0, r8
 80052b4:	4649      	mov	r1, r9
 80052b6:	f7fa ff4f 	bl	8000158 <__aeabi_dsub>
 80052ba:	4602      	mov	r2, r0
 80052bc:	460b      	mov	r3, r1
 80052be:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052c2:	f7fa ff49 	bl	8000158 <__aeabi_dsub>
 80052c6:	4642      	mov	r2, r8
 80052c8:	463b      	mov	r3, r7
 80052ca:	f7fb f8fd 	bl	80004c8 <__aeabi_dmul>
 80052ce:	4642      	mov	r2, r8
 80052d0:	4682      	mov	sl, r0
 80052d2:	468b      	mov	fp, r1
 80052d4:	463b      	mov	r3, r7
 80052d6:	4640      	mov	r0, r8
 80052d8:	4649      	mov	r1, r9
 80052da:	f7fb f8f5 	bl	80004c8 <__aeabi_dmul>
 80052de:	2200      	movs	r2, #0
 80052e0:	4b27      	ldr	r3, [pc, #156]	@ (8005380 <__kernel_tan+0x3f8>)
 80052e2:	f7fa ff3b 	bl	800015c <__adddf3>
 80052e6:	4602      	mov	r2, r0
 80052e8:	460b      	mov	r3, r1
 80052ea:	4650      	mov	r0, sl
 80052ec:	4659      	mov	r1, fp
 80052ee:	f7fa ff35 	bl	800015c <__adddf3>
 80052f2:	4644      	mov	r4, r8
 80052f4:	4632      	mov	r2, r6
 80052f6:	463b      	mov	r3, r7
 80052f8:	e6aa      	b.n	8005050 <__kernel_tan+0xc8>
 80052fa:	4682      	mov	sl, r0
 80052fc:	468b      	mov	fp, r1
 80052fe:	e668      	b.n	8004fd2 <__kernel_tan+0x4a>
 8005300:	54442d18 	.word	0x54442d18
 8005304:	3fe921fb 	.word	0x3fe921fb
 8005308:	33145c07 	.word	0x33145c07
 800530c:	3c81a626 	.word	0x3c81a626
 8005310:	74bf7ad4 	.word	0x74bf7ad4
 8005314:	3efb2a70 	.word	0x3efb2a70
 8005318:	32f0a7e9 	.word	0x32f0a7e9
 800531c:	3f12b80f 	.word	0x3f12b80f
 8005320:	1a8d1068 	.word	0x1a8d1068
 8005324:	3f3026f7 	.word	0x3f3026f7
 8005328:	fee08315 	.word	0xfee08315
 800532c:	3f57dbc8 	.word	0x3f57dbc8
 8005330:	e96e8493 	.word	0xe96e8493
 8005334:	3f8226e3 	.word	0x3f8226e3
 8005338:	1bb341fe 	.word	0x1bb341fe
 800533c:	3faba1ba 	.word	0x3faba1ba
 8005340:	db605373 	.word	0xdb605373
 8005344:	bef375cb 	.word	0xbef375cb
 8005348:	a03792a6 	.word	0xa03792a6
 800534c:	3f147e88 	.word	0x3f147e88
 8005350:	f2f26501 	.word	0xf2f26501
 8005354:	3f4344d8 	.word	0x3f4344d8
 8005358:	c9560328 	.word	0xc9560328
 800535c:	3f6d6d22 	.word	0x3f6d6d22
 8005360:	8406d637 	.word	0x8406d637
 8005364:	3f9664f4 	.word	0x3f9664f4
 8005368:	1110fe7a 	.word	0x1110fe7a
 800536c:	3fc11111 	.word	0x3fc11111
 8005370:	55555563 	.word	0x55555563
 8005374:	3fd55555 	.word	0x3fd55555
 8005378:	3fe59427 	.word	0x3fe59427
 800537c:	bff00000 	.word	0xbff00000
 8005380:	3ff00000 	.word	0x3ff00000
 8005384:	00000000 	.word	0x00000000

08005388 <__ieee754_rem_pio2>:
 8005388:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800538c:	4bc4      	ldr	r3, [pc, #784]	@ (80056a0 <__ieee754_rem_pio2+0x318>)
 800538e:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8005392:	b08d      	sub	sp, #52	@ 0x34
 8005394:	4598      	cmp	r8, r3
 8005396:	4606      	mov	r6, r0
 8005398:	460f      	mov	r7, r1
 800539a:	4614      	mov	r4, r2
 800539c:	9104      	str	r1, [sp, #16]
 800539e:	d807      	bhi.n	80053b0 <__ieee754_rem_pio2+0x28>
 80053a0:	e9c2 6700 	strd	r6, r7, [r2]
 80053a4:	2300      	movs	r3, #0
 80053a6:	2200      	movs	r2, #0
 80053a8:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80053ac:	2500      	movs	r5, #0
 80053ae:	e026      	b.n	80053fe <__ieee754_rem_pio2+0x76>
 80053b0:	4bbc      	ldr	r3, [pc, #752]	@ (80056a4 <__ieee754_rem_pio2+0x31c>)
 80053b2:	4598      	cmp	r8, r3
 80053b4:	d876      	bhi.n	80054a4 <__ieee754_rem_pio2+0x11c>
 80053b6:	9b04      	ldr	r3, [sp, #16]
 80053b8:	4dbb      	ldr	r5, [pc, #748]	@ (80056a8 <__ieee754_rem_pio2+0x320>)
 80053ba:	2b00      	cmp	r3, #0
 80053bc:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2e0>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	dd38      	ble.n	8005436 <__ieee754_rem_pio2+0xae>
 80053c4:	f7fa fec8 	bl	8000158 <__aeabi_dsub>
 80053c8:	45a8      	cmp	r8, r5
 80053ca:	4606      	mov	r6, r0
 80053cc:	460f      	mov	r7, r1
 80053ce:	d01a      	beq.n	8005406 <__ieee754_rem_pio2+0x7e>
 80053d0:	a3a7      	add	r3, pc, #668	@ (adr r3, 8005670 <__ieee754_rem_pio2+0x2e8>)
 80053d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d6:	f7fa febf 	bl	8000158 <__aeabi_dsub>
 80053da:	4602      	mov	r2, r0
 80053dc:	460b      	mov	r3, r1
 80053de:	4680      	mov	r8, r0
 80053e0:	4689      	mov	r9, r1
 80053e2:	4630      	mov	r0, r6
 80053e4:	4639      	mov	r1, r7
 80053e6:	f7fa feb7 	bl	8000158 <__aeabi_dsub>
 80053ea:	a3a1      	add	r3, pc, #644	@ (adr r3, 8005670 <__ieee754_rem_pio2+0x2e8>)
 80053ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f0:	f7fa feb2 	bl	8000158 <__aeabi_dsub>
 80053f4:	2501      	movs	r5, #1
 80053f6:	e9c4 8900 	strd	r8, r9, [r4]
 80053fa:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053fe:	4628      	mov	r0, r5
 8005400:	b00d      	add	sp, #52	@ 0x34
 8005402:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005406:	a39c      	add	r3, pc, #624	@ (adr r3, 8005678 <__ieee754_rem_pio2+0x2f0>)
 8005408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800540c:	f7fa fea4 	bl	8000158 <__aeabi_dsub>
 8005410:	a39b      	add	r3, pc, #620	@ (adr r3, 8005680 <__ieee754_rem_pio2+0x2f8>)
 8005412:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005416:	4606      	mov	r6, r0
 8005418:	460f      	mov	r7, r1
 800541a:	f7fa fe9d 	bl	8000158 <__aeabi_dsub>
 800541e:	4602      	mov	r2, r0
 8005420:	460b      	mov	r3, r1
 8005422:	4680      	mov	r8, r0
 8005424:	4689      	mov	r9, r1
 8005426:	4630      	mov	r0, r6
 8005428:	4639      	mov	r1, r7
 800542a:	f7fa fe95 	bl	8000158 <__aeabi_dsub>
 800542e:	a394      	add	r3, pc, #592	@ (adr r3, 8005680 <__ieee754_rem_pio2+0x2f8>)
 8005430:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005434:	e7dc      	b.n	80053f0 <__ieee754_rem_pio2+0x68>
 8005436:	f7fa fe91 	bl	800015c <__adddf3>
 800543a:	45a8      	cmp	r8, r5
 800543c:	4606      	mov	r6, r0
 800543e:	460f      	mov	r7, r1
 8005440:	d018      	beq.n	8005474 <__ieee754_rem_pio2+0xec>
 8005442:	a38b      	add	r3, pc, #556	@ (adr r3, 8005670 <__ieee754_rem_pio2+0x2e8>)
 8005444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005448:	f7fa fe88 	bl	800015c <__adddf3>
 800544c:	4602      	mov	r2, r0
 800544e:	460b      	mov	r3, r1
 8005450:	4680      	mov	r8, r0
 8005452:	4689      	mov	r9, r1
 8005454:	4630      	mov	r0, r6
 8005456:	4639      	mov	r1, r7
 8005458:	f7fa fe7e 	bl	8000158 <__aeabi_dsub>
 800545c:	a384      	add	r3, pc, #528	@ (adr r3, 8005670 <__ieee754_rem_pio2+0x2e8>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fa fe7b 	bl	800015c <__adddf3>
 8005466:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 800546a:	e9c4 8900 	strd	r8, r9, [r4]
 800546e:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005472:	e7c4      	b.n	80053fe <__ieee754_rem_pio2+0x76>
 8005474:	a380      	add	r3, pc, #512	@ (adr r3, 8005678 <__ieee754_rem_pio2+0x2f0>)
 8005476:	e9d3 2300 	ldrd	r2, r3, [r3]
 800547a:	f7fa fe6f 	bl	800015c <__adddf3>
 800547e:	a380      	add	r3, pc, #512	@ (adr r3, 8005680 <__ieee754_rem_pio2+0x2f8>)
 8005480:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005484:	4606      	mov	r6, r0
 8005486:	460f      	mov	r7, r1
 8005488:	f7fa fe68 	bl	800015c <__adddf3>
 800548c:	4602      	mov	r2, r0
 800548e:	460b      	mov	r3, r1
 8005490:	4680      	mov	r8, r0
 8005492:	4689      	mov	r9, r1
 8005494:	4630      	mov	r0, r6
 8005496:	4639      	mov	r1, r7
 8005498:	f7fa fe5e 	bl	8000158 <__aeabi_dsub>
 800549c:	a378      	add	r3, pc, #480	@ (adr r3, 8005680 <__ieee754_rem_pio2+0x2f8>)
 800549e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054a2:	e7de      	b.n	8005462 <__ieee754_rem_pio2+0xda>
 80054a4:	4b81      	ldr	r3, [pc, #516]	@ (80056ac <__ieee754_rem_pio2+0x324>)
 80054a6:	4598      	cmp	r8, r3
 80054a8:	f200 80cf 	bhi.w	800564a <__ieee754_rem_pio2+0x2c2>
 80054ac:	f000 f962 	bl	8005774 <fabs>
 80054b0:	a375      	add	r3, pc, #468	@ (adr r3, 8005688 <__ieee754_rem_pio2+0x300>)
 80054b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054b6:	4606      	mov	r6, r0
 80054b8:	460f      	mov	r7, r1
 80054ba:	f7fb f805 	bl	80004c8 <__aeabi_dmul>
 80054be:	2200      	movs	r2, #0
 80054c0:	4b7b      	ldr	r3, [pc, #492]	@ (80056b0 <__ieee754_rem_pio2+0x328>)
 80054c2:	f7fa fe4b 	bl	800015c <__adddf3>
 80054c6:	f7fb fa99 	bl	80009fc <__aeabi_d2iz>
 80054ca:	4605      	mov	r5, r0
 80054cc:	f7fa ff92 	bl	80003f4 <__aeabi_i2d>
 80054d0:	4602      	mov	r2, r0
 80054d2:	460b      	mov	r3, r1
 80054d4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054d8:	a363      	add	r3, pc, #396	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2e0>)
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	f7fa fff3 	bl	80004c8 <__aeabi_dmul>
 80054e2:	4602      	mov	r2, r0
 80054e4:	460b      	mov	r3, r1
 80054e6:	4630      	mov	r0, r6
 80054e8:	4639      	mov	r1, r7
 80054ea:	f7fa fe35 	bl	8000158 <__aeabi_dsub>
 80054ee:	a360      	add	r3, pc, #384	@ (adr r3, 8005670 <__ieee754_rem_pio2+0x2e8>)
 80054f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054f4:	4682      	mov	sl, r0
 80054f6:	468b      	mov	fp, r1
 80054f8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054fc:	f7fa ffe4 	bl	80004c8 <__aeabi_dmul>
 8005500:	2d1f      	cmp	r5, #31
 8005502:	4606      	mov	r6, r0
 8005504:	460f      	mov	r7, r1
 8005506:	dc0c      	bgt.n	8005522 <__ieee754_rem_pio2+0x19a>
 8005508:	4b6a      	ldr	r3, [pc, #424]	@ (80056b4 <__ieee754_rem_pio2+0x32c>)
 800550a:	1e6a      	subs	r2, r5, #1
 800550c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005510:	4543      	cmp	r3, r8
 8005512:	d006      	beq.n	8005522 <__ieee754_rem_pio2+0x19a>
 8005514:	4632      	mov	r2, r6
 8005516:	463b      	mov	r3, r7
 8005518:	4650      	mov	r0, sl
 800551a:	4659      	mov	r1, fp
 800551c:	f7fa fe1c 	bl	8000158 <__aeabi_dsub>
 8005520:	e00e      	b.n	8005540 <__ieee754_rem_pio2+0x1b8>
 8005522:	463b      	mov	r3, r7
 8005524:	4632      	mov	r2, r6
 8005526:	4650      	mov	r0, sl
 8005528:	4659      	mov	r1, fp
 800552a:	f7fa fe15 	bl	8000158 <__aeabi_dsub>
 800552e:	ea4f 5328 	mov.w	r3, r8, asr #20
 8005532:	9305      	str	r3, [sp, #20]
 8005534:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005538:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 800553c:	2b10      	cmp	r3, #16
 800553e:	dc02      	bgt.n	8005546 <__ieee754_rem_pio2+0x1be>
 8005540:	e9c4 0100 	strd	r0, r1, [r4]
 8005544:	e039      	b.n	80055ba <__ieee754_rem_pio2+0x232>
 8005546:	a34c      	add	r3, pc, #304	@ (adr r3, 8005678 <__ieee754_rem_pio2+0x2f0>)
 8005548:	e9d3 2300 	ldrd	r2, r3, [r3]
 800554c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005550:	f7fa ffba 	bl	80004c8 <__aeabi_dmul>
 8005554:	4606      	mov	r6, r0
 8005556:	460f      	mov	r7, r1
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4650      	mov	r0, sl
 800555e:	4659      	mov	r1, fp
 8005560:	f7fa fdfa 	bl	8000158 <__aeabi_dsub>
 8005564:	4602      	mov	r2, r0
 8005566:	460b      	mov	r3, r1
 8005568:	4680      	mov	r8, r0
 800556a:	4689      	mov	r9, r1
 800556c:	4650      	mov	r0, sl
 800556e:	4659      	mov	r1, fp
 8005570:	f7fa fdf2 	bl	8000158 <__aeabi_dsub>
 8005574:	4632      	mov	r2, r6
 8005576:	463b      	mov	r3, r7
 8005578:	f7fa fdee 	bl	8000158 <__aeabi_dsub>
 800557c:	a340      	add	r3, pc, #256	@ (adr r3, 8005680 <__ieee754_rem_pio2+0x2f8>)
 800557e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800558a:	f7fa ff9d 	bl	80004c8 <__aeabi_dmul>
 800558e:	4632      	mov	r2, r6
 8005590:	463b      	mov	r3, r7
 8005592:	f7fa fde1 	bl	8000158 <__aeabi_dsub>
 8005596:	4602      	mov	r2, r0
 8005598:	460b      	mov	r3, r1
 800559a:	4606      	mov	r6, r0
 800559c:	460f      	mov	r7, r1
 800559e:	4640      	mov	r0, r8
 80055a0:	4649      	mov	r1, r9
 80055a2:	f7fa fdd9 	bl	8000158 <__aeabi_dsub>
 80055a6:	9a05      	ldr	r2, [sp, #20]
 80055a8:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80055ac:	1ad3      	subs	r3, r2, r3
 80055ae:	2b31      	cmp	r3, #49	@ 0x31
 80055b0:	dc20      	bgt.n	80055f4 <__ieee754_rem_pio2+0x26c>
 80055b2:	46c2      	mov	sl, r8
 80055b4:	46cb      	mov	fp, r9
 80055b6:	e9c4 0100 	strd	r0, r1, [r4]
 80055ba:	e9d4 8900 	ldrd	r8, r9, [r4]
 80055be:	4650      	mov	r0, sl
 80055c0:	4642      	mov	r2, r8
 80055c2:	464b      	mov	r3, r9
 80055c4:	4659      	mov	r1, fp
 80055c6:	f7fa fdc7 	bl	8000158 <__aeabi_dsub>
 80055ca:	463b      	mov	r3, r7
 80055cc:	4632      	mov	r2, r6
 80055ce:	f7fa fdc3 	bl	8000158 <__aeabi_dsub>
 80055d2:	9b04      	ldr	r3, [sp, #16]
 80055d4:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055d8:	2b00      	cmp	r3, #0
 80055da:	f6bf af10 	bge.w	80053fe <__ieee754_rem_pio2+0x76>
 80055de:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80055e2:	6063      	str	r3, [r4, #4]
 80055e4:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055e8:	f8c4 8000 	str.w	r8, [r4]
 80055ec:	60a0      	str	r0, [r4, #8]
 80055ee:	60e3      	str	r3, [r4, #12]
 80055f0:	426d      	negs	r5, r5
 80055f2:	e704      	b.n	80053fe <__ieee754_rem_pio2+0x76>
 80055f4:	a326      	add	r3, pc, #152	@ (adr r3, 8005690 <__ieee754_rem_pio2+0x308>)
 80055f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fa:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055fe:	f7fa ff63 	bl	80004c8 <__aeabi_dmul>
 8005602:	4606      	mov	r6, r0
 8005604:	460f      	mov	r7, r1
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4640      	mov	r0, r8
 800560c:	4649      	mov	r1, r9
 800560e:	f7fa fda3 	bl	8000158 <__aeabi_dsub>
 8005612:	4602      	mov	r2, r0
 8005614:	460b      	mov	r3, r1
 8005616:	4682      	mov	sl, r0
 8005618:	468b      	mov	fp, r1
 800561a:	4640      	mov	r0, r8
 800561c:	4649      	mov	r1, r9
 800561e:	f7fa fd9b 	bl	8000158 <__aeabi_dsub>
 8005622:	4632      	mov	r2, r6
 8005624:	463b      	mov	r3, r7
 8005626:	f7fa fd97 	bl	8000158 <__aeabi_dsub>
 800562a:	a31b      	add	r3, pc, #108	@ (adr r3, 8005698 <__ieee754_rem_pio2+0x310>)
 800562c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005630:	4606      	mov	r6, r0
 8005632:	460f      	mov	r7, r1
 8005634:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005638:	f7fa ff46 	bl	80004c8 <__aeabi_dmul>
 800563c:	4632      	mov	r2, r6
 800563e:	463b      	mov	r3, r7
 8005640:	f7fa fd8a 	bl	8000158 <__aeabi_dsub>
 8005644:	4606      	mov	r6, r0
 8005646:	460f      	mov	r7, r1
 8005648:	e764      	b.n	8005514 <__ieee754_rem_pio2+0x18c>
 800564a:	4b1b      	ldr	r3, [pc, #108]	@ (80056b8 <__ieee754_rem_pio2+0x330>)
 800564c:	4598      	cmp	r8, r3
 800564e:	d935      	bls.n	80056bc <__ieee754_rem_pio2+0x334>
 8005650:	4602      	mov	r2, r0
 8005652:	460b      	mov	r3, r1
 8005654:	f7fa fd80 	bl	8000158 <__aeabi_dsub>
 8005658:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800565c:	e9c4 0100 	strd	r0, r1, [r4]
 8005660:	e6a4      	b.n	80053ac <__ieee754_rem_pio2+0x24>
 8005662:	bf00      	nop
 8005664:	f3af 8000 	nop.w
 8005668:	54400000 	.word	0x54400000
 800566c:	3ff921fb 	.word	0x3ff921fb
 8005670:	1a626331 	.word	0x1a626331
 8005674:	3dd0b461 	.word	0x3dd0b461
 8005678:	1a600000 	.word	0x1a600000
 800567c:	3dd0b461 	.word	0x3dd0b461
 8005680:	2e037073 	.word	0x2e037073
 8005684:	3ba3198a 	.word	0x3ba3198a
 8005688:	6dc9c883 	.word	0x6dc9c883
 800568c:	3fe45f30 	.word	0x3fe45f30
 8005690:	2e000000 	.word	0x2e000000
 8005694:	3ba3198a 	.word	0x3ba3198a
 8005698:	252049c1 	.word	0x252049c1
 800569c:	397b839a 	.word	0x397b839a
 80056a0:	3fe921fb 	.word	0x3fe921fb
 80056a4:	4002d97b 	.word	0x4002d97b
 80056a8:	3ff921fb 	.word	0x3ff921fb
 80056ac:	413921fb 	.word	0x413921fb
 80056b0:	3fe00000 	.word	0x3fe00000
 80056b4:	08005ff4 	.word	0x08005ff4
 80056b8:	7fefffff 	.word	0x7fefffff
 80056bc:	ea4f 5528 	mov.w	r5, r8, asr #20
 80056c0:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80056c4:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80056c8:	460f      	mov	r7, r1
 80056ca:	f7fb f997 	bl	80009fc <__aeabi_d2iz>
 80056ce:	f7fa fe91 	bl	80003f4 <__aeabi_i2d>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4630      	mov	r0, r6
 80056d8:	4639      	mov	r1, r7
 80056da:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056de:	f7fa fd3b 	bl	8000158 <__aeabi_dsub>
 80056e2:	2200      	movs	r2, #0
 80056e4:	4b21      	ldr	r3, [pc, #132]	@ (800576c <__ieee754_rem_pio2+0x3e4>)
 80056e6:	f7fa feef 	bl	80004c8 <__aeabi_dmul>
 80056ea:	460f      	mov	r7, r1
 80056ec:	4606      	mov	r6, r0
 80056ee:	f7fb f985 	bl	80009fc <__aeabi_d2iz>
 80056f2:	f7fa fe7f 	bl	80003f4 <__aeabi_i2d>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8005702:	f7fa fd29 	bl	8000158 <__aeabi_dsub>
 8005706:	2200      	movs	r2, #0
 8005708:	4b18      	ldr	r3, [pc, #96]	@ (800576c <__ieee754_rem_pio2+0x3e4>)
 800570a:	f7fa fedd 	bl	80004c8 <__aeabi_dmul>
 800570e:	f04f 0803 	mov.w	r8, #3
 8005712:	2600      	movs	r6, #0
 8005714:	2700      	movs	r7, #0
 8005716:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 800571a:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 800571e:	4632      	mov	r2, r6
 8005720:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8005724:	463b      	mov	r3, r7
 8005726:	46c2      	mov	sl, r8
 8005728:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 800572c:	f7fb f934 	bl	8000998 <__aeabi_dcmpeq>
 8005730:	2800      	cmp	r0, #0
 8005732:	d1f4      	bne.n	800571e <__ieee754_rem_pio2+0x396>
 8005734:	4b0e      	ldr	r3, [pc, #56]	@ (8005770 <__ieee754_rem_pio2+0x3e8>)
 8005736:	462a      	mov	r2, r5
 8005738:	9301      	str	r3, [sp, #4]
 800573a:	2302      	movs	r3, #2
 800573c:	4621      	mov	r1, r4
 800573e:	9300      	str	r3, [sp, #0]
 8005740:	a806      	add	r0, sp, #24
 8005742:	4653      	mov	r3, sl
 8005744:	f000 f81a 	bl	800577c <__kernel_rem_pio2>
 8005748:	9b04      	ldr	r3, [sp, #16]
 800574a:	4605      	mov	r5, r0
 800574c:	2b00      	cmp	r3, #0
 800574e:	f6bf ae56 	bge.w	80053fe <__ieee754_rem_pio2+0x76>
 8005752:	e9d4 2100 	ldrd	r2, r1, [r4]
 8005756:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800575a:	e9c4 2300 	strd	r2, r3, [r4]
 800575e:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8005762:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005766:	e9c4 2302 	strd	r2, r3, [r4, #8]
 800576a:	e741      	b.n	80055f0 <__ieee754_rem_pio2+0x268>
 800576c:	41700000 	.word	0x41700000
 8005770:	08006074 	.word	0x08006074

08005774 <fabs>:
 8005774:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005778:	4619      	mov	r1, r3
 800577a:	4770      	bx	lr

0800577c <__kernel_rem_pio2>:
 800577c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005780:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8005784:	9308      	str	r3, [sp, #32]
 8005786:	9104      	str	r1, [sp, #16]
 8005788:	4bb6      	ldr	r3, [pc, #728]	@ (8005a64 <__kernel_rem_pio2+0x2e8>)
 800578a:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 800578c:	f112 0f14 	cmn.w	r2, #20
 8005790:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005794:	bfa8      	it	ge
 8005796:	1ed4      	subge	r4, r2, #3
 8005798:	9302      	str	r3, [sp, #8]
 800579a:	9b08      	ldr	r3, [sp, #32]
 800579c:	bfb8      	it	lt
 800579e:	2400      	movlt	r4, #0
 80057a0:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80057a4:	9306      	str	r3, [sp, #24]
 80057a6:	bfa4      	itt	ge
 80057a8:	2318      	movge	r3, #24
 80057aa:	fb94 f4f3 	sdivge	r4, r4, r3
 80057ae:	f06f 0317 	mvn.w	r3, #23
 80057b2:	fb04 3303 	mla	r3, r4, r3, r3
 80057b6:	eb03 0a02 	add.w	sl, r3, r2
 80057ba:	9a06      	ldr	r2, [sp, #24]
 80057bc:	9b02      	ldr	r3, [sp, #8]
 80057be:	1aa7      	subs	r7, r4, r2
 80057c0:	eb03 0802 	add.w	r8, r3, r2
 80057c4:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80057c6:	2500      	movs	r5, #0
 80057c8:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80057cc:	2200      	movs	r2, #0
 80057ce:	2300      	movs	r3, #0
 80057d0:	9009      	str	r0, [sp, #36]	@ 0x24
 80057d2:	ae20      	add	r6, sp, #128	@ 0x80
 80057d4:	4545      	cmp	r5, r8
 80057d6:	dd14      	ble.n	8005802 <__kernel_rem_pio2+0x86>
 80057d8:	f04f 0800 	mov.w	r8, #0
 80057dc:	9a08      	ldr	r2, [sp, #32]
 80057de:	ab20      	add	r3, sp, #128	@ 0x80
 80057e0:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80057e4:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80057e8:	9b02      	ldr	r3, [sp, #8]
 80057ea:	4598      	cmp	r8, r3
 80057ec:	dc35      	bgt.n	800585a <__kernel_rem_pio2+0xde>
 80057ee:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057f0:	2200      	movs	r2, #0
 80057f2:	f1a3 0908 	sub.w	r9, r3, #8
 80057f6:	2300      	movs	r3, #0
 80057f8:	462f      	mov	r7, r5
 80057fa:	2600      	movs	r6, #0
 80057fc:	e9cd 2300 	strd	r2, r3, [sp]
 8005800:	e01f      	b.n	8005842 <__kernel_rem_pio2+0xc6>
 8005802:	42ef      	cmn	r7, r5
 8005804:	d40b      	bmi.n	800581e <__kernel_rem_pio2+0xa2>
 8005806:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 800580a:	e9cd 2300 	strd	r2, r3, [sp]
 800580e:	f7fa fdf1 	bl	80003f4 <__aeabi_i2d>
 8005812:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005816:	e8e6 0102 	strd	r0, r1, [r6], #8
 800581a:	3501      	adds	r5, #1
 800581c:	e7da      	b.n	80057d4 <__kernel_rem_pio2+0x58>
 800581e:	4610      	mov	r0, r2
 8005820:	4619      	mov	r1, r3
 8005822:	e7f8      	b.n	8005816 <__kernel_rem_pio2+0x9a>
 8005824:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005828:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 800582c:	f7fa fe4c 	bl	80004c8 <__aeabi_dmul>
 8005830:	4602      	mov	r2, r0
 8005832:	460b      	mov	r3, r1
 8005834:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005838:	f7fa fc90 	bl	800015c <__adddf3>
 800583c:	e9cd 0100 	strd	r0, r1, [sp]
 8005840:	3601      	adds	r6, #1
 8005842:	9b06      	ldr	r3, [sp, #24]
 8005844:	3f08      	subs	r7, #8
 8005846:	429e      	cmp	r6, r3
 8005848:	ddec      	ble.n	8005824 <__kernel_rem_pio2+0xa8>
 800584a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800584e:	f108 0801 	add.w	r8, r8, #1
 8005852:	e8eb 2302 	strd	r2, r3, [fp], #8
 8005856:	3508      	adds	r5, #8
 8005858:	e7c6      	b.n	80057e8 <__kernel_rem_pio2+0x6c>
 800585a:	9b02      	ldr	r3, [sp, #8]
 800585c:	aa0c      	add	r2, sp, #48	@ 0x30
 800585e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8005862:	930b      	str	r3, [sp, #44]	@ 0x2c
 8005864:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 8005866:	f8dd b008 	ldr.w	fp, [sp, #8]
 800586a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 800586e:	930a      	str	r3, [sp, #40]	@ 0x28
 8005870:	ab98      	add	r3, sp, #608	@ 0x260
 8005872:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005876:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 800587a:	ab70      	add	r3, sp, #448	@ 0x1c0
 800587c:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005880:	ae0c      	add	r6, sp, #48	@ 0x30
 8005882:	4698      	mov	r8, r3
 8005884:	46b1      	mov	r9, r6
 8005886:	465f      	mov	r7, fp
 8005888:	9307      	str	r3, [sp, #28]
 800588a:	2f00      	cmp	r7, #0
 800588c:	f1a8 0808 	sub.w	r8, r8, #8
 8005890:	dc71      	bgt.n	8005976 <__kernel_rem_pio2+0x1fa>
 8005892:	4652      	mov	r2, sl
 8005894:	4620      	mov	r0, r4
 8005896:	4629      	mov	r1, r5
 8005898:	f000 fa96 	bl	8005dc8 <scalbn>
 800589c:	2200      	movs	r2, #0
 800589e:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80058a2:	4604      	mov	r4, r0
 80058a4:	460d      	mov	r5, r1
 80058a6:	f7fa fe0f 	bl	80004c8 <__aeabi_dmul>
 80058aa:	f000 fb05 	bl	8005eb8 <floor>
 80058ae:	2200      	movs	r2, #0
 80058b0:	4b6d      	ldr	r3, [pc, #436]	@ (8005a68 <__kernel_rem_pio2+0x2ec>)
 80058b2:	f7fa fe09 	bl	80004c8 <__aeabi_dmul>
 80058b6:	4602      	mov	r2, r0
 80058b8:	460b      	mov	r3, r1
 80058ba:	4620      	mov	r0, r4
 80058bc:	4629      	mov	r1, r5
 80058be:	f7fa fc4b 	bl	8000158 <__aeabi_dsub>
 80058c2:	460d      	mov	r5, r1
 80058c4:	4604      	mov	r4, r0
 80058c6:	f7fb f899 	bl	80009fc <__aeabi_d2iz>
 80058ca:	9005      	str	r0, [sp, #20]
 80058cc:	f7fa fd92 	bl	80003f4 <__aeabi_i2d>
 80058d0:	4602      	mov	r2, r0
 80058d2:	460b      	mov	r3, r1
 80058d4:	4620      	mov	r0, r4
 80058d6:	4629      	mov	r1, r5
 80058d8:	f7fa fc3e 	bl	8000158 <__aeabi_dsub>
 80058dc:	f1ba 0f00 	cmp.w	sl, #0
 80058e0:	4680      	mov	r8, r0
 80058e2:	4689      	mov	r9, r1
 80058e4:	dd6d      	ble.n	80059c2 <__kernel_rem_pio2+0x246>
 80058e6:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 80058ea:	ab0c      	add	r3, sp, #48	@ 0x30
 80058ec:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058f0:	9c05      	ldr	r4, [sp, #20]
 80058f2:	f1ca 0018 	rsb	r0, sl, #24
 80058f6:	fa43 f200 	asr.w	r2, r3, r0
 80058fa:	4414      	add	r4, r2
 80058fc:	4082      	lsls	r2, r0
 80058fe:	1a9b      	subs	r3, r3, r2
 8005900:	aa0c      	add	r2, sp, #48	@ 0x30
 8005902:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 8005906:	f1ca 0217 	rsb	r2, sl, #23
 800590a:	9405      	str	r4, [sp, #20]
 800590c:	4113      	asrs	r3, r2
 800590e:	9300      	str	r3, [sp, #0]
 8005910:	9b00      	ldr	r3, [sp, #0]
 8005912:	2b00      	cmp	r3, #0
 8005914:	dd64      	ble.n	80059e0 <__kernel_rem_pio2+0x264>
 8005916:	2200      	movs	r2, #0
 8005918:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 800591c:	4614      	mov	r4, r2
 800591e:	9b05      	ldr	r3, [sp, #20]
 8005920:	3301      	adds	r3, #1
 8005922:	9305      	str	r3, [sp, #20]
 8005924:	4593      	cmp	fp, r2
 8005926:	f300 80ab 	bgt.w	8005a80 <__kernel_rem_pio2+0x304>
 800592a:	f1ba 0f00 	cmp.w	sl, #0
 800592e:	dd07      	ble.n	8005940 <__kernel_rem_pio2+0x1c4>
 8005930:	f1ba 0f01 	cmp.w	sl, #1
 8005934:	f000 80b2 	beq.w	8005a9c <__kernel_rem_pio2+0x320>
 8005938:	f1ba 0f02 	cmp.w	sl, #2
 800593c:	f000 80b9 	beq.w	8005ab2 <__kernel_rem_pio2+0x336>
 8005940:	9b00      	ldr	r3, [sp, #0]
 8005942:	2b02      	cmp	r3, #2
 8005944:	d14c      	bne.n	80059e0 <__kernel_rem_pio2+0x264>
 8005946:	4642      	mov	r2, r8
 8005948:	464b      	mov	r3, r9
 800594a:	2000      	movs	r0, #0
 800594c:	4947      	ldr	r1, [pc, #284]	@ (8005a6c <__kernel_rem_pio2+0x2f0>)
 800594e:	f7fa fc03 	bl	8000158 <__aeabi_dsub>
 8005952:	4680      	mov	r8, r0
 8005954:	4689      	mov	r9, r1
 8005956:	2c00      	cmp	r4, #0
 8005958:	d042      	beq.n	80059e0 <__kernel_rem_pio2+0x264>
 800595a:	4652      	mov	r2, sl
 800595c:	2000      	movs	r0, #0
 800595e:	4943      	ldr	r1, [pc, #268]	@ (8005a6c <__kernel_rem_pio2+0x2f0>)
 8005960:	f000 fa32 	bl	8005dc8 <scalbn>
 8005964:	4602      	mov	r2, r0
 8005966:	460b      	mov	r3, r1
 8005968:	4640      	mov	r0, r8
 800596a:	4649      	mov	r1, r9
 800596c:	f7fa fbf4 	bl	8000158 <__aeabi_dsub>
 8005970:	4680      	mov	r8, r0
 8005972:	4689      	mov	r9, r1
 8005974:	e034      	b.n	80059e0 <__kernel_rem_pio2+0x264>
 8005976:	2200      	movs	r2, #0
 8005978:	4b3d      	ldr	r3, [pc, #244]	@ (8005a70 <__kernel_rem_pio2+0x2f4>)
 800597a:	4620      	mov	r0, r4
 800597c:	4629      	mov	r1, r5
 800597e:	f7fa fda3 	bl	80004c8 <__aeabi_dmul>
 8005982:	f7fb f83b 	bl	80009fc <__aeabi_d2iz>
 8005986:	f7fa fd35 	bl	80003f4 <__aeabi_i2d>
 800598a:	4602      	mov	r2, r0
 800598c:	460b      	mov	r3, r1
 800598e:	e9cd 2300 	strd	r2, r3, [sp]
 8005992:	2200      	movs	r2, #0
 8005994:	4b37      	ldr	r3, [pc, #220]	@ (8005a74 <__kernel_rem_pio2+0x2f8>)
 8005996:	f7fa fd97 	bl	80004c8 <__aeabi_dmul>
 800599a:	4602      	mov	r2, r0
 800599c:	460b      	mov	r3, r1
 800599e:	4620      	mov	r0, r4
 80059a0:	4629      	mov	r1, r5
 80059a2:	f7fa fbd9 	bl	8000158 <__aeabi_dsub>
 80059a6:	f7fb f829 	bl	80009fc <__aeabi_d2iz>
 80059aa:	e9d8 2300 	ldrd	r2, r3, [r8]
 80059ae:	f849 0b04 	str.w	r0, [r9], #4
 80059b2:	e9dd 0100 	ldrd	r0, r1, [sp]
 80059b6:	f7fa fbd1 	bl	800015c <__adddf3>
 80059ba:	3f01      	subs	r7, #1
 80059bc:	4604      	mov	r4, r0
 80059be:	460d      	mov	r5, r1
 80059c0:	e763      	b.n	800588a <__kernel_rem_pio2+0x10e>
 80059c2:	d106      	bne.n	80059d2 <__kernel_rem_pio2+0x256>
 80059c4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80059c8:	aa0c      	add	r2, sp, #48	@ 0x30
 80059ca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059ce:	15db      	asrs	r3, r3, #23
 80059d0:	e79d      	b.n	800590e <__kernel_rem_pio2+0x192>
 80059d2:	2200      	movs	r2, #0
 80059d4:	4b28      	ldr	r3, [pc, #160]	@ (8005a78 <__kernel_rem_pio2+0x2fc>)
 80059d6:	f7fa fffd 	bl	80009d4 <__aeabi_dcmpge>
 80059da:	2800      	cmp	r0, #0
 80059dc:	d13f      	bne.n	8005a5e <__kernel_rem_pio2+0x2e2>
 80059de:	9000      	str	r0, [sp, #0]
 80059e0:	2200      	movs	r2, #0
 80059e2:	2300      	movs	r3, #0
 80059e4:	4640      	mov	r0, r8
 80059e6:	4649      	mov	r1, r9
 80059e8:	f7fa ffd6 	bl	8000998 <__aeabi_dcmpeq>
 80059ec:	2800      	cmp	r0, #0
 80059ee:	f000 80af 	beq.w	8005b50 <__kernel_rem_pio2+0x3d4>
 80059f2:	2200      	movs	r2, #0
 80059f4:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80059f8:	9902      	ldr	r1, [sp, #8]
 80059fa:	428b      	cmp	r3, r1
 80059fc:	da61      	bge.n	8005ac2 <__kernel_rem_pio2+0x346>
 80059fe:	2a00      	cmp	r2, #0
 8005a00:	d076      	beq.n	8005af0 <__kernel_rem_pio2+0x374>
 8005a02:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005a06:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a08:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005a0c:	f1aa 0a18 	sub.w	sl, sl, #24
 8005a10:	2b00      	cmp	r3, #0
 8005a12:	d0f6      	beq.n	8005a02 <__kernel_rem_pio2+0x286>
 8005a14:	4652      	mov	r2, sl
 8005a16:	2000      	movs	r0, #0
 8005a18:	4914      	ldr	r1, [pc, #80]	@ (8005a6c <__kernel_rem_pio2+0x2f0>)
 8005a1a:	f000 f9d5 	bl	8005dc8 <scalbn>
 8005a1e:	465d      	mov	r5, fp
 8005a20:	4606      	mov	r6, r0
 8005a22:	460f      	mov	r7, r1
 8005a24:	f04f 0900 	mov.w	r9, #0
 8005a28:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a2a:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8005a70 <__kernel_rem_pio2+0x2f4>
 8005a2e:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8005a32:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8005a36:	2d00      	cmp	r5, #0
 8005a38:	f280 80c0 	bge.w	8005bbc <__kernel_rem_pio2+0x440>
 8005a3c:	465d      	mov	r5, fp
 8005a3e:	2d00      	cmp	r5, #0
 8005a40:	f2c0 80f0 	blt.w	8005c24 <__kernel_rem_pio2+0x4a8>
 8005a44:	4b0d      	ldr	r3, [pc, #52]	@ (8005a7c <__kernel_rem_pio2+0x300>)
 8005a46:	f04f 0900 	mov.w	r9, #0
 8005a4a:	9306      	str	r3, [sp, #24]
 8005a4c:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a4e:	f04f 0a00 	mov.w	sl, #0
 8005a52:	2700      	movs	r7, #0
 8005a54:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8005a58:	ebab 0605 	sub.w	r6, fp, r5
 8005a5c:	e0d6      	b.n	8005c0c <__kernel_rem_pio2+0x490>
 8005a5e:	2302      	movs	r3, #2
 8005a60:	9300      	str	r3, [sp, #0]
 8005a62:	e758      	b.n	8005916 <__kernel_rem_pio2+0x19a>
 8005a64:	080061c0 	.word	0x080061c0
 8005a68:	40200000 	.word	0x40200000
 8005a6c:	3ff00000 	.word	0x3ff00000
 8005a70:	3e700000 	.word	0x3e700000
 8005a74:	41700000 	.word	0x41700000
 8005a78:	3fe00000 	.word	0x3fe00000
 8005a7c:	08006180 	.word	0x08006180
 8005a80:	f856 3b04 	ldr.w	r3, [r6], #4
 8005a84:	b944      	cbnz	r4, 8005a98 <__kernel_rem_pio2+0x31c>
 8005a86:	b123      	cbz	r3, 8005a92 <__kernel_rem_pio2+0x316>
 8005a88:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005a8c:	f846 3c04 	str.w	r3, [r6, #-4]
 8005a90:	2301      	movs	r3, #1
 8005a92:	461c      	mov	r4, r3
 8005a94:	3201      	adds	r2, #1
 8005a96:	e745      	b.n	8005924 <__kernel_rem_pio2+0x1a8>
 8005a98:	1acb      	subs	r3, r1, r3
 8005a9a:	e7f7      	b.n	8005a8c <__kernel_rem_pio2+0x310>
 8005a9c:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8005aa0:	ab0c      	add	r3, sp, #48	@ 0x30
 8005aa2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa6:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005aaa:	a90c      	add	r1, sp, #48	@ 0x30
 8005aac:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005ab0:	e746      	b.n	8005940 <__kernel_rem_pio2+0x1c4>
 8005ab2:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8005ab6:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ab8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005abc:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005ac0:	e7f3      	b.n	8005aaa <__kernel_rem_pio2+0x32e>
 8005ac2:	a90c      	add	r1, sp, #48	@ 0x30
 8005ac4:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ac8:	3b01      	subs	r3, #1
 8005aca:	430a      	orrs	r2, r1
 8005acc:	e794      	b.n	80059f8 <__kernel_rem_pio2+0x27c>
 8005ace:	3401      	adds	r4, #1
 8005ad0:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005ad4:	2a00      	cmp	r2, #0
 8005ad6:	d0fa      	beq.n	8005ace <__kernel_rem_pio2+0x352>
 8005ad8:	9b08      	ldr	r3, [sp, #32]
 8005ada:	aa20      	add	r2, sp, #128	@ 0x80
 8005adc:	445b      	add	r3, fp
 8005ade:	f10b 0801 	add.w	r8, fp, #1
 8005ae2:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005ae6:	445c      	add	r4, fp
 8005ae8:	4544      	cmp	r4, r8
 8005aea:	da04      	bge.n	8005af6 <__kernel_rem_pio2+0x37a>
 8005aec:	46a3      	mov	fp, r4
 8005aee:	e6bf      	b.n	8005870 <__kernel_rem_pio2+0xf4>
 8005af0:	2401      	movs	r4, #1
 8005af2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005af4:	e7ec      	b.n	8005ad0 <__kernel_rem_pio2+0x354>
 8005af6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005af8:	46ab      	mov	fp, r5
 8005afa:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005afe:	f7fa fc79 	bl	80003f4 <__aeabi_i2d>
 8005b02:	f04f 0900 	mov.w	r9, #0
 8005b06:	2600      	movs	r6, #0
 8005b08:	2700      	movs	r7, #0
 8005b0a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005b0c:	e9c5 0100 	strd	r0, r1, [r5]
 8005b10:	3b08      	subs	r3, #8
 8005b12:	9300      	str	r3, [sp, #0]
 8005b14:	9b06      	ldr	r3, [sp, #24]
 8005b16:	4599      	cmp	r9, r3
 8005b18:	dd07      	ble.n	8005b2a <__kernel_rem_pio2+0x3ae>
 8005b1a:	9b07      	ldr	r3, [sp, #28]
 8005b1c:	f108 0801 	add.w	r8, r8, #1
 8005b20:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8005b24:	3508      	adds	r5, #8
 8005b26:	9307      	str	r3, [sp, #28]
 8005b28:	e7de      	b.n	8005ae8 <__kernel_rem_pio2+0x36c>
 8005b2a:	9900      	ldr	r1, [sp, #0]
 8005b2c:	f109 0901 	add.w	r9, r9, #1
 8005b30:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005b34:	9100      	str	r1, [sp, #0]
 8005b36:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8005b3a:	f7fa fcc5 	bl	80004c8 <__aeabi_dmul>
 8005b3e:	4602      	mov	r2, r0
 8005b40:	460b      	mov	r3, r1
 8005b42:	4630      	mov	r0, r6
 8005b44:	4639      	mov	r1, r7
 8005b46:	f7fa fb09 	bl	800015c <__adddf3>
 8005b4a:	4606      	mov	r6, r0
 8005b4c:	460f      	mov	r7, r1
 8005b4e:	e7e1      	b.n	8005b14 <__kernel_rem_pio2+0x398>
 8005b50:	f1ca 0200 	rsb	r2, sl, #0
 8005b54:	4640      	mov	r0, r8
 8005b56:	4649      	mov	r1, r9
 8005b58:	f000 f936 	bl	8005dc8 <scalbn>
 8005b5c:	2200      	movs	r2, #0
 8005b5e:	4b97      	ldr	r3, [pc, #604]	@ (8005dbc <__kernel_rem_pio2+0x640>)
 8005b60:	4604      	mov	r4, r0
 8005b62:	460d      	mov	r5, r1
 8005b64:	f7fa ff36 	bl	80009d4 <__aeabi_dcmpge>
 8005b68:	b300      	cbz	r0, 8005bac <__kernel_rem_pio2+0x430>
 8005b6a:	2200      	movs	r2, #0
 8005b6c:	4b94      	ldr	r3, [pc, #592]	@ (8005dc0 <__kernel_rem_pio2+0x644>)
 8005b6e:	4620      	mov	r0, r4
 8005b70:	4629      	mov	r1, r5
 8005b72:	f7fa fca9 	bl	80004c8 <__aeabi_dmul>
 8005b76:	f7fa ff41 	bl	80009fc <__aeabi_d2iz>
 8005b7a:	4606      	mov	r6, r0
 8005b7c:	f7fa fc3a 	bl	80003f4 <__aeabi_i2d>
 8005b80:	2200      	movs	r2, #0
 8005b82:	4b8e      	ldr	r3, [pc, #568]	@ (8005dbc <__kernel_rem_pio2+0x640>)
 8005b84:	f7fa fca0 	bl	80004c8 <__aeabi_dmul>
 8005b88:	460b      	mov	r3, r1
 8005b8a:	4602      	mov	r2, r0
 8005b8c:	4629      	mov	r1, r5
 8005b8e:	4620      	mov	r0, r4
 8005b90:	f7fa fae2 	bl	8000158 <__aeabi_dsub>
 8005b94:	f7fa ff32 	bl	80009fc <__aeabi_d2iz>
 8005b98:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b9a:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005b9e:	f10b 0b01 	add.w	fp, fp, #1
 8005ba2:	f10a 0a18 	add.w	sl, sl, #24
 8005ba6:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005baa:	e733      	b.n	8005a14 <__kernel_rem_pio2+0x298>
 8005bac:	4620      	mov	r0, r4
 8005bae:	4629      	mov	r1, r5
 8005bb0:	f7fa ff24 	bl	80009fc <__aeabi_d2iz>
 8005bb4:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bb6:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005bba:	e72b      	b.n	8005a14 <__kernel_rem_pio2+0x298>
 8005bbc:	ab0c      	add	r3, sp, #48	@ 0x30
 8005bbe:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005bc2:	f7fa fc17 	bl	80003f4 <__aeabi_i2d>
 8005bc6:	4632      	mov	r2, r6
 8005bc8:	463b      	mov	r3, r7
 8005bca:	f7fa fc7d 	bl	80004c8 <__aeabi_dmul>
 8005bce:	464a      	mov	r2, r9
 8005bd0:	e868 0102 	strd	r0, r1, [r8], #-8
 8005bd4:	4653      	mov	r3, sl
 8005bd6:	4630      	mov	r0, r6
 8005bd8:	4639      	mov	r1, r7
 8005bda:	f7fa fc75 	bl	80004c8 <__aeabi_dmul>
 8005bde:	3d01      	subs	r5, #1
 8005be0:	4606      	mov	r6, r0
 8005be2:	460f      	mov	r7, r1
 8005be4:	e727      	b.n	8005a36 <__kernel_rem_pio2+0x2ba>
 8005be6:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005bea:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005bee:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005bf2:	f8cd c018 	str.w	ip, [sp, #24]
 8005bf6:	f7fa fc67 	bl	80004c8 <__aeabi_dmul>
 8005bfa:	4602      	mov	r2, r0
 8005bfc:	460b      	mov	r3, r1
 8005bfe:	4648      	mov	r0, r9
 8005c00:	4651      	mov	r1, sl
 8005c02:	f7fa faab 	bl	800015c <__adddf3>
 8005c06:	4681      	mov	r9, r0
 8005c08:	468a      	mov	sl, r1
 8005c0a:	3701      	adds	r7, #1
 8005c0c:	9b02      	ldr	r3, [sp, #8]
 8005c0e:	429f      	cmp	r7, r3
 8005c10:	dc01      	bgt.n	8005c16 <__kernel_rem_pio2+0x49a>
 8005c12:	42be      	cmp	r6, r7
 8005c14:	dae7      	bge.n	8005be6 <__kernel_rem_pio2+0x46a>
 8005c16:	ab48      	add	r3, sp, #288	@ 0x120
 8005c18:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005c1c:	e9c6 9a00 	strd	r9, sl, [r6]
 8005c20:	3d01      	subs	r5, #1
 8005c22:	e70c      	b.n	8005a3e <__kernel_rem_pio2+0x2c2>
 8005c24:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005c26:	2b02      	cmp	r3, #2
 8005c28:	dc09      	bgt.n	8005c3e <__kernel_rem_pio2+0x4c2>
 8005c2a:	2b00      	cmp	r3, #0
 8005c2c:	dc2c      	bgt.n	8005c88 <__kernel_rem_pio2+0x50c>
 8005c2e:	d04e      	beq.n	8005cce <__kernel_rem_pio2+0x552>
 8005c30:	9b05      	ldr	r3, [sp, #20]
 8005c32:	f003 0007 	and.w	r0, r3, #7
 8005c36:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005c3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c3e:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005c40:	2b03      	cmp	r3, #3
 8005c42:	d1f5      	bne.n	8005c30 <__kernel_rem_pio2+0x4b4>
 8005c44:	ab48      	add	r3, sp, #288	@ 0x120
 8005c46:	441c      	add	r4, r3
 8005c48:	4625      	mov	r5, r4
 8005c4a:	46da      	mov	sl, fp
 8005c4c:	f1ba 0f00 	cmp.w	sl, #0
 8005c50:	dc63      	bgt.n	8005d1a <__kernel_rem_pio2+0x59e>
 8005c52:	4625      	mov	r5, r4
 8005c54:	46da      	mov	sl, fp
 8005c56:	f1ba 0f01 	cmp.w	sl, #1
 8005c5a:	dc7b      	bgt.n	8005d54 <__kernel_rem_pio2+0x5d8>
 8005c5c:	2000      	movs	r0, #0
 8005c5e:	2100      	movs	r1, #0
 8005c60:	f1bb 0f01 	cmp.w	fp, #1
 8005c64:	f300 8093 	bgt.w	8005d8e <__kernel_rem_pio2+0x612>
 8005c68:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005c6c:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005c70:	9b00      	ldr	r3, [sp, #0]
 8005c72:	2b00      	cmp	r3, #0
 8005c74:	f040 8092 	bne.w	8005d9c <__kernel_rem_pio2+0x620>
 8005c78:	9b04      	ldr	r3, [sp, #16]
 8005c7a:	e9c3 7800 	strd	r7, r8, [r3]
 8005c7e:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c82:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c86:	e7d3      	b.n	8005c30 <__kernel_rem_pio2+0x4b4>
 8005c88:	465d      	mov	r5, fp
 8005c8a:	2000      	movs	r0, #0
 8005c8c:	2100      	movs	r1, #0
 8005c8e:	ab48      	add	r3, sp, #288	@ 0x120
 8005c90:	441c      	add	r4, r3
 8005c92:	2d00      	cmp	r5, #0
 8005c94:	da32      	bge.n	8005cfc <__kernel_rem_pio2+0x580>
 8005c96:	9b00      	ldr	r3, [sp, #0]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d035      	beq.n	8005d08 <__kernel_rem_pio2+0x58c>
 8005c9c:	4602      	mov	r2, r0
 8005c9e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ca2:	9c04      	ldr	r4, [sp, #16]
 8005ca4:	2501      	movs	r5, #1
 8005ca6:	e9c4 2300 	strd	r2, r3, [r4]
 8005caa:	4602      	mov	r2, r0
 8005cac:	460b      	mov	r3, r1
 8005cae:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005cb2:	f7fa fa51 	bl	8000158 <__aeabi_dsub>
 8005cb6:	ac48      	add	r4, sp, #288	@ 0x120
 8005cb8:	45ab      	cmp	fp, r5
 8005cba:	da28      	bge.n	8005d0e <__kernel_rem_pio2+0x592>
 8005cbc:	9b00      	ldr	r3, [sp, #0]
 8005cbe:	b113      	cbz	r3, 8005cc6 <__kernel_rem_pio2+0x54a>
 8005cc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cc4:	4619      	mov	r1, r3
 8005cc6:	9b04      	ldr	r3, [sp, #16]
 8005cc8:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005ccc:	e7b0      	b.n	8005c30 <__kernel_rem_pio2+0x4b4>
 8005cce:	2000      	movs	r0, #0
 8005cd0:	2100      	movs	r1, #0
 8005cd2:	ab48      	add	r3, sp, #288	@ 0x120
 8005cd4:	441c      	add	r4, r3
 8005cd6:	f1bb 0f00 	cmp.w	fp, #0
 8005cda:	da08      	bge.n	8005cee <__kernel_rem_pio2+0x572>
 8005cdc:	9b00      	ldr	r3, [sp, #0]
 8005cde:	b113      	cbz	r3, 8005ce6 <__kernel_rem_pio2+0x56a>
 8005ce0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ce4:	4619      	mov	r1, r3
 8005ce6:	9b04      	ldr	r3, [sp, #16]
 8005ce8:	e9c3 0100 	strd	r0, r1, [r3]
 8005cec:	e7a0      	b.n	8005c30 <__kernel_rem_pio2+0x4b4>
 8005cee:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005cf2:	f7fa fa33 	bl	800015c <__adddf3>
 8005cf6:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005cfa:	e7ec      	b.n	8005cd6 <__kernel_rem_pio2+0x55a>
 8005cfc:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005d00:	f7fa fa2c 	bl	800015c <__adddf3>
 8005d04:	3d01      	subs	r5, #1
 8005d06:	e7c4      	b.n	8005c92 <__kernel_rem_pio2+0x516>
 8005d08:	4602      	mov	r2, r0
 8005d0a:	460b      	mov	r3, r1
 8005d0c:	e7c9      	b.n	8005ca2 <__kernel_rem_pio2+0x526>
 8005d0e:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8005d12:	f7fa fa23 	bl	800015c <__adddf3>
 8005d16:	3501      	adds	r5, #1
 8005d18:	e7ce      	b.n	8005cb8 <__kernel_rem_pio2+0x53c>
 8005d1a:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d1e:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005d22:	4640      	mov	r0, r8
 8005d24:	4649      	mov	r1, r9
 8005d26:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d2a:	f7fa fa17 	bl	800015c <__adddf3>
 8005d2e:	4602      	mov	r2, r0
 8005d30:	460b      	mov	r3, r1
 8005d32:	4606      	mov	r6, r0
 8005d34:	460f      	mov	r7, r1
 8005d36:	4640      	mov	r0, r8
 8005d38:	4649      	mov	r1, r9
 8005d3a:	f7fa fa0d 	bl	8000158 <__aeabi_dsub>
 8005d3e:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d42:	f7fa fa0b 	bl	800015c <__adddf3>
 8005d46:	e865 0102 	strd	r0, r1, [r5], #-8
 8005d4a:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005d4e:	e9c5 6700 	strd	r6, r7, [r5]
 8005d52:	e77b      	b.n	8005c4c <__kernel_rem_pio2+0x4d0>
 8005d54:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d58:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005d5c:	4640      	mov	r0, r8
 8005d5e:	4649      	mov	r1, r9
 8005d60:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d64:	f7fa f9fa 	bl	800015c <__adddf3>
 8005d68:	4602      	mov	r2, r0
 8005d6a:	460b      	mov	r3, r1
 8005d6c:	4606      	mov	r6, r0
 8005d6e:	460f      	mov	r7, r1
 8005d70:	4640      	mov	r0, r8
 8005d72:	4649      	mov	r1, r9
 8005d74:	f7fa f9f0 	bl	8000158 <__aeabi_dsub>
 8005d78:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d7c:	f7fa f9ee 	bl	800015c <__adddf3>
 8005d80:	e865 0102 	strd	r0, r1, [r5], #-8
 8005d84:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005d88:	e9c5 6700 	strd	r6, r7, [r5]
 8005d8c:	e763      	b.n	8005c56 <__kernel_rem_pio2+0x4da>
 8005d8e:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005d92:	f7fa f9e3 	bl	800015c <__adddf3>
 8005d96:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005d9a:	e761      	b.n	8005c60 <__kernel_rem_pio2+0x4e4>
 8005d9c:	9b04      	ldr	r3, [sp, #16]
 8005d9e:	9a04      	ldr	r2, [sp, #16]
 8005da0:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005da4:	601f      	str	r7, [r3, #0]
 8005da6:	605c      	str	r4, [r3, #4]
 8005da8:	609d      	str	r5, [r3, #8]
 8005daa:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005dae:	60d3      	str	r3, [r2, #12]
 8005db0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005db4:	6110      	str	r0, [r2, #16]
 8005db6:	6153      	str	r3, [r2, #20]
 8005db8:	e73a      	b.n	8005c30 <__kernel_rem_pio2+0x4b4>
 8005dba:	bf00      	nop
 8005dbc:	41700000 	.word	0x41700000
 8005dc0:	3e700000 	.word	0x3e700000
 8005dc4:	00000000 	.word	0x00000000

08005dc8 <scalbn>:
 8005dc8:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005dcc:	4616      	mov	r6, r2
 8005dce:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dd2:	4683      	mov	fp, r0
 8005dd4:	468c      	mov	ip, r1
 8005dd6:	460b      	mov	r3, r1
 8005dd8:	b982      	cbnz	r2, 8005dfc <scalbn+0x34>
 8005dda:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005dde:	4303      	orrs	r3, r0
 8005de0:	d039      	beq.n	8005e56 <scalbn+0x8e>
 8005de2:	4b2f      	ldr	r3, [pc, #188]	@ (8005ea0 <scalbn+0xd8>)
 8005de4:	2200      	movs	r2, #0
 8005de6:	f7fa fb6f 	bl	80004c8 <__aeabi_dmul>
 8005dea:	4b2e      	ldr	r3, [pc, #184]	@ (8005ea4 <scalbn+0xdc>)
 8005dec:	4683      	mov	fp, r0
 8005dee:	429e      	cmp	r6, r3
 8005df0:	468c      	mov	ip, r1
 8005df2:	da0d      	bge.n	8005e10 <scalbn+0x48>
 8005df4:	a326      	add	r3, pc, #152	@ (adr r3, 8005e90 <scalbn+0xc8>)
 8005df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005dfa:	e01b      	b.n	8005e34 <scalbn+0x6c>
 8005dfc:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005e00:	42ba      	cmp	r2, r7
 8005e02:	d109      	bne.n	8005e18 <scalbn+0x50>
 8005e04:	4602      	mov	r2, r0
 8005e06:	f7fa f9a9 	bl	800015c <__adddf3>
 8005e0a:	4683      	mov	fp, r0
 8005e0c:	468c      	mov	ip, r1
 8005e0e:	e022      	b.n	8005e56 <scalbn+0x8e>
 8005e10:	460b      	mov	r3, r1
 8005e12:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e16:	3a36      	subs	r2, #54	@ 0x36
 8005e18:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005e1c:	428e      	cmp	r6, r1
 8005e1e:	dd0c      	ble.n	8005e3a <scalbn+0x72>
 8005e20:	a31d      	add	r3, pc, #116	@ (adr r3, 8005e98 <scalbn+0xd0>)
 8005e22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e26:	461c      	mov	r4, r3
 8005e28:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005e2c:	f361 74df 	bfi	r4, r1, #31, #1
 8005e30:	4621      	mov	r1, r4
 8005e32:	481d      	ldr	r0, [pc, #116]	@ (8005ea8 <scalbn+0xe0>)
 8005e34:	f7fa fb48 	bl	80004c8 <__aeabi_dmul>
 8005e38:	e7e7      	b.n	8005e0a <scalbn+0x42>
 8005e3a:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005e3e:	4432      	add	r2, r6
 8005e40:	428a      	cmp	r2, r1
 8005e42:	dced      	bgt.n	8005e20 <scalbn+0x58>
 8005e44:	2a00      	cmp	r2, #0
 8005e46:	dd0a      	ble.n	8005e5e <scalbn+0x96>
 8005e48:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005e4c:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e50:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e54:	46ac      	mov	ip, r5
 8005e56:	4658      	mov	r0, fp
 8005e58:	4661      	mov	r1, ip
 8005e5a:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005e5e:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005e62:	da09      	bge.n	8005e78 <scalbn+0xb0>
 8005e64:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005e68:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005e6c:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005e70:	480e      	ldr	r0, [pc, #56]	@ (8005eac <scalbn+0xe4>)
 8005e72:	f041 011f 	orr.w	r1, r1, #31
 8005e76:	e7bd      	b.n	8005df4 <scalbn+0x2c>
 8005e78:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005e7c:	3236      	adds	r2, #54	@ 0x36
 8005e7e:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e82:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e86:	4658      	mov	r0, fp
 8005e88:	4629      	mov	r1, r5
 8005e8a:	2200      	movs	r2, #0
 8005e8c:	4b08      	ldr	r3, [pc, #32]	@ (8005eb0 <scalbn+0xe8>)
 8005e8e:	e7d1      	b.n	8005e34 <scalbn+0x6c>
 8005e90:	c2f8f359 	.word	0xc2f8f359
 8005e94:	01a56e1f 	.word	0x01a56e1f
 8005e98:	8800759c 	.word	0x8800759c
 8005e9c:	7e37e43c 	.word	0x7e37e43c
 8005ea0:	43500000 	.word	0x43500000
 8005ea4:	ffff3cb0 	.word	0xffff3cb0
 8005ea8:	8800759c 	.word	0x8800759c
 8005eac:	c2f8f359 	.word	0xc2f8f359
 8005eb0:	3c900000 	.word	0x3c900000
 8005eb4:	00000000 	.word	0x00000000

08005eb8 <floor>:
 8005eb8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ebc:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005ec0:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8005ec4:	2e13      	cmp	r6, #19
 8005ec6:	4602      	mov	r2, r0
 8005ec8:	460b      	mov	r3, r1
 8005eca:	460c      	mov	r4, r1
 8005ecc:	4605      	mov	r5, r0
 8005ece:	4680      	mov	r8, r0
 8005ed0:	dc35      	bgt.n	8005f3e <floor+0x86>
 8005ed2:	2e00      	cmp	r6, #0
 8005ed4:	da17      	bge.n	8005f06 <floor+0x4e>
 8005ed6:	a334      	add	r3, pc, #208	@ (adr r3, 8005fa8 <floor+0xf0>)
 8005ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005edc:	f7fa f93e 	bl	800015c <__adddf3>
 8005ee0:	2200      	movs	r2, #0
 8005ee2:	2300      	movs	r3, #0
 8005ee4:	f7fa fd80 	bl	80009e8 <__aeabi_dcmpgt>
 8005ee8:	b150      	cbz	r0, 8005f00 <floor+0x48>
 8005eea:	2c00      	cmp	r4, #0
 8005eec:	da57      	bge.n	8005f9e <floor+0xe6>
 8005eee:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005ef2:	432c      	orrs	r4, r5
 8005ef4:	2500      	movs	r5, #0
 8005ef6:	42ac      	cmp	r4, r5
 8005ef8:	4c2d      	ldr	r4, [pc, #180]	@ (8005fb0 <floor+0xf8>)
 8005efa:	bf08      	it	eq
 8005efc:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005f00:	4623      	mov	r3, r4
 8005f02:	462a      	mov	r2, r5
 8005f04:	e024      	b.n	8005f50 <floor+0x98>
 8005f06:	4f2b      	ldr	r7, [pc, #172]	@ (8005fb4 <floor+0xfc>)
 8005f08:	4137      	asrs	r7, r6
 8005f0a:	ea01 0c07 	and.w	ip, r1, r7
 8005f0e:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005f12:	d01d      	beq.n	8005f50 <floor+0x98>
 8005f14:	a324      	add	r3, pc, #144	@ (adr r3, 8005fa8 <floor+0xf0>)
 8005f16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f1a:	f7fa f91f 	bl	800015c <__adddf3>
 8005f1e:	2200      	movs	r2, #0
 8005f20:	2300      	movs	r3, #0
 8005f22:	f7fa fd61 	bl	80009e8 <__aeabi_dcmpgt>
 8005f26:	2800      	cmp	r0, #0
 8005f28:	d0ea      	beq.n	8005f00 <floor+0x48>
 8005f2a:	2c00      	cmp	r4, #0
 8005f2c:	bfbe      	ittt	lt
 8005f2e:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005f32:	4133      	asrlt	r3, r6
 8005f34:	18e4      	addlt	r4, r4, r3
 8005f36:	2500      	movs	r5, #0
 8005f38:	ea24 0407 	bic.w	r4, r4, r7
 8005f3c:	e7e0      	b.n	8005f00 <floor+0x48>
 8005f3e:	2e33      	cmp	r6, #51	@ 0x33
 8005f40:	dd0a      	ble.n	8005f58 <floor+0xa0>
 8005f42:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005f46:	d103      	bne.n	8005f50 <floor+0x98>
 8005f48:	f7fa f908 	bl	800015c <__adddf3>
 8005f4c:	4602      	mov	r2, r0
 8005f4e:	460b      	mov	r3, r1
 8005f50:	4610      	mov	r0, r2
 8005f52:	4619      	mov	r1, r3
 8005f54:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f58:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8005f5c:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005f60:	fa2c f707 	lsr.w	r7, ip, r7
 8005f64:	4207      	tst	r7, r0
 8005f66:	d0f3      	beq.n	8005f50 <floor+0x98>
 8005f68:	a30f      	add	r3, pc, #60	@ (adr r3, 8005fa8 <floor+0xf0>)
 8005f6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f6e:	f7fa f8f5 	bl	800015c <__adddf3>
 8005f72:	2200      	movs	r2, #0
 8005f74:	2300      	movs	r3, #0
 8005f76:	f7fa fd37 	bl	80009e8 <__aeabi_dcmpgt>
 8005f7a:	2800      	cmp	r0, #0
 8005f7c:	d0c0      	beq.n	8005f00 <floor+0x48>
 8005f7e:	2c00      	cmp	r4, #0
 8005f80:	da0a      	bge.n	8005f98 <floor+0xe0>
 8005f82:	2e14      	cmp	r6, #20
 8005f84:	d101      	bne.n	8005f8a <floor+0xd2>
 8005f86:	3401      	adds	r4, #1
 8005f88:	e006      	b.n	8005f98 <floor+0xe0>
 8005f8a:	2301      	movs	r3, #1
 8005f8c:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005f90:	40b3      	lsls	r3, r6
 8005f92:	441d      	add	r5, r3
 8005f94:	4545      	cmp	r5, r8
 8005f96:	d3f6      	bcc.n	8005f86 <floor+0xce>
 8005f98:	ea25 0507 	bic.w	r5, r5, r7
 8005f9c:	e7b0      	b.n	8005f00 <floor+0x48>
 8005f9e:	2500      	movs	r5, #0
 8005fa0:	462c      	mov	r4, r5
 8005fa2:	e7ad      	b.n	8005f00 <floor+0x48>
 8005fa4:	f3af 8000 	nop.w
 8005fa8:	8800759c 	.word	0x8800759c
 8005fac:	7e37e43c 	.word	0x7e37e43c
 8005fb0:	bff00000 	.word	0xbff00000
 8005fb4:	000fffff 	.word	0x000fffff

08005fb8 <_init>:
 8005fb8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fba:	bf00      	nop
 8005fbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fbe:	bc08      	pop	{r3}
 8005fc0:	469e      	mov	lr, r3
 8005fc2:	4770      	bx	lr

08005fc4 <_fini>:
 8005fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fc6:	bf00      	nop
 8005fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fca:	bc08      	pop	{r3}
 8005fcc:	469e      	mov	lr, r3
 8005fce:	4770      	bx	lr
