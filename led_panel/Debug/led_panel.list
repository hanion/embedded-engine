
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005738  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005848  08005848  00006848  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005a48  08005a48  000070bc  2**0
                  CONTENTS
  4 .ARM          00000000  08005a48  08005a48  000070bc  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005a48  08005a48  000070bc  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005a48  08005a48  00006a48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005a4c  08005a4c  00006a4c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000000bc  20000000  08005a50  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001138  200000c0  08005b0c  000070c0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200011f8  08005b0c  000071f8  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000070bc  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ab19  00000000  00000000  000070e5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eca  00000000  00000000  00011bfe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ca0  00000000  00000000  00013ac8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009d7  00000000  00000000  00014768  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017f43  00000000  00000000  0001513f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d5b7  00000000  00000000  0002d082  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a818  00000000  00000000  0003a639  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c4e51  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000038d8  00000000  00000000  000c4e94  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c876c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000c0 	.word	0x200000c0
 800012c:	00000000 	.word	0x00000000
 8000130:	08005830 	.word	0x08005830

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000c4 	.word	0x200000c4
 800014c:	08005830 	.word	0x08005830

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__aeabi_f2iz>:
 8000fa8:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fac:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000fb0:	d30f      	bcc.n	8000fd2 <__aeabi_f2iz+0x2a>
 8000fb2:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000fb6:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000fba:	d90d      	bls.n	8000fd8 <__aeabi_f2iz+0x30>
 8000fbc:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000fc0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000fc4:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000fc8:	fa23 f002 	lsr.w	r0, r3, r2
 8000fcc:	bf18      	it	ne
 8000fce:	4240      	negne	r0, r0
 8000fd0:	4770      	bx	lr
 8000fd2:	f04f 0000 	mov.w	r0, #0
 8000fd6:	4770      	bx	lr
 8000fd8:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000fdc:	d101      	bne.n	8000fe2 <__aeabi_f2iz+0x3a>
 8000fde:	0242      	lsls	r2, r0, #9
 8000fe0:	d105      	bne.n	8000fee <__aeabi_f2iz+0x46>
 8000fe2:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000fe6:	bf08      	it	eq
 8000fe8:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000fec:	4770      	bx	lr
 8000fee:	f04f 0000 	mov.w	r0, #0
 8000ff2:	4770      	bx	lr

08000ff4 <multiply_matrix_matrix>:
    },
    {1, 0, 0, 0, 1, 0, 0, 0, 1},
	{1, 0, 0, 0, 1, 0, 0, 0, 1}
};

void multiply_matrix_matrix(const Matrix3x3 *a, const Matrix3x3 *b, Matrix3x3 *result) {
 8000ff4:	b590      	push	{r4, r7, lr}
 8000ff6:	b089      	sub	sp, #36	@ 0x24
 8000ff8:	af00      	add	r7, sp, #0
 8000ffa:	60f8      	str	r0, [r7, #12]
 8000ffc:	60b9      	str	r1, [r7, #8]
 8000ffe:	607a      	str	r2, [r7, #4]
	for (int i = 0; i < 3; i++) {
 8001000:	2300      	movs	r3, #0
 8001002:	61fb      	str	r3, [r7, #28]
 8001004:	e04d      	b.n	80010a2 <multiply_matrix_matrix+0xae>
		for (int j = 0; j < 3; j++) {
 8001006:	2300      	movs	r3, #0
 8001008:	61bb      	str	r3, [r7, #24]
 800100a:	e044      	b.n	8001096 <multiply_matrix_matrix+0xa2>
			result->m[i][j] = 0;
 800100c:	6879      	ldr	r1, [r7, #4]
 800100e:	69fa      	ldr	r2, [r7, #28]
 8001010:	4613      	mov	r3, r2
 8001012:	005b      	lsls	r3, r3, #1
 8001014:	4413      	add	r3, r2
 8001016:	69ba      	ldr	r2, [r7, #24]
 8001018:	4413      	add	r3, r2
 800101a:	f04f 0200 	mov.w	r2, #0
 800101e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
			for (int k = 0; k < 3; k++) {
 8001022:	2300      	movs	r3, #0
 8001024:	617b      	str	r3, [r7, #20]
 8001026:	e030      	b.n	800108a <multiply_matrix_matrix+0x96>
				result->m[i][j] += a->m[i][k] * b->m[k][j];
 8001028:	6879      	ldr	r1, [r7, #4]
 800102a:	69fa      	ldr	r2, [r7, #28]
 800102c:	4613      	mov	r3, r2
 800102e:	005b      	lsls	r3, r3, #1
 8001030:	4413      	add	r3, r2
 8001032:	69ba      	ldr	r2, [r7, #24]
 8001034:	4413      	add	r3, r2
 8001036:	f851 4023 	ldr.w	r4, [r1, r3, lsl #2]
 800103a:	68f9      	ldr	r1, [r7, #12]
 800103c:	69fa      	ldr	r2, [r7, #28]
 800103e:	4613      	mov	r3, r2
 8001040:	005b      	lsls	r3, r3, #1
 8001042:	4413      	add	r3, r2
 8001044:	697a      	ldr	r2, [r7, #20]
 8001046:	4413      	add	r3, r2
 8001048:	f851 0023 	ldr.w	r0, [r1, r3, lsl #2]
 800104c:	68b9      	ldr	r1, [r7, #8]
 800104e:	697a      	ldr	r2, [r7, #20]
 8001050:	4613      	mov	r3, r2
 8001052:	005b      	lsls	r3, r3, #1
 8001054:	4413      	add	r3, r2
 8001056:	69ba      	ldr	r2, [r7, #24]
 8001058:	4413      	add	r3, r2
 800105a:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
 800105e:	4619      	mov	r1, r3
 8001060:	f7ff fe52 	bl	8000d08 <__aeabi_fmul>
 8001064:	4603      	mov	r3, r0
 8001066:	4619      	mov	r1, r3
 8001068:	4620      	mov	r0, r4
 800106a:	f7ff fd45 	bl	8000af8 <__addsf3>
 800106e:	4603      	mov	r3, r0
 8001070:	4618      	mov	r0, r3
 8001072:	6879      	ldr	r1, [r7, #4]
 8001074:	69fa      	ldr	r2, [r7, #28]
 8001076:	4613      	mov	r3, r2
 8001078:	005b      	lsls	r3, r3, #1
 800107a:	4413      	add	r3, r2
 800107c:	69ba      	ldr	r2, [r7, #24]
 800107e:	4413      	add	r3, r2
 8001080:	f841 0023 	str.w	r0, [r1, r3, lsl #2]
			for (int k = 0; k < 3; k++) {
 8001084:	697b      	ldr	r3, [r7, #20]
 8001086:	3301      	adds	r3, #1
 8001088:	617b      	str	r3, [r7, #20]
 800108a:	697b      	ldr	r3, [r7, #20]
 800108c:	2b02      	cmp	r3, #2
 800108e:	ddcb      	ble.n	8001028 <multiply_matrix_matrix+0x34>
		for (int j = 0; j < 3; j++) {
 8001090:	69bb      	ldr	r3, [r7, #24]
 8001092:	3301      	adds	r3, #1
 8001094:	61bb      	str	r3, [r7, #24]
 8001096:	69bb      	ldr	r3, [r7, #24]
 8001098:	2b02      	cmp	r3, #2
 800109a:	ddb7      	ble.n	800100c <multiply_matrix_matrix+0x18>
	for (int i = 0; i < 3; i++) {
 800109c:	69fb      	ldr	r3, [r7, #28]
 800109e:	3301      	adds	r3, #1
 80010a0:	61fb      	str	r3, [r7, #28]
 80010a2:	69fb      	ldr	r3, [r7, #28]
 80010a4:	2b02      	cmp	r3, #2
 80010a6:	ddae      	ble.n	8001006 <multiply_matrix_matrix+0x12>
			}
		}
	}
}
 80010a8:	bf00      	nop
 80010aa:	bf00      	nop
 80010ac:	3724      	adds	r7, #36	@ 0x24
 80010ae:	46bd      	mov	sp, r7
 80010b0:	bd90      	pop	{r4, r7, pc}

080010b2 <multiply_matrix_vector>:
void multiply_matrix_vector(const Matrix3x3 *mat, const Point *in, Point *out) {
 80010b2:	b5b0      	push	{r4, r5, r7, lr}
 80010b4:	b084      	sub	sp, #16
 80010b6:	af00      	add	r7, sp, #0
 80010b8:	60f8      	str	r0, [r7, #12]
 80010ba:	60b9      	str	r1, [r7, #8]
 80010bc:	607a      	str	r2, [r7, #4]
	out->x = mat->m[0][0] * in->x + mat->m[0][1] * in->y + mat->m[0][2] * in->z;
 80010be:	68fb      	ldr	r3, [r7, #12]
 80010c0:	681c      	ldr	r4, [r3, #0]
 80010c2:	68bb      	ldr	r3, [r7, #8]
 80010c4:	681b      	ldr	r3, [r3, #0]
 80010c6:	4618      	mov	r0, r3
 80010c8:	f7ff fdca 	bl	8000c60 <__aeabi_i2f>
 80010cc:	4603      	mov	r3, r0
 80010ce:	4619      	mov	r1, r3
 80010d0:	4620      	mov	r0, r4
 80010d2:	f7ff fe19 	bl	8000d08 <__aeabi_fmul>
 80010d6:	4603      	mov	r3, r0
 80010d8:	461d      	mov	r5, r3
 80010da:	68fb      	ldr	r3, [r7, #12]
 80010dc:	685c      	ldr	r4, [r3, #4]
 80010de:	68bb      	ldr	r3, [r7, #8]
 80010e0:	685b      	ldr	r3, [r3, #4]
 80010e2:	4618      	mov	r0, r3
 80010e4:	f7ff fdbc 	bl	8000c60 <__aeabi_i2f>
 80010e8:	4603      	mov	r3, r0
 80010ea:	4619      	mov	r1, r3
 80010ec:	4620      	mov	r0, r4
 80010ee:	f7ff fe0b 	bl	8000d08 <__aeabi_fmul>
 80010f2:	4603      	mov	r3, r0
 80010f4:	4619      	mov	r1, r3
 80010f6:	4628      	mov	r0, r5
 80010f8:	f7ff fcfe 	bl	8000af8 <__addsf3>
 80010fc:	4603      	mov	r3, r0
 80010fe:	461d      	mov	r5, r3
 8001100:	68fb      	ldr	r3, [r7, #12]
 8001102:	689c      	ldr	r4, [r3, #8]
 8001104:	68bb      	ldr	r3, [r7, #8]
 8001106:	689b      	ldr	r3, [r3, #8]
 8001108:	4618      	mov	r0, r3
 800110a:	f7ff fda9 	bl	8000c60 <__aeabi_i2f>
 800110e:	4603      	mov	r3, r0
 8001110:	4619      	mov	r1, r3
 8001112:	4620      	mov	r0, r4
 8001114:	f7ff fdf8 	bl	8000d08 <__aeabi_fmul>
 8001118:	4603      	mov	r3, r0
 800111a:	4619      	mov	r1, r3
 800111c:	4628      	mov	r0, r5
 800111e:	f7ff fceb 	bl	8000af8 <__addsf3>
 8001122:	4603      	mov	r3, r0
 8001124:	4618      	mov	r0, r3
 8001126:	f7ff ff3f 	bl	8000fa8 <__aeabi_f2iz>
 800112a:	4602      	mov	r2, r0
 800112c:	687b      	ldr	r3, [r7, #4]
 800112e:	601a      	str	r2, [r3, #0]
	out->y = mat->m[1][0] * in->x + mat->m[1][1] * in->y + mat->m[1][2] * in->z;
 8001130:	68fb      	ldr	r3, [r7, #12]
 8001132:	68dc      	ldr	r4, [r3, #12]
 8001134:	68bb      	ldr	r3, [r7, #8]
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	4618      	mov	r0, r3
 800113a:	f7ff fd91 	bl	8000c60 <__aeabi_i2f>
 800113e:	4603      	mov	r3, r0
 8001140:	4619      	mov	r1, r3
 8001142:	4620      	mov	r0, r4
 8001144:	f7ff fde0 	bl	8000d08 <__aeabi_fmul>
 8001148:	4603      	mov	r3, r0
 800114a:	461d      	mov	r5, r3
 800114c:	68fb      	ldr	r3, [r7, #12]
 800114e:	691c      	ldr	r4, [r3, #16]
 8001150:	68bb      	ldr	r3, [r7, #8]
 8001152:	685b      	ldr	r3, [r3, #4]
 8001154:	4618      	mov	r0, r3
 8001156:	f7ff fd83 	bl	8000c60 <__aeabi_i2f>
 800115a:	4603      	mov	r3, r0
 800115c:	4619      	mov	r1, r3
 800115e:	4620      	mov	r0, r4
 8001160:	f7ff fdd2 	bl	8000d08 <__aeabi_fmul>
 8001164:	4603      	mov	r3, r0
 8001166:	4619      	mov	r1, r3
 8001168:	4628      	mov	r0, r5
 800116a:	f7ff fcc5 	bl	8000af8 <__addsf3>
 800116e:	4603      	mov	r3, r0
 8001170:	461d      	mov	r5, r3
 8001172:	68fb      	ldr	r3, [r7, #12]
 8001174:	695c      	ldr	r4, [r3, #20]
 8001176:	68bb      	ldr	r3, [r7, #8]
 8001178:	689b      	ldr	r3, [r3, #8]
 800117a:	4618      	mov	r0, r3
 800117c:	f7ff fd70 	bl	8000c60 <__aeabi_i2f>
 8001180:	4603      	mov	r3, r0
 8001182:	4619      	mov	r1, r3
 8001184:	4620      	mov	r0, r4
 8001186:	f7ff fdbf 	bl	8000d08 <__aeabi_fmul>
 800118a:	4603      	mov	r3, r0
 800118c:	4619      	mov	r1, r3
 800118e:	4628      	mov	r0, r5
 8001190:	f7ff fcb2 	bl	8000af8 <__addsf3>
 8001194:	4603      	mov	r3, r0
 8001196:	4618      	mov	r0, r3
 8001198:	f7ff ff06 	bl	8000fa8 <__aeabi_f2iz>
 800119c:	4602      	mov	r2, r0
 800119e:	687b      	ldr	r3, [r7, #4]
 80011a0:	605a      	str	r2, [r3, #4]
	out->z = mat->m[2][0] * in->x + mat->m[2][1] * in->y + mat->m[2][2] * in->z;
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	699c      	ldr	r4, [r3, #24]
 80011a6:	68bb      	ldr	r3, [r7, #8]
 80011a8:	681b      	ldr	r3, [r3, #0]
 80011aa:	4618      	mov	r0, r3
 80011ac:	f7ff fd58 	bl	8000c60 <__aeabi_i2f>
 80011b0:	4603      	mov	r3, r0
 80011b2:	4619      	mov	r1, r3
 80011b4:	4620      	mov	r0, r4
 80011b6:	f7ff fda7 	bl	8000d08 <__aeabi_fmul>
 80011ba:	4603      	mov	r3, r0
 80011bc:	461d      	mov	r5, r3
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	69dc      	ldr	r4, [r3, #28]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	685b      	ldr	r3, [r3, #4]
 80011c6:	4618      	mov	r0, r3
 80011c8:	f7ff fd4a 	bl	8000c60 <__aeabi_i2f>
 80011cc:	4603      	mov	r3, r0
 80011ce:	4619      	mov	r1, r3
 80011d0:	4620      	mov	r0, r4
 80011d2:	f7ff fd99 	bl	8000d08 <__aeabi_fmul>
 80011d6:	4603      	mov	r3, r0
 80011d8:	4619      	mov	r1, r3
 80011da:	4628      	mov	r0, r5
 80011dc:	f7ff fc8c 	bl	8000af8 <__addsf3>
 80011e0:	4603      	mov	r3, r0
 80011e2:	461d      	mov	r5, r3
 80011e4:	68fb      	ldr	r3, [r7, #12]
 80011e6:	6a1c      	ldr	r4, [r3, #32]
 80011e8:	68bb      	ldr	r3, [r7, #8]
 80011ea:	689b      	ldr	r3, [r3, #8]
 80011ec:	4618      	mov	r0, r3
 80011ee:	f7ff fd37 	bl	8000c60 <__aeabi_i2f>
 80011f2:	4603      	mov	r3, r0
 80011f4:	4619      	mov	r1, r3
 80011f6:	4620      	mov	r0, r4
 80011f8:	f7ff fd86 	bl	8000d08 <__aeabi_fmul>
 80011fc:	4603      	mov	r3, r0
 80011fe:	4619      	mov	r1, r3
 8001200:	4628      	mov	r0, r5
 8001202:	f7ff fc79 	bl	8000af8 <__addsf3>
 8001206:	4603      	mov	r3, r0
 8001208:	4618      	mov	r0, r3
 800120a:	f7ff fecd 	bl	8000fa8 <__aeabi_f2iz>
 800120e:	4602      	mov	r2, r0
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	609a      	str	r2, [r3, #8]
}
 8001214:	bf00      	nop
 8001216:	3710      	adds	r7, #16
 8001218:	46bd      	mov	sp, r7
 800121a:	bdb0      	pop	{r4, r5, r7, pc}

0800121c <get_rotation_matrix_x>:
Matrix3x3 get_rotation_matrix_x(float angle) {
 800121c:	b5b0      	push	{r4, r5, r7, lr}
 800121e:	b08c      	sub	sp, #48	@ 0x30
 8001220:	af00      	add	r7, sp, #0
 8001222:	6078      	str	r0, [r7, #4]
 8001224:	6039      	str	r1, [r7, #0]
	Matrix3x3 mat = {
 8001226:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800122a:	60fb      	str	r3, [r7, #12]
 800122c:	f04f 0300 	mov.w	r3, #0
 8001230:	613b      	str	r3, [r7, #16]
 8001232:	f04f 0300 	mov.w	r3, #0
 8001236:	617b      	str	r3, [r7, #20]
 8001238:	f04f 0300 	mov.w	r3, #0
 800123c:	61bb      	str	r3, [r7, #24]
		{
			{1, 0, 0},
			{0, cos(angle), -sin(angle)},
 800123e:	6838      	ldr	r0, [r7, #0]
 8001240:	f7ff f8ea 	bl	8000418 <__aeabi_f2d>
 8001244:	4602      	mov	r2, r0
 8001246:	460b      	mov	r3, r1
 8001248:	4610      	mov	r0, r2
 800124a:	4619      	mov	r1, r3
 800124c:	f003 fad4 	bl	80047f8 <cos>
 8001250:	4602      	mov	r2, r0
 8001252:	460b      	mov	r3, r1
 8001254:	4610      	mov	r0, r2
 8001256:	4619      	mov	r1, r3
 8001258:	f7ff fbf8 	bl	8000a4c <__aeabi_d2f>
 800125c:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 800125e:	61fb      	str	r3, [r7, #28]
			{0, cos(angle), -sin(angle)},
 8001260:	6838      	ldr	r0, [r7, #0]
 8001262:	f7ff f8d9 	bl	8000418 <__aeabi_f2d>
 8001266:	4602      	mov	r2, r0
 8001268:	460b      	mov	r3, r1
 800126a:	4610      	mov	r0, r2
 800126c:	4619      	mov	r1, r3
 800126e:	f003 fb09 	bl	8004884 <sin>
 8001272:	4602      	mov	r2, r0
 8001274:	460b      	mov	r3, r1
 8001276:	4610      	mov	r0, r2
 8001278:	4619      	mov	r1, r3
 800127a:	f7ff fbe7 	bl	8000a4c <__aeabi_d2f>
 800127e:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 8001280:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001284:	623b      	str	r3, [r7, #32]
 8001286:	f04f 0300 	mov.w	r3, #0
 800128a:	627b      	str	r3, [r7, #36]	@ 0x24
			{0, sin(angle), cos(angle)}
 800128c:	6838      	ldr	r0, [r7, #0]
 800128e:	f7ff f8c3 	bl	8000418 <__aeabi_f2d>
 8001292:	4602      	mov	r2, r0
 8001294:	460b      	mov	r3, r1
 8001296:	4610      	mov	r0, r2
 8001298:	4619      	mov	r1, r3
 800129a:	f003 faf3 	bl	8004884 <sin>
 800129e:	4602      	mov	r2, r0
 80012a0:	460b      	mov	r3, r1
 80012a2:	4610      	mov	r0, r2
 80012a4:	4619      	mov	r1, r3
 80012a6:	f7ff fbd1 	bl	8000a4c <__aeabi_d2f>
 80012aa:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 80012ac:	62bb      	str	r3, [r7, #40]	@ 0x28
			{0, sin(angle), cos(angle)}
 80012ae:	6838      	ldr	r0, [r7, #0]
 80012b0:	f7ff f8b2 	bl	8000418 <__aeabi_f2d>
 80012b4:	4602      	mov	r2, r0
 80012b6:	460b      	mov	r3, r1
 80012b8:	4610      	mov	r0, r2
 80012ba:	4619      	mov	r1, r3
 80012bc:	f003 fa9c 	bl	80047f8 <cos>
 80012c0:	4602      	mov	r2, r0
 80012c2:	460b      	mov	r3, r1
 80012c4:	4610      	mov	r0, r2
 80012c6:	4619      	mov	r1, r3
 80012c8:	f7ff fbc0 	bl	8000a4c <__aeabi_d2f>
 80012cc:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 80012ce:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	};
	return mat;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	461d      	mov	r5, r3
 80012d4:	f107 040c 	add.w	r4, r7, #12
 80012d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80012de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80012e0:	6823      	ldr	r3, [r4, #0]
 80012e2:	602b      	str	r3, [r5, #0]
}
 80012e4:	6878      	ldr	r0, [r7, #4]
 80012e6:	3730      	adds	r7, #48	@ 0x30
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bdb0      	pop	{r4, r5, r7, pc}

080012ec <get_rotation_matrix_y>:
Matrix3x3 get_rotation_matrix_y(float angle) {
 80012ec:	b5b0      	push	{r4, r5, r7, lr}
 80012ee:	b08c      	sub	sp, #48	@ 0x30
 80012f0:	af00      	add	r7, sp, #0
 80012f2:	6078      	str	r0, [r7, #4]
 80012f4:	6039      	str	r1, [r7, #0]
	Matrix3x3 mat = {
		{
			{cos(angle), 0, sin(angle)},
 80012f6:	6838      	ldr	r0, [r7, #0]
 80012f8:	f7ff f88e 	bl	8000418 <__aeabi_f2d>
 80012fc:	4602      	mov	r2, r0
 80012fe:	460b      	mov	r3, r1
 8001300:	4610      	mov	r0, r2
 8001302:	4619      	mov	r1, r3
 8001304:	f003 fa78 	bl	80047f8 <cos>
 8001308:	4602      	mov	r2, r0
 800130a:	460b      	mov	r3, r1
 800130c:	4610      	mov	r0, r2
 800130e:	4619      	mov	r1, r3
 8001310:	f7ff fb9c 	bl	8000a4c <__aeabi_d2f>
 8001314:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 8001316:	60fb      	str	r3, [r7, #12]
 8001318:	f04f 0300 	mov.w	r3, #0
 800131c:	613b      	str	r3, [r7, #16]
			{cos(angle), 0, sin(angle)},
 800131e:	6838      	ldr	r0, [r7, #0]
 8001320:	f7ff f87a 	bl	8000418 <__aeabi_f2d>
 8001324:	4602      	mov	r2, r0
 8001326:	460b      	mov	r3, r1
 8001328:	4610      	mov	r0, r2
 800132a:	4619      	mov	r1, r3
 800132c:	f003 faaa 	bl	8004884 <sin>
 8001330:	4602      	mov	r2, r0
 8001332:	460b      	mov	r3, r1
 8001334:	4610      	mov	r0, r2
 8001336:	4619      	mov	r1, r3
 8001338:	f7ff fb88 	bl	8000a4c <__aeabi_d2f>
 800133c:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 800133e:	617b      	str	r3, [r7, #20]
 8001340:	f04f 0300 	mov.w	r3, #0
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800134a:	61fb      	str	r3, [r7, #28]
 800134c:	f04f 0300 	mov.w	r3, #0
 8001350:	623b      	str	r3, [r7, #32]
			{0, 1, 0},
			{-sin(angle), 0, cos(angle)}
 8001352:	6838      	ldr	r0, [r7, #0]
 8001354:	f7ff f860 	bl	8000418 <__aeabi_f2d>
 8001358:	4602      	mov	r2, r0
 800135a:	460b      	mov	r3, r1
 800135c:	4610      	mov	r0, r2
 800135e:	4619      	mov	r1, r3
 8001360:	f003 fa90 	bl	8004884 <sin>
 8001364:	4602      	mov	r2, r0
 8001366:	460b      	mov	r3, r1
 8001368:	4610      	mov	r0, r2
 800136a:	4619      	mov	r1, r3
 800136c:	f7ff fb6e 	bl	8000a4c <__aeabi_d2f>
 8001370:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 8001372:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001376:	627b      	str	r3, [r7, #36]	@ 0x24
 8001378:	f04f 0300 	mov.w	r3, #0
 800137c:	62bb      	str	r3, [r7, #40]	@ 0x28
			{-sin(angle), 0, cos(angle)}
 800137e:	6838      	ldr	r0, [r7, #0]
 8001380:	f7ff f84a 	bl	8000418 <__aeabi_f2d>
 8001384:	4602      	mov	r2, r0
 8001386:	460b      	mov	r3, r1
 8001388:	4610      	mov	r0, r2
 800138a:	4619      	mov	r1, r3
 800138c:	f003 fa34 	bl	80047f8 <cos>
 8001390:	4602      	mov	r2, r0
 8001392:	460b      	mov	r3, r1
 8001394:	4610      	mov	r0, r2
 8001396:	4619      	mov	r1, r3
 8001398:	f7ff fb58 	bl	8000a4c <__aeabi_d2f>
 800139c:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 800139e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		}
	};
	return mat;
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	461d      	mov	r5, r3
 80013a4:	f107 040c 	add.w	r4, r7, #12
 80013a8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013aa:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013ac:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ae:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b0:	6823      	ldr	r3, [r4, #0]
 80013b2:	602b      	str	r3, [r5, #0]
}
 80013b4:	6878      	ldr	r0, [r7, #4]
 80013b6:	3730      	adds	r7, #48	@ 0x30
 80013b8:	46bd      	mov	sp, r7
 80013ba:	bdb0      	pop	{r4, r5, r7, pc}

080013bc <get_rotation_matrix_z>:
Matrix3x3 get_rotation_matrix_z(float angle) {
 80013bc:	b5b0      	push	{r4, r5, r7, lr}
 80013be:	b08c      	sub	sp, #48	@ 0x30
 80013c0:	af00      	add	r7, sp, #0
 80013c2:	6078      	str	r0, [r7, #4]
 80013c4:	6039      	str	r1, [r7, #0]
	Matrix3x3 mat = {
		{
			{cos(angle), -sin(angle), 0},
 80013c6:	6838      	ldr	r0, [r7, #0]
 80013c8:	f7ff f826 	bl	8000418 <__aeabi_f2d>
 80013cc:	4602      	mov	r2, r0
 80013ce:	460b      	mov	r3, r1
 80013d0:	4610      	mov	r0, r2
 80013d2:	4619      	mov	r1, r3
 80013d4:	f003 fa10 	bl	80047f8 <cos>
 80013d8:	4602      	mov	r2, r0
 80013da:	460b      	mov	r3, r1
 80013dc:	4610      	mov	r0, r2
 80013de:	4619      	mov	r1, r3
 80013e0:	f7ff fb34 	bl	8000a4c <__aeabi_d2f>
 80013e4:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 80013e6:	60fb      	str	r3, [r7, #12]
			{cos(angle), -sin(angle), 0},
 80013e8:	6838      	ldr	r0, [r7, #0]
 80013ea:	f7ff f815 	bl	8000418 <__aeabi_f2d>
 80013ee:	4602      	mov	r2, r0
 80013f0:	460b      	mov	r3, r1
 80013f2:	4610      	mov	r0, r2
 80013f4:	4619      	mov	r1, r3
 80013f6:	f003 fa45 	bl	8004884 <sin>
 80013fa:	4602      	mov	r2, r0
 80013fc:	460b      	mov	r3, r1
 80013fe:	4610      	mov	r0, r2
 8001400:	4619      	mov	r1, r3
 8001402:	f7ff fb23 	bl	8000a4c <__aeabi_d2f>
 8001406:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 8001408:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800140c:	613b      	str	r3, [r7, #16]
 800140e:	f04f 0300 	mov.w	r3, #0
 8001412:	617b      	str	r3, [r7, #20]
			{sin(angle), cos(angle), 0},
 8001414:	6838      	ldr	r0, [r7, #0]
 8001416:	f7fe ffff 	bl	8000418 <__aeabi_f2d>
 800141a:	4602      	mov	r2, r0
 800141c:	460b      	mov	r3, r1
 800141e:	4610      	mov	r0, r2
 8001420:	4619      	mov	r1, r3
 8001422:	f003 fa2f 	bl	8004884 <sin>
 8001426:	4602      	mov	r2, r0
 8001428:	460b      	mov	r3, r1
 800142a:	4610      	mov	r0, r2
 800142c:	4619      	mov	r1, r3
 800142e:	f7ff fb0d 	bl	8000a4c <__aeabi_d2f>
 8001432:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 8001434:	61bb      	str	r3, [r7, #24]
			{sin(angle), cos(angle), 0},
 8001436:	6838      	ldr	r0, [r7, #0]
 8001438:	f7fe ffee 	bl	8000418 <__aeabi_f2d>
 800143c:	4602      	mov	r2, r0
 800143e:	460b      	mov	r3, r1
 8001440:	4610      	mov	r0, r2
 8001442:	4619      	mov	r1, r3
 8001444:	f003 f9d8 	bl	80047f8 <cos>
 8001448:	4602      	mov	r2, r0
 800144a:	460b      	mov	r3, r1
 800144c:	4610      	mov	r0, r2
 800144e:	4619      	mov	r1, r3
 8001450:	f7ff fafc 	bl	8000a4c <__aeabi_d2f>
 8001454:	4603      	mov	r3, r0
	Matrix3x3 mat = {
 8001456:	61fb      	str	r3, [r7, #28]
 8001458:	f04f 0300 	mov.w	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
 800145e:	f04f 0300 	mov.w	r3, #0
 8001462:	627b      	str	r3, [r7, #36]	@ 0x24
 8001464:	f04f 0300 	mov.w	r3, #0
 8001468:	62bb      	str	r3, [r7, #40]	@ 0x28
 800146a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800146e:	62fb      	str	r3, [r7, #44]	@ 0x2c
			{0, 0, 1}
		}
	};
	return mat;
 8001470:	687b      	ldr	r3, [r7, #4]
 8001472:	461d      	mov	r5, r3
 8001474:	f107 040c 	add.w	r4, r7, #12
 8001478:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800147c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800147e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001480:	6823      	ldr	r3, [r4, #0]
 8001482:	602b      	str	r3, [r5, #0]
}
 8001484:	6878      	ldr	r0, [r7, #4]
 8001486:	3730      	adds	r7, #48	@ 0x30
 8001488:	46bd      	mov	sp, r7
 800148a:	bdb0      	pop	{r4, r5, r7, pc}

0800148c <project>:

void project(Point *p, float d) {
 800148c:	b580      	push	{r7, lr}
 800148e:	b084      	sub	sp, #16
 8001490:	af00      	add	r7, sp, #0
 8001492:	6078      	str	r0, [r7, #4]
 8001494:	6039      	str	r1, [r7, #0]
	float factor = d / (d + p->z);
 8001496:	687b      	ldr	r3, [r7, #4]
 8001498:	689b      	ldr	r3, [r3, #8]
 800149a:	4618      	mov	r0, r3
 800149c:	f7ff fbe0 	bl	8000c60 <__aeabi_i2f>
 80014a0:	4603      	mov	r3, r0
 80014a2:	6839      	ldr	r1, [r7, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff fb27 	bl	8000af8 <__addsf3>
 80014aa:	4603      	mov	r3, r0
 80014ac:	4619      	mov	r1, r3
 80014ae:	6838      	ldr	r0, [r7, #0]
 80014b0:	f7ff fcde 	bl	8000e70 <__aeabi_fdiv>
 80014b4:	4603      	mov	r3, r0
 80014b6:	60fb      	str	r3, [r7, #12]
	p->x = (int)(p->x * factor);
 80014b8:	687b      	ldr	r3, [r7, #4]
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fbcf 	bl	8000c60 <__aeabi_i2f>
 80014c2:	4603      	mov	r3, r0
 80014c4:	68f9      	ldr	r1, [r7, #12]
 80014c6:	4618      	mov	r0, r3
 80014c8:	f7ff fc1e 	bl	8000d08 <__aeabi_fmul>
 80014cc:	4603      	mov	r3, r0
 80014ce:	4618      	mov	r0, r3
 80014d0:	f7ff fd6a 	bl	8000fa8 <__aeabi_f2iz>
 80014d4:	4602      	mov	r2, r0
 80014d6:	687b      	ldr	r3, [r7, #4]
 80014d8:	601a      	str	r2, [r3, #0]
	p->y = (int)(p->y * factor);
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	685b      	ldr	r3, [r3, #4]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fbbe 	bl	8000c60 <__aeabi_i2f>
 80014e4:	4603      	mov	r3, r0
 80014e6:	68f9      	ldr	r1, [r7, #12]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff fc0d 	bl	8000d08 <__aeabi_fmul>
 80014ee:	4603      	mov	r3, r0
 80014f0:	4618      	mov	r0, r3
 80014f2:	f7ff fd59 	bl	8000fa8 <__aeabi_f2iz>
 80014f6:	4602      	mov	r2, r0
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	605a      	str	r2, [r3, #4]
}
 80014fc:	bf00      	nop
 80014fe:	3710      	adds	r7, #16
 8001500:	46bd      	mov	sp, r7
 8001502:	bd80      	pop	{r7, pc}

08001504 <get_center>:

Point get_center(const Cube *cube) {
 8001504:	b490      	push	{r4, r7}
 8001506:	b086      	sub	sp, #24
 8001508:	af00      	add	r7, sp, #0
 800150a:	6078      	str	r0, [r7, #4]
 800150c:	6039      	str	r1, [r7, #0]
	Point center = {0, 0, 0};
 800150e:	2300      	movs	r3, #0
 8001510:	60bb      	str	r3, [r7, #8]
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	2300      	movs	r3, #0
 8001518:	613b      	str	r3, [r7, #16]

	for (int i = 0; i < 8; ++i) {
 800151a:	2300      	movs	r3, #0
 800151c:	617b      	str	r3, [r7, #20]
 800151e:	e025      	b.n	800156c <get_center+0x68>
		center.x += cube->p[i].x;
 8001520:	68b9      	ldr	r1, [r7, #8]
 8001522:	6838      	ldr	r0, [r7, #0]
 8001524:	697a      	ldr	r2, [r7, #20]
 8001526:	4613      	mov	r3, r2
 8001528:	005b      	lsls	r3, r3, #1
 800152a:	4413      	add	r3, r2
 800152c:	009b      	lsls	r3, r3, #2
 800152e:	4403      	add	r3, r0
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	440b      	add	r3, r1
 8001534:	60bb      	str	r3, [r7, #8]
		center.y += cube->p[i].y;
 8001536:	68f9      	ldr	r1, [r7, #12]
 8001538:	6838      	ldr	r0, [r7, #0]
 800153a:	697a      	ldr	r2, [r7, #20]
 800153c:	4613      	mov	r3, r2
 800153e:	005b      	lsls	r3, r3, #1
 8001540:	4413      	add	r3, r2
 8001542:	009b      	lsls	r3, r3, #2
 8001544:	4403      	add	r3, r0
 8001546:	3304      	adds	r3, #4
 8001548:	681b      	ldr	r3, [r3, #0]
 800154a:	440b      	add	r3, r1
 800154c:	60fb      	str	r3, [r7, #12]
		center.z += cube->p[i].z;
 800154e:	6939      	ldr	r1, [r7, #16]
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	697a      	ldr	r2, [r7, #20]
 8001554:	4613      	mov	r3, r2
 8001556:	005b      	lsls	r3, r3, #1
 8001558:	4413      	add	r3, r2
 800155a:	009b      	lsls	r3, r3, #2
 800155c:	4403      	add	r3, r0
 800155e:	3308      	adds	r3, #8
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	440b      	add	r3, r1
 8001564:	613b      	str	r3, [r7, #16]
	for (int i = 0; i < 8; ++i) {
 8001566:	697b      	ldr	r3, [r7, #20]
 8001568:	3301      	adds	r3, #1
 800156a:	617b      	str	r3, [r7, #20]
 800156c:	697b      	ldr	r3, [r7, #20]
 800156e:	2b07      	cmp	r3, #7
 8001570:	ddd6      	ble.n	8001520 <get_center+0x1c>
	}

	center.x /= 8;
 8001572:	68bb      	ldr	r3, [r7, #8]
 8001574:	2b00      	cmp	r3, #0
 8001576:	da00      	bge.n	800157a <get_center+0x76>
 8001578:	3307      	adds	r3, #7
 800157a:	10db      	asrs	r3, r3, #3
 800157c:	60bb      	str	r3, [r7, #8]
	center.y /= 8;
 800157e:	68fb      	ldr	r3, [r7, #12]
 8001580:	2b00      	cmp	r3, #0
 8001582:	da00      	bge.n	8001586 <get_center+0x82>
 8001584:	3307      	adds	r3, #7
 8001586:	10db      	asrs	r3, r3, #3
 8001588:	60fb      	str	r3, [r7, #12]
	center.z /= 8;
 800158a:	693b      	ldr	r3, [r7, #16]
 800158c:	2b00      	cmp	r3, #0
 800158e:	da00      	bge.n	8001592 <get_center+0x8e>
 8001590:	3307      	adds	r3, #7
 8001592:	10db      	asrs	r3, r3, #3
 8001594:	613b      	str	r3, [r7, #16]

	return center;
 8001596:	687b      	ldr	r3, [r7, #4]
 8001598:	461c      	mov	r4, r3
 800159a:	f107 0308 	add.w	r3, r7, #8
 800159e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 80015a2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 80015a6:	6878      	ldr	r0, [r7, #4]
 80015a8:	3718      	adds	r7, #24
 80015aa:	46bd      	mov	sp, r7
 80015ac:	bc90      	pop	{r4, r7}
 80015ae:	4770      	bx	lr

080015b0 <apply_transformation>:


void apply_transformation(Cube *cube) {
 80015b0:	b590      	push	{r4, r7, lr}
 80015b2:	b0d1      	sub	sp, #324	@ 0x144
 80015b4:	af00      	add	r7, sp, #0
 80015b6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015ba:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015be:	6018      	str	r0, [r3, #0]
    Point center = get_center(cube);
 80015c0:	f507 7294 	add.w	r2, r7, #296	@ 0x128
 80015c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015c8:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015cc:	6819      	ldr	r1, [r3, #0]
 80015ce:	4610      	mov	r0, r2
 80015d0:	f7ff ff98 	bl	8001504 <get_center>

    // Translate cube to origin
    Point translated[8];
    for (int i = 0; i < 8; ++i) {
 80015d4:	2300      	movs	r3, #0
 80015d6:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 80015da:	e057      	b.n	800168c <apply_transformation+0xdc>
        translated[i].x = cube->p[i].x - center.x;
 80015dc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80015e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80015e4:	6819      	ldr	r1, [r3, #0]
 80015e6:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 80015ea:	4613      	mov	r3, r2
 80015ec:	005b      	lsls	r3, r3, #1
 80015ee:	4413      	add	r3, r2
 80015f0:	009b      	lsls	r3, r3, #2
 80015f2:	440b      	add	r3, r1
 80015f4:	681a      	ldr	r2, [r3, #0]
 80015f6:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 80015fa:	1ad1      	subs	r1, r2, r3
 80015fc:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001600:	4613      	mov	r3, r2
 8001602:	005b      	lsls	r3, r3, #1
 8001604:	4413      	add	r3, r2
 8001606:	009b      	lsls	r3, r3, #2
 8001608:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800160c:	443b      	add	r3, r7
 800160e:	3b78      	subs	r3, #120	@ 0x78
 8001610:	6019      	str	r1, [r3, #0]
        translated[i].y = cube->p[i].y - center.y;
 8001612:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001616:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800161a:	6819      	ldr	r1, [r3, #0]
 800161c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001620:	4613      	mov	r3, r2
 8001622:	005b      	lsls	r3, r3, #1
 8001624:	4413      	add	r3, r2
 8001626:	009b      	lsls	r3, r3, #2
 8001628:	440b      	add	r3, r1
 800162a:	3304      	adds	r3, #4
 800162c:	681a      	ldr	r2, [r3, #0]
 800162e:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 8001632:	1ad1      	subs	r1, r2, r3
 8001634:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001638:	4613      	mov	r3, r2
 800163a:	005b      	lsls	r3, r3, #1
 800163c:	4413      	add	r3, r2
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001644:	443b      	add	r3, r7
 8001646:	3b74      	subs	r3, #116	@ 0x74
 8001648:	6019      	str	r1, [r3, #0]
        translated[i].z = cube->p[i].z - center.z;
 800164a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800164e:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001652:	6819      	ldr	r1, [r3, #0]
 8001654:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001658:	4613      	mov	r3, r2
 800165a:	005b      	lsls	r3, r3, #1
 800165c:	4413      	add	r3, r2
 800165e:	009b      	lsls	r3, r3, #2
 8001660:	440b      	add	r3, r1
 8001662:	3308      	adds	r3, #8
 8001664:	681a      	ldr	r2, [r3, #0]
 8001666:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 800166a:	1ad1      	subs	r1, r2, r3
 800166c:	f8d7 213c 	ldr.w	r2, [r7, #316]	@ 0x13c
 8001670:	4613      	mov	r3, r2
 8001672:	005b      	lsls	r3, r3, #1
 8001674:	4413      	add	r3, r2
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800167c:	443b      	add	r3, r7
 800167e:	3b70      	subs	r3, #112	@ 0x70
 8001680:	6019      	str	r1, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8001682:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001686:	3301      	adds	r3, #1
 8001688:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
 800168c:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001690:	2b07      	cmp	r3, #7
 8001692:	dda3      	ble.n	80015dc <apply_transformation+0x2c>
    }

    // Apply rotation
    Point rotated[8];
    for (int i = 0; i < 8; ++i) {
 8001694:	2300      	movs	r3, #0
 8001696:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 800169a:	e021      	b.n	80016e0 <apply_transformation+0x130>
        multiply_matrix_vector(&cube->transform, &translated[i], &rotated[i]);
 800169c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80016a0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80016a4:	681b      	ldr	r3, [r3, #0]
 80016a6:	f103 0060 	add.w	r0, r3, #96	@ 0x60
 80016aa:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80016ae:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80016b2:	4613      	mov	r3, r2
 80016b4:	005b      	lsls	r3, r3, #1
 80016b6:	4413      	add	r3, r2
 80016b8:	009b      	lsls	r3, r3, #2
 80016ba:	18cc      	adds	r4, r1, r3
 80016bc:	f107 0168 	add.w	r1, r7, #104	@ 0x68
 80016c0:	f8d7 2138 	ldr.w	r2, [r7, #312]	@ 0x138
 80016c4:	4613      	mov	r3, r2
 80016c6:	005b      	lsls	r3, r3, #1
 80016c8:	4413      	add	r3, r2
 80016ca:	009b      	lsls	r3, r3, #2
 80016cc:	440b      	add	r3, r1
 80016ce:	461a      	mov	r2, r3
 80016d0:	4621      	mov	r1, r4
 80016d2:	f7ff fcee 	bl	80010b2 <multiply_matrix_vector>
    for (int i = 0; i < 8; ++i) {
 80016d6:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80016da:	3301      	adds	r3, #1
 80016dc:	f8c7 3138 	str.w	r3, [r7, #312]	@ 0x138
 80016e0:	f8d7 3138 	ldr.w	r3, [r7, #312]	@ 0x138
 80016e4:	2b07      	cmp	r3, #7
 80016e6:	ddd9      	ble.n	800169c <apply_transformation+0xec>
    }

    // Translate back to original position
    Point projected[8];
    for (int i = 0; i < 8; ++i) {
 80016e8:	2300      	movs	r3, #0
 80016ea:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 80016ee:	e0af      	b.n	8001850 <apply_transformation+0x2a0>
        projected[i].x = rotated[i].x + center.x;
 80016f0:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80016f4:	4613      	mov	r3, r2
 80016f6:	005b      	lsls	r3, r3, #1
 80016f8:	4413      	add	r3, r2
 80016fa:	009b      	lsls	r3, r3, #2
 80016fc:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001700:	443b      	add	r3, r7
 8001702:	3bd8      	subs	r3, #216	@ 0xd8
 8001704:	681a      	ldr	r2, [r3, #0]
 8001706:	f8d7 3128 	ldr.w	r3, [r7, #296]	@ 0x128
 800170a:	18d1      	adds	r1, r2, r3
 800170c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001710:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 8001714:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001718:	4613      	mov	r3, r2
 800171a:	005b      	lsls	r3, r3, #1
 800171c:	4413      	add	r3, r2
 800171e:	009b      	lsls	r3, r3, #2
 8001720:	4403      	add	r3, r0
 8001722:	6019      	str	r1, [r3, #0]
        projected[i].y = rotated[i].y + center.y;
 8001724:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001728:	4613      	mov	r3, r2
 800172a:	005b      	lsls	r3, r3, #1
 800172c:	4413      	add	r3, r2
 800172e:	009b      	lsls	r3, r3, #2
 8001730:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 8001734:	443b      	add	r3, r7
 8001736:	3bd4      	subs	r3, #212	@ 0xd4
 8001738:	681a      	ldr	r2, [r3, #0]
 800173a:	f8d7 312c 	ldr.w	r3, [r7, #300]	@ 0x12c
 800173e:	18d1      	adds	r1, r2, r3
 8001740:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001744:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 8001748:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800174c:	4613      	mov	r3, r2
 800174e:	005b      	lsls	r3, r3, #1
 8001750:	4413      	add	r3, r2
 8001752:	009b      	lsls	r3, r3, #2
 8001754:	4403      	add	r3, r0
 8001756:	3304      	adds	r3, #4
 8001758:	6019      	str	r1, [r3, #0]
        projected[i].z = rotated[i].z + center.z;
 800175a:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 800175e:	4613      	mov	r3, r2
 8001760:	005b      	lsls	r3, r3, #1
 8001762:	4413      	add	r3, r2
 8001764:	009b      	lsls	r3, r3, #2
 8001766:	f503 73a0 	add.w	r3, r3, #320	@ 0x140
 800176a:	443b      	add	r3, r7
 800176c:	3bd0      	subs	r3, #208	@ 0xd0
 800176e:	681a      	ldr	r2, [r3, #0]
 8001770:	f8d7 3130 	ldr.w	r3, [r7, #304]	@ 0x130
 8001774:	18d1      	adds	r1, r2, r3
 8001776:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800177a:	f5a3 709c 	sub.w	r0, r3, #312	@ 0x138
 800177e:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001782:	4613      	mov	r3, r2
 8001784:	005b      	lsls	r3, r3, #1
 8001786:	4413      	add	r3, r2
 8001788:	009b      	lsls	r3, r3, #2
 800178a:	4403      	add	r3, r0
 800178c:	3308      	adds	r3, #8
 800178e:	6019      	str	r1, [r3, #0]
        project(&projected[i], 80.0);
 8001790:	f107 0108 	add.w	r1, r7, #8
 8001794:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001798:	4613      	mov	r3, r2
 800179a:	005b      	lsls	r3, r3, #1
 800179c:	4413      	add	r3, r2
 800179e:	009b      	lsls	r3, r3, #2
 80017a0:	440b      	add	r3, r1
 80017a2:	49b4      	ldr	r1, [pc, #720]	@ (8001a74 <apply_transformation+0x4c4>)
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7ff fe71 	bl	800148c <project>
        projected[i].x += WIDTH/2.0;
 80017aa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017ae:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80017b2:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80017b6:	4613      	mov	r3, r2
 80017b8:	005b      	lsls	r3, r3, #1
 80017ba:	4413      	add	r3, r2
 80017bc:	009b      	lsls	r3, r3, #2
 80017be:	440b      	add	r3, r1
 80017c0:	681b      	ldr	r3, [r3, #0]
 80017c2:	4618      	mov	r0, r3
 80017c4:	f7fe fe16 	bl	80003f4 <__aeabi_i2d>
 80017c8:	f04f 0200 	mov.w	r2, #0
 80017cc:	4baa      	ldr	r3, [pc, #680]	@ (8001a78 <apply_transformation+0x4c8>)
 80017ce:	f7fe fcc5 	bl	800015c <__adddf3>
 80017d2:	4602      	mov	r2, r0
 80017d4:	460b      	mov	r3, r1
 80017d6:	4610      	mov	r0, r2
 80017d8:	4619      	mov	r1, r3
 80017da:	f7ff f90f 	bl	80009fc <__aeabi_d2iz>
 80017de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017e2:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80017e6:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 80017ea:	4613      	mov	r3, r2
 80017ec:	005b      	lsls	r3, r3, #1
 80017ee:	4413      	add	r3, r2
 80017f0:	009b      	lsls	r3, r3, #2
 80017f2:	440b      	add	r3, r1
 80017f4:	6018      	str	r0, [r3, #0]
		projected[i].y += HEIGHT/2.0;
 80017f6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80017fa:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 80017fe:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001802:	4613      	mov	r3, r2
 8001804:	005b      	lsls	r3, r3, #1
 8001806:	4413      	add	r3, r2
 8001808:	009b      	lsls	r3, r3, #2
 800180a:	440b      	add	r3, r1
 800180c:	3304      	adds	r3, #4
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4618      	mov	r0, r3
 8001812:	f7fe fdef 	bl	80003f4 <__aeabi_i2d>
 8001816:	f04f 0200 	mov.w	r2, #0
 800181a:	4b98      	ldr	r3, [pc, #608]	@ (8001a7c <apply_transformation+0x4cc>)
 800181c:	f7fe fc9e 	bl	800015c <__adddf3>
 8001820:	4602      	mov	r2, r0
 8001822:	460b      	mov	r3, r1
 8001824:	4610      	mov	r0, r2
 8001826:	4619      	mov	r1, r3
 8001828:	f7ff f8e8 	bl	80009fc <__aeabi_d2iz>
 800182c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001830:	f5a3 719c 	sub.w	r1, r3, #312	@ 0x138
 8001834:	f8d7 2134 	ldr.w	r2, [r7, #308]	@ 0x134
 8001838:	4613      	mov	r3, r2
 800183a:	005b      	lsls	r3, r3, #1
 800183c:	4413      	add	r3, r2
 800183e:	009b      	lsls	r3, r3, #2
 8001840:	440b      	add	r3, r1
 8001842:	3304      	adds	r3, #4
 8001844:	6018      	str	r0, [r3, #0]
    for (int i = 0; i < 8; ++i) {
 8001846:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 800184a:	3301      	adds	r3, #1
 800184c:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
 8001850:	f8d7 3134 	ldr.w	r3, [r7, #308]	@ 0x134
 8001854:	2b07      	cmp	r3, #7
 8001856:	f77f af4b 	ble.w	80016f0 <apply_transformation+0x140>
    }

    // Draw lines between the projected points
    draw_line(projected[0].x, projected[0].y, projected[1].x, projected[1].y);
 800185a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800185e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001862:	6818      	ldr	r0, [r3, #0]
 8001864:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001868:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800186c:	6859      	ldr	r1, [r3, #4]
 800186e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001872:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001876:	68da      	ldr	r2, [r3, #12]
 8001878:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800187c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001880:	691b      	ldr	r3, [r3, #16]
 8001882:	f000 fe99 	bl	80025b8 <draw_line>
    draw_line(projected[0].x, projected[0].y, projected[2].x, projected[2].y);
 8001886:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800188a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800188e:	6818      	ldr	r0, [r3, #0]
 8001890:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001894:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001898:	6859      	ldr	r1, [r3, #4]
 800189a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800189e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018a2:	699a      	ldr	r2, [r3, #24]
 80018a4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018a8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018ac:	69db      	ldr	r3, [r3, #28]
 80018ae:	f000 fe83 	bl	80025b8 <draw_line>
    draw_line(projected[1].x, projected[1].y, projected[3].x, projected[3].y);
 80018b2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018b6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018ba:	68d8      	ldr	r0, [r3, #12]
 80018bc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018c0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018c4:	6919      	ldr	r1, [r3, #16]
 80018c6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018ca:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018ce:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018d0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018d4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80018da:	f000 fe6d 	bl	80025b8 <draw_line>
    draw_line(projected[2].x, projected[2].y, projected[3].x, projected[3].y);
 80018de:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018e2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018e6:	6998      	ldr	r0, [r3, #24]
 80018e8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018f0:	69d9      	ldr	r1, [r3, #28]
 80018f2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80018f6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80018fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80018fc:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001900:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001904:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001906:	f000 fe57 	bl	80025b8 <draw_line>
    draw_line(projected[4].x, projected[4].y, projected[5].x, projected[5].y);
 800190a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800190e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001912:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001914:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001918:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800191c:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800191e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001922:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001926:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001928:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800192c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001930:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001932:	f000 fe41 	bl	80025b8 <draw_line>
    draw_line(projected[4].x, projected[4].y, projected[6].x, projected[6].y);
 8001936:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800193a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800193e:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 8001940:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001944:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001948:	6b59      	ldr	r1, [r3, #52]	@ 0x34
 800194a:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800194e:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001952:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001954:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001958:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800195c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800195e:	f000 fe2b 	bl	80025b8 <draw_line>
    draw_line(projected[5].x, projected[5].y, projected[7].x, projected[7].y);
 8001962:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001966:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800196a:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800196c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001970:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001974:	6c19      	ldr	r1, [r3, #64]	@ 0x40
 8001976:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800197a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 800197e:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001980:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001984:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001988:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800198a:	f000 fe15 	bl	80025b8 <draw_line>
    draw_line(projected[6].x, projected[6].y, projected[7].x, projected[7].y);
 800198e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001992:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001996:	6c98      	ldr	r0, [r3, #72]	@ 0x48
 8001998:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 800199c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019a0:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80019a2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019a6:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019aa:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 80019ac:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019b0:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80019b6:	f000 fdff 	bl	80025b8 <draw_line>
    draw_line(projected[0].x, projected[0].y, projected[4].x, projected[4].y);
 80019ba:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019be:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019c2:	6818      	ldr	r0, [r3, #0]
 80019c4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019c8:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019cc:	6859      	ldr	r1, [r3, #4]
 80019ce:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019d2:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019d6:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80019d8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019dc:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019e0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80019e2:	f000 fde9 	bl	80025b8 <draw_line>
    draw_line(projected[1].x, projected[1].y, projected[5].x, projected[5].y);
 80019e6:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019ea:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019ee:	68d8      	ldr	r0, [r3, #12]
 80019f0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019f4:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80019f8:	6919      	ldr	r1, [r3, #16]
 80019fa:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 80019fe:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a02:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001a04:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a08:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a0c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a0e:	f000 fdd3 	bl	80025b8 <draw_line>
    draw_line(projected[2].x, projected[2].y, projected[6].x, projected[6].y);
 8001a12:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a16:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a1a:	6998      	ldr	r0, [r3, #24]
 8001a1c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a20:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a24:	69d9      	ldr	r1, [r3, #28]
 8001a26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a2a:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a2e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8001a30:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a34:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a38:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8001a3a:	f000 fdbd 	bl	80025b8 <draw_line>
    draw_line(projected[3].x, projected[3].y, projected[7].x, projected[7].y);
 8001a3e:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a42:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a46:	6a58      	ldr	r0, [r3, #36]	@ 0x24
 8001a48:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a4c:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a50:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 8001a52:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a56:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a5a:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
 8001a5c:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001a60:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 8001a64:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8001a66:	f000 fda7 	bl	80025b8 <draw_line>
}
 8001a6a:	bf00      	nop
 8001a6c:	f507 77a2 	add.w	r7, r7, #324	@ 0x144
 8001a70:	46bd      	mov	sp, r7
 8001a72:	bd90      	pop	{r4, r7, pc}
 8001a74:	42a00000 	.word	0x42a00000
 8001a78:	40400000 	.word	0x40400000
 8001a7c:	40300000 	.word	0x40300000

08001a80 <draw_cube>:



void draw_cube(Cube *cube) {
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
	// Apply rotation matrix
	//multiply_matrix_matrix(&cube->rotation, &cube->transform, &cube->transform);

	// Apply transformation with offsets and draw the cube
	apply_transformation(cube);
 8001a88:	6878      	ldr	r0, [r7, #4]
 8001a8a:	f7ff fd91 	bl	80015b0 <apply_transformation>
}
 8001a8e:	bf00      	nop
 8001a90:	3708      	adds	r7, #8
 8001a92:	46bd      	mov	sp, r7
 8001a94:	bd80      	pop	{r7, pc}

08001a96 <update_rotation_matrix>:

void update_rotation_matrix(Cube *cube, float angle_x, float angle_y, float angle_z) {
 8001a96:	b580      	push	{r7, lr}
 8001a98:	b0a8      	sub	sp, #160	@ 0xa0
 8001a9a:	af00      	add	r7, sp, #0
 8001a9c:	60f8      	str	r0, [r7, #12]
 8001a9e:	60b9      	str	r1, [r7, #8]
 8001aa0:	607a      	str	r2, [r7, #4]
 8001aa2:	603b      	str	r3, [r7, #0]
    Matrix3x3 rot_x = get_rotation_matrix_x(angle_x);
 8001aa4:	f107 037c 	add.w	r3, r7, #124	@ 0x7c
 8001aa8:	68b9      	ldr	r1, [r7, #8]
 8001aaa:	4618      	mov	r0, r3
 8001aac:	f7ff fbb6 	bl	800121c <get_rotation_matrix_x>
    Matrix3x3 rot_y = get_rotation_matrix_y(angle_y);
 8001ab0:	f107 0358 	add.w	r3, r7, #88	@ 0x58
 8001ab4:	6879      	ldr	r1, [r7, #4]
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	f7ff fc18 	bl	80012ec <get_rotation_matrix_y>
    Matrix3x3 rot_z = get_rotation_matrix_z(angle_z);
 8001abc:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ac0:	6839      	ldr	r1, [r7, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff fc7a 	bl	80013bc <get_rotation_matrix_z>

    // Combine rotations: Z * Y * X
    Matrix3x3 temp;
    multiply_matrix_matrix(&rot_z, &rot_y, &temp);
 8001ac8:	f107 0210 	add.w	r2, r7, #16
 8001acc:	f107 0158 	add.w	r1, r7, #88	@ 0x58
 8001ad0:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8001ad4:	4618      	mov	r0, r3
 8001ad6:	f7ff fa8d 	bl	8000ff4 <multiply_matrix_matrix>
    multiply_matrix_matrix(&temp, &rot_x, &cube->transform);
 8001ada:	68fb      	ldr	r3, [r7, #12]
 8001adc:	f103 0260 	add.w	r2, r3, #96	@ 0x60
 8001ae0:	f107 017c 	add.w	r1, r7, #124	@ 0x7c
 8001ae4:	f107 0310 	add.w	r3, r7, #16
 8001ae8:	4618      	mov	r0, r3
 8001aea:	f7ff fa83 	bl	8000ff4 <multiply_matrix_matrix>
}
 8001aee:	bf00      	nop
 8001af0:	37a0      	adds	r7, #160	@ 0xa0
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
	...

08001af8 <on_ready>:


void on_ready() {
 8001af8:	b480      	push	{r7}
 8001afa:	b085      	sub	sp, #20
 8001afc:	af00      	add	r7, sp, #0
	int scale = 10;
 8001afe:	230a      	movs	r3, #10
 8001b00:	60bb      	str	r3, [r7, #8]
	int offset = 0;
 8001b02:	2300      	movs	r3, #0
 8001b04:	607b      	str	r3, [r7, #4]
	for (int i = 0; i < 8; ++i) {
 8001b06:	2300      	movs	r3, #0
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	e025      	b.n	8001b58 <on_ready+0x60>
		Point* p = &cube0.p[i];
 8001b0c:	68fa      	ldr	r2, [r7, #12]
 8001b0e:	4613      	mov	r3, r2
 8001b10:	005b      	lsls	r3, r3, #1
 8001b12:	4413      	add	r3, r2
 8001b14:	009b      	lsls	r3, r3, #2
 8001b16:	4a15      	ldr	r2, [pc, #84]	@ (8001b6c <on_ready+0x74>)
 8001b18:	4413      	add	r3, r2
 8001b1a:	603b      	str	r3, [r7, #0]
		p->x = p->x * scale + offset;
 8001b1c:	683b      	ldr	r3, [r7, #0]
 8001b1e:	681b      	ldr	r3, [r3, #0]
 8001b20:	68ba      	ldr	r2, [r7, #8]
 8001b22:	fb03 f202 	mul.w	r2, r3, r2
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	441a      	add	r2, r3
 8001b2a:	683b      	ldr	r3, [r7, #0]
 8001b2c:	601a      	str	r2, [r3, #0]
		p->y = p->y * scale + offset;
 8001b2e:	683b      	ldr	r3, [r7, #0]
 8001b30:	685b      	ldr	r3, [r3, #4]
 8001b32:	68ba      	ldr	r2, [r7, #8]
 8001b34:	fb03 f202 	mul.w	r2, r3, r2
 8001b38:	687b      	ldr	r3, [r7, #4]
 8001b3a:	441a      	add	r2, r3
 8001b3c:	683b      	ldr	r3, [r7, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
		p->z = p->z * scale + offset;
 8001b40:	683b      	ldr	r3, [r7, #0]
 8001b42:	689b      	ldr	r3, [r3, #8]
 8001b44:	68ba      	ldr	r2, [r7, #8]
 8001b46:	fb03 f202 	mul.w	r2, r3, r2
 8001b4a:	687b      	ldr	r3, [r7, #4]
 8001b4c:	441a      	add	r2, r3
 8001b4e:	683b      	ldr	r3, [r7, #0]
 8001b50:	609a      	str	r2, [r3, #8]
	for (int i = 0; i < 8; ++i) {
 8001b52:	68fb      	ldr	r3, [r7, #12]
 8001b54:	3301      	adds	r3, #1
 8001b56:	60fb      	str	r3, [r7, #12]
 8001b58:	68fb      	ldr	r3, [r7, #12]
 8001b5a:	2b07      	cmp	r3, #7
 8001b5c:	ddd6      	ble.n	8001b0c <on_ready+0x14>
	}
}
 8001b5e:	bf00      	nop
 8001b60:	bf00      	nop
 8001b62:	3714      	adds	r7, #20
 8001b64:	46bd      	mov	sp, r7
 8001b66:	bc80      	pop	{r7}
 8001b68:	4770      	bx	lr
 8001b6a:	bf00      	nop
 8001b6c:	20000000 	.word	0x20000000

08001b70 <on_update>:


float angle_x = 0.0;
float angle_y = 0.0;
float angle_z = 0.0;
void on_update() {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	af00      	add	r7, sp, #0
	clear_back_buffer();
 8001b74:	f000 fb5a 	bl	800222c <clear_back_buffer>
	angle_x += 0.1;
 8001b78:	4b25      	ldr	r3, [pc, #148]	@ (8001c10 <on_update+0xa0>)
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4618      	mov	r0, r3
 8001b7e:	f7fe fc4b 	bl	8000418 <__aeabi_f2d>
 8001b82:	a321      	add	r3, pc, #132	@ (adr r3, 8001c08 <on_update+0x98>)
 8001b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b88:	f7fe fae8 	bl	800015c <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe ff5a 	bl	8000a4c <__aeabi_d2f>
 8001b98:	4603      	mov	r3, r0
 8001b9a:	4a1d      	ldr	r2, [pc, #116]	@ (8001c10 <on_update+0xa0>)
 8001b9c:	6013      	str	r3, [r2, #0]
	angle_y += 0.1;
 8001b9e:	4b1d      	ldr	r3, [pc, #116]	@ (8001c14 <on_update+0xa4>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f7fe fc38 	bl	8000418 <__aeabi_f2d>
 8001ba8:	a317      	add	r3, pc, #92	@ (adr r3, 8001c08 <on_update+0x98>)
 8001baa:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bae:	f7fe fad5 	bl	800015c <__adddf3>
 8001bb2:	4602      	mov	r2, r0
 8001bb4:	460b      	mov	r3, r1
 8001bb6:	4610      	mov	r0, r2
 8001bb8:	4619      	mov	r1, r3
 8001bba:	f7fe ff47 	bl	8000a4c <__aeabi_d2f>
 8001bbe:	4603      	mov	r3, r0
 8001bc0:	4a14      	ldr	r2, [pc, #80]	@ (8001c14 <on_update+0xa4>)
 8001bc2:	6013      	str	r3, [r2, #0]
	angle_z += 0.1;
 8001bc4:	4b14      	ldr	r3, [pc, #80]	@ (8001c18 <on_update+0xa8>)
 8001bc6:	681b      	ldr	r3, [r3, #0]
 8001bc8:	4618      	mov	r0, r3
 8001bca:	f7fe fc25 	bl	8000418 <__aeabi_f2d>
 8001bce:	a30e      	add	r3, pc, #56	@ (adr r3, 8001c08 <on_update+0x98>)
 8001bd0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001bd4:	f7fe fac2 	bl	800015c <__adddf3>
 8001bd8:	4602      	mov	r2, r0
 8001bda:	460b      	mov	r3, r1
 8001bdc:	4610      	mov	r0, r2
 8001bde:	4619      	mov	r1, r3
 8001be0:	f7fe ff34 	bl	8000a4c <__aeabi_d2f>
 8001be4:	4603      	mov	r3, r0
 8001be6:	4a0c      	ldr	r2, [pc, #48]	@ (8001c18 <on_update+0xa8>)
 8001be8:	6013      	str	r3, [r2, #0]
	update_rotation_matrix(&cube0, angle_x, angle_y, angle_z);
 8001bea:	4b09      	ldr	r3, [pc, #36]	@ (8001c10 <on_update+0xa0>)
 8001bec:	6819      	ldr	r1, [r3, #0]
 8001bee:	4b09      	ldr	r3, [pc, #36]	@ (8001c14 <on_update+0xa4>)
 8001bf0:	681a      	ldr	r2, [r3, #0]
 8001bf2:	4b09      	ldr	r3, [pc, #36]	@ (8001c18 <on_update+0xa8>)
 8001bf4:	681b      	ldr	r3, [r3, #0]
 8001bf6:	4809      	ldr	r0, [pc, #36]	@ (8001c1c <on_update+0xac>)
 8001bf8:	f7ff ff4d 	bl	8001a96 <update_rotation_matrix>
	draw_cube(&cube0);
 8001bfc:	4807      	ldr	r0, [pc, #28]	@ (8001c1c <on_update+0xac>)
 8001bfe:	f7ff ff3f 	bl	8001a80 <draw_cube>
}
 8001c02:	bf00      	nop
 8001c04:	bd80      	pop	{r7, pc}
 8001c06:	bf00      	nop
 8001c08:	9999999a 	.word	0x9999999a
 8001c0c:	3fb99999 	.word	0x3fb99999
 8001c10:	200000dc 	.word	0x200000dc
 8001c14:	200000e0 	.word	0x200000e0
 8001c18:	200000e4 	.word	0x200000e4
 8001c1c:	20000000 	.word	0x20000000

08001c20 <on_button_pressed>:


void on_button_pressed() {
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
}
 8001c24:	bf00      	nop
 8001c26:	46bd      	mov	sp, r7
 8001c28:	bc80      	pop	{r7}
 8001c2a:	4770      	bx	lr

08001c2c <on_button_held>:

#include "base.h"
#include "event.h"

__WEAK void on_button_pressed() {}
__WEAK void on_button_held() {}
 8001c2c:	b480      	push	{r7}
 8001c2e:	af00      	add	r7, sp, #0
 8001c30:	bf00      	nop
 8001c32:	46bd      	mov	sp, r7
 8001c34:	bc80      	pop	{r7}
 8001c36:	4770      	bx	lr

08001c38 <on_button_released>:
__WEAK void on_button_released() {}
 8001c38:	b480      	push	{r7}
 8001c3a:	af00      	add	r7, sp, #0
 8001c3c:	bf00      	nop
 8001c3e:	46bd      	mov	sp, r7
 8001c40:	bc80      	pop	{r7}
 8001c42:	4770      	bx	lr

08001c44 <on_event>:


static uint8_t is_button_held = 0;

void on_event() {
 8001c44:	b580      	push	{r7, lr}
 8001c46:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8001c48:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001c4c:	480e      	ldr	r0, [pc, #56]	@ (8001c88 <on_event+0x44>)
 8001c4e:	f001 f9a7 	bl	8002fa0 <HAL_GPIO_ReadPin>
 8001c52:	4603      	mov	r3, r0
 8001c54:	2b00      	cmp	r3, #0
 8001c56:	d10c      	bne.n	8001c72 <on_event+0x2e>
		if (!is_button_held) {
 8001c58:	4b0c      	ldr	r3, [pc, #48]	@ (8001c8c <on_event+0x48>)
 8001c5a:	781b      	ldrb	r3, [r3, #0]
 8001c5c:	2b00      	cmp	r3, #0
 8001c5e:	d105      	bne.n	8001c6c <on_event+0x28>
			is_button_held = 1;
 8001c60:	4b0a      	ldr	r3, [pc, #40]	@ (8001c8c <on_event+0x48>)
 8001c62:	2201      	movs	r2, #1
 8001c64:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8001c66:	f7ff ffdb 	bl	8001c20 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8001c6a:	e00b      	b.n	8001c84 <on_event+0x40>
			on_button_held();
 8001c6c:	f7ff ffde 	bl	8001c2c <on_button_held>
}
 8001c70:	e008      	b.n	8001c84 <on_event+0x40>
		if (is_button_held) {
 8001c72:	4b06      	ldr	r3, [pc, #24]	@ (8001c8c <on_event+0x48>)
 8001c74:	781b      	ldrb	r3, [r3, #0]
 8001c76:	2b00      	cmp	r3, #0
 8001c78:	d004      	beq.n	8001c84 <on_event+0x40>
			is_button_held = 0;
 8001c7a:	4b04      	ldr	r3, [pc, #16]	@ (8001c8c <on_event+0x48>)
 8001c7c:	2200      	movs	r2, #0
 8001c7e:	701a      	strb	r2, [r3, #0]
			on_button_released();
 8001c80:	f7ff ffda 	bl	8001c38 <on_button_released>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}
 8001c88:	40011000 	.word	0x40011000
 8001c8c:	200000e8 	.word	0x200000e8

08001c90 <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8001c90:	b580      	push	{r7, lr}
 8001c92:	b082      	sub	sp, #8
 8001c94:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8001c96:	f000 fee7 	bl	8002a68 <HAL_GetTick>
 8001c9a:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8001c9c:	4b06      	ldr	r3, [pc, #24]	@ (8001cb8 <get_tick_delta_time+0x28>)
 8001c9e:	681b      	ldr	r3, [r3, #0]
 8001ca0:	687a      	ldr	r2, [r7, #4]
 8001ca2:	1ad3      	subs	r3, r2, r3
 8001ca4:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 8001ca6:	4a04      	ldr	r2, [pc, #16]	@ (8001cb8 <get_tick_delta_time+0x28>)
 8001ca8:	687b      	ldr	r3, [r7, #4]
 8001caa:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8001cac:	683b      	ldr	r3, [r7, #0]
}
 8001cae:	4618      	mov	r0, r3
 8001cb0:	3708      	adds	r7, #8
 8001cb2:	46bd      	mov	sp, r7
 8001cb4:	bd80      	pop	{r7, pc}
 8001cb6:	bf00      	nop
 8001cb8:	200001e0 	.word	0x200001e0

08001cbc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001cbc:	b580      	push	{r7, lr}
 8001cbe:	b082      	sub	sp, #8
 8001cc0:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001cc2:	f000 fe79 	bl	80029b8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001cc6:	f000 f86d 	bl	8001da4 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001cca:	f000 f9cf 	bl	800206c <MX_GPIO_Init>
  MX_SPI1_Init();
 8001cce:	f000 f8ab 	bl	8001e28 <MX_SPI1_Init>
  MX_TIM2_Init();
 8001cd2:	f000 f8df 	bl	8001e94 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001cd6:	f000 f953 	bl	8001f80 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8001cda:	4829      	ldr	r0, [pc, #164]	@ (8001d80 <main+0xc4>)
 8001cdc:	f001 fe42 	bl	8003964 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8001ce0:	4828      	ldr	r0, [pc, #160]	@ (8001d84 <main+0xc8>)
 8001ce2:	f001 fe3f 	bl	8003964 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001ce6:	2100      	movs	r1, #0
 8001ce8:	4826      	ldr	r0, [pc, #152]	@ (8001d84 <main+0xc8>)
 8001cea:	f001 fee5 	bl	8003ab8 <HAL_TIM_PWM_Start>
	OE_H;
 8001cee:	2201      	movs	r2, #1
 8001cf0:	2140      	movs	r1, #64	@ 0x40
 8001cf2:	4825      	ldr	r0, [pc, #148]	@ (8001d88 <main+0xcc>)
 8001cf4:	f001 f96b 	bl	8002fce <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 8001cf8:	f000 fa98 	bl	800222c <clear_back_buffer>
	on_ready();
 8001cfc:	f7ff fefc 	bl	8001af8 <on_ready>

#if DEBUG_NUMBERS
	uint32_t debug_var = 0;
#endif

	uint32_t accumulator = 0;
 8001d00:	2300      	movs	r3, #0
 8001d02:	607b      	str	r3, [r7, #4]

	while (1) {
		uint32_t delta = get_tick_delta_time();
 8001d04:	f7ff ffc4 	bl	8001c90 <get_tick_delta_time>
 8001d08:	6038      	str	r0, [r7, #0]

		accumulator += delta;
 8001d0a:	687a      	ldr	r2, [r7, #4]
 8001d0c:	683b      	ldr	r3, [r7, #0]
 8001d0e:	4413      	add	r3, r2
 8001d10:	607b      	str	r3, [r7, #4]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	2b27      	cmp	r3, #39	@ 0x27
 8001d16:	d91a      	bls.n	8001d4e <main+0x92>
			if (is_back_buffer_new){
 8001d18:	4b1c      	ldr	r3, [pc, #112]	@ (8001d8c <main+0xd0>)
 8001d1a:	781b      	ldrb	r3, [r3, #0]
 8001d1c:	2b00      	cmp	r3, #0
 8001d1e:	d12c      	bne.n	8001d7a <main+0xbe>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f7fe fb57 	bl	80003d4 <__aeabi_ui2d>
 8001d26:	f04f 0200 	mov.w	r2, #0
 8001d2a:	4b19      	ldr	r3, [pc, #100]	@ (8001d90 <main+0xd4>)
 8001d2c:	f7fe fcf6 	bl	800071c <__aeabi_ddiv>
 8001d30:	4602      	mov	r2, r0
 8001d32:	460b      	mov	r3, r1
 8001d34:	4917      	ldr	r1, [pc, #92]	@ (8001d94 <main+0xd8>)
 8001d36:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8001d3a:	f7ff ff83 	bl	8001c44 <on_event>
			on_update();
 8001d3e:	f7ff ff17 	bl	8001b70 <on_update>
#if DEBUG_NUMBERS
			draw_number(accumulator, 0, HEIGHT-7, false);
			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
#endif

			accumulator -= UPDATE_INTERVAL_MS;
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	3b28      	subs	r3, #40	@ 0x28
 8001d46:	607b      	str	r3, [r7, #4]
			//accumulator = 0;
			is_back_buffer_new = true;
 8001d48:	4b10      	ldr	r3, [pc, #64]	@ (8001d8c <main+0xd0>)
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 8001d4e:	4b12      	ldr	r3, [pc, #72]	@ (8001d98 <main+0xdc>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	2b00      	cmp	r3, #0
 8001d54:	d0d6      	beq.n	8001d04 <main+0x48>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 8001d56:	f000 fe87 	bl	8002a68 <HAL_GetTick>
 8001d5a:	4602      	mov	r2, r0
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	@ (8001d9c <main+0xe0>)
 8001d5e:	681b      	ldr	r3, [r3, #0]
 8001d60:	1ad3      	subs	r3, r2, r3
 8001d62:	2b14      	cmp	r3, #20
 8001d64:	d9ce      	bls.n	8001d04 <main+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001d66:	2200      	movs	r2, #0
 8001d68:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001d6c:	480c      	ldr	r0, [pc, #48]	@ (8001da0 <main+0xe4>)
 8001d6e:	f001 f92e 	bl	8002fce <HAL_GPIO_WritePin>
				buzzer_request = false;
 8001d72:	4b09      	ldr	r3, [pc, #36]	@ (8001d98 <main+0xdc>)
 8001d74:	2200      	movs	r2, #0
 8001d76:	701a      	strb	r2, [r3, #0]
 8001d78:	e7c4      	b.n	8001d04 <main+0x48>
				continue;
 8001d7a:	bf00      	nop
	while (1) {
 8001d7c:	e7c2      	b.n	8001d04 <main+0x48>
 8001d7e:	bf00      	nop
 8001d80:	20000144 	.word	0x20000144
 8001d84:	2000018c 	.word	0x2000018c
 8001d88:	40011000 	.word	0x40011000
 8001d8c:	200011ec 	.word	0x200011ec
 8001d90:	408f4000 	.word	0x408f4000
 8001d94:	200001d8 	.word	0x200001d8
 8001d98:	200001e4 	.word	0x200001e4
 8001d9c:	200001e8 	.word	0x200001e8
 8001da0:	40010800 	.word	0x40010800

08001da4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b090      	sub	sp, #64	@ 0x40
 8001da8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001daa:	f107 0318 	add.w	r3, r7, #24
 8001dae:	2228      	movs	r2, #40	@ 0x28
 8001db0:	2100      	movs	r1, #0
 8001db2:	4618      	mov	r0, r3
 8001db4:	f002 fcf4 	bl	80047a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001db8:	1d3b      	adds	r3, r7, #4
 8001dba:	2200      	movs	r2, #0
 8001dbc:	601a      	str	r2, [r3, #0]
 8001dbe:	605a      	str	r2, [r3, #4]
 8001dc0:	609a      	str	r2, [r3, #8]
 8001dc2:	60da      	str	r2, [r3, #12]
 8001dc4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001dc6:	2302      	movs	r3, #2
 8001dc8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001dca:	2301      	movs	r3, #1
 8001dcc:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001dce:	2310      	movs	r3, #16
 8001dd0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001dd2:	2302      	movs	r3, #2
 8001dd4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001dd6:	2300      	movs	r3, #0
 8001dd8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001dda:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8001dde:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001de0:	f107 0318 	add.w	r3, r7, #24
 8001de4:	4618      	mov	r0, r3
 8001de6:	f001 f90b 	bl	8003000 <HAL_RCC_OscConfig>
 8001dea:	4603      	mov	r3, r0
 8001dec:	2b00      	cmp	r3, #0
 8001dee:	d001      	beq.n	8001df4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8001df0:	f000 fa00 	bl	80021f4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001df4:	230f      	movs	r3, #15
 8001df6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001df8:	2302      	movs	r3, #2
 8001dfa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001dfc:	2300      	movs	r3, #0
 8001dfe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001e00:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001e04:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001e06:	2300      	movs	r3, #0
 8001e08:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001e0a:	1d3b      	adds	r3, r7, #4
 8001e0c:	2102      	movs	r1, #2
 8001e0e:	4618      	mov	r0, r3
 8001e10:	f001 fb78 	bl	8003504 <HAL_RCC_ClockConfig>
 8001e14:	4603      	mov	r3, r0
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d001      	beq.n	8001e1e <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001e1a:	f000 f9eb 	bl	80021f4 <Error_Handler>
  }
}
 8001e1e:	bf00      	nop
 8001e20:	3740      	adds	r7, #64	@ 0x40
 8001e22:	46bd      	mov	sp, r7
 8001e24:	bd80      	pop	{r7, pc}
	...

08001e28 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001e2c:	4b17      	ldr	r3, [pc, #92]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e2e:	4a18      	ldr	r2, [pc, #96]	@ (8001e90 <MX_SPI1_Init+0x68>)
 8001e30:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001e32:	4b16      	ldr	r3, [pc, #88]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e34:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001e38:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001e3a:	4b14      	ldr	r3, [pc, #80]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001e40:	4b12      	ldr	r3, [pc, #72]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e42:	2200      	movs	r2, #0
 8001e44:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001e46:	4b11      	ldr	r3, [pc, #68]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001e4c:	4b0f      	ldr	r3, [pc, #60]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e4e:	2200      	movs	r2, #0
 8001e50:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001e52:	4b0e      	ldr	r3, [pc, #56]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e54:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001e58:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001e5a:	4b0c      	ldr	r3, [pc, #48]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e5c:	2210      	movs	r2, #16
 8001e5e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001e60:	4b0a      	ldr	r3, [pc, #40]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e62:	2200      	movs	r2, #0
 8001e64:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001e66:	4b09      	ldr	r3, [pc, #36]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001e6c:	4b07      	ldr	r3, [pc, #28]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001e72:	4b06      	ldr	r3, [pc, #24]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e74:	220a      	movs	r2, #10
 8001e76:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001e78:	4804      	ldr	r0, [pc, #16]	@ (8001e8c <MX_SPI1_Init+0x64>)
 8001e7a:	f001 fc9f 	bl	80037bc <HAL_SPI_Init>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	2b00      	cmp	r3, #0
 8001e82:	d001      	beq.n	8001e88 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001e84:	f000 f9b6 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001e88:	bf00      	nop
 8001e8a:	bd80      	pop	{r7, pc}
 8001e8c:	200000ec 	.word	0x200000ec
 8001e90:	40013000 	.word	0x40013000

08001e94 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08e      	sub	sp, #56	@ 0x38
 8001e98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001e9a:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001e9e:	2200      	movs	r2, #0
 8001ea0:	601a      	str	r2, [r3, #0]
 8001ea2:	605a      	str	r2, [r3, #4]
 8001ea4:	609a      	str	r2, [r3, #8]
 8001ea6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ea8:	f107 0320 	add.w	r3, r7, #32
 8001eac:	2200      	movs	r2, #0
 8001eae:	601a      	str	r2, [r3, #0]
 8001eb0:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001eb2:	1d3b      	adds	r3, r7, #4
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	601a      	str	r2, [r3, #0]
 8001eb8:	605a      	str	r2, [r3, #4]
 8001eba:	609a      	str	r2, [r3, #8]
 8001ebc:	60da      	str	r2, [r3, #12]
 8001ebe:	611a      	str	r2, [r3, #16]
 8001ec0:	615a      	str	r2, [r3, #20]
 8001ec2:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ec4:	4b2d      	ldr	r3, [pc, #180]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001ec6:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001eca:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8001ecc:	4b2b      	ldr	r3, [pc, #172]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001ece:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8001ed2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ed4:	4b29      	ldr	r3, [pc, #164]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001ed6:	2200      	movs	r2, #0
 8001ed8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8001eda:	4b28      	ldr	r3, [pc, #160]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001edc:	2205      	movs	r2, #5
 8001ede:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ee0:	4b26      	ldr	r3, [pc, #152]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001ee2:	2200      	movs	r2, #0
 8001ee4:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001ee6:	4b25      	ldr	r3, [pc, #148]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001ee8:	2200      	movs	r2, #0
 8001eea:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001eec:	4823      	ldr	r0, [pc, #140]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001eee:	f001 fce9 	bl	80038c4 <HAL_TIM_Base_Init>
 8001ef2:	4603      	mov	r3, r0
 8001ef4:	2b00      	cmp	r3, #0
 8001ef6:	d001      	beq.n	8001efc <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001ef8:	f000 f97c 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001efc:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001f00:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001f02:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f06:	4619      	mov	r1, r3
 8001f08:	481c      	ldr	r0, [pc, #112]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001f0a:	f002 f841 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8001f0e:	4603      	mov	r3, r0
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d001      	beq.n	8001f18 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001f14:	f000 f96e 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001f18:	4818      	ldr	r0, [pc, #96]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001f1a:	f001 fd75 	bl	8003a08 <HAL_TIM_PWM_Init>
 8001f1e:	4603      	mov	r3, r0
 8001f20:	2b00      	cmp	r3, #0
 8001f22:	d001      	beq.n	8001f28 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001f24:	f000 f966 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001f2c:	2300      	movs	r3, #0
 8001f2e:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001f30:	f107 0320 	add.w	r3, r7, #32
 8001f34:	4619      	mov	r1, r3
 8001f36:	4811      	ldr	r0, [pc, #68]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001f38:	f002 fbc2 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8001f3c:	4603      	mov	r3, r0
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d001      	beq.n	8001f46 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001f42:	f000 f957 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001f46:	2360      	movs	r3, #96	@ 0x60
 8001f48:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001f4a:	2300      	movs	r3, #0
 8001f4c:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001f4e:	2300      	movs	r3, #0
 8001f50:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001f56:	1d3b      	adds	r3, r7, #4
 8001f58:	2200      	movs	r2, #0
 8001f5a:	4619      	mov	r1, r3
 8001f5c:	4807      	ldr	r0, [pc, #28]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001f5e:	f001 ff55 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 8001f62:	4603      	mov	r3, r0
 8001f64:	2b00      	cmp	r3, #0
 8001f66:	d001      	beq.n	8001f6c <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001f68:	f000 f944 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001f6c:	4803      	ldr	r0, [pc, #12]	@ (8001f7c <MX_TIM2_Init+0xe8>)
 8001f6e:	f000 fc59 	bl	8002824 <HAL_TIM_MspPostInit>

}
 8001f72:	bf00      	nop
 8001f74:	3738      	adds	r7, #56	@ 0x38
 8001f76:	46bd      	mov	sp, r7
 8001f78:	bd80      	pop	{r7, pc}
 8001f7a:	bf00      	nop
 8001f7c:	20000144 	.word	0x20000144

08001f80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b08e      	sub	sp, #56	@ 0x38
 8001f84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001f86:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001f8a:	2200      	movs	r2, #0
 8001f8c:	601a      	str	r2, [r3, #0]
 8001f8e:	605a      	str	r2, [r3, #4]
 8001f90:	609a      	str	r2, [r3, #8]
 8001f92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001f94:	f107 0320 	add.w	r3, r7, #32
 8001f98:	2200      	movs	r2, #0
 8001f9a:	601a      	str	r2, [r3, #0]
 8001f9c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001f9e:	1d3b      	adds	r3, r7, #4
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	601a      	str	r2, [r3, #0]
 8001fa4:	605a      	str	r2, [r3, #4]
 8001fa6:	609a      	str	r2, [r3, #8]
 8001fa8:	60da      	str	r2, [r3, #12]
 8001faa:	611a      	str	r2, [r3, #16]
 8001fac:	615a      	str	r2, [r3, #20]
 8001fae:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001fb0:	4b2c      	ldr	r3, [pc, #176]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fb2:	4a2d      	ldr	r2, [pc, #180]	@ (8002068 <MX_TIM3_Init+0xe8>)
 8001fb4:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001fb6:	4b2b      	ldr	r3, [pc, #172]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fb8:	223f      	movs	r2, #63	@ 0x3f
 8001fba:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001fbc:	4b29      	ldr	r3, [pc, #164]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001fc2:	4b28      	ldr	r3, [pc, #160]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fc4:	2263      	movs	r2, #99	@ 0x63
 8001fc6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001fc8:	4b26      	ldr	r3, [pc, #152]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001fce:	4b25      	ldr	r3, [pc, #148]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001fd4:	4823      	ldr	r0, [pc, #140]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001fd6:	f001 fc75 	bl	80038c4 <HAL_TIM_Base_Init>
 8001fda:	4603      	mov	r3, r0
 8001fdc:	2b00      	cmp	r3, #0
 8001fde:	d001      	beq.n	8001fe4 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001fe0:	f000 f908 	bl	80021f4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001fe4:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001fe8:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001fee:	4619      	mov	r1, r3
 8001ff0:	481c      	ldr	r0, [pc, #112]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8001ff2:	f001 ffcd 	bl	8003f90 <HAL_TIM_ConfigClockSource>
 8001ff6:	4603      	mov	r3, r0
 8001ff8:	2b00      	cmp	r3, #0
 8001ffa:	d001      	beq.n	8002000 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001ffc:	f000 f8fa 	bl	80021f4 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8002000:	4818      	ldr	r0, [pc, #96]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8002002:	f001 fd01 	bl	8003a08 <HAL_TIM_PWM_Init>
 8002006:	4603      	mov	r3, r0
 8002008:	2b00      	cmp	r3, #0
 800200a:	d001      	beq.n	8002010 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 800200c:	f000 f8f2 	bl	80021f4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8002010:	2300      	movs	r3, #0
 8002012:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8002014:	2300      	movs	r3, #0
 8002016:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8002018:	f107 0320 	add.w	r3, r7, #32
 800201c:	4619      	mov	r1, r3
 800201e:	4811      	ldr	r0, [pc, #68]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8002020:	f002 fb4e 	bl	80046c0 <HAL_TIMEx_MasterConfigSynchronization>
 8002024:	4603      	mov	r3, r0
 8002026:	2b00      	cmp	r3, #0
 8002028:	d001      	beq.n	800202e <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800202a:	f000 f8e3 	bl	80021f4 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800202e:	2360      	movs	r3, #96	@ 0x60
 8002030:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8002032:	230a      	movs	r3, #10
 8002034:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8002036:	2302      	movs	r3, #2
 8002038:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800203a:	2300      	movs	r3, #0
 800203c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800203e:	1d3b      	adds	r3, r7, #4
 8002040:	2200      	movs	r2, #0
 8002042:	4619      	mov	r1, r3
 8002044:	4807      	ldr	r0, [pc, #28]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8002046:	f001 fee1 	bl	8003e0c <HAL_TIM_PWM_ConfigChannel>
 800204a:	4603      	mov	r3, r0
 800204c:	2b00      	cmp	r3, #0
 800204e:	d001      	beq.n	8002054 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8002050:	f000 f8d0 	bl	80021f4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8002054:	4803      	ldr	r0, [pc, #12]	@ (8002064 <MX_TIM3_Init+0xe4>)
 8002056:	f000 fbe5 	bl	8002824 <HAL_TIM_MspPostInit>

}
 800205a:	bf00      	nop
 800205c:	3738      	adds	r7, #56	@ 0x38
 800205e:	46bd      	mov	sp, r7
 8002060:	bd80      	pop	{r7, pc}
 8002062:	bf00      	nop
 8002064:	2000018c 	.word	0x2000018c
 8002068:	40000400 	.word	0x40000400

0800206c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800206c:	b580      	push	{r7, lr}
 800206e:	b088      	sub	sp, #32
 8002070:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002072:	f107 0310 	add.w	r3, r7, #16
 8002076:	2200      	movs	r2, #0
 8002078:	601a      	str	r2, [r3, #0]
 800207a:	605a      	str	r2, [r3, #4]
 800207c:	609a      	str	r2, [r3, #8]
 800207e:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8002080:	4b56      	ldr	r3, [pc, #344]	@ (80021dc <MX_GPIO_Init+0x170>)
 8002082:	699b      	ldr	r3, [r3, #24]
 8002084:	4a55      	ldr	r2, [pc, #340]	@ (80021dc <MX_GPIO_Init+0x170>)
 8002086:	f043 0310 	orr.w	r3, r3, #16
 800208a:	6193      	str	r3, [r2, #24]
 800208c:	4b53      	ldr	r3, [pc, #332]	@ (80021dc <MX_GPIO_Init+0x170>)
 800208e:	699b      	ldr	r3, [r3, #24]
 8002090:	f003 0310 	and.w	r3, r3, #16
 8002094:	60fb      	str	r3, [r7, #12]
 8002096:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8002098:	4b50      	ldr	r3, [pc, #320]	@ (80021dc <MX_GPIO_Init+0x170>)
 800209a:	699b      	ldr	r3, [r3, #24]
 800209c:	4a4f      	ldr	r2, [pc, #316]	@ (80021dc <MX_GPIO_Init+0x170>)
 800209e:	f043 0304 	orr.w	r3, r3, #4
 80020a2:	6193      	str	r3, [r2, #24]
 80020a4:	4b4d      	ldr	r3, [pc, #308]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020a6:	699b      	ldr	r3, [r3, #24]
 80020a8:	f003 0304 	and.w	r3, r3, #4
 80020ac:	60bb      	str	r3, [r7, #8]
 80020ae:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80020b0:	4b4a      	ldr	r3, [pc, #296]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020b2:	699b      	ldr	r3, [r3, #24]
 80020b4:	4a49      	ldr	r2, [pc, #292]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020b6:	f043 0308 	orr.w	r3, r3, #8
 80020ba:	6193      	str	r3, [r2, #24]
 80020bc:	4b47      	ldr	r3, [pc, #284]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020be:	699b      	ldr	r3, [r3, #24]
 80020c0:	f003 0308 	and.w	r3, r3, #8
 80020c4:	607b      	str	r3, [r7, #4]
 80020c6:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80020c8:	4b44      	ldr	r3, [pc, #272]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020ca:	699b      	ldr	r3, [r3, #24]
 80020cc:	4a43      	ldr	r2, [pc, #268]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020ce:	f043 0320 	orr.w	r3, r3, #32
 80020d2:	6193      	str	r3, [r2, #24]
 80020d4:	4b41      	ldr	r3, [pc, #260]	@ (80021dc <MX_GPIO_Init+0x170>)
 80020d6:	699b      	ldr	r3, [r3, #24]
 80020d8:	f003 0320 	and.w	r3, r3, #32
 80020dc:	603b      	str	r3, [r7, #0]
 80020de:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80020e0:	2200      	movs	r2, #0
 80020e2:	f24e 0138 	movw	r1, #57400	@ 0xe038
 80020e6:	483e      	ldr	r0, [pc, #248]	@ (80021e0 <MX_GPIO_Init+0x174>)
 80020e8:	f000 ff71 	bl	8002fce <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 80020ec:	2200      	movs	r2, #0
 80020ee:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 80020f2:	483c      	ldr	r0, [pc, #240]	@ (80021e4 <MX_GPIO_Init+0x178>)
 80020f4:	f000 ff6b 	bl	8002fce <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80020f8:	2200      	movs	r2, #0
 80020fa:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80020fe:	483a      	ldr	r0, [pc, #232]	@ (80021e8 <MX_GPIO_Init+0x17c>)
 8002100:	f000 ff65 	bl	8002fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8002104:	2200      	movs	r2, #0
 8002106:	2104      	movs	r1, #4
 8002108:	4838      	ldr	r0, [pc, #224]	@ (80021ec <MX_GPIO_Init+0x180>)
 800210a:	f000 ff60 	bl	8002fce <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 800210e:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8002112:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8002114:	4b36      	ldr	r3, [pc, #216]	@ (80021f0 <MX_GPIO_Init+0x184>)
 8002116:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002118:	2300      	movs	r3, #0
 800211a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800211c:	f107 0310 	add.w	r3, r7, #16
 8002120:	4619      	mov	r1, r3
 8002122:	4830      	ldr	r0, [pc, #192]	@ (80021e4 <MX_GPIO_Init+0x178>)
 8002124:	f000 fdb8 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8002128:	f24e 0338 	movw	r3, #57400	@ 0xe038
 800212c:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800212e:	2301      	movs	r3, #1
 8002130:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002132:	2300      	movs	r3, #0
 8002134:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002136:	2302      	movs	r3, #2
 8002138:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800213a:	f107 0310 	add.w	r3, r7, #16
 800213e:	4619      	mov	r1, r3
 8002140:	4827      	ldr	r0, [pc, #156]	@ (80021e0 <MX_GPIO_Init+0x174>)
 8002142:	f000 fda9 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8002146:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 800214a:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800214c:	2301      	movs	r3, #1
 800214e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002150:	2300      	movs	r3, #0
 8002152:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002154:	2302      	movs	r3, #2
 8002156:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002158:	f107 0310 	add.w	r3, r7, #16
 800215c:	4619      	mov	r1, r3
 800215e:	4821      	ldr	r0, [pc, #132]	@ (80021e4 <MX_GPIO_Init+0x178>)
 8002160:	f000 fd9a 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8002164:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8002168:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800216a:	2301      	movs	r3, #1
 800216c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800216e:	2300      	movs	r3, #0
 8002170:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002172:	2302      	movs	r3, #2
 8002174:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002176:	f107 0310 	add.w	r3, r7, #16
 800217a:	4619      	mov	r1, r3
 800217c:	481a      	ldr	r0, [pc, #104]	@ (80021e8 <MX_GPIO_Init+0x17c>)
 800217e:	f000 fd8b 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002182:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002186:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8002188:	2300      	movs	r3, #0
 800218a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800218c:	2300      	movs	r3, #0
 800218e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002190:	f107 0310 	add.w	r3, r7, #16
 8002194:	4619      	mov	r1, r3
 8002196:	4813      	ldr	r0, [pc, #76]	@ (80021e4 <MX_GPIO_Init+0x178>)
 8002198:	f000 fd7e 	bl	8002c98 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 800219c:	2304      	movs	r3, #4
 800219e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80021a0:	2301      	movs	r3, #1
 80021a2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80021a4:	2300      	movs	r3, #0
 80021a6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80021a8:	2302      	movs	r3, #2
 80021aa:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80021ac:	f107 0310 	add.w	r3, r7, #16
 80021b0:	4619      	mov	r1, r3
 80021b2:	480e      	ldr	r0, [pc, #56]	@ (80021ec <MX_GPIO_Init+0x180>)
 80021b4:	f000 fd70 	bl	8002c98 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 80021b8:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80021bc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80021be:	2300      	movs	r3, #0
 80021c0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80021c2:	2301      	movs	r3, #1
 80021c4:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 80021c6:	f107 0310 	add.w	r3, r7, #16
 80021ca:	4619      	mov	r1, r3
 80021cc:	4805      	ldr	r0, [pc, #20]	@ (80021e4 <MX_GPIO_Init+0x178>)
 80021ce:	f000 fd63 	bl	8002c98 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 80021d2:	bf00      	nop
 80021d4:	3720      	adds	r7, #32
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	40021000 	.word	0x40021000
 80021e0:	40010c00 	.word	0x40010c00
 80021e4:	40011000 	.word	0x40011000
 80021e8:	40010800 	.word	0x40010800
 80021ec:	40011400 	.word	0x40011400
 80021f0:	10110000 	.word	0x10110000

080021f4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80021f4:	b480      	push	{r7}
 80021f6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80021f8:	b672      	cpsid	i
}
 80021fa:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80021fc:	bf00      	nop
 80021fe:	e7fd      	b.n	80021fc <Error_Handler+0x8>

08002200 <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 8002200:	b480      	push	{r7}
 8002202:	b083      	sub	sp, #12
 8002204:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 8002206:	4b07      	ldr	r3, [pc, #28]	@ (8002224 <swap_buffers+0x24>)
 8002208:	681b      	ldr	r3, [r3, #0]
 800220a:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 800220c:	4b06      	ldr	r3, [pc, #24]	@ (8002228 <swap_buffers+0x28>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4a04      	ldr	r2, [pc, #16]	@ (8002224 <swap_buffers+0x24>)
 8002212:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8002214:	4a04      	ldr	r2, [pc, #16]	@ (8002228 <swap_buffers+0x28>)
 8002216:	687b      	ldr	r3, [r7, #4]
 8002218:	6013      	str	r3, [r2, #0]
}
 800221a:	bf00      	nop
 800221c:	370c      	adds	r7, #12
 800221e:	46bd      	mov	sp, r7
 8002220:	bc80      	pop	{r7}
 8002222:	4770      	bx	lr
 8002224:	200000a8 	.word	0x200000a8
 8002228:	200000ac 	.word	0x200000ac

0800222c <clear_back_buffer>:


void clear_back_buffer(void) {
 800222c:	b580      	push	{r7, lr}
 800222e:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 8002230:	4b04      	ldr	r3, [pc, #16]	@ (8002244 <clear_back_buffer+0x18>)
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002238:	2100      	movs	r1, #0
 800223a:	4618      	mov	r0, r3
 800223c:	f002 fab0 	bl	80047a0 <memset>
}
 8002240:	bf00      	nop
 8002242:	bd80      	pop	{r7, pc}
 8002244:	200000ac 	.word	0x200000ac

08002248 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 8002248:	b480      	push	{r7}
 800224a:	b085      	sub	sp, #20
 800224c:	af00      	add	r7, sp, #0
 800224e:	60f8      	str	r0, [r7, #12]
 8002250:	60b9      	str	r1, [r7, #8]
 8002252:	4611      	mov	r1, r2
 8002254:	461a      	mov	r2, r3
 8002256:	460b      	mov	r3, r1
 8002258:	71fb      	strb	r3, [r7, #7]
 800225a:	4613      	mov	r3, r2
 800225c:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 800225e:	68fb      	ldr	r3, [r7, #12]
 8002260:	2b00      	cmp	r3, #0
 8002262:	db34      	blt.n	80022ce <set_pixel+0x86>
 8002264:	68fb      	ldr	r3, [r7, #12]
 8002266:	2b3f      	cmp	r3, #63	@ 0x3f
 8002268:	dc31      	bgt.n	80022ce <set_pixel+0x86>
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	2b00      	cmp	r3, #0
 800226e:	db2e      	blt.n	80022ce <set_pixel+0x86>
 8002270:	68bb      	ldr	r3, [r7, #8]
 8002272:	2b1f      	cmp	r3, #31
 8002274:	dc2b      	bgt.n	80022ce <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 8002276:	79fb      	ldrb	r3, [r7, #7]
 8002278:	2b00      	cmp	r3, #0
 800227a:	bf14      	ite	ne
 800227c:	2301      	movne	r3, #1
 800227e:	2300      	moveq	r3, #0
 8002280:	b2db      	uxtb	r3, r3
 8002282:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 8002284:	79bb      	ldrb	r3, [r7, #6]
 8002286:	2b00      	cmp	r3, #0
 8002288:	bf14      	ite	ne
 800228a:	2301      	movne	r3, #1
 800228c:	2300      	moveq	r3, #0
 800228e:	b2db      	uxtb	r3, r3
 8002290:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 8002292:	7e3b      	ldrb	r3, [r7, #24]
 8002294:	2b00      	cmp	r3, #0
 8002296:	bf14      	ite	ne
 8002298:	2301      	movne	r3, #1
 800229a:	2300      	moveq	r3, #0
 800229c:	b2db      	uxtb	r3, r3
 800229e:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 80022a0:	79fb      	ldrb	r3, [r7, #7]
 80022a2:	009b      	lsls	r3, r3, #2
 80022a4:	b25a      	sxtb	r2, r3
 80022a6:	79bb      	ldrb	r3, [r7, #6]
 80022a8:	005b      	lsls	r3, r3, #1
 80022aa:	b25b      	sxtb	r3, r3
 80022ac:	4313      	orrs	r3, r2
 80022ae:	b25a      	sxtb	r2, r3
 80022b0:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80022b4:	4313      	orrs	r3, r2
 80022b6:	b259      	sxtb	r1, r3
 80022b8:	4b07      	ldr	r3, [pc, #28]	@ (80022d8 <set_pixel+0x90>)
 80022ba:	681a      	ldr	r2, [r3, #0]
 80022bc:	b2c9      	uxtb	r1, r1
 80022be:	68fb      	ldr	r3, [r7, #12]
 80022c0:	015b      	lsls	r3, r3, #5
 80022c2:	441a      	add	r2, r3
 80022c4:	68bb      	ldr	r3, [r7, #8]
 80022c6:	4413      	add	r3, r2
 80022c8:	460a      	mov	r2, r1
 80022ca:	701a      	strb	r2, [r3, #0]
 80022cc:	e000      	b.n	80022d0 <set_pixel+0x88>
		return;
 80022ce:	bf00      	nop
}
 80022d0:	3714      	adds	r7, #20
 80022d2:	46bd      	mov	sp, r7
 80022d4:	bc80      	pop	{r7}
 80022d6:	4770      	bx	lr
 80022d8:	200000ac 	.word	0x200000ac

080022dc <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 80022dc:	b580      	push	{r7, lr}
 80022de:	b086      	sub	sp, #24
 80022e0:	af02      	add	r7, sp, #8
 80022e2:	60f8      	str	r0, [r7, #12]
 80022e4:	60b9      	str	r1, [r7, #8]
 80022e6:	4613      	mov	r3, r2
 80022e8:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 80022ea:	79f9      	ldrb	r1, [r7, #7]
 80022ec:	79fa      	ldrb	r2, [r7, #7]
 80022ee:	79fb      	ldrb	r3, [r7, #7]
 80022f0:	9300      	str	r3, [sp, #0]
 80022f2:	460b      	mov	r3, r1
 80022f4:	68b9      	ldr	r1, [r7, #8]
 80022f6:	68f8      	ldr	r0, [r7, #12]
 80022f8:	f7ff ffa6 	bl	8002248 <set_pixel>
}
 80022fc:	bf00      	nop
 80022fe:	3710      	adds	r7, #16
 8002300:	46bd      	mov	sp, r7
 8002302:	bd80      	pop	{r7, pc}

08002304 <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8002304:	b480      	push	{r7}
 8002306:	b085      	sub	sp, #20
 8002308:	af00      	add	r7, sp, #0
 800230a:	60b9      	str	r1, [r7, #8]
 800230c:	607a      	str	r2, [r7, #4]
 800230e:	603b      	str	r3, [r7, #0]
 8002310:	4603      	mov	r3, r0
 8002312:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8002314:	7bfb      	ldrb	r3, [r7, #15]
 8002316:	089b      	lsrs	r3, r3, #2
 8002318:	b2db      	uxtb	r3, r3
 800231a:	f003 0301 	and.w	r3, r3, #1
 800231e:	b2da      	uxtb	r2, r3
 8002320:	68bb      	ldr	r3, [r7, #8]
 8002322:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8002324:	7bfb      	ldrb	r3, [r7, #15]
 8002326:	085b      	lsrs	r3, r3, #1
 8002328:	b2db      	uxtb	r3, r3
 800232a:	f003 0301 	and.w	r3, r3, #1
 800232e:	b2da      	uxtb	r2, r3
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8002334:	7bfb      	ldrb	r3, [r7, #15]
 8002336:	f003 0301 	and.w	r3, r3, #1
 800233a:	b2da      	uxtb	r2, r3
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	701a      	strb	r2, [r3, #0]
}
 8002340:	bf00      	nop
 8002342:	3714      	adds	r7, #20
 8002344:	46bd      	mov	sp, r7
 8002346:	bc80      	pop	{r7}
 8002348:	4770      	bx	lr
	...

0800234c <render_row>:

uint8_t current_row = 0;
void render_row() {
 800234c:	b580      	push	{r7, lr}
 800234e:	b084      	sub	sp, #16
 8002350:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 8002352:	2300      	movs	r3, #0
 8002354:	73fb      	strb	r3, [r7, #15]
 8002356:	e092      	b.n	800247e <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 8002358:	2301      	movs	r3, #1
 800235a:	73bb      	strb	r3, [r7, #14]
 800235c:	e087      	b.n	800246e <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 800235e:	2300      	movs	r3, #0
 8002360:	737b      	strb	r3, [r7, #13]
 8002362:	e07c      	b.n	800245e <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 8002364:	7bfb      	ldrb	r3, [r7, #15]
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	b2da      	uxtb	r2, r3
 800236a:	7b7b      	ldrb	r3, [r7, #13]
 800236c:	4413      	add	r3, r2
 800236e:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 8002370:	7bbb      	ldrb	r3, [r7, #14]
 8002372:	00db      	lsls	r3, r3, #3
 8002374:	b2da      	uxtb	r2, r3
 8002376:	4b6f      	ldr	r3, [pc, #444]	@ (8002534 <render_row+0x1e8>)
 8002378:	781b      	ldrb	r3, [r3, #0]
 800237a:	4413      	add	r3, r2
 800237c:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 800237e:	4b6e      	ldr	r3, [pc, #440]	@ (8002538 <render_row+0x1ec>)
 8002380:	6819      	ldr	r1, [r3, #0]
 8002382:	7b3a      	ldrb	r2, [r7, #12]
 8002384:	7afb      	ldrb	r3, [r7, #11]
 8002386:	0152      	lsls	r2, r2, #5
 8002388:	440a      	add	r2, r1
 800238a:	4413      	add	r3, r2
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 8002390:	4b69      	ldr	r3, [pc, #420]	@ (8002538 <render_row+0x1ec>)
 8002392:	6819      	ldr	r1, [r3, #0]
 8002394:	7b3a      	ldrb	r2, [r7, #12]
 8002396:	7afb      	ldrb	r3, [r7, #11]
 8002398:	3310      	adds	r3, #16
 800239a:	0152      	lsls	r2, r2, #5
 800239c:	440a      	add	r2, r1
 800239e:	4413      	add	r3, r2
 80023a0:	781b      	ldrb	r3, [r3, #0]
 80023a2:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 80023a4:	1dbb      	adds	r3, r7, #6
 80023a6:	1dfa      	adds	r2, r7, #7
 80023a8:	f107 0108 	add.w	r1, r7, #8
 80023ac:	7ab8      	ldrb	r0, [r7, #10]
 80023ae:	f7ff ffa9 	bl	8002304 <get_rgb>
				R1(r);
 80023b2:	7a3b      	ldrb	r3, [r7, #8]
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	d003      	beq.n	80023c0 <render_row+0x74>
 80023b8:	4b60      	ldr	r3, [pc, #384]	@ (800253c <render_row+0x1f0>)
 80023ba:	2220      	movs	r2, #32
 80023bc:	611a      	str	r2, [r3, #16]
 80023be:	e002      	b.n	80023c6 <render_row+0x7a>
 80023c0:	4b5e      	ldr	r3, [pc, #376]	@ (800253c <render_row+0x1f0>)
 80023c2:	2220      	movs	r2, #32
 80023c4:	615a      	str	r2, [r3, #20]
				G1(g);
 80023c6:	79fb      	ldrb	r3, [r7, #7]
 80023c8:	2b00      	cmp	r3, #0
 80023ca:	d003      	beq.n	80023d4 <render_row+0x88>
 80023cc:	4b5b      	ldr	r3, [pc, #364]	@ (800253c <render_row+0x1f0>)
 80023ce:	2208      	movs	r2, #8
 80023d0:	611a      	str	r2, [r3, #16]
 80023d2:	e002      	b.n	80023da <render_row+0x8e>
 80023d4:	4b59      	ldr	r3, [pc, #356]	@ (800253c <render_row+0x1f0>)
 80023d6:	2208      	movs	r2, #8
 80023d8:	615a      	str	r2, [r3, #20]
				B1(b);
 80023da:	79bb      	ldrb	r3, [r7, #6]
 80023dc:	2b00      	cmp	r3, #0
 80023de:	d004      	beq.n	80023ea <render_row+0x9e>
 80023e0:	4b57      	ldr	r3, [pc, #348]	@ (8002540 <render_row+0x1f4>)
 80023e2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023e6:	611a      	str	r2, [r3, #16]
 80023e8:	e003      	b.n	80023f2 <render_row+0xa6>
 80023ea:	4b55      	ldr	r3, [pc, #340]	@ (8002540 <render_row+0x1f4>)
 80023ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80023f0:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 80023f2:	1dbb      	adds	r3, r7, #6
 80023f4:	1dfa      	adds	r2, r7, #7
 80023f6:	f107 0108 	add.w	r1, r7, #8
 80023fa:	7a78      	ldrb	r0, [r7, #9]
 80023fc:	f7ff ff82 	bl	8002304 <get_rgb>
				R2(r);
 8002400:	7a3b      	ldrb	r3, [r7, #8]
 8002402:	2b00      	cmp	r3, #0
 8002404:	d003      	beq.n	800240e <render_row+0xc2>
 8002406:	4b4d      	ldr	r3, [pc, #308]	@ (800253c <render_row+0x1f0>)
 8002408:	2210      	movs	r2, #16
 800240a:	611a      	str	r2, [r3, #16]
 800240c:	e002      	b.n	8002414 <render_row+0xc8>
 800240e:	4b4b      	ldr	r3, [pc, #300]	@ (800253c <render_row+0x1f0>)
 8002410:	2210      	movs	r2, #16
 8002412:	615a      	str	r2, [r3, #20]
				G2(g);
 8002414:	79fb      	ldrb	r3, [r7, #7]
 8002416:	2b00      	cmp	r3, #0
 8002418:	d003      	beq.n	8002422 <render_row+0xd6>
 800241a:	4b4a      	ldr	r3, [pc, #296]	@ (8002544 <render_row+0x1f8>)
 800241c:	2204      	movs	r2, #4
 800241e:	611a      	str	r2, [r3, #16]
 8002420:	e002      	b.n	8002428 <render_row+0xdc>
 8002422:	4b48      	ldr	r3, [pc, #288]	@ (8002544 <render_row+0x1f8>)
 8002424:	2204      	movs	r2, #4
 8002426:	615a      	str	r2, [r3, #20]
				B2(b);
 8002428:	79bb      	ldrb	r3, [r7, #6]
 800242a:	2b00      	cmp	r3, #0
 800242c:	d004      	beq.n	8002438 <render_row+0xec>
 800242e:	4b44      	ldr	r3, [pc, #272]	@ (8002540 <render_row+0x1f4>)
 8002430:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002434:	611a      	str	r2, [r3, #16]
 8002436:	e003      	b.n	8002440 <render_row+0xf4>
 8002438:	4b41      	ldr	r3, [pc, #260]	@ (8002540 <render_row+0x1f4>)
 800243a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800243e:	615a      	str	r2, [r3, #20]

				CLK_H;
 8002440:	2201      	movs	r2, #1
 8002442:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002446:	483d      	ldr	r0, [pc, #244]	@ (800253c <render_row+0x1f0>)
 8002448:	f000 fdc1 	bl	8002fce <HAL_GPIO_WritePin>
				CLK_L;
 800244c:	2200      	movs	r2, #0
 800244e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002452:	483a      	ldr	r0, [pc, #232]	@ (800253c <render_row+0x1f0>)
 8002454:	f000 fdbb 	bl	8002fce <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 8002458:	7b7b      	ldrb	r3, [r7, #13]
 800245a:	3301      	adds	r3, #1
 800245c:	737b      	strb	r3, [r7, #13]
 800245e:	7b7b      	ldrb	r3, [r7, #13]
 8002460:	2b03      	cmp	r3, #3
 8002462:	f67f af7f 	bls.w	8002364 <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 8002466:	7bbb      	ldrb	r3, [r7, #14]
 8002468:	3b01      	subs	r3, #1
 800246a:	b2db      	uxtb	r3, r3
 800246c:	73bb      	strb	r3, [r7, #14]
 800246e:	f997 300e 	ldrsb.w	r3, [r7, #14]
 8002472:	2b00      	cmp	r3, #0
 8002474:	f6bf af73 	bge.w	800235e <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 8002478:	7bfb      	ldrb	r3, [r7, #15]
 800247a:	3301      	adds	r3, #1
 800247c:	73fb      	strb	r3, [r7, #15]
 800247e:	7bfb      	ldrb	r3, [r7, #15]
 8002480:	2b0f      	cmp	r3, #15
 8002482:	f67f af69 	bls.w	8002358 <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 8002486:	4b2e      	ldr	r3, [pc, #184]	@ (8002540 <render_row+0x1f4>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4a2d      	ldr	r2, [pc, #180]	@ (8002540 <render_row+0x1f4>)
 800248c:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8002490:	6013      	str	r3, [r2, #0]
	LAT_H;
 8002492:	2201      	movs	r2, #1
 8002494:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002498:	4828      	ldr	r0, [pc, #160]	@ (800253c <render_row+0x1f0>)
 800249a:	f000 fd98 	bl	8002fce <HAL_GPIO_WritePin>
	LAT_L;
 800249e:	2200      	movs	r2, #0
 80024a0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80024a4:	4825      	ldr	r0, [pc, #148]	@ (800253c <render_row+0x1f0>)
 80024a6:	f000 fd92 	bl	8002fce <HAL_GPIO_WritePin>
	ROW(current_row);
 80024aa:	4b22      	ldr	r3, [pc, #136]	@ (8002534 <render_row+0x1e8>)
 80024ac:	781b      	ldrb	r3, [r3, #0]
 80024ae:	f003 0301 	and.w	r3, r3, #1
 80024b2:	2b00      	cmp	r3, #0
 80024b4:	d004      	beq.n	80024c0 <render_row+0x174>
 80024b6:	4b24      	ldr	r3, [pc, #144]	@ (8002548 <render_row+0x1fc>)
 80024b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024bc:	611a      	str	r2, [r3, #16]
 80024be:	e003      	b.n	80024c8 <render_row+0x17c>
 80024c0:	4b21      	ldr	r3, [pc, #132]	@ (8002548 <render_row+0x1fc>)
 80024c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024c6:	615a      	str	r2, [r3, #20]
 80024c8:	4b1a      	ldr	r3, [pc, #104]	@ (8002534 <render_row+0x1e8>)
 80024ca:	781b      	ldrb	r3, [r3, #0]
 80024cc:	f003 0302 	and.w	r3, r3, #2
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d004      	beq.n	80024de <render_row+0x192>
 80024d4:	4b1a      	ldr	r3, [pc, #104]	@ (8002540 <render_row+0x1f4>)
 80024d6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024da:	611a      	str	r2, [r3, #16]
 80024dc:	e003      	b.n	80024e6 <render_row+0x19a>
 80024de:	4b18      	ldr	r3, [pc, #96]	@ (8002540 <render_row+0x1f4>)
 80024e0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80024e4:	615a      	str	r2, [r3, #20]
 80024e6:	4b13      	ldr	r3, [pc, #76]	@ (8002534 <render_row+0x1e8>)
 80024e8:	781b      	ldrb	r3, [r3, #0]
 80024ea:	f003 0304 	and.w	r3, r3, #4
 80024ee:	2b00      	cmp	r3, #0
 80024f0:	d004      	beq.n	80024fc <render_row+0x1b0>
 80024f2:	4b13      	ldr	r3, [pc, #76]	@ (8002540 <render_row+0x1f4>)
 80024f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80024f8:	611a      	str	r2, [r3, #16]
 80024fa:	e003      	b.n	8002504 <render_row+0x1b8>
 80024fc:	4b10      	ldr	r3, [pc, #64]	@ (8002540 <render_row+0x1f4>)
 80024fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002502:	615a      	str	r2, [r3, #20]
 8002504:	4b0b      	ldr	r3, [pc, #44]	@ (8002534 <render_row+0x1e8>)
 8002506:	781b      	ldrb	r3, [r3, #0]
 8002508:	f003 0308 	and.w	r3, r3, #8
 800250c:	2b00      	cmp	r3, #0
 800250e:	d003      	beq.n	8002518 <render_row+0x1cc>
 8002510:	4b0b      	ldr	r3, [pc, #44]	@ (8002540 <render_row+0x1f4>)
 8002512:	2280      	movs	r2, #128	@ 0x80
 8002514:	611a      	str	r2, [r3, #16]
 8002516:	e002      	b.n	800251e <render_row+0x1d2>
 8002518:	4b09      	ldr	r3, [pc, #36]	@ (8002540 <render_row+0x1f4>)
 800251a:	2280      	movs	r2, #128	@ 0x80
 800251c:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 800251e:	4b08      	ldr	r3, [pc, #32]	@ (8002540 <render_row+0x1f4>)
 8002520:	681b      	ldr	r3, [r3, #0]
 8002522:	4a07      	ldr	r2, [pc, #28]	@ (8002540 <render_row+0x1f4>)
 8002524:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002528:	6013      	str	r3, [r2, #0]
}
 800252a:	bf00      	nop
 800252c:	3710      	adds	r7, #16
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	200011ed 	.word	0x200011ed
 8002538:	200000a8 	.word	0x200000a8
 800253c:	40010c00 	.word	0x40010c00
 8002540:	40011000 	.word	0x40011000
 8002544:	40011400 	.word	0x40011400
 8002548:	40010800 	.word	0x40010800

0800254c <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
#define RENDER_INTERVAL_MS 10
uint32_t last_render_time = 0;

void render_buffer() {
 800254c:	b580      	push	{r7, lr}
 800254e:	b082      	sub	sp, #8
 8002550:	af00      	add	r7, sp, #0
	if (current_row == 0) {
 8002552:	4b16      	ldr	r3, [pc, #88]	@ (80025ac <render_buffer+0x60>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	2b00      	cmp	r3, #0
 8002558:	d10b      	bne.n	8002572 <render_buffer+0x26>
		uint32_t tick = HAL_GetTick();
 800255a:	f000 fa85 	bl	8002a68 <HAL_GetTick>
 800255e:	6078      	str	r0, [r7, #4]
		if (tick - last_render_time < RENDER_INTERVAL_MS) {
 8002560:	4b13      	ldr	r3, [pc, #76]	@ (80025b0 <render_buffer+0x64>)
 8002562:	681b      	ldr	r3, [r3, #0]
 8002564:	687a      	ldr	r2, [r7, #4]
 8002566:	1ad3      	subs	r3, r2, r3
 8002568:	2b09      	cmp	r3, #9
 800256a:	d91b      	bls.n	80025a4 <render_buffer+0x58>
			return;
		} else {
			last_render_time = tick;
 800256c:	4a10      	ldr	r2, [pc, #64]	@ (80025b0 <render_buffer+0x64>)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	6013      	str	r3, [r2, #0]
		}
	}


	render_row();
 8002572:	f7ff feeb 	bl	800234c <render_row>

	if (++current_row == 8) {
 8002576:	4b0d      	ldr	r3, [pc, #52]	@ (80025ac <render_buffer+0x60>)
 8002578:	781b      	ldrb	r3, [r3, #0]
 800257a:	3301      	adds	r3, #1
 800257c:	b2da      	uxtb	r2, r3
 800257e:	4b0b      	ldr	r3, [pc, #44]	@ (80025ac <render_buffer+0x60>)
 8002580:	701a      	strb	r2, [r3, #0]
 8002582:	4b0a      	ldr	r3, [pc, #40]	@ (80025ac <render_buffer+0x60>)
 8002584:	781b      	ldrb	r3, [r3, #0]
 8002586:	2b08      	cmp	r3, #8
 8002588:	d10d      	bne.n	80025a6 <render_buffer+0x5a>
		current_row = 0;
 800258a:	4b08      	ldr	r3, [pc, #32]	@ (80025ac <render_buffer+0x60>)
 800258c:	2200      	movs	r2, #0
 800258e:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 8002590:	4b08      	ldr	r3, [pc, #32]	@ (80025b4 <render_buffer+0x68>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	2b00      	cmp	r3, #0
 8002596:	d006      	beq.n	80025a6 <render_buffer+0x5a>
			swap_buffers();
 8002598:	f7ff fe32 	bl	8002200 <swap_buffers>
			is_back_buffer_new = false;
 800259c:	4b05      	ldr	r3, [pc, #20]	@ (80025b4 <render_buffer+0x68>)
 800259e:	2200      	movs	r2, #0
 80025a0:	701a      	strb	r2, [r3, #0]
 80025a2:	e000      	b.n	80025a6 <render_buffer+0x5a>
			return;
 80025a4:	bf00      	nop
		}
	}
}
 80025a6:	3708      	adds	r7, #8
 80025a8:	46bd      	mov	sp, r7
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200011ed 	.word	0x200011ed
 80025b0:	200011f0 	.word	0x200011f0
 80025b4:	200011ec 	.word	0x200011ec

080025b8 <draw_line>:

// Bresenham's line algorithm
// (https://en.wikipedia.org/wiki/Bresenham's_line_algorithm)
void draw_line(int x0, int y0, int x1, int y1) {
 80025b8:	b580      	push	{r7, lr}
 80025ba:	b08a      	sub	sp, #40	@ 0x28
 80025bc:	af00      	add	r7, sp, #0
 80025be:	60f8      	str	r0, [r7, #12]
 80025c0:	60b9      	str	r1, [r7, #8]
 80025c2:	607a      	str	r2, [r7, #4]
 80025c4:	603b      	str	r3, [r7, #0]
	if (x0 < 0) { x0 = 0; }
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	da01      	bge.n	80025d0 <draw_line+0x18>
 80025cc:	2300      	movs	r3, #0
 80025ce:	60fb      	str	r3, [r7, #12]
	if (x1 < 0) { x1 = 0; }
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	da01      	bge.n	80025da <draw_line+0x22>
 80025d6:	2300      	movs	r3, #0
 80025d8:	607b      	str	r3, [r7, #4]
	if (y0 < 0) { y0 = 0; }
 80025da:	68bb      	ldr	r3, [r7, #8]
 80025dc:	2b00      	cmp	r3, #0
 80025de:	da01      	bge.n	80025e4 <draw_line+0x2c>
 80025e0:	2300      	movs	r3, #0
 80025e2:	60bb      	str	r3, [r7, #8]
	if (y1 < 0) { y1 = 0; }
 80025e4:	683b      	ldr	r3, [r7, #0]
 80025e6:	2b00      	cmp	r3, #0
 80025e8:	da01      	bge.n	80025ee <draw_line+0x36>
 80025ea:	2300      	movs	r3, #0
 80025ec:	603b      	str	r3, [r7, #0]
	if (x0 >= WIDTH) { x0 = WIDTH-1; }
 80025ee:	68fb      	ldr	r3, [r7, #12]
 80025f0:	2b3f      	cmp	r3, #63	@ 0x3f
 80025f2:	dd01      	ble.n	80025f8 <draw_line+0x40>
 80025f4:	233f      	movs	r3, #63	@ 0x3f
 80025f6:	60fb      	str	r3, [r7, #12]
	if (x1 >= WIDTH) { x1 = WIDTH-1; }
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	2b3f      	cmp	r3, #63	@ 0x3f
 80025fc:	dd01      	ble.n	8002602 <draw_line+0x4a>
 80025fe:	233f      	movs	r3, #63	@ 0x3f
 8002600:	607b      	str	r3, [r7, #4]
	if (y0 >= HEIGHT) { y0 = HEIGHT-1; }
 8002602:	68bb      	ldr	r3, [r7, #8]
 8002604:	2b1f      	cmp	r3, #31
 8002606:	dd01      	ble.n	800260c <draw_line+0x54>
 8002608:	231f      	movs	r3, #31
 800260a:	60bb      	str	r3, [r7, #8]
	if (y1 >= HEIGHT) { y1 = HEIGHT-1; }
 800260c:	683b      	ldr	r3, [r7, #0]
 800260e:	2b1f      	cmp	r3, #31
 8002610:	dd01      	ble.n	8002616 <draw_line+0x5e>
 8002612:	231f      	movs	r3, #31
 8002614:	603b      	str	r3, [r7, #0]


	int dx = abs(x1 - x0);
 8002616:	687a      	ldr	r2, [r7, #4]
 8002618:	68fb      	ldr	r3, [r7, #12]
 800261a:	1ad3      	subs	r3, r2, r3
 800261c:	2b00      	cmp	r3, #0
 800261e:	bfb8      	it	lt
 8002620:	425b      	neglt	r3, r3
 8002622:	623b      	str	r3, [r7, #32]
	int sx = (x0 < x1) ? 1 : -1;
 8002624:	68fa      	ldr	r2, [r7, #12]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	429a      	cmp	r2, r3
 800262a:	da01      	bge.n	8002630 <draw_line+0x78>
 800262c:	2301      	movs	r3, #1
 800262e:	e001      	b.n	8002634 <draw_line+0x7c>
 8002630:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002634:	61fb      	str	r3, [r7, #28]
	int dy = -abs(y1 - y0);
 8002636:	683a      	ldr	r2, [r7, #0]
 8002638:	68bb      	ldr	r3, [r7, #8]
 800263a:	1ad3      	subs	r3, r2, r3
 800263c:	2b00      	cmp	r3, #0
 800263e:	bfb8      	it	lt
 8002640:	425b      	neglt	r3, r3
 8002642:	425b      	negs	r3, r3
 8002644:	61bb      	str	r3, [r7, #24]
	int sy = (y0 < y1) ? 1 : -1;
 8002646:	68ba      	ldr	r2, [r7, #8]
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	429a      	cmp	r2, r3
 800264c:	da01      	bge.n	8002652 <draw_line+0x9a>
 800264e:	2301      	movs	r3, #1
 8002650:	e001      	b.n	8002656 <draw_line+0x9e>
 8002652:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002656:	617b      	str	r3, [r7, #20]
	int error = dx + dy;
 8002658:	6a3a      	ldr	r2, [r7, #32]
 800265a:	69bb      	ldr	r3, [r7, #24]
 800265c:	4413      	add	r3, r2
 800265e:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		set_pixel_w(x0, y0, 1);
 8002660:	2201      	movs	r2, #1
 8002662:	68b9      	ldr	r1, [r7, #8]
 8002664:	68f8      	ldr	r0, [r7, #12]
 8002666:	f7ff fe39 	bl	80022dc <set_pixel_w>

		if (x0 == x1 && y0 == y1) {
 800266a:	68fa      	ldr	r2, [r7, #12]
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	429a      	cmp	r2, r3
 8002670:	d103      	bne.n	800267a <draw_line+0xc2>
 8002672:	68ba      	ldr	r2, [r7, #8]
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	429a      	cmp	r2, r3
 8002678:	d023      	beq.n	80026c2 <draw_line+0x10a>
			break;
		}

		int e2 = 2 * error;
 800267a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800267c:	005b      	lsls	r3, r3, #1
 800267e:	613b      	str	r3, [r7, #16]
		if (e2 >= dy) {
 8002680:	693a      	ldr	r2, [r7, #16]
 8002682:	69bb      	ldr	r3, [r7, #24]
 8002684:	429a      	cmp	r2, r3
 8002686:	db0b      	blt.n	80026a0 <draw_line+0xe8>
			if (x0 == x1) {
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	687b      	ldr	r3, [r7, #4]
 800268c:	429a      	cmp	r2, r3
 800268e:	d01a      	beq.n	80026c6 <draw_line+0x10e>
				break;
			}
			error += dy;
 8002690:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002692:	69bb      	ldr	r3, [r7, #24]
 8002694:	4413      	add	r3, r2
 8002696:	627b      	str	r3, [r7, #36]	@ 0x24
			x0 += sx;
 8002698:	68fa      	ldr	r2, [r7, #12]
 800269a:	69fb      	ldr	r3, [r7, #28]
 800269c:	4413      	add	r3, r2
 800269e:	60fb      	str	r3, [r7, #12]
		}
		if (e2 <= dx) {
 80026a0:	693a      	ldr	r2, [r7, #16]
 80026a2:	6a3b      	ldr	r3, [r7, #32]
 80026a4:	429a      	cmp	r2, r3
 80026a6:	dcdb      	bgt.n	8002660 <draw_line+0xa8>
			if (y0 == y1) {
 80026a8:	68ba      	ldr	r2, [r7, #8]
 80026aa:	683b      	ldr	r3, [r7, #0]
 80026ac:	429a      	cmp	r2, r3
 80026ae:	d00c      	beq.n	80026ca <draw_line+0x112>
				break;
			}
			error += dx;
 80026b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80026b2:	6a3b      	ldr	r3, [r7, #32]
 80026b4:	4413      	add	r3, r2
 80026b6:	627b      	str	r3, [r7, #36]	@ 0x24
			y0 += sy;
 80026b8:	68ba      	ldr	r2, [r7, #8]
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	4413      	add	r3, r2
 80026be:	60bb      	str	r3, [r7, #8]
	while (1) {
 80026c0:	e7ce      	b.n	8002660 <draw_line+0xa8>
			break;
 80026c2:	bf00      	nop
 80026c4:	e002      	b.n	80026cc <draw_line+0x114>
				break;
 80026c6:	bf00      	nop
 80026c8:	e000      	b.n	80026cc <draw_line+0x114>
				break;
 80026ca:	bf00      	nop
		}
	}
}
 80026cc:	bf00      	nop
 80026ce:	3728      	adds	r7, #40	@ 0x28
 80026d0:	46bd      	mov	sp, r7
 80026d2:	bd80      	pop	{r7, pc}

080026d4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026d4:	b480      	push	{r7}
 80026d6:	b085      	sub	sp, #20
 80026d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80026da:	4b15      	ldr	r3, [pc, #84]	@ (8002730 <HAL_MspInit+0x5c>)
 80026dc:	699b      	ldr	r3, [r3, #24]
 80026de:	4a14      	ldr	r2, [pc, #80]	@ (8002730 <HAL_MspInit+0x5c>)
 80026e0:	f043 0301 	orr.w	r3, r3, #1
 80026e4:	6193      	str	r3, [r2, #24]
 80026e6:	4b12      	ldr	r3, [pc, #72]	@ (8002730 <HAL_MspInit+0x5c>)
 80026e8:	699b      	ldr	r3, [r3, #24]
 80026ea:	f003 0301 	and.w	r3, r3, #1
 80026ee:	60bb      	str	r3, [r7, #8]
 80026f0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80026f2:	4b0f      	ldr	r3, [pc, #60]	@ (8002730 <HAL_MspInit+0x5c>)
 80026f4:	69db      	ldr	r3, [r3, #28]
 80026f6:	4a0e      	ldr	r2, [pc, #56]	@ (8002730 <HAL_MspInit+0x5c>)
 80026f8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026fc:	61d3      	str	r3, [r2, #28]
 80026fe:	4b0c      	ldr	r3, [pc, #48]	@ (8002730 <HAL_MspInit+0x5c>)
 8002700:	69db      	ldr	r3, [r3, #28]
 8002702:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800270a:	4b0a      	ldr	r3, [pc, #40]	@ (8002734 <HAL_MspInit+0x60>)
 800270c:	685b      	ldr	r3, [r3, #4]
 800270e:	60fb      	str	r3, [r7, #12]
 8002710:	68fb      	ldr	r3, [r7, #12]
 8002712:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002716:	60fb      	str	r3, [r7, #12]
 8002718:	68fb      	ldr	r3, [r7, #12]
 800271a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800271e:	60fb      	str	r3, [r7, #12]
 8002720:	4a04      	ldr	r2, [pc, #16]	@ (8002734 <HAL_MspInit+0x60>)
 8002722:	68fb      	ldr	r3, [r7, #12]
 8002724:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002726:	bf00      	nop
 8002728:	3714      	adds	r7, #20
 800272a:	46bd      	mov	sp, r7
 800272c:	bc80      	pop	{r7}
 800272e:	4770      	bx	lr
 8002730:	40021000 	.word	0x40021000
 8002734:	40010000 	.word	0x40010000

08002738 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b088      	sub	sp, #32
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0310 	add.w	r3, r7, #16
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800274e:	687b      	ldr	r3, [r7, #4]
 8002750:	681b      	ldr	r3, [r3, #0]
 8002752:	4a15      	ldr	r2, [pc, #84]	@ (80027a8 <HAL_SPI_MspInit+0x70>)
 8002754:	4293      	cmp	r3, r2
 8002756:	d123      	bne.n	80027a0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002758:	4b14      	ldr	r3, [pc, #80]	@ (80027ac <HAL_SPI_MspInit+0x74>)
 800275a:	699b      	ldr	r3, [r3, #24]
 800275c:	4a13      	ldr	r2, [pc, #76]	@ (80027ac <HAL_SPI_MspInit+0x74>)
 800275e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002762:	6193      	str	r3, [r2, #24]
 8002764:	4b11      	ldr	r3, [pc, #68]	@ (80027ac <HAL_SPI_MspInit+0x74>)
 8002766:	699b      	ldr	r3, [r3, #24]
 8002768:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800276c:	60fb      	str	r3, [r7, #12]
 800276e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002770:	4b0e      	ldr	r3, [pc, #56]	@ (80027ac <HAL_SPI_MspInit+0x74>)
 8002772:	699b      	ldr	r3, [r3, #24]
 8002774:	4a0d      	ldr	r2, [pc, #52]	@ (80027ac <HAL_SPI_MspInit+0x74>)
 8002776:	f043 0304 	orr.w	r3, r3, #4
 800277a:	6193      	str	r3, [r2, #24]
 800277c:	4b0b      	ldr	r3, [pc, #44]	@ (80027ac <HAL_SPI_MspInit+0x74>)
 800277e:	699b      	ldr	r3, [r3, #24]
 8002780:	f003 0304 	and.w	r3, r3, #4
 8002784:	60bb      	str	r3, [r7, #8]
 8002786:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002788:	23a0      	movs	r3, #160	@ 0xa0
 800278a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800278c:	2302      	movs	r3, #2
 800278e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002790:	2303      	movs	r3, #3
 8002792:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002794:	f107 0310 	add.w	r3, r7, #16
 8002798:	4619      	mov	r1, r3
 800279a:	4805      	ldr	r0, [pc, #20]	@ (80027b0 <HAL_SPI_MspInit+0x78>)
 800279c:	f000 fa7c 	bl	8002c98 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80027a0:	bf00      	nop
 80027a2:	3720      	adds	r7, #32
 80027a4:	46bd      	mov	sp, r7
 80027a6:	bd80      	pop	{r7, pc}
 80027a8:	40013000 	.word	0x40013000
 80027ac:	40021000 	.word	0x40021000
 80027b0:	40010800 	.word	0x40010800

080027b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80027b4:	b580      	push	{r7, lr}
 80027b6:	b084      	sub	sp, #16
 80027b8:	af00      	add	r7, sp, #0
 80027ba:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	681b      	ldr	r3, [r3, #0]
 80027c0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80027c4:	d114      	bne.n	80027f0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80027c6:	4b15      	ldr	r3, [pc, #84]	@ (800281c <HAL_TIM_Base_MspInit+0x68>)
 80027c8:	69db      	ldr	r3, [r3, #28]
 80027ca:	4a14      	ldr	r2, [pc, #80]	@ (800281c <HAL_TIM_Base_MspInit+0x68>)
 80027cc:	f043 0301 	orr.w	r3, r3, #1
 80027d0:	61d3      	str	r3, [r2, #28]
 80027d2:	4b12      	ldr	r3, [pc, #72]	@ (800281c <HAL_TIM_Base_MspInit+0x68>)
 80027d4:	69db      	ldr	r3, [r3, #28]
 80027d6:	f003 0301 	and.w	r3, r3, #1
 80027da:	60fb      	str	r3, [r7, #12]
 80027dc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80027de:	2200      	movs	r2, #0
 80027e0:	2100      	movs	r1, #0
 80027e2:	201c      	movs	r0, #28
 80027e4:	f000 fa21 	bl	8002c2a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80027e8:	201c      	movs	r0, #28
 80027ea:	f000 fa3a 	bl	8002c62 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80027ee:	e010      	b.n	8002812 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a0a      	ldr	r2, [pc, #40]	@ (8002820 <HAL_TIM_Base_MspInit+0x6c>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d10b      	bne.n	8002812 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80027fa:	4b08      	ldr	r3, [pc, #32]	@ (800281c <HAL_TIM_Base_MspInit+0x68>)
 80027fc:	69db      	ldr	r3, [r3, #28]
 80027fe:	4a07      	ldr	r2, [pc, #28]	@ (800281c <HAL_TIM_Base_MspInit+0x68>)
 8002800:	f043 0302 	orr.w	r3, r3, #2
 8002804:	61d3      	str	r3, [r2, #28]
 8002806:	4b05      	ldr	r3, [pc, #20]	@ (800281c <HAL_TIM_Base_MspInit+0x68>)
 8002808:	69db      	ldr	r3, [r3, #28]
 800280a:	f003 0302 	and.w	r3, r3, #2
 800280e:	60bb      	str	r3, [r7, #8]
 8002810:	68bb      	ldr	r3, [r7, #8]
}
 8002812:	bf00      	nop
 8002814:	3710      	adds	r7, #16
 8002816:	46bd      	mov	sp, r7
 8002818:	bd80      	pop	{r7, pc}
 800281a:	bf00      	nop
 800281c:	40021000 	.word	0x40021000
 8002820:	40000400 	.word	0x40000400

08002824 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002824:	b580      	push	{r7, lr}
 8002826:	b08a      	sub	sp, #40	@ 0x28
 8002828:	af00      	add	r7, sp, #0
 800282a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800282c:	f107 0314 	add.w	r3, r7, #20
 8002830:	2200      	movs	r2, #0
 8002832:	601a      	str	r2, [r3, #0]
 8002834:	605a      	str	r2, [r3, #4]
 8002836:	609a      	str	r2, [r3, #8]
 8002838:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002842:	d118      	bne.n	8002876 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002844:	4b25      	ldr	r3, [pc, #148]	@ (80028dc <HAL_TIM_MspPostInit+0xb8>)
 8002846:	699b      	ldr	r3, [r3, #24]
 8002848:	4a24      	ldr	r2, [pc, #144]	@ (80028dc <HAL_TIM_MspPostInit+0xb8>)
 800284a:	f043 0304 	orr.w	r3, r3, #4
 800284e:	6193      	str	r3, [r2, #24]
 8002850:	4b22      	ldr	r3, [pc, #136]	@ (80028dc <HAL_TIM_MspPostInit+0xb8>)
 8002852:	699b      	ldr	r3, [r3, #24]
 8002854:	f003 0304 	and.w	r3, r3, #4
 8002858:	613b      	str	r3, [r7, #16]
 800285a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800285c:	2301      	movs	r3, #1
 800285e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002860:	2302      	movs	r3, #2
 8002862:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002864:	2302      	movs	r3, #2
 8002866:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002868:	f107 0314 	add.w	r3, r7, #20
 800286c:	4619      	mov	r1, r3
 800286e:	481c      	ldr	r0, [pc, #112]	@ (80028e0 <HAL_TIM_MspPostInit+0xbc>)
 8002870:	f000 fa12 	bl	8002c98 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002874:	e02e      	b.n	80028d4 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4a1a      	ldr	r2, [pc, #104]	@ (80028e4 <HAL_TIM_MspPostInit+0xc0>)
 800287c:	4293      	cmp	r3, r2
 800287e:	d129      	bne.n	80028d4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002880:	4b16      	ldr	r3, [pc, #88]	@ (80028dc <HAL_TIM_MspPostInit+0xb8>)
 8002882:	699b      	ldr	r3, [r3, #24]
 8002884:	4a15      	ldr	r2, [pc, #84]	@ (80028dc <HAL_TIM_MspPostInit+0xb8>)
 8002886:	f043 0310 	orr.w	r3, r3, #16
 800288a:	6193      	str	r3, [r2, #24]
 800288c:	4b13      	ldr	r3, [pc, #76]	@ (80028dc <HAL_TIM_MspPostInit+0xb8>)
 800288e:	699b      	ldr	r3, [r3, #24]
 8002890:	f003 0310 	and.w	r3, r3, #16
 8002894:	60fb      	str	r3, [r7, #12]
 8002896:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002898:	2340      	movs	r3, #64	@ 0x40
 800289a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800289c:	2302      	movs	r3, #2
 800289e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80028a0:	2302      	movs	r3, #2
 80028a2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a4:	f107 0314 	add.w	r3, r7, #20
 80028a8:	4619      	mov	r1, r3
 80028aa:	480f      	ldr	r0, [pc, #60]	@ (80028e8 <HAL_TIM_MspPostInit+0xc4>)
 80028ac:	f000 f9f4 	bl	8002c98 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80028b0:	4b0e      	ldr	r3, [pc, #56]	@ (80028ec <HAL_TIM_MspPostInit+0xc8>)
 80028b2:	685b      	ldr	r3, [r3, #4]
 80028b4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028b8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80028bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80028c4:	627b      	str	r3, [r7, #36]	@ 0x24
 80028c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028c8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80028cc:	627b      	str	r3, [r7, #36]	@ 0x24
 80028ce:	4a07      	ldr	r2, [pc, #28]	@ (80028ec <HAL_TIM_MspPostInit+0xc8>)
 80028d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80028d2:	6053      	str	r3, [r2, #4]
}
 80028d4:	bf00      	nop
 80028d6:	3728      	adds	r7, #40	@ 0x28
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	40021000 	.word	0x40021000
 80028e0:	40010800 	.word	0x40010800
 80028e4:	40000400 	.word	0x40000400
 80028e8:	40011000 	.word	0x40011000
 80028ec:	40010000 	.word	0x40010000

080028f0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80028f0:	b480      	push	{r7}
 80028f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80028f4:	bf00      	nop
 80028f6:	e7fd      	b.n	80028f4 <NMI_Handler+0x4>

080028f8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80028f8:	b480      	push	{r7}
 80028fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80028fc:	bf00      	nop
 80028fe:	e7fd      	b.n	80028fc <HardFault_Handler+0x4>

08002900 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002904:	bf00      	nop
 8002906:	e7fd      	b.n	8002904 <MemManage_Handler+0x4>

08002908 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002908:	b480      	push	{r7}
 800290a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800290c:	bf00      	nop
 800290e:	e7fd      	b.n	800290c <BusFault_Handler+0x4>

08002910 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002910:	b480      	push	{r7}
 8002912:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002914:	bf00      	nop
 8002916:	e7fd      	b.n	8002914 <UsageFault_Handler+0x4>

08002918 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002918:	b480      	push	{r7}
 800291a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	bc80      	pop	{r7}
 8002922:	4770      	bx	lr

08002924 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002928:	bf00      	nop
 800292a:	46bd      	mov	sp, r7
 800292c:	bc80      	pop	{r7}
 800292e:	4770      	bx	lr

08002930 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002930:	b480      	push	{r7}
 8002932:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002934:	bf00      	nop
 8002936:	46bd      	mov	sp, r7
 8002938:	bc80      	pop	{r7}
 800293a:	4770      	bx	lr

0800293c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800293c:	b580      	push	{r7, lr}
 800293e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002940:	f000 f880 	bl	8002a44 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002944:	bf00      	nop
 8002946:	bd80      	pop	{r7, pc}

08002948 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002948:	b580      	push	{r7, lr}
 800294a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 800294c:	f7ff fdfe 	bl	800254c <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002950:	4802      	ldr	r0, [pc, #8]	@ (800295c <TIM2_IRQHandler+0x14>)
 8002952:	f001 f953 	bl	8003bfc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002956:	bf00      	nop
 8002958:	bd80      	pop	{r7, pc}
 800295a:	bf00      	nop
 800295c:	20000144 	.word	0x20000144

08002960 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002960:	b480      	push	{r7}
 8002962:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002964:	bf00      	nop
 8002966:	46bd      	mov	sp, r7
 8002968:	bc80      	pop	{r7}
 800296a:	4770      	bx	lr

0800296c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800296c:	f7ff fff8 	bl	8002960 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002970:	480b      	ldr	r0, [pc, #44]	@ (80029a0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002972:	490c      	ldr	r1, [pc, #48]	@ (80029a4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002974:	4a0c      	ldr	r2, [pc, #48]	@ (80029a8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002976:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002978:	e002      	b.n	8002980 <LoopCopyDataInit>

0800297a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800297a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800297c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800297e:	3304      	adds	r3, #4

08002980 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002980:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002982:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002984:	d3f9      	bcc.n	800297a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002986:	4a09      	ldr	r2, [pc, #36]	@ (80029ac <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002988:	4c09      	ldr	r4, [pc, #36]	@ (80029b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800298a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800298c:	e001      	b.n	8002992 <LoopFillZerobss>

0800298e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800298e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002990:	3204      	adds	r2, #4

08002992 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002992:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002994:	d3fb      	bcc.n	800298e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002996:	f001 ff0b 	bl	80047b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800299a:	f7ff f98f 	bl	8001cbc <main>
  bx lr
 800299e:	4770      	bx	lr
  ldr r0, =_sdata
 80029a0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80029a4:	200000bc 	.word	0x200000bc
  ldr r2, =_sidata
 80029a8:	08005a50 	.word	0x08005a50
  ldr r2, =_sbss
 80029ac:	200000c0 	.word	0x200000c0
  ldr r4, =_ebss
 80029b0:	200011f8 	.word	0x200011f8

080029b4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80029b4:	e7fe      	b.n	80029b4 <ADC1_2_IRQHandler>
	...

080029b8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80029b8:	b580      	push	{r7, lr}
 80029ba:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80029bc:	4b08      	ldr	r3, [pc, #32]	@ (80029e0 <HAL_Init+0x28>)
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a07      	ldr	r2, [pc, #28]	@ (80029e0 <HAL_Init+0x28>)
 80029c2:	f043 0310 	orr.w	r3, r3, #16
 80029c6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029c8:	2003      	movs	r0, #3
 80029ca:	f000 f923 	bl	8002c14 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ce:	200f      	movs	r0, #15
 80029d0:	f000 f808 	bl	80029e4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029d4:	f7ff fe7e 	bl	80026d4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029d8:	2300      	movs	r3, #0
}
 80029da:	4618      	mov	r0, r3
 80029dc:	bd80      	pop	{r7, pc}
 80029de:	bf00      	nop
 80029e0:	40022000 	.word	0x40022000

080029e4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029e4:	b580      	push	{r7, lr}
 80029e6:	b082      	sub	sp, #8
 80029e8:	af00      	add	r7, sp, #0
 80029ea:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029ec:	4b12      	ldr	r3, [pc, #72]	@ (8002a38 <HAL_InitTick+0x54>)
 80029ee:	681a      	ldr	r2, [r3, #0]
 80029f0:	4b12      	ldr	r3, [pc, #72]	@ (8002a3c <HAL_InitTick+0x58>)
 80029f2:	781b      	ldrb	r3, [r3, #0]
 80029f4:	4619      	mov	r1, r3
 80029f6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80029fa:	fbb3 f3f1 	udiv	r3, r3, r1
 80029fe:	fbb2 f3f3 	udiv	r3, r2, r3
 8002a02:	4618      	mov	r0, r3
 8002a04:	f000 f93b 	bl	8002c7e <HAL_SYSTICK_Config>
 8002a08:	4603      	mov	r3, r0
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d001      	beq.n	8002a12 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e00e      	b.n	8002a30 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	2b0f      	cmp	r3, #15
 8002a16:	d80a      	bhi.n	8002a2e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002a18:	2200      	movs	r2, #0
 8002a1a:	6879      	ldr	r1, [r7, #4]
 8002a1c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a20:	f000 f903 	bl	8002c2a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a24:	4a06      	ldr	r2, [pc, #24]	@ (8002a40 <HAL_InitTick+0x5c>)
 8002a26:	687b      	ldr	r3, [r7, #4]
 8002a28:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	e000      	b.n	8002a30 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a2e:	2301      	movs	r3, #1
}
 8002a30:	4618      	mov	r0, r3
 8002a32:	3708      	adds	r7, #8
 8002a34:	46bd      	mov	sp, r7
 8002a36:	bd80      	pop	{r7, pc}
 8002a38:	200000b0 	.word	0x200000b0
 8002a3c:	200000b8 	.word	0x200000b8
 8002a40:	200000b4 	.word	0x200000b4

08002a44 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a44:	b480      	push	{r7}
 8002a46:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a48:	4b05      	ldr	r3, [pc, #20]	@ (8002a60 <HAL_IncTick+0x1c>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	461a      	mov	r2, r3
 8002a4e:	4b05      	ldr	r3, [pc, #20]	@ (8002a64 <HAL_IncTick+0x20>)
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4413      	add	r3, r2
 8002a54:	4a03      	ldr	r2, [pc, #12]	@ (8002a64 <HAL_IncTick+0x20>)
 8002a56:	6013      	str	r3, [r2, #0]
}
 8002a58:	bf00      	nop
 8002a5a:	46bd      	mov	sp, r7
 8002a5c:	bc80      	pop	{r7}
 8002a5e:	4770      	bx	lr
 8002a60:	200000b8 	.word	0x200000b8
 8002a64:	200011f4 	.word	0x200011f4

08002a68 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a68:	b480      	push	{r7}
 8002a6a:	af00      	add	r7, sp, #0
  return uwTick;
 8002a6c:	4b02      	ldr	r3, [pc, #8]	@ (8002a78 <HAL_GetTick+0x10>)
 8002a6e:	681b      	ldr	r3, [r3, #0]
}
 8002a70:	4618      	mov	r0, r3
 8002a72:	46bd      	mov	sp, r7
 8002a74:	bc80      	pop	{r7}
 8002a76:	4770      	bx	lr
 8002a78:	200011f4 	.word	0x200011f4

08002a7c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a7c:	b480      	push	{r7}
 8002a7e:	b085      	sub	sp, #20
 8002a80:	af00      	add	r7, sp, #0
 8002a82:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a84:	687b      	ldr	r3, [r7, #4]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a8c:	4b0c      	ldr	r3, [pc, #48]	@ (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002a8e:	68db      	ldr	r3, [r3, #12]
 8002a90:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a92:	68ba      	ldr	r2, [r7, #8]
 8002a94:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a98:	4013      	ands	r3, r2
 8002a9a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002a9c:	68fb      	ldr	r3, [r7, #12]
 8002a9e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002aa0:	68bb      	ldr	r3, [r7, #8]
 8002aa2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002aa4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002aa8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002aac:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002aae:	4a04      	ldr	r2, [pc, #16]	@ (8002ac0 <__NVIC_SetPriorityGrouping+0x44>)
 8002ab0:	68bb      	ldr	r3, [r7, #8]
 8002ab2:	60d3      	str	r3, [r2, #12]
}
 8002ab4:	bf00      	nop
 8002ab6:	3714      	adds	r7, #20
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bc80      	pop	{r7}
 8002abc:	4770      	bx	lr
 8002abe:	bf00      	nop
 8002ac0:	e000ed00 	.word	0xe000ed00

08002ac4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ac4:	b480      	push	{r7}
 8002ac6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ac8:	4b04      	ldr	r3, [pc, #16]	@ (8002adc <__NVIC_GetPriorityGrouping+0x18>)
 8002aca:	68db      	ldr	r3, [r3, #12]
 8002acc:	0a1b      	lsrs	r3, r3, #8
 8002ace:	f003 0307 	and.w	r3, r3, #7
}
 8002ad2:	4618      	mov	r0, r3
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	bc80      	pop	{r7}
 8002ad8:	4770      	bx	lr
 8002ada:	bf00      	nop
 8002adc:	e000ed00 	.word	0xe000ed00

08002ae0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae0:	b480      	push	{r7}
 8002ae2:	b083      	sub	sp, #12
 8002ae4:	af00      	add	r7, sp, #0
 8002ae6:	4603      	mov	r3, r0
 8002ae8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002aea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002aee:	2b00      	cmp	r3, #0
 8002af0:	db0b      	blt.n	8002b0a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002af2:	79fb      	ldrb	r3, [r7, #7]
 8002af4:	f003 021f 	and.w	r2, r3, #31
 8002af8:	4906      	ldr	r1, [pc, #24]	@ (8002b14 <__NVIC_EnableIRQ+0x34>)
 8002afa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002afe:	095b      	lsrs	r3, r3, #5
 8002b00:	2001      	movs	r0, #1
 8002b02:	fa00 f202 	lsl.w	r2, r0, r2
 8002b06:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002b0a:	bf00      	nop
 8002b0c:	370c      	adds	r7, #12
 8002b0e:	46bd      	mov	sp, r7
 8002b10:	bc80      	pop	{r7}
 8002b12:	4770      	bx	lr
 8002b14:	e000e100 	.word	0xe000e100

08002b18 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b083      	sub	sp, #12
 8002b1c:	af00      	add	r7, sp, #0
 8002b1e:	4603      	mov	r3, r0
 8002b20:	6039      	str	r1, [r7, #0]
 8002b22:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b24:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	db0a      	blt.n	8002b42 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b2c:	683b      	ldr	r3, [r7, #0]
 8002b2e:	b2da      	uxtb	r2, r3
 8002b30:	490c      	ldr	r1, [pc, #48]	@ (8002b64 <__NVIC_SetPriority+0x4c>)
 8002b32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b36:	0112      	lsls	r2, r2, #4
 8002b38:	b2d2      	uxtb	r2, r2
 8002b3a:	440b      	add	r3, r1
 8002b3c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b40:	e00a      	b.n	8002b58 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b42:	683b      	ldr	r3, [r7, #0]
 8002b44:	b2da      	uxtb	r2, r3
 8002b46:	4908      	ldr	r1, [pc, #32]	@ (8002b68 <__NVIC_SetPriority+0x50>)
 8002b48:	79fb      	ldrb	r3, [r7, #7]
 8002b4a:	f003 030f 	and.w	r3, r3, #15
 8002b4e:	3b04      	subs	r3, #4
 8002b50:	0112      	lsls	r2, r2, #4
 8002b52:	b2d2      	uxtb	r2, r2
 8002b54:	440b      	add	r3, r1
 8002b56:	761a      	strb	r2, [r3, #24]
}
 8002b58:	bf00      	nop
 8002b5a:	370c      	adds	r7, #12
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	bc80      	pop	{r7}
 8002b60:	4770      	bx	lr
 8002b62:	bf00      	nop
 8002b64:	e000e100 	.word	0xe000e100
 8002b68:	e000ed00 	.word	0xe000ed00

08002b6c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b6c:	b480      	push	{r7}
 8002b6e:	b089      	sub	sp, #36	@ 0x24
 8002b70:	af00      	add	r7, sp, #0
 8002b72:	60f8      	str	r0, [r7, #12]
 8002b74:	60b9      	str	r1, [r7, #8]
 8002b76:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b78:	68fb      	ldr	r3, [r7, #12]
 8002b7a:	f003 0307 	and.w	r3, r3, #7
 8002b7e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b80:	69fb      	ldr	r3, [r7, #28]
 8002b82:	f1c3 0307 	rsb	r3, r3, #7
 8002b86:	2b04      	cmp	r3, #4
 8002b88:	bf28      	it	cs
 8002b8a:	2304      	movcs	r3, #4
 8002b8c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b8e:	69fb      	ldr	r3, [r7, #28]
 8002b90:	3304      	adds	r3, #4
 8002b92:	2b06      	cmp	r3, #6
 8002b94:	d902      	bls.n	8002b9c <NVIC_EncodePriority+0x30>
 8002b96:	69fb      	ldr	r3, [r7, #28]
 8002b98:	3b03      	subs	r3, #3
 8002b9a:	e000      	b.n	8002b9e <NVIC_EncodePriority+0x32>
 8002b9c:	2300      	movs	r3, #0
 8002b9e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002ba0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ba4:	69bb      	ldr	r3, [r7, #24]
 8002ba6:	fa02 f303 	lsl.w	r3, r2, r3
 8002baa:	43da      	mvns	r2, r3
 8002bac:	68bb      	ldr	r3, [r7, #8]
 8002bae:	401a      	ands	r2, r3
 8002bb0:	697b      	ldr	r3, [r7, #20]
 8002bb2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002bb4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002bb8:	697b      	ldr	r3, [r7, #20]
 8002bba:	fa01 f303 	lsl.w	r3, r1, r3
 8002bbe:	43d9      	mvns	r1, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bc4:	4313      	orrs	r3, r2
         );
}
 8002bc6:	4618      	mov	r0, r3
 8002bc8:	3724      	adds	r7, #36	@ 0x24
 8002bca:	46bd      	mov	sp, r7
 8002bcc:	bc80      	pop	{r7}
 8002bce:	4770      	bx	lr

08002bd0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b082      	sub	sp, #8
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	3b01      	subs	r3, #1
 8002bdc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002be0:	d301      	bcc.n	8002be6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002be2:	2301      	movs	r3, #1
 8002be4:	e00f      	b.n	8002c06 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002be6:	4a0a      	ldr	r2, [pc, #40]	@ (8002c10 <SysTick_Config+0x40>)
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	3b01      	subs	r3, #1
 8002bec:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002bee:	210f      	movs	r1, #15
 8002bf0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002bf4:	f7ff ff90 	bl	8002b18 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002bf8:	4b05      	ldr	r3, [pc, #20]	@ (8002c10 <SysTick_Config+0x40>)
 8002bfa:	2200      	movs	r2, #0
 8002bfc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002bfe:	4b04      	ldr	r3, [pc, #16]	@ (8002c10 <SysTick_Config+0x40>)
 8002c00:	2207      	movs	r2, #7
 8002c02:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c04:	2300      	movs	r3, #0
}
 8002c06:	4618      	mov	r0, r3
 8002c08:	3708      	adds	r7, #8
 8002c0a:	46bd      	mov	sp, r7
 8002c0c:	bd80      	pop	{r7, pc}
 8002c0e:	bf00      	nop
 8002c10:	e000e010 	.word	0xe000e010

08002c14 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c14:	b580      	push	{r7, lr}
 8002c16:	b082      	sub	sp, #8
 8002c18:	af00      	add	r7, sp, #0
 8002c1a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c1c:	6878      	ldr	r0, [r7, #4]
 8002c1e:	f7ff ff2d 	bl	8002a7c <__NVIC_SetPriorityGrouping>
}
 8002c22:	bf00      	nop
 8002c24:	3708      	adds	r7, #8
 8002c26:	46bd      	mov	sp, r7
 8002c28:	bd80      	pop	{r7, pc}

08002c2a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c2a:	b580      	push	{r7, lr}
 8002c2c:	b086      	sub	sp, #24
 8002c2e:	af00      	add	r7, sp, #0
 8002c30:	4603      	mov	r3, r0
 8002c32:	60b9      	str	r1, [r7, #8]
 8002c34:	607a      	str	r2, [r7, #4]
 8002c36:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c38:	2300      	movs	r3, #0
 8002c3a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c3c:	f7ff ff42 	bl	8002ac4 <__NVIC_GetPriorityGrouping>
 8002c40:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c42:	687a      	ldr	r2, [r7, #4]
 8002c44:	68b9      	ldr	r1, [r7, #8]
 8002c46:	6978      	ldr	r0, [r7, #20]
 8002c48:	f7ff ff90 	bl	8002b6c <NVIC_EncodePriority>
 8002c4c:	4602      	mov	r2, r0
 8002c4e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c52:	4611      	mov	r1, r2
 8002c54:	4618      	mov	r0, r3
 8002c56:	f7ff ff5f 	bl	8002b18 <__NVIC_SetPriority>
}
 8002c5a:	bf00      	nop
 8002c5c:	3718      	adds	r7, #24
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b082      	sub	sp, #8
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c6c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c70:	4618      	mov	r0, r3
 8002c72:	f7ff ff35 	bl	8002ae0 <__NVIC_EnableIRQ>
}
 8002c76:	bf00      	nop
 8002c78:	3708      	adds	r7, #8
 8002c7a:	46bd      	mov	sp, r7
 8002c7c:	bd80      	pop	{r7, pc}

08002c7e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c7e:	b580      	push	{r7, lr}
 8002c80:	b082      	sub	sp, #8
 8002c82:	af00      	add	r7, sp, #0
 8002c84:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c86:	6878      	ldr	r0, [r7, #4]
 8002c88:	f7ff ffa2 	bl	8002bd0 <SysTick_Config>
 8002c8c:	4603      	mov	r3, r0
}
 8002c8e:	4618      	mov	r0, r3
 8002c90:	3708      	adds	r7, #8
 8002c92:	46bd      	mov	sp, r7
 8002c94:	bd80      	pop	{r7, pc}
	...

08002c98 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c98:	b480      	push	{r7}
 8002c9a:	b08b      	sub	sp, #44	@ 0x2c
 8002c9c:	af00      	add	r7, sp, #0
 8002c9e:	6078      	str	r0, [r7, #4]
 8002ca0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002ca6:	2300      	movs	r3, #0
 8002ca8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002caa:	e169      	b.n	8002f80 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002cac:	2201      	movs	r2, #1
 8002cae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002cb6:	683b      	ldr	r3, [r7, #0]
 8002cb8:	681b      	ldr	r3, [r3, #0]
 8002cba:	69fa      	ldr	r2, [r7, #28]
 8002cbc:	4013      	ands	r3, r2
 8002cbe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002cc0:	69ba      	ldr	r2, [r7, #24]
 8002cc2:	69fb      	ldr	r3, [r7, #28]
 8002cc4:	429a      	cmp	r2, r3
 8002cc6:	f040 8158 	bne.w	8002f7a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002cca:	683b      	ldr	r3, [r7, #0]
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	4a9a      	ldr	r2, [pc, #616]	@ (8002f38 <HAL_GPIO_Init+0x2a0>)
 8002cd0:	4293      	cmp	r3, r2
 8002cd2:	d05e      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002cd4:	4a98      	ldr	r2, [pc, #608]	@ (8002f38 <HAL_GPIO_Init+0x2a0>)
 8002cd6:	4293      	cmp	r3, r2
 8002cd8:	d875      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002cda:	4a98      	ldr	r2, [pc, #608]	@ (8002f3c <HAL_GPIO_Init+0x2a4>)
 8002cdc:	4293      	cmp	r3, r2
 8002cde:	d058      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002ce0:	4a96      	ldr	r2, [pc, #600]	@ (8002f3c <HAL_GPIO_Init+0x2a4>)
 8002ce2:	4293      	cmp	r3, r2
 8002ce4:	d86f      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002ce6:	4a96      	ldr	r2, [pc, #600]	@ (8002f40 <HAL_GPIO_Init+0x2a8>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d052      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002cec:	4a94      	ldr	r2, [pc, #592]	@ (8002f40 <HAL_GPIO_Init+0x2a8>)
 8002cee:	4293      	cmp	r3, r2
 8002cf0:	d869      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002cf2:	4a94      	ldr	r2, [pc, #592]	@ (8002f44 <HAL_GPIO_Init+0x2ac>)
 8002cf4:	4293      	cmp	r3, r2
 8002cf6:	d04c      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002cf8:	4a92      	ldr	r2, [pc, #584]	@ (8002f44 <HAL_GPIO_Init+0x2ac>)
 8002cfa:	4293      	cmp	r3, r2
 8002cfc:	d863      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002cfe:	4a92      	ldr	r2, [pc, #584]	@ (8002f48 <HAL_GPIO_Init+0x2b0>)
 8002d00:	4293      	cmp	r3, r2
 8002d02:	d046      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
 8002d04:	4a90      	ldr	r2, [pc, #576]	@ (8002f48 <HAL_GPIO_Init+0x2b0>)
 8002d06:	4293      	cmp	r3, r2
 8002d08:	d85d      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002d0a:	2b12      	cmp	r3, #18
 8002d0c:	d82a      	bhi.n	8002d64 <HAL_GPIO_Init+0xcc>
 8002d0e:	2b12      	cmp	r3, #18
 8002d10:	d859      	bhi.n	8002dc6 <HAL_GPIO_Init+0x12e>
 8002d12:	a201      	add	r2, pc, #4	@ (adr r2, 8002d18 <HAL_GPIO_Init+0x80>)
 8002d14:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002d18:	08002d93 	.word	0x08002d93
 8002d1c:	08002d6d 	.word	0x08002d6d
 8002d20:	08002d7f 	.word	0x08002d7f
 8002d24:	08002dc1 	.word	0x08002dc1
 8002d28:	08002dc7 	.word	0x08002dc7
 8002d2c:	08002dc7 	.word	0x08002dc7
 8002d30:	08002dc7 	.word	0x08002dc7
 8002d34:	08002dc7 	.word	0x08002dc7
 8002d38:	08002dc7 	.word	0x08002dc7
 8002d3c:	08002dc7 	.word	0x08002dc7
 8002d40:	08002dc7 	.word	0x08002dc7
 8002d44:	08002dc7 	.word	0x08002dc7
 8002d48:	08002dc7 	.word	0x08002dc7
 8002d4c:	08002dc7 	.word	0x08002dc7
 8002d50:	08002dc7 	.word	0x08002dc7
 8002d54:	08002dc7 	.word	0x08002dc7
 8002d58:	08002dc7 	.word	0x08002dc7
 8002d5c:	08002d75 	.word	0x08002d75
 8002d60:	08002d89 	.word	0x08002d89
 8002d64:	4a79      	ldr	r2, [pc, #484]	@ (8002f4c <HAL_GPIO_Init+0x2b4>)
 8002d66:	4293      	cmp	r3, r2
 8002d68:	d013      	beq.n	8002d92 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002d6a:	e02c      	b.n	8002dc6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002d6c:	683b      	ldr	r3, [r7, #0]
 8002d6e:	68db      	ldr	r3, [r3, #12]
 8002d70:	623b      	str	r3, [r7, #32]
          break;
 8002d72:	e029      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002d74:	683b      	ldr	r3, [r7, #0]
 8002d76:	68db      	ldr	r3, [r3, #12]
 8002d78:	3304      	adds	r3, #4
 8002d7a:	623b      	str	r3, [r7, #32]
          break;
 8002d7c:	e024      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002d7e:	683b      	ldr	r3, [r7, #0]
 8002d80:	68db      	ldr	r3, [r3, #12]
 8002d82:	3308      	adds	r3, #8
 8002d84:	623b      	str	r3, [r7, #32]
          break;
 8002d86:	e01f      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002d88:	683b      	ldr	r3, [r7, #0]
 8002d8a:	68db      	ldr	r3, [r3, #12]
 8002d8c:	330c      	adds	r3, #12
 8002d8e:	623b      	str	r3, [r7, #32]
          break;
 8002d90:	e01a      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002d92:	683b      	ldr	r3, [r7, #0]
 8002d94:	689b      	ldr	r3, [r3, #8]
 8002d96:	2b00      	cmp	r3, #0
 8002d98:	d102      	bne.n	8002da0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002d9a:	2304      	movs	r3, #4
 8002d9c:	623b      	str	r3, [r7, #32]
          break;
 8002d9e:	e013      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002da0:	683b      	ldr	r3, [r7, #0]
 8002da2:	689b      	ldr	r3, [r3, #8]
 8002da4:	2b01      	cmp	r3, #1
 8002da6:	d105      	bne.n	8002db4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002da8:	2308      	movs	r3, #8
 8002daa:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	69fa      	ldr	r2, [r7, #28]
 8002db0:	611a      	str	r2, [r3, #16]
          break;
 8002db2:	e009      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002db4:	2308      	movs	r3, #8
 8002db6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002db8:	687b      	ldr	r3, [r7, #4]
 8002dba:	69fa      	ldr	r2, [r7, #28]
 8002dbc:	615a      	str	r2, [r3, #20]
          break;
 8002dbe:	e003      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002dc0:	2300      	movs	r3, #0
 8002dc2:	623b      	str	r3, [r7, #32]
          break;
 8002dc4:	e000      	b.n	8002dc8 <HAL_GPIO_Init+0x130>
          break;
 8002dc6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002dc8:	69bb      	ldr	r3, [r7, #24]
 8002dca:	2bff      	cmp	r3, #255	@ 0xff
 8002dcc:	d801      	bhi.n	8002dd2 <HAL_GPIO_Init+0x13a>
 8002dce:	687b      	ldr	r3, [r7, #4]
 8002dd0:	e001      	b.n	8002dd6 <HAL_GPIO_Init+0x13e>
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	3304      	adds	r3, #4
 8002dd6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	2bff      	cmp	r3, #255	@ 0xff
 8002ddc:	d802      	bhi.n	8002de4 <HAL_GPIO_Init+0x14c>
 8002dde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de0:	009b      	lsls	r3, r3, #2
 8002de2:	e002      	b.n	8002dea <HAL_GPIO_Init+0x152>
 8002de4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002de6:	3b08      	subs	r3, #8
 8002de8:	009b      	lsls	r3, r3, #2
 8002dea:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	681a      	ldr	r2, [r3, #0]
 8002df0:	210f      	movs	r1, #15
 8002df2:	693b      	ldr	r3, [r7, #16]
 8002df4:	fa01 f303 	lsl.w	r3, r1, r3
 8002df8:	43db      	mvns	r3, r3
 8002dfa:	401a      	ands	r2, r3
 8002dfc:	6a39      	ldr	r1, [r7, #32]
 8002dfe:	693b      	ldr	r3, [r7, #16]
 8002e00:	fa01 f303 	lsl.w	r3, r1, r3
 8002e04:	431a      	orrs	r2, r3
 8002e06:	697b      	ldr	r3, [r7, #20]
 8002e08:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e0a:	683b      	ldr	r3, [r7, #0]
 8002e0c:	685b      	ldr	r3, [r3, #4]
 8002e0e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002e12:	2b00      	cmp	r3, #0
 8002e14:	f000 80b1 	beq.w	8002f7a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002e18:	4b4d      	ldr	r3, [pc, #308]	@ (8002f50 <HAL_GPIO_Init+0x2b8>)
 8002e1a:	699b      	ldr	r3, [r3, #24]
 8002e1c:	4a4c      	ldr	r2, [pc, #304]	@ (8002f50 <HAL_GPIO_Init+0x2b8>)
 8002e1e:	f043 0301 	orr.w	r3, r3, #1
 8002e22:	6193      	str	r3, [r2, #24]
 8002e24:	4b4a      	ldr	r3, [pc, #296]	@ (8002f50 <HAL_GPIO_Init+0x2b8>)
 8002e26:	699b      	ldr	r3, [r3, #24]
 8002e28:	f003 0301 	and.w	r3, r3, #1
 8002e2c:	60bb      	str	r3, [r7, #8]
 8002e2e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002e30:	4a48      	ldr	r2, [pc, #288]	@ (8002f54 <HAL_GPIO_Init+0x2bc>)
 8002e32:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e34:	089b      	lsrs	r3, r3, #2
 8002e36:	3302      	adds	r3, #2
 8002e38:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e3c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002e3e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e40:	f003 0303 	and.w	r3, r3, #3
 8002e44:	009b      	lsls	r3, r3, #2
 8002e46:	220f      	movs	r2, #15
 8002e48:	fa02 f303 	lsl.w	r3, r2, r3
 8002e4c:	43db      	mvns	r3, r3
 8002e4e:	68fa      	ldr	r2, [r7, #12]
 8002e50:	4013      	ands	r3, r2
 8002e52:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002e54:	687b      	ldr	r3, [r7, #4]
 8002e56:	4a40      	ldr	r2, [pc, #256]	@ (8002f58 <HAL_GPIO_Init+0x2c0>)
 8002e58:	4293      	cmp	r3, r2
 8002e5a:	d013      	beq.n	8002e84 <HAL_GPIO_Init+0x1ec>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	4a3f      	ldr	r2, [pc, #252]	@ (8002f5c <HAL_GPIO_Init+0x2c4>)
 8002e60:	4293      	cmp	r3, r2
 8002e62:	d00d      	beq.n	8002e80 <HAL_GPIO_Init+0x1e8>
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	4a3e      	ldr	r2, [pc, #248]	@ (8002f60 <HAL_GPIO_Init+0x2c8>)
 8002e68:	4293      	cmp	r3, r2
 8002e6a:	d007      	beq.n	8002e7c <HAL_GPIO_Init+0x1e4>
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	4a3d      	ldr	r2, [pc, #244]	@ (8002f64 <HAL_GPIO_Init+0x2cc>)
 8002e70:	4293      	cmp	r3, r2
 8002e72:	d101      	bne.n	8002e78 <HAL_GPIO_Init+0x1e0>
 8002e74:	2303      	movs	r3, #3
 8002e76:	e006      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e78:	2304      	movs	r3, #4
 8002e7a:	e004      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e7c:	2302      	movs	r3, #2
 8002e7e:	e002      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e80:	2301      	movs	r3, #1
 8002e82:	e000      	b.n	8002e86 <HAL_GPIO_Init+0x1ee>
 8002e84:	2300      	movs	r3, #0
 8002e86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e88:	f002 0203 	and.w	r2, r2, #3
 8002e8c:	0092      	lsls	r2, r2, #2
 8002e8e:	4093      	lsls	r3, r2
 8002e90:	68fa      	ldr	r2, [r7, #12]
 8002e92:	4313      	orrs	r3, r2
 8002e94:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002e96:	492f      	ldr	r1, [pc, #188]	@ (8002f54 <HAL_GPIO_Init+0x2bc>)
 8002e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e9a:	089b      	lsrs	r3, r3, #2
 8002e9c:	3302      	adds	r3, #2
 8002e9e:	68fa      	ldr	r2, [r7, #12]
 8002ea0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	d006      	beq.n	8002ebe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002eb0:	4b2d      	ldr	r3, [pc, #180]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002eb2:	689a      	ldr	r2, [r3, #8]
 8002eb4:	492c      	ldr	r1, [pc, #176]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002eb6:	69bb      	ldr	r3, [r7, #24]
 8002eb8:	4313      	orrs	r3, r2
 8002eba:	608b      	str	r3, [r1, #8]
 8002ebc:	e006      	b.n	8002ecc <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002ebe:	4b2a      	ldr	r3, [pc, #168]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ec0:	689a      	ldr	r2, [r3, #8]
 8002ec2:	69bb      	ldr	r3, [r7, #24]
 8002ec4:	43db      	mvns	r3, r3
 8002ec6:	4928      	ldr	r1, [pc, #160]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ec8:	4013      	ands	r3, r2
 8002eca:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002ecc:	683b      	ldr	r3, [r7, #0]
 8002ece:	685b      	ldr	r3, [r3, #4]
 8002ed0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	d006      	beq.n	8002ee6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002ed8:	4b23      	ldr	r3, [pc, #140]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002eda:	68da      	ldr	r2, [r3, #12]
 8002edc:	4922      	ldr	r1, [pc, #136]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ede:	69bb      	ldr	r3, [r7, #24]
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	60cb      	str	r3, [r1, #12]
 8002ee4:	e006      	b.n	8002ef4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002ee6:	4b20      	ldr	r3, [pc, #128]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ee8:	68da      	ldr	r2, [r3, #12]
 8002eea:	69bb      	ldr	r3, [r7, #24]
 8002eec:	43db      	mvns	r3, r3
 8002eee:	491e      	ldr	r1, [pc, #120]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002ef0:	4013      	ands	r3, r2
 8002ef2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002ef4:	683b      	ldr	r3, [r7, #0]
 8002ef6:	685b      	ldr	r3, [r3, #4]
 8002ef8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002efc:	2b00      	cmp	r3, #0
 8002efe:	d006      	beq.n	8002f0e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002f00:	4b19      	ldr	r3, [pc, #100]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f02:	685a      	ldr	r2, [r3, #4]
 8002f04:	4918      	ldr	r1, [pc, #96]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f06:	69bb      	ldr	r3, [r7, #24]
 8002f08:	4313      	orrs	r3, r2
 8002f0a:	604b      	str	r3, [r1, #4]
 8002f0c:	e006      	b.n	8002f1c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002f0e:	4b16      	ldr	r3, [pc, #88]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f10:	685a      	ldr	r2, [r3, #4]
 8002f12:	69bb      	ldr	r3, [r7, #24]
 8002f14:	43db      	mvns	r3, r3
 8002f16:	4914      	ldr	r1, [pc, #80]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f18:	4013      	ands	r3, r2
 8002f1a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685b      	ldr	r3, [r3, #4]
 8002f20:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f24:	2b00      	cmp	r3, #0
 8002f26:	d021      	beq.n	8002f6c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002f28:	4b0f      	ldr	r3, [pc, #60]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f2a:	681a      	ldr	r2, [r3, #0]
 8002f2c:	490e      	ldr	r1, [pc, #56]	@ (8002f68 <HAL_GPIO_Init+0x2d0>)
 8002f2e:	69bb      	ldr	r3, [r7, #24]
 8002f30:	4313      	orrs	r3, r2
 8002f32:	600b      	str	r3, [r1, #0]
 8002f34:	e021      	b.n	8002f7a <HAL_GPIO_Init+0x2e2>
 8002f36:	bf00      	nop
 8002f38:	10320000 	.word	0x10320000
 8002f3c:	10310000 	.word	0x10310000
 8002f40:	10220000 	.word	0x10220000
 8002f44:	10210000 	.word	0x10210000
 8002f48:	10120000 	.word	0x10120000
 8002f4c:	10110000 	.word	0x10110000
 8002f50:	40021000 	.word	0x40021000
 8002f54:	40010000 	.word	0x40010000
 8002f58:	40010800 	.word	0x40010800
 8002f5c:	40010c00 	.word	0x40010c00
 8002f60:	40011000 	.word	0x40011000
 8002f64:	40011400 	.word	0x40011400
 8002f68:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002f6c:	4b0b      	ldr	r3, [pc, #44]	@ (8002f9c <HAL_GPIO_Init+0x304>)
 8002f6e:	681a      	ldr	r2, [r3, #0]
 8002f70:	69bb      	ldr	r3, [r7, #24]
 8002f72:	43db      	mvns	r3, r3
 8002f74:	4909      	ldr	r1, [pc, #36]	@ (8002f9c <HAL_GPIO_Init+0x304>)
 8002f76:	4013      	ands	r3, r2
 8002f78:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002f7a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f80:	683b      	ldr	r3, [r7, #0]
 8002f82:	681a      	ldr	r2, [r3, #0]
 8002f84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f86:	fa22 f303 	lsr.w	r3, r2, r3
 8002f8a:	2b00      	cmp	r3, #0
 8002f8c:	f47f ae8e 	bne.w	8002cac <HAL_GPIO_Init+0x14>
  }
}
 8002f90:	bf00      	nop
 8002f92:	bf00      	nop
 8002f94:	372c      	adds	r7, #44	@ 0x2c
 8002f96:	46bd      	mov	sp, r7
 8002f98:	bc80      	pop	{r7}
 8002f9a:	4770      	bx	lr
 8002f9c:	40010400 	.word	0x40010400

08002fa0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002fa0:	b480      	push	{r7}
 8002fa2:	b085      	sub	sp, #20
 8002fa4:	af00      	add	r7, sp, #0
 8002fa6:	6078      	str	r0, [r7, #4]
 8002fa8:	460b      	mov	r3, r1
 8002faa:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	689a      	ldr	r2, [r3, #8]
 8002fb0:	887b      	ldrh	r3, [r7, #2]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	2b00      	cmp	r3, #0
 8002fb6:	d002      	beq.n	8002fbe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	73fb      	strb	r3, [r7, #15]
 8002fbc:	e001      	b.n	8002fc2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002fc2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc4:	4618      	mov	r0, r3
 8002fc6:	3714      	adds	r7, #20
 8002fc8:	46bd      	mov	sp, r7
 8002fca:	bc80      	pop	{r7}
 8002fcc:	4770      	bx	lr

08002fce <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
 8002fd6:	460b      	mov	r3, r1
 8002fd8:	807b      	strh	r3, [r7, #2]
 8002fda:	4613      	mov	r3, r2
 8002fdc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002fde:	787b      	ldrb	r3, [r7, #1]
 8002fe0:	2b00      	cmp	r3, #0
 8002fe2:	d003      	beq.n	8002fec <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002fe4:	887a      	ldrh	r2, [r7, #2]
 8002fe6:	687b      	ldr	r3, [r7, #4]
 8002fe8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002fea:	e003      	b.n	8002ff4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002fec:	887b      	ldrh	r3, [r7, #2]
 8002fee:	041a      	lsls	r2, r3, #16
 8002ff0:	687b      	ldr	r3, [r7, #4]
 8002ff2:	611a      	str	r2, [r3, #16]
}
 8002ff4:	bf00      	nop
 8002ff6:	370c      	adds	r7, #12
 8002ff8:	46bd      	mov	sp, r7
 8002ffa:	bc80      	pop	{r7}
 8002ffc:	4770      	bx	lr
	...

08003000 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003000:	b580      	push	{r7, lr}
 8003002:	b086      	sub	sp, #24
 8003004:	af00      	add	r7, sp, #0
 8003006:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	2b00      	cmp	r3, #0
 800300c:	d101      	bne.n	8003012 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e272      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003012:	687b      	ldr	r3, [r7, #4]
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	f003 0301 	and.w	r3, r3, #1
 800301a:	2b00      	cmp	r3, #0
 800301c:	f000 8087 	beq.w	800312e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003020:	4b92      	ldr	r3, [pc, #584]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f003 030c 	and.w	r3, r3, #12
 8003028:	2b04      	cmp	r3, #4
 800302a:	d00c      	beq.n	8003046 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800302c:	4b8f      	ldr	r3, [pc, #572]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800302e:	685b      	ldr	r3, [r3, #4]
 8003030:	f003 030c 	and.w	r3, r3, #12
 8003034:	2b08      	cmp	r3, #8
 8003036:	d112      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
 8003038:	4b8c      	ldr	r3, [pc, #560]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003040:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003044:	d10b      	bne.n	800305e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003046:	4b89      	ldr	r3, [pc, #548]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800304e:	2b00      	cmp	r3, #0
 8003050:	d06c      	beq.n	800312c <HAL_RCC_OscConfig+0x12c>
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	685b      	ldr	r3, [r3, #4]
 8003056:	2b00      	cmp	r3, #0
 8003058:	d168      	bne.n	800312c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800305a:	2301      	movs	r3, #1
 800305c:	e24c      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	685b      	ldr	r3, [r3, #4]
 8003062:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003066:	d106      	bne.n	8003076 <HAL_RCC_OscConfig+0x76>
 8003068:	4b80      	ldr	r3, [pc, #512]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	4a7f      	ldr	r2, [pc, #508]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800306e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003072:	6013      	str	r3, [r2, #0]
 8003074:	e02e      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	2b00      	cmp	r3, #0
 800307c:	d10c      	bne.n	8003098 <HAL_RCC_OscConfig+0x98>
 800307e:	4b7b      	ldr	r3, [pc, #492]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	4a7a      	ldr	r2, [pc, #488]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003084:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003088:	6013      	str	r3, [r2, #0]
 800308a:	4b78      	ldr	r3, [pc, #480]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800308c:	681b      	ldr	r3, [r3, #0]
 800308e:	4a77      	ldr	r2, [pc, #476]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003090:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003094:	6013      	str	r3, [r2, #0]
 8003096:	e01d      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	685b      	ldr	r3, [r3, #4]
 800309c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80030a0:	d10c      	bne.n	80030bc <HAL_RCC_OscConfig+0xbc>
 80030a2:	4b72      	ldr	r3, [pc, #456]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	4a71      	ldr	r2, [pc, #452]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030a8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80030ac:	6013      	str	r3, [r2, #0]
 80030ae:	4b6f      	ldr	r3, [pc, #444]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	4a6e      	ldr	r2, [pc, #440]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030b4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80030b8:	6013      	str	r3, [r2, #0]
 80030ba:	e00b      	b.n	80030d4 <HAL_RCC_OscConfig+0xd4>
 80030bc:	4b6b      	ldr	r3, [pc, #428]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030be:	681b      	ldr	r3, [r3, #0]
 80030c0:	4a6a      	ldr	r2, [pc, #424]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030c2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80030c6:	6013      	str	r3, [r2, #0]
 80030c8:	4b68      	ldr	r3, [pc, #416]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ca:	681b      	ldr	r3, [r3, #0]
 80030cc:	4a67      	ldr	r2, [pc, #412]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030ce:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80030d2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80030d4:	687b      	ldr	r3, [r7, #4]
 80030d6:	685b      	ldr	r3, [r3, #4]
 80030d8:	2b00      	cmp	r3, #0
 80030da:	d013      	beq.n	8003104 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030dc:	f7ff fcc4 	bl	8002a68 <HAL_GetTick>
 80030e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030e2:	e008      	b.n	80030f6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80030e4:	f7ff fcc0 	bl	8002a68 <HAL_GetTick>
 80030e8:	4602      	mov	r2, r0
 80030ea:	693b      	ldr	r3, [r7, #16]
 80030ec:	1ad3      	subs	r3, r2, r3
 80030ee:	2b64      	cmp	r3, #100	@ 0x64
 80030f0:	d901      	bls.n	80030f6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80030f2:	2303      	movs	r3, #3
 80030f4:	e200      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80030f6:	4b5d      	ldr	r3, [pc, #372]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80030f8:	681b      	ldr	r3, [r3, #0]
 80030fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d0f0      	beq.n	80030e4 <HAL_RCC_OscConfig+0xe4>
 8003102:	e014      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003104:	f7ff fcb0 	bl	8002a68 <HAL_GetTick>
 8003108:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800310a:	e008      	b.n	800311e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800310c:	f7ff fcac 	bl	8002a68 <HAL_GetTick>
 8003110:	4602      	mov	r2, r0
 8003112:	693b      	ldr	r3, [r7, #16]
 8003114:	1ad3      	subs	r3, r2, r3
 8003116:	2b64      	cmp	r3, #100	@ 0x64
 8003118:	d901      	bls.n	800311e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800311a:	2303      	movs	r3, #3
 800311c:	e1ec      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800311e:	4b53      	ldr	r3, [pc, #332]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003126:	2b00      	cmp	r3, #0
 8003128:	d1f0      	bne.n	800310c <HAL_RCC_OscConfig+0x10c>
 800312a:	e000      	b.n	800312e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800312c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800312e:	687b      	ldr	r3, [r7, #4]
 8003130:	681b      	ldr	r3, [r3, #0]
 8003132:	f003 0302 	and.w	r3, r3, #2
 8003136:	2b00      	cmp	r3, #0
 8003138:	d063      	beq.n	8003202 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800313a:	4b4c      	ldr	r3, [pc, #304]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 800313c:	685b      	ldr	r3, [r3, #4]
 800313e:	f003 030c 	and.w	r3, r3, #12
 8003142:	2b00      	cmp	r3, #0
 8003144:	d00b      	beq.n	800315e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003146:	4b49      	ldr	r3, [pc, #292]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003148:	685b      	ldr	r3, [r3, #4]
 800314a:	f003 030c 	and.w	r3, r3, #12
 800314e:	2b08      	cmp	r3, #8
 8003150:	d11c      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
 8003152:	4b46      	ldr	r3, [pc, #280]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003154:	685b      	ldr	r3, [r3, #4]
 8003156:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d116      	bne.n	800318c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800315e:	4b43      	ldr	r3, [pc, #268]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f003 0302 	and.w	r3, r3, #2
 8003166:	2b00      	cmp	r3, #0
 8003168:	d005      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	691b      	ldr	r3, [r3, #16]
 800316e:	2b01      	cmp	r3, #1
 8003170:	d001      	beq.n	8003176 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003172:	2301      	movs	r3, #1
 8003174:	e1c0      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003176:	4b3d      	ldr	r3, [pc, #244]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800317e:	687b      	ldr	r3, [r7, #4]
 8003180:	695b      	ldr	r3, [r3, #20]
 8003182:	00db      	lsls	r3, r3, #3
 8003184:	4939      	ldr	r1, [pc, #228]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003186:	4313      	orrs	r3, r2
 8003188:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800318a:	e03a      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800318c:	687b      	ldr	r3, [r7, #4]
 800318e:	691b      	ldr	r3, [r3, #16]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d020      	beq.n	80031d6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003194:	4b36      	ldr	r3, [pc, #216]	@ (8003270 <HAL_RCC_OscConfig+0x270>)
 8003196:	2201      	movs	r2, #1
 8003198:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800319a:	f7ff fc65 	bl	8002a68 <HAL_GetTick>
 800319e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031a0:	e008      	b.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031a2:	f7ff fc61 	bl	8002a68 <HAL_GetTick>
 80031a6:	4602      	mov	r2, r0
 80031a8:	693b      	ldr	r3, [r7, #16]
 80031aa:	1ad3      	subs	r3, r2, r3
 80031ac:	2b02      	cmp	r3, #2
 80031ae:	d901      	bls.n	80031b4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80031b0:	2303      	movs	r3, #3
 80031b2:	e1a1      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031b4:	4b2d      	ldr	r3, [pc, #180]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	f003 0302 	and.w	r3, r3, #2
 80031bc:	2b00      	cmp	r3, #0
 80031be:	d0f0      	beq.n	80031a2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031c0:	4b2a      	ldr	r3, [pc, #168]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	695b      	ldr	r3, [r3, #20]
 80031cc:	00db      	lsls	r3, r3, #3
 80031ce:	4927      	ldr	r1, [pc, #156]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031d0:	4313      	orrs	r3, r2
 80031d2:	600b      	str	r3, [r1, #0]
 80031d4:	e015      	b.n	8003202 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80031d6:	4b26      	ldr	r3, [pc, #152]	@ (8003270 <HAL_RCC_OscConfig+0x270>)
 80031d8:	2200      	movs	r2, #0
 80031da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80031dc:	f7ff fc44 	bl	8002a68 <HAL_GetTick>
 80031e0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031e2:	e008      	b.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80031e4:	f7ff fc40 	bl	8002a68 <HAL_GetTick>
 80031e8:	4602      	mov	r2, r0
 80031ea:	693b      	ldr	r3, [r7, #16]
 80031ec:	1ad3      	subs	r3, r2, r3
 80031ee:	2b02      	cmp	r3, #2
 80031f0:	d901      	bls.n	80031f6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80031f2:	2303      	movs	r3, #3
 80031f4:	e180      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80031f6:	4b1d      	ldr	r3, [pc, #116]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 80031f8:	681b      	ldr	r3, [r3, #0]
 80031fa:	f003 0302 	and.w	r3, r3, #2
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d1f0      	bne.n	80031e4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003202:	687b      	ldr	r3, [r7, #4]
 8003204:	681b      	ldr	r3, [r3, #0]
 8003206:	f003 0308 	and.w	r3, r3, #8
 800320a:	2b00      	cmp	r3, #0
 800320c:	d03a      	beq.n	8003284 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	699b      	ldr	r3, [r3, #24]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d019      	beq.n	800324a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003216:	4b17      	ldr	r3, [pc, #92]	@ (8003274 <HAL_RCC_OscConfig+0x274>)
 8003218:	2201      	movs	r2, #1
 800321a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321c:	f7ff fc24 	bl	8002a68 <HAL_GetTick>
 8003220:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003222:	e008      	b.n	8003236 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003224:	f7ff fc20 	bl	8002a68 <HAL_GetTick>
 8003228:	4602      	mov	r2, r0
 800322a:	693b      	ldr	r3, [r7, #16]
 800322c:	1ad3      	subs	r3, r2, r3
 800322e:	2b02      	cmp	r3, #2
 8003230:	d901      	bls.n	8003236 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003232:	2303      	movs	r3, #3
 8003234:	e160      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003236:	4b0d      	ldr	r3, [pc, #52]	@ (800326c <HAL_RCC_OscConfig+0x26c>)
 8003238:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800323a:	f003 0302 	and.w	r3, r3, #2
 800323e:	2b00      	cmp	r3, #0
 8003240:	d0f0      	beq.n	8003224 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003242:	2001      	movs	r0, #1
 8003244:	f000 fa9c 	bl	8003780 <RCC_Delay>
 8003248:	e01c      	b.n	8003284 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800324a:	4b0a      	ldr	r3, [pc, #40]	@ (8003274 <HAL_RCC_OscConfig+0x274>)
 800324c:	2200      	movs	r2, #0
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003250:	f7ff fc0a 	bl	8002a68 <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003256:	e00f      	b.n	8003278 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff fc06 	bl	8002a68 <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d908      	bls.n	8003278 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e146      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
 800326a:	bf00      	nop
 800326c:	40021000 	.word	0x40021000
 8003270:	42420000 	.word	0x42420000
 8003274:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003278:	4b92      	ldr	r3, [pc, #584]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800327a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800327c:	f003 0302 	and.w	r3, r3, #2
 8003280:	2b00      	cmp	r3, #0
 8003282:	d1e9      	bne.n	8003258 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	f003 0304 	and.w	r3, r3, #4
 800328c:	2b00      	cmp	r3, #0
 800328e:	f000 80a6 	beq.w	80033de <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003292:	2300      	movs	r3, #0
 8003294:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003296:	4b8b      	ldr	r3, [pc, #556]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003298:	69db      	ldr	r3, [r3, #28]
 800329a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800329e:	2b00      	cmp	r3, #0
 80032a0:	d10d      	bne.n	80032be <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032a2:	4b88      	ldr	r3, [pc, #544]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80032a4:	69db      	ldr	r3, [r3, #28]
 80032a6:	4a87      	ldr	r2, [pc, #540]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80032a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80032ac:	61d3      	str	r3, [r2, #28]
 80032ae:	4b85      	ldr	r3, [pc, #532]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80032b6:	60bb      	str	r3, [r7, #8]
 80032b8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032ba:	2301      	movs	r3, #1
 80032bc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032be:	4b82      	ldr	r3, [pc, #520]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d118      	bne.n	80032fc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ca:	4b7f      	ldr	r3, [pc, #508]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032cc:	681b      	ldr	r3, [r3, #0]
 80032ce:	4a7e      	ldr	r2, [pc, #504]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032d0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80032d4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032d6:	f7ff fbc7 	bl	8002a68 <HAL_GetTick>
 80032da:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032dc:	e008      	b.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80032de:	f7ff fbc3 	bl	8002a68 <HAL_GetTick>
 80032e2:	4602      	mov	r2, r0
 80032e4:	693b      	ldr	r3, [r7, #16]
 80032e6:	1ad3      	subs	r3, r2, r3
 80032e8:	2b64      	cmp	r3, #100	@ 0x64
 80032ea:	d901      	bls.n	80032f0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80032ec:	2303      	movs	r3, #3
 80032ee:	e103      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032f0:	4b75      	ldr	r3, [pc, #468]	@ (80034c8 <HAL_RCC_OscConfig+0x4c8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d0f0      	beq.n	80032de <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	68db      	ldr	r3, [r3, #12]
 8003300:	2b01      	cmp	r3, #1
 8003302:	d106      	bne.n	8003312 <HAL_RCC_OscConfig+0x312>
 8003304:	4b6f      	ldr	r3, [pc, #444]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003306:	6a1b      	ldr	r3, [r3, #32]
 8003308:	4a6e      	ldr	r2, [pc, #440]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800330a:	f043 0301 	orr.w	r3, r3, #1
 800330e:	6213      	str	r3, [r2, #32]
 8003310:	e02d      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	68db      	ldr	r3, [r3, #12]
 8003316:	2b00      	cmp	r3, #0
 8003318:	d10c      	bne.n	8003334 <HAL_RCC_OscConfig+0x334>
 800331a:	4b6a      	ldr	r3, [pc, #424]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800331c:	6a1b      	ldr	r3, [r3, #32]
 800331e:	4a69      	ldr	r2, [pc, #420]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	f023 0301 	bic.w	r3, r3, #1
 8003324:	6213      	str	r3, [r2, #32]
 8003326:	4b67      	ldr	r3, [pc, #412]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003328:	6a1b      	ldr	r3, [r3, #32]
 800332a:	4a66      	ldr	r2, [pc, #408]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800332c:	f023 0304 	bic.w	r3, r3, #4
 8003330:	6213      	str	r3, [r2, #32]
 8003332:	e01c      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003334:	687b      	ldr	r3, [r7, #4]
 8003336:	68db      	ldr	r3, [r3, #12]
 8003338:	2b05      	cmp	r3, #5
 800333a:	d10c      	bne.n	8003356 <HAL_RCC_OscConfig+0x356>
 800333c:	4b61      	ldr	r3, [pc, #388]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800333e:	6a1b      	ldr	r3, [r3, #32]
 8003340:	4a60      	ldr	r2, [pc, #384]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003342:	f043 0304 	orr.w	r3, r3, #4
 8003346:	6213      	str	r3, [r2, #32]
 8003348:	4b5e      	ldr	r3, [pc, #376]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800334a:	6a1b      	ldr	r3, [r3, #32]
 800334c:	4a5d      	ldr	r2, [pc, #372]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800334e:	f043 0301 	orr.w	r3, r3, #1
 8003352:	6213      	str	r3, [r2, #32]
 8003354:	e00b      	b.n	800336e <HAL_RCC_OscConfig+0x36e>
 8003356:	4b5b      	ldr	r3, [pc, #364]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003358:	6a1b      	ldr	r3, [r3, #32]
 800335a:	4a5a      	ldr	r2, [pc, #360]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800335c:	f023 0301 	bic.w	r3, r3, #1
 8003360:	6213      	str	r3, [r2, #32]
 8003362:	4b58      	ldr	r3, [pc, #352]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003364:	6a1b      	ldr	r3, [r3, #32]
 8003366:	4a57      	ldr	r2, [pc, #348]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003368:	f023 0304 	bic.w	r3, r3, #4
 800336c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800336e:	687b      	ldr	r3, [r7, #4]
 8003370:	68db      	ldr	r3, [r3, #12]
 8003372:	2b00      	cmp	r3, #0
 8003374:	d015      	beq.n	80033a2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003376:	f7ff fb77 	bl	8002a68 <HAL_GetTick>
 800337a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800337c:	e00a      	b.n	8003394 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800337e:	f7ff fb73 	bl	8002a68 <HAL_GetTick>
 8003382:	4602      	mov	r2, r0
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	1ad3      	subs	r3, r2, r3
 8003388:	f241 3288 	movw	r2, #5000	@ 0x1388
 800338c:	4293      	cmp	r3, r2
 800338e:	d901      	bls.n	8003394 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003390:	2303      	movs	r3, #3
 8003392:	e0b1      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003394:	4b4b      	ldr	r3, [pc, #300]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003396:	6a1b      	ldr	r3, [r3, #32]
 8003398:	f003 0302 	and.w	r3, r3, #2
 800339c:	2b00      	cmp	r3, #0
 800339e:	d0ee      	beq.n	800337e <HAL_RCC_OscConfig+0x37e>
 80033a0:	e014      	b.n	80033cc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033a2:	f7ff fb61 	bl	8002a68 <HAL_GetTick>
 80033a6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033a8:	e00a      	b.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80033aa:	f7ff fb5d 	bl	8002a68 <HAL_GetTick>
 80033ae:	4602      	mov	r2, r0
 80033b0:	693b      	ldr	r3, [r7, #16]
 80033b2:	1ad3      	subs	r3, r2, r3
 80033b4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80033b8:	4293      	cmp	r3, r2
 80033ba:	d901      	bls.n	80033c0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80033bc:	2303      	movs	r3, #3
 80033be:	e09b      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033c0:	4b40      	ldr	r3, [pc, #256]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033c2:	6a1b      	ldr	r3, [r3, #32]
 80033c4:	f003 0302 	and.w	r3, r3, #2
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	d1ee      	bne.n	80033aa <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80033cc:	7dfb      	ldrb	r3, [r7, #23]
 80033ce:	2b01      	cmp	r3, #1
 80033d0:	d105      	bne.n	80033de <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033d2:	4b3c      	ldr	r3, [pc, #240]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033d4:	69db      	ldr	r3, [r3, #28]
 80033d6:	4a3b      	ldr	r2, [pc, #236]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033d8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80033dc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	69db      	ldr	r3, [r3, #28]
 80033e2:	2b00      	cmp	r3, #0
 80033e4:	f000 8087 	beq.w	80034f6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80033e8:	4b36      	ldr	r3, [pc, #216]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80033ea:	685b      	ldr	r3, [r3, #4]
 80033ec:	f003 030c 	and.w	r3, r3, #12
 80033f0:	2b08      	cmp	r3, #8
 80033f2:	d061      	beq.n	80034b8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	69db      	ldr	r3, [r3, #28]
 80033f8:	2b02      	cmp	r3, #2
 80033fa:	d146      	bne.n	800348a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80033fc:	4b33      	ldr	r3, [pc, #204]	@ (80034cc <HAL_RCC_OscConfig+0x4cc>)
 80033fe:	2200      	movs	r2, #0
 8003400:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003402:	f7ff fb31 	bl	8002a68 <HAL_GetTick>
 8003406:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003408:	e008      	b.n	800341c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800340a:	f7ff fb2d 	bl	8002a68 <HAL_GetTick>
 800340e:	4602      	mov	r2, r0
 8003410:	693b      	ldr	r3, [r7, #16]
 8003412:	1ad3      	subs	r3, r2, r3
 8003414:	2b02      	cmp	r3, #2
 8003416:	d901      	bls.n	800341c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003418:	2303      	movs	r3, #3
 800341a:	e06d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800341c:	4b29      	ldr	r3, [pc, #164]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003424:	2b00      	cmp	r3, #0
 8003426:	d1f0      	bne.n	800340a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	6a1b      	ldr	r3, [r3, #32]
 800342c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003430:	d108      	bne.n	8003444 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003432:	4b24      	ldr	r3, [pc, #144]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003434:	685b      	ldr	r3, [r3, #4]
 8003436:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	4921      	ldr	r1, [pc, #132]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003440:	4313      	orrs	r3, r2
 8003442:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003444:	4b1f      	ldr	r3, [pc, #124]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003446:	685b      	ldr	r3, [r3, #4]
 8003448:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6a19      	ldr	r1, [r3, #32]
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	430b      	orrs	r3, r1
 8003456:	491b      	ldr	r1, [pc, #108]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 8003458:	4313      	orrs	r3, r2
 800345a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800345c:	4b1b      	ldr	r3, [pc, #108]	@ (80034cc <HAL_RCC_OscConfig+0x4cc>)
 800345e:	2201      	movs	r2, #1
 8003460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003462:	f7ff fb01 	bl	8002a68 <HAL_GetTick>
 8003466:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003468:	e008      	b.n	800347c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800346a:	f7ff fafd 	bl	8002a68 <HAL_GetTick>
 800346e:	4602      	mov	r2, r0
 8003470:	693b      	ldr	r3, [r7, #16]
 8003472:	1ad3      	subs	r3, r2, r3
 8003474:	2b02      	cmp	r3, #2
 8003476:	d901      	bls.n	800347c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003478:	2303      	movs	r3, #3
 800347a:	e03d      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800347c:	4b11      	ldr	r3, [pc, #68]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 800347e:	681b      	ldr	r3, [r3, #0]
 8003480:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003484:	2b00      	cmp	r3, #0
 8003486:	d0f0      	beq.n	800346a <HAL_RCC_OscConfig+0x46a>
 8003488:	e035      	b.n	80034f6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800348a:	4b10      	ldr	r3, [pc, #64]	@ (80034cc <HAL_RCC_OscConfig+0x4cc>)
 800348c:	2200      	movs	r2, #0
 800348e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003490:	f7ff faea 	bl	8002a68 <HAL_GetTick>
 8003494:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003496:	e008      	b.n	80034aa <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003498:	f7ff fae6 	bl	8002a68 <HAL_GetTick>
 800349c:	4602      	mov	r2, r0
 800349e:	693b      	ldr	r3, [r7, #16]
 80034a0:	1ad3      	subs	r3, r2, r3
 80034a2:	2b02      	cmp	r3, #2
 80034a4:	d901      	bls.n	80034aa <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80034a6:	2303      	movs	r3, #3
 80034a8:	e026      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80034aa:	4b06      	ldr	r3, [pc, #24]	@ (80034c4 <HAL_RCC_OscConfig+0x4c4>)
 80034ac:	681b      	ldr	r3, [r3, #0]
 80034ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d1f0      	bne.n	8003498 <HAL_RCC_OscConfig+0x498>
 80034b6:	e01e      	b.n	80034f6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	69db      	ldr	r3, [r3, #28]
 80034bc:	2b01      	cmp	r3, #1
 80034be:	d107      	bne.n	80034d0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80034c0:	2301      	movs	r3, #1
 80034c2:	e019      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
 80034c4:	40021000 	.word	0x40021000
 80034c8:	40007000 	.word	0x40007000
 80034cc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80034d0:	4b0b      	ldr	r3, [pc, #44]	@ (8003500 <HAL_RCC_OscConfig+0x500>)
 80034d2:	685b      	ldr	r3, [r3, #4]
 80034d4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	6a1b      	ldr	r3, [r3, #32]
 80034e0:	429a      	cmp	r2, r3
 80034e2:	d106      	bne.n	80034f2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80034e4:	68fb      	ldr	r3, [r7, #12]
 80034e6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ee:	429a      	cmp	r2, r3
 80034f0:	d001      	beq.n	80034f6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e000      	b.n	80034f8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80034f6:	2300      	movs	r3, #0
}
 80034f8:	4618      	mov	r0, r3
 80034fa:	3718      	adds	r7, #24
 80034fc:	46bd      	mov	sp, r7
 80034fe:	bd80      	pop	{r7, pc}
 8003500:	40021000 	.word	0x40021000

08003504 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003504:	b580      	push	{r7, lr}
 8003506:	b084      	sub	sp, #16
 8003508:	af00      	add	r7, sp, #0
 800350a:	6078      	str	r0, [r7, #4]
 800350c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	2b00      	cmp	r3, #0
 8003512:	d101      	bne.n	8003518 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003514:	2301      	movs	r3, #1
 8003516:	e0d0      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003518:	4b6a      	ldr	r3, [pc, #424]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	f003 0307 	and.w	r3, r3, #7
 8003520:	683a      	ldr	r2, [r7, #0]
 8003522:	429a      	cmp	r2, r3
 8003524:	d910      	bls.n	8003548 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003526:	4b67      	ldr	r3, [pc, #412]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003528:	681b      	ldr	r3, [r3, #0]
 800352a:	f023 0207 	bic.w	r2, r3, #7
 800352e:	4965      	ldr	r1, [pc, #404]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	4313      	orrs	r3, r2
 8003534:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003536:	4b63      	ldr	r3, [pc, #396]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f003 0307 	and.w	r3, r3, #7
 800353e:	683a      	ldr	r2, [r7, #0]
 8003540:	429a      	cmp	r2, r3
 8003542:	d001      	beq.n	8003548 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003544:	2301      	movs	r3, #1
 8003546:	e0b8      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d020      	beq.n	8003596 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	d005      	beq.n	800356c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003560:	4b59      	ldr	r3, [pc, #356]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003562:	685b      	ldr	r3, [r3, #4]
 8003564:	4a58      	ldr	r2, [pc, #352]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003566:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800356a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	f003 0308 	and.w	r3, r3, #8
 8003574:	2b00      	cmp	r3, #0
 8003576:	d005      	beq.n	8003584 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003578:	4b53      	ldr	r3, [pc, #332]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	4a52      	ldr	r2, [pc, #328]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800357e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003582:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003584:	4b50      	ldr	r3, [pc, #320]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	494d      	ldr	r1, [pc, #308]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003592:	4313      	orrs	r3, r2
 8003594:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003596:	687b      	ldr	r3, [r7, #4]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	f003 0301 	and.w	r3, r3, #1
 800359e:	2b00      	cmp	r3, #0
 80035a0:	d040      	beq.n	8003624 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035a2:	687b      	ldr	r3, [r7, #4]
 80035a4:	685b      	ldr	r3, [r3, #4]
 80035a6:	2b01      	cmp	r3, #1
 80035a8:	d107      	bne.n	80035ba <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035aa:	4b47      	ldr	r3, [pc, #284]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035ac:	681b      	ldr	r3, [r3, #0]
 80035ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80035b2:	2b00      	cmp	r3, #0
 80035b4:	d115      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e07f      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	685b      	ldr	r3, [r3, #4]
 80035be:	2b02      	cmp	r3, #2
 80035c0:	d107      	bne.n	80035d2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035c2:	4b41      	ldr	r3, [pc, #260]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d109      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035ce:	2301      	movs	r3, #1
 80035d0:	e073      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80035d2:	4b3d      	ldr	r3, [pc, #244]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035d4:	681b      	ldr	r3, [r3, #0]
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	2b00      	cmp	r3, #0
 80035dc:	d101      	bne.n	80035e2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035de:	2301      	movs	r3, #1
 80035e0:	e06b      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80035e2:	4b39      	ldr	r3, [pc, #228]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035e4:	685b      	ldr	r3, [r3, #4]
 80035e6:	f023 0203 	bic.w	r2, r3, #3
 80035ea:	687b      	ldr	r3, [r7, #4]
 80035ec:	685b      	ldr	r3, [r3, #4]
 80035ee:	4936      	ldr	r1, [pc, #216]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 80035f0:	4313      	orrs	r3, r2
 80035f2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80035f4:	f7ff fa38 	bl	8002a68 <HAL_GetTick>
 80035f8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80035fa:	e00a      	b.n	8003612 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80035fc:	f7ff fa34 	bl	8002a68 <HAL_GetTick>
 8003600:	4602      	mov	r2, r0
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	1ad3      	subs	r3, r2, r3
 8003606:	f241 3288 	movw	r2, #5000	@ 0x1388
 800360a:	4293      	cmp	r3, r2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e053      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003612:	4b2d      	ldr	r3, [pc, #180]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003614:	685b      	ldr	r3, [r3, #4]
 8003616:	f003 020c 	and.w	r2, r3, #12
 800361a:	687b      	ldr	r3, [r7, #4]
 800361c:	685b      	ldr	r3, [r3, #4]
 800361e:	009b      	lsls	r3, r3, #2
 8003620:	429a      	cmp	r2, r3
 8003622:	d1eb      	bne.n	80035fc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003624:	4b27      	ldr	r3, [pc, #156]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f003 0307 	and.w	r3, r3, #7
 800362c:	683a      	ldr	r2, [r7, #0]
 800362e:	429a      	cmp	r2, r3
 8003630:	d210      	bcs.n	8003654 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003632:	4b24      	ldr	r3, [pc, #144]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f023 0207 	bic.w	r2, r3, #7
 800363a:	4922      	ldr	r1, [pc, #136]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 800363c:	683b      	ldr	r3, [r7, #0]
 800363e:	4313      	orrs	r3, r2
 8003640:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003642:	4b20      	ldr	r3, [pc, #128]	@ (80036c4 <HAL_RCC_ClockConfig+0x1c0>)
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0307 	and.w	r3, r3, #7
 800364a:	683a      	ldr	r2, [r7, #0]
 800364c:	429a      	cmp	r2, r3
 800364e:	d001      	beq.n	8003654 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003650:	2301      	movs	r3, #1
 8003652:	e032      	b.n	80036ba <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	f003 0304 	and.w	r3, r3, #4
 800365c:	2b00      	cmp	r3, #0
 800365e:	d008      	beq.n	8003672 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003660:	4b19      	ldr	r3, [pc, #100]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003662:	685b      	ldr	r3, [r3, #4]
 8003664:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	68db      	ldr	r3, [r3, #12]
 800366c:	4916      	ldr	r1, [pc, #88]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800366e:	4313      	orrs	r3, r2
 8003670:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	f003 0308 	and.w	r3, r3, #8
 800367a:	2b00      	cmp	r3, #0
 800367c:	d009      	beq.n	8003692 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800367e:	4b12      	ldr	r3, [pc, #72]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 8003680:	685b      	ldr	r3, [r3, #4]
 8003682:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	691b      	ldr	r3, [r3, #16]
 800368a:	00db      	lsls	r3, r3, #3
 800368c:	490e      	ldr	r1, [pc, #56]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800368e:	4313      	orrs	r3, r2
 8003690:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003692:	f000 f821 	bl	80036d8 <HAL_RCC_GetSysClockFreq>
 8003696:	4602      	mov	r2, r0
 8003698:	4b0b      	ldr	r3, [pc, #44]	@ (80036c8 <HAL_RCC_ClockConfig+0x1c4>)
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	091b      	lsrs	r3, r3, #4
 800369e:	f003 030f 	and.w	r3, r3, #15
 80036a2:	490a      	ldr	r1, [pc, #40]	@ (80036cc <HAL_RCC_ClockConfig+0x1c8>)
 80036a4:	5ccb      	ldrb	r3, [r1, r3]
 80036a6:	fa22 f303 	lsr.w	r3, r2, r3
 80036aa:	4a09      	ldr	r2, [pc, #36]	@ (80036d0 <HAL_RCC_ClockConfig+0x1cc>)
 80036ac:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80036ae:	4b09      	ldr	r3, [pc, #36]	@ (80036d4 <HAL_RCC_ClockConfig+0x1d0>)
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	4618      	mov	r0, r3
 80036b4:	f7ff f996 	bl	80029e4 <HAL_InitTick>

  return HAL_OK;
 80036b8:	2300      	movs	r3, #0
}
 80036ba:	4618      	mov	r0, r3
 80036bc:	3710      	adds	r7, #16
 80036be:	46bd      	mov	sp, r7
 80036c0:	bd80      	pop	{r7, pc}
 80036c2:	bf00      	nop
 80036c4:	40022000 	.word	0x40022000
 80036c8:	40021000 	.word	0x40021000
 80036cc:	08005848 	.word	0x08005848
 80036d0:	200000b0 	.word	0x200000b0
 80036d4:	200000b4 	.word	0x200000b4

080036d8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80036d8:	b480      	push	{r7}
 80036da:	b087      	sub	sp, #28
 80036dc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80036de:	2300      	movs	r3, #0
 80036e0:	60fb      	str	r3, [r7, #12]
 80036e2:	2300      	movs	r3, #0
 80036e4:	60bb      	str	r3, [r7, #8]
 80036e6:	2300      	movs	r3, #0
 80036e8:	617b      	str	r3, [r7, #20]
 80036ea:	2300      	movs	r3, #0
 80036ec:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80036ee:	2300      	movs	r3, #0
 80036f0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80036f2:	4b1e      	ldr	r3, [pc, #120]	@ (800376c <HAL_RCC_GetSysClockFreq+0x94>)
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80036f8:	68fb      	ldr	r3, [r7, #12]
 80036fa:	f003 030c 	and.w	r3, r3, #12
 80036fe:	2b04      	cmp	r3, #4
 8003700:	d002      	beq.n	8003708 <HAL_RCC_GetSysClockFreq+0x30>
 8003702:	2b08      	cmp	r3, #8
 8003704:	d003      	beq.n	800370e <HAL_RCC_GetSysClockFreq+0x36>
 8003706:	e027      	b.n	8003758 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003708:	4b19      	ldr	r3, [pc, #100]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800370a:	613b      	str	r3, [r7, #16]
      break;
 800370c:	e027      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800370e:	68fb      	ldr	r3, [r7, #12]
 8003710:	0c9b      	lsrs	r3, r3, #18
 8003712:	f003 030f 	and.w	r3, r3, #15
 8003716:	4a17      	ldr	r2, [pc, #92]	@ (8003774 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003718:	5cd3      	ldrb	r3, [r2, r3]
 800371a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800371c:	68fb      	ldr	r3, [r7, #12]
 800371e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003722:	2b00      	cmp	r3, #0
 8003724:	d010      	beq.n	8003748 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003726:	4b11      	ldr	r3, [pc, #68]	@ (800376c <HAL_RCC_GetSysClockFreq+0x94>)
 8003728:	685b      	ldr	r3, [r3, #4]
 800372a:	0c5b      	lsrs	r3, r3, #17
 800372c:	f003 0301 	and.w	r3, r3, #1
 8003730:	4a11      	ldr	r2, [pc, #68]	@ (8003778 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003732:	5cd3      	ldrb	r3, [r2, r3]
 8003734:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	4a0d      	ldr	r2, [pc, #52]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800373a:	fb03 f202 	mul.w	r2, r3, r2
 800373e:	68bb      	ldr	r3, [r7, #8]
 8003740:	fbb2 f3f3 	udiv	r3, r2, r3
 8003744:	617b      	str	r3, [r7, #20]
 8003746:	e004      	b.n	8003752 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003748:	687b      	ldr	r3, [r7, #4]
 800374a:	4a0c      	ldr	r2, [pc, #48]	@ (800377c <HAL_RCC_GetSysClockFreq+0xa4>)
 800374c:	fb02 f303 	mul.w	r3, r2, r3
 8003750:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003752:	697b      	ldr	r3, [r7, #20]
 8003754:	613b      	str	r3, [r7, #16]
      break;
 8003756:	e002      	b.n	800375e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003758:	4b05      	ldr	r3, [pc, #20]	@ (8003770 <HAL_RCC_GetSysClockFreq+0x98>)
 800375a:	613b      	str	r3, [r7, #16]
      break;
 800375c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800375e:	693b      	ldr	r3, [r7, #16]
}
 8003760:	4618      	mov	r0, r3
 8003762:	371c      	adds	r7, #28
 8003764:	46bd      	mov	sp, r7
 8003766:	bc80      	pop	{r7}
 8003768:	4770      	bx	lr
 800376a:	bf00      	nop
 800376c:	40021000 	.word	0x40021000
 8003770:	007a1200 	.word	0x007a1200
 8003774:	08005858 	.word	0x08005858
 8003778:	08005868 	.word	0x08005868
 800377c:	003d0900 	.word	0x003d0900

08003780 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003780:	b480      	push	{r7}
 8003782:	b085      	sub	sp, #20
 8003784:	af00      	add	r7, sp, #0
 8003786:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003788:	4b0a      	ldr	r3, [pc, #40]	@ (80037b4 <RCC_Delay+0x34>)
 800378a:	681b      	ldr	r3, [r3, #0]
 800378c:	4a0a      	ldr	r2, [pc, #40]	@ (80037b8 <RCC_Delay+0x38>)
 800378e:	fba2 2303 	umull	r2, r3, r2, r3
 8003792:	0a5b      	lsrs	r3, r3, #9
 8003794:	687a      	ldr	r2, [r7, #4]
 8003796:	fb02 f303 	mul.w	r3, r2, r3
 800379a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800379c:	bf00      	nop
  }
  while (Delay --);
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	1e5a      	subs	r2, r3, #1
 80037a2:	60fa      	str	r2, [r7, #12]
 80037a4:	2b00      	cmp	r3, #0
 80037a6:	d1f9      	bne.n	800379c <RCC_Delay+0x1c>
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3714      	adds	r7, #20
 80037ae:	46bd      	mov	sp, r7
 80037b0:	bc80      	pop	{r7}
 80037b2:	4770      	bx	lr
 80037b4:	200000b0 	.word	0x200000b0
 80037b8:	10624dd3 	.word	0x10624dd3

080037bc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80037bc:	b580      	push	{r7, lr}
 80037be:	b082      	sub	sp, #8
 80037c0:	af00      	add	r7, sp, #0
 80037c2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2b00      	cmp	r3, #0
 80037c8:	d101      	bne.n	80037ce <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80037ca:	2301      	movs	r3, #1
 80037cc:	e076      	b.n	80038bc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80037ce:	687b      	ldr	r3, [r7, #4]
 80037d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037d2:	2b00      	cmp	r3, #0
 80037d4:	d108      	bne.n	80037e8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80037d6:	687b      	ldr	r3, [r7, #4]
 80037d8:	685b      	ldr	r3, [r3, #4]
 80037da:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80037de:	d009      	beq.n	80037f4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	2200      	movs	r2, #0
 80037e4:	61da      	str	r2, [r3, #28]
 80037e6:	e005      	b.n	80037f4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2200      	movs	r2, #0
 80037ec:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80037ee:	687b      	ldr	r3, [r7, #4]
 80037f0:	2200      	movs	r2, #0
 80037f2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2200      	movs	r2, #0
 80037f8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003800:	b2db      	uxtb	r3, r3
 8003802:	2b00      	cmp	r3, #0
 8003804:	d106      	bne.n	8003814 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003806:	687b      	ldr	r3, [r7, #4]
 8003808:	2200      	movs	r2, #0
 800380a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800380e:	6878      	ldr	r0, [r7, #4]
 8003810:	f7fe ff92 	bl	8002738 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2202      	movs	r2, #2
 8003818:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	681a      	ldr	r2, [r3, #0]
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800382a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	685b      	ldr	r3, [r3, #4]
 8003830:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	689b      	ldr	r3, [r3, #8]
 8003838:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800383c:	431a      	orrs	r2, r3
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	68db      	ldr	r3, [r3, #12]
 8003842:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003846:	431a      	orrs	r2, r3
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	691b      	ldr	r3, [r3, #16]
 800384c:	f003 0302 	and.w	r3, r3, #2
 8003850:	431a      	orrs	r2, r3
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	695b      	ldr	r3, [r3, #20]
 8003856:	f003 0301 	and.w	r3, r3, #1
 800385a:	431a      	orrs	r2, r3
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	699b      	ldr	r3, [r3, #24]
 8003860:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003864:	431a      	orrs	r2, r3
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	69db      	ldr	r3, [r3, #28]
 800386a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800386e:	431a      	orrs	r2, r3
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	6a1b      	ldr	r3, [r3, #32]
 8003874:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003878:	ea42 0103 	orr.w	r1, r2, r3
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003880:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	430a      	orrs	r2, r1
 800388a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800388c:	687b      	ldr	r3, [r7, #4]
 800388e:	699b      	ldr	r3, [r3, #24]
 8003890:	0c1a      	lsrs	r2, r3, #16
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f002 0204 	and.w	r2, r2, #4
 800389a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	69da      	ldr	r2, [r3, #28]
 80038a2:	687b      	ldr	r3, [r7, #4]
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038aa:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80038ac:	687b      	ldr	r3, [r7, #4]
 80038ae:	2200      	movs	r2, #0
 80038b0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	2201      	movs	r2, #1
 80038b6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80038ba:	2300      	movs	r3, #0
}
 80038bc:	4618      	mov	r0, r3
 80038be:	3708      	adds	r7, #8
 80038c0:	46bd      	mov	sp, r7
 80038c2:	bd80      	pop	{r7, pc}

080038c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80038c4:	b580      	push	{r7, lr}
 80038c6:	b082      	sub	sp, #8
 80038c8:	af00      	add	r7, sp, #0
 80038ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d101      	bne.n	80038d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80038d2:	2301      	movs	r3, #1
 80038d4:	e041      	b.n	800395a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038dc:	b2db      	uxtb	r3, r3
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d106      	bne.n	80038f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	2200      	movs	r2, #0
 80038e6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80038ea:	6878      	ldr	r0, [r7, #4]
 80038ec:	f7fe ff62 	bl	80027b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2202      	movs	r2, #2
 80038f4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	681a      	ldr	r2, [r3, #0]
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	3304      	adds	r3, #4
 8003900:	4619      	mov	r1, r3
 8003902:	4610      	mov	r0, r2
 8003904:	f000 fc38 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003940:	687b      	ldr	r3, [r7, #4]
 8003942:	2201      	movs	r2, #1
 8003944:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	2201      	movs	r2, #1
 800394c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	2201      	movs	r2, #1
 8003954:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003958:	2300      	movs	r3, #0
}
 800395a:	4618      	mov	r0, r3
 800395c:	3708      	adds	r7, #8
 800395e:	46bd      	mov	sp, r7
 8003960:	bd80      	pop	{r7, pc}
	...

08003964 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003964:	b480      	push	{r7}
 8003966:	b085      	sub	sp, #20
 8003968:	af00      	add	r7, sp, #0
 800396a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	d001      	beq.n	800397c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003978:	2301      	movs	r3, #1
 800397a:	e03a      	b.n	80039f2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800397c:	687b      	ldr	r3, [r7, #4]
 800397e:	2202      	movs	r2, #2
 8003980:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	681b      	ldr	r3, [r3, #0]
 8003988:	68da      	ldr	r2, [r3, #12]
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f042 0201 	orr.w	r2, r2, #1
 8003992:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003994:	687b      	ldr	r3, [r7, #4]
 8003996:	681b      	ldr	r3, [r3, #0]
 8003998:	4a18      	ldr	r2, [pc, #96]	@ (80039fc <HAL_TIM_Base_Start_IT+0x98>)
 800399a:	4293      	cmp	r3, r2
 800399c:	d00e      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x58>
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80039a6:	d009      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x58>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	4a14      	ldr	r2, [pc, #80]	@ (8003a00 <HAL_TIM_Base_Start_IT+0x9c>)
 80039ae:	4293      	cmp	r3, r2
 80039b0:	d004      	beq.n	80039bc <HAL_TIM_Base_Start_IT+0x58>
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	681b      	ldr	r3, [r3, #0]
 80039b6:	4a13      	ldr	r2, [pc, #76]	@ (8003a04 <HAL_TIM_Base_Start_IT+0xa0>)
 80039b8:	4293      	cmp	r3, r2
 80039ba:	d111      	bne.n	80039e0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	681b      	ldr	r3, [r3, #0]
 80039c0:	689b      	ldr	r3, [r3, #8]
 80039c2:	f003 0307 	and.w	r3, r3, #7
 80039c6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	2b06      	cmp	r3, #6
 80039cc:	d010      	beq.n	80039f0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f042 0201 	orr.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039de:	e007      	b.n	80039f0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80039e0:	687b      	ldr	r3, [r7, #4]
 80039e2:	681b      	ldr	r3, [r3, #0]
 80039e4:	681a      	ldr	r2, [r3, #0]
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	f042 0201 	orr.w	r2, r2, #1
 80039ee:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80039f0:	2300      	movs	r3, #0
}
 80039f2:	4618      	mov	r0, r3
 80039f4:	3714      	adds	r7, #20
 80039f6:	46bd      	mov	sp, r7
 80039f8:	bc80      	pop	{r7}
 80039fa:	4770      	bx	lr
 80039fc:	40012c00 	.word	0x40012c00
 8003a00:	40000400 	.word	0x40000400
 8003a04:	40000800 	.word	0x40000800

08003a08 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e041      	b.n	8003a9e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a20:	b2db      	uxtb	r3, r3
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d106      	bne.n	8003a34 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	2200      	movs	r2, #0
 8003a2a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a2e:	6878      	ldr	r0, [r7, #4]
 8003a30:	f000 f839 	bl	8003aa6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2202      	movs	r2, #2
 8003a38:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	681a      	ldr	r2, [r3, #0]
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	3304      	adds	r3, #4
 8003a44:	4619      	mov	r1, r3
 8003a46:	4610      	mov	r0, r2
 8003a48:	f000 fb96 	bl	8004178 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	2201      	movs	r2, #1
 8003a50:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	2201      	movs	r2, #1
 8003a58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	2201      	movs	r2, #1
 8003a60:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	2201      	movs	r2, #1
 8003a68:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2201      	movs	r2, #1
 8003a70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	2201      	movs	r2, #1
 8003a78:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	2201      	movs	r2, #1
 8003a80:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	2201      	movs	r2, #1
 8003a88:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2201      	movs	r2, #1
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003a9c:	2300      	movs	r3, #0
}
 8003a9e:	4618      	mov	r0, r3
 8003aa0:	3708      	adds	r7, #8
 8003aa2:	46bd      	mov	sp, r7
 8003aa4:	bd80      	pop	{r7, pc}

08003aa6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003aa6:	b480      	push	{r7}
 8003aa8:	b083      	sub	sp, #12
 8003aaa:	af00      	add	r7, sp, #0
 8003aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003aae:	bf00      	nop
 8003ab0:	370c      	adds	r7, #12
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b084      	sub	sp, #16
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	6078      	str	r0, [r7, #4]
 8003ac0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003ac2:	683b      	ldr	r3, [r7, #0]
 8003ac4:	2b00      	cmp	r3, #0
 8003ac6:	d109      	bne.n	8003adc <HAL_TIM_PWM_Start+0x24>
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003ace:	b2db      	uxtb	r3, r3
 8003ad0:	2b01      	cmp	r3, #1
 8003ad2:	bf14      	ite	ne
 8003ad4:	2301      	movne	r3, #1
 8003ad6:	2300      	moveq	r3, #0
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	e022      	b.n	8003b22 <HAL_TIM_PWM_Start+0x6a>
 8003adc:	683b      	ldr	r3, [r7, #0]
 8003ade:	2b04      	cmp	r3, #4
 8003ae0:	d109      	bne.n	8003af6 <HAL_TIM_PWM_Start+0x3e>
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003ae8:	b2db      	uxtb	r3, r3
 8003aea:	2b01      	cmp	r3, #1
 8003aec:	bf14      	ite	ne
 8003aee:	2301      	movne	r3, #1
 8003af0:	2300      	moveq	r3, #0
 8003af2:	b2db      	uxtb	r3, r3
 8003af4:	e015      	b.n	8003b22 <HAL_TIM_PWM_Start+0x6a>
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	2b08      	cmp	r3, #8
 8003afa:	d109      	bne.n	8003b10 <HAL_TIM_PWM_Start+0x58>
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003b02:	b2db      	uxtb	r3, r3
 8003b04:	2b01      	cmp	r3, #1
 8003b06:	bf14      	ite	ne
 8003b08:	2301      	movne	r3, #1
 8003b0a:	2300      	moveq	r3, #0
 8003b0c:	b2db      	uxtb	r3, r3
 8003b0e:	e008      	b.n	8003b22 <HAL_TIM_PWM_Start+0x6a>
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b01      	cmp	r3, #1
 8003b1a:	bf14      	ite	ne
 8003b1c:	2301      	movne	r3, #1
 8003b1e:	2300      	moveq	r3, #0
 8003b20:	b2db      	uxtb	r3, r3
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d001      	beq.n	8003b2a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003b26:	2301      	movs	r3, #1
 8003b28:	e05e      	b.n	8003be8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003b2a:	683b      	ldr	r3, [r7, #0]
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	d104      	bne.n	8003b3a <HAL_TIM_PWM_Start+0x82>
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	2202      	movs	r2, #2
 8003b34:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003b38:	e013      	b.n	8003b62 <HAL_TIM_PWM_Start+0xaa>
 8003b3a:	683b      	ldr	r3, [r7, #0]
 8003b3c:	2b04      	cmp	r3, #4
 8003b3e:	d104      	bne.n	8003b4a <HAL_TIM_PWM_Start+0x92>
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	2202      	movs	r2, #2
 8003b44:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003b48:	e00b      	b.n	8003b62 <HAL_TIM_PWM_Start+0xaa>
 8003b4a:	683b      	ldr	r3, [r7, #0]
 8003b4c:	2b08      	cmp	r3, #8
 8003b4e:	d104      	bne.n	8003b5a <HAL_TIM_PWM_Start+0xa2>
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	2202      	movs	r2, #2
 8003b54:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003b58:	e003      	b.n	8003b62 <HAL_TIM_PWM_Start+0xaa>
 8003b5a:	687b      	ldr	r3, [r7, #4]
 8003b5c:	2202      	movs	r2, #2
 8003b5e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	2201      	movs	r2, #1
 8003b68:	6839      	ldr	r1, [r7, #0]
 8003b6a:	4618      	mov	r0, r3
 8003b6c:	f000 fd84 	bl	8004678 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a1e      	ldr	r2, [pc, #120]	@ (8003bf0 <HAL_TIM_PWM_Start+0x138>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d107      	bne.n	8003b8a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003b7a:	687b      	ldr	r3, [r7, #4]
 8003b7c:	681b      	ldr	r3, [r3, #0]
 8003b7e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003b88:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b8a:	687b      	ldr	r3, [r7, #4]
 8003b8c:	681b      	ldr	r3, [r3, #0]
 8003b8e:	4a18      	ldr	r2, [pc, #96]	@ (8003bf0 <HAL_TIM_PWM_Start+0x138>)
 8003b90:	4293      	cmp	r3, r2
 8003b92:	d00e      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0xfa>
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	681b      	ldr	r3, [r3, #0]
 8003b98:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b9c:	d009      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0xfa>
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	4a14      	ldr	r2, [pc, #80]	@ (8003bf4 <HAL_TIM_PWM_Start+0x13c>)
 8003ba4:	4293      	cmp	r3, r2
 8003ba6:	d004      	beq.n	8003bb2 <HAL_TIM_PWM_Start+0xfa>
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	4a12      	ldr	r2, [pc, #72]	@ (8003bf8 <HAL_TIM_PWM_Start+0x140>)
 8003bae:	4293      	cmp	r3, r2
 8003bb0:	d111      	bne.n	8003bd6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	689b      	ldr	r3, [r3, #8]
 8003bb8:	f003 0307 	and.w	r3, r3, #7
 8003bbc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b06      	cmp	r3, #6
 8003bc2:	d010      	beq.n	8003be6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	681b      	ldr	r3, [r3, #0]
 8003bc8:	681a      	ldr	r2, [r3, #0]
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	f042 0201 	orr.w	r2, r2, #1
 8003bd2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bd4:	e007      	b.n	8003be6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bd6:	687b      	ldr	r3, [r7, #4]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	681a      	ldr	r2, [r3, #0]
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	f042 0201 	orr.w	r2, r2, #1
 8003be4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003be6:	2300      	movs	r3, #0
}
 8003be8:	4618      	mov	r0, r3
 8003bea:	3710      	adds	r7, #16
 8003bec:	46bd      	mov	sp, r7
 8003bee:	bd80      	pop	{r7, pc}
 8003bf0:	40012c00 	.word	0x40012c00
 8003bf4:	40000400 	.word	0x40000400
 8003bf8:	40000800 	.word	0x40000800

08003bfc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003bfc:	b580      	push	{r7, lr}
 8003bfe:	b082      	sub	sp, #8
 8003c00:	af00      	add	r7, sp, #0
 8003c02:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c04:	687b      	ldr	r3, [r7, #4]
 8003c06:	681b      	ldr	r3, [r3, #0]
 8003c08:	691b      	ldr	r3, [r3, #16]
 8003c0a:	f003 0302 	and.w	r3, r3, #2
 8003c0e:	2b02      	cmp	r3, #2
 8003c10:	d122      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c12:	687b      	ldr	r3, [r7, #4]
 8003c14:	681b      	ldr	r3, [r3, #0]
 8003c16:	68db      	ldr	r3, [r3, #12]
 8003c18:	f003 0302 	and.w	r3, r3, #2
 8003c1c:	2b02      	cmp	r3, #2
 8003c1e:	d11b      	bne.n	8003c58 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	f06f 0202 	mvn.w	r2, #2
 8003c28:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	2201      	movs	r2, #1
 8003c2e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	699b      	ldr	r3, [r3, #24]
 8003c36:	f003 0303 	and.w	r3, r3, #3
 8003c3a:	2b00      	cmp	r3, #0
 8003c3c:	d003      	beq.n	8003c46 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003c3e:	6878      	ldr	r0, [r7, #4]
 8003c40:	f000 fa7f 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003c44:	e005      	b.n	8003c52 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c46:	6878      	ldr	r0, [r7, #4]
 8003c48:	f000 fa72 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c4c:	6878      	ldr	r0, [r7, #4]
 8003c4e:	f000 fa81 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	2200      	movs	r2, #0
 8003c56:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	691b      	ldr	r3, [r3, #16]
 8003c5e:	f003 0304 	and.w	r3, r3, #4
 8003c62:	2b04      	cmp	r3, #4
 8003c64:	d122      	bne.n	8003cac <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	68db      	ldr	r3, [r3, #12]
 8003c6c:	f003 0304 	and.w	r3, r3, #4
 8003c70:	2b04      	cmp	r3, #4
 8003c72:	d11b      	bne.n	8003cac <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	681b      	ldr	r3, [r3, #0]
 8003c78:	f06f 0204 	mvn.w	r2, #4
 8003c7c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2202      	movs	r2, #2
 8003c82:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	699b      	ldr	r3, [r3, #24]
 8003c8a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c8e:	2b00      	cmp	r3, #0
 8003c90:	d003      	beq.n	8003c9a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c92:	6878      	ldr	r0, [r7, #4]
 8003c94:	f000 fa55 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003c98:	e005      	b.n	8003ca6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c9a:	6878      	ldr	r0, [r7, #4]
 8003c9c:	f000 fa48 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003ca0:	6878      	ldr	r0, [r7, #4]
 8003ca2:	f000 fa57 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2200      	movs	r2, #0
 8003caa:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	691b      	ldr	r3, [r3, #16]
 8003cb2:	f003 0308 	and.w	r3, r3, #8
 8003cb6:	2b08      	cmp	r3, #8
 8003cb8:	d122      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003cba:	687b      	ldr	r3, [r7, #4]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	68db      	ldr	r3, [r3, #12]
 8003cc0:	f003 0308 	and.w	r3, r3, #8
 8003cc4:	2b08      	cmp	r3, #8
 8003cc6:	d11b      	bne.n	8003d00 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	681b      	ldr	r3, [r3, #0]
 8003ccc:	f06f 0208 	mvn.w	r2, #8
 8003cd0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	2204      	movs	r2, #4
 8003cd6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	681b      	ldr	r3, [r3, #0]
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f003 0303 	and.w	r3, r3, #3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d003      	beq.n	8003cee <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ce6:	6878      	ldr	r0, [r7, #4]
 8003ce8:	f000 fa2b 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003cec:	e005      	b.n	8003cfa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cee:	6878      	ldr	r0, [r7, #4]
 8003cf0:	f000 fa1e 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cf4:	6878      	ldr	r0, [r7, #4]
 8003cf6:	f000 fa2d 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	691b      	ldr	r3, [r3, #16]
 8003d06:	f003 0310 	and.w	r3, r3, #16
 8003d0a:	2b10      	cmp	r3, #16
 8003d0c:	d122      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d0e:	687b      	ldr	r3, [r7, #4]
 8003d10:	681b      	ldr	r3, [r3, #0]
 8003d12:	68db      	ldr	r3, [r3, #12]
 8003d14:	f003 0310 	and.w	r3, r3, #16
 8003d18:	2b10      	cmp	r3, #16
 8003d1a:	d11b      	bne.n	8003d54 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	681b      	ldr	r3, [r3, #0]
 8003d20:	f06f 0210 	mvn.w	r2, #16
 8003d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	2208      	movs	r2, #8
 8003d2a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	69db      	ldr	r3, [r3, #28]
 8003d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d003      	beq.n	8003d42 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d3a:	6878      	ldr	r0, [r7, #4]
 8003d3c:	f000 fa01 	bl	8004142 <HAL_TIM_IC_CaptureCallback>
 8003d40:	e005      	b.n	8003d4e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d42:	6878      	ldr	r0, [r7, #4]
 8003d44:	f000 f9f4 	bl	8004130 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d48:	6878      	ldr	r0, [r7, #4]
 8003d4a:	f000 fa03 	bl	8004154 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2200      	movs	r2, #0
 8003d52:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	691b      	ldr	r3, [r3, #16]
 8003d5a:	f003 0301 	and.w	r3, r3, #1
 8003d5e:	2b01      	cmp	r3, #1
 8003d60:	d10e      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003d62:	687b      	ldr	r3, [r7, #4]
 8003d64:	681b      	ldr	r3, [r3, #0]
 8003d66:	68db      	ldr	r3, [r3, #12]
 8003d68:	f003 0301 	and.w	r3, r3, #1
 8003d6c:	2b01      	cmp	r3, #1
 8003d6e:	d107      	bne.n	8003d80 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003d70:	687b      	ldr	r3, [r7, #4]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	f06f 0201 	mvn.w	r2, #1
 8003d78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003d7a:	6878      	ldr	r0, [r7, #4]
 8003d7c:	f000 f9cf 	bl	800411e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691b      	ldr	r3, [r3, #16]
 8003d86:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d8a:	2b80      	cmp	r3, #128	@ 0x80
 8003d8c:	d10e      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	681b      	ldr	r3, [r3, #0]
 8003d92:	68db      	ldr	r3, [r3, #12]
 8003d94:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d98:	2b80      	cmp	r3, #128	@ 0x80
 8003d9a:	d107      	bne.n	8003dac <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003da4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003da6:	6878      	ldr	r0, [r7, #4]
 8003da8:	f000 fcf1 	bl	800478e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	691b      	ldr	r3, [r3, #16]
 8003db2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003db6:	2b40      	cmp	r3, #64	@ 0x40
 8003db8:	d10e      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	681b      	ldr	r3, [r3, #0]
 8003dbe:	68db      	ldr	r3, [r3, #12]
 8003dc0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003dc4:	2b40      	cmp	r3, #64	@ 0x40
 8003dc6:	d107      	bne.n	8003dd8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003dd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003dd2:	6878      	ldr	r0, [r7, #4]
 8003dd4:	f000 f9c7 	bl	8004166 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	681b      	ldr	r3, [r3, #0]
 8003ddc:	691b      	ldr	r3, [r3, #16]
 8003dde:	f003 0320 	and.w	r3, r3, #32
 8003de2:	2b20      	cmp	r3, #32
 8003de4:	d10e      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	68db      	ldr	r3, [r3, #12]
 8003dec:	f003 0320 	and.w	r3, r3, #32
 8003df0:	2b20      	cmp	r3, #32
 8003df2:	d107      	bne.n	8003e04 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	f06f 0220 	mvn.w	r2, #32
 8003dfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003dfe:	6878      	ldr	r0, [r7, #4]
 8003e00:	f000 fcbc 	bl	800477c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e04:	bf00      	nop
 8003e06:	3708      	adds	r7, #8
 8003e08:	46bd      	mov	sp, r7
 8003e0a:	bd80      	pop	{r7, pc}

08003e0c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e0c:	b580      	push	{r7, lr}
 8003e0e:	b086      	sub	sp, #24
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	60f8      	str	r0, [r7, #12]
 8003e14:	60b9      	str	r1, [r7, #8]
 8003e16:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003e18:	2300      	movs	r3, #0
 8003e1a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e1c:	68fb      	ldr	r3, [r7, #12]
 8003e1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e22:	2b01      	cmp	r3, #1
 8003e24:	d101      	bne.n	8003e2a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003e26:	2302      	movs	r3, #2
 8003e28:	e0ae      	b.n	8003f88 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	2201      	movs	r2, #1
 8003e2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	2b0c      	cmp	r3, #12
 8003e36:	f200 809f 	bhi.w	8003f78 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003e3a:	a201      	add	r2, pc, #4	@ (adr r2, 8003e40 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003e3c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003e40:	08003e75 	.word	0x08003e75
 8003e44:	08003f79 	.word	0x08003f79
 8003e48:	08003f79 	.word	0x08003f79
 8003e4c:	08003f79 	.word	0x08003f79
 8003e50:	08003eb5 	.word	0x08003eb5
 8003e54:	08003f79 	.word	0x08003f79
 8003e58:	08003f79 	.word	0x08003f79
 8003e5c:	08003f79 	.word	0x08003f79
 8003e60:	08003ef7 	.word	0x08003ef7
 8003e64:	08003f79 	.word	0x08003f79
 8003e68:	08003f79 	.word	0x08003f79
 8003e6c:	08003f79 	.word	0x08003f79
 8003e70:	08003f37 	.word	0x08003f37
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	68b9      	ldr	r1, [r7, #8]
 8003e7a:	4618      	mov	r0, r3
 8003e7c:	f000 f9de 	bl	800423c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	699a      	ldr	r2, [r3, #24]
 8003e86:	68fb      	ldr	r3, [r7, #12]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	f042 0208 	orr.w	r2, r2, #8
 8003e8e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	699a      	ldr	r2, [r3, #24]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f022 0204 	bic.w	r2, r2, #4
 8003e9e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	681b      	ldr	r3, [r3, #0]
 8003ea4:	6999      	ldr	r1, [r3, #24]
 8003ea6:	68bb      	ldr	r3, [r7, #8]
 8003ea8:	691a      	ldr	r2, [r3, #16]
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	430a      	orrs	r2, r1
 8003eb0:	619a      	str	r2, [r3, #24]
      break;
 8003eb2:	e064      	b.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68b9      	ldr	r1, [r7, #8]
 8003eba:	4618      	mov	r0, r3
 8003ebc:	f000 fa24 	bl	8004308 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	699a      	ldr	r2, [r3, #24]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003ece:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	699a      	ldr	r2, [r3, #24]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ede:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003ee0:	68fb      	ldr	r3, [r7, #12]
 8003ee2:	681b      	ldr	r3, [r3, #0]
 8003ee4:	6999      	ldr	r1, [r3, #24]
 8003ee6:	68bb      	ldr	r3, [r7, #8]
 8003ee8:	691b      	ldr	r3, [r3, #16]
 8003eea:	021a      	lsls	r2, r3, #8
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	430a      	orrs	r2, r1
 8003ef2:	619a      	str	r2, [r3, #24]
      break;
 8003ef4:	e043      	b.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003ef6:	68fb      	ldr	r3, [r7, #12]
 8003ef8:	681b      	ldr	r3, [r3, #0]
 8003efa:	68b9      	ldr	r1, [r7, #8]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f000 fa6d 	bl	80043dc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	69da      	ldr	r2, [r3, #28]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	681b      	ldr	r3, [r3, #0]
 8003f0c:	f042 0208 	orr.w	r2, r2, #8
 8003f10:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f12:	68fb      	ldr	r3, [r7, #12]
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	69da      	ldr	r2, [r3, #28]
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	f022 0204 	bic.w	r2, r2, #4
 8003f20:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	69d9      	ldr	r1, [r3, #28]
 8003f28:	68bb      	ldr	r3, [r7, #8]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	68fb      	ldr	r3, [r7, #12]
 8003f2e:	681b      	ldr	r3, [r3, #0]
 8003f30:	430a      	orrs	r2, r1
 8003f32:	61da      	str	r2, [r3, #28]
      break;
 8003f34:	e023      	b.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003f36:	68fb      	ldr	r3, [r7, #12]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68b9      	ldr	r1, [r7, #8]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f000 fab7 	bl	80044b0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	681b      	ldr	r3, [r3, #0]
 8003f46:	69da      	ldr	r2, [r3, #28]
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003f50:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	69da      	ldr	r2, [r3, #28]
 8003f58:	68fb      	ldr	r3, [r7, #12]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f60:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	69d9      	ldr	r1, [r3, #28]
 8003f68:	68bb      	ldr	r3, [r7, #8]
 8003f6a:	691b      	ldr	r3, [r3, #16]
 8003f6c:	021a      	lsls	r2, r3, #8
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	430a      	orrs	r2, r1
 8003f74:	61da      	str	r2, [r3, #28]
      break;
 8003f76:	e002      	b.n	8003f7e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003f78:	2301      	movs	r3, #1
 8003f7a:	75fb      	strb	r3, [r7, #23]
      break;
 8003f7c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	2200      	movs	r2, #0
 8003f82:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003f86:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f88:	4618      	mov	r0, r3
 8003f8a:	3718      	adds	r7, #24
 8003f8c:	46bd      	mov	sp, r7
 8003f8e:	bd80      	pop	{r7, pc}

08003f90 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003f90:	b580      	push	{r7, lr}
 8003f92:	b084      	sub	sp, #16
 8003f94:	af00      	add	r7, sp, #0
 8003f96:	6078      	str	r0, [r7, #4]
 8003f98:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003f9a:	2300      	movs	r3, #0
 8003f9c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003f9e:	687b      	ldr	r3, [r7, #4]
 8003fa0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003fa4:	2b01      	cmp	r3, #1
 8003fa6:	d101      	bne.n	8003fac <HAL_TIM_ConfigClockSource+0x1c>
 8003fa8:	2302      	movs	r3, #2
 8003faa:	e0b4      	b.n	8004116 <HAL_TIM_ConfigClockSource+0x186>
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2202      	movs	r2, #2
 8003fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	689b      	ldr	r3, [r3, #8]
 8003fc2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003fc4:	68bb      	ldr	r3, [r7, #8]
 8003fc6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003fca:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003fcc:	68bb      	ldr	r3, [r7, #8]
 8003fce:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003fd2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	68ba      	ldr	r2, [r7, #8]
 8003fda:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003fdc:	683b      	ldr	r3, [r7, #0]
 8003fde:	681b      	ldr	r3, [r3, #0]
 8003fe0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fe4:	d03e      	beq.n	8004064 <HAL_TIM_ConfigClockSource+0xd4>
 8003fe6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003fea:	f200 8087 	bhi.w	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8003fee:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ff2:	f000 8086 	beq.w	8004102 <HAL_TIM_ConfigClockSource+0x172>
 8003ff6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ffa:	d87f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8003ffc:	2b70      	cmp	r3, #112	@ 0x70
 8003ffe:	d01a      	beq.n	8004036 <HAL_TIM_ConfigClockSource+0xa6>
 8004000:	2b70      	cmp	r3, #112	@ 0x70
 8004002:	d87b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8004004:	2b60      	cmp	r3, #96	@ 0x60
 8004006:	d050      	beq.n	80040aa <HAL_TIM_ConfigClockSource+0x11a>
 8004008:	2b60      	cmp	r3, #96	@ 0x60
 800400a:	d877      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 800400c:	2b50      	cmp	r3, #80	@ 0x50
 800400e:	d03c      	beq.n	800408a <HAL_TIM_ConfigClockSource+0xfa>
 8004010:	2b50      	cmp	r3, #80	@ 0x50
 8004012:	d873      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8004014:	2b40      	cmp	r3, #64	@ 0x40
 8004016:	d058      	beq.n	80040ca <HAL_TIM_ConfigClockSource+0x13a>
 8004018:	2b40      	cmp	r3, #64	@ 0x40
 800401a:	d86f      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 800401c:	2b30      	cmp	r3, #48	@ 0x30
 800401e:	d064      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004020:	2b30      	cmp	r3, #48	@ 0x30
 8004022:	d86b      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 8004024:	2b20      	cmp	r3, #32
 8004026:	d060      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004028:	2b20      	cmp	r3, #32
 800402a:	d867      	bhi.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
 800402c:	2b00      	cmp	r3, #0
 800402e:	d05c      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004030:	2b10      	cmp	r3, #16
 8004032:	d05a      	beq.n	80040ea <HAL_TIM_ConfigClockSource+0x15a>
 8004034:	e062      	b.n	80040fc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800403a:	683b      	ldr	r3, [r7, #0]
 800403c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800403e:	683b      	ldr	r3, [r7, #0]
 8004040:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004042:	683b      	ldr	r3, [r7, #0]
 8004044:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004046:	f000 faf8 	bl	800463a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800404a:	687b      	ldr	r3, [r7, #4]
 800404c:	681b      	ldr	r3, [r3, #0]
 800404e:	689b      	ldr	r3, [r3, #8]
 8004050:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004052:	68bb      	ldr	r3, [r7, #8]
 8004054:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004058:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800405a:	687b      	ldr	r3, [r7, #4]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	68ba      	ldr	r2, [r7, #8]
 8004060:	609a      	str	r2, [r3, #8]
      break;
 8004062:	e04f      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004068:	683b      	ldr	r3, [r7, #0]
 800406a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800406c:	683b      	ldr	r3, [r7, #0]
 800406e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004070:	683b      	ldr	r3, [r7, #0]
 8004072:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004074:	f000 fae1 	bl	800463a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	689a      	ldr	r2, [r3, #8]
 800407e:	687b      	ldr	r3, [r7, #4]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004086:	609a      	str	r2, [r3, #8]
      break;
 8004088:	e03c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800408e:	683b      	ldr	r3, [r7, #0]
 8004090:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004092:	683b      	ldr	r3, [r7, #0]
 8004094:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004096:	461a      	mov	r2, r3
 8004098:	f000 fa58 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	2150      	movs	r1, #80	@ 0x50
 80040a2:	4618      	mov	r0, r3
 80040a4:	f000 faaf 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 80040a8:	e02c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ae:	683b      	ldr	r3, [r7, #0]
 80040b0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040b2:	683b      	ldr	r3, [r7, #0]
 80040b4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80040b6:	461a      	mov	r2, r3
 80040b8:	f000 fa76 	bl	80045a8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	2160      	movs	r1, #96	@ 0x60
 80040c2:	4618      	mov	r0, r3
 80040c4:	f000 fa9f 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 80040c8:	e01c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80040ce:	683b      	ldr	r3, [r7, #0]
 80040d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80040d6:	461a      	mov	r2, r3
 80040d8:	f000 fa38 	bl	800454c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	2140      	movs	r1, #64	@ 0x40
 80040e2:	4618      	mov	r0, r3
 80040e4:	f000 fa8f 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 80040e8:	e00c      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681a      	ldr	r2, [r3, #0]
 80040ee:	683b      	ldr	r3, [r7, #0]
 80040f0:	681b      	ldr	r3, [r3, #0]
 80040f2:	4619      	mov	r1, r3
 80040f4:	4610      	mov	r0, r2
 80040f6:	f000 fa86 	bl	8004606 <TIM_ITRx_SetConfig>
      break;
 80040fa:	e003      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80040fc:	2301      	movs	r3, #1
 80040fe:	73fb      	strb	r3, [r7, #15]
      break;
 8004100:	e000      	b.n	8004104 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004102:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2201      	movs	r2, #1
 8004108:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	2200      	movs	r2, #0
 8004110:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004114:	7bfb      	ldrb	r3, [r7, #15]
}
 8004116:	4618      	mov	r0, r3
 8004118:	3710      	adds	r7, #16
 800411a:	46bd      	mov	sp, r7
 800411c:	bd80      	pop	{r7, pc}

0800411e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800411e:	b480      	push	{r7}
 8004120:	b083      	sub	sp, #12
 8004122:	af00      	add	r7, sp, #0
 8004124:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004126:	bf00      	nop
 8004128:	370c      	adds	r7, #12
 800412a:	46bd      	mov	sp, r7
 800412c:	bc80      	pop	{r7}
 800412e:	4770      	bx	lr

08004130 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004130:	b480      	push	{r7}
 8004132:	b083      	sub	sp, #12
 8004134:	af00      	add	r7, sp, #0
 8004136:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004138:	bf00      	nop
 800413a:	370c      	adds	r7, #12
 800413c:	46bd      	mov	sp, r7
 800413e:	bc80      	pop	{r7}
 8004140:	4770      	bx	lr

08004142 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004142:	b480      	push	{r7}
 8004144:	b083      	sub	sp, #12
 8004146:	af00      	add	r7, sp, #0
 8004148:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800414a:	bf00      	nop
 800414c:	370c      	adds	r7, #12
 800414e:	46bd      	mov	sp, r7
 8004150:	bc80      	pop	{r7}
 8004152:	4770      	bx	lr

08004154 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	bc80      	pop	{r7}
 8004164:	4770      	bx	lr

08004166 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004166:	b480      	push	{r7}
 8004168:	b083      	sub	sp, #12
 800416a:	af00      	add	r7, sp, #0
 800416c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800416e:	bf00      	nop
 8004170:	370c      	adds	r7, #12
 8004172:	46bd      	mov	sp, r7
 8004174:	bc80      	pop	{r7}
 8004176:	4770      	bx	lr

08004178 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004178:	b480      	push	{r7}
 800417a:	b085      	sub	sp, #20
 800417c:	af00      	add	r7, sp, #0
 800417e:	6078      	str	r0, [r7, #4]
 8004180:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	681b      	ldr	r3, [r3, #0]
 8004186:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	4a29      	ldr	r2, [pc, #164]	@ (8004230 <TIM_Base_SetConfig+0xb8>)
 800418c:	4293      	cmp	r3, r2
 800418e:	d00b      	beq.n	80041a8 <TIM_Base_SetConfig+0x30>
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004196:	d007      	beq.n	80041a8 <TIM_Base_SetConfig+0x30>
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	4a26      	ldr	r2, [pc, #152]	@ (8004234 <TIM_Base_SetConfig+0xbc>)
 800419c:	4293      	cmp	r3, r2
 800419e:	d003      	beq.n	80041a8 <TIM_Base_SetConfig+0x30>
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	4a25      	ldr	r2, [pc, #148]	@ (8004238 <TIM_Base_SetConfig+0xc0>)
 80041a4:	4293      	cmp	r3, r2
 80041a6:	d108      	bne.n	80041ba <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80041ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80041b0:	683b      	ldr	r3, [r7, #0]
 80041b2:	685b      	ldr	r3, [r3, #4]
 80041b4:	68fa      	ldr	r2, [r7, #12]
 80041b6:	4313      	orrs	r3, r2
 80041b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	4a1c      	ldr	r2, [pc, #112]	@ (8004230 <TIM_Base_SetConfig+0xb8>)
 80041be:	4293      	cmp	r3, r2
 80041c0:	d00b      	beq.n	80041da <TIM_Base_SetConfig+0x62>
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80041c8:	d007      	beq.n	80041da <TIM_Base_SetConfig+0x62>
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	4a19      	ldr	r2, [pc, #100]	@ (8004234 <TIM_Base_SetConfig+0xbc>)
 80041ce:	4293      	cmp	r3, r2
 80041d0:	d003      	beq.n	80041da <TIM_Base_SetConfig+0x62>
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	4a18      	ldr	r2, [pc, #96]	@ (8004238 <TIM_Base_SetConfig+0xc0>)
 80041d6:	4293      	cmp	r3, r2
 80041d8:	d108      	bne.n	80041ec <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80041da:	68fb      	ldr	r3, [r7, #12]
 80041dc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80041e2:	683b      	ldr	r3, [r7, #0]
 80041e4:	68db      	ldr	r3, [r3, #12]
 80041e6:	68fa      	ldr	r2, [r7, #12]
 80041e8:	4313      	orrs	r3, r2
 80041ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80041f2:	683b      	ldr	r3, [r7, #0]
 80041f4:	695b      	ldr	r3, [r3, #20]
 80041f6:	4313      	orrs	r3, r2
 80041f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	68fa      	ldr	r2, [r7, #12]
 80041fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004200:	683b      	ldr	r3, [r7, #0]
 8004202:	689a      	ldr	r2, [r3, #8]
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004208:	683b      	ldr	r3, [r7, #0]
 800420a:	681a      	ldr	r2, [r3, #0]
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	4a07      	ldr	r2, [pc, #28]	@ (8004230 <TIM_Base_SetConfig+0xb8>)
 8004214:	4293      	cmp	r3, r2
 8004216:	d103      	bne.n	8004220 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004218:	683b      	ldr	r3, [r7, #0]
 800421a:	691a      	ldr	r2, [r3, #16]
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2201      	movs	r2, #1
 8004224:	615a      	str	r2, [r3, #20]
}
 8004226:	bf00      	nop
 8004228:	3714      	adds	r7, #20
 800422a:	46bd      	mov	sp, r7
 800422c:	bc80      	pop	{r7}
 800422e:	4770      	bx	lr
 8004230:	40012c00 	.word	0x40012c00
 8004234:	40000400 	.word	0x40000400
 8004238:	40000800 	.word	0x40000800

0800423c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800423c:	b480      	push	{r7}
 800423e:	b087      	sub	sp, #28
 8004240:	af00      	add	r7, sp, #0
 8004242:	6078      	str	r0, [r7, #4]
 8004244:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6a1b      	ldr	r3, [r3, #32]
 800424a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6a1b      	ldr	r3, [r3, #32]
 8004250:	f023 0201 	bic.w	r2, r3, #1
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	685b      	ldr	r3, [r3, #4]
 800425c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	699b      	ldr	r3, [r3, #24]
 8004262:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800426a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	f023 0303 	bic.w	r3, r3, #3
 8004272:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004274:	683b      	ldr	r3, [r7, #0]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	68fa      	ldr	r2, [r7, #12]
 800427a:	4313      	orrs	r3, r2
 800427c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800427e:	697b      	ldr	r3, [r7, #20]
 8004280:	f023 0302 	bic.w	r3, r3, #2
 8004284:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004286:	683b      	ldr	r3, [r7, #0]
 8004288:	689b      	ldr	r3, [r3, #8]
 800428a:	697a      	ldr	r2, [r7, #20]
 800428c:	4313      	orrs	r3, r2
 800428e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	4a1c      	ldr	r2, [pc, #112]	@ (8004304 <TIM_OC1_SetConfig+0xc8>)
 8004294:	4293      	cmp	r3, r2
 8004296:	d10c      	bne.n	80042b2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004298:	697b      	ldr	r3, [r7, #20]
 800429a:	f023 0308 	bic.w	r3, r3, #8
 800429e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	68db      	ldr	r3, [r3, #12]
 80042a4:	697a      	ldr	r2, [r7, #20]
 80042a6:	4313      	orrs	r3, r2
 80042a8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80042aa:	697b      	ldr	r3, [r7, #20]
 80042ac:	f023 0304 	bic.w	r3, r3, #4
 80042b0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	4a13      	ldr	r2, [pc, #76]	@ (8004304 <TIM_OC1_SetConfig+0xc8>)
 80042b6:	4293      	cmp	r3, r2
 80042b8:	d111      	bne.n	80042de <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80042ba:	693b      	ldr	r3, [r7, #16]
 80042bc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80042c0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80042c2:	693b      	ldr	r3, [r7, #16]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042c8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	695b      	ldr	r3, [r3, #20]
 80042ce:	693a      	ldr	r2, [r7, #16]
 80042d0:	4313      	orrs	r3, r2
 80042d2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80042d4:	683b      	ldr	r3, [r7, #0]
 80042d6:	699b      	ldr	r3, [r3, #24]
 80042d8:	693a      	ldr	r2, [r7, #16]
 80042da:	4313      	orrs	r3, r2
 80042dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	693a      	ldr	r2, [r7, #16]
 80042e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80042e4:	687b      	ldr	r3, [r7, #4]
 80042e6:	68fa      	ldr	r2, [r7, #12]
 80042e8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80042ea:	683b      	ldr	r3, [r7, #0]
 80042ec:	685a      	ldr	r2, [r3, #4]
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042f2:	687b      	ldr	r3, [r7, #4]
 80042f4:	697a      	ldr	r2, [r7, #20]
 80042f6:	621a      	str	r2, [r3, #32]
}
 80042f8:	bf00      	nop
 80042fa:	371c      	adds	r7, #28
 80042fc:	46bd      	mov	sp, r7
 80042fe:	bc80      	pop	{r7}
 8004300:	4770      	bx	lr
 8004302:	bf00      	nop
 8004304:	40012c00 	.word	0x40012c00

08004308 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004308:	b480      	push	{r7}
 800430a:	b087      	sub	sp, #28
 800430c:	af00      	add	r7, sp, #0
 800430e:	6078      	str	r0, [r7, #4]
 8004310:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	6a1b      	ldr	r3, [r3, #32]
 8004316:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004318:	687b      	ldr	r3, [r7, #4]
 800431a:	6a1b      	ldr	r3, [r3, #32]
 800431c:	f023 0210 	bic.w	r2, r3, #16
 8004320:	687b      	ldr	r3, [r7, #4]
 8004322:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	685b      	ldr	r3, [r3, #4]
 8004328:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	699b      	ldr	r3, [r3, #24]
 800432e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004336:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004338:	68fb      	ldr	r3, [r7, #12]
 800433a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800433e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	681b      	ldr	r3, [r3, #0]
 8004344:	021b      	lsls	r3, r3, #8
 8004346:	68fa      	ldr	r2, [r7, #12]
 8004348:	4313      	orrs	r3, r2
 800434a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800434c:	697b      	ldr	r3, [r7, #20]
 800434e:	f023 0320 	bic.w	r3, r3, #32
 8004352:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004354:	683b      	ldr	r3, [r7, #0]
 8004356:	689b      	ldr	r3, [r3, #8]
 8004358:	011b      	lsls	r3, r3, #4
 800435a:	697a      	ldr	r2, [r7, #20]
 800435c:	4313      	orrs	r3, r2
 800435e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	4a1d      	ldr	r2, [pc, #116]	@ (80043d8 <TIM_OC2_SetConfig+0xd0>)
 8004364:	4293      	cmp	r3, r2
 8004366:	d10d      	bne.n	8004384 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004368:	697b      	ldr	r3, [r7, #20]
 800436a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800436e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004370:	683b      	ldr	r3, [r7, #0]
 8004372:	68db      	ldr	r3, [r3, #12]
 8004374:	011b      	lsls	r3, r3, #4
 8004376:	697a      	ldr	r2, [r7, #20]
 8004378:	4313      	orrs	r3, r2
 800437a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004382:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	4a14      	ldr	r2, [pc, #80]	@ (80043d8 <TIM_OC2_SetConfig+0xd0>)
 8004388:	4293      	cmp	r3, r2
 800438a:	d113      	bne.n	80043b4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800438c:	693b      	ldr	r3, [r7, #16]
 800438e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004392:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004394:	693b      	ldr	r3, [r7, #16]
 8004396:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800439a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800439c:	683b      	ldr	r3, [r7, #0]
 800439e:	695b      	ldr	r3, [r3, #20]
 80043a0:	009b      	lsls	r3, r3, #2
 80043a2:	693a      	ldr	r2, [r7, #16]
 80043a4:	4313      	orrs	r3, r2
 80043a6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	699b      	ldr	r3, [r3, #24]
 80043ac:	009b      	lsls	r3, r3, #2
 80043ae:	693a      	ldr	r2, [r7, #16]
 80043b0:	4313      	orrs	r3, r2
 80043b2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	693a      	ldr	r2, [r7, #16]
 80043b8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	68fa      	ldr	r2, [r7, #12]
 80043be:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80043c0:	683b      	ldr	r3, [r7, #0]
 80043c2:	685a      	ldr	r2, [r3, #4]
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	621a      	str	r2, [r3, #32]
}
 80043ce:	bf00      	nop
 80043d0:	371c      	adds	r7, #28
 80043d2:	46bd      	mov	sp, r7
 80043d4:	bc80      	pop	{r7}
 80043d6:	4770      	bx	lr
 80043d8:	40012c00 	.word	0x40012c00

080043dc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80043dc:	b480      	push	{r7}
 80043de:	b087      	sub	sp, #28
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
 80043e4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043e6:	687b      	ldr	r3, [r7, #4]
 80043e8:	6a1b      	ldr	r3, [r3, #32]
 80043ea:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6a1b      	ldr	r3, [r3, #32]
 80043f0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	685b      	ldr	r3, [r3, #4]
 80043fc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	69db      	ldr	r3, [r3, #28]
 8004402:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800440a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	f023 0303 	bic.w	r3, r3, #3
 8004412:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004414:	683b      	ldr	r3, [r7, #0]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	68fa      	ldr	r2, [r7, #12]
 800441a:	4313      	orrs	r3, r2
 800441c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800441e:	697b      	ldr	r3, [r7, #20]
 8004420:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004424:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004426:	683b      	ldr	r3, [r7, #0]
 8004428:	689b      	ldr	r3, [r3, #8]
 800442a:	021b      	lsls	r3, r3, #8
 800442c:	697a      	ldr	r2, [r7, #20]
 800442e:	4313      	orrs	r3, r2
 8004430:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	4a1d      	ldr	r2, [pc, #116]	@ (80044ac <TIM_OC3_SetConfig+0xd0>)
 8004436:	4293      	cmp	r3, r2
 8004438:	d10d      	bne.n	8004456 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800443a:	697b      	ldr	r3, [r7, #20]
 800443c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004440:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004442:	683b      	ldr	r3, [r7, #0]
 8004444:	68db      	ldr	r3, [r3, #12]
 8004446:	021b      	lsls	r3, r3, #8
 8004448:	697a      	ldr	r2, [r7, #20]
 800444a:	4313      	orrs	r3, r2
 800444c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800444e:	697b      	ldr	r3, [r7, #20]
 8004450:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004454:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	4a14      	ldr	r2, [pc, #80]	@ (80044ac <TIM_OC3_SetConfig+0xd0>)
 800445a:	4293      	cmp	r3, r2
 800445c:	d113      	bne.n	8004486 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004464:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004466:	693b      	ldr	r3, [r7, #16]
 8004468:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800446c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800446e:	683b      	ldr	r3, [r7, #0]
 8004470:	695b      	ldr	r3, [r3, #20]
 8004472:	011b      	lsls	r3, r3, #4
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	4313      	orrs	r3, r2
 8004478:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800447a:	683b      	ldr	r3, [r7, #0]
 800447c:	699b      	ldr	r3, [r3, #24]
 800447e:	011b      	lsls	r3, r3, #4
 8004480:	693a      	ldr	r2, [r7, #16]
 8004482:	4313      	orrs	r3, r2
 8004484:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	693a      	ldr	r2, [r7, #16]
 800448a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	68fa      	ldr	r2, [r7, #12]
 8004490:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004492:	683b      	ldr	r3, [r7, #0]
 8004494:	685a      	ldr	r2, [r3, #4]
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	621a      	str	r2, [r3, #32]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr
 80044aa:	bf00      	nop
 80044ac:	40012c00 	.word	0x40012c00

080044b0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b087      	sub	sp, #28
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6a1b      	ldr	r3, [r3, #32]
 80044be:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	6a1b      	ldr	r3, [r3, #32]
 80044c4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	685b      	ldr	r3, [r3, #4]
 80044d0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	69db      	ldr	r3, [r3, #28]
 80044d6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80044de:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044e6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	681b      	ldr	r3, [r3, #0]
 80044ec:	021b      	lsls	r3, r3, #8
 80044ee:	68fa      	ldr	r2, [r7, #12]
 80044f0:	4313      	orrs	r3, r2
 80044f2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80044f4:	693b      	ldr	r3, [r7, #16]
 80044f6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80044fa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80044fc:	683b      	ldr	r3, [r7, #0]
 80044fe:	689b      	ldr	r3, [r3, #8]
 8004500:	031b      	lsls	r3, r3, #12
 8004502:	693a      	ldr	r2, [r7, #16]
 8004504:	4313      	orrs	r3, r2
 8004506:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	4a0f      	ldr	r2, [pc, #60]	@ (8004548 <TIM_OC4_SetConfig+0x98>)
 800450c:	4293      	cmp	r3, r2
 800450e:	d109      	bne.n	8004524 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004510:	697b      	ldr	r3, [r7, #20]
 8004512:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8004516:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	695b      	ldr	r3, [r3, #20]
 800451c:	019b      	lsls	r3, r3, #6
 800451e:	697a      	ldr	r2, [r7, #20]
 8004520:	4313      	orrs	r3, r2
 8004522:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	697a      	ldr	r2, [r7, #20]
 8004528:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	68fa      	ldr	r2, [r7, #12]
 800452e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	685a      	ldr	r2, [r3, #4]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	693a      	ldr	r2, [r7, #16]
 800453c:	621a      	str	r2, [r3, #32]
}
 800453e:	bf00      	nop
 8004540:	371c      	adds	r7, #28
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00

0800454c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800454c:	b480      	push	{r7}
 800454e:	b087      	sub	sp, #28
 8004550:	af00      	add	r7, sp, #0
 8004552:	60f8      	str	r0, [r7, #12]
 8004554:	60b9      	str	r1, [r7, #8]
 8004556:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	6a1b      	ldr	r3, [r3, #32]
 800455c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	f023 0201 	bic.w	r2, r3, #1
 8004566:	68fb      	ldr	r3, [r7, #12]
 8004568:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	699b      	ldr	r3, [r3, #24]
 800456e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004570:	693b      	ldr	r3, [r7, #16]
 8004572:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004576:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	011b      	lsls	r3, r3, #4
 800457c:	693a      	ldr	r2, [r7, #16]
 800457e:	4313      	orrs	r3, r2
 8004580:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	f023 030a 	bic.w	r3, r3, #10
 8004588:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800458a:	697a      	ldr	r2, [r7, #20]
 800458c:	68bb      	ldr	r3, [r7, #8]
 800458e:	4313      	orrs	r3, r2
 8004590:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	693a      	ldr	r2, [r7, #16]
 8004596:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	697a      	ldr	r2, [r7, #20]
 800459c:	621a      	str	r2, [r3, #32]
}
 800459e:	bf00      	nop
 80045a0:	371c      	adds	r7, #28
 80045a2:	46bd      	mov	sp, r7
 80045a4:	bc80      	pop	{r7}
 80045a6:	4770      	bx	lr

080045a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80045a8:	b480      	push	{r7}
 80045aa:	b087      	sub	sp, #28
 80045ac:	af00      	add	r7, sp, #0
 80045ae:	60f8      	str	r0, [r7, #12]
 80045b0:	60b9      	str	r1, [r7, #8]
 80045b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80045b4:	68fb      	ldr	r3, [r7, #12]
 80045b6:	6a1b      	ldr	r3, [r3, #32]
 80045b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	6a1b      	ldr	r3, [r3, #32]
 80045be:	f023 0210 	bic.w	r2, r3, #16
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	699b      	ldr	r3, [r3, #24]
 80045ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80045cc:	693b      	ldr	r3, [r7, #16]
 80045ce:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80045d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	031b      	lsls	r3, r3, #12
 80045d8:	693a      	ldr	r2, [r7, #16]
 80045da:	4313      	orrs	r3, r2
 80045dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80045de:	697b      	ldr	r3, [r7, #20]
 80045e0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80045e4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80045e6:	68bb      	ldr	r3, [r7, #8]
 80045e8:	011b      	lsls	r3, r3, #4
 80045ea:	697a      	ldr	r2, [r7, #20]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80045f0:	68fb      	ldr	r3, [r7, #12]
 80045f2:	693a      	ldr	r2, [r7, #16]
 80045f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80045f6:	68fb      	ldr	r3, [r7, #12]
 80045f8:	697a      	ldr	r2, [r7, #20]
 80045fa:	621a      	str	r2, [r3, #32]
}
 80045fc:	bf00      	nop
 80045fe:	371c      	adds	r7, #28
 8004600:	46bd      	mov	sp, r7
 8004602:	bc80      	pop	{r7}
 8004604:	4770      	bx	lr

08004606 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004606:	b480      	push	{r7}
 8004608:	b085      	sub	sp, #20
 800460a:	af00      	add	r7, sp, #0
 800460c:	6078      	str	r0, [r7, #4]
 800460e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	689b      	ldr	r3, [r3, #8]
 8004614:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800461c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800461e:	683a      	ldr	r2, [r7, #0]
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	4313      	orrs	r3, r2
 8004624:	f043 0307 	orr.w	r3, r3, #7
 8004628:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	609a      	str	r2, [r3, #8]
}
 8004630:	bf00      	nop
 8004632:	3714      	adds	r7, #20
 8004634:	46bd      	mov	sp, r7
 8004636:	bc80      	pop	{r7}
 8004638:	4770      	bx	lr

0800463a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800463a:	b480      	push	{r7}
 800463c:	b087      	sub	sp, #28
 800463e:	af00      	add	r7, sp, #0
 8004640:	60f8      	str	r0, [r7, #12]
 8004642:	60b9      	str	r1, [r7, #8]
 8004644:	607a      	str	r2, [r7, #4]
 8004646:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	689b      	ldr	r3, [r3, #8]
 800464c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800464e:	697b      	ldr	r3, [r7, #20]
 8004650:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004654:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004656:	683b      	ldr	r3, [r7, #0]
 8004658:	021a      	lsls	r2, r3, #8
 800465a:	687b      	ldr	r3, [r7, #4]
 800465c:	431a      	orrs	r2, r3
 800465e:	68bb      	ldr	r3, [r7, #8]
 8004660:	4313      	orrs	r3, r2
 8004662:	697a      	ldr	r2, [r7, #20]
 8004664:	4313      	orrs	r3, r2
 8004666:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	697a      	ldr	r2, [r7, #20]
 800466c:	609a      	str	r2, [r3, #8]
}
 800466e:	bf00      	nop
 8004670:	371c      	adds	r7, #28
 8004672:	46bd      	mov	sp, r7
 8004674:	bc80      	pop	{r7}
 8004676:	4770      	bx	lr

08004678 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004678:	b480      	push	{r7}
 800467a:	b087      	sub	sp, #28
 800467c:	af00      	add	r7, sp, #0
 800467e:	60f8      	str	r0, [r7, #12]
 8004680:	60b9      	str	r1, [r7, #8]
 8004682:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004684:	68bb      	ldr	r3, [r7, #8]
 8004686:	f003 031f 	and.w	r3, r3, #31
 800468a:	2201      	movs	r2, #1
 800468c:	fa02 f303 	lsl.w	r3, r2, r3
 8004690:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004692:	68fb      	ldr	r3, [r7, #12]
 8004694:	6a1a      	ldr	r2, [r3, #32]
 8004696:	697b      	ldr	r3, [r7, #20]
 8004698:	43db      	mvns	r3, r3
 800469a:	401a      	ands	r2, r3
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80046a0:	68fb      	ldr	r3, [r7, #12]
 80046a2:	6a1a      	ldr	r2, [r3, #32]
 80046a4:	68bb      	ldr	r3, [r7, #8]
 80046a6:	f003 031f 	and.w	r3, r3, #31
 80046aa:	6879      	ldr	r1, [r7, #4]
 80046ac:	fa01 f303 	lsl.w	r3, r1, r3
 80046b0:	431a      	orrs	r2, r3
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bc80      	pop	{r7}
 80046be:	4770      	bx	lr

080046c0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80046c0:	b480      	push	{r7}
 80046c2:	b085      	sub	sp, #20
 80046c4:	af00      	add	r7, sp, #0
 80046c6:	6078      	str	r0, [r7, #4]
 80046c8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80046d0:	2b01      	cmp	r3, #1
 80046d2:	d101      	bne.n	80046d8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80046d4:	2302      	movs	r3, #2
 80046d6:	e046      	b.n	8004766 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80046d8:	687b      	ldr	r3, [r7, #4]
 80046da:	2201      	movs	r2, #1
 80046dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	2202      	movs	r2, #2
 80046e4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	681b      	ldr	r3, [r3, #0]
 80046ec:	685b      	ldr	r3, [r3, #4]
 80046ee:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80046f0:	687b      	ldr	r3, [r7, #4]
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	689b      	ldr	r3, [r3, #8]
 80046f6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046fe:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004700:	683b      	ldr	r3, [r7, #0]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	68fa      	ldr	r2, [r7, #12]
 8004706:	4313      	orrs	r3, r2
 8004708:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	4a16      	ldr	r2, [pc, #88]	@ (8004770 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004718:	4293      	cmp	r3, r2
 800471a:	d00e      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	681b      	ldr	r3, [r3, #0]
 8004720:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004724:	d009      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	681b      	ldr	r3, [r3, #0]
 800472a:	4a12      	ldr	r2, [pc, #72]	@ (8004774 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d004      	beq.n	800473a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	681b      	ldr	r3, [r3, #0]
 8004734:	4a10      	ldr	r2, [pc, #64]	@ (8004778 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004736:	4293      	cmp	r3, r2
 8004738:	d10c      	bne.n	8004754 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004740:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004742:	683b      	ldr	r3, [r7, #0]
 8004744:	685b      	ldr	r3, [r3, #4]
 8004746:	68ba      	ldr	r2, [r7, #8]
 8004748:	4313      	orrs	r3, r2
 800474a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	68ba      	ldr	r2, [r7, #8]
 8004752:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	2201      	movs	r2, #1
 8004758:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	2200      	movs	r2, #0
 8004760:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004764:	2300      	movs	r3, #0
}
 8004766:	4618      	mov	r0, r3
 8004768:	3714      	adds	r7, #20
 800476a:	46bd      	mov	sp, r7
 800476c:	bc80      	pop	{r7}
 800476e:	4770      	bx	lr
 8004770:	40012c00 	.word	0x40012c00
 8004774:	40000400 	.word	0x40000400
 8004778:	40000800 	.word	0x40000800

0800477c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800477c:	b480      	push	{r7}
 800477e:	b083      	sub	sp, #12
 8004780:	af00      	add	r7, sp, #0
 8004782:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004784:	bf00      	nop
 8004786:	370c      	adds	r7, #12
 8004788:	46bd      	mov	sp, r7
 800478a:	bc80      	pop	{r7}
 800478c:	4770      	bx	lr

0800478e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800478e:	b480      	push	{r7}
 8004790:	b083      	sub	sp, #12
 8004792:	af00      	add	r7, sp, #0
 8004794:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004796:	bf00      	nop
 8004798:	370c      	adds	r7, #12
 800479a:	46bd      	mov	sp, r7
 800479c:	bc80      	pop	{r7}
 800479e:	4770      	bx	lr

080047a0 <memset>:
 80047a0:	4603      	mov	r3, r0
 80047a2:	4402      	add	r2, r0
 80047a4:	4293      	cmp	r3, r2
 80047a6:	d100      	bne.n	80047aa <memset+0xa>
 80047a8:	4770      	bx	lr
 80047aa:	f803 1b01 	strb.w	r1, [r3], #1
 80047ae:	e7f9      	b.n	80047a4 <memset+0x4>

080047b0 <__libc_init_array>:
 80047b0:	b570      	push	{r4, r5, r6, lr}
 80047b2:	2600      	movs	r6, #0
 80047b4:	4d0c      	ldr	r5, [pc, #48]	@ (80047e8 <__libc_init_array+0x38>)
 80047b6:	4c0d      	ldr	r4, [pc, #52]	@ (80047ec <__libc_init_array+0x3c>)
 80047b8:	1b64      	subs	r4, r4, r5
 80047ba:	10a4      	asrs	r4, r4, #2
 80047bc:	42a6      	cmp	r6, r4
 80047be:	d109      	bne.n	80047d4 <__libc_init_array+0x24>
 80047c0:	f001 f836 	bl	8005830 <_init>
 80047c4:	2600      	movs	r6, #0
 80047c6:	4d0a      	ldr	r5, [pc, #40]	@ (80047f0 <__libc_init_array+0x40>)
 80047c8:	4c0a      	ldr	r4, [pc, #40]	@ (80047f4 <__libc_init_array+0x44>)
 80047ca:	1b64      	subs	r4, r4, r5
 80047cc:	10a4      	asrs	r4, r4, #2
 80047ce:	42a6      	cmp	r6, r4
 80047d0:	d105      	bne.n	80047de <__libc_init_array+0x2e>
 80047d2:	bd70      	pop	{r4, r5, r6, pc}
 80047d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80047d8:	4798      	blx	r3
 80047da:	3601      	adds	r6, #1
 80047dc:	e7ee      	b.n	80047bc <__libc_init_array+0xc>
 80047de:	f855 3b04 	ldr.w	r3, [r5], #4
 80047e2:	4798      	blx	r3
 80047e4:	3601      	adds	r6, #1
 80047e6:	e7f2      	b.n	80047ce <__libc_init_array+0x1e>
 80047e8:	08005a48 	.word	0x08005a48
 80047ec:	08005a48 	.word	0x08005a48
 80047f0:	08005a48 	.word	0x08005a48
 80047f4:	08005a4c 	.word	0x08005a4c

080047f8 <cos>:
 80047f8:	b530      	push	{r4, r5, lr}
 80047fa:	4d20      	ldr	r5, [pc, #128]	@ (800487c <cos+0x84>)
 80047fc:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004800:	42ac      	cmp	r4, r5
 8004802:	4602      	mov	r2, r0
 8004804:	460b      	mov	r3, r1
 8004806:	b087      	sub	sp, #28
 8004808:	d806      	bhi.n	8004818 <cos+0x20>
 800480a:	2200      	movs	r2, #0
 800480c:	2300      	movs	r3, #0
 800480e:	b007      	add	sp, #28
 8004810:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004814:	f000 b87c 	b.w	8004910 <__kernel_cos>
 8004818:	4d19      	ldr	r5, [pc, #100]	@ (8004880 <cos+0x88>)
 800481a:	42ac      	cmp	r4, r5
 800481c:	d903      	bls.n	8004826 <cos+0x2e>
 800481e:	f7fb fc9b 	bl	8000158 <__aeabi_dsub>
 8004822:	b007      	add	sp, #28
 8004824:	bd30      	pop	{r4, r5, pc}
 8004826:	aa02      	add	r2, sp, #8
 8004828:	f000 f9ea 	bl	8004c00 <__ieee754_rem_pio2>
 800482c:	f000 0003 	and.w	r0, r0, #3
 8004830:	2801      	cmp	r0, #1
 8004832:	d009      	beq.n	8004848 <cos+0x50>
 8004834:	2802      	cmp	r0, #2
 8004836:	d011      	beq.n	800485c <cos+0x64>
 8004838:	b9b8      	cbnz	r0, 800486a <cos+0x72>
 800483a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800483e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004842:	f000 f865 	bl	8004910 <__kernel_cos>
 8004846:	e7ec      	b.n	8004822 <cos+0x2a>
 8004848:	9000      	str	r0, [sp, #0]
 800484a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800484e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004852:	f000 f91d 	bl	8004a90 <__kernel_sin>
 8004856:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 800485a:	e7e2      	b.n	8004822 <cos+0x2a>
 800485c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004860:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004864:	f000 f854 	bl	8004910 <__kernel_cos>
 8004868:	e7f5      	b.n	8004856 <cos+0x5e>
 800486a:	2301      	movs	r3, #1
 800486c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004870:	9300      	str	r3, [sp, #0]
 8004872:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004876:	f000 f90b 	bl	8004a90 <__kernel_sin>
 800487a:	e7d2      	b.n	8004822 <cos+0x2a>
 800487c:	3fe921fb 	.word	0x3fe921fb
 8004880:	7fefffff 	.word	0x7fefffff

08004884 <sin>:
 8004884:	b530      	push	{r4, r5, lr}
 8004886:	4d20      	ldr	r5, [pc, #128]	@ (8004908 <sin+0x84>)
 8004888:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 800488c:	42ac      	cmp	r4, r5
 800488e:	4602      	mov	r2, r0
 8004890:	460b      	mov	r3, r1
 8004892:	b087      	sub	sp, #28
 8004894:	d806      	bhi.n	80048a4 <sin+0x20>
 8004896:	2300      	movs	r3, #0
 8004898:	2200      	movs	r2, #0
 800489a:	9300      	str	r3, [sp, #0]
 800489c:	2300      	movs	r3, #0
 800489e:	f000 f8f7 	bl	8004a90 <__kernel_sin>
 80048a2:	e004      	b.n	80048ae <sin+0x2a>
 80048a4:	4d19      	ldr	r5, [pc, #100]	@ (800490c <sin+0x88>)
 80048a6:	42ac      	cmp	r4, r5
 80048a8:	d903      	bls.n	80048b2 <sin+0x2e>
 80048aa:	f7fb fc55 	bl	8000158 <__aeabi_dsub>
 80048ae:	b007      	add	sp, #28
 80048b0:	bd30      	pop	{r4, r5, pc}
 80048b2:	aa02      	add	r2, sp, #8
 80048b4:	f000 f9a4 	bl	8004c00 <__ieee754_rem_pio2>
 80048b8:	f000 0003 	and.w	r0, r0, #3
 80048bc:	2801      	cmp	r0, #1
 80048be:	d009      	beq.n	80048d4 <sin+0x50>
 80048c0:	2802      	cmp	r0, #2
 80048c2:	d00e      	beq.n	80048e2 <sin+0x5e>
 80048c4:	b9c0      	cbnz	r0, 80048f8 <sin+0x74>
 80048c6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048ca:	2301      	movs	r3, #1
 80048cc:	9300      	str	r3, [sp, #0]
 80048ce:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d2:	e7e4      	b.n	800489e <sin+0x1a>
 80048d4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048d8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048dc:	f000 f818 	bl	8004910 <__kernel_cos>
 80048e0:	e7e5      	b.n	80048ae <sin+0x2a>
 80048e2:	2301      	movs	r3, #1
 80048e4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80048e8:	9300      	str	r3, [sp, #0]
 80048ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048ee:	f000 f8cf 	bl	8004a90 <__kernel_sin>
 80048f2:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 80048f6:	e7da      	b.n	80048ae <sin+0x2a>
 80048f8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80048fc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004900:	f000 f806 	bl	8004910 <__kernel_cos>
 8004904:	e7f5      	b.n	80048f2 <sin+0x6e>
 8004906:	bf00      	nop
 8004908:	3fe921fb 	.word	0x3fe921fb
 800490c:	7fefffff 	.word	0x7fefffff

08004910 <__kernel_cos>:
 8004910:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004914:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004918:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 800491c:	4680      	mov	r8, r0
 800491e:	4689      	mov	r9, r1
 8004920:	e9cd 2300 	strd	r2, r3, [sp]
 8004924:	d204      	bcs.n	8004930 <__kernel_cos+0x20>
 8004926:	f7fc f869 	bl	80009fc <__aeabi_d2iz>
 800492a:	2800      	cmp	r0, #0
 800492c:	f000 8086 	beq.w	8004a3c <__kernel_cos+0x12c>
 8004930:	4642      	mov	r2, r8
 8004932:	464b      	mov	r3, r9
 8004934:	4640      	mov	r0, r8
 8004936:	4649      	mov	r1, r9
 8004938:	f7fb fdc6 	bl	80004c8 <__aeabi_dmul>
 800493c:	2200      	movs	r2, #0
 800493e:	4b4e      	ldr	r3, [pc, #312]	@ (8004a78 <__kernel_cos+0x168>)
 8004940:	4604      	mov	r4, r0
 8004942:	460d      	mov	r5, r1
 8004944:	f7fb fdc0 	bl	80004c8 <__aeabi_dmul>
 8004948:	a33f      	add	r3, pc, #252	@ (adr r3, 8004a48 <__kernel_cos+0x138>)
 800494a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800494e:	4682      	mov	sl, r0
 8004950:	468b      	mov	fp, r1
 8004952:	4620      	mov	r0, r4
 8004954:	4629      	mov	r1, r5
 8004956:	f7fb fdb7 	bl	80004c8 <__aeabi_dmul>
 800495a:	a33d      	add	r3, pc, #244	@ (adr r3, 8004a50 <__kernel_cos+0x140>)
 800495c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004960:	f7fb fbfc 	bl	800015c <__adddf3>
 8004964:	4622      	mov	r2, r4
 8004966:	462b      	mov	r3, r5
 8004968:	f7fb fdae 	bl	80004c8 <__aeabi_dmul>
 800496c:	a33a      	add	r3, pc, #232	@ (adr r3, 8004a58 <__kernel_cos+0x148>)
 800496e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004972:	f7fb fbf1 	bl	8000158 <__aeabi_dsub>
 8004976:	4622      	mov	r2, r4
 8004978:	462b      	mov	r3, r5
 800497a:	f7fb fda5 	bl	80004c8 <__aeabi_dmul>
 800497e:	a338      	add	r3, pc, #224	@ (adr r3, 8004a60 <__kernel_cos+0x150>)
 8004980:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004984:	f7fb fbea 	bl	800015c <__adddf3>
 8004988:	4622      	mov	r2, r4
 800498a:	462b      	mov	r3, r5
 800498c:	f7fb fd9c 	bl	80004c8 <__aeabi_dmul>
 8004990:	a335      	add	r3, pc, #212	@ (adr r3, 8004a68 <__kernel_cos+0x158>)
 8004992:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004996:	f7fb fbdf 	bl	8000158 <__aeabi_dsub>
 800499a:	4622      	mov	r2, r4
 800499c:	462b      	mov	r3, r5
 800499e:	f7fb fd93 	bl	80004c8 <__aeabi_dmul>
 80049a2:	a333      	add	r3, pc, #204	@ (adr r3, 8004a70 <__kernel_cos+0x160>)
 80049a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a8:	f7fb fbd8 	bl	800015c <__adddf3>
 80049ac:	4622      	mov	r2, r4
 80049ae:	462b      	mov	r3, r5
 80049b0:	f7fb fd8a 	bl	80004c8 <__aeabi_dmul>
 80049b4:	4622      	mov	r2, r4
 80049b6:	462b      	mov	r3, r5
 80049b8:	f7fb fd86 	bl	80004c8 <__aeabi_dmul>
 80049bc:	e9dd 2300 	ldrd	r2, r3, [sp]
 80049c0:	4604      	mov	r4, r0
 80049c2:	460d      	mov	r5, r1
 80049c4:	4640      	mov	r0, r8
 80049c6:	4649      	mov	r1, r9
 80049c8:	f7fb fd7e 	bl	80004c8 <__aeabi_dmul>
 80049cc:	460b      	mov	r3, r1
 80049ce:	4602      	mov	r2, r0
 80049d0:	4629      	mov	r1, r5
 80049d2:	4620      	mov	r0, r4
 80049d4:	f7fb fbc0 	bl	8000158 <__aeabi_dsub>
 80049d8:	4b28      	ldr	r3, [pc, #160]	@ (8004a7c <__kernel_cos+0x16c>)
 80049da:	4680      	mov	r8, r0
 80049dc:	429e      	cmp	r6, r3
 80049de:	4689      	mov	r9, r1
 80049e0:	d80e      	bhi.n	8004a00 <__kernel_cos+0xf0>
 80049e2:	4602      	mov	r2, r0
 80049e4:	460b      	mov	r3, r1
 80049e6:	4650      	mov	r0, sl
 80049e8:	4659      	mov	r1, fp
 80049ea:	f7fb fbb5 	bl	8000158 <__aeabi_dsub>
 80049ee:	4602      	mov	r2, r0
 80049f0:	2000      	movs	r0, #0
 80049f2:	460b      	mov	r3, r1
 80049f4:	4922      	ldr	r1, [pc, #136]	@ (8004a80 <__kernel_cos+0x170>)
 80049f6:	f7fb fbaf 	bl	8000158 <__aeabi_dsub>
 80049fa:	b003      	add	sp, #12
 80049fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004a00:	2400      	movs	r4, #0
 8004a02:	4b20      	ldr	r3, [pc, #128]	@ (8004a84 <__kernel_cos+0x174>)
 8004a04:	4622      	mov	r2, r4
 8004a06:	429e      	cmp	r6, r3
 8004a08:	bf8c      	ite	hi
 8004a0a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004a88 <__kernel_cos+0x178>)
 8004a0c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004a10:	462b      	mov	r3, r5
 8004a12:	2000      	movs	r0, #0
 8004a14:	491a      	ldr	r1, [pc, #104]	@ (8004a80 <__kernel_cos+0x170>)
 8004a16:	f7fb fb9f 	bl	8000158 <__aeabi_dsub>
 8004a1a:	4622      	mov	r2, r4
 8004a1c:	4606      	mov	r6, r0
 8004a1e:	460f      	mov	r7, r1
 8004a20:	462b      	mov	r3, r5
 8004a22:	4650      	mov	r0, sl
 8004a24:	4659      	mov	r1, fp
 8004a26:	f7fb fb97 	bl	8000158 <__aeabi_dsub>
 8004a2a:	4642      	mov	r2, r8
 8004a2c:	464b      	mov	r3, r9
 8004a2e:	f7fb fb93 	bl	8000158 <__aeabi_dsub>
 8004a32:	4602      	mov	r2, r0
 8004a34:	460b      	mov	r3, r1
 8004a36:	4630      	mov	r0, r6
 8004a38:	4639      	mov	r1, r7
 8004a3a:	e7dc      	b.n	80049f6 <__kernel_cos+0xe6>
 8004a3c:	2000      	movs	r0, #0
 8004a3e:	4910      	ldr	r1, [pc, #64]	@ (8004a80 <__kernel_cos+0x170>)
 8004a40:	e7db      	b.n	80049fa <__kernel_cos+0xea>
 8004a42:	bf00      	nop
 8004a44:	f3af 8000 	nop.w
 8004a48:	be8838d4 	.word	0xbe8838d4
 8004a4c:	bda8fae9 	.word	0xbda8fae9
 8004a50:	bdb4b1c4 	.word	0xbdb4b1c4
 8004a54:	3e21ee9e 	.word	0x3e21ee9e
 8004a58:	809c52ad 	.word	0x809c52ad
 8004a5c:	3e927e4f 	.word	0x3e927e4f
 8004a60:	19cb1590 	.word	0x19cb1590
 8004a64:	3efa01a0 	.word	0x3efa01a0
 8004a68:	16c15177 	.word	0x16c15177
 8004a6c:	3f56c16c 	.word	0x3f56c16c
 8004a70:	5555554c 	.word	0x5555554c
 8004a74:	3fa55555 	.word	0x3fa55555
 8004a78:	3fe00000 	.word	0x3fe00000
 8004a7c:	3fd33332 	.word	0x3fd33332
 8004a80:	3ff00000 	.word	0x3ff00000
 8004a84:	3fe90000 	.word	0x3fe90000
 8004a88:	3fd20000 	.word	0x3fd20000
 8004a8c:	00000000 	.word	0x00000000

08004a90 <__kernel_sin>:
 8004a90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004a94:	461f      	mov	r7, r3
 8004a96:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004a9a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004a9e:	4604      	mov	r4, r0
 8004aa0:	460d      	mov	r5, r1
 8004aa2:	4616      	mov	r6, r2
 8004aa4:	b085      	sub	sp, #20
 8004aa6:	d203      	bcs.n	8004ab0 <__kernel_sin+0x20>
 8004aa8:	f7fb ffa8 	bl	80009fc <__aeabi_d2iz>
 8004aac:	2800      	cmp	r0, #0
 8004aae:	d051      	beq.n	8004b54 <__kernel_sin+0xc4>
 8004ab0:	4622      	mov	r2, r4
 8004ab2:	462b      	mov	r3, r5
 8004ab4:	4620      	mov	r0, r4
 8004ab6:	4629      	mov	r1, r5
 8004ab8:	f7fb fd06 	bl	80004c8 <__aeabi_dmul>
 8004abc:	4682      	mov	sl, r0
 8004abe:	468b      	mov	fp, r1
 8004ac0:	4602      	mov	r2, r0
 8004ac2:	460b      	mov	r3, r1
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	f7fb fcfe 	bl	80004c8 <__aeabi_dmul>
 8004acc:	a33e      	add	r3, pc, #248	@ (adr r3, 8004bc8 <__kernel_sin+0x138>)
 8004ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ad2:	4680      	mov	r8, r0
 8004ad4:	4689      	mov	r9, r1
 8004ad6:	4650      	mov	r0, sl
 8004ad8:	4659      	mov	r1, fp
 8004ada:	f7fb fcf5 	bl	80004c8 <__aeabi_dmul>
 8004ade:	a33c      	add	r3, pc, #240	@ (adr r3, 8004bd0 <__kernel_sin+0x140>)
 8004ae0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ae4:	f7fb fb38 	bl	8000158 <__aeabi_dsub>
 8004ae8:	4652      	mov	r2, sl
 8004aea:	465b      	mov	r3, fp
 8004aec:	f7fb fcec 	bl	80004c8 <__aeabi_dmul>
 8004af0:	a339      	add	r3, pc, #228	@ (adr r3, 8004bd8 <__kernel_sin+0x148>)
 8004af2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004af6:	f7fb fb31 	bl	800015c <__adddf3>
 8004afa:	4652      	mov	r2, sl
 8004afc:	465b      	mov	r3, fp
 8004afe:	f7fb fce3 	bl	80004c8 <__aeabi_dmul>
 8004b02:	a337      	add	r3, pc, #220	@ (adr r3, 8004be0 <__kernel_sin+0x150>)
 8004b04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b08:	f7fb fb26 	bl	8000158 <__aeabi_dsub>
 8004b0c:	4652      	mov	r2, sl
 8004b0e:	465b      	mov	r3, fp
 8004b10:	f7fb fcda 	bl	80004c8 <__aeabi_dmul>
 8004b14:	a334      	add	r3, pc, #208	@ (adr r3, 8004be8 <__kernel_sin+0x158>)
 8004b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b1a:	f7fb fb1f 	bl	800015c <__adddf3>
 8004b1e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004b20:	e9cd 0100 	strd	r0, r1, [sp]
 8004b24:	b9db      	cbnz	r3, 8004b5e <__kernel_sin+0xce>
 8004b26:	4602      	mov	r2, r0
 8004b28:	460b      	mov	r3, r1
 8004b2a:	4650      	mov	r0, sl
 8004b2c:	4659      	mov	r1, fp
 8004b2e:	f7fb fccb 	bl	80004c8 <__aeabi_dmul>
 8004b32:	a32f      	add	r3, pc, #188	@ (adr r3, 8004bf0 <__kernel_sin+0x160>)
 8004b34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b38:	f7fb fb0e 	bl	8000158 <__aeabi_dsub>
 8004b3c:	4642      	mov	r2, r8
 8004b3e:	464b      	mov	r3, r9
 8004b40:	f7fb fcc2 	bl	80004c8 <__aeabi_dmul>
 8004b44:	4602      	mov	r2, r0
 8004b46:	460b      	mov	r3, r1
 8004b48:	4620      	mov	r0, r4
 8004b4a:	4629      	mov	r1, r5
 8004b4c:	f7fb fb06 	bl	800015c <__adddf3>
 8004b50:	4604      	mov	r4, r0
 8004b52:	460d      	mov	r5, r1
 8004b54:	4620      	mov	r0, r4
 8004b56:	4629      	mov	r1, r5
 8004b58:	b005      	add	sp, #20
 8004b5a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b5e:	2200      	movs	r2, #0
 8004b60:	4630      	mov	r0, r6
 8004b62:	4639      	mov	r1, r7
 8004b64:	4b24      	ldr	r3, [pc, #144]	@ (8004bf8 <__kernel_sin+0x168>)
 8004b66:	f7fb fcaf 	bl	80004c8 <__aeabi_dmul>
 8004b6a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004b6e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004b72:	4640      	mov	r0, r8
 8004b74:	4649      	mov	r1, r9
 8004b76:	f7fb fca7 	bl	80004c8 <__aeabi_dmul>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	460b      	mov	r3, r1
 8004b7e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b82:	f7fb fae9 	bl	8000158 <__aeabi_dsub>
 8004b86:	4652      	mov	r2, sl
 8004b88:	465b      	mov	r3, fp
 8004b8a:	f7fb fc9d 	bl	80004c8 <__aeabi_dmul>
 8004b8e:	4632      	mov	r2, r6
 8004b90:	463b      	mov	r3, r7
 8004b92:	f7fb fae1 	bl	8000158 <__aeabi_dsub>
 8004b96:	a316      	add	r3, pc, #88	@ (adr r3, 8004bf0 <__kernel_sin+0x160>)
 8004b98:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b9c:	4606      	mov	r6, r0
 8004b9e:	460f      	mov	r7, r1
 8004ba0:	4640      	mov	r0, r8
 8004ba2:	4649      	mov	r1, r9
 8004ba4:	f7fb fc90 	bl	80004c8 <__aeabi_dmul>
 8004ba8:	4602      	mov	r2, r0
 8004baa:	460b      	mov	r3, r1
 8004bac:	4630      	mov	r0, r6
 8004bae:	4639      	mov	r1, r7
 8004bb0:	f7fb fad4 	bl	800015c <__adddf3>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	460b      	mov	r3, r1
 8004bb8:	4620      	mov	r0, r4
 8004bba:	4629      	mov	r1, r5
 8004bbc:	f7fb facc 	bl	8000158 <__aeabi_dsub>
 8004bc0:	e7c6      	b.n	8004b50 <__kernel_sin+0xc0>
 8004bc2:	bf00      	nop
 8004bc4:	f3af 8000 	nop.w
 8004bc8:	5acfd57c 	.word	0x5acfd57c
 8004bcc:	3de5d93a 	.word	0x3de5d93a
 8004bd0:	8a2b9ceb 	.word	0x8a2b9ceb
 8004bd4:	3e5ae5e6 	.word	0x3e5ae5e6
 8004bd8:	57b1fe7d 	.word	0x57b1fe7d
 8004bdc:	3ec71de3 	.word	0x3ec71de3
 8004be0:	19c161d5 	.word	0x19c161d5
 8004be4:	3f2a01a0 	.word	0x3f2a01a0
 8004be8:	1110f8a6 	.word	0x1110f8a6
 8004bec:	3f811111 	.word	0x3f811111
 8004bf0:	55555549 	.word	0x55555549
 8004bf4:	3fc55555 	.word	0x3fc55555
 8004bf8:	3fe00000 	.word	0x3fe00000
 8004bfc:	00000000 	.word	0x00000000

08004c00 <__ieee754_rem_pio2>:
 8004c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c04:	4bc4      	ldr	r3, [pc, #784]	@ (8004f18 <__ieee754_rem_pio2+0x318>)
 8004c06:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 8004c0a:	b08d      	sub	sp, #52	@ 0x34
 8004c0c:	4598      	cmp	r8, r3
 8004c0e:	4606      	mov	r6, r0
 8004c10:	460f      	mov	r7, r1
 8004c12:	4614      	mov	r4, r2
 8004c14:	9104      	str	r1, [sp, #16]
 8004c16:	d807      	bhi.n	8004c28 <__ieee754_rem_pio2+0x28>
 8004c18:	e9c2 6700 	strd	r6, r7, [r2]
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	2200      	movs	r2, #0
 8004c20:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004c24:	2500      	movs	r5, #0
 8004c26:	e026      	b.n	8004c76 <__ieee754_rem_pio2+0x76>
 8004c28:	4bbc      	ldr	r3, [pc, #752]	@ (8004f1c <__ieee754_rem_pio2+0x31c>)
 8004c2a:	4598      	cmp	r8, r3
 8004c2c:	d876      	bhi.n	8004d1c <__ieee754_rem_pio2+0x11c>
 8004c2e:	9b04      	ldr	r3, [sp, #16]
 8004c30:	4dbb      	ldr	r5, [pc, #748]	@ (8004f20 <__ieee754_rem_pio2+0x320>)
 8004c32:	2b00      	cmp	r3, #0
 8004c34:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004ee0 <__ieee754_rem_pio2+0x2e0>)
 8004c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3a:	dd38      	ble.n	8004cae <__ieee754_rem_pio2+0xae>
 8004c3c:	f7fb fa8c 	bl	8000158 <__aeabi_dsub>
 8004c40:	45a8      	cmp	r8, r5
 8004c42:	4606      	mov	r6, r0
 8004c44:	460f      	mov	r7, r1
 8004c46:	d01a      	beq.n	8004c7e <__ieee754_rem_pio2+0x7e>
 8004c48:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004ee8 <__ieee754_rem_pio2+0x2e8>)
 8004c4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c4e:	f7fb fa83 	bl	8000158 <__aeabi_dsub>
 8004c52:	4602      	mov	r2, r0
 8004c54:	460b      	mov	r3, r1
 8004c56:	4680      	mov	r8, r0
 8004c58:	4689      	mov	r9, r1
 8004c5a:	4630      	mov	r0, r6
 8004c5c:	4639      	mov	r1, r7
 8004c5e:	f7fb fa7b 	bl	8000158 <__aeabi_dsub>
 8004c62:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004ee8 <__ieee754_rem_pio2+0x2e8>)
 8004c64:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c68:	f7fb fa76 	bl	8000158 <__aeabi_dsub>
 8004c6c:	2501      	movs	r5, #1
 8004c6e:	e9c4 8900 	strd	r8, r9, [r4]
 8004c72:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004c76:	4628      	mov	r0, r5
 8004c78:	b00d      	add	sp, #52	@ 0x34
 8004c7a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004c7e:	a39c      	add	r3, pc, #624	@ (adr r3, 8004ef0 <__ieee754_rem_pio2+0x2f0>)
 8004c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c84:	f7fb fa68 	bl	8000158 <__aeabi_dsub>
 8004c88:	a39b      	add	r3, pc, #620	@ (adr r3, 8004ef8 <__ieee754_rem_pio2+0x2f8>)
 8004c8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c8e:	4606      	mov	r6, r0
 8004c90:	460f      	mov	r7, r1
 8004c92:	f7fb fa61 	bl	8000158 <__aeabi_dsub>
 8004c96:	4602      	mov	r2, r0
 8004c98:	460b      	mov	r3, r1
 8004c9a:	4680      	mov	r8, r0
 8004c9c:	4689      	mov	r9, r1
 8004c9e:	4630      	mov	r0, r6
 8004ca0:	4639      	mov	r1, r7
 8004ca2:	f7fb fa59 	bl	8000158 <__aeabi_dsub>
 8004ca6:	a394      	add	r3, pc, #592	@ (adr r3, 8004ef8 <__ieee754_rem_pio2+0x2f8>)
 8004ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cac:	e7dc      	b.n	8004c68 <__ieee754_rem_pio2+0x68>
 8004cae:	f7fb fa55 	bl	800015c <__adddf3>
 8004cb2:	45a8      	cmp	r8, r5
 8004cb4:	4606      	mov	r6, r0
 8004cb6:	460f      	mov	r7, r1
 8004cb8:	d018      	beq.n	8004cec <__ieee754_rem_pio2+0xec>
 8004cba:	a38b      	add	r3, pc, #556	@ (adr r3, 8004ee8 <__ieee754_rem_pio2+0x2e8>)
 8004cbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cc0:	f7fb fa4c 	bl	800015c <__adddf3>
 8004cc4:	4602      	mov	r2, r0
 8004cc6:	460b      	mov	r3, r1
 8004cc8:	4680      	mov	r8, r0
 8004cca:	4689      	mov	r9, r1
 8004ccc:	4630      	mov	r0, r6
 8004cce:	4639      	mov	r1, r7
 8004cd0:	f7fb fa42 	bl	8000158 <__aeabi_dsub>
 8004cd4:	a384      	add	r3, pc, #528	@ (adr r3, 8004ee8 <__ieee754_rem_pio2+0x2e8>)
 8004cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cda:	f7fb fa3f 	bl	800015c <__adddf3>
 8004cde:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004ce2:	e9c4 8900 	strd	r8, r9, [r4]
 8004ce6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004cea:	e7c4      	b.n	8004c76 <__ieee754_rem_pio2+0x76>
 8004cec:	a380      	add	r3, pc, #512	@ (adr r3, 8004ef0 <__ieee754_rem_pio2+0x2f0>)
 8004cee:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf2:	f7fb fa33 	bl	800015c <__adddf3>
 8004cf6:	a380      	add	r3, pc, #512	@ (adr r3, 8004ef8 <__ieee754_rem_pio2+0x2f8>)
 8004cf8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cfc:	4606      	mov	r6, r0
 8004cfe:	460f      	mov	r7, r1
 8004d00:	f7fb fa2c 	bl	800015c <__adddf3>
 8004d04:	4602      	mov	r2, r0
 8004d06:	460b      	mov	r3, r1
 8004d08:	4680      	mov	r8, r0
 8004d0a:	4689      	mov	r9, r1
 8004d0c:	4630      	mov	r0, r6
 8004d0e:	4639      	mov	r1, r7
 8004d10:	f7fb fa22 	bl	8000158 <__aeabi_dsub>
 8004d14:	a378      	add	r3, pc, #480	@ (adr r3, 8004ef8 <__ieee754_rem_pio2+0x2f8>)
 8004d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d1a:	e7de      	b.n	8004cda <__ieee754_rem_pio2+0xda>
 8004d1c:	4b81      	ldr	r3, [pc, #516]	@ (8004f24 <__ieee754_rem_pio2+0x324>)
 8004d1e:	4598      	cmp	r8, r3
 8004d20:	f200 80cf 	bhi.w	8004ec2 <__ieee754_rem_pio2+0x2c2>
 8004d24:	f000 f962 	bl	8004fec <fabs>
 8004d28:	a375      	add	r3, pc, #468	@ (adr r3, 8004f00 <__ieee754_rem_pio2+0x300>)
 8004d2a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d2e:	4606      	mov	r6, r0
 8004d30:	460f      	mov	r7, r1
 8004d32:	f7fb fbc9 	bl	80004c8 <__aeabi_dmul>
 8004d36:	2200      	movs	r2, #0
 8004d38:	4b7b      	ldr	r3, [pc, #492]	@ (8004f28 <__ieee754_rem_pio2+0x328>)
 8004d3a:	f7fb fa0f 	bl	800015c <__adddf3>
 8004d3e:	f7fb fe5d 	bl	80009fc <__aeabi_d2iz>
 8004d42:	4605      	mov	r5, r0
 8004d44:	f7fb fb56 	bl	80003f4 <__aeabi_i2d>
 8004d48:	4602      	mov	r2, r0
 8004d4a:	460b      	mov	r3, r1
 8004d4c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004d50:	a363      	add	r3, pc, #396	@ (adr r3, 8004ee0 <__ieee754_rem_pio2+0x2e0>)
 8004d52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d56:	f7fb fbb7 	bl	80004c8 <__aeabi_dmul>
 8004d5a:	4602      	mov	r2, r0
 8004d5c:	460b      	mov	r3, r1
 8004d5e:	4630      	mov	r0, r6
 8004d60:	4639      	mov	r1, r7
 8004d62:	f7fb f9f9 	bl	8000158 <__aeabi_dsub>
 8004d66:	a360      	add	r3, pc, #384	@ (adr r3, 8004ee8 <__ieee754_rem_pio2+0x2e8>)
 8004d68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d6c:	4682      	mov	sl, r0
 8004d6e:	468b      	mov	fp, r1
 8004d70:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004d74:	f7fb fba8 	bl	80004c8 <__aeabi_dmul>
 8004d78:	2d1f      	cmp	r5, #31
 8004d7a:	4606      	mov	r6, r0
 8004d7c:	460f      	mov	r7, r1
 8004d7e:	dc0c      	bgt.n	8004d9a <__ieee754_rem_pio2+0x19a>
 8004d80:	4b6a      	ldr	r3, [pc, #424]	@ (8004f2c <__ieee754_rem_pio2+0x32c>)
 8004d82:	1e6a      	subs	r2, r5, #1
 8004d84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004d88:	4543      	cmp	r3, r8
 8004d8a:	d006      	beq.n	8004d9a <__ieee754_rem_pio2+0x19a>
 8004d8c:	4632      	mov	r2, r6
 8004d8e:	463b      	mov	r3, r7
 8004d90:	4650      	mov	r0, sl
 8004d92:	4659      	mov	r1, fp
 8004d94:	f7fb f9e0 	bl	8000158 <__aeabi_dsub>
 8004d98:	e00e      	b.n	8004db8 <__ieee754_rem_pio2+0x1b8>
 8004d9a:	463b      	mov	r3, r7
 8004d9c:	4632      	mov	r2, r6
 8004d9e:	4650      	mov	r0, sl
 8004da0:	4659      	mov	r1, fp
 8004da2:	f7fb f9d9 	bl	8000158 <__aeabi_dsub>
 8004da6:	ea4f 5328 	mov.w	r3, r8, asr #20
 8004daa:	9305      	str	r3, [sp, #20]
 8004dac:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004db0:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004db4:	2b10      	cmp	r3, #16
 8004db6:	dc02      	bgt.n	8004dbe <__ieee754_rem_pio2+0x1be>
 8004db8:	e9c4 0100 	strd	r0, r1, [r4]
 8004dbc:	e039      	b.n	8004e32 <__ieee754_rem_pio2+0x232>
 8004dbe:	a34c      	add	r3, pc, #304	@ (adr r3, 8004ef0 <__ieee754_rem_pio2+0x2f0>)
 8004dc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004dc8:	f7fb fb7e 	bl	80004c8 <__aeabi_dmul>
 8004dcc:	4606      	mov	r6, r0
 8004dce:	460f      	mov	r7, r1
 8004dd0:	4602      	mov	r2, r0
 8004dd2:	460b      	mov	r3, r1
 8004dd4:	4650      	mov	r0, sl
 8004dd6:	4659      	mov	r1, fp
 8004dd8:	f7fb f9be 	bl	8000158 <__aeabi_dsub>
 8004ddc:	4602      	mov	r2, r0
 8004dde:	460b      	mov	r3, r1
 8004de0:	4680      	mov	r8, r0
 8004de2:	4689      	mov	r9, r1
 8004de4:	4650      	mov	r0, sl
 8004de6:	4659      	mov	r1, fp
 8004de8:	f7fb f9b6 	bl	8000158 <__aeabi_dsub>
 8004dec:	4632      	mov	r2, r6
 8004dee:	463b      	mov	r3, r7
 8004df0:	f7fb f9b2 	bl	8000158 <__aeabi_dsub>
 8004df4:	a340      	add	r3, pc, #256	@ (adr r3, 8004ef8 <__ieee754_rem_pio2+0x2f8>)
 8004df6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dfa:	4606      	mov	r6, r0
 8004dfc:	460f      	mov	r7, r1
 8004dfe:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e02:	f7fb fb61 	bl	80004c8 <__aeabi_dmul>
 8004e06:	4632      	mov	r2, r6
 8004e08:	463b      	mov	r3, r7
 8004e0a:	f7fb f9a5 	bl	8000158 <__aeabi_dsub>
 8004e0e:	4602      	mov	r2, r0
 8004e10:	460b      	mov	r3, r1
 8004e12:	4606      	mov	r6, r0
 8004e14:	460f      	mov	r7, r1
 8004e16:	4640      	mov	r0, r8
 8004e18:	4649      	mov	r1, r9
 8004e1a:	f7fb f99d 	bl	8000158 <__aeabi_dsub>
 8004e1e:	9a05      	ldr	r2, [sp, #20]
 8004e20:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004e24:	1ad3      	subs	r3, r2, r3
 8004e26:	2b31      	cmp	r3, #49	@ 0x31
 8004e28:	dc20      	bgt.n	8004e6c <__ieee754_rem_pio2+0x26c>
 8004e2a:	46c2      	mov	sl, r8
 8004e2c:	46cb      	mov	fp, r9
 8004e2e:	e9c4 0100 	strd	r0, r1, [r4]
 8004e32:	e9d4 8900 	ldrd	r8, r9, [r4]
 8004e36:	4650      	mov	r0, sl
 8004e38:	4642      	mov	r2, r8
 8004e3a:	464b      	mov	r3, r9
 8004e3c:	4659      	mov	r1, fp
 8004e3e:	f7fb f98b 	bl	8000158 <__aeabi_dsub>
 8004e42:	463b      	mov	r3, r7
 8004e44:	4632      	mov	r2, r6
 8004e46:	f7fb f987 	bl	8000158 <__aeabi_dsub>
 8004e4a:	9b04      	ldr	r3, [sp, #16]
 8004e4c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	f6bf af10 	bge.w	8004c76 <__ieee754_rem_pio2+0x76>
 8004e56:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004e5a:	6063      	str	r3, [r4, #4]
 8004e5c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004e60:	f8c4 8000 	str.w	r8, [r4]
 8004e64:	60a0      	str	r0, [r4, #8]
 8004e66:	60e3      	str	r3, [r4, #12]
 8004e68:	426d      	negs	r5, r5
 8004e6a:	e704      	b.n	8004c76 <__ieee754_rem_pio2+0x76>
 8004e6c:	a326      	add	r3, pc, #152	@ (adr r3, 8004f08 <__ieee754_rem_pio2+0x308>)
 8004e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e72:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e76:	f7fb fb27 	bl	80004c8 <__aeabi_dmul>
 8004e7a:	4606      	mov	r6, r0
 8004e7c:	460f      	mov	r7, r1
 8004e7e:	4602      	mov	r2, r0
 8004e80:	460b      	mov	r3, r1
 8004e82:	4640      	mov	r0, r8
 8004e84:	4649      	mov	r1, r9
 8004e86:	f7fb f967 	bl	8000158 <__aeabi_dsub>
 8004e8a:	4602      	mov	r2, r0
 8004e8c:	460b      	mov	r3, r1
 8004e8e:	4682      	mov	sl, r0
 8004e90:	468b      	mov	fp, r1
 8004e92:	4640      	mov	r0, r8
 8004e94:	4649      	mov	r1, r9
 8004e96:	f7fb f95f 	bl	8000158 <__aeabi_dsub>
 8004e9a:	4632      	mov	r2, r6
 8004e9c:	463b      	mov	r3, r7
 8004e9e:	f7fb f95b 	bl	8000158 <__aeabi_dsub>
 8004ea2:	a31b      	add	r3, pc, #108	@ (adr r3, 8004f10 <__ieee754_rem_pio2+0x310>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	4606      	mov	r6, r0
 8004eaa:	460f      	mov	r7, r1
 8004eac:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004eb0:	f7fb fb0a 	bl	80004c8 <__aeabi_dmul>
 8004eb4:	4632      	mov	r2, r6
 8004eb6:	463b      	mov	r3, r7
 8004eb8:	f7fb f94e 	bl	8000158 <__aeabi_dsub>
 8004ebc:	4606      	mov	r6, r0
 8004ebe:	460f      	mov	r7, r1
 8004ec0:	e764      	b.n	8004d8c <__ieee754_rem_pio2+0x18c>
 8004ec2:	4b1b      	ldr	r3, [pc, #108]	@ (8004f30 <__ieee754_rem_pio2+0x330>)
 8004ec4:	4598      	cmp	r8, r3
 8004ec6:	d935      	bls.n	8004f34 <__ieee754_rem_pio2+0x334>
 8004ec8:	4602      	mov	r2, r0
 8004eca:	460b      	mov	r3, r1
 8004ecc:	f7fb f944 	bl	8000158 <__aeabi_dsub>
 8004ed0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004ed4:	e9c4 0100 	strd	r0, r1, [r4]
 8004ed8:	e6a4      	b.n	8004c24 <__ieee754_rem_pio2+0x24>
 8004eda:	bf00      	nop
 8004edc:	f3af 8000 	nop.w
 8004ee0:	54400000 	.word	0x54400000
 8004ee4:	3ff921fb 	.word	0x3ff921fb
 8004ee8:	1a626331 	.word	0x1a626331
 8004eec:	3dd0b461 	.word	0x3dd0b461
 8004ef0:	1a600000 	.word	0x1a600000
 8004ef4:	3dd0b461 	.word	0x3dd0b461
 8004ef8:	2e037073 	.word	0x2e037073
 8004efc:	3ba3198a 	.word	0x3ba3198a
 8004f00:	6dc9c883 	.word	0x6dc9c883
 8004f04:	3fe45f30 	.word	0x3fe45f30
 8004f08:	2e000000 	.word	0x2e000000
 8004f0c:	3ba3198a 	.word	0x3ba3198a
 8004f10:	252049c1 	.word	0x252049c1
 8004f14:	397b839a 	.word	0x397b839a
 8004f18:	3fe921fb 	.word	0x3fe921fb
 8004f1c:	4002d97b 	.word	0x4002d97b
 8004f20:	3ff921fb 	.word	0x3ff921fb
 8004f24:	413921fb 	.word	0x413921fb
 8004f28:	3fe00000 	.word	0x3fe00000
 8004f2c:	0800586c 	.word	0x0800586c
 8004f30:	7fefffff 	.word	0x7fefffff
 8004f34:	ea4f 5528 	mov.w	r5, r8, asr #20
 8004f38:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 8004f3c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8004f40:	460f      	mov	r7, r1
 8004f42:	f7fb fd5b 	bl	80009fc <__aeabi_d2iz>
 8004f46:	f7fb fa55 	bl	80003f4 <__aeabi_i2d>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	460b      	mov	r3, r1
 8004f4e:	4630      	mov	r0, r6
 8004f50:	4639      	mov	r1, r7
 8004f52:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8004f56:	f7fb f8ff 	bl	8000158 <__aeabi_dsub>
 8004f5a:	2200      	movs	r2, #0
 8004f5c:	4b21      	ldr	r3, [pc, #132]	@ (8004fe4 <__ieee754_rem_pio2+0x3e4>)
 8004f5e:	f7fb fab3 	bl	80004c8 <__aeabi_dmul>
 8004f62:	460f      	mov	r7, r1
 8004f64:	4606      	mov	r6, r0
 8004f66:	f7fb fd49 	bl	80009fc <__aeabi_d2iz>
 8004f6a:	f7fb fa43 	bl	80003f4 <__aeabi_i2d>
 8004f6e:	4602      	mov	r2, r0
 8004f70:	460b      	mov	r3, r1
 8004f72:	4630      	mov	r0, r6
 8004f74:	4639      	mov	r1, r7
 8004f76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8004f7a:	f7fb f8ed 	bl	8000158 <__aeabi_dsub>
 8004f7e:	2200      	movs	r2, #0
 8004f80:	4b18      	ldr	r3, [pc, #96]	@ (8004fe4 <__ieee754_rem_pio2+0x3e4>)
 8004f82:	f7fb faa1 	bl	80004c8 <__aeabi_dmul>
 8004f86:	f04f 0803 	mov.w	r8, #3
 8004f8a:	2600      	movs	r6, #0
 8004f8c:	2700      	movs	r7, #0
 8004f8e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004f92:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004f96:	4632      	mov	r2, r6
 8004f98:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 8004f9c:	463b      	mov	r3, r7
 8004f9e:	46c2      	mov	sl, r8
 8004fa0:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004fa4:	f7fb fcf8 	bl	8000998 <__aeabi_dcmpeq>
 8004fa8:	2800      	cmp	r0, #0
 8004faa:	d1f4      	bne.n	8004f96 <__ieee754_rem_pio2+0x396>
 8004fac:	4b0e      	ldr	r3, [pc, #56]	@ (8004fe8 <__ieee754_rem_pio2+0x3e8>)
 8004fae:	462a      	mov	r2, r5
 8004fb0:	9301      	str	r3, [sp, #4]
 8004fb2:	2302      	movs	r3, #2
 8004fb4:	4621      	mov	r1, r4
 8004fb6:	9300      	str	r3, [sp, #0]
 8004fb8:	a806      	add	r0, sp, #24
 8004fba:	4653      	mov	r3, sl
 8004fbc:	f000 f81a 	bl	8004ff4 <__kernel_rem_pio2>
 8004fc0:	9b04      	ldr	r3, [sp, #16]
 8004fc2:	4605      	mov	r5, r0
 8004fc4:	2b00      	cmp	r3, #0
 8004fc6:	f6bf ae56 	bge.w	8004c76 <__ieee754_rem_pio2+0x76>
 8004fca:	e9d4 2100 	ldrd	r2, r1, [r4]
 8004fce:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fd2:	e9c4 2300 	strd	r2, r3, [r4]
 8004fd6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 8004fda:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fde:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004fe2:	e741      	b.n	8004e68 <__ieee754_rem_pio2+0x268>
 8004fe4:	41700000 	.word	0x41700000
 8004fe8:	080058ec 	.word	0x080058ec

08004fec <fabs>:
 8004fec:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004ff0:	4619      	mov	r1, r3
 8004ff2:	4770      	bx	lr

08004ff4 <__kernel_rem_pio2>:
 8004ff4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ff8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 8004ffc:	9308      	str	r3, [sp, #32]
 8004ffe:	9104      	str	r1, [sp, #16]
 8005000:	4bb6      	ldr	r3, [pc, #728]	@ (80052dc <__kernel_rem_pio2+0x2e8>)
 8005002:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8005004:	f112 0f14 	cmn.w	r2, #20
 8005008:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800500c:	bfa8      	it	ge
 800500e:	1ed4      	subge	r4, r2, #3
 8005010:	9302      	str	r3, [sp, #8]
 8005012:	9b08      	ldr	r3, [sp, #32]
 8005014:	bfb8      	it	lt
 8005016:	2400      	movlt	r4, #0
 8005018:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800501c:	9306      	str	r3, [sp, #24]
 800501e:	bfa4      	itt	ge
 8005020:	2318      	movge	r3, #24
 8005022:	fb94 f4f3 	sdivge	r4, r4, r3
 8005026:	f06f 0317 	mvn.w	r3, #23
 800502a:	fb04 3303 	mla	r3, r4, r3, r3
 800502e:	eb03 0a02 	add.w	sl, r3, r2
 8005032:	9a06      	ldr	r2, [sp, #24]
 8005034:	9b02      	ldr	r3, [sp, #8]
 8005036:	1aa7      	subs	r7, r4, r2
 8005038:	eb03 0802 	add.w	r8, r3, r2
 800503c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800503e:	2500      	movs	r5, #0
 8005040:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005044:	2200      	movs	r2, #0
 8005046:	2300      	movs	r3, #0
 8005048:	9009      	str	r0, [sp, #36]	@ 0x24
 800504a:	ae20      	add	r6, sp, #128	@ 0x80
 800504c:	4545      	cmp	r5, r8
 800504e:	dd14      	ble.n	800507a <__kernel_rem_pio2+0x86>
 8005050:	f04f 0800 	mov.w	r8, #0
 8005054:	9a08      	ldr	r2, [sp, #32]
 8005056:	ab20      	add	r3, sp, #128	@ 0x80
 8005058:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800505c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8005060:	9b02      	ldr	r3, [sp, #8]
 8005062:	4598      	cmp	r8, r3
 8005064:	dc35      	bgt.n	80050d2 <__kernel_rem_pio2+0xde>
 8005066:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005068:	2200      	movs	r2, #0
 800506a:	f1a3 0908 	sub.w	r9, r3, #8
 800506e:	2300      	movs	r3, #0
 8005070:	462f      	mov	r7, r5
 8005072:	2600      	movs	r6, #0
 8005074:	e9cd 2300 	strd	r2, r3, [sp]
 8005078:	e01f      	b.n	80050ba <__kernel_rem_pio2+0xc6>
 800507a:	42ef      	cmn	r7, r5
 800507c:	d40b      	bmi.n	8005096 <__kernel_rem_pio2+0xa2>
 800507e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005082:	e9cd 2300 	strd	r2, r3, [sp]
 8005086:	f7fb f9b5 	bl	80003f4 <__aeabi_i2d>
 800508a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800508e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005092:	3501      	adds	r5, #1
 8005094:	e7da      	b.n	800504c <__kernel_rem_pio2+0x58>
 8005096:	4610      	mov	r0, r2
 8005098:	4619      	mov	r1, r3
 800509a:	e7f8      	b.n	800508e <__kernel_rem_pio2+0x9a>
 800509c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050a0:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 80050a4:	f7fb fa10 	bl	80004c8 <__aeabi_dmul>
 80050a8:	4602      	mov	r2, r0
 80050aa:	460b      	mov	r3, r1
 80050ac:	e9dd 0100 	ldrd	r0, r1, [sp]
 80050b0:	f7fb f854 	bl	800015c <__adddf3>
 80050b4:	e9cd 0100 	strd	r0, r1, [sp]
 80050b8:	3601      	adds	r6, #1
 80050ba:	9b06      	ldr	r3, [sp, #24]
 80050bc:	3f08      	subs	r7, #8
 80050be:	429e      	cmp	r6, r3
 80050c0:	ddec      	ble.n	800509c <__kernel_rem_pio2+0xa8>
 80050c2:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050c6:	f108 0801 	add.w	r8, r8, #1
 80050ca:	e8eb 2302 	strd	r2, r3, [fp], #8
 80050ce:	3508      	adds	r5, #8
 80050d0:	e7c6      	b.n	8005060 <__kernel_rem_pio2+0x6c>
 80050d2:	9b02      	ldr	r3, [sp, #8]
 80050d4:	aa0c      	add	r2, sp, #48	@ 0x30
 80050d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80050da:	930b      	str	r3, [sp, #44]	@ 0x2c
 80050dc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80050de:	f8dd b008 	ldr.w	fp, [sp, #8]
 80050e2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80050e6:	930a      	str	r3, [sp, #40]	@ 0x28
 80050e8:	ab98      	add	r3, sp, #608	@ 0x260
 80050ea:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050ee:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80050f2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80050f4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80050f8:	ae0c      	add	r6, sp, #48	@ 0x30
 80050fa:	4698      	mov	r8, r3
 80050fc:	46b1      	mov	r9, r6
 80050fe:	465f      	mov	r7, fp
 8005100:	9307      	str	r3, [sp, #28]
 8005102:	2f00      	cmp	r7, #0
 8005104:	f1a8 0808 	sub.w	r8, r8, #8
 8005108:	dc71      	bgt.n	80051ee <__kernel_rem_pio2+0x1fa>
 800510a:	4652      	mov	r2, sl
 800510c:	4620      	mov	r0, r4
 800510e:	4629      	mov	r1, r5
 8005110:	f000 fa96 	bl	8005640 <scalbn>
 8005114:	2200      	movs	r2, #0
 8005116:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800511a:	4604      	mov	r4, r0
 800511c:	460d      	mov	r5, r1
 800511e:	f7fb f9d3 	bl	80004c8 <__aeabi_dmul>
 8005122:	f000 fb05 	bl	8005730 <floor>
 8005126:	2200      	movs	r2, #0
 8005128:	4b6d      	ldr	r3, [pc, #436]	@ (80052e0 <__kernel_rem_pio2+0x2ec>)
 800512a:	f7fb f9cd 	bl	80004c8 <__aeabi_dmul>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	4620      	mov	r0, r4
 8005134:	4629      	mov	r1, r5
 8005136:	f7fb f80f 	bl	8000158 <__aeabi_dsub>
 800513a:	460d      	mov	r5, r1
 800513c:	4604      	mov	r4, r0
 800513e:	f7fb fc5d 	bl	80009fc <__aeabi_d2iz>
 8005142:	9005      	str	r0, [sp, #20]
 8005144:	f7fb f956 	bl	80003f4 <__aeabi_i2d>
 8005148:	4602      	mov	r2, r0
 800514a:	460b      	mov	r3, r1
 800514c:	4620      	mov	r0, r4
 800514e:	4629      	mov	r1, r5
 8005150:	f7fb f802 	bl	8000158 <__aeabi_dsub>
 8005154:	f1ba 0f00 	cmp.w	sl, #0
 8005158:	4680      	mov	r8, r0
 800515a:	4689      	mov	r9, r1
 800515c:	dd6d      	ble.n	800523a <__kernel_rem_pio2+0x246>
 800515e:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 8005162:	ab0c      	add	r3, sp, #48	@ 0x30
 8005164:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005168:	9c05      	ldr	r4, [sp, #20]
 800516a:	f1ca 0018 	rsb	r0, sl, #24
 800516e:	fa43 f200 	asr.w	r2, r3, r0
 8005172:	4414      	add	r4, r2
 8005174:	4082      	lsls	r2, r0
 8005176:	1a9b      	subs	r3, r3, r2
 8005178:	aa0c      	add	r2, sp, #48	@ 0x30
 800517a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800517e:	f1ca 0217 	rsb	r2, sl, #23
 8005182:	9405      	str	r4, [sp, #20]
 8005184:	4113      	asrs	r3, r2
 8005186:	9300      	str	r3, [sp, #0]
 8005188:	9b00      	ldr	r3, [sp, #0]
 800518a:	2b00      	cmp	r3, #0
 800518c:	dd64      	ble.n	8005258 <__kernel_rem_pio2+0x264>
 800518e:	2200      	movs	r2, #0
 8005190:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005194:	4614      	mov	r4, r2
 8005196:	9b05      	ldr	r3, [sp, #20]
 8005198:	3301      	adds	r3, #1
 800519a:	9305      	str	r3, [sp, #20]
 800519c:	4593      	cmp	fp, r2
 800519e:	f300 80ab 	bgt.w	80052f8 <__kernel_rem_pio2+0x304>
 80051a2:	f1ba 0f00 	cmp.w	sl, #0
 80051a6:	dd07      	ble.n	80051b8 <__kernel_rem_pio2+0x1c4>
 80051a8:	f1ba 0f01 	cmp.w	sl, #1
 80051ac:	f000 80b2 	beq.w	8005314 <__kernel_rem_pio2+0x320>
 80051b0:	f1ba 0f02 	cmp.w	sl, #2
 80051b4:	f000 80b9 	beq.w	800532a <__kernel_rem_pio2+0x336>
 80051b8:	9b00      	ldr	r3, [sp, #0]
 80051ba:	2b02      	cmp	r3, #2
 80051bc:	d14c      	bne.n	8005258 <__kernel_rem_pio2+0x264>
 80051be:	4642      	mov	r2, r8
 80051c0:	464b      	mov	r3, r9
 80051c2:	2000      	movs	r0, #0
 80051c4:	4947      	ldr	r1, [pc, #284]	@ (80052e4 <__kernel_rem_pio2+0x2f0>)
 80051c6:	f7fa ffc7 	bl	8000158 <__aeabi_dsub>
 80051ca:	4680      	mov	r8, r0
 80051cc:	4689      	mov	r9, r1
 80051ce:	2c00      	cmp	r4, #0
 80051d0:	d042      	beq.n	8005258 <__kernel_rem_pio2+0x264>
 80051d2:	4652      	mov	r2, sl
 80051d4:	2000      	movs	r0, #0
 80051d6:	4943      	ldr	r1, [pc, #268]	@ (80052e4 <__kernel_rem_pio2+0x2f0>)
 80051d8:	f000 fa32 	bl	8005640 <scalbn>
 80051dc:	4602      	mov	r2, r0
 80051de:	460b      	mov	r3, r1
 80051e0:	4640      	mov	r0, r8
 80051e2:	4649      	mov	r1, r9
 80051e4:	f7fa ffb8 	bl	8000158 <__aeabi_dsub>
 80051e8:	4680      	mov	r8, r0
 80051ea:	4689      	mov	r9, r1
 80051ec:	e034      	b.n	8005258 <__kernel_rem_pio2+0x264>
 80051ee:	2200      	movs	r2, #0
 80051f0:	4b3d      	ldr	r3, [pc, #244]	@ (80052e8 <__kernel_rem_pio2+0x2f4>)
 80051f2:	4620      	mov	r0, r4
 80051f4:	4629      	mov	r1, r5
 80051f6:	f7fb f967 	bl	80004c8 <__aeabi_dmul>
 80051fa:	f7fb fbff 	bl	80009fc <__aeabi_d2iz>
 80051fe:	f7fb f8f9 	bl	80003f4 <__aeabi_i2d>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	e9cd 2300 	strd	r2, r3, [sp]
 800520a:	2200      	movs	r2, #0
 800520c:	4b37      	ldr	r3, [pc, #220]	@ (80052ec <__kernel_rem_pio2+0x2f8>)
 800520e:	f7fb f95b 	bl	80004c8 <__aeabi_dmul>
 8005212:	4602      	mov	r2, r0
 8005214:	460b      	mov	r3, r1
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fa ff9d 	bl	8000158 <__aeabi_dsub>
 800521e:	f7fb fbed 	bl	80009fc <__aeabi_d2iz>
 8005222:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005226:	f849 0b04 	str.w	r0, [r9], #4
 800522a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800522e:	f7fa ff95 	bl	800015c <__adddf3>
 8005232:	3f01      	subs	r7, #1
 8005234:	4604      	mov	r4, r0
 8005236:	460d      	mov	r5, r1
 8005238:	e763      	b.n	8005102 <__kernel_rem_pio2+0x10e>
 800523a:	d106      	bne.n	800524a <__kernel_rem_pio2+0x256>
 800523c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8005240:	aa0c      	add	r2, sp, #48	@ 0x30
 8005242:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005246:	15db      	asrs	r3, r3, #23
 8005248:	e79d      	b.n	8005186 <__kernel_rem_pio2+0x192>
 800524a:	2200      	movs	r2, #0
 800524c:	4b28      	ldr	r3, [pc, #160]	@ (80052f0 <__kernel_rem_pio2+0x2fc>)
 800524e:	f7fb fbc1 	bl	80009d4 <__aeabi_dcmpge>
 8005252:	2800      	cmp	r0, #0
 8005254:	d13f      	bne.n	80052d6 <__kernel_rem_pio2+0x2e2>
 8005256:	9000      	str	r0, [sp, #0]
 8005258:	2200      	movs	r2, #0
 800525a:	2300      	movs	r3, #0
 800525c:	4640      	mov	r0, r8
 800525e:	4649      	mov	r1, r9
 8005260:	f7fb fb9a 	bl	8000998 <__aeabi_dcmpeq>
 8005264:	2800      	cmp	r0, #0
 8005266:	f000 80af 	beq.w	80053c8 <__kernel_rem_pio2+0x3d4>
 800526a:	2200      	movs	r2, #0
 800526c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8005270:	9902      	ldr	r1, [sp, #8]
 8005272:	428b      	cmp	r3, r1
 8005274:	da61      	bge.n	800533a <__kernel_rem_pio2+0x346>
 8005276:	2a00      	cmp	r2, #0
 8005278:	d076      	beq.n	8005368 <__kernel_rem_pio2+0x374>
 800527a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800527e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005280:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005284:	f1aa 0a18 	sub.w	sl, sl, #24
 8005288:	2b00      	cmp	r3, #0
 800528a:	d0f6      	beq.n	800527a <__kernel_rem_pio2+0x286>
 800528c:	4652      	mov	r2, sl
 800528e:	2000      	movs	r0, #0
 8005290:	4914      	ldr	r1, [pc, #80]	@ (80052e4 <__kernel_rem_pio2+0x2f0>)
 8005292:	f000 f9d5 	bl	8005640 <scalbn>
 8005296:	465d      	mov	r5, fp
 8005298:	4606      	mov	r6, r0
 800529a:	460f      	mov	r7, r1
 800529c:	f04f 0900 	mov.w	r9, #0
 80052a0:	ab70      	add	r3, sp, #448	@ 0x1c0
 80052a2:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80052e8 <__kernel_rem_pio2+0x2f4>
 80052a6:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 80052aa:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 80052ae:	2d00      	cmp	r5, #0
 80052b0:	f280 80c0 	bge.w	8005434 <__kernel_rem_pio2+0x440>
 80052b4:	465d      	mov	r5, fp
 80052b6:	2d00      	cmp	r5, #0
 80052b8:	f2c0 80f0 	blt.w	800549c <__kernel_rem_pio2+0x4a8>
 80052bc:	4b0d      	ldr	r3, [pc, #52]	@ (80052f4 <__kernel_rem_pio2+0x300>)
 80052be:	f04f 0900 	mov.w	r9, #0
 80052c2:	9306      	str	r3, [sp, #24]
 80052c4:	ab70      	add	r3, sp, #448	@ 0x1c0
 80052c6:	f04f 0a00 	mov.w	sl, #0
 80052ca:	2700      	movs	r7, #0
 80052cc:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80052d0:	ebab 0605 	sub.w	r6, fp, r5
 80052d4:	e0d6      	b.n	8005484 <__kernel_rem_pio2+0x490>
 80052d6:	2302      	movs	r3, #2
 80052d8:	9300      	str	r3, [sp, #0]
 80052da:	e758      	b.n	800518e <__kernel_rem_pio2+0x19a>
 80052dc:	08005a38 	.word	0x08005a38
 80052e0:	40200000 	.word	0x40200000
 80052e4:	3ff00000 	.word	0x3ff00000
 80052e8:	3e700000 	.word	0x3e700000
 80052ec:	41700000 	.word	0x41700000
 80052f0:	3fe00000 	.word	0x3fe00000
 80052f4:	080059f8 	.word	0x080059f8
 80052f8:	f856 3b04 	ldr.w	r3, [r6], #4
 80052fc:	b944      	cbnz	r4, 8005310 <__kernel_rem_pio2+0x31c>
 80052fe:	b123      	cbz	r3, 800530a <__kernel_rem_pio2+0x316>
 8005300:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005304:	f846 3c04 	str.w	r3, [r6, #-4]
 8005308:	2301      	movs	r3, #1
 800530a:	461c      	mov	r4, r3
 800530c:	3201      	adds	r2, #1
 800530e:	e745      	b.n	800519c <__kernel_rem_pio2+0x1a8>
 8005310:	1acb      	subs	r3, r1, r3
 8005312:	e7f7      	b.n	8005304 <__kernel_rem_pio2+0x310>
 8005314:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8005318:	ab0c      	add	r3, sp, #48	@ 0x30
 800531a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800531e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005322:	a90c      	add	r1, sp, #48	@ 0x30
 8005324:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005328:	e746      	b.n	80051b8 <__kernel_rem_pio2+0x1c4>
 800532a:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 800532e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005330:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005334:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005338:	e7f3      	b.n	8005322 <__kernel_rem_pio2+0x32e>
 800533a:	a90c      	add	r1, sp, #48	@ 0x30
 800533c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005340:	3b01      	subs	r3, #1
 8005342:	430a      	orrs	r2, r1
 8005344:	e794      	b.n	8005270 <__kernel_rem_pio2+0x27c>
 8005346:	3401      	adds	r4, #1
 8005348:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 800534c:	2a00      	cmp	r2, #0
 800534e:	d0fa      	beq.n	8005346 <__kernel_rem_pio2+0x352>
 8005350:	9b08      	ldr	r3, [sp, #32]
 8005352:	aa20      	add	r2, sp, #128	@ 0x80
 8005354:	445b      	add	r3, fp
 8005356:	f10b 0801 	add.w	r8, fp, #1
 800535a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 800535e:	445c      	add	r4, fp
 8005360:	4544      	cmp	r4, r8
 8005362:	da04      	bge.n	800536e <__kernel_rem_pio2+0x37a>
 8005364:	46a3      	mov	fp, r4
 8005366:	e6bf      	b.n	80050e8 <__kernel_rem_pio2+0xf4>
 8005368:	2401      	movs	r4, #1
 800536a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800536c:	e7ec      	b.n	8005348 <__kernel_rem_pio2+0x354>
 800536e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005370:	46ab      	mov	fp, r5
 8005372:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005376:	f7fb f83d 	bl	80003f4 <__aeabi_i2d>
 800537a:	f04f 0900 	mov.w	r9, #0
 800537e:	2600      	movs	r6, #0
 8005380:	2700      	movs	r7, #0
 8005382:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005384:	e9c5 0100 	strd	r0, r1, [r5]
 8005388:	3b08      	subs	r3, #8
 800538a:	9300      	str	r3, [sp, #0]
 800538c:	9b06      	ldr	r3, [sp, #24]
 800538e:	4599      	cmp	r9, r3
 8005390:	dd07      	ble.n	80053a2 <__kernel_rem_pio2+0x3ae>
 8005392:	9b07      	ldr	r3, [sp, #28]
 8005394:	f108 0801 	add.w	r8, r8, #1
 8005398:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 800539c:	3508      	adds	r5, #8
 800539e:	9307      	str	r3, [sp, #28]
 80053a0:	e7de      	b.n	8005360 <__kernel_rem_pio2+0x36c>
 80053a2:	9900      	ldr	r1, [sp, #0]
 80053a4:	f109 0901 	add.w	r9, r9, #1
 80053a8:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 80053ac:	9100      	str	r1, [sp, #0]
 80053ae:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 80053b2:	f7fb f889 	bl	80004c8 <__aeabi_dmul>
 80053b6:	4602      	mov	r2, r0
 80053b8:	460b      	mov	r3, r1
 80053ba:	4630      	mov	r0, r6
 80053bc:	4639      	mov	r1, r7
 80053be:	f7fa fecd 	bl	800015c <__adddf3>
 80053c2:	4606      	mov	r6, r0
 80053c4:	460f      	mov	r7, r1
 80053c6:	e7e1      	b.n	800538c <__kernel_rem_pio2+0x398>
 80053c8:	f1ca 0200 	rsb	r2, sl, #0
 80053cc:	4640      	mov	r0, r8
 80053ce:	4649      	mov	r1, r9
 80053d0:	f000 f936 	bl	8005640 <scalbn>
 80053d4:	2200      	movs	r2, #0
 80053d6:	4b97      	ldr	r3, [pc, #604]	@ (8005634 <__kernel_rem_pio2+0x640>)
 80053d8:	4604      	mov	r4, r0
 80053da:	460d      	mov	r5, r1
 80053dc:	f7fb fafa 	bl	80009d4 <__aeabi_dcmpge>
 80053e0:	b300      	cbz	r0, 8005424 <__kernel_rem_pio2+0x430>
 80053e2:	2200      	movs	r2, #0
 80053e4:	4b94      	ldr	r3, [pc, #592]	@ (8005638 <__kernel_rem_pio2+0x644>)
 80053e6:	4620      	mov	r0, r4
 80053e8:	4629      	mov	r1, r5
 80053ea:	f7fb f86d 	bl	80004c8 <__aeabi_dmul>
 80053ee:	f7fb fb05 	bl	80009fc <__aeabi_d2iz>
 80053f2:	4606      	mov	r6, r0
 80053f4:	f7fa fffe 	bl	80003f4 <__aeabi_i2d>
 80053f8:	2200      	movs	r2, #0
 80053fa:	4b8e      	ldr	r3, [pc, #568]	@ (8005634 <__kernel_rem_pio2+0x640>)
 80053fc:	f7fb f864 	bl	80004c8 <__aeabi_dmul>
 8005400:	460b      	mov	r3, r1
 8005402:	4602      	mov	r2, r0
 8005404:	4629      	mov	r1, r5
 8005406:	4620      	mov	r0, r4
 8005408:	f7fa fea6 	bl	8000158 <__aeabi_dsub>
 800540c:	f7fb faf6 	bl	80009fc <__aeabi_d2iz>
 8005410:	ab0c      	add	r3, sp, #48	@ 0x30
 8005412:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005416:	f10b 0b01 	add.w	fp, fp, #1
 800541a:	f10a 0a18 	add.w	sl, sl, #24
 800541e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005422:	e733      	b.n	800528c <__kernel_rem_pio2+0x298>
 8005424:	4620      	mov	r0, r4
 8005426:	4629      	mov	r1, r5
 8005428:	f7fb fae8 	bl	80009fc <__aeabi_d2iz>
 800542c:	ab0c      	add	r3, sp, #48	@ 0x30
 800542e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005432:	e72b      	b.n	800528c <__kernel_rem_pio2+0x298>
 8005434:	ab0c      	add	r3, sp, #48	@ 0x30
 8005436:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800543a:	f7fa ffdb 	bl	80003f4 <__aeabi_i2d>
 800543e:	4632      	mov	r2, r6
 8005440:	463b      	mov	r3, r7
 8005442:	f7fb f841 	bl	80004c8 <__aeabi_dmul>
 8005446:	464a      	mov	r2, r9
 8005448:	e868 0102 	strd	r0, r1, [r8], #-8
 800544c:	4653      	mov	r3, sl
 800544e:	4630      	mov	r0, r6
 8005450:	4639      	mov	r1, r7
 8005452:	f7fb f839 	bl	80004c8 <__aeabi_dmul>
 8005456:	3d01      	subs	r5, #1
 8005458:	4606      	mov	r6, r0
 800545a:	460f      	mov	r7, r1
 800545c:	e727      	b.n	80052ae <__kernel_rem_pio2+0x2ba>
 800545e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005462:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005466:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 800546a:	f8cd c018 	str.w	ip, [sp, #24]
 800546e:	f7fb f82b 	bl	80004c8 <__aeabi_dmul>
 8005472:	4602      	mov	r2, r0
 8005474:	460b      	mov	r3, r1
 8005476:	4648      	mov	r0, r9
 8005478:	4651      	mov	r1, sl
 800547a:	f7fa fe6f 	bl	800015c <__adddf3>
 800547e:	4681      	mov	r9, r0
 8005480:	468a      	mov	sl, r1
 8005482:	3701      	adds	r7, #1
 8005484:	9b02      	ldr	r3, [sp, #8]
 8005486:	429f      	cmp	r7, r3
 8005488:	dc01      	bgt.n	800548e <__kernel_rem_pio2+0x49a>
 800548a:	42be      	cmp	r6, r7
 800548c:	dae7      	bge.n	800545e <__kernel_rem_pio2+0x46a>
 800548e:	ab48      	add	r3, sp, #288	@ 0x120
 8005490:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005494:	e9c6 9a00 	strd	r9, sl, [r6]
 8005498:	3d01      	subs	r5, #1
 800549a:	e70c      	b.n	80052b6 <__kernel_rem_pio2+0x2c2>
 800549c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 800549e:	2b02      	cmp	r3, #2
 80054a0:	dc09      	bgt.n	80054b6 <__kernel_rem_pio2+0x4c2>
 80054a2:	2b00      	cmp	r3, #0
 80054a4:	dc2c      	bgt.n	8005500 <__kernel_rem_pio2+0x50c>
 80054a6:	d04e      	beq.n	8005546 <__kernel_rem_pio2+0x552>
 80054a8:	9b05      	ldr	r3, [sp, #20]
 80054aa:	f003 0007 	and.w	r0, r3, #7
 80054ae:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 80054b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80054b6:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 80054b8:	2b03      	cmp	r3, #3
 80054ba:	d1f5      	bne.n	80054a8 <__kernel_rem_pio2+0x4b4>
 80054bc:	ab48      	add	r3, sp, #288	@ 0x120
 80054be:	441c      	add	r4, r3
 80054c0:	4625      	mov	r5, r4
 80054c2:	46da      	mov	sl, fp
 80054c4:	f1ba 0f00 	cmp.w	sl, #0
 80054c8:	dc63      	bgt.n	8005592 <__kernel_rem_pio2+0x59e>
 80054ca:	4625      	mov	r5, r4
 80054cc:	46da      	mov	sl, fp
 80054ce:	f1ba 0f01 	cmp.w	sl, #1
 80054d2:	dc7b      	bgt.n	80055cc <__kernel_rem_pio2+0x5d8>
 80054d4:	2000      	movs	r0, #0
 80054d6:	2100      	movs	r1, #0
 80054d8:	f1bb 0f01 	cmp.w	fp, #1
 80054dc:	f300 8093 	bgt.w	8005606 <__kernel_rem_pio2+0x612>
 80054e0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 80054e4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 80054e8:	9b00      	ldr	r3, [sp, #0]
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	f040 8092 	bne.w	8005614 <__kernel_rem_pio2+0x620>
 80054f0:	9b04      	ldr	r3, [sp, #16]
 80054f2:	e9c3 7800 	strd	r7, r8, [r3]
 80054f6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 80054fa:	e9c3 0104 	strd	r0, r1, [r3, #16]
 80054fe:	e7d3      	b.n	80054a8 <__kernel_rem_pio2+0x4b4>
 8005500:	465d      	mov	r5, fp
 8005502:	2000      	movs	r0, #0
 8005504:	2100      	movs	r1, #0
 8005506:	ab48      	add	r3, sp, #288	@ 0x120
 8005508:	441c      	add	r4, r3
 800550a:	2d00      	cmp	r5, #0
 800550c:	da32      	bge.n	8005574 <__kernel_rem_pio2+0x580>
 800550e:	9b00      	ldr	r3, [sp, #0]
 8005510:	2b00      	cmp	r3, #0
 8005512:	d035      	beq.n	8005580 <__kernel_rem_pio2+0x58c>
 8005514:	4602      	mov	r2, r0
 8005516:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800551a:	9c04      	ldr	r4, [sp, #16]
 800551c:	2501      	movs	r5, #1
 800551e:	e9c4 2300 	strd	r2, r3, [r4]
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 800552a:	f7fa fe15 	bl	8000158 <__aeabi_dsub>
 800552e:	ac48      	add	r4, sp, #288	@ 0x120
 8005530:	45ab      	cmp	fp, r5
 8005532:	da28      	bge.n	8005586 <__kernel_rem_pio2+0x592>
 8005534:	9b00      	ldr	r3, [sp, #0]
 8005536:	b113      	cbz	r3, 800553e <__kernel_rem_pio2+0x54a>
 8005538:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800553c:	4619      	mov	r1, r3
 800553e:	9b04      	ldr	r3, [sp, #16]
 8005540:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005544:	e7b0      	b.n	80054a8 <__kernel_rem_pio2+0x4b4>
 8005546:	2000      	movs	r0, #0
 8005548:	2100      	movs	r1, #0
 800554a:	ab48      	add	r3, sp, #288	@ 0x120
 800554c:	441c      	add	r4, r3
 800554e:	f1bb 0f00 	cmp.w	fp, #0
 8005552:	da08      	bge.n	8005566 <__kernel_rem_pio2+0x572>
 8005554:	9b00      	ldr	r3, [sp, #0]
 8005556:	b113      	cbz	r3, 800555e <__kernel_rem_pio2+0x56a>
 8005558:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800555c:	4619      	mov	r1, r3
 800555e:	9b04      	ldr	r3, [sp, #16]
 8005560:	e9c3 0100 	strd	r0, r1, [r3]
 8005564:	e7a0      	b.n	80054a8 <__kernel_rem_pio2+0x4b4>
 8005566:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800556a:	f7fa fdf7 	bl	800015c <__adddf3>
 800556e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005572:	e7ec      	b.n	800554e <__kernel_rem_pio2+0x55a>
 8005574:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005578:	f7fa fdf0 	bl	800015c <__adddf3>
 800557c:	3d01      	subs	r5, #1
 800557e:	e7c4      	b.n	800550a <__kernel_rem_pio2+0x516>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	e7c9      	b.n	800551a <__kernel_rem_pio2+0x526>
 8005586:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 800558a:	f7fa fde7 	bl	800015c <__adddf3>
 800558e:	3501      	adds	r5, #1
 8005590:	e7ce      	b.n	8005530 <__kernel_rem_pio2+0x53c>
 8005592:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005596:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 800559a:	4640      	mov	r0, r8
 800559c:	4649      	mov	r1, r9
 800559e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055a2:	f7fa fddb 	bl	800015c <__adddf3>
 80055a6:	4602      	mov	r2, r0
 80055a8:	460b      	mov	r3, r1
 80055aa:	4606      	mov	r6, r0
 80055ac:	460f      	mov	r7, r1
 80055ae:	4640      	mov	r0, r8
 80055b0:	4649      	mov	r1, r9
 80055b2:	f7fa fdd1 	bl	8000158 <__aeabi_dsub>
 80055b6:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055ba:	f7fa fdcf 	bl	800015c <__adddf3>
 80055be:	e865 0102 	strd	r0, r1, [r5], #-8
 80055c2:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 80055c6:	e9c5 6700 	strd	r6, r7, [r5]
 80055ca:	e77b      	b.n	80054c4 <__kernel_rem_pio2+0x4d0>
 80055cc:	e9d5 2300 	ldrd	r2, r3, [r5]
 80055d0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 80055d4:	4640      	mov	r0, r8
 80055d6:	4649      	mov	r1, r9
 80055d8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80055dc:	f7fa fdbe 	bl	800015c <__adddf3>
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4606      	mov	r6, r0
 80055e6:	460f      	mov	r7, r1
 80055e8:	4640      	mov	r0, r8
 80055ea:	4649      	mov	r1, r9
 80055ec:	f7fa fdb4 	bl	8000158 <__aeabi_dsub>
 80055f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80055f4:	f7fa fdb2 	bl	800015c <__adddf3>
 80055f8:	e865 0102 	strd	r0, r1, [r5], #-8
 80055fc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005600:	e9c5 6700 	strd	r6, r7, [r5]
 8005604:	e763      	b.n	80054ce <__kernel_rem_pio2+0x4da>
 8005606:	e874 2302 	ldrd	r2, r3, [r4], #-8
 800560a:	f7fa fda7 	bl	800015c <__adddf3>
 800560e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005612:	e761      	b.n	80054d8 <__kernel_rem_pio2+0x4e4>
 8005614:	9b04      	ldr	r3, [sp, #16]
 8005616:	9a04      	ldr	r2, [sp, #16]
 8005618:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 800561c:	601f      	str	r7, [r3, #0]
 800561e:	605c      	str	r4, [r3, #4]
 8005620:	609d      	str	r5, [r3, #8]
 8005622:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005626:	60d3      	str	r3, [r2, #12]
 8005628:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800562c:	6110      	str	r0, [r2, #16]
 800562e:	6153      	str	r3, [r2, #20]
 8005630:	e73a      	b.n	80054a8 <__kernel_rem_pio2+0x4b4>
 8005632:	bf00      	nop
 8005634:	41700000 	.word	0x41700000
 8005638:	3e700000 	.word	0x3e700000
 800563c:	00000000 	.word	0x00000000

08005640 <scalbn>:
 8005640:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005644:	4616      	mov	r6, r2
 8005646:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800564a:	4683      	mov	fp, r0
 800564c:	468c      	mov	ip, r1
 800564e:	460b      	mov	r3, r1
 8005650:	b982      	cbnz	r2, 8005674 <scalbn+0x34>
 8005652:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005656:	4303      	orrs	r3, r0
 8005658:	d039      	beq.n	80056ce <scalbn+0x8e>
 800565a:	4b2f      	ldr	r3, [pc, #188]	@ (8005718 <scalbn+0xd8>)
 800565c:	2200      	movs	r2, #0
 800565e:	f7fa ff33 	bl	80004c8 <__aeabi_dmul>
 8005662:	4b2e      	ldr	r3, [pc, #184]	@ (800571c <scalbn+0xdc>)
 8005664:	4683      	mov	fp, r0
 8005666:	429e      	cmp	r6, r3
 8005668:	468c      	mov	ip, r1
 800566a:	da0d      	bge.n	8005688 <scalbn+0x48>
 800566c:	a326      	add	r3, pc, #152	@ (adr r3, 8005708 <scalbn+0xc8>)
 800566e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005672:	e01b      	b.n	80056ac <scalbn+0x6c>
 8005674:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005678:	42ba      	cmp	r2, r7
 800567a:	d109      	bne.n	8005690 <scalbn+0x50>
 800567c:	4602      	mov	r2, r0
 800567e:	f7fa fd6d 	bl	800015c <__adddf3>
 8005682:	4683      	mov	fp, r0
 8005684:	468c      	mov	ip, r1
 8005686:	e022      	b.n	80056ce <scalbn+0x8e>
 8005688:	460b      	mov	r3, r1
 800568a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800568e:	3a36      	subs	r2, #54	@ 0x36
 8005690:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005694:	428e      	cmp	r6, r1
 8005696:	dd0c      	ble.n	80056b2 <scalbn+0x72>
 8005698:	a31d      	add	r3, pc, #116	@ (adr r3, 8005710 <scalbn+0xd0>)
 800569a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800569e:	461c      	mov	r4, r3
 80056a0:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 80056a4:	f361 74df 	bfi	r4, r1, #31, #1
 80056a8:	4621      	mov	r1, r4
 80056aa:	481d      	ldr	r0, [pc, #116]	@ (8005720 <scalbn+0xe0>)
 80056ac:	f7fa ff0c 	bl	80004c8 <__aeabi_dmul>
 80056b0:	e7e7      	b.n	8005682 <scalbn+0x42>
 80056b2:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 80056b6:	4432      	add	r2, r6
 80056b8:	428a      	cmp	r2, r1
 80056ba:	dced      	bgt.n	8005698 <scalbn+0x58>
 80056bc:	2a00      	cmp	r2, #0
 80056be:	dd0a      	ble.n	80056d6 <scalbn+0x96>
 80056c0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80056c4:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80056c8:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80056cc:	46ac      	mov	ip, r5
 80056ce:	4658      	mov	r0, fp
 80056d0:	4661      	mov	r1, ip
 80056d2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 80056d6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 80056da:	da09      	bge.n	80056f0 <scalbn+0xb0>
 80056dc:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 80056e0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 80056e4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 80056e8:	480e      	ldr	r0, [pc, #56]	@ (8005724 <scalbn+0xe4>)
 80056ea:	f041 011f 	orr.w	r1, r1, #31
 80056ee:	e7bd      	b.n	800566c <scalbn+0x2c>
 80056f0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 80056f4:	3236      	adds	r2, #54	@ 0x36
 80056f6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 80056fa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 80056fe:	4658      	mov	r0, fp
 8005700:	4629      	mov	r1, r5
 8005702:	2200      	movs	r2, #0
 8005704:	4b08      	ldr	r3, [pc, #32]	@ (8005728 <scalbn+0xe8>)
 8005706:	e7d1      	b.n	80056ac <scalbn+0x6c>
 8005708:	c2f8f359 	.word	0xc2f8f359
 800570c:	01a56e1f 	.word	0x01a56e1f
 8005710:	8800759c 	.word	0x8800759c
 8005714:	7e37e43c 	.word	0x7e37e43c
 8005718:	43500000 	.word	0x43500000
 800571c:	ffff3cb0 	.word	0xffff3cb0
 8005720:	8800759c 	.word	0x8800759c
 8005724:	c2f8f359 	.word	0xc2f8f359
 8005728:	3c900000 	.word	0x3c900000
 800572c:	00000000 	.word	0x00000000

08005730 <floor>:
 8005730:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005734:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005738:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 800573c:	2e13      	cmp	r6, #19
 800573e:	4602      	mov	r2, r0
 8005740:	460b      	mov	r3, r1
 8005742:	460c      	mov	r4, r1
 8005744:	4605      	mov	r5, r0
 8005746:	4680      	mov	r8, r0
 8005748:	dc35      	bgt.n	80057b6 <floor+0x86>
 800574a:	2e00      	cmp	r6, #0
 800574c:	da17      	bge.n	800577e <floor+0x4e>
 800574e:	a334      	add	r3, pc, #208	@ (adr r3, 8005820 <floor+0xf0>)
 8005750:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005754:	f7fa fd02 	bl	800015c <__adddf3>
 8005758:	2200      	movs	r2, #0
 800575a:	2300      	movs	r3, #0
 800575c:	f7fb f944 	bl	80009e8 <__aeabi_dcmpgt>
 8005760:	b150      	cbz	r0, 8005778 <floor+0x48>
 8005762:	2c00      	cmp	r4, #0
 8005764:	da57      	bge.n	8005816 <floor+0xe6>
 8005766:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 800576a:	432c      	orrs	r4, r5
 800576c:	2500      	movs	r5, #0
 800576e:	42ac      	cmp	r4, r5
 8005770:	4c2d      	ldr	r4, [pc, #180]	@ (8005828 <floor+0xf8>)
 8005772:	bf08      	it	eq
 8005774:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005778:	4623      	mov	r3, r4
 800577a:	462a      	mov	r2, r5
 800577c:	e024      	b.n	80057c8 <floor+0x98>
 800577e:	4f2b      	ldr	r7, [pc, #172]	@ (800582c <floor+0xfc>)
 8005780:	4137      	asrs	r7, r6
 8005782:	ea01 0c07 	and.w	ip, r1, r7
 8005786:	ea5c 0c00 	orrs.w	ip, ip, r0
 800578a:	d01d      	beq.n	80057c8 <floor+0x98>
 800578c:	a324      	add	r3, pc, #144	@ (adr r3, 8005820 <floor+0xf0>)
 800578e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005792:	f7fa fce3 	bl	800015c <__adddf3>
 8005796:	2200      	movs	r2, #0
 8005798:	2300      	movs	r3, #0
 800579a:	f7fb f925 	bl	80009e8 <__aeabi_dcmpgt>
 800579e:	2800      	cmp	r0, #0
 80057a0:	d0ea      	beq.n	8005778 <floor+0x48>
 80057a2:	2c00      	cmp	r4, #0
 80057a4:	bfbe      	ittt	lt
 80057a6:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 80057aa:	4133      	asrlt	r3, r6
 80057ac:	18e4      	addlt	r4, r4, r3
 80057ae:	2500      	movs	r5, #0
 80057b0:	ea24 0407 	bic.w	r4, r4, r7
 80057b4:	e7e0      	b.n	8005778 <floor+0x48>
 80057b6:	2e33      	cmp	r6, #51	@ 0x33
 80057b8:	dd0a      	ble.n	80057d0 <floor+0xa0>
 80057ba:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 80057be:	d103      	bne.n	80057c8 <floor+0x98>
 80057c0:	f7fa fccc 	bl	800015c <__adddf3>
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	4610      	mov	r0, r2
 80057ca:	4619      	mov	r1, r3
 80057cc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80057d0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80057d4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 80057d8:	fa2c f707 	lsr.w	r7, ip, r7
 80057dc:	4207      	tst	r7, r0
 80057de:	d0f3      	beq.n	80057c8 <floor+0x98>
 80057e0:	a30f      	add	r3, pc, #60	@ (adr r3, 8005820 <floor+0xf0>)
 80057e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057e6:	f7fa fcb9 	bl	800015c <__adddf3>
 80057ea:	2200      	movs	r2, #0
 80057ec:	2300      	movs	r3, #0
 80057ee:	f7fb f8fb 	bl	80009e8 <__aeabi_dcmpgt>
 80057f2:	2800      	cmp	r0, #0
 80057f4:	d0c0      	beq.n	8005778 <floor+0x48>
 80057f6:	2c00      	cmp	r4, #0
 80057f8:	da0a      	bge.n	8005810 <floor+0xe0>
 80057fa:	2e14      	cmp	r6, #20
 80057fc:	d101      	bne.n	8005802 <floor+0xd2>
 80057fe:	3401      	adds	r4, #1
 8005800:	e006      	b.n	8005810 <floor+0xe0>
 8005802:	2301      	movs	r3, #1
 8005804:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005808:	40b3      	lsls	r3, r6
 800580a:	441d      	add	r5, r3
 800580c:	4545      	cmp	r5, r8
 800580e:	d3f6      	bcc.n	80057fe <floor+0xce>
 8005810:	ea25 0507 	bic.w	r5, r5, r7
 8005814:	e7b0      	b.n	8005778 <floor+0x48>
 8005816:	2500      	movs	r5, #0
 8005818:	462c      	mov	r4, r5
 800581a:	e7ad      	b.n	8005778 <floor+0x48>
 800581c:	f3af 8000 	nop.w
 8005820:	8800759c 	.word	0x8800759c
 8005824:	7e37e43c 	.word	0x7e37e43c
 8005828:	bff00000 	.word	0xbff00000
 800582c:	000fffff 	.word	0x000fffff

08005830 <_init>:
 8005830:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005832:	bf00      	nop
 8005834:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005836:	bc08      	pop	{r3}
 8005838:	469e      	mov	lr, r3
 800583a:	4770      	bx	lr

0800583c <_fini>:
 800583c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800583e:	bf00      	nop
 8005840:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005842:	bc08      	pop	{r3}
 8005844:	469e      	mov	lr, r3
 8005846:	4770      	bx	lr
