
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005ea8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005fb8  08005fb8  00006fb8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080061b8  080061b8  000081e4  2**0
                  CONTENTS
  4 .ARM          00000000  080061b8  080061b8  000081e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  080061b8  080061b8  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080061b8  080061b8  000071b8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080061bc  080061bc  000071bc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  080061c0  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000011e8  200001e8  080063a4  000081e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  200013d0  080063a4  000083d0  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af17  00000000  00000000  0000820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc5  00000000  00000000  00013124  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cc8  00000000  00000000  000150f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009f4  00000000  00000000  00015db8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001824f  00000000  00000000  000167ac  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd76  00000000  00000000  0002e9fb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a943  00000000  00000000  0003c771  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c70b4  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003a90  00000000  00000000  000c70f8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cab88  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005fa0 	.word	0x08005fa0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08005fa0 	.word	0x08005fa0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <draw_cube>:
        {4, 0}, {4, 1}, {4, 2}, {4, 3}
    },
    .transform = { 6,0,0, 0,0,0, 3,3,3 }
};

void draw_cube(Cube *cube) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b0d5      	sub	sp, #340	@ 0x154
 80010e4:	af00      	add	r7, sp, #0
 80010e6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80010ea:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80010ee:	6018      	str	r0, [r3, #0]
	Mat4 transform_matrix = calculate_transform_matrix(&cube->transform);
 80010f0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80010f4:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80010fe:	f507 7384 	add.w	r3, r7, #264	@ 0x108
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f952 	bl	80023ae <calculate_transform_matrix>
	Mat4 transform_proj_matrix = mat4_mul_mat4(&view_projection_matrix, &transform_matrix);
 800110a:	f107 03c8 	add.w	r3, r7, #200	@ 0xc8
 800110e:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 8001112:	4984      	ldr	r1, [pc, #528]	@ (8001324 <draw_cube+0x244>)
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fd01 	bl	8001b1c <mat4_mul_mat4>

	Vec4 transformed[POINT_COUNT];
	for (int i = 0; i < POINT_COUNT; ++i) {
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001120:	e08e      	b.n	8001240 <draw_cube+0x160>
		Vec4 model_space = { cube->p[i].x, cube->p[i].y, cube->p[i].z, 1.0 };
 8001122:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001126:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001140:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800114a:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001166:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001170:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3308      	adds	r3, #8
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 800118c:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001196:	f5a3 738c 	sub.w	r3, r3, #280	@ 0x118
 800119a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800119e:	60da      	str	r2, [r3, #12]

		transformed[i] = mat4_mul_vec4_project(&transform_proj_matrix, &model_space);
 80011a0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80011a4:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80011a8:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	18d4      	adds	r4, r2, r3
 80011b0:	463b      	mov	r3, r7
 80011b2:	f107 0238 	add.w	r2, r7, #56	@ 0x38
 80011b6:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fe96 	bl	8001eec <mat4_mul_vec4_project>
 80011c0:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80011c4:	f5a3 73a8 	sub.w	r3, r3, #336	@ 0x150
 80011c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// center
		transformed[i].x += (float)WIDTH/2.0;
 80011ce:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80011d2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80011d6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fc87 	bl	8000af8 <__addsf3>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4619      	mov	r1, r3
 80011ee:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80011f2:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 80011f6:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	6019      	str	r1, [r3, #0]
		transformed[i].y += (float)HEIGHT/2.0;
 8001200:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001204:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 8001208:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	3304      	adds	r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc6d 	bl	8000af8 <__addsf3>
 800121e:	4603      	mov	r3, r0
 8001220:	4619      	mov	r1, r3
 8001222:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001226:	f5a3 7284 	sub.w	r2, r3, #264	@ 0x108
 800122a:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	3304      	adds	r3, #4
 8001234:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < POINT_COUNT; ++i) {
 8001236:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800123a:	3301      	adds	r3, #1
 800123c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001240:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001244:	2b07      	cmp	r3, #7
 8001246:	f77f af6c 	ble.w	8001122 <draw_cube+0x42>
	}

	for (int i = 0; i < EDGE_COUNT; ++i) {
 800124a:	2300      	movs	r3, #0
 800124c:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 8001250:	e05d      	b.n	800130e <draw_cube+0x22e>
		Vec4 a = transformed[cube->edges[i][0]];
 8001252:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001256:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800125a:	681b      	ldr	r3, [r3, #0]
 800125c:	f8d7 2148 	ldr.w	r2, [r7, #328]	@ 0x148
 8001260:	320c      	adds	r2, #12
 8001262:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 8001266:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800126a:	f5a2 7194 	sub.w	r1, r2, #296	@ 0x128
 800126e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 8001272:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 8001276:	011b      	lsls	r3, r3, #4
 8001278:	4413      	add	r3, r2
 800127a:	460c      	mov	r4, r1
 800127c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800127e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Vec4 b = transformed[cube->edges[i][1]];
 8001282:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 8001286:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 800128a:	681a      	ldr	r2, [r3, #0]
 800128c:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001290:	00db      	lsls	r3, r3, #3
 8001292:	4413      	add	r3, r2
 8001294:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8001296:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 800129a:	f5a2 719c 	sub.w	r1, r2, #312	@ 0x138
 800129e:	f507 72a8 	add.w	r2, r7, #336	@ 0x150
 80012a2:	f5a2 7284 	sub.w	r2, r2, #264	@ 0x108
 80012a6:	011b      	lsls	r3, r3, #4
 80012a8:	4413      	add	r3, r2
 80012aa:	460c      	mov	r4, r1
 80012ac:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012ae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		draw_line(a.x, a.y, b.x, b.y);
 80012b2:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80012b6:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012ba:	681b      	ldr	r3, [r3, #0]
 80012bc:	4618      	mov	r0, r3
 80012be:	f7ff fee9 	bl	8001094 <__aeabi_f2iz>
 80012c2:	4604      	mov	r4, r0
 80012c4:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80012c8:	f5a3 7394 	sub.w	r3, r3, #296	@ 0x128
 80012cc:	685b      	ldr	r3, [r3, #4]
 80012ce:	4618      	mov	r0, r3
 80012d0:	f7ff fee0 	bl	8001094 <__aeabi_f2iz>
 80012d4:	4605      	mov	r5, r0
 80012d6:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80012da:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80012de:	681b      	ldr	r3, [r3, #0]
 80012e0:	4618      	mov	r0, r3
 80012e2:	f7ff fed7 	bl	8001094 <__aeabi_f2iz>
 80012e6:	4606      	mov	r6, r0
 80012e8:	f507 73a8 	add.w	r3, r7, #336	@ 0x150
 80012ec:	f5a3 739c 	sub.w	r3, r3, #312	@ 0x138
 80012f0:	685b      	ldr	r3, [r3, #4]
 80012f2:	4618      	mov	r0, r3
 80012f4:	f7ff fece 	bl	8001094 <__aeabi_f2iz>
 80012f8:	4603      	mov	r3, r0
 80012fa:	4632      	mov	r2, r6
 80012fc:	4629      	mov	r1, r5
 80012fe:	4620      	mov	r0, r4
 8001300:	f001 fb0e 	bl	8002920 <draw_line>
	for (int i = 0; i < EDGE_COUNT; ++i) {
 8001304:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001308:	3301      	adds	r3, #1
 800130a:	f8c7 3148 	str.w	r3, [r7, #328]	@ 0x148
 800130e:	f8d7 3148 	ldr.w	r3, [r7, #328]	@ 0x148
 8001312:	2b0b      	cmp	r3, #11
 8001314:	dd9d      	ble.n	8001252 <draw_cube+0x172>
	}
}
 8001316:	bf00      	nop
 8001318:	bf00      	nop
 800131a:	f507 77aa 	add.w	r7, r7, #340	@ 0x154
 800131e:	46bd      	mov	sp, r7
 8001320:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001322:	bf00      	nop
 8001324:	20000284 	.word	0x20000284

08001328 <on_ready>:

void on_ready() {
 8001328:	b5b0      	push	{r4, r5, r7, lr}
 800132a:	b092      	sub	sp, #72	@ 0x48
 800132c:	af02      	add	r7, sp, #8
	perspective_projection = mat4_make_perspective(4.0 * (M_PI / 180.0), 1, 1.0, 100.0);
 800132e:	4c21      	ldr	r4, [pc, #132]	@ (80013b4 <on_ready+0x8c>)
 8001330:	4638      	mov	r0, r7
 8001332:	4b21      	ldr	r3, [pc, #132]	@ (80013b8 <on_ready+0x90>)
 8001334:	9300      	str	r3, [sp, #0]
 8001336:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800133a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800133e:	491f      	ldr	r1, [pc, #124]	@ (80013bc <on_ready+0x94>)
 8001340:	f000 fd48 	bl	8001dd4 <mat4_make_perspective>
 8001344:	4625      	mov	r5, r4
 8001346:	463c      	mov	r4, r7
 8001348:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800134c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800134e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001350:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001352:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001354:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001358:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	view_matrix = get_view_matrix(0, 0, -15); // camera position
 800135c:	4c18      	ldr	r4, [pc, #96]	@ (80013c0 <on_ready+0x98>)
 800135e:	4638      	mov	r0, r7
 8001360:	4b18      	ldr	r3, [pc, #96]	@ (80013c4 <on_ready+0x9c>)
 8001362:	f04f 0200 	mov.w	r2, #0
 8001366:	f04f 0100 	mov.w	r1, #0
 800136a:	f001 f809 	bl	8002380 <get_view_matrix>
 800136e:	4625      	mov	r5, r4
 8001370:	463c      	mov	r4, r7
 8001372:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001374:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001376:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001378:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800137c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800137e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001382:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
	view_projection_matrix = mat4_mul_mat4(&perspective_projection, &view_matrix);
 8001386:	4c10      	ldr	r4, [pc, #64]	@ (80013c8 <on_ready+0xa0>)
 8001388:	463b      	mov	r3, r7
 800138a:	4a0d      	ldr	r2, [pc, #52]	@ (80013c0 <on_ready+0x98>)
 800138c:	4909      	ldr	r1, [pc, #36]	@ (80013b4 <on_ready+0x8c>)
 800138e:	4618      	mov	r0, r3
 8001390:	f000 fbc4 	bl	8001b1c <mat4_mul_mat4>
 8001394:	4625      	mov	r5, r4
 8001396:	463c      	mov	r4, r7
 8001398:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139a:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800139c:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800139e:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013a2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013a4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013a8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80013ac:	bf00      	nop
 80013ae:	3740      	adds	r7, #64	@ 0x40
 80013b0:	46bd      	mov	sp, r7
 80013b2:	bdb0      	pop	{r4, r5, r7, pc}
 80013b4:	20000204 	.word	0x20000204
 80013b8:	42c80000 	.word	0x42c80000
 80013bc:	3d8efa35 	.word	0x3d8efa35
 80013c0:	20000244 	.word	0x20000244
 80013c4:	c1700000 	.word	0xc1700000
 80013c8:	20000284 	.word	0x20000284

080013cc <on_update>:


float speed = 0.02;
int level = 2;
void on_update() {
 80013cc:	b598      	push	{r3, r4, r7, lr}
 80013ce:	af00      	add	r7, sp, #0
	clear_back_buffer();
 80013d0:	f001 f8e0 	bl	8002594 <clear_back_buffer>
	cube0.transform.rot_x += speed * level;
 80013d4:	4b4e      	ldr	r3, [pc, #312]	@ (8001510 <on_update+0x144>)
 80013d6:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 80013da:	4b4e      	ldr	r3, [pc, #312]	@ (8001514 <on_update+0x148>)
 80013dc:	681b      	ldr	r3, [r3, #0]
 80013de:	4618      	mov	r0, r3
 80013e0:	f7ff fc3e 	bl	8000c60 <__aeabi_i2f>
 80013e4:	4602      	mov	r2, r0
 80013e6:	4b4c      	ldr	r3, [pc, #304]	@ (8001518 <on_update+0x14c>)
 80013e8:	681b      	ldr	r3, [r3, #0]
 80013ea:	4619      	mov	r1, r3
 80013ec:	4610      	mov	r0, r2
 80013ee:	f7ff fc8b 	bl	8000d08 <__aeabi_fmul>
 80013f2:	4603      	mov	r3, r0
 80013f4:	4619      	mov	r1, r3
 80013f6:	4620      	mov	r0, r4
 80013f8:	f7ff fb7e 	bl	8000af8 <__addsf3>
 80013fc:	4603      	mov	r3, r0
 80013fe:	461a      	mov	r2, r3
 8001400:	4b43      	ldr	r3, [pc, #268]	@ (8001510 <on_update+0x144>)
 8001402:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	cube0.transform.rot_y += speed * level;
 8001406:	4b42      	ldr	r3, [pc, #264]	@ (8001510 <on_update+0x144>)
 8001408:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
 800140c:	4b41      	ldr	r3, [pc, #260]	@ (8001514 <on_update+0x148>)
 800140e:	681b      	ldr	r3, [r3, #0]
 8001410:	4618      	mov	r0, r3
 8001412:	f7ff fc25 	bl	8000c60 <__aeabi_i2f>
 8001416:	4602      	mov	r2, r0
 8001418:	4b3f      	ldr	r3, [pc, #252]	@ (8001518 <on_update+0x14c>)
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4619      	mov	r1, r3
 800141e:	4610      	mov	r0, r2
 8001420:	f7ff fc72 	bl	8000d08 <__aeabi_fmul>
 8001424:	4603      	mov	r3, r0
 8001426:	4619      	mov	r1, r3
 8001428:	4620      	mov	r0, r4
 800142a:	f7ff fb65 	bl	8000af8 <__addsf3>
 800142e:	4603      	mov	r3, r0
 8001430:	461a      	mov	r2, r3
 8001432:	4b37      	ldr	r3, [pc, #220]	@ (8001510 <on_update+0x144>)
 8001434:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	cube0.transform.rot_z += speed * level;
 8001438:	4b35      	ldr	r3, [pc, #212]	@ (8001510 <on_update+0x144>)
 800143a:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
 800143e:	4b35      	ldr	r3, [pc, #212]	@ (8001514 <on_update+0x148>)
 8001440:	681b      	ldr	r3, [r3, #0]
 8001442:	4618      	mov	r0, r3
 8001444:	f7ff fc0c 	bl	8000c60 <__aeabi_i2f>
 8001448:	4602      	mov	r2, r0
 800144a:	4b33      	ldr	r3, [pc, #204]	@ (8001518 <on_update+0x14c>)
 800144c:	681b      	ldr	r3, [r3, #0]
 800144e:	4619      	mov	r1, r3
 8001450:	4610      	mov	r0, r2
 8001452:	f7ff fc59 	bl	8000d08 <__aeabi_fmul>
 8001456:	4603      	mov	r3, r0
 8001458:	4619      	mov	r1, r3
 800145a:	4620      	mov	r0, r4
 800145c:	f7ff fb4c 	bl	8000af8 <__addsf3>
 8001460:	4603      	mov	r3, r0
 8001462:	461a      	mov	r2, r3
 8001464:	4b2a      	ldr	r3, [pc, #168]	@ (8001510 <on_update+0x144>)
 8001466:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	draw_cube(&cube0);
 800146a:	4829      	ldr	r0, [pc, #164]	@ (8001510 <on_update+0x144>)
 800146c:	f7ff fe38 	bl	80010e0 <draw_cube>


	pyramid0.transform.rot_x += speed * level;
 8001470:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <on_update+0x150>)
 8001472:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 8001476:	4b27      	ldr	r3, [pc, #156]	@ (8001514 <on_update+0x148>)
 8001478:	681b      	ldr	r3, [r3, #0]
 800147a:	4618      	mov	r0, r3
 800147c:	f7ff fbf0 	bl	8000c60 <__aeabi_i2f>
 8001480:	4602      	mov	r2, r0
 8001482:	4b25      	ldr	r3, [pc, #148]	@ (8001518 <on_update+0x14c>)
 8001484:	681b      	ldr	r3, [r3, #0]
 8001486:	4619      	mov	r1, r3
 8001488:	4610      	mov	r0, r2
 800148a:	f7ff fc3d 	bl	8000d08 <__aeabi_fmul>
 800148e:	4603      	mov	r3, r0
 8001490:	4619      	mov	r1, r3
 8001492:	4620      	mov	r0, r4
 8001494:	f7ff fb30 	bl	8000af8 <__addsf3>
 8001498:	4603      	mov	r3, r0
 800149a:	461a      	mov	r2, r3
 800149c:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <on_update+0x150>)
 800149e:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	pyramid0.transform.rot_y += speed * level;
 80014a2:	4b1e      	ldr	r3, [pc, #120]	@ (800151c <on_update+0x150>)
 80014a4:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
 80014a8:	4b1a      	ldr	r3, [pc, #104]	@ (8001514 <on_update+0x148>)
 80014aa:	681b      	ldr	r3, [r3, #0]
 80014ac:	4618      	mov	r0, r3
 80014ae:	f7ff fbd7 	bl	8000c60 <__aeabi_i2f>
 80014b2:	4602      	mov	r2, r0
 80014b4:	4b18      	ldr	r3, [pc, #96]	@ (8001518 <on_update+0x14c>)
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	4619      	mov	r1, r3
 80014ba:	4610      	mov	r0, r2
 80014bc:	f7ff fc24 	bl	8000d08 <__aeabi_fmul>
 80014c0:	4603      	mov	r3, r0
 80014c2:	4619      	mov	r1, r3
 80014c4:	4620      	mov	r0, r4
 80014c6:	f7ff fb17 	bl	8000af8 <__addsf3>
 80014ca:	4603      	mov	r3, r0
 80014cc:	461a      	mov	r2, r3
 80014ce:	4b13      	ldr	r3, [pc, #76]	@ (800151c <on_update+0x150>)
 80014d0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	pyramid0.transform.rot_z += speed * level;
 80014d4:	4b11      	ldr	r3, [pc, #68]	@ (800151c <on_update+0x150>)
 80014d6:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <on_update+0x148>)
 80014dc:	681b      	ldr	r3, [r3, #0]
 80014de:	4618      	mov	r0, r3
 80014e0:	f7ff fbbe 	bl	8000c60 <__aeabi_i2f>
 80014e4:	4602      	mov	r2, r0
 80014e6:	4b0c      	ldr	r3, [pc, #48]	@ (8001518 <on_update+0x14c>)
 80014e8:	681b      	ldr	r3, [r3, #0]
 80014ea:	4619      	mov	r1, r3
 80014ec:	4610      	mov	r0, r2
 80014ee:	f7ff fc0b 	bl	8000d08 <__aeabi_fmul>
 80014f2:	4603      	mov	r3, r0
 80014f4:	4619      	mov	r1, r3
 80014f6:	4620      	mov	r0, r4
 80014f8:	f7ff fafe 	bl	8000af8 <__addsf3>
 80014fc:	4603      	mov	r3, r0
 80014fe:	461a      	mov	r2, r3
 8001500:	4b06      	ldr	r3, [pc, #24]	@ (800151c <on_update+0x150>)
 8001502:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	draw_cube(&pyramid0);
 8001506:	4805      	ldr	r0, [pc, #20]	@ (800151c <on_update+0x150>)
 8001508:	f7ff fdea 	bl	80010e0 <draw_cube>
}
 800150c:	bf00      	nop
 800150e:	bd98      	pop	{r3, r4, r7, pc}
 8001510:	20000000 	.word	0x20000000
 8001514:	200001cc 	.word	0x200001cc
 8001518:	200001c8 	.word	0x200001c8
 800151c:	200000e4 	.word	0x200000e4

08001520 <on_button_pressed>:


void on_button_pressed() {
 8001520:	b480      	push	{r7}
 8001522:	af00      	add	r7, sp, #0
	if (++level > 5) {
 8001524:	4b07      	ldr	r3, [pc, #28]	@ (8001544 <on_button_pressed+0x24>)
 8001526:	681b      	ldr	r3, [r3, #0]
 8001528:	3301      	adds	r3, #1
 800152a:	4a06      	ldr	r2, [pc, #24]	@ (8001544 <on_button_pressed+0x24>)
 800152c:	6013      	str	r3, [r2, #0]
 800152e:	4b05      	ldr	r3, [pc, #20]	@ (8001544 <on_button_pressed+0x24>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	2b05      	cmp	r3, #5
 8001534:	dd02      	ble.n	800153c <on_button_pressed+0x1c>
		level = 0;
 8001536:	4b03      	ldr	r3, [pc, #12]	@ (8001544 <on_button_pressed+0x24>)
 8001538:	2200      	movs	r2, #0
 800153a:	601a      	str	r2, [r3, #0]
	}
}
 800153c:	bf00      	nop
 800153e:	46bd      	mov	sp, r7
 8001540:	bc80      	pop	{r7}
 8001542:	4770      	bx	lr
 8001544:	200001cc 	.word	0x200001cc

08001548 <on_button_held>:

#include "base.h"
#include "event.h"

__WEAK void on_button_pressed() {}
__WEAK void on_button_held() {}
 8001548:	b480      	push	{r7}
 800154a:	af00      	add	r7, sp, #0
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr

08001554 <on_button_released>:
__WEAK void on_button_released() {}
 8001554:	b480      	push	{r7}
 8001556:	af00      	add	r7, sp, #0
 8001558:	bf00      	nop
 800155a:	46bd      	mov	sp, r7
 800155c:	bc80      	pop	{r7}
 800155e:	4770      	bx	lr

08001560 <on_event>:


static uint8_t is_button_held = 0;

void on_event() {
 8001560:	b580      	push	{r7, lr}
 8001562:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8001564:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001568:	480e      	ldr	r0, [pc, #56]	@ (80015a4 <on_event+0x44>)
 800156a:	f001 fea5 	bl	80032b8 <HAL_GPIO_ReadPin>
 800156e:	4603      	mov	r3, r0
 8001570:	2b00      	cmp	r3, #0
 8001572:	d10c      	bne.n	800158e <on_event+0x2e>
		if (!is_button_held) {
 8001574:	4b0c      	ldr	r3, [pc, #48]	@ (80015a8 <on_event+0x48>)
 8001576:	781b      	ldrb	r3, [r3, #0]
 8001578:	2b00      	cmp	r3, #0
 800157a:	d105      	bne.n	8001588 <on_event+0x28>
			is_button_held = 1;
 800157c:	4b0a      	ldr	r3, [pc, #40]	@ (80015a8 <on_event+0x48>)
 800157e:	2201      	movs	r2, #1
 8001580:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8001582:	f7ff ffcd 	bl	8001520 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8001586:	e00b      	b.n	80015a0 <on_event+0x40>
			on_button_held();
 8001588:	f7ff ffde 	bl	8001548 <on_button_held>
}
 800158c:	e008      	b.n	80015a0 <on_event+0x40>
		if (is_button_held) {
 800158e:	4b06      	ldr	r3, [pc, #24]	@ (80015a8 <on_event+0x48>)
 8001590:	781b      	ldrb	r3, [r3, #0]
 8001592:	2b00      	cmp	r3, #0
 8001594:	d004      	beq.n	80015a0 <on_event+0x40>
			is_button_held = 0;
 8001596:	4b04      	ldr	r3, [pc, #16]	@ (80015a8 <on_event+0x48>)
 8001598:	2200      	movs	r2, #0
 800159a:	701a      	strb	r2, [r3, #0]
			on_button_released();
 800159c:	f7ff ffda 	bl	8001554 <on_button_released>
}
 80015a0:	bf00      	nop
 80015a2:	bd80      	pop	{r7, pc}
 80015a4:	40011000 	.word	0x40011000
 80015a8:	200002c4 	.word	0x200002c4

080015ac <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	b082      	sub	sp, #8
 80015b0:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80015b2:	f001 fbe5 	bl	8002d80 <HAL_GetTick>
 80015b6:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 80015b8:	4b06      	ldr	r3, [pc, #24]	@ (80015d4 <get_tick_delta_time+0x28>)
 80015ba:	681b      	ldr	r3, [r3, #0]
 80015bc:	687a      	ldr	r2, [r7, #4]
 80015be:	1ad3      	subs	r3, r2, r3
 80015c0:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 80015c2:	4a04      	ldr	r2, [pc, #16]	@ (80015d4 <get_tick_delta_time+0x28>)
 80015c4:	687b      	ldr	r3, [r7, #4]
 80015c6:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 80015c8:	683b      	ldr	r3, [r7, #0]
}
 80015ca:	4618      	mov	r0, r3
 80015cc:	3708      	adds	r7, #8
 80015ce:	46bd      	mov	sp, r7
 80015d0:	bd80      	pop	{r7, pc}
 80015d2:	bf00      	nop
 80015d4:	200003b8 	.word	0x200003b8

080015d8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015d8:	b580      	push	{r7, lr}
 80015da:	b082      	sub	sp, #8
 80015dc:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015de:	f001 fb77 	bl	8002cd0 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e2:	f000 f86d 	bl	80016c0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e6:	f000 f9cf 	bl	8001988 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015ea:	f000 f8ab 	bl	8001744 <MX_SPI1_Init>
  MX_TIM2_Init();
 80015ee:	f000 f8df 	bl	80017b0 <MX_TIM2_Init>
  MX_TIM3_Init();
 80015f2:	f000 f953 	bl	800189c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 80015f6:	4829      	ldr	r0, [pc, #164]	@ (800169c <main+0xc4>)
 80015f8:	f002 fb40 	bl	8003c7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80015fc:	4828      	ldr	r0, [pc, #160]	@ (80016a0 <main+0xc8>)
 80015fe:	f002 fb3d 	bl	8003c7c <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001602:	2100      	movs	r1, #0
 8001604:	4826      	ldr	r0, [pc, #152]	@ (80016a0 <main+0xc8>)
 8001606:	f002 fbe3 	bl	8003dd0 <HAL_TIM_PWM_Start>
	OE_H;
 800160a:	2201      	movs	r2, #1
 800160c:	2140      	movs	r1, #64	@ 0x40
 800160e:	4825      	ldr	r0, [pc, #148]	@ (80016a4 <main+0xcc>)
 8001610:	f001 fe69 	bl	80032e6 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 8001614:	f000 ffbe 	bl	8002594 <clear_back_buffer>
	on_ready();
 8001618:	f7ff fe86 	bl	8001328 <on_ready>

#if DEBUG_NUMBERS
	uint32_t debug_var = 0;
#endif

	uint32_t accumulator = 0;
 800161c:	2300      	movs	r3, #0
 800161e:	607b      	str	r3, [r7, #4]

	while (1) {
		uint32_t delta = get_tick_delta_time();
 8001620:	f7ff ffc4 	bl	80015ac <get_tick_delta_time>
 8001624:	6038      	str	r0, [r7, #0]

		accumulator += delta;
 8001626:	687a      	ldr	r2, [r7, #4]
 8001628:	683b      	ldr	r3, [r7, #0]
 800162a:	4413      	add	r3, r2
 800162c:	607b      	str	r3, [r7, #4]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 800162e:	687b      	ldr	r3, [r7, #4]
 8001630:	2b13      	cmp	r3, #19
 8001632:	d91a      	bls.n	800166a <main+0x92>
			if (is_back_buffer_new){
 8001634:	4b1c      	ldr	r3, [pc, #112]	@ (80016a8 <main+0xd0>)
 8001636:	781b      	ldrb	r3, [r3, #0]
 8001638:	2b00      	cmp	r3, #0
 800163a:	d12c      	bne.n	8001696 <main+0xbe>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 800163c:	6878      	ldr	r0, [r7, #4]
 800163e:	f7fe fec9 	bl	80003d4 <__aeabi_ui2d>
 8001642:	f04f 0200 	mov.w	r2, #0
 8001646:	4b19      	ldr	r3, [pc, #100]	@ (80016ac <main+0xd4>)
 8001648:	f7ff f868 	bl	800071c <__aeabi_ddiv>
 800164c:	4602      	mov	r2, r0
 800164e:	460b      	mov	r3, r1
 8001650:	4917      	ldr	r1, [pc, #92]	@ (80016b0 <main+0xd8>)
 8001652:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8001656:	f7ff ff83 	bl	8001560 <on_event>
			on_update();
 800165a:	f7ff feb7 	bl	80013cc <on_update>
#if DEBUG_NUMBERS
			draw_number(accumulator, 0, HEIGHT-7, false);
			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
#endif

			accumulator -= UPDATE_INTERVAL_MS;
 800165e:	687b      	ldr	r3, [r7, #4]
 8001660:	3b14      	subs	r3, #20
 8001662:	607b      	str	r3, [r7, #4]
			//accumulator = 0;
			is_back_buffer_new = true;
 8001664:	4b10      	ldr	r3, [pc, #64]	@ (80016a8 <main+0xd0>)
 8001666:	2201      	movs	r2, #1
 8001668:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 800166a:	4b12      	ldr	r3, [pc, #72]	@ (80016b4 <main+0xdc>)
 800166c:	781b      	ldrb	r3, [r3, #0]
 800166e:	2b00      	cmp	r3, #0
 8001670:	d0d6      	beq.n	8001620 <main+0x48>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 8001672:	f001 fb85 	bl	8002d80 <HAL_GetTick>
 8001676:	4602      	mov	r2, r0
 8001678:	4b0f      	ldr	r3, [pc, #60]	@ (80016b8 <main+0xe0>)
 800167a:	681b      	ldr	r3, [r3, #0]
 800167c:	1ad3      	subs	r3, r2, r3
 800167e:	2b14      	cmp	r3, #20
 8001680:	d9ce      	bls.n	8001620 <main+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001682:	2200      	movs	r2, #0
 8001684:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001688:	480c      	ldr	r0, [pc, #48]	@ (80016bc <main+0xe4>)
 800168a:	f001 fe2c 	bl	80032e6 <HAL_GPIO_WritePin>
				buzzer_request = false;
 800168e:	4b09      	ldr	r3, [pc, #36]	@ (80016b4 <main+0xdc>)
 8001690:	2200      	movs	r2, #0
 8001692:	701a      	strb	r2, [r3, #0]
 8001694:	e7c4      	b.n	8001620 <main+0x48>
				continue;
 8001696:	bf00      	nop
	while (1) {
 8001698:	e7c2      	b.n	8001620 <main+0x48>
 800169a:	bf00      	nop
 800169c:	20000320 	.word	0x20000320
 80016a0:	20000368 	.word	0x20000368
 80016a4:	40011000 	.word	0x40011000
 80016a8:	200013c4 	.word	0x200013c4
 80016ac:	408f4000 	.word	0x408f4000
 80016b0:	200003b0 	.word	0x200003b0
 80016b4:	200003bc 	.word	0x200003bc
 80016b8:	200003c0 	.word	0x200003c0
 80016bc:	40010800 	.word	0x40010800

080016c0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016c0:	b580      	push	{r7, lr}
 80016c2:	b090      	sub	sp, #64	@ 0x40
 80016c4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016c6:	f107 0318 	add.w	r3, r7, #24
 80016ca:	2228      	movs	r2, #40	@ 0x28
 80016cc:	2100      	movs	r1, #0
 80016ce:	4618      	mov	r0, r3
 80016d0:	f003 f9f2 	bl	8004ab8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016d4:	1d3b      	adds	r3, r7, #4
 80016d6:	2200      	movs	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
 80016da:	605a      	str	r2, [r3, #4]
 80016dc:	609a      	str	r2, [r3, #8]
 80016de:	60da      	str	r2, [r3, #12]
 80016e0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016e2:	2302      	movs	r3, #2
 80016e4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016e6:	2301      	movs	r3, #1
 80016e8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ea:	2310      	movs	r3, #16
 80016ec:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016ee:	2302      	movs	r3, #2
 80016f0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80016f2:	2300      	movs	r3, #0
 80016f4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80016f6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80016fa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016fc:	f107 0318 	add.w	r3, r7, #24
 8001700:	4618      	mov	r0, r3
 8001702:	f001 fe09 	bl	8003318 <HAL_RCC_OscConfig>
 8001706:	4603      	mov	r3, r0
 8001708:	2b00      	cmp	r3, #0
 800170a:	d001      	beq.n	8001710 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800170c:	f000 fa00 	bl	8001b10 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001710:	230f      	movs	r3, #15
 8001712:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001714:	2302      	movs	r3, #2
 8001716:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001718:	2300      	movs	r3, #0
 800171a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800171c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001720:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001722:	2300      	movs	r3, #0
 8001724:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001726:	1d3b      	adds	r3, r7, #4
 8001728:	2102      	movs	r1, #2
 800172a:	4618      	mov	r0, r3
 800172c:	f002 f876 	bl	800381c <HAL_RCC_ClockConfig>
 8001730:	4603      	mov	r3, r0
 8001732:	2b00      	cmp	r3, #0
 8001734:	d001      	beq.n	800173a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001736:	f000 f9eb 	bl	8001b10 <Error_Handler>
  }
}
 800173a:	bf00      	nop
 800173c:	3740      	adds	r7, #64	@ 0x40
 800173e:	46bd      	mov	sp, r7
 8001740:	bd80      	pop	{r7, pc}
	...

08001744 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001744:	b580      	push	{r7, lr}
 8001746:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001748:	4b17      	ldr	r3, [pc, #92]	@ (80017a8 <MX_SPI1_Init+0x64>)
 800174a:	4a18      	ldr	r2, [pc, #96]	@ (80017ac <MX_SPI1_Init+0x68>)
 800174c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800174e:	4b16      	ldr	r3, [pc, #88]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001750:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001754:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001756:	4b14      	ldr	r3, [pc, #80]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001758:	2200      	movs	r2, #0
 800175a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800175c:	4b12      	ldr	r3, [pc, #72]	@ (80017a8 <MX_SPI1_Init+0x64>)
 800175e:	2200      	movs	r2, #0
 8001760:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001762:	4b11      	ldr	r3, [pc, #68]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001764:	2200      	movs	r2, #0
 8001766:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001768:	4b0f      	ldr	r3, [pc, #60]	@ (80017a8 <MX_SPI1_Init+0x64>)
 800176a:	2200      	movs	r2, #0
 800176c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800176e:	4b0e      	ldr	r3, [pc, #56]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001770:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001774:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001776:	4b0c      	ldr	r3, [pc, #48]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001778:	2210      	movs	r2, #16
 800177a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800177c:	4b0a      	ldr	r3, [pc, #40]	@ (80017a8 <MX_SPI1_Init+0x64>)
 800177e:	2200      	movs	r2, #0
 8001780:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001782:	4b09      	ldr	r3, [pc, #36]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001784:	2200      	movs	r2, #0
 8001786:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001788:	4b07      	ldr	r3, [pc, #28]	@ (80017a8 <MX_SPI1_Init+0x64>)
 800178a:	2200      	movs	r2, #0
 800178c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800178e:	4b06      	ldr	r3, [pc, #24]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001790:	220a      	movs	r2, #10
 8001792:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001794:	4804      	ldr	r0, [pc, #16]	@ (80017a8 <MX_SPI1_Init+0x64>)
 8001796:	f002 f99d 	bl	8003ad4 <HAL_SPI_Init>
 800179a:	4603      	mov	r3, r0
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017a0:	f000 f9b6 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017a4:	bf00      	nop
 80017a6:	bd80      	pop	{r7, pc}
 80017a8:	200002c8 	.word	0x200002c8
 80017ac:	40013000 	.word	0x40013000

080017b0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017b0:	b580      	push	{r7, lr}
 80017b2:	b08e      	sub	sp, #56	@ 0x38
 80017b4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017b6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ba:	2200      	movs	r2, #0
 80017bc:	601a      	str	r2, [r3, #0]
 80017be:	605a      	str	r2, [r3, #4]
 80017c0:	609a      	str	r2, [r3, #8]
 80017c2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017c4:	f107 0320 	add.w	r3, r7, #32
 80017c8:	2200      	movs	r2, #0
 80017ca:	601a      	str	r2, [r3, #0]
 80017cc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017ce:	1d3b      	adds	r3, r7, #4
 80017d0:	2200      	movs	r2, #0
 80017d2:	601a      	str	r2, [r3, #0]
 80017d4:	605a      	str	r2, [r3, #4]
 80017d6:	609a      	str	r2, [r3, #8]
 80017d8:	60da      	str	r2, [r3, #12]
 80017da:	611a      	str	r2, [r3, #16]
 80017dc:	615a      	str	r2, [r3, #20]
 80017de:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017e0:	4b2d      	ldr	r3, [pc, #180]	@ (8001898 <MX_TIM2_Init+0xe8>)
 80017e2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017e6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80017e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001898 <MX_TIM2_Init+0xe8>)
 80017ea:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80017ee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80017f0:	4b29      	ldr	r3, [pc, #164]	@ (8001898 <MX_TIM2_Init+0xe8>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 80017f6:	4b28      	ldr	r3, [pc, #160]	@ (8001898 <MX_TIM2_Init+0xe8>)
 80017f8:	2205      	movs	r2, #5
 80017fa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80017fc:	4b26      	ldr	r3, [pc, #152]	@ (8001898 <MX_TIM2_Init+0xe8>)
 80017fe:	2200      	movs	r2, #0
 8001800:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001802:	4b25      	ldr	r3, [pc, #148]	@ (8001898 <MX_TIM2_Init+0xe8>)
 8001804:	2200      	movs	r2, #0
 8001806:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001808:	4823      	ldr	r0, [pc, #140]	@ (8001898 <MX_TIM2_Init+0xe8>)
 800180a:	f002 f9e7 	bl	8003bdc <HAL_TIM_Base_Init>
 800180e:	4603      	mov	r3, r0
 8001810:	2b00      	cmp	r3, #0
 8001812:	d001      	beq.n	8001818 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001814:	f000 f97c 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001818:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800181c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800181e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001822:	4619      	mov	r1, r3
 8001824:	481c      	ldr	r0, [pc, #112]	@ (8001898 <MX_TIM2_Init+0xe8>)
 8001826:	f002 fd3f 	bl	80042a8 <HAL_TIM_ConfigClockSource>
 800182a:	4603      	mov	r3, r0
 800182c:	2b00      	cmp	r3, #0
 800182e:	d001      	beq.n	8001834 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001830:	f000 f96e 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001834:	4818      	ldr	r0, [pc, #96]	@ (8001898 <MX_TIM2_Init+0xe8>)
 8001836:	f002 fa73 	bl	8003d20 <HAL_TIM_PWM_Init>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001840:	f000 f966 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001844:	2300      	movs	r3, #0
 8001846:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001848:	2300      	movs	r3, #0
 800184a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800184c:	f107 0320 	add.w	r3, r7, #32
 8001850:	4619      	mov	r1, r3
 8001852:	4811      	ldr	r0, [pc, #68]	@ (8001898 <MX_TIM2_Init+0xe8>)
 8001854:	f003 f8c0 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001858:	4603      	mov	r3, r0
 800185a:	2b00      	cmp	r3, #0
 800185c:	d001      	beq.n	8001862 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800185e:	f000 f957 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001862:	2360      	movs	r3, #96	@ 0x60
 8001864:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001866:	2300      	movs	r3, #0
 8001868:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800186a:	2300      	movs	r3, #0
 800186c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800186e:	2300      	movs	r3, #0
 8001870:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001872:	1d3b      	adds	r3, r7, #4
 8001874:	2200      	movs	r2, #0
 8001876:	4619      	mov	r1, r3
 8001878:	4807      	ldr	r0, [pc, #28]	@ (8001898 <MX_TIM2_Init+0xe8>)
 800187a:	f002 fc53 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 800187e:	4603      	mov	r3, r0
 8001880:	2b00      	cmp	r3, #0
 8001882:	d001      	beq.n	8001888 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001884:	f000 f944 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001888:	4803      	ldr	r0, [pc, #12]	@ (8001898 <MX_TIM2_Init+0xe8>)
 800188a:	f001 f957 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 800188e:	bf00      	nop
 8001890:	3738      	adds	r7, #56	@ 0x38
 8001892:	46bd      	mov	sp, r7
 8001894:	bd80      	pop	{r7, pc}
 8001896:	bf00      	nop
 8001898:	20000320 	.word	0x20000320

0800189c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b08e      	sub	sp, #56	@ 0x38
 80018a0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018a2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018a6:	2200      	movs	r2, #0
 80018a8:	601a      	str	r2, [r3, #0]
 80018aa:	605a      	str	r2, [r3, #4]
 80018ac:	609a      	str	r2, [r3, #8]
 80018ae:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018b0:	f107 0320 	add.w	r3, r7, #32
 80018b4:	2200      	movs	r2, #0
 80018b6:	601a      	str	r2, [r3, #0]
 80018b8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ba:	1d3b      	adds	r3, r7, #4
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]
 80018c8:	615a      	str	r2, [r3, #20]
 80018ca:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018cc:	4b2c      	ldr	r3, [pc, #176]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018ce:	4a2d      	ldr	r2, [pc, #180]	@ (8001984 <MX_TIM3_Init+0xe8>)
 80018d0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80018d2:	4b2b      	ldr	r3, [pc, #172]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018d4:	223f      	movs	r2, #63	@ 0x3f
 80018d6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018d8:	4b29      	ldr	r3, [pc, #164]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80018de:	4b28      	ldr	r3, [pc, #160]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018e0:	2263      	movs	r2, #99	@ 0x63
 80018e2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018e4:	4b26      	ldr	r3, [pc, #152]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018e6:	2200      	movs	r2, #0
 80018e8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018ea:	4b25      	ldr	r3, [pc, #148]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018ec:	2200      	movs	r2, #0
 80018ee:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80018f0:	4823      	ldr	r0, [pc, #140]	@ (8001980 <MX_TIM3_Init+0xe4>)
 80018f2:	f002 f973 	bl	8003bdc <HAL_TIM_Base_Init>
 80018f6:	4603      	mov	r3, r0
 80018f8:	2b00      	cmp	r3, #0
 80018fa:	d001      	beq.n	8001900 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 80018fc:	f000 f908 	bl	8001b10 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001900:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001904:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001906:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800190a:	4619      	mov	r1, r3
 800190c:	481c      	ldr	r0, [pc, #112]	@ (8001980 <MX_TIM3_Init+0xe4>)
 800190e:	f002 fccb 	bl	80042a8 <HAL_TIM_ConfigClockSource>
 8001912:	4603      	mov	r3, r0
 8001914:	2b00      	cmp	r3, #0
 8001916:	d001      	beq.n	800191c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001918:	f000 f8fa 	bl	8001b10 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800191c:	4818      	ldr	r0, [pc, #96]	@ (8001980 <MX_TIM3_Init+0xe4>)
 800191e:	f002 f9ff 	bl	8003d20 <HAL_TIM_PWM_Init>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001928:	f000 f8f2 	bl	8001b10 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800192c:	2300      	movs	r3, #0
 800192e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001930:	2300      	movs	r3, #0
 8001932:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001934:	f107 0320 	add.w	r3, r7, #32
 8001938:	4619      	mov	r1, r3
 800193a:	4811      	ldr	r0, [pc, #68]	@ (8001980 <MX_TIM3_Init+0xe4>)
 800193c:	f003 f84c 	bl	80049d8 <HAL_TIMEx_MasterConfigSynchronization>
 8001940:	4603      	mov	r3, r0
 8001942:	2b00      	cmp	r3, #0
 8001944:	d001      	beq.n	800194a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001946:	f000 f8e3 	bl	8001b10 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800194a:	2360      	movs	r3, #96	@ 0x60
 800194c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800194e:	230a      	movs	r3, #10
 8001950:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001952:	2302      	movs	r3, #2
 8001954:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001956:	2300      	movs	r3, #0
 8001958:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800195a:	1d3b      	adds	r3, r7, #4
 800195c:	2200      	movs	r2, #0
 800195e:	4619      	mov	r1, r3
 8001960:	4807      	ldr	r0, [pc, #28]	@ (8001980 <MX_TIM3_Init+0xe4>)
 8001962:	f002 fbdf 	bl	8004124 <HAL_TIM_PWM_ConfigChannel>
 8001966:	4603      	mov	r3, r0
 8001968:	2b00      	cmp	r3, #0
 800196a:	d001      	beq.n	8001970 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800196c:	f000 f8d0 	bl	8001b10 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001970:	4803      	ldr	r0, [pc, #12]	@ (8001980 <MX_TIM3_Init+0xe4>)
 8001972:	f001 f8e3 	bl	8002b3c <HAL_TIM_MspPostInit>

}
 8001976:	bf00      	nop
 8001978:	3738      	adds	r7, #56	@ 0x38
 800197a:	46bd      	mov	sp, r7
 800197c:	bd80      	pop	{r7, pc}
 800197e:	bf00      	nop
 8001980:	20000368 	.word	0x20000368
 8001984:	40000400 	.word	0x40000400

08001988 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001988:	b580      	push	{r7, lr}
 800198a:	b088      	sub	sp, #32
 800198c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800198e:	f107 0310 	add.w	r3, r7, #16
 8001992:	2200      	movs	r2, #0
 8001994:	601a      	str	r2, [r3, #0]
 8001996:	605a      	str	r2, [r3, #4]
 8001998:	609a      	str	r2, [r3, #8]
 800199a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800199c:	4b56      	ldr	r3, [pc, #344]	@ (8001af8 <MX_GPIO_Init+0x170>)
 800199e:	699b      	ldr	r3, [r3, #24]
 80019a0:	4a55      	ldr	r2, [pc, #340]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019a2:	f043 0310 	orr.w	r3, r3, #16
 80019a6:	6193      	str	r3, [r2, #24]
 80019a8:	4b53      	ldr	r3, [pc, #332]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019aa:	699b      	ldr	r3, [r3, #24]
 80019ac:	f003 0310 	and.w	r3, r3, #16
 80019b0:	60fb      	str	r3, [r7, #12]
 80019b2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019b4:	4b50      	ldr	r3, [pc, #320]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019b6:	699b      	ldr	r3, [r3, #24]
 80019b8:	4a4f      	ldr	r2, [pc, #316]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019ba:	f043 0304 	orr.w	r3, r3, #4
 80019be:	6193      	str	r3, [r2, #24]
 80019c0:	4b4d      	ldr	r3, [pc, #308]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019c2:	699b      	ldr	r3, [r3, #24]
 80019c4:	f003 0304 	and.w	r3, r3, #4
 80019c8:	60bb      	str	r3, [r7, #8]
 80019ca:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019cc:	4b4a      	ldr	r3, [pc, #296]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019ce:	699b      	ldr	r3, [r3, #24]
 80019d0:	4a49      	ldr	r2, [pc, #292]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019d2:	f043 0308 	orr.w	r3, r3, #8
 80019d6:	6193      	str	r3, [r2, #24]
 80019d8:	4b47      	ldr	r3, [pc, #284]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019da:	699b      	ldr	r3, [r3, #24]
 80019dc:	f003 0308 	and.w	r3, r3, #8
 80019e0:	607b      	str	r3, [r7, #4]
 80019e2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019e4:	4b44      	ldr	r3, [pc, #272]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019e6:	699b      	ldr	r3, [r3, #24]
 80019e8:	4a43      	ldr	r2, [pc, #268]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019ea:	f043 0320 	orr.w	r3, r3, #32
 80019ee:	6193      	str	r3, [r2, #24]
 80019f0:	4b41      	ldr	r3, [pc, #260]	@ (8001af8 <MX_GPIO_Init+0x170>)
 80019f2:	699b      	ldr	r3, [r3, #24]
 80019f4:	f003 0320 	and.w	r3, r3, #32
 80019f8:	603b      	str	r3, [r7, #0]
 80019fa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80019fc:	2200      	movs	r2, #0
 80019fe:	f24e 0138 	movw	r1, #57400	@ 0xe038
 8001a02:	483e      	ldr	r0, [pc, #248]	@ (8001afc <MX_GPIO_Init+0x174>)
 8001a04:	f001 fc6f 	bl	80032e6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8001a0e:	483c      	ldr	r0, [pc, #240]	@ (8001b00 <MX_GPIO_Init+0x178>)
 8001a10:	f001 fc69 	bl	80032e6 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a14:	2200      	movs	r2, #0
 8001a16:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001a1a:	483a      	ldr	r0, [pc, #232]	@ (8001b04 <MX_GPIO_Init+0x17c>)
 8001a1c:	f001 fc63 	bl	80032e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a20:	2200      	movs	r2, #0
 8001a22:	2104      	movs	r1, #4
 8001a24:	4838      	ldr	r0, [pc, #224]	@ (8001b08 <MX_GPIO_Init+0x180>)
 8001a26:	f001 fc5e 	bl	80032e6 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a2a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a2e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a30:	4b36      	ldr	r3, [pc, #216]	@ (8001b0c <MX_GPIO_Init+0x184>)
 8001a32:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a34:	2300      	movs	r3, #0
 8001a36:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a38:	f107 0310 	add.w	r3, r7, #16
 8001a3c:	4619      	mov	r1, r3
 8001a3e:	4830      	ldr	r0, [pc, #192]	@ (8001b00 <MX_GPIO_Init+0x178>)
 8001a40:	f001 fab6 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001a44:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8001a48:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a4a:	2301      	movs	r3, #1
 8001a4c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a52:	2302      	movs	r3, #2
 8001a54:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a56:	f107 0310 	add.w	r3, r7, #16
 8001a5a:	4619      	mov	r1, r3
 8001a5c:	4827      	ldr	r0, [pc, #156]	@ (8001afc <MX_GPIO_Init+0x174>)
 8001a5e:	f001 faa7 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001a62:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8001a66:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a68:	2301      	movs	r3, #1
 8001a6a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6c:	2300      	movs	r3, #0
 8001a6e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a70:	2302      	movs	r3, #2
 8001a72:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a74:	f107 0310 	add.w	r3, r7, #16
 8001a78:	4619      	mov	r1, r3
 8001a7a:	4821      	ldr	r0, [pc, #132]	@ (8001b00 <MX_GPIO_Init+0x178>)
 8001a7c:	f001 fa98 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001a80:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001a84:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a86:	2301      	movs	r3, #1
 8001a88:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a8e:	2302      	movs	r3, #2
 8001a90:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001a92:	f107 0310 	add.w	r3, r7, #16
 8001a96:	4619      	mov	r1, r3
 8001a98:	481a      	ldr	r0, [pc, #104]	@ (8001b04 <MX_GPIO_Init+0x17c>)
 8001a9a:	f001 fa89 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001a9e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001aa2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aa4:	2300      	movs	r3, #0
 8001aa6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001aa8:	2300      	movs	r3, #0
 8001aaa:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001aac:	f107 0310 	add.w	r3, r7, #16
 8001ab0:	4619      	mov	r1, r3
 8001ab2:	4813      	ldr	r0, [pc, #76]	@ (8001b00 <MX_GPIO_Init+0x178>)
 8001ab4:	f001 fa7c 	bl	8002fb0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ab8:	2304      	movs	r3, #4
 8001aba:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001abc:	2301      	movs	r3, #1
 8001abe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ac0:	2300      	movs	r3, #0
 8001ac2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ac4:	2302      	movs	r3, #2
 8001ac6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ac8:	f107 0310 	add.w	r3, r7, #16
 8001acc:	4619      	mov	r1, r3
 8001ace:	480e      	ldr	r0, [pc, #56]	@ (8001b08 <MX_GPIO_Init+0x180>)
 8001ad0:	f001 fa6e 	bl	8002fb0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ad4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ad8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ada:	2300      	movs	r3, #0
 8001adc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001ade:	2301      	movs	r3, #1
 8001ae0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001ae2:	f107 0310 	add.w	r3, r7, #16
 8001ae6:	4619      	mov	r1, r3
 8001ae8:	4805      	ldr	r0, [pc, #20]	@ (8001b00 <MX_GPIO_Init+0x178>)
 8001aea:	f001 fa61 	bl	8002fb0 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001aee:	bf00      	nop
 8001af0:	3720      	adds	r7, #32
 8001af2:	46bd      	mov	sp, r7
 8001af4:	bd80      	pop	{r7, pc}
 8001af6:	bf00      	nop
 8001af8:	40021000 	.word	0x40021000
 8001afc:	40010c00 	.word	0x40010c00
 8001b00:	40011000 	.word	0x40011000
 8001b04:	40010800 	.word	0x40010800
 8001b08:	40011400 	.word	0x40011400
 8001b0c:	10110000 	.word	0x10110000

08001b10 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b10:	b480      	push	{r7}
 8001b12:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b14:	b672      	cpsid	i
}
 8001b16:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b18:	bf00      	nop
 8001b1a:	e7fd      	b.n	8001b18 <Error_Handler+0x8>

08001b1c <mat4_mul_mat4>:
Mat4 get_rotation_matrix_y(float angle);
Mat4 get_rotation_matrix_z(float angle);
Mat4 get_scaling_matrix(float sx, float sy, float sz);


Mat4 mat4_mul_mat4(const Mat4 *a, const Mat4 *b) {
 8001b1c:	b5b0      	push	{r4, r5, r7, lr}
 8001b1e:	b098      	sub	sp, #96	@ 0x60
 8001b20:	af00      	add	r7, sp, #0
 8001b22:	60f8      	str	r0, [r7, #12]
 8001b24:	60b9      	str	r1, [r7, #8]
 8001b26:	607a      	str	r2, [r7, #4]
	Mat4 result = {0};
 8001b28:	f107 0314 	add.w	r3, r7, #20
 8001b2c:	2240      	movs	r2, #64	@ 0x40
 8001b2e:	2100      	movs	r1, #0
 8001b30:	4618      	mov	r0, r3
 8001b32:	f002 ffc1 	bl	8004ab8 <memset>
	for (int i = 0; i < 4; ++i) {
 8001b36:	2300      	movs	r3, #0
 8001b38:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b3a:	e049      	b.n	8001bd0 <mat4_mul_mat4+0xb4>
		for (int j = 0; j < 4; ++j) {
 8001b3c:	2300      	movs	r3, #0
 8001b3e:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b40:	e040      	b.n	8001bc4 <mat4_mul_mat4+0xa8>
			result.m[i][j] = 0.0f;
 8001b42:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b44:	009a      	lsls	r2, r3, #2
 8001b46:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b48:	4413      	add	r3, r2
 8001b4a:	009b      	lsls	r3, r3, #2
 8001b4c:	3360      	adds	r3, #96	@ 0x60
 8001b4e:	443b      	add	r3, r7
 8001b50:	f04f 0200 	mov.w	r2, #0
 8001b54:	f843 2c4c 	str.w	r2, [r3, #-76]
			for (int k = 0; k < 4; ++k) {
 8001b58:	2300      	movs	r3, #0
 8001b5a:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b5c:	e02c      	b.n	8001bb8 <mat4_mul_mat4+0x9c>
				result.m[i][j] += a->m[i][k] * b->m[k][j];
 8001b5e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b60:	009a      	lsls	r2, r3, #2
 8001b62:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b64:	4413      	add	r3, r2
 8001b66:	009b      	lsls	r3, r3, #2
 8001b68:	3360      	adds	r3, #96	@ 0x60
 8001b6a:	443b      	add	r3, r7
 8001b6c:	f853 4c4c 	ldr.w	r4, [r3, #-76]
 8001b70:	68bb      	ldr	r3, [r7, #8]
 8001b72:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b74:	0091      	lsls	r1, r2, #2
 8001b76:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b78:	440a      	add	r2, r1
 8001b7a:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b82:	0091      	lsls	r1, r2, #2
 8001b84:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b86:	440a      	add	r2, r1
 8001b88:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	f7ff f8bb 	bl	8000d08 <__aeabi_fmul>
 8001b92:	4603      	mov	r3, r0
 8001b94:	4619      	mov	r1, r3
 8001b96:	4620      	mov	r0, r4
 8001b98:	f7fe ffae 	bl	8000af8 <__addsf3>
 8001b9c:	4603      	mov	r3, r0
 8001b9e:	4619      	mov	r1, r3
 8001ba0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ba2:	009a      	lsls	r2, r3, #2
 8001ba4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba6:	4413      	add	r3, r2
 8001ba8:	009b      	lsls	r3, r3, #2
 8001baa:	3360      	adds	r3, #96	@ 0x60
 8001bac:	443b      	add	r3, r7
 8001bae:	f843 1c4c 	str.w	r1, [r3, #-76]
			for (int k = 0; k < 4; ++k) {
 8001bb2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb4:	3301      	adds	r3, #1
 8001bb6:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bb8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bba:	2b03      	cmp	r3, #3
 8001bbc:	ddcf      	ble.n	8001b5e <mat4_mul_mat4+0x42>
		for (int j = 0; j < 4; ++j) {
 8001bbe:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc0:	3301      	adds	r3, #1
 8001bc2:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bc4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc6:	2b03      	cmp	r3, #3
 8001bc8:	ddbb      	ble.n	8001b42 <mat4_mul_mat4+0x26>
	for (int i = 0; i < 4; ++i) {
 8001bca:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bcc:	3301      	adds	r3, #1
 8001bce:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bd0:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bd2:	2b03      	cmp	r3, #3
 8001bd4:	ddb2      	ble.n	8001b3c <mat4_mul_mat4+0x20>
			}
		}
	}
	return result;
 8001bd6:	68fb      	ldr	r3, [r7, #12]
 8001bd8:	461d      	mov	r5, r3
 8001bda:	f107 0414 	add.w	r4, r7, #20
 8001bde:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bea:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bee:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001bf2:	68f8      	ldr	r0, [r7, #12]
 8001bf4:	3760      	adds	r7, #96	@ 0x60
 8001bf6:	46bd      	mov	sp, r7
 8001bf8:	bdb0      	pop	{r4, r5, r7, pc}

08001bfa <mat4_mul_vec4>:

Vec4 mat4_mul_vec4(const Mat4 *m, const Vec4 *v) {
 8001bfa:	b590      	push	{r4, r7, lr}
 8001bfc:	b089      	sub	sp, #36	@ 0x24
 8001bfe:	af00      	add	r7, sp, #0
 8001c00:	60f8      	str	r0, [r7, #12]
 8001c02:	60b9      	str	r1, [r7, #8]
 8001c04:	607a      	str	r2, [r7, #4]
	Vec4 result;
    result.x = m->m[0][0] * v->x + m->m[0][1] * v->y + m->m[0][2] * v->z + m->m[0][3] * v->w;
 8001c06:	68bb      	ldr	r3, [r7, #8]
 8001c08:	681a      	ldr	r2, [r3, #0]
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	681b      	ldr	r3, [r3, #0]
 8001c0e:	4619      	mov	r1, r3
 8001c10:	4610      	mov	r0, r2
 8001c12:	f7ff f879 	bl	8000d08 <__aeabi_fmul>
 8001c16:	4603      	mov	r3, r0
 8001c18:	461c      	mov	r4, r3
 8001c1a:	68bb      	ldr	r3, [r7, #8]
 8001c1c:	685a      	ldr	r2, [r3, #4]
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	685b      	ldr	r3, [r3, #4]
 8001c22:	4619      	mov	r1, r3
 8001c24:	4610      	mov	r0, r2
 8001c26:	f7ff f86f 	bl	8000d08 <__aeabi_fmul>
 8001c2a:	4603      	mov	r3, r0
 8001c2c:	4619      	mov	r1, r3
 8001c2e:	4620      	mov	r0, r4
 8001c30:	f7fe ff62 	bl	8000af8 <__addsf3>
 8001c34:	4603      	mov	r3, r0
 8001c36:	461c      	mov	r4, r3
 8001c38:	68bb      	ldr	r3, [r7, #8]
 8001c3a:	689a      	ldr	r2, [r3, #8]
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	689b      	ldr	r3, [r3, #8]
 8001c40:	4619      	mov	r1, r3
 8001c42:	4610      	mov	r0, r2
 8001c44:	f7ff f860 	bl	8000d08 <__aeabi_fmul>
 8001c48:	4603      	mov	r3, r0
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4620      	mov	r0, r4
 8001c4e:	f7fe ff53 	bl	8000af8 <__addsf3>
 8001c52:	4603      	mov	r3, r0
 8001c54:	461c      	mov	r4, r3
 8001c56:	68bb      	ldr	r3, [r7, #8]
 8001c58:	68da      	ldr	r2, [r3, #12]
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	68db      	ldr	r3, [r3, #12]
 8001c5e:	4619      	mov	r1, r3
 8001c60:	4610      	mov	r0, r2
 8001c62:	f7ff f851 	bl	8000d08 <__aeabi_fmul>
 8001c66:	4603      	mov	r3, r0
 8001c68:	4619      	mov	r1, r3
 8001c6a:	4620      	mov	r0, r4
 8001c6c:	f7fe ff44 	bl	8000af8 <__addsf3>
 8001c70:	4603      	mov	r3, r0
 8001c72:	613b      	str	r3, [r7, #16]
    result.y = m->m[1][0] * v->x + m->m[1][1] * v->y + m->m[1][2] * v->z + m->m[1][3] * v->w;
 8001c74:	68bb      	ldr	r3, [r7, #8]
 8001c76:	691a      	ldr	r2, [r3, #16]
 8001c78:	687b      	ldr	r3, [r7, #4]
 8001c7a:	681b      	ldr	r3, [r3, #0]
 8001c7c:	4619      	mov	r1, r3
 8001c7e:	4610      	mov	r0, r2
 8001c80:	f7ff f842 	bl	8000d08 <__aeabi_fmul>
 8001c84:	4603      	mov	r3, r0
 8001c86:	461c      	mov	r4, r3
 8001c88:	68bb      	ldr	r3, [r7, #8]
 8001c8a:	695a      	ldr	r2, [r3, #20]
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	685b      	ldr	r3, [r3, #4]
 8001c90:	4619      	mov	r1, r3
 8001c92:	4610      	mov	r0, r2
 8001c94:	f7ff f838 	bl	8000d08 <__aeabi_fmul>
 8001c98:	4603      	mov	r3, r0
 8001c9a:	4619      	mov	r1, r3
 8001c9c:	4620      	mov	r0, r4
 8001c9e:	f7fe ff2b 	bl	8000af8 <__addsf3>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	461c      	mov	r4, r3
 8001ca6:	68bb      	ldr	r3, [r7, #8]
 8001ca8:	699a      	ldr	r2, [r3, #24]
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	689b      	ldr	r3, [r3, #8]
 8001cae:	4619      	mov	r1, r3
 8001cb0:	4610      	mov	r0, r2
 8001cb2:	f7ff f829 	bl	8000d08 <__aeabi_fmul>
 8001cb6:	4603      	mov	r3, r0
 8001cb8:	4619      	mov	r1, r3
 8001cba:	4620      	mov	r0, r4
 8001cbc:	f7fe ff1c 	bl	8000af8 <__addsf3>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	461c      	mov	r4, r3
 8001cc4:	68bb      	ldr	r3, [r7, #8]
 8001cc6:	69da      	ldr	r2, [r3, #28]
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	68db      	ldr	r3, [r3, #12]
 8001ccc:	4619      	mov	r1, r3
 8001cce:	4610      	mov	r0, r2
 8001cd0:	f7ff f81a 	bl	8000d08 <__aeabi_fmul>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	4619      	mov	r1, r3
 8001cd8:	4620      	mov	r0, r4
 8001cda:	f7fe ff0d 	bl	8000af8 <__addsf3>
 8001cde:	4603      	mov	r3, r0
 8001ce0:	617b      	str	r3, [r7, #20]
    result.z = m->m[2][0] * v->x + m->m[2][1] * v->y + m->m[2][2] * v->z + m->m[2][3] * v->w;
 8001ce2:	68bb      	ldr	r3, [r7, #8]
 8001ce4:	6a1a      	ldr	r2, [r3, #32]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	681b      	ldr	r3, [r3, #0]
 8001cea:	4619      	mov	r1, r3
 8001cec:	4610      	mov	r0, r2
 8001cee:	f7ff f80b 	bl	8000d08 <__aeabi_fmul>
 8001cf2:	4603      	mov	r3, r0
 8001cf4:	461c      	mov	r4, r3
 8001cf6:	68bb      	ldr	r3, [r7, #8]
 8001cf8:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	685b      	ldr	r3, [r3, #4]
 8001cfe:	4619      	mov	r1, r3
 8001d00:	4610      	mov	r0, r2
 8001d02:	f7ff f801 	bl	8000d08 <__aeabi_fmul>
 8001d06:	4603      	mov	r3, r0
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4620      	mov	r0, r4
 8001d0c:	f7fe fef4 	bl	8000af8 <__addsf3>
 8001d10:	4603      	mov	r3, r0
 8001d12:	461c      	mov	r4, r3
 8001d14:	68bb      	ldr	r3, [r7, #8]
 8001d16:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	689b      	ldr	r3, [r3, #8]
 8001d1c:	4619      	mov	r1, r3
 8001d1e:	4610      	mov	r0, r2
 8001d20:	f7fe fff2 	bl	8000d08 <__aeabi_fmul>
 8001d24:	4603      	mov	r3, r0
 8001d26:	4619      	mov	r1, r3
 8001d28:	4620      	mov	r0, r4
 8001d2a:	f7fe fee5 	bl	8000af8 <__addsf3>
 8001d2e:	4603      	mov	r3, r0
 8001d30:	461c      	mov	r4, r3
 8001d32:	68bb      	ldr	r3, [r7, #8]
 8001d34:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d36:	687b      	ldr	r3, [r7, #4]
 8001d38:	68db      	ldr	r3, [r3, #12]
 8001d3a:	4619      	mov	r1, r3
 8001d3c:	4610      	mov	r0, r2
 8001d3e:	f7fe ffe3 	bl	8000d08 <__aeabi_fmul>
 8001d42:	4603      	mov	r3, r0
 8001d44:	4619      	mov	r1, r3
 8001d46:	4620      	mov	r0, r4
 8001d48:	f7fe fed6 	bl	8000af8 <__addsf3>
 8001d4c:	4603      	mov	r3, r0
 8001d4e:	61bb      	str	r3, [r7, #24]
    result.w = m->m[3][0] * v->x + m->m[3][1] * v->y + m->m[3][2] * v->z + m->m[3][3] * v->w;
 8001d50:	68bb      	ldr	r3, [r7, #8]
 8001d52:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	4619      	mov	r1, r3
 8001d5a:	4610      	mov	r0, r2
 8001d5c:	f7fe ffd4 	bl	8000d08 <__aeabi_fmul>
 8001d60:	4603      	mov	r3, r0
 8001d62:	461c      	mov	r4, r3
 8001d64:	68bb      	ldr	r3, [r7, #8]
 8001d66:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d68:	687b      	ldr	r3, [r7, #4]
 8001d6a:	685b      	ldr	r3, [r3, #4]
 8001d6c:	4619      	mov	r1, r3
 8001d6e:	4610      	mov	r0, r2
 8001d70:	f7fe ffca 	bl	8000d08 <__aeabi_fmul>
 8001d74:	4603      	mov	r3, r0
 8001d76:	4619      	mov	r1, r3
 8001d78:	4620      	mov	r0, r4
 8001d7a:	f7fe febd 	bl	8000af8 <__addsf3>
 8001d7e:	4603      	mov	r3, r0
 8001d80:	461c      	mov	r4, r3
 8001d82:	68bb      	ldr	r3, [r7, #8]
 8001d84:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d86:	687b      	ldr	r3, [r7, #4]
 8001d88:	689b      	ldr	r3, [r3, #8]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4610      	mov	r0, r2
 8001d8e:	f7fe ffbb 	bl	8000d08 <__aeabi_fmul>
 8001d92:	4603      	mov	r3, r0
 8001d94:	4619      	mov	r1, r3
 8001d96:	4620      	mov	r0, r4
 8001d98:	f7fe feae 	bl	8000af8 <__addsf3>
 8001d9c:	4603      	mov	r3, r0
 8001d9e:	461c      	mov	r4, r3
 8001da0:	68bb      	ldr	r3, [r7, #8]
 8001da2:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	68db      	ldr	r3, [r3, #12]
 8001da8:	4619      	mov	r1, r3
 8001daa:	4610      	mov	r0, r2
 8001dac:	f7fe ffac 	bl	8000d08 <__aeabi_fmul>
 8001db0:	4603      	mov	r3, r0
 8001db2:	4619      	mov	r1, r3
 8001db4:	4620      	mov	r0, r4
 8001db6:	f7fe fe9f 	bl	8000af8 <__addsf3>
 8001dba:	4603      	mov	r3, r0
 8001dbc:	61fb      	str	r3, [r7, #28]
    return result;
 8001dbe:	68fb      	ldr	r3, [r7, #12]
 8001dc0:	461c      	mov	r4, r3
 8001dc2:	f107 0310 	add.w	r3, r7, #16
 8001dc6:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dc8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	3724      	adds	r7, #36	@ 0x24
 8001dd0:	46bd      	mov	sp, r7
 8001dd2:	bd90      	pop	{r4, r7, pc}

08001dd4 <mat4_make_perspective>:

Mat4 mat4_make_perspective(float fov, float aspect, float znear, float zfar) {
 8001dd4:	b5b0      	push	{r4, r5, r7, lr}
 8001dd6:	b094      	sub	sp, #80	@ 0x50
 8001dd8:	af00      	add	r7, sp, #0
 8001dda:	60f8      	str	r0, [r7, #12]
 8001ddc:	60b9      	str	r1, [r7, #8]
 8001dde:	607a      	str	r2, [r7, #4]
 8001de0:	603b      	str	r3, [r7, #0]
	Mat4 m = {0};
 8001de2:	f107 0310 	add.w	r3, r7, #16
 8001de6:	2240      	movs	r2, #64	@ 0x40
 8001de8:	2100      	movs	r1, #0
 8001dea:	4618      	mov	r0, r3
 8001dec:	f002 fe64 	bl	8004ab8 <memset>
	m.m[0][0] = aspect * (1 / tan(fov/2));
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f7fe fb11 	bl	8000418 <__aeabi_f2d>
 8001df6:	4604      	mov	r4, r0
 8001df8:	460d      	mov	r5, r1
 8001dfa:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001dfe:	68b8      	ldr	r0, [r7, #8]
 8001e00:	f7ff f836 	bl	8000e70 <__aeabi_fdiv>
 8001e04:	4603      	mov	r3, r0
 8001e06:	4618      	mov	r0, r3
 8001e08:	f7fe fb06 	bl	8000418 <__aeabi_f2d>
 8001e0c:	4602      	mov	r2, r0
 8001e0e:	460b      	mov	r3, r1
 8001e10:	4610      	mov	r0, r2
 8001e12:	4619      	mov	r1, r3
 8001e14:	f002 ff08 	bl	8004c28 <tan>
 8001e18:	4602      	mov	r2, r0
 8001e1a:	460b      	mov	r3, r1
 8001e1c:	f04f 0000 	mov.w	r0, #0
 8001e20:	4931      	ldr	r1, [pc, #196]	@ (8001ee8 <mat4_make_perspective+0x114>)
 8001e22:	f7fe fc7b 	bl	800071c <__aeabi_ddiv>
 8001e26:	4602      	mov	r2, r0
 8001e28:	460b      	mov	r3, r1
 8001e2a:	4620      	mov	r0, r4
 8001e2c:	4629      	mov	r1, r5
 8001e2e:	f7fe fb4b 	bl	80004c8 <__aeabi_dmul>
 8001e32:	4602      	mov	r2, r0
 8001e34:	460b      	mov	r3, r1
 8001e36:	4610      	mov	r0, r2
 8001e38:	4619      	mov	r1, r3
 8001e3a:	f7fe fe07 	bl	8000a4c <__aeabi_d2f>
 8001e3e:	4603      	mov	r3, r0
 8001e40:	613b      	str	r3, [r7, #16]
	m.m[1][1] = 1 / tan(fov/2);
 8001e42:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e46:	68b8      	ldr	r0, [r7, #8]
 8001e48:	f7ff f812 	bl	8000e70 <__aeabi_fdiv>
 8001e4c:	4603      	mov	r3, r0
 8001e4e:	4618      	mov	r0, r3
 8001e50:	f7fe fae2 	bl	8000418 <__aeabi_f2d>
 8001e54:	4602      	mov	r2, r0
 8001e56:	460b      	mov	r3, r1
 8001e58:	4610      	mov	r0, r2
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	f002 fee4 	bl	8004c28 <tan>
 8001e60:	4602      	mov	r2, r0
 8001e62:	460b      	mov	r3, r1
 8001e64:	f04f 0000 	mov.w	r0, #0
 8001e68:	491f      	ldr	r1, [pc, #124]	@ (8001ee8 <mat4_make_perspective+0x114>)
 8001e6a:	f7fe fc57 	bl	800071c <__aeabi_ddiv>
 8001e6e:	4602      	mov	r2, r0
 8001e70:	460b      	mov	r3, r1
 8001e72:	4610      	mov	r0, r2
 8001e74:	4619      	mov	r1, r3
 8001e76:	f7fe fde9 	bl	8000a4c <__aeabi_d2f>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	627b      	str	r3, [r7, #36]	@ 0x24
	m.m[2][2] = zfar / (zfar - znear);
 8001e7e:	6839      	ldr	r1, [r7, #0]
 8001e80:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e82:	f7fe fe37 	bl	8000af4 <__aeabi_fsub>
 8001e86:	4603      	mov	r3, r0
 8001e88:	4619      	mov	r1, r3
 8001e8a:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e8c:	f7fe fff0 	bl	8000e70 <__aeabi_fdiv>
 8001e90:	4603      	mov	r3, r0
 8001e92:	63bb      	str	r3, [r7, #56]	@ 0x38
	m.m[2][3] = (-zfar * znear) / (zfar - znear);
 8001e94:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e96:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001e9a:	6839      	ldr	r1, [r7, #0]
 8001e9c:	4618      	mov	r0, r3
 8001e9e:	f7fe ff33 	bl	8000d08 <__aeabi_fmul>
 8001ea2:	4603      	mov	r3, r0
 8001ea4:	461c      	mov	r4, r3
 8001ea6:	6839      	ldr	r1, [r7, #0]
 8001ea8:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001eaa:	f7fe fe23 	bl	8000af4 <__aeabi_fsub>
 8001eae:	4603      	mov	r3, r0
 8001eb0:	4619      	mov	r1, r3
 8001eb2:	4620      	mov	r0, r4
 8001eb4:	f7fe ffdc 	bl	8000e70 <__aeabi_fdiv>
 8001eb8:	4603      	mov	r3, r0
 8001eba:	63fb      	str	r3, [r7, #60]	@ 0x3c
	m.m[3][2] = 1.0;
 8001ebc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ec0:	64bb      	str	r3, [r7, #72]	@ 0x48
	return m;
 8001ec2:	68fb      	ldr	r3, [r7, #12]
 8001ec4:	461d      	mov	r5, r3
 8001ec6:	f107 0410 	add.w	r4, r7, #16
 8001eca:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ecc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001eda:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ede:	68f8      	ldr	r0, [r7, #12]
 8001ee0:	3750      	adds	r7, #80	@ 0x50
 8001ee2:	46bd      	mov	sp, r7
 8001ee4:	bdb0      	pop	{r4, r5, r7, pc}
 8001ee6:	bf00      	nop
 8001ee8:	3ff00000 	.word	0x3ff00000

08001eec <mat4_mul_vec4_project>:

Vec4 mat4_mul_vec4_project(Mat4* mat_proj, Vec4* v) {
 8001eec:	b590      	push	{r4, r7, lr}
 8001eee:	b089      	sub	sp, #36	@ 0x24
 8001ef0:	af00      	add	r7, sp, #0
 8001ef2:	60f8      	str	r0, [r7, #12]
 8001ef4:	60b9      	str	r1, [r7, #8]
 8001ef6:	607a      	str	r2, [r7, #4]
	Vec4 result = mat4_mul_vec4(mat_proj, v);
 8001ef8:	f107 0310 	add.w	r3, r7, #16
 8001efc:	687a      	ldr	r2, [r7, #4]
 8001efe:	68b9      	ldr	r1, [r7, #8]
 8001f00:	4618      	mov	r0, r3
 8001f02:	f7ff fe7a 	bl	8001bfa <mat4_mul_vec4>

	if (result.w != 0.0) {
 8001f06:	69fb      	ldr	r3, [r7, #28]
 8001f08:	f04f 0100 	mov.w	r1, #0
 8001f0c:	4618      	mov	r0, r3
 8001f0e:	f7ff f88f 	bl	8001030 <__aeabi_fcmpeq>
 8001f12:	4603      	mov	r3, r0
 8001f14:	2b00      	cmp	r3, #0
 8001f16:	d117      	bne.n	8001f48 <mat4_mul_vec4_project+0x5c>
		result.x /= result.w;
 8001f18:	693b      	ldr	r3, [r7, #16]
 8001f1a:	69fa      	ldr	r2, [r7, #28]
 8001f1c:	4611      	mov	r1, r2
 8001f1e:	4618      	mov	r0, r3
 8001f20:	f7fe ffa6 	bl	8000e70 <__aeabi_fdiv>
 8001f24:	4603      	mov	r3, r0
 8001f26:	613b      	str	r3, [r7, #16]
		result.y /= result.w;
 8001f28:	697b      	ldr	r3, [r7, #20]
 8001f2a:	69fa      	ldr	r2, [r7, #28]
 8001f2c:	4611      	mov	r1, r2
 8001f2e:	4618      	mov	r0, r3
 8001f30:	f7fe ff9e 	bl	8000e70 <__aeabi_fdiv>
 8001f34:	4603      	mov	r3, r0
 8001f36:	617b      	str	r3, [r7, #20]
		result.z /= result.w;
 8001f38:	69bb      	ldr	r3, [r7, #24]
 8001f3a:	69fa      	ldr	r2, [r7, #28]
 8001f3c:	4611      	mov	r1, r2
 8001f3e:	4618      	mov	r0, r3
 8001f40:	f7fe ff96 	bl	8000e70 <__aeabi_fdiv>
 8001f44:	4603      	mov	r3, r0
 8001f46:	61bb      	str	r3, [r7, #24]
	}
	return result;
 8001f48:	68fb      	ldr	r3, [r7, #12]
 8001f4a:	461c      	mov	r4, r3
 8001f4c:	f107 0310 	add.w	r3, r7, #16
 8001f50:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f52:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001f56:	68f8      	ldr	r0, [r7, #12]
 8001f58:	3724      	adds	r7, #36	@ 0x24
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	bd90      	pop	{r4, r7, pc}

08001f5e <get_translation_matrix>:




Mat4 get_translation_matrix(float tx, float ty, float tz) {
 8001f5e:	b4b0      	push	{r4, r5, r7}
 8001f60:	b095      	sub	sp, #84	@ 0x54
 8001f62:	af00      	add	r7, sp, #0
 8001f64:	60f8      	str	r0, [r7, #12]
 8001f66:	60b9      	str	r1, [r7, #8]
 8001f68:	607a      	str	r2, [r7, #4]
 8001f6a:	603b      	str	r3, [r7, #0]
	Mat4 mat = {{
 8001f6c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f70:	613b      	str	r3, [r7, #16]
 8001f72:	f04f 0300 	mov.w	r3, #0
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	f04f 0300 	mov.w	r3, #0
 8001f7c:	61bb      	str	r3, [r7, #24]
 8001f7e:	68bb      	ldr	r3, [r7, #8]
 8001f80:	61fb      	str	r3, [r7, #28]
 8001f82:	f04f 0300 	mov.w	r3, #0
 8001f86:	623b      	str	r3, [r7, #32]
 8001f88:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f8e:	f04f 0300 	mov.w	r3, #0
 8001f92:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f94:	687b      	ldr	r3, [r7, #4]
 8001f96:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f98:	f04f 0300 	mov.w	r3, #0
 8001f9c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001f9e:	f04f 0300 	mov.w	r3, #0
 8001fa2:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fa4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fa8:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001faa:	683b      	ldr	r3, [r7, #0]
 8001fac:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fae:	f04f 0300 	mov.w	r3, #0
 8001fb2:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fb4:	f04f 0300 	mov.w	r3, #0
 8001fb8:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fba:	f04f 0300 	mov.w	r3, #0
 8001fbe:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fc0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fc4:	64fb      	str	r3, [r7, #76]	@ 0x4c
		{1, 0, 0, tx},
		{0, 1, 0, ty},
		{0, 0, 1, tz},
		{0, 0, 0, 1}
	}};
	return mat;
 8001fc6:	68fb      	ldr	r3, [r7, #12]
 8001fc8:	461d      	mov	r5, r3
 8001fca:	f107 0410 	add.w	r4, r7, #16
 8001fce:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fde:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001fe2:	68f8      	ldr	r0, [r7, #12]
 8001fe4:	3754      	adds	r7, #84	@ 0x54
 8001fe6:	46bd      	mov	sp, r7
 8001fe8:	bcb0      	pop	{r4, r5, r7}
 8001fea:	4770      	bx	lr

08001fec <get_rotation_matrix_x>:
Mat4 get_rotation_matrix_x(float angle) {
 8001fec:	b5b0      	push	{r4, r5, r7, lr}
 8001fee:	b092      	sub	sp, #72	@ 0x48
 8001ff0:	af00      	add	r7, sp, #0
 8001ff2:	6078      	str	r0, [r7, #4]
 8001ff4:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
 8001ff6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ffa:	60bb      	str	r3, [r7, #8]
 8001ffc:	f04f 0300 	mov.w	r3, #0
 8002000:	60fb      	str	r3, [r7, #12]
 8002002:	f04f 0300 	mov.w	r3, #0
 8002006:	613b      	str	r3, [r7, #16]
 8002008:	f04f 0300 	mov.w	r3, #0
 800200c:	617b      	str	r3, [r7, #20]
 800200e:	f04f 0300 	mov.w	r3, #0
 8002012:	61bb      	str	r3, [r7, #24]
		{1, 0, 0, 0},
		{0, cos(angle), -sin(angle), 0},
 8002014:	6838      	ldr	r0, [r7, #0]
 8002016:	f7fe f9ff 	bl	8000418 <__aeabi_f2d>
 800201a:	4602      	mov	r2, r0
 800201c:	460b      	mov	r3, r1
 800201e:	4610      	mov	r0, r2
 8002020:	4619      	mov	r1, r3
 8002022:	f002 fd75 	bl	8004b10 <cos>
 8002026:	4602      	mov	r2, r0
 8002028:	460b      	mov	r3, r1
 800202a:	4610      	mov	r0, r2
 800202c:	4619      	mov	r1, r3
 800202e:	f7fe fd0d 	bl	8000a4c <__aeabi_d2f>
 8002032:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002034:	61fb      	str	r3, [r7, #28]
		{0, cos(angle), -sin(angle), 0},
 8002036:	6838      	ldr	r0, [r7, #0]
 8002038:	f7fe f9ee 	bl	8000418 <__aeabi_f2d>
 800203c:	4602      	mov	r2, r0
 800203e:	460b      	mov	r3, r1
 8002040:	4610      	mov	r0, r2
 8002042:	4619      	mov	r1, r3
 8002044:	f002 fdaa 	bl	8004b9c <sin>
 8002048:	4602      	mov	r2, r0
 800204a:	460b      	mov	r3, r1
 800204c:	4610      	mov	r0, r2
 800204e:	4619      	mov	r1, r3
 8002050:	f7fe fcfc 	bl	8000a4c <__aeabi_d2f>
 8002054:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002056:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800205a:	623b      	str	r3, [r7, #32]
 800205c:	f04f 0300 	mov.w	r3, #0
 8002060:	627b      	str	r3, [r7, #36]	@ 0x24
 8002062:	f04f 0300 	mov.w	r3, #0
 8002066:	62bb      	str	r3, [r7, #40]	@ 0x28
		{0, sin(angle), cos(angle), 0},
 8002068:	6838      	ldr	r0, [r7, #0]
 800206a:	f7fe f9d5 	bl	8000418 <__aeabi_f2d>
 800206e:	4602      	mov	r2, r0
 8002070:	460b      	mov	r3, r1
 8002072:	4610      	mov	r0, r2
 8002074:	4619      	mov	r1, r3
 8002076:	f002 fd91 	bl	8004b9c <sin>
 800207a:	4602      	mov	r2, r0
 800207c:	460b      	mov	r3, r1
 800207e:	4610      	mov	r0, r2
 8002080:	4619      	mov	r1, r3
 8002082:	f7fe fce3 	bl	8000a4c <__aeabi_d2f>
 8002086:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002088:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{0, sin(angle), cos(angle), 0},
 800208a:	6838      	ldr	r0, [r7, #0]
 800208c:	f7fe f9c4 	bl	8000418 <__aeabi_f2d>
 8002090:	4602      	mov	r2, r0
 8002092:	460b      	mov	r3, r1
 8002094:	4610      	mov	r0, r2
 8002096:	4619      	mov	r1, r3
 8002098:	f002 fd3a 	bl	8004b10 <cos>
 800209c:	4602      	mov	r2, r0
 800209e:	460b      	mov	r3, r1
 80020a0:	4610      	mov	r0, r2
 80020a2:	4619      	mov	r1, r3
 80020a4:	f7fe fcd2 	bl	8000a4c <__aeabi_d2f>
 80020a8:	4603      	mov	r3, r0
	Mat4 mat = {{
 80020aa:	633b      	str	r3, [r7, #48]	@ 0x30
 80020ac:	f04f 0300 	mov.w	r3, #0
 80020b0:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b2:	f04f 0300 	mov.w	r3, #0
 80020b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020b8:	f04f 0300 	mov.w	r3, #0
 80020bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020be:	f04f 0300 	mov.w	r3, #0
 80020c2:	643b      	str	r3, [r7, #64]	@ 0x40
 80020c4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020c8:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 0, 1}
	}};
	return mat;
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	461d      	mov	r5, r3
 80020ce:	f107 0408 	add.w	r4, r7, #8
 80020d2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020e2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80020e6:	6878      	ldr	r0, [r7, #4]
 80020e8:	3748      	adds	r7, #72	@ 0x48
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bdb0      	pop	{r4, r5, r7, pc}

080020ee <get_rotation_matrix_y>:

Mat4 get_rotation_matrix_y(float angle) {
 80020ee:	b5b0      	push	{r4, r5, r7, lr}
 80020f0:	b092      	sub	sp, #72	@ 0x48
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	6078      	str	r0, [r7, #4]
 80020f6:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
		{cos(angle), 0, sin(angle), 0},
 80020f8:	6838      	ldr	r0, [r7, #0]
 80020fa:	f7fe f98d 	bl	8000418 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4610      	mov	r0, r2
 8002104:	4619      	mov	r1, r3
 8002106:	f002 fd03 	bl	8004b10 <cos>
 800210a:	4602      	mov	r2, r0
 800210c:	460b      	mov	r3, r1
 800210e:	4610      	mov	r0, r2
 8002110:	4619      	mov	r1, r3
 8002112:	f7fe fc9b 	bl	8000a4c <__aeabi_d2f>
 8002116:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002118:	60bb      	str	r3, [r7, #8]
 800211a:	f04f 0300 	mov.w	r3, #0
 800211e:	60fb      	str	r3, [r7, #12]
		{cos(angle), 0, sin(angle), 0},
 8002120:	6838      	ldr	r0, [r7, #0]
 8002122:	f7fe f979 	bl	8000418 <__aeabi_f2d>
 8002126:	4602      	mov	r2, r0
 8002128:	460b      	mov	r3, r1
 800212a:	4610      	mov	r0, r2
 800212c:	4619      	mov	r1, r3
 800212e:	f002 fd35 	bl	8004b9c <sin>
 8002132:	4602      	mov	r2, r0
 8002134:	460b      	mov	r3, r1
 8002136:	4610      	mov	r0, r2
 8002138:	4619      	mov	r1, r3
 800213a:	f7fe fc87 	bl	8000a4c <__aeabi_d2f>
 800213e:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002140:	613b      	str	r3, [r7, #16]
 8002142:	f04f 0300 	mov.w	r3, #0
 8002146:	617b      	str	r3, [r7, #20]
 8002148:	f04f 0300 	mov.w	r3, #0
 800214c:	61bb      	str	r3, [r7, #24]
 800214e:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002152:	61fb      	str	r3, [r7, #28]
 8002154:	f04f 0300 	mov.w	r3, #0
 8002158:	623b      	str	r3, [r7, #32]
 800215a:	f04f 0300 	mov.w	r3, #0
 800215e:	627b      	str	r3, [r7, #36]	@ 0x24
		{0, 1, 0, 0},
		{-sin(angle), 0, cos(angle), 0},
 8002160:	6838      	ldr	r0, [r7, #0]
 8002162:	f7fe f959 	bl	8000418 <__aeabi_f2d>
 8002166:	4602      	mov	r2, r0
 8002168:	460b      	mov	r3, r1
 800216a:	4610      	mov	r0, r2
 800216c:	4619      	mov	r1, r3
 800216e:	f002 fd15 	bl	8004b9c <sin>
 8002172:	4602      	mov	r2, r0
 8002174:	460b      	mov	r3, r1
 8002176:	4610      	mov	r0, r2
 8002178:	4619      	mov	r1, r3
 800217a:	f7fe fc67 	bl	8000a4c <__aeabi_d2f>
 800217e:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002180:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002184:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002186:	f04f 0300 	mov.w	r3, #0
 800218a:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{-sin(angle), 0, cos(angle), 0},
 800218c:	6838      	ldr	r0, [r7, #0]
 800218e:	f7fe f943 	bl	8000418 <__aeabi_f2d>
 8002192:	4602      	mov	r2, r0
 8002194:	460b      	mov	r3, r1
 8002196:	4610      	mov	r0, r2
 8002198:	4619      	mov	r1, r3
 800219a:	f002 fcb9 	bl	8004b10 <cos>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4610      	mov	r0, r2
 80021a4:	4619      	mov	r1, r3
 80021a6:	f7fe fc51 	bl	8000a4c <__aeabi_d2f>
 80021aa:	4603      	mov	r3, r0
	Mat4 mat = {{
 80021ac:	633b      	str	r3, [r7, #48]	@ 0x30
 80021ae:	f04f 0300 	mov.w	r3, #0
 80021b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b4:	f04f 0300 	mov.w	r3, #0
 80021b8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021ba:	f04f 0300 	mov.w	r3, #0
 80021be:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021c0:	f04f 0300 	mov.w	r3, #0
 80021c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80021c6:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021ca:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 0, 1}
	}};
	return mat;
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	461d      	mov	r5, r3
 80021d0:	f107 0408 	add.w	r4, r7, #8
 80021d4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021d6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e0:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021e4:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80021e8:	6878      	ldr	r0, [r7, #4]
 80021ea:	3748      	adds	r7, #72	@ 0x48
 80021ec:	46bd      	mov	sp, r7
 80021ee:	bdb0      	pop	{r4, r5, r7, pc}

080021f0 <get_rotation_matrix_z>:

Mat4 get_rotation_matrix_z(float angle) {
 80021f0:	b5b0      	push	{r4, r5, r7, lr}
 80021f2:	b092      	sub	sp, #72	@ 0x48
 80021f4:	af00      	add	r7, sp, #0
 80021f6:	6078      	str	r0, [r7, #4]
 80021f8:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
		{cos(angle), -sin(angle), 0, 0},
 80021fa:	6838      	ldr	r0, [r7, #0]
 80021fc:	f7fe f90c 	bl	8000418 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4610      	mov	r0, r2
 8002206:	4619      	mov	r1, r3
 8002208:	f002 fc82 	bl	8004b10 <cos>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc1a 	bl	8000a4c <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
	Mat4 mat = {{
 800221a:	60bb      	str	r3, [r7, #8]
		{cos(angle), -sin(angle), 0, 0},
 800221c:	6838      	ldr	r0, [r7, #0]
 800221e:	f7fe f8fb 	bl	8000418 <__aeabi_f2d>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4610      	mov	r0, r2
 8002228:	4619      	mov	r1, r3
 800222a:	f002 fcb7 	bl	8004b9c <sin>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fc09 	bl	8000a4c <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
	Mat4 mat = {{
 800223c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002240:	60fb      	str	r3, [r7, #12]
 8002242:	f04f 0300 	mov.w	r3, #0
 8002246:	613b      	str	r3, [r7, #16]
 8002248:	f04f 0300 	mov.w	r3, #0
 800224c:	617b      	str	r3, [r7, #20]
		{sin(angle), cos(angle), 0, 0},
 800224e:	6838      	ldr	r0, [r7, #0]
 8002250:	f7fe f8e2 	bl	8000418 <__aeabi_f2d>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f002 fc9e 	bl	8004b9c <sin>
 8002260:	4602      	mov	r2, r0
 8002262:	460b      	mov	r3, r1
 8002264:	4610      	mov	r0, r2
 8002266:	4619      	mov	r1, r3
 8002268:	f7fe fbf0 	bl	8000a4c <__aeabi_d2f>
 800226c:	4603      	mov	r3, r0
	Mat4 mat = {{
 800226e:	61bb      	str	r3, [r7, #24]
		{sin(angle), cos(angle), 0, 0},
 8002270:	6838      	ldr	r0, [r7, #0]
 8002272:	f7fe f8d1 	bl	8000418 <__aeabi_f2d>
 8002276:	4602      	mov	r2, r0
 8002278:	460b      	mov	r3, r1
 800227a:	4610      	mov	r0, r2
 800227c:	4619      	mov	r1, r3
 800227e:	f002 fc47 	bl	8004b10 <cos>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f7fe fbdf 	bl	8000a4c <__aeabi_d2f>
 800228e:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002290:	61fb      	str	r3, [r7, #28]
 8002292:	f04f 0300 	mov.w	r3, #0
 8002296:	623b      	str	r3, [r7, #32]
 8002298:	f04f 0300 	mov.w	r3, #0
 800229c:	627b      	str	r3, [r7, #36]	@ 0x24
 800229e:	f04f 0300 	mov.w	r3, #0
 80022a2:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022a4:	f04f 0300 	mov.w	r3, #0
 80022a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022aa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80022ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b0:	f04f 0300 	mov.w	r3, #0
 80022b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80022b6:	f04f 0300 	mov.w	r3, #0
 80022ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022bc:	f04f 0300 	mov.w	r3, #0
 80022c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c2:	f04f 0300 	mov.w	r3, #0
 80022c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80022c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80022cc:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 1, 0},
		{0, 0, 0, 1}
	}};
	return mat;
 80022ce:	687b      	ldr	r3, [r7, #4]
 80022d0:	461d      	mov	r5, r3
 80022d2:	f107 0408 	add.w	r4, r7, #8
 80022d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80022ea:	6878      	ldr	r0, [r7, #4]
 80022ec:	3748      	adds	r7, #72	@ 0x48
 80022ee:	46bd      	mov	sp, r7
 80022f0:	bdb0      	pop	{r4, r5, r7, pc}

080022f2 <get_scaling_matrix>:
Mat4 get_scaling_matrix(float sx, float sy, float sz) {
 80022f2:	b4b0      	push	{r4, r5, r7}
 80022f4:	b095      	sub	sp, #84	@ 0x54
 80022f6:	af00      	add	r7, sp, #0
 80022f8:	60f8      	str	r0, [r7, #12]
 80022fa:	60b9      	str	r1, [r7, #8]
 80022fc:	607a      	str	r2, [r7, #4]
 80022fe:	603b      	str	r3, [r7, #0]
	Mat4 mat = {{
 8002300:	68bb      	ldr	r3, [r7, #8]
 8002302:	613b      	str	r3, [r7, #16]
 8002304:	f04f 0300 	mov.w	r3, #0
 8002308:	617b      	str	r3, [r7, #20]
 800230a:	f04f 0300 	mov.w	r3, #0
 800230e:	61bb      	str	r3, [r7, #24]
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	61fb      	str	r3, [r7, #28]
 8002316:	f04f 0300 	mov.w	r3, #0
 800231a:	623b      	str	r3, [r7, #32]
 800231c:	687b      	ldr	r3, [r7, #4]
 800231e:	627b      	str	r3, [r7, #36]	@ 0x24
 8002320:	f04f 0300 	mov.w	r3, #0
 8002324:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002326:	f04f 0300 	mov.w	r3, #0
 800232a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800232c:	f04f 0300 	mov.w	r3, #0
 8002330:	633b      	str	r3, [r7, #48]	@ 0x30
 8002332:	f04f 0300 	mov.w	r3, #0
 8002336:	637b      	str	r3, [r7, #52]	@ 0x34
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	63bb      	str	r3, [r7, #56]	@ 0x38
 800233c:	f04f 0300 	mov.w	r3, #0
 8002340:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002342:	f04f 0300 	mov.w	r3, #0
 8002346:	643b      	str	r3, [r7, #64]	@ 0x40
 8002348:	f04f 0300 	mov.w	r3, #0
 800234c:	647b      	str	r3, [r7, #68]	@ 0x44
 800234e:	f04f 0300 	mov.w	r3, #0
 8002352:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002354:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002358:	64fb      	str	r3, [r7, #76]	@ 0x4c
		{sx, 0, 0, 0},
		{0, sy, 0, 0},
		{0, 0, sz, 0},
		{0, 0, 0, 1}
	}};
	return mat;
 800235a:	68fb      	ldr	r3, [r7, #12]
 800235c:	461d      	mov	r5, r3
 800235e:	f107 0410 	add.w	r4, r7, #16
 8002362:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002364:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002372:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8002376:	68f8      	ldr	r0, [r7, #12]
 8002378:	3754      	adds	r7, #84	@ 0x54
 800237a:	46bd      	mov	sp, r7
 800237c:	bcb0      	pop	{r4, r5, r7}
 800237e:	4770      	bx	lr

08002380 <get_view_matrix>:


Mat4 get_view_matrix(float cam_x, float cam_y, float cam_z) {
 8002380:	b580      	push	{r7, lr}
 8002382:	b084      	sub	sp, #16
 8002384:	af00      	add	r7, sp, #0
 8002386:	60f8      	str	r0, [r7, #12]
 8002388:	60b9      	str	r1, [r7, #8]
 800238a:	607a      	str	r2, [r7, #4]
 800238c:	603b      	str	r3, [r7, #0]
	return get_translation_matrix(-cam_x, -cam_y, -cam_z);
 800238e:	68bb      	ldr	r3, [r7, #8]
 8002390:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8002394:	687b      	ldr	r3, [r7, #4]
 8002396:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800239a:	683b      	ldr	r3, [r7, #0]
 800239c:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80023a0:	68f8      	ldr	r0, [r7, #12]
 80023a2:	f7ff fddc 	bl	8001f5e <get_translation_matrix>
}
 80023a6:	68f8      	ldr	r0, [r7, #12]
 80023a8:	3710      	adds	r7, #16
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}

080023ae <calculate_transform_matrix>:



Mat4 calculate_transform_matrix(const Transform *transform) {
 80023ae:	b5b0      	push	{r4, r5, r7, lr}
 80023b0:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80023b4:	af00      	add	r7, sp, #0
 80023b6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ba:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80023be:	6018      	str	r0, [r3, #0]
 80023c0:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c4:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023c8:	6019      	str	r1, [r3, #0]
	Mat4 rotation_x = get_rotation_matrix_x(transform->rot_x);
 80023ca:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ce:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023d2:	681b      	ldr	r3, [r3, #0]
 80023d4:	68da      	ldr	r2, [r3, #12]
 80023d6:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80023da:	4611      	mov	r1, r2
 80023dc:	4618      	mov	r0, r3
 80023de:	f7ff fe05 	bl	8001fec <get_rotation_matrix_x>
	Mat4 rotation_y = get_rotation_matrix_y(transform->rot_y);
 80023e2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023e6:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	691a      	ldr	r2, [r3, #16]
 80023ee:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80023f2:	4611      	mov	r1, r2
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7ff fe7a 	bl	80020ee <get_rotation_matrix_y>
	Mat4 rotation_z = get_rotation_matrix_z(transform->rot_z);
 80023fa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023fe:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	695a      	ldr	r2, [r3, #20]
 8002406:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800240a:	4611      	mov	r1, r2
 800240c:	4618      	mov	r0, r3
 800240e:	f7ff feef 	bl	80021f0 <get_rotation_matrix_z>
	Mat4 rotation_combined = mat4_mul_mat4(&rotation_z, &rotation_y);
 8002412:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002416:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800241a:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 800241e:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002422:	4618      	mov	r0, r3
 8002424:	f7ff fb7a 	bl	8001b1c <mat4_mul_mat4>
	rotation_combined = mat4_mul_mat4(&rotation_combined, &rotation_x);
 8002428:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800242c:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8002430:	463b      	mov	r3, r7
 8002432:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 8002436:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800243a:	4618      	mov	r0, r3
 800243c:	f7ff fb6e 	bl	8001b1c <mat4_mul_mat4>
 8002440:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002444:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002448:	461d      	mov	r5, r3
 800244a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800244c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002456:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800245a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Mat4 scaling = get_scaling_matrix(transform->scale_x, transform->scale_y, transform->scale_z);
 800245e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002462:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002466:	681b      	ldr	r3, [r3, #0]
 8002468:	6999      	ldr	r1, [r3, #24]
 800246a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800246e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002472:	681b      	ldr	r3, [r3, #0]
 8002474:	69da      	ldr	r2, [r3, #28]
 8002476:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247a:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	6a1b      	ldr	r3, [r3, #32]
 8002482:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 8002486:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800248a:	f7ff ff32 	bl	80022f2 <get_scaling_matrix>

	Mat4 translation = get_translation_matrix(transform->x, transform->y, transform->z);
 800248e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002492:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002496:	681b      	ldr	r3, [r3, #0]
 8002498:	6819      	ldr	r1, [r3, #0]
 800249a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800249e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	685a      	ldr	r2, [r3, #4]
 80024a6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024aa:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	689b      	ldr	r3, [r3, #8]
 80024b2:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 80024b6:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 80024ba:	f7ff fd50 	bl	8001f5e <get_translation_matrix>

	Mat4 transform_matrix;
	transform_matrix = mat4_mul_mat4(&scaling, &rotation_combined);
 80024be:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c2:	f5a3 74e0 	sub.w	r4, r3, #448	@ 0x1c0
 80024c6:	463b      	mov	r3, r7
 80024c8:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80024cc:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80024d0:	4618      	mov	r0, r3
 80024d2:	f7ff fb23 	bl	8001b1c <mat4_mul_mat4>
 80024d6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024da:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80024de:	461d      	mov	r5, r3
 80024e0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024f0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	transform_matrix = mat4_mul_mat4(&translation, &transform_matrix);
 80024f4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024f8:	f5a3 74e0 	sub.w	r4, r3, #448	@ 0x1c0
 80024fc:	463b      	mov	r3, r7
 80024fe:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002502:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 8002506:	4618      	mov	r0, r3
 8002508:	f7ff fb08 	bl	8001b1c <mat4_mul_mat4>
 800250c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002510:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002514:	461d      	mov	r5, r3
 8002516:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002518:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002522:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002526:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return transform_matrix;
 800252a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800252e:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002532:	681a      	ldr	r2, [r3, #0]
 8002534:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002538:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 800253c:	4614      	mov	r4, r2
 800253e:	461d      	mov	r5, r3
 8002540:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002542:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002550:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002554:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002558:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 800255c:	6818      	ldr	r0, [r3, #0]
 800255e:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002562:	46bd      	mov	sp, r7
 8002564:	bdb0      	pop	{r4, r5, r7, pc}
	...

08002568 <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 8002568:	b480      	push	{r7}
 800256a:	b083      	sub	sp, #12
 800256c:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 800256e:	4b07      	ldr	r3, [pc, #28]	@ (800258c <swap_buffers+0x24>)
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 8002574:	4b06      	ldr	r3, [pc, #24]	@ (8002590 <swap_buffers+0x28>)
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4a04      	ldr	r2, [pc, #16]	@ (800258c <swap_buffers+0x24>)
 800257a:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <swap_buffers+0x28>)
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	6013      	str	r3, [r2, #0]
}
 8002582:	bf00      	nop
 8002584:	370c      	adds	r7, #12
 8002586:	46bd      	mov	sp, r7
 8002588:	bc80      	pop	{r7}
 800258a:	4770      	bx	lr
 800258c:	200001d0 	.word	0x200001d0
 8002590:	200001d4 	.word	0x200001d4

08002594 <clear_back_buffer>:


void clear_back_buffer(void) {
 8002594:	b580      	push	{r7, lr}
 8002596:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 8002598:	4b04      	ldr	r3, [pc, #16]	@ (80025ac <clear_back_buffer+0x18>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025a0:	2100      	movs	r1, #0
 80025a2:	4618      	mov	r0, r3
 80025a4:	f002 fa88 	bl	8004ab8 <memset>
}
 80025a8:	bf00      	nop
 80025aa:	bd80      	pop	{r7, pc}
 80025ac:	200001d4 	.word	0x200001d4

080025b0 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 80025b0:	b480      	push	{r7}
 80025b2:	b085      	sub	sp, #20
 80025b4:	af00      	add	r7, sp, #0
 80025b6:	60f8      	str	r0, [r7, #12]
 80025b8:	60b9      	str	r1, [r7, #8]
 80025ba:	4611      	mov	r1, r2
 80025bc:	461a      	mov	r2, r3
 80025be:	460b      	mov	r3, r1
 80025c0:	71fb      	strb	r3, [r7, #7]
 80025c2:	4613      	mov	r3, r2
 80025c4:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 80025c6:	68fb      	ldr	r3, [r7, #12]
 80025c8:	2b00      	cmp	r3, #0
 80025ca:	db34      	blt.n	8002636 <set_pixel+0x86>
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	2b3f      	cmp	r3, #63	@ 0x3f
 80025d0:	dc31      	bgt.n	8002636 <set_pixel+0x86>
 80025d2:	68bb      	ldr	r3, [r7, #8]
 80025d4:	2b00      	cmp	r3, #0
 80025d6:	db2e      	blt.n	8002636 <set_pixel+0x86>
 80025d8:	68bb      	ldr	r3, [r7, #8]
 80025da:	2b1f      	cmp	r3, #31
 80025dc:	dc2b      	bgt.n	8002636 <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 80025de:	79fb      	ldrb	r3, [r7, #7]
 80025e0:	2b00      	cmp	r3, #0
 80025e2:	bf14      	ite	ne
 80025e4:	2301      	movne	r3, #1
 80025e6:	2300      	moveq	r3, #0
 80025e8:	b2db      	uxtb	r3, r3
 80025ea:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 80025ec:	79bb      	ldrb	r3, [r7, #6]
 80025ee:	2b00      	cmp	r3, #0
 80025f0:	bf14      	ite	ne
 80025f2:	2301      	movne	r3, #1
 80025f4:	2300      	moveq	r3, #0
 80025f6:	b2db      	uxtb	r3, r3
 80025f8:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 80025fa:	7e3b      	ldrb	r3, [r7, #24]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	bf14      	ite	ne
 8002600:	2301      	movne	r3, #1
 8002602:	2300      	moveq	r3, #0
 8002604:	b2db      	uxtb	r3, r3
 8002606:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 8002608:	79fb      	ldrb	r3, [r7, #7]
 800260a:	009b      	lsls	r3, r3, #2
 800260c:	b25a      	sxtb	r2, r3
 800260e:	79bb      	ldrb	r3, [r7, #6]
 8002610:	005b      	lsls	r3, r3, #1
 8002612:	b25b      	sxtb	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b25a      	sxtb	r2, r3
 8002618:	f997 3018 	ldrsb.w	r3, [r7, #24]
 800261c:	4313      	orrs	r3, r2
 800261e:	b259      	sxtb	r1, r3
 8002620:	4b07      	ldr	r3, [pc, #28]	@ (8002640 <set_pixel+0x90>)
 8002622:	681a      	ldr	r2, [r3, #0]
 8002624:	b2c9      	uxtb	r1, r1
 8002626:	68fb      	ldr	r3, [r7, #12]
 8002628:	015b      	lsls	r3, r3, #5
 800262a:	441a      	add	r2, r3
 800262c:	68bb      	ldr	r3, [r7, #8]
 800262e:	4413      	add	r3, r2
 8002630:	460a      	mov	r2, r1
 8002632:	701a      	strb	r2, [r3, #0]
 8002634:	e000      	b.n	8002638 <set_pixel+0x88>
		return;
 8002636:	bf00      	nop
}
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	200001d4 	.word	0x200001d4

08002644 <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 8002644:	b580      	push	{r7, lr}
 8002646:	b086      	sub	sp, #24
 8002648:	af02      	add	r7, sp, #8
 800264a:	60f8      	str	r0, [r7, #12]
 800264c:	60b9      	str	r1, [r7, #8]
 800264e:	4613      	mov	r3, r2
 8002650:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 8002652:	79f9      	ldrb	r1, [r7, #7]
 8002654:	79fa      	ldrb	r2, [r7, #7]
 8002656:	79fb      	ldrb	r3, [r7, #7]
 8002658:	9300      	str	r3, [sp, #0]
 800265a:	460b      	mov	r3, r1
 800265c:	68b9      	ldr	r1, [r7, #8]
 800265e:	68f8      	ldr	r0, [r7, #12]
 8002660:	f7ff ffa6 	bl	80025b0 <set_pixel>
}
 8002664:	bf00      	nop
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}

0800266c <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 800266c:	b480      	push	{r7}
 800266e:	b085      	sub	sp, #20
 8002670:	af00      	add	r7, sp, #0
 8002672:	60b9      	str	r1, [r7, #8]
 8002674:	607a      	str	r2, [r7, #4]
 8002676:	603b      	str	r3, [r7, #0]
 8002678:	4603      	mov	r3, r0
 800267a:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 800267c:	7bfb      	ldrb	r3, [r7, #15]
 800267e:	089b      	lsrs	r3, r3, #2
 8002680:	b2db      	uxtb	r3, r3
 8002682:	f003 0301 	and.w	r3, r3, #1
 8002686:	b2da      	uxtb	r2, r3
 8002688:	68bb      	ldr	r3, [r7, #8]
 800268a:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 800268c:	7bfb      	ldrb	r3, [r7, #15]
 800268e:	085b      	lsrs	r3, r3, #1
 8002690:	b2db      	uxtb	r3, r3
 8002692:	f003 0301 	and.w	r3, r3, #1
 8002696:	b2da      	uxtb	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 800269c:	7bfb      	ldrb	r3, [r7, #15]
 800269e:	f003 0301 	and.w	r3, r3, #1
 80026a2:	b2da      	uxtb	r2, r3
 80026a4:	683b      	ldr	r3, [r7, #0]
 80026a6:	701a      	strb	r2, [r3, #0]
}
 80026a8:	bf00      	nop
 80026aa:	3714      	adds	r7, #20
 80026ac:	46bd      	mov	sp, r7
 80026ae:	bc80      	pop	{r7}
 80026b0:	4770      	bx	lr
	...

080026b4 <render_row>:

uint8_t current_row = 0;
void render_row() {
 80026b4:	b580      	push	{r7, lr}
 80026b6:	b084      	sub	sp, #16
 80026b8:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80026ba:	2300      	movs	r3, #0
 80026bc:	73fb      	strb	r3, [r7, #15]
 80026be:	e092      	b.n	80027e6 <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 80026c0:	2301      	movs	r3, #1
 80026c2:	73bb      	strb	r3, [r7, #14]
 80026c4:	e087      	b.n	80027d6 <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 80026c6:	2300      	movs	r3, #0
 80026c8:	737b      	strb	r3, [r7, #13]
 80026ca:	e07c      	b.n	80027c6 <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 80026cc:	7bfb      	ldrb	r3, [r7, #15]
 80026ce:	009b      	lsls	r3, r3, #2
 80026d0:	b2da      	uxtb	r2, r3
 80026d2:	7b7b      	ldrb	r3, [r7, #13]
 80026d4:	4413      	add	r3, r2
 80026d6:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 80026d8:	7bbb      	ldrb	r3, [r7, #14]
 80026da:	00db      	lsls	r3, r3, #3
 80026dc:	b2da      	uxtb	r2, r3
 80026de:	4b6f      	ldr	r3, [pc, #444]	@ (800289c <render_row+0x1e8>)
 80026e0:	781b      	ldrb	r3, [r3, #0]
 80026e2:	4413      	add	r3, r2
 80026e4:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 80026e6:	4b6e      	ldr	r3, [pc, #440]	@ (80028a0 <render_row+0x1ec>)
 80026e8:	6819      	ldr	r1, [r3, #0]
 80026ea:	7b3a      	ldrb	r2, [r7, #12]
 80026ec:	7afb      	ldrb	r3, [r7, #11]
 80026ee:	0152      	lsls	r2, r2, #5
 80026f0:	440a      	add	r2, r1
 80026f2:	4413      	add	r3, r2
 80026f4:	781b      	ldrb	r3, [r3, #0]
 80026f6:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 80026f8:	4b69      	ldr	r3, [pc, #420]	@ (80028a0 <render_row+0x1ec>)
 80026fa:	6819      	ldr	r1, [r3, #0]
 80026fc:	7b3a      	ldrb	r2, [r7, #12]
 80026fe:	7afb      	ldrb	r3, [r7, #11]
 8002700:	3310      	adds	r3, #16
 8002702:	0152      	lsls	r2, r2, #5
 8002704:	440a      	add	r2, r1
 8002706:	4413      	add	r3, r2
 8002708:	781b      	ldrb	r3, [r3, #0]
 800270a:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 800270c:	1dbb      	adds	r3, r7, #6
 800270e:	1dfa      	adds	r2, r7, #7
 8002710:	f107 0108 	add.w	r1, r7, #8
 8002714:	7ab8      	ldrb	r0, [r7, #10]
 8002716:	f7ff ffa9 	bl	800266c <get_rgb>
				R1(r);
 800271a:	7a3b      	ldrb	r3, [r7, #8]
 800271c:	2b00      	cmp	r3, #0
 800271e:	d003      	beq.n	8002728 <render_row+0x74>
 8002720:	4b60      	ldr	r3, [pc, #384]	@ (80028a4 <render_row+0x1f0>)
 8002722:	2220      	movs	r2, #32
 8002724:	611a      	str	r2, [r3, #16]
 8002726:	e002      	b.n	800272e <render_row+0x7a>
 8002728:	4b5e      	ldr	r3, [pc, #376]	@ (80028a4 <render_row+0x1f0>)
 800272a:	2220      	movs	r2, #32
 800272c:	615a      	str	r2, [r3, #20]
				G1(g);
 800272e:	79fb      	ldrb	r3, [r7, #7]
 8002730:	2b00      	cmp	r3, #0
 8002732:	d003      	beq.n	800273c <render_row+0x88>
 8002734:	4b5b      	ldr	r3, [pc, #364]	@ (80028a4 <render_row+0x1f0>)
 8002736:	2208      	movs	r2, #8
 8002738:	611a      	str	r2, [r3, #16]
 800273a:	e002      	b.n	8002742 <render_row+0x8e>
 800273c:	4b59      	ldr	r3, [pc, #356]	@ (80028a4 <render_row+0x1f0>)
 800273e:	2208      	movs	r2, #8
 8002740:	615a      	str	r2, [r3, #20]
				B1(b);
 8002742:	79bb      	ldrb	r3, [r7, #6]
 8002744:	2b00      	cmp	r3, #0
 8002746:	d004      	beq.n	8002752 <render_row+0x9e>
 8002748:	4b57      	ldr	r3, [pc, #348]	@ (80028a8 <render_row+0x1f4>)
 800274a:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800274e:	611a      	str	r2, [r3, #16]
 8002750:	e003      	b.n	800275a <render_row+0xa6>
 8002752:	4b55      	ldr	r3, [pc, #340]	@ (80028a8 <render_row+0x1f4>)
 8002754:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002758:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 800275a:	1dbb      	adds	r3, r7, #6
 800275c:	1dfa      	adds	r2, r7, #7
 800275e:	f107 0108 	add.w	r1, r7, #8
 8002762:	7a78      	ldrb	r0, [r7, #9]
 8002764:	f7ff ff82 	bl	800266c <get_rgb>
				R2(r);
 8002768:	7a3b      	ldrb	r3, [r7, #8]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d003      	beq.n	8002776 <render_row+0xc2>
 800276e:	4b4d      	ldr	r3, [pc, #308]	@ (80028a4 <render_row+0x1f0>)
 8002770:	2210      	movs	r2, #16
 8002772:	611a      	str	r2, [r3, #16]
 8002774:	e002      	b.n	800277c <render_row+0xc8>
 8002776:	4b4b      	ldr	r3, [pc, #300]	@ (80028a4 <render_row+0x1f0>)
 8002778:	2210      	movs	r2, #16
 800277a:	615a      	str	r2, [r3, #20]
				G2(g);
 800277c:	79fb      	ldrb	r3, [r7, #7]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d003      	beq.n	800278a <render_row+0xd6>
 8002782:	4b4a      	ldr	r3, [pc, #296]	@ (80028ac <render_row+0x1f8>)
 8002784:	2204      	movs	r2, #4
 8002786:	611a      	str	r2, [r3, #16]
 8002788:	e002      	b.n	8002790 <render_row+0xdc>
 800278a:	4b48      	ldr	r3, [pc, #288]	@ (80028ac <render_row+0x1f8>)
 800278c:	2204      	movs	r2, #4
 800278e:	615a      	str	r2, [r3, #20]
				B2(b);
 8002790:	79bb      	ldrb	r3, [r7, #6]
 8002792:	2b00      	cmp	r3, #0
 8002794:	d004      	beq.n	80027a0 <render_row+0xec>
 8002796:	4b44      	ldr	r3, [pc, #272]	@ (80028a8 <render_row+0x1f4>)
 8002798:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800279c:	611a      	str	r2, [r3, #16]
 800279e:	e003      	b.n	80027a8 <render_row+0xf4>
 80027a0:	4b41      	ldr	r3, [pc, #260]	@ (80028a8 <render_row+0x1f4>)
 80027a2:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80027a6:	615a      	str	r2, [r3, #20]

				CLK_H;
 80027a8:	2201      	movs	r2, #1
 80027aa:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027ae:	483d      	ldr	r0, [pc, #244]	@ (80028a4 <render_row+0x1f0>)
 80027b0:	f000 fd99 	bl	80032e6 <HAL_GPIO_WritePin>
				CLK_L;
 80027b4:	2200      	movs	r2, #0
 80027b6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80027ba:	483a      	ldr	r0, [pc, #232]	@ (80028a4 <render_row+0x1f0>)
 80027bc:	f000 fd93 	bl	80032e6 <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 80027c0:	7b7b      	ldrb	r3, [r7, #13]
 80027c2:	3301      	adds	r3, #1
 80027c4:	737b      	strb	r3, [r7, #13]
 80027c6:	7b7b      	ldrb	r3, [r7, #13]
 80027c8:	2b03      	cmp	r3, #3
 80027ca:	f67f af7f 	bls.w	80026cc <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 80027ce:	7bbb      	ldrb	r3, [r7, #14]
 80027d0:	3b01      	subs	r3, #1
 80027d2:	b2db      	uxtb	r3, r3
 80027d4:	73bb      	strb	r3, [r7, #14]
 80027d6:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027da:	2b00      	cmp	r3, #0
 80027dc:	f6bf af73 	bge.w	80026c6 <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80027e0:	7bfb      	ldrb	r3, [r7, #15]
 80027e2:	3301      	adds	r3, #1
 80027e4:	73fb      	strb	r3, [r7, #15]
 80027e6:	7bfb      	ldrb	r3, [r7, #15]
 80027e8:	2b0f      	cmp	r3, #15
 80027ea:	f67f af69 	bls.w	80026c0 <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 80027ee:	4b2e      	ldr	r3, [pc, #184]	@ (80028a8 <render_row+0x1f4>)
 80027f0:	681b      	ldr	r3, [r3, #0]
 80027f2:	4a2d      	ldr	r2, [pc, #180]	@ (80028a8 <render_row+0x1f4>)
 80027f4:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80027f8:	6013      	str	r3, [r2, #0]
	LAT_H;
 80027fa:	2201      	movs	r2, #1
 80027fc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8002800:	4828      	ldr	r0, [pc, #160]	@ (80028a4 <render_row+0x1f0>)
 8002802:	f000 fd70 	bl	80032e6 <HAL_GPIO_WritePin>
	LAT_L;
 8002806:	2200      	movs	r2, #0
 8002808:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800280c:	4825      	ldr	r0, [pc, #148]	@ (80028a4 <render_row+0x1f0>)
 800280e:	f000 fd6a 	bl	80032e6 <HAL_GPIO_WritePin>
	ROW(current_row);
 8002812:	4b22      	ldr	r3, [pc, #136]	@ (800289c <render_row+0x1e8>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	f003 0301 	and.w	r3, r3, #1
 800281a:	2b00      	cmp	r3, #0
 800281c:	d004      	beq.n	8002828 <render_row+0x174>
 800281e:	4b24      	ldr	r3, [pc, #144]	@ (80028b0 <render_row+0x1fc>)
 8002820:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002824:	611a      	str	r2, [r3, #16]
 8002826:	e003      	b.n	8002830 <render_row+0x17c>
 8002828:	4b21      	ldr	r3, [pc, #132]	@ (80028b0 <render_row+0x1fc>)
 800282a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800282e:	615a      	str	r2, [r3, #20]
 8002830:	4b1a      	ldr	r3, [pc, #104]	@ (800289c <render_row+0x1e8>)
 8002832:	781b      	ldrb	r3, [r3, #0]
 8002834:	f003 0302 	and.w	r3, r3, #2
 8002838:	2b00      	cmp	r3, #0
 800283a:	d004      	beq.n	8002846 <render_row+0x192>
 800283c:	4b1a      	ldr	r3, [pc, #104]	@ (80028a8 <render_row+0x1f4>)
 800283e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002842:	611a      	str	r2, [r3, #16]
 8002844:	e003      	b.n	800284e <render_row+0x19a>
 8002846:	4b18      	ldr	r3, [pc, #96]	@ (80028a8 <render_row+0x1f4>)
 8002848:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800284c:	615a      	str	r2, [r3, #20]
 800284e:	4b13      	ldr	r3, [pc, #76]	@ (800289c <render_row+0x1e8>)
 8002850:	781b      	ldrb	r3, [r3, #0]
 8002852:	f003 0304 	and.w	r3, r3, #4
 8002856:	2b00      	cmp	r3, #0
 8002858:	d004      	beq.n	8002864 <render_row+0x1b0>
 800285a:	4b13      	ldr	r3, [pc, #76]	@ (80028a8 <render_row+0x1f4>)
 800285c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002860:	611a      	str	r2, [r3, #16]
 8002862:	e003      	b.n	800286c <render_row+0x1b8>
 8002864:	4b10      	ldr	r3, [pc, #64]	@ (80028a8 <render_row+0x1f4>)
 8002866:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800286a:	615a      	str	r2, [r3, #20]
 800286c:	4b0b      	ldr	r3, [pc, #44]	@ (800289c <render_row+0x1e8>)
 800286e:	781b      	ldrb	r3, [r3, #0]
 8002870:	f003 0308 	and.w	r3, r3, #8
 8002874:	2b00      	cmp	r3, #0
 8002876:	d003      	beq.n	8002880 <render_row+0x1cc>
 8002878:	4b0b      	ldr	r3, [pc, #44]	@ (80028a8 <render_row+0x1f4>)
 800287a:	2280      	movs	r2, #128	@ 0x80
 800287c:	611a      	str	r2, [r3, #16]
 800287e:	e002      	b.n	8002886 <render_row+0x1d2>
 8002880:	4b09      	ldr	r3, [pc, #36]	@ (80028a8 <render_row+0x1f4>)
 8002882:	2280      	movs	r2, #128	@ 0x80
 8002884:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 8002886:	4b08      	ldr	r3, [pc, #32]	@ (80028a8 <render_row+0x1f4>)
 8002888:	681b      	ldr	r3, [r3, #0]
 800288a:	4a07      	ldr	r2, [pc, #28]	@ (80028a8 <render_row+0x1f4>)
 800288c:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002890:	6013      	str	r3, [r2, #0]
}
 8002892:	bf00      	nop
 8002894:	3710      	adds	r7, #16
 8002896:	46bd      	mov	sp, r7
 8002898:	bd80      	pop	{r7, pc}
 800289a:	bf00      	nop
 800289c:	200013c5 	.word	0x200013c5
 80028a0:	200001d0 	.word	0x200001d0
 80028a4:	40010c00 	.word	0x40010c00
 80028a8:	40011000 	.word	0x40011000
 80028ac:	40011400 	.word	0x40011400
 80028b0:	40010800 	.word	0x40010800

080028b4 <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
#define RENDER_INTERVAL_MS 10
uint32_t last_render_time = 0;

void render_buffer() {
 80028b4:	b580      	push	{r7, lr}
 80028b6:	b082      	sub	sp, #8
 80028b8:	af00      	add	r7, sp, #0
	if (current_row == 0) {
 80028ba:	4b16      	ldr	r3, [pc, #88]	@ (8002914 <render_buffer+0x60>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	2b00      	cmp	r3, #0
 80028c0:	d10b      	bne.n	80028da <render_buffer+0x26>
		uint32_t tick = HAL_GetTick();
 80028c2:	f000 fa5d 	bl	8002d80 <HAL_GetTick>
 80028c6:	6078      	str	r0, [r7, #4]
		if (tick - last_render_time < RENDER_INTERVAL_MS) {
 80028c8:	4b13      	ldr	r3, [pc, #76]	@ (8002918 <render_buffer+0x64>)
 80028ca:	681b      	ldr	r3, [r3, #0]
 80028cc:	687a      	ldr	r2, [r7, #4]
 80028ce:	1ad3      	subs	r3, r2, r3
 80028d0:	2b09      	cmp	r3, #9
 80028d2:	d91b      	bls.n	800290c <render_buffer+0x58>
			return;
		} else {
			last_render_time = tick;
 80028d4:	4a10      	ldr	r2, [pc, #64]	@ (8002918 <render_buffer+0x64>)
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	6013      	str	r3, [r2, #0]
		}
	}


	render_row();
 80028da:	f7ff feeb 	bl	80026b4 <render_row>

	if (++current_row == 8) {
 80028de:	4b0d      	ldr	r3, [pc, #52]	@ (8002914 <render_buffer+0x60>)
 80028e0:	781b      	ldrb	r3, [r3, #0]
 80028e2:	3301      	adds	r3, #1
 80028e4:	b2da      	uxtb	r2, r3
 80028e6:	4b0b      	ldr	r3, [pc, #44]	@ (8002914 <render_buffer+0x60>)
 80028e8:	701a      	strb	r2, [r3, #0]
 80028ea:	4b0a      	ldr	r3, [pc, #40]	@ (8002914 <render_buffer+0x60>)
 80028ec:	781b      	ldrb	r3, [r3, #0]
 80028ee:	2b08      	cmp	r3, #8
 80028f0:	d10d      	bne.n	800290e <render_buffer+0x5a>
		current_row = 0;
 80028f2:	4b08      	ldr	r3, [pc, #32]	@ (8002914 <render_buffer+0x60>)
 80028f4:	2200      	movs	r2, #0
 80028f6:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 80028f8:	4b08      	ldr	r3, [pc, #32]	@ (800291c <render_buffer+0x68>)
 80028fa:	781b      	ldrb	r3, [r3, #0]
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d006      	beq.n	800290e <render_buffer+0x5a>
			swap_buffers();
 8002900:	f7ff fe32 	bl	8002568 <swap_buffers>
			is_back_buffer_new = false;
 8002904:	4b05      	ldr	r3, [pc, #20]	@ (800291c <render_buffer+0x68>)
 8002906:	2200      	movs	r2, #0
 8002908:	701a      	strb	r2, [r3, #0]
 800290a:	e000      	b.n	800290e <render_buffer+0x5a>
			return;
 800290c:	bf00      	nop
		}
	}
}
 800290e:	3708      	adds	r7, #8
 8002910:	46bd      	mov	sp, r7
 8002912:	bd80      	pop	{r7, pc}
 8002914:	200013c5 	.word	0x200013c5
 8002918:	200013c8 	.word	0x200013c8
 800291c:	200013c4 	.word	0x200013c4

08002920 <draw_line>:

// Bresenham's line algorithm
// (https://en.wikipedia.org/wiki/Bresenham's_line_algorithm)
void draw_line(int x0, int y0, int x1, int y1) {
 8002920:	b580      	push	{r7, lr}
 8002922:	b08a      	sub	sp, #40	@ 0x28
 8002924:	af00      	add	r7, sp, #0
 8002926:	60f8      	str	r0, [r7, #12]
 8002928:	60b9      	str	r1, [r7, #8]
 800292a:	607a      	str	r2, [r7, #4]
 800292c:	603b      	str	r3, [r7, #0]
	int dx = abs(x1 - x0);
 800292e:	687a      	ldr	r2, [r7, #4]
 8002930:	68fb      	ldr	r3, [r7, #12]
 8002932:	1ad3      	subs	r3, r2, r3
 8002934:	2b00      	cmp	r3, #0
 8002936:	bfb8      	it	lt
 8002938:	425b      	neglt	r3, r3
 800293a:	623b      	str	r3, [r7, #32]
	int sx = (x0 < x1) ? 1 : -1;
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	687b      	ldr	r3, [r7, #4]
 8002940:	429a      	cmp	r2, r3
 8002942:	da01      	bge.n	8002948 <draw_line+0x28>
 8002944:	2301      	movs	r3, #1
 8002946:	e001      	b.n	800294c <draw_line+0x2c>
 8002948:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800294c:	61fb      	str	r3, [r7, #28]
	int dy = -abs(y1 - y0);
 800294e:	683a      	ldr	r2, [r7, #0]
 8002950:	68bb      	ldr	r3, [r7, #8]
 8002952:	1ad3      	subs	r3, r2, r3
 8002954:	2b00      	cmp	r3, #0
 8002956:	bfb8      	it	lt
 8002958:	425b      	neglt	r3, r3
 800295a:	425b      	negs	r3, r3
 800295c:	61bb      	str	r3, [r7, #24]
	int sy = (y0 < y1) ? 1 : -1;
 800295e:	68ba      	ldr	r2, [r7, #8]
 8002960:	683b      	ldr	r3, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	da01      	bge.n	800296a <draw_line+0x4a>
 8002966:	2301      	movs	r3, #1
 8002968:	e001      	b.n	800296e <draw_line+0x4e>
 800296a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 800296e:	617b      	str	r3, [r7, #20]
	int error = dx + dy;
 8002970:	6a3a      	ldr	r2, [r7, #32]
 8002972:	69bb      	ldr	r3, [r7, #24]
 8002974:	4413      	add	r3, r2
 8002976:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		set_pixel_w(x0, y0, 1);
 8002978:	2201      	movs	r2, #1
 800297a:	68b9      	ldr	r1, [r7, #8]
 800297c:	68f8      	ldr	r0, [r7, #12]
 800297e:	f7ff fe61 	bl	8002644 <set_pixel_w>

		if (x0 == x1 && y0 == y1) {
 8002982:	68fa      	ldr	r2, [r7, #12]
 8002984:	687b      	ldr	r3, [r7, #4]
 8002986:	429a      	cmp	r2, r3
 8002988:	d103      	bne.n	8002992 <draw_line+0x72>
 800298a:	68ba      	ldr	r2, [r7, #8]
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	429a      	cmp	r2, r3
 8002990:	d023      	beq.n	80029da <draw_line+0xba>
			break;
		}

		int e2 = 2 * error;
 8002992:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002994:	005b      	lsls	r3, r3, #1
 8002996:	613b      	str	r3, [r7, #16]
		if (e2 >= dy) {
 8002998:	693a      	ldr	r2, [r7, #16]
 800299a:	69bb      	ldr	r3, [r7, #24]
 800299c:	429a      	cmp	r2, r3
 800299e:	db0b      	blt.n	80029b8 <draw_line+0x98>
			if (x0 == x1) {
 80029a0:	68fa      	ldr	r2, [r7, #12]
 80029a2:	687b      	ldr	r3, [r7, #4]
 80029a4:	429a      	cmp	r2, r3
 80029a6:	d01a      	beq.n	80029de <draw_line+0xbe>
				break;
			}
			error += dy;
 80029a8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029aa:	69bb      	ldr	r3, [r7, #24]
 80029ac:	4413      	add	r3, r2
 80029ae:	627b      	str	r3, [r7, #36]	@ 0x24
			x0 += sx;
 80029b0:	68fa      	ldr	r2, [r7, #12]
 80029b2:	69fb      	ldr	r3, [r7, #28]
 80029b4:	4413      	add	r3, r2
 80029b6:	60fb      	str	r3, [r7, #12]
		}
		if (e2 <= dx) {
 80029b8:	693a      	ldr	r2, [r7, #16]
 80029ba:	6a3b      	ldr	r3, [r7, #32]
 80029bc:	429a      	cmp	r2, r3
 80029be:	dcdb      	bgt.n	8002978 <draw_line+0x58>
			if (y0 == y1) {
 80029c0:	68ba      	ldr	r2, [r7, #8]
 80029c2:	683b      	ldr	r3, [r7, #0]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d00c      	beq.n	80029e2 <draw_line+0xc2>
				break;
			}
			error += dx;
 80029c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80029ca:	6a3b      	ldr	r3, [r7, #32]
 80029cc:	4413      	add	r3, r2
 80029ce:	627b      	str	r3, [r7, #36]	@ 0x24
			y0 += sy;
 80029d0:	68ba      	ldr	r2, [r7, #8]
 80029d2:	697b      	ldr	r3, [r7, #20]
 80029d4:	4413      	add	r3, r2
 80029d6:	60bb      	str	r3, [r7, #8]
	while (1) {
 80029d8:	e7ce      	b.n	8002978 <draw_line+0x58>
			break;
 80029da:	bf00      	nop
 80029dc:	e002      	b.n	80029e4 <draw_line+0xc4>
				break;
 80029de:	bf00      	nop
 80029e0:	e000      	b.n	80029e4 <draw_line+0xc4>
				break;
 80029e2:	bf00      	nop
		}
	}
}
 80029e4:	bf00      	nop
 80029e6:	3728      	adds	r7, #40	@ 0x28
 80029e8:	46bd      	mov	sp, r7
 80029ea:	bd80      	pop	{r7, pc}

080029ec <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029ec:	b480      	push	{r7}
 80029ee:	b085      	sub	sp, #20
 80029f0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029f2:	4b15      	ldr	r3, [pc, #84]	@ (8002a48 <HAL_MspInit+0x5c>)
 80029f4:	699b      	ldr	r3, [r3, #24]
 80029f6:	4a14      	ldr	r2, [pc, #80]	@ (8002a48 <HAL_MspInit+0x5c>)
 80029f8:	f043 0301 	orr.w	r3, r3, #1
 80029fc:	6193      	str	r3, [r2, #24]
 80029fe:	4b12      	ldr	r3, [pc, #72]	@ (8002a48 <HAL_MspInit+0x5c>)
 8002a00:	699b      	ldr	r3, [r3, #24]
 8002a02:	f003 0301 	and.w	r3, r3, #1
 8002a06:	60bb      	str	r3, [r7, #8]
 8002a08:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a0a:	4b0f      	ldr	r3, [pc, #60]	@ (8002a48 <HAL_MspInit+0x5c>)
 8002a0c:	69db      	ldr	r3, [r3, #28]
 8002a0e:	4a0e      	ldr	r2, [pc, #56]	@ (8002a48 <HAL_MspInit+0x5c>)
 8002a10:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002a14:	61d3      	str	r3, [r2, #28]
 8002a16:	4b0c      	ldr	r3, [pc, #48]	@ (8002a48 <HAL_MspInit+0x5c>)
 8002a18:	69db      	ldr	r3, [r3, #28]
 8002a1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002a1e:	607b      	str	r3, [r7, #4]
 8002a20:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002a22:	4b0a      	ldr	r3, [pc, #40]	@ (8002a4c <HAL_MspInit+0x60>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	60fb      	str	r3, [r7, #12]
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002a2e:	60fb      	str	r3, [r7, #12]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8002a36:	60fb      	str	r3, [r7, #12]
 8002a38:	4a04      	ldr	r2, [pc, #16]	@ (8002a4c <HAL_MspInit+0x60>)
 8002a3a:	68fb      	ldr	r3, [r7, #12]
 8002a3c:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a3e:	bf00      	nop
 8002a40:	3714      	adds	r7, #20
 8002a42:	46bd      	mov	sp, r7
 8002a44:	bc80      	pop	{r7}
 8002a46:	4770      	bx	lr
 8002a48:	40021000 	.word	0x40021000
 8002a4c:	40010000 	.word	0x40010000

08002a50 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b088      	sub	sp, #32
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a58:	f107 0310 	add.w	r3, r7, #16
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	601a      	str	r2, [r3, #0]
 8002a60:	605a      	str	r2, [r3, #4]
 8002a62:	609a      	str	r2, [r3, #8]
 8002a64:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002a66:	687b      	ldr	r3, [r7, #4]
 8002a68:	681b      	ldr	r3, [r3, #0]
 8002a6a:	4a15      	ldr	r2, [pc, #84]	@ (8002ac0 <HAL_SPI_MspInit+0x70>)
 8002a6c:	4293      	cmp	r3, r2
 8002a6e:	d123      	bne.n	8002ab8 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a70:	4b14      	ldr	r3, [pc, #80]	@ (8002ac4 <HAL_SPI_MspInit+0x74>)
 8002a72:	699b      	ldr	r3, [r3, #24]
 8002a74:	4a13      	ldr	r2, [pc, #76]	@ (8002ac4 <HAL_SPI_MspInit+0x74>)
 8002a76:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a7a:	6193      	str	r3, [r2, #24]
 8002a7c:	4b11      	ldr	r3, [pc, #68]	@ (8002ac4 <HAL_SPI_MspInit+0x74>)
 8002a7e:	699b      	ldr	r3, [r3, #24]
 8002a80:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a84:	60fb      	str	r3, [r7, #12]
 8002a86:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a88:	4b0e      	ldr	r3, [pc, #56]	@ (8002ac4 <HAL_SPI_MspInit+0x74>)
 8002a8a:	699b      	ldr	r3, [r3, #24]
 8002a8c:	4a0d      	ldr	r2, [pc, #52]	@ (8002ac4 <HAL_SPI_MspInit+0x74>)
 8002a8e:	f043 0304 	orr.w	r3, r3, #4
 8002a92:	6193      	str	r3, [r2, #24]
 8002a94:	4b0b      	ldr	r3, [pc, #44]	@ (8002ac4 <HAL_SPI_MspInit+0x74>)
 8002a96:	699b      	ldr	r3, [r3, #24]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	60bb      	str	r3, [r7, #8]
 8002a9e:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002aa0:	23a0      	movs	r3, #160	@ 0xa0
 8002aa2:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aa4:	2302      	movs	r3, #2
 8002aa6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002aa8:	2303      	movs	r3, #3
 8002aaa:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002aac:	f107 0310 	add.w	r3, r7, #16
 8002ab0:	4619      	mov	r1, r3
 8002ab2:	4805      	ldr	r0, [pc, #20]	@ (8002ac8 <HAL_SPI_MspInit+0x78>)
 8002ab4:	f000 fa7c 	bl	8002fb0 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002ab8:	bf00      	nop
 8002aba:	3720      	adds	r7, #32
 8002abc:	46bd      	mov	sp, r7
 8002abe:	bd80      	pop	{r7, pc}
 8002ac0:	40013000 	.word	0x40013000
 8002ac4:	40021000 	.word	0x40021000
 8002ac8:	40010800 	.word	0x40010800

08002acc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b084      	sub	sp, #16
 8002ad0:	af00      	add	r7, sp, #0
 8002ad2:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002ad4:	687b      	ldr	r3, [r7, #4]
 8002ad6:	681b      	ldr	r3, [r3, #0]
 8002ad8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002adc:	d114      	bne.n	8002b08 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002ade:	4b15      	ldr	r3, [pc, #84]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002ae0:	69db      	ldr	r3, [r3, #28]
 8002ae2:	4a14      	ldr	r2, [pc, #80]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002ae4:	f043 0301 	orr.w	r3, r3, #1
 8002ae8:	61d3      	str	r3, [r2, #28]
 8002aea:	4b12      	ldr	r3, [pc, #72]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002aec:	69db      	ldr	r3, [r3, #28]
 8002aee:	f003 0301 	and.w	r3, r3, #1
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002af6:	2200      	movs	r2, #0
 8002af8:	2100      	movs	r1, #0
 8002afa:	201c      	movs	r0, #28
 8002afc:	f000 fa21 	bl	8002f42 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002b00:	201c      	movs	r0, #28
 8002b02:	f000 fa3a 	bl	8002f7a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002b06:	e010      	b.n	8002b2a <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	4a0a      	ldr	r2, [pc, #40]	@ (8002b38 <HAL_TIM_Base_MspInit+0x6c>)
 8002b0e:	4293      	cmp	r3, r2
 8002b10:	d10b      	bne.n	8002b2a <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002b12:	4b08      	ldr	r3, [pc, #32]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002b14:	69db      	ldr	r3, [r3, #28]
 8002b16:	4a07      	ldr	r2, [pc, #28]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002b18:	f043 0302 	orr.w	r3, r3, #2
 8002b1c:	61d3      	str	r3, [r2, #28]
 8002b1e:	4b05      	ldr	r3, [pc, #20]	@ (8002b34 <HAL_TIM_Base_MspInit+0x68>)
 8002b20:	69db      	ldr	r3, [r3, #28]
 8002b22:	f003 0302 	and.w	r3, r3, #2
 8002b26:	60bb      	str	r3, [r7, #8]
 8002b28:	68bb      	ldr	r3, [r7, #8]
}
 8002b2a:	bf00      	nop
 8002b2c:	3710      	adds	r7, #16
 8002b2e:	46bd      	mov	sp, r7
 8002b30:	bd80      	pop	{r7, pc}
 8002b32:	bf00      	nop
 8002b34:	40021000 	.word	0x40021000
 8002b38:	40000400 	.word	0x40000400

08002b3c <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002b3c:	b580      	push	{r7, lr}
 8002b3e:	b08a      	sub	sp, #40	@ 0x28
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b44:	f107 0314 	add.w	r3, r7, #20
 8002b48:	2200      	movs	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
 8002b4c:	605a      	str	r2, [r3, #4]
 8002b4e:	609a      	str	r2, [r3, #8]
 8002b50:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002b52:	687b      	ldr	r3, [r7, #4]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b5a:	d118      	bne.n	8002b8e <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b5c:	4b25      	ldr	r3, [pc, #148]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	4a24      	ldr	r2, [pc, #144]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002b62:	f043 0304 	orr.w	r3, r3, #4
 8002b66:	6193      	str	r3, [r2, #24]
 8002b68:	4b22      	ldr	r3, [pc, #136]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002b6a:	699b      	ldr	r3, [r3, #24]
 8002b6c:	f003 0304 	and.w	r3, r3, #4
 8002b70:	613b      	str	r3, [r7, #16]
 8002b72:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b74:	2301      	movs	r3, #1
 8002b76:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b78:	2302      	movs	r3, #2
 8002b7a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b7c:	2302      	movs	r3, #2
 8002b7e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b80:	f107 0314 	add.w	r3, r7, #20
 8002b84:	4619      	mov	r1, r3
 8002b86:	481c      	ldr	r0, [pc, #112]	@ (8002bf8 <HAL_TIM_MspPostInit+0xbc>)
 8002b88:	f000 fa12 	bl	8002fb0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b8c:	e02e      	b.n	8002bec <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	4a1a      	ldr	r2, [pc, #104]	@ (8002bfc <HAL_TIM_MspPostInit+0xc0>)
 8002b94:	4293      	cmp	r3, r2
 8002b96:	d129      	bne.n	8002bec <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b98:	4b16      	ldr	r3, [pc, #88]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002b9a:	699b      	ldr	r3, [r3, #24]
 8002b9c:	4a15      	ldr	r2, [pc, #84]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002b9e:	f043 0310 	orr.w	r3, r3, #16
 8002ba2:	6193      	str	r3, [r2, #24]
 8002ba4:	4b13      	ldr	r3, [pc, #76]	@ (8002bf4 <HAL_TIM_MspPostInit+0xb8>)
 8002ba6:	699b      	ldr	r3, [r3, #24]
 8002ba8:	f003 0310 	and.w	r3, r3, #16
 8002bac:	60fb      	str	r3, [r7, #12]
 8002bae:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002bb0:	2340      	movs	r3, #64	@ 0x40
 8002bb2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bb4:	2302      	movs	r3, #2
 8002bb6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002bb8:	2302      	movs	r3, #2
 8002bba:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bbc:	f107 0314 	add.w	r3, r7, #20
 8002bc0:	4619      	mov	r1, r3
 8002bc2:	480f      	ldr	r0, [pc, #60]	@ (8002c00 <HAL_TIM_MspPostInit+0xc4>)
 8002bc4:	f000 f9f4 	bl	8002fb0 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002bc8:	4b0e      	ldr	r3, [pc, #56]	@ (8002c04 <HAL_TIM_MspPostInit+0xc8>)
 8002bca:	685b      	ldr	r3, [r3, #4]
 8002bcc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd0:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002bd4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bd8:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002bdc:	627b      	str	r3, [r7, #36]	@ 0x24
 8002bde:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002be0:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002be4:	627b      	str	r3, [r7, #36]	@ 0x24
 8002be6:	4a07      	ldr	r2, [pc, #28]	@ (8002c04 <HAL_TIM_MspPostInit+0xc8>)
 8002be8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002bea:	6053      	str	r3, [r2, #4]
}
 8002bec:	bf00      	nop
 8002bee:	3728      	adds	r7, #40	@ 0x28
 8002bf0:	46bd      	mov	sp, r7
 8002bf2:	bd80      	pop	{r7, pc}
 8002bf4:	40021000 	.word	0x40021000
 8002bf8:	40010800 	.word	0x40010800
 8002bfc:	40000400 	.word	0x40000400
 8002c00:	40011000 	.word	0x40011000
 8002c04:	40010000 	.word	0x40010000

08002c08 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002c08:	b480      	push	{r7}
 8002c0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002c0c:	bf00      	nop
 8002c0e:	e7fd      	b.n	8002c0c <NMI_Handler+0x4>

08002c10 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c14:	bf00      	nop
 8002c16:	e7fd      	b.n	8002c14 <HardFault_Handler+0x4>

08002c18 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c18:	b480      	push	{r7}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c1c:	bf00      	nop
 8002c1e:	e7fd      	b.n	8002c1c <MemManage_Handler+0x4>

08002c20 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c20:	b480      	push	{r7}
 8002c22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c24:	bf00      	nop
 8002c26:	e7fd      	b.n	8002c24 <BusFault_Handler+0x4>

08002c28 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c28:	b480      	push	{r7}
 8002c2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c2c:	bf00      	nop
 8002c2e:	e7fd      	b.n	8002c2c <UsageFault_Handler+0x4>

08002c30 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c40:	bf00      	nop
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bc80      	pop	{r7}
 8002c46:	4770      	bx	lr

08002c48 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c48:	b480      	push	{r7}
 8002c4a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c4c:	bf00      	nop
 8002c4e:	46bd      	mov	sp, r7
 8002c50:	bc80      	pop	{r7}
 8002c52:	4770      	bx	lr

08002c54 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c54:	b580      	push	{r7, lr}
 8002c56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c58:	f000 f880 	bl	8002d5c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c5c:	bf00      	nop
 8002c5e:	bd80      	pop	{r7, pc}

08002c60 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 8002c64:	f7ff fe26 	bl	80028b4 <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c68:	4802      	ldr	r0, [pc, #8]	@ (8002c74 <TIM2_IRQHandler+0x14>)
 8002c6a:	f001 f953 	bl	8003f14 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c6e:	bf00      	nop
 8002c70:	bd80      	pop	{r7, pc}
 8002c72:	bf00      	nop
 8002c74:	20000320 	.word	0x20000320

08002c78 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c78:	b480      	push	{r7}
 8002c7a:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c7c:	bf00      	nop
 8002c7e:	46bd      	mov	sp, r7
 8002c80:	bc80      	pop	{r7}
 8002c82:	4770      	bx	lr

08002c84 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c84:	f7ff fff8 	bl	8002c78 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c88:	480b      	ldr	r0, [pc, #44]	@ (8002cb8 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c8a:	490c      	ldr	r1, [pc, #48]	@ (8002cbc <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c8c:	4a0c      	ldr	r2, [pc, #48]	@ (8002cc0 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c8e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c90:	e002      	b.n	8002c98 <LoopCopyDataInit>

08002c92 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c92:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c94:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c96:	3304      	adds	r3, #4

08002c98 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c98:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c9a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c9c:	d3f9      	bcc.n	8002c92 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c9e:	4a09      	ldr	r2, [pc, #36]	@ (8002cc4 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002ca0:	4c09      	ldr	r4, [pc, #36]	@ (8002cc8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002ca2:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002ca4:	e001      	b.n	8002caa <LoopFillZerobss>

08002ca6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002ca6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002ca8:	3204      	adds	r2, #4

08002caa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002caa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cac:	d3fb      	bcc.n	8002ca6 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002cae:	f001 ff0b 	bl	8004ac8 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002cb2:	f7fe fc91 	bl	80015d8 <main>
  bx lr
 8002cb6:	4770      	bx	lr
  ldr r0, =_sdata
 8002cb8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002cbc:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002cc0:	080061c0 	.word	0x080061c0
  ldr r2, =_sbss
 8002cc4:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002cc8:	200013d0 	.word	0x200013d0

08002ccc <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002ccc:	e7fe      	b.n	8002ccc <ADC1_2_IRQHandler>
	...

08002cd0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002cd0:	b580      	push	{r7, lr}
 8002cd2:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002cd4:	4b08      	ldr	r3, [pc, #32]	@ (8002cf8 <HAL_Init+0x28>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4a07      	ldr	r2, [pc, #28]	@ (8002cf8 <HAL_Init+0x28>)
 8002cda:	f043 0310 	orr.w	r3, r3, #16
 8002cde:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ce0:	2003      	movs	r0, #3
 8002ce2:	f000 f923 	bl	8002f2c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002ce6:	200f      	movs	r0, #15
 8002ce8:	f000 f808 	bl	8002cfc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002cec:	f7ff fe7e 	bl	80029ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002cf0:	2300      	movs	r3, #0
}
 8002cf2:	4618      	mov	r0, r3
 8002cf4:	bd80      	pop	{r7, pc}
 8002cf6:	bf00      	nop
 8002cf8:	40022000 	.word	0x40022000

08002cfc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cfc:	b580      	push	{r7, lr}
 8002cfe:	b082      	sub	sp, #8
 8002d00:	af00      	add	r7, sp, #0
 8002d02:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d04:	4b12      	ldr	r3, [pc, #72]	@ (8002d50 <HAL_InitTick+0x54>)
 8002d06:	681a      	ldr	r2, [r3, #0]
 8002d08:	4b12      	ldr	r3, [pc, #72]	@ (8002d54 <HAL_InitTick+0x58>)
 8002d0a:	781b      	ldrb	r3, [r3, #0]
 8002d0c:	4619      	mov	r1, r3
 8002d0e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002d12:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d16:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	f000 f93b 	bl	8002f96 <HAL_SYSTICK_Config>
 8002d20:	4603      	mov	r3, r0
 8002d22:	2b00      	cmp	r3, #0
 8002d24:	d001      	beq.n	8002d2a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d26:	2301      	movs	r3, #1
 8002d28:	e00e      	b.n	8002d48 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2b0f      	cmp	r3, #15
 8002d2e:	d80a      	bhi.n	8002d46 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d30:	2200      	movs	r2, #0
 8002d32:	6879      	ldr	r1, [r7, #4]
 8002d34:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002d38:	f000 f903 	bl	8002f42 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002d3c:	4a06      	ldr	r2, [pc, #24]	@ (8002d58 <HAL_InitTick+0x5c>)
 8002d3e:	687b      	ldr	r3, [r7, #4]
 8002d40:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002d42:	2300      	movs	r3, #0
 8002d44:	e000      	b.n	8002d48 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002d46:	2301      	movs	r3, #1
}
 8002d48:	4618      	mov	r0, r3
 8002d4a:	3708      	adds	r7, #8
 8002d4c:	46bd      	mov	sp, r7
 8002d4e:	bd80      	pop	{r7, pc}
 8002d50:	200001d8 	.word	0x200001d8
 8002d54:	200001e0 	.word	0x200001e0
 8002d58:	200001dc 	.word	0x200001dc

08002d5c <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d60:	4b05      	ldr	r3, [pc, #20]	@ (8002d78 <HAL_IncTick+0x1c>)
 8002d62:	781b      	ldrb	r3, [r3, #0]
 8002d64:	461a      	mov	r2, r3
 8002d66:	4b05      	ldr	r3, [pc, #20]	@ (8002d7c <HAL_IncTick+0x20>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4413      	add	r3, r2
 8002d6c:	4a03      	ldr	r2, [pc, #12]	@ (8002d7c <HAL_IncTick+0x20>)
 8002d6e:	6013      	str	r3, [r2, #0]
}
 8002d70:	bf00      	nop
 8002d72:	46bd      	mov	sp, r7
 8002d74:	bc80      	pop	{r7}
 8002d76:	4770      	bx	lr
 8002d78:	200001e0 	.word	0x200001e0
 8002d7c:	200013cc 	.word	0x200013cc

08002d80 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d80:	b480      	push	{r7}
 8002d82:	af00      	add	r7, sp, #0
  return uwTick;
 8002d84:	4b02      	ldr	r3, [pc, #8]	@ (8002d90 <HAL_GetTick+0x10>)
 8002d86:	681b      	ldr	r3, [r3, #0]
}
 8002d88:	4618      	mov	r0, r3
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bc80      	pop	{r7}
 8002d8e:	4770      	bx	lr
 8002d90:	200013cc 	.word	0x200013cc

08002d94 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d94:	b480      	push	{r7}
 8002d96:	b085      	sub	sp, #20
 8002d98:	af00      	add	r7, sp, #0
 8002d9a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d9c:	687b      	ldr	r3, [r7, #4]
 8002d9e:	f003 0307 	and.w	r3, r3, #7
 8002da2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002da4:	4b0c      	ldr	r3, [pc, #48]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002da6:	68db      	ldr	r3, [r3, #12]
 8002da8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002daa:	68ba      	ldr	r2, [r7, #8]
 8002dac:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002db0:	4013      	ands	r3, r2
 8002db2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002db8:	68bb      	ldr	r3, [r7, #8]
 8002dba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002dbc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002dc0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002dc4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002dc6:	4a04      	ldr	r2, [pc, #16]	@ (8002dd8 <__NVIC_SetPriorityGrouping+0x44>)
 8002dc8:	68bb      	ldr	r3, [r7, #8]
 8002dca:	60d3      	str	r3, [r2, #12]
}
 8002dcc:	bf00      	nop
 8002dce:	3714      	adds	r7, #20
 8002dd0:	46bd      	mov	sp, r7
 8002dd2:	bc80      	pop	{r7}
 8002dd4:	4770      	bx	lr
 8002dd6:	bf00      	nop
 8002dd8:	e000ed00 	.word	0xe000ed00

08002ddc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002ddc:	b480      	push	{r7}
 8002dde:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002de0:	4b04      	ldr	r3, [pc, #16]	@ (8002df4 <__NVIC_GetPriorityGrouping+0x18>)
 8002de2:	68db      	ldr	r3, [r3, #12]
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	f003 0307 	and.w	r3, r3, #7
}
 8002dea:	4618      	mov	r0, r3
 8002dec:	46bd      	mov	sp, r7
 8002dee:	bc80      	pop	{r7}
 8002df0:	4770      	bx	lr
 8002df2:	bf00      	nop
 8002df4:	e000ed00 	.word	0xe000ed00

08002df8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002df8:	b480      	push	{r7}
 8002dfa:	b083      	sub	sp, #12
 8002dfc:	af00      	add	r7, sp, #0
 8002dfe:	4603      	mov	r3, r0
 8002e00:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	2b00      	cmp	r3, #0
 8002e08:	db0b      	blt.n	8002e22 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e0a:	79fb      	ldrb	r3, [r7, #7]
 8002e0c:	f003 021f 	and.w	r2, r3, #31
 8002e10:	4906      	ldr	r1, [pc, #24]	@ (8002e2c <__NVIC_EnableIRQ+0x34>)
 8002e12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e16:	095b      	lsrs	r3, r3, #5
 8002e18:	2001      	movs	r0, #1
 8002e1a:	fa00 f202 	lsl.w	r2, r0, r2
 8002e1e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e22:	bf00      	nop
 8002e24:	370c      	adds	r7, #12
 8002e26:	46bd      	mov	sp, r7
 8002e28:	bc80      	pop	{r7}
 8002e2a:	4770      	bx	lr
 8002e2c:	e000e100 	.word	0xe000e100

08002e30 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002e30:	b480      	push	{r7}
 8002e32:	b083      	sub	sp, #12
 8002e34:	af00      	add	r7, sp, #0
 8002e36:	4603      	mov	r3, r0
 8002e38:	6039      	str	r1, [r7, #0]
 8002e3a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e40:	2b00      	cmp	r3, #0
 8002e42:	db0a      	blt.n	8002e5a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e44:	683b      	ldr	r3, [r7, #0]
 8002e46:	b2da      	uxtb	r2, r3
 8002e48:	490c      	ldr	r1, [pc, #48]	@ (8002e7c <__NVIC_SetPriority+0x4c>)
 8002e4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e4e:	0112      	lsls	r2, r2, #4
 8002e50:	b2d2      	uxtb	r2, r2
 8002e52:	440b      	add	r3, r1
 8002e54:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e58:	e00a      	b.n	8002e70 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e5a:	683b      	ldr	r3, [r7, #0]
 8002e5c:	b2da      	uxtb	r2, r3
 8002e5e:	4908      	ldr	r1, [pc, #32]	@ (8002e80 <__NVIC_SetPriority+0x50>)
 8002e60:	79fb      	ldrb	r3, [r7, #7]
 8002e62:	f003 030f 	and.w	r3, r3, #15
 8002e66:	3b04      	subs	r3, #4
 8002e68:	0112      	lsls	r2, r2, #4
 8002e6a:	b2d2      	uxtb	r2, r2
 8002e6c:	440b      	add	r3, r1
 8002e6e:	761a      	strb	r2, [r3, #24]
}
 8002e70:	bf00      	nop
 8002e72:	370c      	adds	r7, #12
 8002e74:	46bd      	mov	sp, r7
 8002e76:	bc80      	pop	{r7}
 8002e78:	4770      	bx	lr
 8002e7a:	bf00      	nop
 8002e7c:	e000e100 	.word	0xe000e100
 8002e80:	e000ed00 	.word	0xe000ed00

08002e84 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e84:	b480      	push	{r7}
 8002e86:	b089      	sub	sp, #36	@ 0x24
 8002e88:	af00      	add	r7, sp, #0
 8002e8a:	60f8      	str	r0, [r7, #12]
 8002e8c:	60b9      	str	r1, [r7, #8]
 8002e8e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e90:	68fb      	ldr	r3, [r7, #12]
 8002e92:	f003 0307 	and.w	r3, r3, #7
 8002e96:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e98:	69fb      	ldr	r3, [r7, #28]
 8002e9a:	f1c3 0307 	rsb	r3, r3, #7
 8002e9e:	2b04      	cmp	r3, #4
 8002ea0:	bf28      	it	cs
 8002ea2:	2304      	movcs	r3, #4
 8002ea4:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	3304      	adds	r3, #4
 8002eaa:	2b06      	cmp	r3, #6
 8002eac:	d902      	bls.n	8002eb4 <NVIC_EncodePriority+0x30>
 8002eae:	69fb      	ldr	r3, [r7, #28]
 8002eb0:	3b03      	subs	r3, #3
 8002eb2:	e000      	b.n	8002eb6 <NVIC_EncodePriority+0x32>
 8002eb4:	2300      	movs	r3, #0
 8002eb6:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002eb8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002ebc:	69bb      	ldr	r3, [r7, #24]
 8002ebe:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec2:	43da      	mvns	r2, r3
 8002ec4:	68bb      	ldr	r3, [r7, #8]
 8002ec6:	401a      	ands	r2, r3
 8002ec8:	697b      	ldr	r3, [r7, #20]
 8002eca:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002ecc:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002ed0:	697b      	ldr	r3, [r7, #20]
 8002ed2:	fa01 f303 	lsl.w	r3, r1, r3
 8002ed6:	43d9      	mvns	r1, r3
 8002ed8:	687b      	ldr	r3, [r7, #4]
 8002eda:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002edc:	4313      	orrs	r3, r2
         );
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3724      	adds	r7, #36	@ 0x24
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bc80      	pop	{r7}
 8002ee6:	4770      	bx	lr

08002ee8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ee8:	b580      	push	{r7, lr}
 8002eea:	b082      	sub	sp, #8
 8002eec:	af00      	add	r7, sp, #0
 8002eee:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ef0:	687b      	ldr	r3, [r7, #4]
 8002ef2:	3b01      	subs	r3, #1
 8002ef4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ef8:	d301      	bcc.n	8002efe <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002efa:	2301      	movs	r3, #1
 8002efc:	e00f      	b.n	8002f1e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002efe:	4a0a      	ldr	r2, [pc, #40]	@ (8002f28 <SysTick_Config+0x40>)
 8002f00:	687b      	ldr	r3, [r7, #4]
 8002f02:	3b01      	subs	r3, #1
 8002f04:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002f06:	210f      	movs	r1, #15
 8002f08:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002f0c:	f7ff ff90 	bl	8002e30 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002f10:	4b05      	ldr	r3, [pc, #20]	@ (8002f28 <SysTick_Config+0x40>)
 8002f12:	2200      	movs	r2, #0
 8002f14:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002f16:	4b04      	ldr	r3, [pc, #16]	@ (8002f28 <SysTick_Config+0x40>)
 8002f18:	2207      	movs	r2, #7
 8002f1a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002f1c:	2300      	movs	r3, #0
}
 8002f1e:	4618      	mov	r0, r3
 8002f20:	3708      	adds	r7, #8
 8002f22:	46bd      	mov	sp, r7
 8002f24:	bd80      	pop	{r7, pc}
 8002f26:	bf00      	nop
 8002f28:	e000e010 	.word	0xe000e010

08002f2c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002f2c:	b580      	push	{r7, lr}
 8002f2e:	b082      	sub	sp, #8
 8002f30:	af00      	add	r7, sp, #0
 8002f32:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002f34:	6878      	ldr	r0, [r7, #4]
 8002f36:	f7ff ff2d 	bl	8002d94 <__NVIC_SetPriorityGrouping>
}
 8002f3a:	bf00      	nop
 8002f3c:	3708      	adds	r7, #8
 8002f3e:	46bd      	mov	sp, r7
 8002f40:	bd80      	pop	{r7, pc}

08002f42 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002f42:	b580      	push	{r7, lr}
 8002f44:	b086      	sub	sp, #24
 8002f46:	af00      	add	r7, sp, #0
 8002f48:	4603      	mov	r3, r0
 8002f4a:	60b9      	str	r1, [r7, #8]
 8002f4c:	607a      	str	r2, [r7, #4]
 8002f4e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f50:	2300      	movs	r3, #0
 8002f52:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f54:	f7ff ff42 	bl	8002ddc <__NVIC_GetPriorityGrouping>
 8002f58:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f5a:	687a      	ldr	r2, [r7, #4]
 8002f5c:	68b9      	ldr	r1, [r7, #8]
 8002f5e:	6978      	ldr	r0, [r7, #20]
 8002f60:	f7ff ff90 	bl	8002e84 <NVIC_EncodePriority>
 8002f64:	4602      	mov	r2, r0
 8002f66:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f6a:	4611      	mov	r1, r2
 8002f6c:	4618      	mov	r0, r3
 8002f6e:	f7ff ff5f 	bl	8002e30 <__NVIC_SetPriority>
}
 8002f72:	bf00      	nop
 8002f74:	3718      	adds	r7, #24
 8002f76:	46bd      	mov	sp, r7
 8002f78:	bd80      	pop	{r7, pc}

08002f7a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f7a:	b580      	push	{r7, lr}
 8002f7c:	b082      	sub	sp, #8
 8002f7e:	af00      	add	r7, sp, #0
 8002f80:	4603      	mov	r3, r0
 8002f82:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f84:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7ff ff35 	bl	8002df8 <__NVIC_EnableIRQ>
}
 8002f8e:	bf00      	nop
 8002f90:	3708      	adds	r7, #8
 8002f92:	46bd      	mov	sp, r7
 8002f94:	bd80      	pop	{r7, pc}

08002f96 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f96:	b580      	push	{r7, lr}
 8002f98:	b082      	sub	sp, #8
 8002f9a:	af00      	add	r7, sp, #0
 8002f9c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7ff ffa2 	bl	8002ee8 <SysTick_Config>
 8002fa4:	4603      	mov	r3, r0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	3708      	adds	r7, #8
 8002faa:	46bd      	mov	sp, r7
 8002fac:	bd80      	pop	{r7, pc}
	...

08002fb0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002fb0:	b480      	push	{r7}
 8002fb2:	b08b      	sub	sp, #44	@ 0x2c
 8002fb4:	af00      	add	r7, sp, #0
 8002fb6:	6078      	str	r0, [r7, #4]
 8002fb8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002fc2:	e169      	b.n	8003298 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002fc4:	2201      	movs	r2, #1
 8002fc6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002fc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002fcc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002fce:	683b      	ldr	r3, [r7, #0]
 8002fd0:	681b      	ldr	r3, [r3, #0]
 8002fd2:	69fa      	ldr	r2, [r7, #28]
 8002fd4:	4013      	ands	r3, r2
 8002fd6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002fd8:	69ba      	ldr	r2, [r7, #24]
 8002fda:	69fb      	ldr	r3, [r7, #28]
 8002fdc:	429a      	cmp	r2, r3
 8002fde:	f040 8158 	bne.w	8003292 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a9a      	ldr	r2, [pc, #616]	@ (8003250 <HAL_GPIO_Init+0x2a0>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d05e      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8002fec:	4a98      	ldr	r2, [pc, #608]	@ (8003250 <HAL_GPIO_Init+0x2a0>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d875      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8002ff2:	4a98      	ldr	r2, [pc, #608]	@ (8003254 <HAL_GPIO_Init+0x2a4>)
 8002ff4:	4293      	cmp	r3, r2
 8002ff6:	d058      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8002ff8:	4a96      	ldr	r2, [pc, #600]	@ (8003254 <HAL_GPIO_Init+0x2a4>)
 8002ffa:	4293      	cmp	r3, r2
 8002ffc:	d86f      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8002ffe:	4a96      	ldr	r2, [pc, #600]	@ (8003258 <HAL_GPIO_Init+0x2a8>)
 8003000:	4293      	cmp	r3, r2
 8003002:	d052      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8003004:	4a94      	ldr	r2, [pc, #592]	@ (8003258 <HAL_GPIO_Init+0x2a8>)
 8003006:	4293      	cmp	r3, r2
 8003008:	d869      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 800300a:	4a94      	ldr	r2, [pc, #592]	@ (800325c <HAL_GPIO_Init+0x2ac>)
 800300c:	4293      	cmp	r3, r2
 800300e:	d04c      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 8003010:	4a92      	ldr	r2, [pc, #584]	@ (800325c <HAL_GPIO_Init+0x2ac>)
 8003012:	4293      	cmp	r3, r2
 8003014:	d863      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8003016:	4a92      	ldr	r2, [pc, #584]	@ (8003260 <HAL_GPIO_Init+0x2b0>)
 8003018:	4293      	cmp	r3, r2
 800301a:	d046      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
 800301c:	4a90      	ldr	r2, [pc, #576]	@ (8003260 <HAL_GPIO_Init+0x2b0>)
 800301e:	4293      	cmp	r3, r2
 8003020:	d85d      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 8003022:	2b12      	cmp	r3, #18
 8003024:	d82a      	bhi.n	800307c <HAL_GPIO_Init+0xcc>
 8003026:	2b12      	cmp	r3, #18
 8003028:	d859      	bhi.n	80030de <HAL_GPIO_Init+0x12e>
 800302a:	a201      	add	r2, pc, #4	@ (adr r2, 8003030 <HAL_GPIO_Init+0x80>)
 800302c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003030:	080030ab 	.word	0x080030ab
 8003034:	08003085 	.word	0x08003085
 8003038:	08003097 	.word	0x08003097
 800303c:	080030d9 	.word	0x080030d9
 8003040:	080030df 	.word	0x080030df
 8003044:	080030df 	.word	0x080030df
 8003048:	080030df 	.word	0x080030df
 800304c:	080030df 	.word	0x080030df
 8003050:	080030df 	.word	0x080030df
 8003054:	080030df 	.word	0x080030df
 8003058:	080030df 	.word	0x080030df
 800305c:	080030df 	.word	0x080030df
 8003060:	080030df 	.word	0x080030df
 8003064:	080030df 	.word	0x080030df
 8003068:	080030df 	.word	0x080030df
 800306c:	080030df 	.word	0x080030df
 8003070:	080030df 	.word	0x080030df
 8003074:	0800308d 	.word	0x0800308d
 8003078:	080030a1 	.word	0x080030a1
 800307c:	4a79      	ldr	r2, [pc, #484]	@ (8003264 <HAL_GPIO_Init+0x2b4>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d013      	beq.n	80030aa <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8003082:	e02c      	b.n	80030de <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8003084:	683b      	ldr	r3, [r7, #0]
 8003086:	68db      	ldr	r3, [r3, #12]
 8003088:	623b      	str	r3, [r7, #32]
          break;
 800308a:	e029      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800308c:	683b      	ldr	r3, [r7, #0]
 800308e:	68db      	ldr	r3, [r3, #12]
 8003090:	3304      	adds	r3, #4
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e024      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8003096:	683b      	ldr	r3, [r7, #0]
 8003098:	68db      	ldr	r3, [r3, #12]
 800309a:	3308      	adds	r3, #8
 800309c:	623b      	str	r3, [r7, #32]
          break;
 800309e:	e01f      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80030a0:	683b      	ldr	r3, [r7, #0]
 80030a2:	68db      	ldr	r3, [r3, #12]
 80030a4:	330c      	adds	r3, #12
 80030a6:	623b      	str	r3, [r7, #32]
          break;
 80030a8:	e01a      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80030aa:	683b      	ldr	r3, [r7, #0]
 80030ac:	689b      	ldr	r3, [r3, #8]
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d102      	bne.n	80030b8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80030b2:	2304      	movs	r3, #4
 80030b4:	623b      	str	r3, [r7, #32]
          break;
 80030b6:	e013      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	689b      	ldr	r3, [r3, #8]
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d105      	bne.n	80030cc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030c0:	2308      	movs	r3, #8
 80030c2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	69fa      	ldr	r2, [r7, #28]
 80030c8:	611a      	str	r2, [r3, #16]
          break;
 80030ca:	e009      	b.n	80030e0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80030cc:	2308      	movs	r3, #8
 80030ce:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	69fa      	ldr	r2, [r7, #28]
 80030d4:	615a      	str	r2, [r3, #20]
          break;
 80030d6:	e003      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80030d8:	2300      	movs	r3, #0
 80030da:	623b      	str	r3, [r7, #32]
          break;
 80030dc:	e000      	b.n	80030e0 <HAL_GPIO_Init+0x130>
          break;
 80030de:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80030e0:	69bb      	ldr	r3, [r7, #24]
 80030e2:	2bff      	cmp	r3, #255	@ 0xff
 80030e4:	d801      	bhi.n	80030ea <HAL_GPIO_Init+0x13a>
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	e001      	b.n	80030ee <HAL_GPIO_Init+0x13e>
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	3304      	adds	r3, #4
 80030ee:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030f0:	69bb      	ldr	r3, [r7, #24]
 80030f2:	2bff      	cmp	r3, #255	@ 0xff
 80030f4:	d802      	bhi.n	80030fc <HAL_GPIO_Init+0x14c>
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	009b      	lsls	r3, r3, #2
 80030fa:	e002      	b.n	8003102 <HAL_GPIO_Init+0x152>
 80030fc:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030fe:	3b08      	subs	r3, #8
 8003100:	009b      	lsls	r3, r3, #2
 8003102:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8003104:	697b      	ldr	r3, [r7, #20]
 8003106:	681a      	ldr	r2, [r3, #0]
 8003108:	210f      	movs	r1, #15
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	fa01 f303 	lsl.w	r3, r1, r3
 8003110:	43db      	mvns	r3, r3
 8003112:	401a      	ands	r2, r3
 8003114:	6a39      	ldr	r1, [r7, #32]
 8003116:	693b      	ldr	r3, [r7, #16]
 8003118:	fa01 f303 	lsl.w	r3, r1, r3
 800311c:	431a      	orrs	r2, r3
 800311e:	697b      	ldr	r3, [r7, #20]
 8003120:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003122:	683b      	ldr	r3, [r7, #0]
 8003124:	685b      	ldr	r3, [r3, #4]
 8003126:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800312a:	2b00      	cmp	r3, #0
 800312c:	f000 80b1 	beq.w	8003292 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8003130:	4b4d      	ldr	r3, [pc, #308]	@ (8003268 <HAL_GPIO_Init+0x2b8>)
 8003132:	699b      	ldr	r3, [r3, #24]
 8003134:	4a4c      	ldr	r2, [pc, #304]	@ (8003268 <HAL_GPIO_Init+0x2b8>)
 8003136:	f043 0301 	orr.w	r3, r3, #1
 800313a:	6193      	str	r3, [r2, #24]
 800313c:	4b4a      	ldr	r3, [pc, #296]	@ (8003268 <HAL_GPIO_Init+0x2b8>)
 800313e:	699b      	ldr	r3, [r3, #24]
 8003140:	f003 0301 	and.w	r3, r3, #1
 8003144:	60bb      	str	r3, [r7, #8]
 8003146:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003148:	4a48      	ldr	r2, [pc, #288]	@ (800326c <HAL_GPIO_Init+0x2bc>)
 800314a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800314c:	089b      	lsrs	r3, r3, #2
 800314e:	3302      	adds	r3, #2
 8003150:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003154:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8003156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003158:	f003 0303 	and.w	r3, r3, #3
 800315c:	009b      	lsls	r3, r3, #2
 800315e:	220f      	movs	r2, #15
 8003160:	fa02 f303 	lsl.w	r3, r2, r3
 8003164:	43db      	mvns	r3, r3
 8003166:	68fa      	ldr	r2, [r7, #12]
 8003168:	4013      	ands	r3, r2
 800316a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	4a40      	ldr	r2, [pc, #256]	@ (8003270 <HAL_GPIO_Init+0x2c0>)
 8003170:	4293      	cmp	r3, r2
 8003172:	d013      	beq.n	800319c <HAL_GPIO_Init+0x1ec>
 8003174:	687b      	ldr	r3, [r7, #4]
 8003176:	4a3f      	ldr	r2, [pc, #252]	@ (8003274 <HAL_GPIO_Init+0x2c4>)
 8003178:	4293      	cmp	r3, r2
 800317a:	d00d      	beq.n	8003198 <HAL_GPIO_Init+0x1e8>
 800317c:	687b      	ldr	r3, [r7, #4]
 800317e:	4a3e      	ldr	r2, [pc, #248]	@ (8003278 <HAL_GPIO_Init+0x2c8>)
 8003180:	4293      	cmp	r3, r2
 8003182:	d007      	beq.n	8003194 <HAL_GPIO_Init+0x1e4>
 8003184:	687b      	ldr	r3, [r7, #4]
 8003186:	4a3d      	ldr	r2, [pc, #244]	@ (800327c <HAL_GPIO_Init+0x2cc>)
 8003188:	4293      	cmp	r3, r2
 800318a:	d101      	bne.n	8003190 <HAL_GPIO_Init+0x1e0>
 800318c:	2303      	movs	r3, #3
 800318e:	e006      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 8003190:	2304      	movs	r3, #4
 8003192:	e004      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 8003194:	2302      	movs	r3, #2
 8003196:	e002      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 8003198:	2301      	movs	r3, #1
 800319a:	e000      	b.n	800319e <HAL_GPIO_Init+0x1ee>
 800319c:	2300      	movs	r3, #0
 800319e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80031a0:	f002 0203 	and.w	r2, r2, #3
 80031a4:	0092      	lsls	r2, r2, #2
 80031a6:	4093      	lsls	r3, r2
 80031a8:	68fa      	ldr	r2, [r7, #12]
 80031aa:	4313      	orrs	r3, r2
 80031ac:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80031ae:	492f      	ldr	r1, [pc, #188]	@ (800326c <HAL_GPIO_Init+0x2bc>)
 80031b0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80031b2:	089b      	lsrs	r3, r3, #2
 80031b4:	3302      	adds	r3, #2
 80031b6:	68fa      	ldr	r2, [r7, #12]
 80031b8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031bc:	683b      	ldr	r3, [r7, #0]
 80031be:	685b      	ldr	r3, [r3, #4]
 80031c0:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d006      	beq.n	80031d6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80031c8:	4b2d      	ldr	r3, [pc, #180]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	492c      	ldr	r1, [pc, #176]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 80031ce:	69bb      	ldr	r3, [r7, #24]
 80031d0:	4313      	orrs	r3, r2
 80031d2:	608b      	str	r3, [r1, #8]
 80031d4:	e006      	b.n	80031e4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80031d6:	4b2a      	ldr	r3, [pc, #168]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 80031d8:	689a      	ldr	r2, [r3, #8]
 80031da:	69bb      	ldr	r3, [r7, #24]
 80031dc:	43db      	mvns	r3, r3
 80031de:	4928      	ldr	r1, [pc, #160]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 80031e0:	4013      	ands	r3, r2
 80031e2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031e4:	683b      	ldr	r3, [r7, #0]
 80031e6:	685b      	ldr	r3, [r3, #4]
 80031e8:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d006      	beq.n	80031fe <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031f0:	4b23      	ldr	r3, [pc, #140]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 80031f2:	68da      	ldr	r2, [r3, #12]
 80031f4:	4922      	ldr	r1, [pc, #136]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 80031f6:	69bb      	ldr	r3, [r7, #24]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60cb      	str	r3, [r1, #12]
 80031fc:	e006      	b.n	800320c <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031fe:	4b20      	ldr	r3, [pc, #128]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003200:	68da      	ldr	r2, [r3, #12]
 8003202:	69bb      	ldr	r3, [r7, #24]
 8003204:	43db      	mvns	r3, r3
 8003206:	491e      	ldr	r1, [pc, #120]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003208:	4013      	ands	r3, r2
 800320a:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800320c:	683b      	ldr	r3, [r7, #0]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003214:	2b00      	cmp	r3, #0
 8003216:	d006      	beq.n	8003226 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8003218:	4b19      	ldr	r3, [pc, #100]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 800321a:	685a      	ldr	r2, [r3, #4]
 800321c:	4918      	ldr	r1, [pc, #96]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	4313      	orrs	r3, r2
 8003222:	604b      	str	r3, [r1, #4]
 8003224:	e006      	b.n	8003234 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8003226:	4b16      	ldr	r3, [pc, #88]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003228:	685a      	ldr	r2, [r3, #4]
 800322a:	69bb      	ldr	r3, [r7, #24]
 800322c:	43db      	mvns	r3, r3
 800322e:	4914      	ldr	r1, [pc, #80]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003230:	4013      	ands	r3, r2
 8003232:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	685b      	ldr	r3, [r3, #4]
 8003238:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800323c:	2b00      	cmp	r3, #0
 800323e:	d021      	beq.n	8003284 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8003240:	4b0f      	ldr	r3, [pc, #60]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003242:	681a      	ldr	r2, [r3, #0]
 8003244:	490e      	ldr	r1, [pc, #56]	@ (8003280 <HAL_GPIO_Init+0x2d0>)
 8003246:	69bb      	ldr	r3, [r7, #24]
 8003248:	4313      	orrs	r3, r2
 800324a:	600b      	str	r3, [r1, #0]
 800324c:	e021      	b.n	8003292 <HAL_GPIO_Init+0x2e2>
 800324e:	bf00      	nop
 8003250:	10320000 	.word	0x10320000
 8003254:	10310000 	.word	0x10310000
 8003258:	10220000 	.word	0x10220000
 800325c:	10210000 	.word	0x10210000
 8003260:	10120000 	.word	0x10120000
 8003264:	10110000 	.word	0x10110000
 8003268:	40021000 	.word	0x40021000
 800326c:	40010000 	.word	0x40010000
 8003270:	40010800 	.word	0x40010800
 8003274:	40010c00 	.word	0x40010c00
 8003278:	40011000 	.word	0x40011000
 800327c:	40011400 	.word	0x40011400
 8003280:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8003284:	4b0b      	ldr	r3, [pc, #44]	@ (80032b4 <HAL_GPIO_Init+0x304>)
 8003286:	681a      	ldr	r2, [r3, #0]
 8003288:	69bb      	ldr	r3, [r7, #24]
 800328a:	43db      	mvns	r3, r3
 800328c:	4909      	ldr	r1, [pc, #36]	@ (80032b4 <HAL_GPIO_Init+0x304>)
 800328e:	4013      	ands	r3, r2
 8003290:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8003292:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003294:	3301      	adds	r3, #1
 8003296:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003298:	683b      	ldr	r3, [r7, #0]
 800329a:	681a      	ldr	r2, [r3, #0]
 800329c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800329e:	fa22 f303 	lsr.w	r3, r2, r3
 80032a2:	2b00      	cmp	r3, #0
 80032a4:	f47f ae8e 	bne.w	8002fc4 <HAL_GPIO_Init+0x14>
  }
}
 80032a8:	bf00      	nop
 80032aa:	bf00      	nop
 80032ac:	372c      	adds	r7, #44	@ 0x2c
 80032ae:	46bd      	mov	sp, r7
 80032b0:	bc80      	pop	{r7}
 80032b2:	4770      	bx	lr
 80032b4:	40010400 	.word	0x40010400

080032b8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80032b8:	b480      	push	{r7}
 80032ba:	b085      	sub	sp, #20
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
 80032c0:	460b      	mov	r3, r1
 80032c2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	689a      	ldr	r2, [r3, #8]
 80032c8:	887b      	ldrh	r3, [r7, #2]
 80032ca:	4013      	ands	r3, r2
 80032cc:	2b00      	cmp	r3, #0
 80032ce:	d002      	beq.n	80032d6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80032d0:	2301      	movs	r3, #1
 80032d2:	73fb      	strb	r3, [r7, #15]
 80032d4:	e001      	b.n	80032da <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80032d6:	2300      	movs	r3, #0
 80032d8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80032da:	7bfb      	ldrb	r3, [r7, #15]
}
 80032dc:	4618      	mov	r0, r3
 80032de:	3714      	adds	r7, #20
 80032e0:	46bd      	mov	sp, r7
 80032e2:	bc80      	pop	{r7}
 80032e4:	4770      	bx	lr

080032e6 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80032e6:	b480      	push	{r7}
 80032e8:	b083      	sub	sp, #12
 80032ea:	af00      	add	r7, sp, #0
 80032ec:	6078      	str	r0, [r7, #4]
 80032ee:	460b      	mov	r3, r1
 80032f0:	807b      	strh	r3, [r7, #2]
 80032f2:	4613      	mov	r3, r2
 80032f4:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032f6:	787b      	ldrb	r3, [r7, #1]
 80032f8:	2b00      	cmp	r3, #0
 80032fa:	d003      	beq.n	8003304 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032fc:	887a      	ldrh	r2, [r7, #2]
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8003302:	e003      	b.n	800330c <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8003304:	887b      	ldrh	r3, [r7, #2]
 8003306:	041a      	lsls	r2, r3, #16
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	611a      	str	r2, [r3, #16]
}
 800330c:	bf00      	nop
 800330e:	370c      	adds	r7, #12
 8003310:	46bd      	mov	sp, r7
 8003312:	bc80      	pop	{r7}
 8003314:	4770      	bx	lr
	...

08003318 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003318:	b580      	push	{r7, lr}
 800331a:	b086      	sub	sp, #24
 800331c:	af00      	add	r7, sp, #0
 800331e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003320:	687b      	ldr	r3, [r7, #4]
 8003322:	2b00      	cmp	r3, #0
 8003324:	d101      	bne.n	800332a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003326:	2301      	movs	r3, #1
 8003328:	e272      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800332a:	687b      	ldr	r3, [r7, #4]
 800332c:	681b      	ldr	r3, [r3, #0]
 800332e:	f003 0301 	and.w	r3, r3, #1
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 8087 	beq.w	8003446 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003338:	4b92      	ldr	r3, [pc, #584]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800333a:	685b      	ldr	r3, [r3, #4]
 800333c:	f003 030c 	and.w	r3, r3, #12
 8003340:	2b04      	cmp	r3, #4
 8003342:	d00c      	beq.n	800335e <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8003344:	4b8f      	ldr	r3, [pc, #572]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003346:	685b      	ldr	r3, [r3, #4]
 8003348:	f003 030c 	and.w	r3, r3, #12
 800334c:	2b08      	cmp	r3, #8
 800334e:	d112      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
 8003350:	4b8c      	ldr	r3, [pc, #560]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003352:	685b      	ldr	r3, [r3, #4]
 8003354:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003358:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800335c:	d10b      	bne.n	8003376 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800335e:	4b89      	ldr	r3, [pc, #548]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003366:	2b00      	cmp	r3, #0
 8003368:	d06c      	beq.n	8003444 <HAL_RCC_OscConfig+0x12c>
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	685b      	ldr	r3, [r3, #4]
 800336e:	2b00      	cmp	r3, #0
 8003370:	d168      	bne.n	8003444 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8003372:	2301      	movs	r3, #1
 8003374:	e24c      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003376:	687b      	ldr	r3, [r7, #4]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 800337e:	d106      	bne.n	800338e <HAL_RCC_OscConfig+0x76>
 8003380:	4b80      	ldr	r3, [pc, #512]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003382:	681b      	ldr	r3, [r3, #0]
 8003384:	4a7f      	ldr	r2, [pc, #508]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003386:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800338a:	6013      	str	r3, [r2, #0]
 800338c:	e02e      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	685b      	ldr	r3, [r3, #4]
 8003392:	2b00      	cmp	r3, #0
 8003394:	d10c      	bne.n	80033b0 <HAL_RCC_OscConfig+0x98>
 8003396:	4b7b      	ldr	r3, [pc, #492]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003398:	681b      	ldr	r3, [r3, #0]
 800339a:	4a7a      	ldr	r2, [pc, #488]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800339c:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033a0:	6013      	str	r3, [r2, #0]
 80033a2:	4b78      	ldr	r3, [pc, #480]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	4a77      	ldr	r2, [pc, #476]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033a8:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ac:	6013      	str	r3, [r2, #0]
 80033ae:	e01d      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033b0:	687b      	ldr	r3, [r7, #4]
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80033b8:	d10c      	bne.n	80033d4 <HAL_RCC_OscConfig+0xbc>
 80033ba:	4b72      	ldr	r3, [pc, #456]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033bc:	681b      	ldr	r3, [r3, #0]
 80033be:	4a71      	ldr	r2, [pc, #452]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033c0:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80033c4:	6013      	str	r3, [r2, #0]
 80033c6:	4b6f      	ldr	r3, [pc, #444]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	4a6e      	ldr	r2, [pc, #440]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033cc:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80033d0:	6013      	str	r3, [r2, #0]
 80033d2:	e00b      	b.n	80033ec <HAL_RCC_OscConfig+0xd4>
 80033d4:	4b6b      	ldr	r3, [pc, #428]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033d6:	681b      	ldr	r3, [r3, #0]
 80033d8:	4a6a      	ldr	r2, [pc, #424]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033da:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80033de:	6013      	str	r3, [r2, #0]
 80033e0:	4b68      	ldr	r3, [pc, #416]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033e2:	681b      	ldr	r3, [r3, #0]
 80033e4:	4a67      	ldr	r2, [pc, #412]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80033e6:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033ea:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	685b      	ldr	r3, [r3, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d013      	beq.n	800341c <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033f4:	f7ff fcc4 	bl	8002d80 <HAL_GetTick>
 80033f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033fa:	e008      	b.n	800340e <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033fc:	f7ff fcc0 	bl	8002d80 <HAL_GetTick>
 8003400:	4602      	mov	r2, r0
 8003402:	693b      	ldr	r3, [r7, #16]
 8003404:	1ad3      	subs	r3, r2, r3
 8003406:	2b64      	cmp	r3, #100	@ 0x64
 8003408:	d901      	bls.n	800340e <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 800340a:	2303      	movs	r3, #3
 800340c:	e200      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800340e:	4b5d      	ldr	r3, [pc, #372]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003410:	681b      	ldr	r3, [r3, #0]
 8003412:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003416:	2b00      	cmp	r3, #0
 8003418:	d0f0      	beq.n	80033fc <HAL_RCC_OscConfig+0xe4>
 800341a:	e014      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800341c:	f7ff fcb0 	bl	8002d80 <HAL_GetTick>
 8003420:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003422:	e008      	b.n	8003436 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003424:	f7ff fcac 	bl	8002d80 <HAL_GetTick>
 8003428:	4602      	mov	r2, r0
 800342a:	693b      	ldr	r3, [r7, #16]
 800342c:	1ad3      	subs	r3, r2, r3
 800342e:	2b64      	cmp	r3, #100	@ 0x64
 8003430:	d901      	bls.n	8003436 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8003432:	2303      	movs	r3, #3
 8003434:	e1ec      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003436:	4b53      	ldr	r3, [pc, #332]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800343e:	2b00      	cmp	r3, #0
 8003440:	d1f0      	bne.n	8003424 <HAL_RCC_OscConfig+0x10c>
 8003442:	e000      	b.n	8003446 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003444:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d063      	beq.n	800351a <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8003452:	4b4c      	ldr	r3, [pc, #304]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003454:	685b      	ldr	r3, [r3, #4]
 8003456:	f003 030c 	and.w	r3, r3, #12
 800345a:	2b00      	cmp	r3, #0
 800345c:	d00b      	beq.n	8003476 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 800345e:	4b49      	ldr	r3, [pc, #292]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	f003 030c 	and.w	r3, r3, #12
 8003466:	2b08      	cmp	r3, #8
 8003468:	d11c      	bne.n	80034a4 <HAL_RCC_OscConfig+0x18c>
 800346a:	4b46      	ldr	r3, [pc, #280]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800346c:	685b      	ldr	r3, [r3, #4]
 800346e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003472:	2b00      	cmp	r3, #0
 8003474:	d116      	bne.n	80034a4 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003476:	4b43      	ldr	r3, [pc, #268]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d005      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	691b      	ldr	r3, [r3, #16]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d001      	beq.n	800348e <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 800348a:	2301      	movs	r3, #1
 800348c:	e1c0      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800348e:	4b3d      	ldr	r3, [pc, #244]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003490:	681b      	ldr	r3, [r3, #0]
 8003492:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	695b      	ldr	r3, [r3, #20]
 800349a:	00db      	lsls	r3, r3, #3
 800349c:	4939      	ldr	r1, [pc, #228]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 800349e:	4313      	orrs	r3, r2
 80034a0:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80034a2:	e03a      	b.n	800351a <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	691b      	ldr	r3, [r3, #16]
 80034a8:	2b00      	cmp	r3, #0
 80034aa:	d020      	beq.n	80034ee <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80034ac:	4b36      	ldr	r3, [pc, #216]	@ (8003588 <HAL_RCC_OscConfig+0x270>)
 80034ae:	2201      	movs	r2, #1
 80034b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034b2:	f7ff fc65 	bl	8002d80 <HAL_GetTick>
 80034b6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b8:	e008      	b.n	80034cc <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034ba:	f7ff fc61 	bl	8002d80 <HAL_GetTick>
 80034be:	4602      	mov	r2, r0
 80034c0:	693b      	ldr	r3, [r7, #16]
 80034c2:	1ad3      	subs	r3, r2, r3
 80034c4:	2b02      	cmp	r3, #2
 80034c6:	d901      	bls.n	80034cc <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80034c8:	2303      	movs	r3, #3
 80034ca:	e1a1      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034cc:	4b2d      	ldr	r3, [pc, #180]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034ce:	681b      	ldr	r3, [r3, #0]
 80034d0:	f003 0302 	and.w	r3, r3, #2
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d0f0      	beq.n	80034ba <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80034d8:	4b2a      	ldr	r3, [pc, #168]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	695b      	ldr	r3, [r3, #20]
 80034e4:	00db      	lsls	r3, r3, #3
 80034e6:	4927      	ldr	r1, [pc, #156]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 80034e8:	4313      	orrs	r3, r2
 80034ea:	600b      	str	r3, [r1, #0]
 80034ec:	e015      	b.n	800351a <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034ee:	4b26      	ldr	r3, [pc, #152]	@ (8003588 <HAL_RCC_OscConfig+0x270>)
 80034f0:	2200      	movs	r2, #0
 80034f2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034f4:	f7ff fc44 	bl	8002d80 <HAL_GetTick>
 80034f8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034fa:	e008      	b.n	800350e <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034fc:	f7ff fc40 	bl	8002d80 <HAL_GetTick>
 8003500:	4602      	mov	r2, r0
 8003502:	693b      	ldr	r3, [r7, #16]
 8003504:	1ad3      	subs	r3, r2, r3
 8003506:	2b02      	cmp	r3, #2
 8003508:	d901      	bls.n	800350e <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 800350a:	2303      	movs	r3, #3
 800350c:	e180      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800350e:	4b1d      	ldr	r3, [pc, #116]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	f003 0302 	and.w	r3, r3, #2
 8003516:	2b00      	cmp	r3, #0
 8003518:	d1f0      	bne.n	80034fc <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800351a:	687b      	ldr	r3, [r7, #4]
 800351c:	681b      	ldr	r3, [r3, #0]
 800351e:	f003 0308 	and.w	r3, r3, #8
 8003522:	2b00      	cmp	r3, #0
 8003524:	d03a      	beq.n	800359c <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	699b      	ldr	r3, [r3, #24]
 800352a:	2b00      	cmp	r3, #0
 800352c:	d019      	beq.n	8003562 <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800352e:	4b17      	ldr	r3, [pc, #92]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003530:	2201      	movs	r2, #1
 8003532:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003534:	f7ff fc24 	bl	8002d80 <HAL_GetTick>
 8003538:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800353a:	e008      	b.n	800354e <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800353c:	f7ff fc20 	bl	8002d80 <HAL_GetTick>
 8003540:	4602      	mov	r2, r0
 8003542:	693b      	ldr	r3, [r7, #16]
 8003544:	1ad3      	subs	r3, r2, r3
 8003546:	2b02      	cmp	r3, #2
 8003548:	d901      	bls.n	800354e <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 800354a:	2303      	movs	r3, #3
 800354c:	e160      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800354e:	4b0d      	ldr	r3, [pc, #52]	@ (8003584 <HAL_RCC_OscConfig+0x26c>)
 8003550:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003552:	f003 0302 	and.w	r3, r3, #2
 8003556:	2b00      	cmp	r3, #0
 8003558:	d0f0      	beq.n	800353c <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 800355a:	2001      	movs	r0, #1
 800355c:	f000 fa9c 	bl	8003a98 <RCC_Delay>
 8003560:	e01c      	b.n	800359c <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003562:	4b0a      	ldr	r3, [pc, #40]	@ (800358c <HAL_RCC_OscConfig+0x274>)
 8003564:	2200      	movs	r2, #0
 8003566:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003568:	f7ff fc0a 	bl	8002d80 <HAL_GetTick>
 800356c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800356e:	e00f      	b.n	8003590 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003570:	f7ff fc06 	bl	8002d80 <HAL_GetTick>
 8003574:	4602      	mov	r2, r0
 8003576:	693b      	ldr	r3, [r7, #16]
 8003578:	1ad3      	subs	r3, r2, r3
 800357a:	2b02      	cmp	r3, #2
 800357c:	d908      	bls.n	8003590 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800357e:	2303      	movs	r3, #3
 8003580:	e146      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
 8003582:	bf00      	nop
 8003584:	40021000 	.word	0x40021000
 8003588:	42420000 	.word	0x42420000
 800358c:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003590:	4b92      	ldr	r3, [pc, #584]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003592:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003594:	f003 0302 	and.w	r3, r3, #2
 8003598:	2b00      	cmp	r3, #0
 800359a:	d1e9      	bne.n	8003570 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800359c:	687b      	ldr	r3, [r7, #4]
 800359e:	681b      	ldr	r3, [r3, #0]
 80035a0:	f003 0304 	and.w	r3, r3, #4
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	f000 80a6 	beq.w	80036f6 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80035aa:	2300      	movs	r3, #0
 80035ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80035ae:	4b8b      	ldr	r3, [pc, #556]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035b0:	69db      	ldr	r3, [r3, #28]
 80035b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035b6:	2b00      	cmp	r3, #0
 80035b8:	d10d      	bne.n	80035d6 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80035ba:	4b88      	ldr	r3, [pc, #544]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035bc:	69db      	ldr	r3, [r3, #28]
 80035be:	4a87      	ldr	r2, [pc, #540]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035c0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80035c4:	61d3      	str	r3, [r2, #28]
 80035c6:	4b85      	ldr	r3, [pc, #532]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80035c8:	69db      	ldr	r3, [r3, #28]
 80035ca:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80035ce:	60bb      	str	r3, [r7, #8]
 80035d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80035d2:	2301      	movs	r3, #1
 80035d4:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035d6:	4b82      	ldr	r3, [pc, #520]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d118      	bne.n	8003614 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80035e2:	4b7f      	ldr	r3, [pc, #508]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	4a7e      	ldr	r2, [pc, #504]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 80035e8:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035ee:	f7ff fbc7 	bl	8002d80 <HAL_GetTick>
 80035f2:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035f4:	e008      	b.n	8003608 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035f6:	f7ff fbc3 	bl	8002d80 <HAL_GetTick>
 80035fa:	4602      	mov	r2, r0
 80035fc:	693b      	ldr	r3, [r7, #16]
 80035fe:	1ad3      	subs	r3, r2, r3
 8003600:	2b64      	cmp	r3, #100	@ 0x64
 8003602:	d901      	bls.n	8003608 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003604:	2303      	movs	r3, #3
 8003606:	e103      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003608:	4b75      	ldr	r3, [pc, #468]	@ (80037e0 <HAL_RCC_OscConfig+0x4c8>)
 800360a:	681b      	ldr	r3, [r3, #0]
 800360c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003610:	2b00      	cmp	r3, #0
 8003612:	d0f0      	beq.n	80035f6 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	68db      	ldr	r3, [r3, #12]
 8003618:	2b01      	cmp	r3, #1
 800361a:	d106      	bne.n	800362a <HAL_RCC_OscConfig+0x312>
 800361c:	4b6f      	ldr	r3, [pc, #444]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800361e:	6a1b      	ldr	r3, [r3, #32]
 8003620:	4a6e      	ldr	r2, [pc, #440]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003622:	f043 0301 	orr.w	r3, r3, #1
 8003626:	6213      	str	r3, [r2, #32]
 8003628:	e02d      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800362a:	687b      	ldr	r3, [r7, #4]
 800362c:	68db      	ldr	r3, [r3, #12]
 800362e:	2b00      	cmp	r3, #0
 8003630:	d10c      	bne.n	800364c <HAL_RCC_OscConfig+0x334>
 8003632:	4b6a      	ldr	r3, [pc, #424]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a69      	ldr	r2, [pc, #420]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0301 	bic.w	r3, r3, #1
 800363c:	6213      	str	r3, [r2, #32]
 800363e:	4b67      	ldr	r3, [pc, #412]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003640:	6a1b      	ldr	r3, [r3, #32]
 8003642:	4a66      	ldr	r2, [pc, #408]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003644:	f023 0304 	bic.w	r3, r3, #4
 8003648:	6213      	str	r3, [r2, #32]
 800364a:	e01c      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	68db      	ldr	r3, [r3, #12]
 8003650:	2b05      	cmp	r3, #5
 8003652:	d10c      	bne.n	800366e <HAL_RCC_OscConfig+0x356>
 8003654:	4b61      	ldr	r3, [pc, #388]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003656:	6a1b      	ldr	r3, [r3, #32]
 8003658:	4a60      	ldr	r2, [pc, #384]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800365a:	f043 0304 	orr.w	r3, r3, #4
 800365e:	6213      	str	r3, [r2, #32]
 8003660:	4b5e      	ldr	r3, [pc, #376]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003662:	6a1b      	ldr	r3, [r3, #32]
 8003664:	4a5d      	ldr	r2, [pc, #372]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003666:	f043 0301 	orr.w	r3, r3, #1
 800366a:	6213      	str	r3, [r2, #32]
 800366c:	e00b      	b.n	8003686 <HAL_RCC_OscConfig+0x36e>
 800366e:	4b5b      	ldr	r3, [pc, #364]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003670:	6a1b      	ldr	r3, [r3, #32]
 8003672:	4a5a      	ldr	r2, [pc, #360]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003674:	f023 0301 	bic.w	r3, r3, #1
 8003678:	6213      	str	r3, [r2, #32]
 800367a:	4b58      	ldr	r3, [pc, #352]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800367c:	6a1b      	ldr	r3, [r3, #32]
 800367e:	4a57      	ldr	r2, [pc, #348]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003680:	f023 0304 	bic.w	r3, r3, #4
 8003684:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	68db      	ldr	r3, [r3, #12]
 800368a:	2b00      	cmp	r3, #0
 800368c:	d015      	beq.n	80036ba <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800368e:	f7ff fb77 	bl	8002d80 <HAL_GetTick>
 8003692:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003694:	e00a      	b.n	80036ac <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003696:	f7ff fb73 	bl	8002d80 <HAL_GetTick>
 800369a:	4602      	mov	r2, r0
 800369c:	693b      	ldr	r3, [r7, #16]
 800369e:	1ad3      	subs	r3, r2, r3
 80036a0:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036a4:	4293      	cmp	r3, r2
 80036a6:	d901      	bls.n	80036ac <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80036a8:	2303      	movs	r3, #3
 80036aa:	e0b1      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80036ac:	4b4b      	ldr	r3, [pc, #300]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036ae:	6a1b      	ldr	r3, [r3, #32]
 80036b0:	f003 0302 	and.w	r3, r3, #2
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d0ee      	beq.n	8003696 <HAL_RCC_OscConfig+0x37e>
 80036b8:	e014      	b.n	80036e4 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80036ba:	f7ff fb61 	bl	8002d80 <HAL_GetTick>
 80036be:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036c0:	e00a      	b.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80036c2:	f7ff fb5d 	bl	8002d80 <HAL_GetTick>
 80036c6:	4602      	mov	r2, r0
 80036c8:	693b      	ldr	r3, [r7, #16]
 80036ca:	1ad3      	subs	r3, r2, r3
 80036cc:	f241 3288 	movw	r2, #5000	@ 0x1388
 80036d0:	4293      	cmp	r3, r2
 80036d2:	d901      	bls.n	80036d8 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80036d4:	2303      	movs	r3, #3
 80036d6:	e09b      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80036d8:	4b40      	ldr	r3, [pc, #256]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036da:	6a1b      	ldr	r3, [r3, #32]
 80036dc:	f003 0302 	and.w	r3, r3, #2
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d1ee      	bne.n	80036c2 <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80036e4:	7dfb      	ldrb	r3, [r7, #23]
 80036e6:	2b01      	cmp	r3, #1
 80036e8:	d105      	bne.n	80036f6 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036ea:	4b3c      	ldr	r3, [pc, #240]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036ec:	69db      	ldr	r3, [r3, #28]
 80036ee:	4a3b      	ldr	r2, [pc, #236]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80036f0:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036f4:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	69db      	ldr	r3, [r3, #28]
 80036fa:	2b00      	cmp	r3, #0
 80036fc:	f000 8087 	beq.w	800380e <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8003700:	4b36      	ldr	r3, [pc, #216]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003702:	685b      	ldr	r3, [r3, #4]
 8003704:	f003 030c 	and.w	r3, r3, #12
 8003708:	2b08      	cmp	r3, #8
 800370a:	d061      	beq.n	80037d0 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	69db      	ldr	r3, [r3, #28]
 8003710:	2b02      	cmp	r3, #2
 8003712:	d146      	bne.n	80037a2 <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003714:	4b33      	ldr	r3, [pc, #204]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 8003716:	2200      	movs	r2, #0
 8003718:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800371a:	f7ff fb31 	bl	8002d80 <HAL_GetTick>
 800371e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003720:	e008      	b.n	8003734 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003722:	f7ff fb2d 	bl	8002d80 <HAL_GetTick>
 8003726:	4602      	mov	r2, r0
 8003728:	693b      	ldr	r3, [r7, #16]
 800372a:	1ad3      	subs	r3, r2, r3
 800372c:	2b02      	cmp	r3, #2
 800372e:	d901      	bls.n	8003734 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003730:	2303      	movs	r3, #3
 8003732:	e06d      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003734:	4b29      	ldr	r3, [pc, #164]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800373c:	2b00      	cmp	r3, #0
 800373e:	d1f0      	bne.n	8003722 <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	6a1b      	ldr	r3, [r3, #32]
 8003744:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003748:	d108      	bne.n	800375c <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 800374a:	4b24      	ldr	r3, [pc, #144]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800374c:	685b      	ldr	r3, [r3, #4]
 800374e:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	689b      	ldr	r3, [r3, #8]
 8003756:	4921      	ldr	r1, [pc, #132]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003758:	4313      	orrs	r3, r2
 800375a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800375c:	4b1f      	ldr	r3, [pc, #124]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 800375e:	685b      	ldr	r3, [r3, #4]
 8003760:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	6a19      	ldr	r1, [r3, #32]
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	430b      	orrs	r3, r1
 800376e:	491b      	ldr	r1, [pc, #108]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003770:	4313      	orrs	r3, r2
 8003772:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003774:	4b1b      	ldr	r3, [pc, #108]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 8003776:	2201      	movs	r2, #1
 8003778:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800377a:	f7ff fb01 	bl	8002d80 <HAL_GetTick>
 800377e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003780:	e008      	b.n	8003794 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003782:	f7ff fafd 	bl	8002d80 <HAL_GetTick>
 8003786:	4602      	mov	r2, r0
 8003788:	693b      	ldr	r3, [r7, #16]
 800378a:	1ad3      	subs	r3, r2, r3
 800378c:	2b02      	cmp	r3, #2
 800378e:	d901      	bls.n	8003794 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003790:	2303      	movs	r3, #3
 8003792:	e03d      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003794:	4b11      	ldr	r3, [pc, #68]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800379c:	2b00      	cmp	r3, #0
 800379e:	d0f0      	beq.n	8003782 <HAL_RCC_OscConfig+0x46a>
 80037a0:	e035      	b.n	800380e <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037a2:	4b10      	ldr	r3, [pc, #64]	@ (80037e4 <HAL_RCC_OscConfig+0x4cc>)
 80037a4:	2200      	movs	r2, #0
 80037a6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80037a8:	f7ff faea 	bl	8002d80 <HAL_GetTick>
 80037ac:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037ae:	e008      	b.n	80037c2 <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80037b0:	f7ff fae6 	bl	8002d80 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	693b      	ldr	r3, [r7, #16]
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	2b02      	cmp	r3, #2
 80037bc:	d901      	bls.n	80037c2 <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80037be:	2303      	movs	r3, #3
 80037c0:	e026      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80037c2:	4b06      	ldr	r3, [pc, #24]	@ (80037dc <HAL_RCC_OscConfig+0x4c4>)
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80037ca:	2b00      	cmp	r3, #0
 80037cc:	d1f0      	bne.n	80037b0 <HAL_RCC_OscConfig+0x498>
 80037ce:	e01e      	b.n	800380e <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	69db      	ldr	r3, [r3, #28]
 80037d4:	2b01      	cmp	r3, #1
 80037d6:	d107      	bne.n	80037e8 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80037d8:	2301      	movs	r3, #1
 80037da:	e019      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
 80037dc:	40021000 	.word	0x40021000
 80037e0:	40007000 	.word	0x40007000
 80037e4:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037e8:	4b0b      	ldr	r3, [pc, #44]	@ (8003818 <HAL_RCC_OscConfig+0x500>)
 80037ea:	685b      	ldr	r3, [r3, #4]
 80037ec:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037ee:	68fb      	ldr	r3, [r7, #12]
 80037f0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	6a1b      	ldr	r3, [r3, #32]
 80037f8:	429a      	cmp	r2, r3
 80037fa:	d106      	bne.n	800380a <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037fc:	68fb      	ldr	r3, [r7, #12]
 80037fe:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003806:	429a      	cmp	r2, r3
 8003808:	d001      	beq.n	800380e <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 800380a:	2301      	movs	r3, #1
 800380c:	e000      	b.n	8003810 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800380e:	2300      	movs	r3, #0
}
 8003810:	4618      	mov	r0, r3
 8003812:	3718      	adds	r7, #24
 8003814:	46bd      	mov	sp, r7
 8003816:	bd80      	pop	{r7, pc}
 8003818:	40021000 	.word	0x40021000

0800381c <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800381c:	b580      	push	{r7, lr}
 800381e:	b084      	sub	sp, #16
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	2b00      	cmp	r3, #0
 800382a:	d101      	bne.n	8003830 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800382c:	2301      	movs	r3, #1
 800382e:	e0d0      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003830:	4b6a      	ldr	r3, [pc, #424]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f003 0307 	and.w	r3, r3, #7
 8003838:	683a      	ldr	r2, [r7, #0]
 800383a:	429a      	cmp	r2, r3
 800383c:	d910      	bls.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800383e:	4b67      	ldr	r3, [pc, #412]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003840:	681b      	ldr	r3, [r3, #0]
 8003842:	f023 0207 	bic.w	r2, r3, #7
 8003846:	4965      	ldr	r1, [pc, #404]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003848:	683b      	ldr	r3, [r7, #0]
 800384a:	4313      	orrs	r3, r2
 800384c:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800384e:	4b63      	ldr	r3, [pc, #396]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	f003 0307 	and.w	r3, r3, #7
 8003856:	683a      	ldr	r2, [r7, #0]
 8003858:	429a      	cmp	r2, r3
 800385a:	d001      	beq.n	8003860 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 800385c:	2301      	movs	r3, #1
 800385e:	e0b8      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	f003 0302 	and.w	r3, r3, #2
 8003868:	2b00      	cmp	r3, #0
 800386a:	d020      	beq.n	80038ae <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	f003 0304 	and.w	r3, r3, #4
 8003874:	2b00      	cmp	r3, #0
 8003876:	d005      	beq.n	8003884 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003878:	4b59      	ldr	r3, [pc, #356]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387a:	685b      	ldr	r3, [r3, #4]
 800387c:	4a58      	ldr	r2, [pc, #352]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 8003882:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f003 0308 	and.w	r3, r3, #8
 800388c:	2b00      	cmp	r3, #0
 800388e:	d005      	beq.n	800389c <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003890:	4b53      	ldr	r3, [pc, #332]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003892:	685b      	ldr	r3, [r3, #4]
 8003894:	4a52      	ldr	r2, [pc, #328]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003896:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 800389a:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800389c:	4b50      	ldr	r3, [pc, #320]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	685b      	ldr	r3, [r3, #4]
 80038a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80038a4:	687b      	ldr	r3, [r7, #4]
 80038a6:	689b      	ldr	r3, [r3, #8]
 80038a8:	494d      	ldr	r1, [pc, #308]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	4313      	orrs	r3, r2
 80038ac:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f003 0301 	and.w	r3, r3, #1
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d040      	beq.n	800393c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	2b01      	cmp	r3, #1
 80038c0:	d107      	bne.n	80038d2 <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80038c2:	4b47      	ldr	r3, [pc, #284]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038c4:	681b      	ldr	r3, [r3, #0]
 80038c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d115      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ce:	2301      	movs	r3, #1
 80038d0:	e07f      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80038d2:	687b      	ldr	r3, [r7, #4]
 80038d4:	685b      	ldr	r3, [r3, #4]
 80038d6:	2b02      	cmp	r3, #2
 80038d8:	d107      	bne.n	80038ea <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80038da:	4b41      	ldr	r3, [pc, #260]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038dc:	681b      	ldr	r3, [r3, #0]
 80038de:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d109      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038e6:	2301      	movs	r3, #1
 80038e8:	e073      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038ea:	4b3d      	ldr	r3, [pc, #244]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	f003 0302 	and.w	r3, r3, #2
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e06b      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038fa:	4b39      	ldr	r3, [pc, #228]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80038fc:	685b      	ldr	r3, [r3, #4]
 80038fe:	f023 0203 	bic.w	r2, r3, #3
 8003902:	687b      	ldr	r3, [r7, #4]
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	4936      	ldr	r1, [pc, #216]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003908:	4313      	orrs	r3, r2
 800390a:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800390c:	f7ff fa38 	bl	8002d80 <HAL_GetTick>
 8003910:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003912:	e00a      	b.n	800392a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003914:	f7ff fa34 	bl	8002d80 <HAL_GetTick>
 8003918:	4602      	mov	r2, r0
 800391a:	68fb      	ldr	r3, [r7, #12]
 800391c:	1ad3      	subs	r3, r2, r3
 800391e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003922:	4293      	cmp	r3, r2
 8003924:	d901      	bls.n	800392a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003926:	2303      	movs	r3, #3
 8003928:	e053      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800392a:	4b2d      	ldr	r3, [pc, #180]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800392c:	685b      	ldr	r3, [r3, #4]
 800392e:	f003 020c 	and.w	r2, r3, #12
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	009b      	lsls	r3, r3, #2
 8003938:	429a      	cmp	r2, r3
 800393a:	d1eb      	bne.n	8003914 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 800393c:	4b27      	ldr	r3, [pc, #156]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f003 0307 	and.w	r3, r3, #7
 8003944:	683a      	ldr	r2, [r7, #0]
 8003946:	429a      	cmp	r2, r3
 8003948:	d210      	bcs.n	800396c <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800394a:	4b24      	ldr	r3, [pc, #144]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	f023 0207 	bic.w	r2, r3, #7
 8003952:	4922      	ldr	r1, [pc, #136]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 8003954:	683b      	ldr	r3, [r7, #0]
 8003956:	4313      	orrs	r3, r2
 8003958:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800395a:	4b20      	ldr	r3, [pc, #128]	@ (80039dc <HAL_RCC_ClockConfig+0x1c0>)
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	f003 0307 	and.w	r3, r3, #7
 8003962:	683a      	ldr	r2, [r7, #0]
 8003964:	429a      	cmp	r2, r3
 8003966:	d001      	beq.n	800396c <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003968:	2301      	movs	r3, #1
 800396a:	e032      	b.n	80039d2 <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f003 0304 	and.w	r3, r3, #4
 8003974:	2b00      	cmp	r3, #0
 8003976:	d008      	beq.n	800398a <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003978:	4b19      	ldr	r3, [pc, #100]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 800397a:	685b      	ldr	r3, [r3, #4]
 800397c:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003980:	687b      	ldr	r3, [r7, #4]
 8003982:	68db      	ldr	r3, [r3, #12]
 8003984:	4916      	ldr	r1, [pc, #88]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003986:	4313      	orrs	r3, r2
 8003988:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800398a:	687b      	ldr	r3, [r7, #4]
 800398c:	681b      	ldr	r3, [r3, #0]
 800398e:	f003 0308 	and.w	r3, r3, #8
 8003992:	2b00      	cmp	r3, #0
 8003994:	d009      	beq.n	80039aa <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003996:	4b12      	ldr	r3, [pc, #72]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 8003998:	685b      	ldr	r3, [r3, #4]
 800399a:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800399e:	687b      	ldr	r3, [r7, #4]
 80039a0:	691b      	ldr	r3, [r3, #16]
 80039a2:	00db      	lsls	r3, r3, #3
 80039a4:	490e      	ldr	r1, [pc, #56]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039a6:	4313      	orrs	r3, r2
 80039a8:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80039aa:	f000 f821 	bl	80039f0 <HAL_RCC_GetSysClockFreq>
 80039ae:	4602      	mov	r2, r0
 80039b0:	4b0b      	ldr	r3, [pc, #44]	@ (80039e0 <HAL_RCC_ClockConfig+0x1c4>)
 80039b2:	685b      	ldr	r3, [r3, #4]
 80039b4:	091b      	lsrs	r3, r3, #4
 80039b6:	f003 030f 	and.w	r3, r3, #15
 80039ba:	490a      	ldr	r1, [pc, #40]	@ (80039e4 <HAL_RCC_ClockConfig+0x1c8>)
 80039bc:	5ccb      	ldrb	r3, [r1, r3]
 80039be:	fa22 f303 	lsr.w	r3, r2, r3
 80039c2:	4a09      	ldr	r2, [pc, #36]	@ (80039e8 <HAL_RCC_ClockConfig+0x1cc>)
 80039c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80039c6:	4b09      	ldr	r3, [pc, #36]	@ (80039ec <HAL_RCC_ClockConfig+0x1d0>)
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	4618      	mov	r0, r3
 80039cc:	f7ff f996 	bl	8002cfc <HAL_InitTick>

  return HAL_OK;
 80039d0:	2300      	movs	r3, #0
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}
 80039da:	bf00      	nop
 80039dc:	40022000 	.word	0x40022000
 80039e0:	40021000 	.word	0x40021000
 80039e4:	08005fb8 	.word	0x08005fb8
 80039e8:	200001d8 	.word	0x200001d8
 80039ec:	200001dc 	.word	0x200001dc

080039f0 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039f0:	b480      	push	{r7}
 80039f2:	b087      	sub	sp, #28
 80039f4:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039f6:	2300      	movs	r3, #0
 80039f8:	60fb      	str	r3, [r7, #12]
 80039fa:	2300      	movs	r3, #0
 80039fc:	60bb      	str	r3, [r7, #8]
 80039fe:	2300      	movs	r3, #0
 8003a00:	617b      	str	r3, [r7, #20]
 8003a02:	2300      	movs	r3, #0
 8003a04:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003a06:	2300      	movs	r3, #0
 8003a08:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003a0a:	4b1e      	ldr	r3, [pc, #120]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a0c:	685b      	ldr	r3, [r3, #4]
 8003a0e:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003a10:	68fb      	ldr	r3, [r7, #12]
 8003a12:	f003 030c 	and.w	r3, r3, #12
 8003a16:	2b04      	cmp	r3, #4
 8003a18:	d002      	beq.n	8003a20 <HAL_RCC_GetSysClockFreq+0x30>
 8003a1a:	2b08      	cmp	r3, #8
 8003a1c:	d003      	beq.n	8003a26 <HAL_RCC_GetSysClockFreq+0x36>
 8003a1e:	e027      	b.n	8003a70 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003a20:	4b19      	ldr	r3, [pc, #100]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a22:	613b      	str	r3, [r7, #16]
      break;
 8003a24:	e027      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8003a26:	68fb      	ldr	r3, [r7, #12]
 8003a28:	0c9b      	lsrs	r3, r3, #18
 8003a2a:	f003 030f 	and.w	r3, r3, #15
 8003a2e:	4a17      	ldr	r2, [pc, #92]	@ (8003a8c <HAL_RCC_GetSysClockFreq+0x9c>)
 8003a30:	5cd3      	ldrb	r3, [r2, r3]
 8003a32:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003a3a:	2b00      	cmp	r3, #0
 8003a3c:	d010      	beq.n	8003a60 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003a3e:	4b11      	ldr	r3, [pc, #68]	@ (8003a84 <HAL_RCC_GetSysClockFreq+0x94>)
 8003a40:	685b      	ldr	r3, [r3, #4]
 8003a42:	0c5b      	lsrs	r3, r3, #17
 8003a44:	f003 0301 	and.w	r3, r3, #1
 8003a48:	4a11      	ldr	r2, [pc, #68]	@ (8003a90 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a4a:	5cd3      	ldrb	r3, [r2, r3]
 8003a4c:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	4a0d      	ldr	r2, [pc, #52]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a52:	fb03 f202 	mul.w	r2, r3, r2
 8003a56:	68bb      	ldr	r3, [r7, #8]
 8003a58:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a5c:	617b      	str	r3, [r7, #20]
 8003a5e:	e004      	b.n	8003a6a <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	4a0c      	ldr	r2, [pc, #48]	@ (8003a94 <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a64:	fb02 f303 	mul.w	r3, r2, r3
 8003a68:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a6a:	697b      	ldr	r3, [r7, #20]
 8003a6c:	613b      	str	r3, [r7, #16]
      break;
 8003a6e:	e002      	b.n	8003a76 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a70:	4b05      	ldr	r3, [pc, #20]	@ (8003a88 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a72:	613b      	str	r3, [r7, #16]
      break;
 8003a74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a76:	693b      	ldr	r3, [r7, #16]
}
 8003a78:	4618      	mov	r0, r3
 8003a7a:	371c      	adds	r7, #28
 8003a7c:	46bd      	mov	sp, r7
 8003a7e:	bc80      	pop	{r7}
 8003a80:	4770      	bx	lr
 8003a82:	bf00      	nop
 8003a84:	40021000 	.word	0x40021000
 8003a88:	007a1200 	.word	0x007a1200
 8003a8c:	08005fc8 	.word	0x08005fc8
 8003a90:	08005fd8 	.word	0x08005fd8
 8003a94:	003d0900 	.word	0x003d0900

08003a98 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a98:	b480      	push	{r7}
 8003a9a:	b085      	sub	sp, #20
 8003a9c:	af00      	add	r7, sp, #0
 8003a9e:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003aa0:	4b0a      	ldr	r3, [pc, #40]	@ (8003acc <RCC_Delay+0x34>)
 8003aa2:	681b      	ldr	r3, [r3, #0]
 8003aa4:	4a0a      	ldr	r2, [pc, #40]	@ (8003ad0 <RCC_Delay+0x38>)
 8003aa6:	fba2 2303 	umull	r2, r3, r2, r3
 8003aaa:	0a5b      	lsrs	r3, r3, #9
 8003aac:	687a      	ldr	r2, [r7, #4]
 8003aae:	fb02 f303 	mul.w	r3, r2, r3
 8003ab2:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003ab4:	bf00      	nop
  }
  while (Delay --);
 8003ab6:	68fb      	ldr	r3, [r7, #12]
 8003ab8:	1e5a      	subs	r2, r3, #1
 8003aba:	60fa      	str	r2, [r7, #12]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d1f9      	bne.n	8003ab4 <RCC_Delay+0x1c>
}
 8003ac0:	bf00      	nop
 8003ac2:	bf00      	nop
 8003ac4:	3714      	adds	r7, #20
 8003ac6:	46bd      	mov	sp, r7
 8003ac8:	bc80      	pop	{r7}
 8003aca:	4770      	bx	lr
 8003acc:	200001d8 	.word	0x200001d8
 8003ad0:	10624dd3 	.word	0x10624dd3

08003ad4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	b082      	sub	sp, #8
 8003ad8:	af00      	add	r7, sp, #0
 8003ada:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d101      	bne.n	8003ae6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003ae2:	2301      	movs	r3, #1
 8003ae4:	e076      	b.n	8003bd4 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aea:	2b00      	cmp	r3, #0
 8003aec:	d108      	bne.n	8003b00 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	685b      	ldr	r3, [r3, #4]
 8003af2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003af6:	d009      	beq.n	8003b0c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	61da      	str	r2, [r3, #28]
 8003afe:	e005      	b.n	8003b0c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	2200      	movs	r2, #0
 8003b04:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	2200      	movs	r2, #0
 8003b0a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2200      	movs	r2, #0
 8003b10:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d106      	bne.n	8003b2c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	2200      	movs	r2, #0
 8003b22:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f7fe ff92 	bl	8002a50 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2202      	movs	r2, #2
 8003b30:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	681b      	ldr	r3, [r3, #0]
 8003b38:	681a      	ldr	r2, [r3, #0]
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	681b      	ldr	r3, [r3, #0]
 8003b3e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003b42:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	685b      	ldr	r3, [r3, #4]
 8003b48:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	689b      	ldr	r3, [r3, #8]
 8003b50:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b54:	431a      	orrs	r2, r3
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	68db      	ldr	r3, [r3, #12]
 8003b5a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b5e:	431a      	orrs	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	691b      	ldr	r3, [r3, #16]
 8003b64:	f003 0302 	and.w	r3, r3, #2
 8003b68:	431a      	orrs	r2, r3
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	695b      	ldr	r3, [r3, #20]
 8003b6e:	f003 0301 	and.w	r3, r3, #1
 8003b72:	431a      	orrs	r2, r3
 8003b74:	687b      	ldr	r3, [r7, #4]
 8003b76:	699b      	ldr	r3, [r3, #24]
 8003b78:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b7c:	431a      	orrs	r2, r3
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b86:	431a      	orrs	r2, r3
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	6a1b      	ldr	r3, [r3, #32]
 8003b8c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b90:	ea42 0103 	orr.w	r1, r2, r3
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b98:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	699b      	ldr	r3, [r3, #24]
 8003ba8:	0c1a      	lsrs	r2, r3, #16
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f002 0204 	and.w	r2, r2, #4
 8003bb2:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	69da      	ldr	r2, [r3, #28]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bc2:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003bc4:	687b      	ldr	r3, [r7, #4]
 8003bc6:	2200      	movs	r2, #0
 8003bc8:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2201      	movs	r2, #1
 8003bce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003bd2:	2300      	movs	r3, #0
}
 8003bd4:	4618      	mov	r0, r3
 8003bd6:	3708      	adds	r7, #8
 8003bd8:	46bd      	mov	sp, r7
 8003bda:	bd80      	pop	{r7, pc}

08003bdc <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b082      	sub	sp, #8
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e041      	b.n	8003c72 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d106      	bne.n	8003c08 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2200      	movs	r2, #0
 8003bfe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003c02:	6878      	ldr	r0, [r7, #4]
 8003c04:	f7fe ff62 	bl	8002acc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2202      	movs	r2, #2
 8003c0c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681a      	ldr	r2, [r3, #0]
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	3304      	adds	r3, #4
 8003c18:	4619      	mov	r1, r3
 8003c1a:	4610      	mov	r0, r2
 8003c1c:	f000 fc38 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2201      	movs	r2, #1
 8003c34:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	2201      	movs	r2, #1
 8003c3c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	2201      	movs	r2, #1
 8003c44:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	2201      	movs	r2, #1
 8003c4c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	2201      	movs	r2, #1
 8003c54:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c58:	687b      	ldr	r3, [r7, #4]
 8003c5a:	2201      	movs	r2, #1
 8003c5c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	2201      	movs	r2, #1
 8003c64:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c68:	687b      	ldr	r3, [r7, #4]
 8003c6a:	2201      	movs	r2, #1
 8003c6c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c70:	2300      	movs	r3, #0
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3708      	adds	r7, #8
 8003c76:	46bd      	mov	sp, r7
 8003c78:	bd80      	pop	{r7, pc}
	...

08003c7c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c7c:	b480      	push	{r7}
 8003c7e:	b085      	sub	sp, #20
 8003c80:	af00      	add	r7, sp, #0
 8003c82:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c8a:	b2db      	uxtb	r3, r3
 8003c8c:	2b01      	cmp	r3, #1
 8003c8e:	d001      	beq.n	8003c94 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c90:	2301      	movs	r3, #1
 8003c92:	e03a      	b.n	8003d0a <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2202      	movs	r2, #2
 8003c98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	68da      	ldr	r2, [r3, #12]
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	681b      	ldr	r3, [r3, #0]
 8003ca6:	f042 0201 	orr.w	r2, r2, #1
 8003caa:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	4a18      	ldr	r2, [pc, #96]	@ (8003d14 <HAL_TIM_Base_Start_IT+0x98>)
 8003cb2:	4293      	cmp	r3, r2
 8003cb4:	d00e      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003cbe:	d009      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	4a14      	ldr	r2, [pc, #80]	@ (8003d18 <HAL_TIM_Base_Start_IT+0x9c>)
 8003cc6:	4293      	cmp	r3, r2
 8003cc8:	d004      	beq.n	8003cd4 <HAL_TIM_Base_Start_IT+0x58>
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	4a13      	ldr	r2, [pc, #76]	@ (8003d1c <HAL_TIM_Base_Start_IT+0xa0>)
 8003cd0:	4293      	cmp	r3, r2
 8003cd2:	d111      	bne.n	8003cf8 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	689b      	ldr	r3, [r3, #8]
 8003cda:	f003 0307 	and.w	r3, r3, #7
 8003cde:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2b06      	cmp	r3, #6
 8003ce4:	d010      	beq.n	8003d08 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	681b      	ldr	r3, [r3, #0]
 8003cea:	681a      	ldr	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f042 0201 	orr.w	r2, r2, #1
 8003cf4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cf6:	e007      	b.n	8003d08 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	681a      	ldr	r2, [r3, #0]
 8003cfe:	687b      	ldr	r3, [r7, #4]
 8003d00:	681b      	ldr	r3, [r3, #0]
 8003d02:	f042 0201 	orr.w	r2, r2, #1
 8003d06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003d08:	2300      	movs	r3, #0
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	3714      	adds	r7, #20
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bc80      	pop	{r7}
 8003d12:	4770      	bx	lr
 8003d14:	40012c00 	.word	0x40012c00
 8003d18:	40000400 	.word	0x40000400
 8003d1c:	40000800 	.word	0x40000800

08003d20 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003d20:	b580      	push	{r7, lr}
 8003d22:	b082      	sub	sp, #8
 8003d24:	af00      	add	r7, sp, #0
 8003d26:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	2b00      	cmp	r3, #0
 8003d2c:	d101      	bne.n	8003d32 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d2e:	2301      	movs	r3, #1
 8003d30:	e041      	b.n	8003db6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003d38:	b2db      	uxtb	r3, r3
 8003d3a:	2b00      	cmp	r3, #0
 8003d3c:	d106      	bne.n	8003d4c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2200      	movs	r2, #0
 8003d42:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d46:	6878      	ldr	r0, [r7, #4]
 8003d48:	f000 f839 	bl	8003dbe <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2202      	movs	r2, #2
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681a      	ldr	r2, [r3, #0]
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	3304      	adds	r3, #4
 8003d5c:	4619      	mov	r1, r3
 8003d5e:	4610      	mov	r0, r2
 8003d60:	f000 fb96 	bl	8004490 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d8c:	687b      	ldr	r3, [r7, #4]
 8003d8e:	2201      	movs	r2, #1
 8003d90:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	2201      	movs	r2, #1
 8003d98:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	2201      	movs	r2, #1
 8003da0:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	2201      	movs	r2, #1
 8003da8:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	2201      	movs	r2, #1
 8003db0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003db4:	2300      	movs	r3, #0
}
 8003db6:	4618      	mov	r0, r3
 8003db8:	3708      	adds	r7, #8
 8003dba:	46bd      	mov	sp, r7
 8003dbc:	bd80      	pop	{r7, pc}

08003dbe <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003dbe:	b480      	push	{r7}
 8003dc0:	b083      	sub	sp, #12
 8003dc2:	af00      	add	r7, sp, #0
 8003dc4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003dc6:	bf00      	nop
 8003dc8:	370c      	adds	r7, #12
 8003dca:	46bd      	mov	sp, r7
 8003dcc:	bc80      	pop	{r7}
 8003dce:	4770      	bx	lr

08003dd0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dd0:	b580      	push	{r7, lr}
 8003dd2:	b084      	sub	sp, #16
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	6078      	str	r0, [r7, #4]
 8003dd8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003dda:	683b      	ldr	r3, [r7, #0]
 8003ddc:	2b00      	cmp	r3, #0
 8003dde:	d109      	bne.n	8003df4 <HAL_TIM_PWM_Start+0x24>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	e022      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003df4:	683b      	ldr	r3, [r7, #0]
 8003df6:	2b04      	cmp	r3, #4
 8003df8:	d109      	bne.n	8003e0e <HAL_TIM_PWM_Start+0x3e>
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	2b01      	cmp	r3, #1
 8003e04:	bf14      	ite	ne
 8003e06:	2301      	movne	r3, #1
 8003e08:	2300      	moveq	r3, #0
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	e015      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e0e:	683b      	ldr	r3, [r7, #0]
 8003e10:	2b08      	cmp	r3, #8
 8003e12:	d109      	bne.n	8003e28 <HAL_TIM_PWM_Start+0x58>
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003e1a:	b2db      	uxtb	r3, r3
 8003e1c:	2b01      	cmp	r3, #1
 8003e1e:	bf14      	ite	ne
 8003e20:	2301      	movne	r3, #1
 8003e22:	2300      	moveq	r3, #0
 8003e24:	b2db      	uxtb	r3, r3
 8003e26:	e008      	b.n	8003e3a <HAL_TIM_PWM_Start+0x6a>
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003e2e:	b2db      	uxtb	r3, r3
 8003e30:	2b01      	cmp	r3, #1
 8003e32:	bf14      	ite	ne
 8003e34:	2301      	movne	r3, #1
 8003e36:	2300      	moveq	r3, #0
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b00      	cmp	r3, #0
 8003e3c:	d001      	beq.n	8003e42 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e3e:	2301      	movs	r3, #1
 8003e40:	e05e      	b.n	8003f00 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e42:	683b      	ldr	r3, [r7, #0]
 8003e44:	2b00      	cmp	r3, #0
 8003e46:	d104      	bne.n	8003e52 <HAL_TIM_PWM_Start+0x82>
 8003e48:	687b      	ldr	r3, [r7, #4]
 8003e4a:	2202      	movs	r2, #2
 8003e4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e50:	e013      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	2b04      	cmp	r3, #4
 8003e56:	d104      	bne.n	8003e62 <HAL_TIM_PWM_Start+0x92>
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e60:	e00b      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e62:	683b      	ldr	r3, [r7, #0]
 8003e64:	2b08      	cmp	r3, #8
 8003e66:	d104      	bne.n	8003e72 <HAL_TIM_PWM_Start+0xa2>
 8003e68:	687b      	ldr	r3, [r7, #4]
 8003e6a:	2202      	movs	r2, #2
 8003e6c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e70:	e003      	b.n	8003e7a <HAL_TIM_PWM_Start+0xaa>
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	2202      	movs	r2, #2
 8003e76:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	2201      	movs	r2, #1
 8003e80:	6839      	ldr	r1, [r7, #0]
 8003e82:	4618      	mov	r0, r3
 8003e84:	f000 fd84 	bl	8004990 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	4a1e      	ldr	r2, [pc, #120]	@ (8003f08 <HAL_TIM_PWM_Start+0x138>)
 8003e8e:	4293      	cmp	r3, r2
 8003e90:	d107      	bne.n	8003ea2 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	681b      	ldr	r3, [r3, #0]
 8003e9c:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003ea0:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003ea2:	687b      	ldr	r3, [r7, #4]
 8003ea4:	681b      	ldr	r3, [r3, #0]
 8003ea6:	4a18      	ldr	r2, [pc, #96]	@ (8003f08 <HAL_TIM_PWM_Start+0x138>)
 8003ea8:	4293      	cmp	r3, r2
 8003eaa:	d00e      	beq.n	8003eca <HAL_TIM_PWM_Start+0xfa>
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003eb4:	d009      	beq.n	8003eca <HAL_TIM_PWM_Start+0xfa>
 8003eb6:	687b      	ldr	r3, [r7, #4]
 8003eb8:	681b      	ldr	r3, [r3, #0]
 8003eba:	4a14      	ldr	r2, [pc, #80]	@ (8003f0c <HAL_TIM_PWM_Start+0x13c>)
 8003ebc:	4293      	cmp	r3, r2
 8003ebe:	d004      	beq.n	8003eca <HAL_TIM_PWM_Start+0xfa>
 8003ec0:	687b      	ldr	r3, [r7, #4]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	4a12      	ldr	r2, [pc, #72]	@ (8003f10 <HAL_TIM_PWM_Start+0x140>)
 8003ec6:	4293      	cmp	r3, r2
 8003ec8:	d111      	bne.n	8003eee <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003eca:	687b      	ldr	r3, [r7, #4]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	689b      	ldr	r3, [r3, #8]
 8003ed0:	f003 0307 	and.w	r3, r3, #7
 8003ed4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	2b06      	cmp	r3, #6
 8003eda:	d010      	beq.n	8003efe <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0201 	orr.w	r2, r2, #1
 8003eea:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eec:	e007      	b.n	8003efe <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	681a      	ldr	r2, [r3, #0]
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f042 0201 	orr.w	r2, r2, #1
 8003efc:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003efe:	2300      	movs	r3, #0
}
 8003f00:	4618      	mov	r0, r3
 8003f02:	3710      	adds	r7, #16
 8003f04:	46bd      	mov	sp, r7
 8003f06:	bd80      	pop	{r7, pc}
 8003f08:	40012c00 	.word	0x40012c00
 8003f0c:	40000400 	.word	0x40000400
 8003f10:	40000800 	.word	0x40000800

08003f14 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b082      	sub	sp, #8
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	691b      	ldr	r3, [r3, #16]
 8003f22:	f003 0302 	and.w	r3, r3, #2
 8003f26:	2b02      	cmp	r3, #2
 8003f28:	d122      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68db      	ldr	r3, [r3, #12]
 8003f30:	f003 0302 	and.w	r3, r3, #2
 8003f34:	2b02      	cmp	r3, #2
 8003f36:	d11b      	bne.n	8003f70 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f38:	687b      	ldr	r3, [r7, #4]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	f06f 0202 	mvn.w	r2, #2
 8003f40:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f42:	687b      	ldr	r3, [r7, #4]
 8003f44:	2201      	movs	r2, #1
 8003f46:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	699b      	ldr	r3, [r3, #24]
 8003f4e:	f003 0303 	and.w	r3, r3, #3
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d003      	beq.n	8003f5e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f56:	6878      	ldr	r0, [r7, #4]
 8003f58:	f000 fa7f 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003f5c:	e005      	b.n	8003f6a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f5e:	6878      	ldr	r0, [r7, #4]
 8003f60:	f000 fa72 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f64:	6878      	ldr	r0, [r7, #4]
 8003f66:	f000 fa81 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2200      	movs	r2, #0
 8003f6e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	691b      	ldr	r3, [r3, #16]
 8003f76:	f003 0304 	and.w	r3, r3, #4
 8003f7a:	2b04      	cmp	r3, #4
 8003f7c:	d122      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f7e:	687b      	ldr	r3, [r7, #4]
 8003f80:	681b      	ldr	r3, [r3, #0]
 8003f82:	68db      	ldr	r3, [r3, #12]
 8003f84:	f003 0304 	and.w	r3, r3, #4
 8003f88:	2b04      	cmp	r3, #4
 8003f8a:	d11b      	bne.n	8003fc4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f06f 0204 	mvn.w	r2, #4
 8003f94:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2202      	movs	r2, #2
 8003f9a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	699b      	ldr	r3, [r3, #24]
 8003fa2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003fa6:	2b00      	cmp	r3, #0
 8003fa8:	d003      	beq.n	8003fb2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003faa:	6878      	ldr	r0, [r7, #4]
 8003fac:	f000 fa55 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8003fb0:	e005      	b.n	8003fbe <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fb2:	6878      	ldr	r0, [r7, #4]
 8003fb4:	f000 fa48 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fb8:	6878      	ldr	r0, [r7, #4]
 8003fba:	f000 fa57 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2200      	movs	r2, #0
 8003fc2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	691b      	ldr	r3, [r3, #16]
 8003fca:	f003 0308 	and.w	r3, r3, #8
 8003fce:	2b08      	cmp	r3, #8
 8003fd0:	d122      	bne.n	8004018 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	68db      	ldr	r3, [r3, #12]
 8003fd8:	f003 0308 	and.w	r3, r3, #8
 8003fdc:	2b08      	cmp	r3, #8
 8003fde:	d11b      	bne.n	8004018 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	681b      	ldr	r3, [r3, #0]
 8003fe4:	f06f 0208 	mvn.w	r2, #8
 8003fe8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	2204      	movs	r2, #4
 8003fee:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003ff0:	687b      	ldr	r3, [r7, #4]
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	69db      	ldr	r3, [r3, #28]
 8003ff6:	f003 0303 	and.w	r3, r3, #3
 8003ffa:	2b00      	cmp	r3, #0
 8003ffc:	d003      	beq.n	8004006 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003ffe:	6878      	ldr	r0, [r7, #4]
 8004000:	f000 fa2b 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004004:	e005      	b.n	8004012 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004006:	6878      	ldr	r0, [r7, #4]
 8004008:	f000 fa1e 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800400c:	6878      	ldr	r0, [r7, #4]
 800400e:	f000 fa2d 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2200      	movs	r2, #0
 8004016:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	691b      	ldr	r3, [r3, #16]
 800401e:	f003 0310 	and.w	r3, r3, #16
 8004022:	2b10      	cmp	r3, #16
 8004024:	d122      	bne.n	800406c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	68db      	ldr	r3, [r3, #12]
 800402c:	f003 0310 	and.w	r3, r3, #16
 8004030:	2b10      	cmp	r3, #16
 8004032:	d11b      	bne.n	800406c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	681b      	ldr	r3, [r3, #0]
 8004038:	f06f 0210 	mvn.w	r2, #16
 800403c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2208      	movs	r2, #8
 8004042:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	69db      	ldr	r3, [r3, #28]
 800404a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800404e:	2b00      	cmp	r3, #0
 8004050:	d003      	beq.n	800405a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004052:	6878      	ldr	r0, [r7, #4]
 8004054:	f000 fa01 	bl	800445a <HAL_TIM_IC_CaptureCallback>
 8004058:	e005      	b.n	8004066 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800405a:	6878      	ldr	r0, [r7, #4]
 800405c:	f000 f9f4 	bl	8004448 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004060:	6878      	ldr	r0, [r7, #4]
 8004062:	f000 fa03 	bl	800446c <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2200      	movs	r2, #0
 800406a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	691b      	ldr	r3, [r3, #16]
 8004072:	f003 0301 	and.w	r3, r3, #1
 8004076:	2b01      	cmp	r3, #1
 8004078:	d10e      	bne.n	8004098 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	68db      	ldr	r3, [r3, #12]
 8004080:	f003 0301 	and.w	r3, r3, #1
 8004084:	2b01      	cmp	r3, #1
 8004086:	d107      	bne.n	8004098 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004088:	687b      	ldr	r3, [r7, #4]
 800408a:	681b      	ldr	r3, [r3, #0]
 800408c:	f06f 0201 	mvn.w	r2, #1
 8004090:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8004092:	6878      	ldr	r0, [r7, #4]
 8004094:	f000 f9cf 	bl	8004436 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	691b      	ldr	r3, [r3, #16]
 800409e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040a2:	2b80      	cmp	r3, #128	@ 0x80
 80040a4:	d10e      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	681b      	ldr	r3, [r3, #0]
 80040aa:	68db      	ldr	r3, [r3, #12]
 80040ac:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80040b0:	2b80      	cmp	r3, #128	@ 0x80
 80040b2:	d107      	bne.n	80040c4 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80040bc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040be:	6878      	ldr	r0, [r7, #4]
 80040c0:	f000 fcf1 	bl	8004aa6 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	691b      	ldr	r3, [r3, #16]
 80040ca:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040ce:	2b40      	cmp	r3, #64	@ 0x40
 80040d0:	d10e      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040d2:	687b      	ldr	r3, [r7, #4]
 80040d4:	681b      	ldr	r3, [r3, #0]
 80040d6:	68db      	ldr	r3, [r3, #12]
 80040d8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80040dc:	2b40      	cmp	r3, #64	@ 0x40
 80040de:	d107      	bne.n	80040f0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040e8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040ea:	6878      	ldr	r0, [r7, #4]
 80040ec:	f000 f9c7 	bl	800447e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	681b      	ldr	r3, [r3, #0]
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	f003 0320 	and.w	r3, r3, #32
 80040fa:	2b20      	cmp	r3, #32
 80040fc:	d10e      	bne.n	800411c <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	68db      	ldr	r3, [r3, #12]
 8004104:	f003 0320 	and.w	r3, r3, #32
 8004108:	2b20      	cmp	r3, #32
 800410a:	d107      	bne.n	800411c <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	f06f 0220 	mvn.w	r2, #32
 8004114:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8004116:	6878      	ldr	r0, [r7, #4]
 8004118:	f000 fcbc 	bl	8004a94 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800411c:	bf00      	nop
 800411e:	3708      	adds	r7, #8
 8004120:	46bd      	mov	sp, r7
 8004122:	bd80      	pop	{r7, pc}

08004124 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8004124:	b580      	push	{r7, lr}
 8004126:	b086      	sub	sp, #24
 8004128:	af00      	add	r7, sp, #0
 800412a:	60f8      	str	r0, [r7, #12]
 800412c:	60b9      	str	r1, [r7, #8]
 800412e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004130:	2300      	movs	r3, #0
 8004132:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800413a:	2b01      	cmp	r3, #1
 800413c:	d101      	bne.n	8004142 <HAL_TIM_PWM_ConfigChannel+0x1e>
 800413e:	2302      	movs	r3, #2
 8004140:	e0ae      	b.n	80042a0 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8004142:	68fb      	ldr	r3, [r7, #12]
 8004144:	2201      	movs	r2, #1
 8004146:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	2b0c      	cmp	r3, #12
 800414e:	f200 809f 	bhi.w	8004290 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8004152:	a201      	add	r2, pc, #4	@ (adr r2, 8004158 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8004154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004158:	0800418d 	.word	0x0800418d
 800415c:	08004291 	.word	0x08004291
 8004160:	08004291 	.word	0x08004291
 8004164:	08004291 	.word	0x08004291
 8004168:	080041cd 	.word	0x080041cd
 800416c:	08004291 	.word	0x08004291
 8004170:	08004291 	.word	0x08004291
 8004174:	08004291 	.word	0x08004291
 8004178:	0800420f 	.word	0x0800420f
 800417c:	08004291 	.word	0x08004291
 8004180:	08004291 	.word	0x08004291
 8004184:	08004291 	.word	0x08004291
 8004188:	0800424f 	.word	0x0800424f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800418c:	68fb      	ldr	r3, [r7, #12]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	68b9      	ldr	r1, [r7, #8]
 8004192:	4618      	mov	r0, r3
 8004194:	f000 f9de 	bl	8004554 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004198:	68fb      	ldr	r3, [r7, #12]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	699a      	ldr	r2, [r3, #24]
 800419e:	68fb      	ldr	r3, [r7, #12]
 80041a0:	681b      	ldr	r3, [r3, #0]
 80041a2:	f042 0208 	orr.w	r2, r2, #8
 80041a6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	681b      	ldr	r3, [r3, #0]
 80041ac:	699a      	ldr	r2, [r3, #24]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	f022 0204 	bic.w	r2, r2, #4
 80041b6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041b8:	68fb      	ldr	r3, [r7, #12]
 80041ba:	681b      	ldr	r3, [r3, #0]
 80041bc:	6999      	ldr	r1, [r3, #24]
 80041be:	68bb      	ldr	r3, [r7, #8]
 80041c0:	691a      	ldr	r2, [r3, #16]
 80041c2:	68fb      	ldr	r3, [r7, #12]
 80041c4:	681b      	ldr	r3, [r3, #0]
 80041c6:	430a      	orrs	r2, r1
 80041c8:	619a      	str	r2, [r3, #24]
      break;
 80041ca:	e064      	b.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041cc:	68fb      	ldr	r3, [r7, #12]
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	68b9      	ldr	r1, [r7, #8]
 80041d2:	4618      	mov	r0, r3
 80041d4:	f000 fa24 	bl	8004620 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	699a      	ldr	r2, [r3, #24]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80041e6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699a      	ldr	r2, [r3, #24]
 80041ee:	68fb      	ldr	r3, [r7, #12]
 80041f0:	681b      	ldr	r3, [r3, #0]
 80041f2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041f6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	6999      	ldr	r1, [r3, #24]
 80041fe:	68bb      	ldr	r3, [r7, #8]
 8004200:	691b      	ldr	r3, [r3, #16]
 8004202:	021a      	lsls	r2, r3, #8
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	430a      	orrs	r2, r1
 800420a:	619a      	str	r2, [r3, #24]
      break;
 800420c:	e043      	b.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800420e:	68fb      	ldr	r3, [r7, #12]
 8004210:	681b      	ldr	r3, [r3, #0]
 8004212:	68b9      	ldr	r1, [r7, #8]
 8004214:	4618      	mov	r0, r3
 8004216:	f000 fa6d 	bl	80046f4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800421a:	68fb      	ldr	r3, [r7, #12]
 800421c:	681b      	ldr	r3, [r3, #0]
 800421e:	69da      	ldr	r2, [r3, #28]
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	f042 0208 	orr.w	r2, r2, #8
 8004228:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	681b      	ldr	r3, [r3, #0]
 800422e:	69da      	ldr	r2, [r3, #28]
 8004230:	68fb      	ldr	r3, [r7, #12]
 8004232:	681b      	ldr	r3, [r3, #0]
 8004234:	f022 0204 	bic.w	r2, r2, #4
 8004238:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	69d9      	ldr	r1, [r3, #28]
 8004240:	68bb      	ldr	r3, [r7, #8]
 8004242:	691a      	ldr	r2, [r3, #16]
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	430a      	orrs	r2, r1
 800424a:	61da      	str	r2, [r3, #28]
      break;
 800424c:	e023      	b.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	68b9      	ldr	r1, [r7, #8]
 8004254:	4618      	mov	r0, r3
 8004256:	f000 fab7 	bl	80047c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	69da      	ldr	r2, [r3, #28]
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004268:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	681b      	ldr	r3, [r3, #0]
 800426e:	69da      	ldr	r2, [r3, #28]
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	681b      	ldr	r3, [r3, #0]
 8004274:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004278:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800427a:	68fb      	ldr	r3, [r7, #12]
 800427c:	681b      	ldr	r3, [r3, #0]
 800427e:	69d9      	ldr	r1, [r3, #28]
 8004280:	68bb      	ldr	r3, [r7, #8]
 8004282:	691b      	ldr	r3, [r3, #16]
 8004284:	021a      	lsls	r2, r3, #8
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	430a      	orrs	r2, r1
 800428c:	61da      	str	r2, [r3, #28]
      break;
 800428e:	e002      	b.n	8004296 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004290:	2301      	movs	r3, #1
 8004292:	75fb      	strb	r3, [r7, #23]
      break;
 8004294:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	2200      	movs	r2, #0
 800429a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800429e:	7dfb      	ldrb	r3, [r7, #23]
}
 80042a0:	4618      	mov	r0, r3
 80042a2:	3718      	adds	r7, #24
 80042a4:	46bd      	mov	sp, r7
 80042a6:	bd80      	pop	{r7, pc}

080042a8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b084      	sub	sp, #16
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	6078      	str	r0, [r7, #4]
 80042b0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042b2:	2300      	movs	r3, #0
 80042b4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80042bc:	2b01      	cmp	r3, #1
 80042be:	d101      	bne.n	80042c4 <HAL_TIM_ConfigClockSource+0x1c>
 80042c0:	2302      	movs	r3, #2
 80042c2:	e0b4      	b.n	800442e <HAL_TIM_ConfigClockSource+0x186>
 80042c4:	687b      	ldr	r3, [r7, #4]
 80042c6:	2201      	movs	r2, #1
 80042c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	2202      	movs	r2, #2
 80042d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	689b      	ldr	r3, [r3, #8]
 80042da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80042dc:	68bb      	ldr	r3, [r7, #8]
 80042de:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80042e2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80042e4:	68bb      	ldr	r3, [r7, #8]
 80042e6:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042ea:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	681b      	ldr	r3, [r3, #0]
 80042f0:	68ba      	ldr	r2, [r7, #8]
 80042f2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042fc:	d03e      	beq.n	800437c <HAL_TIM_ConfigClockSource+0xd4>
 80042fe:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8004302:	f200 8087 	bhi.w	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 8004306:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800430a:	f000 8086 	beq.w	800441a <HAL_TIM_ConfigClockSource+0x172>
 800430e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8004312:	d87f      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 8004314:	2b70      	cmp	r3, #112	@ 0x70
 8004316:	d01a      	beq.n	800434e <HAL_TIM_ConfigClockSource+0xa6>
 8004318:	2b70      	cmp	r3, #112	@ 0x70
 800431a:	d87b      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 800431c:	2b60      	cmp	r3, #96	@ 0x60
 800431e:	d050      	beq.n	80043c2 <HAL_TIM_ConfigClockSource+0x11a>
 8004320:	2b60      	cmp	r3, #96	@ 0x60
 8004322:	d877      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 8004324:	2b50      	cmp	r3, #80	@ 0x50
 8004326:	d03c      	beq.n	80043a2 <HAL_TIM_ConfigClockSource+0xfa>
 8004328:	2b50      	cmp	r3, #80	@ 0x50
 800432a:	d873      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 800432c:	2b40      	cmp	r3, #64	@ 0x40
 800432e:	d058      	beq.n	80043e2 <HAL_TIM_ConfigClockSource+0x13a>
 8004330:	2b40      	cmp	r3, #64	@ 0x40
 8004332:	d86f      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 8004334:	2b30      	cmp	r3, #48	@ 0x30
 8004336:	d064      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x15a>
 8004338:	2b30      	cmp	r3, #48	@ 0x30
 800433a:	d86b      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b20      	cmp	r3, #32
 800433e:	d060      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x15a>
 8004340:	2b20      	cmp	r3, #32
 8004342:	d867      	bhi.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b00      	cmp	r3, #0
 8004346:	d05c      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x15a>
 8004348:	2b10      	cmp	r3, #16
 800434a:	d05a      	beq.n	8004402 <HAL_TIM_ConfigClockSource+0x15a>
 800434c:	e062      	b.n	8004414 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004352:	683b      	ldr	r3, [r7, #0]
 8004354:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004356:	683b      	ldr	r3, [r7, #0]
 8004358:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800435e:	f000 faf8 	bl	8004952 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	681b      	ldr	r3, [r3, #0]
 8004366:	689b      	ldr	r3, [r3, #8]
 8004368:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800436a:	68bb      	ldr	r3, [r7, #8]
 800436c:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004370:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	681b      	ldr	r3, [r3, #0]
 8004376:	68ba      	ldr	r2, [r7, #8]
 8004378:	609a      	str	r2, [r3, #8]
      break;
 800437a:	e04f      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004380:	683b      	ldr	r3, [r7, #0]
 8004382:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004388:	683b      	ldr	r3, [r7, #0]
 800438a:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 800438c:	f000 fae1 	bl	8004952 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	689a      	ldr	r2, [r3, #8]
 8004396:	687b      	ldr	r3, [r7, #4]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 800439e:	609a      	str	r2, [r3, #8]
      break;
 80043a0:	e03c      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043a6:	683b      	ldr	r3, [r7, #0]
 80043a8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043aa:	683b      	ldr	r3, [r7, #0]
 80043ac:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ae:	461a      	mov	r2, r3
 80043b0:	f000 fa58 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043b4:	687b      	ldr	r3, [r7, #4]
 80043b6:	681b      	ldr	r3, [r3, #0]
 80043b8:	2150      	movs	r1, #80	@ 0x50
 80043ba:	4618      	mov	r0, r3
 80043bc:	f000 faaf 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043c0:	e02c      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043c6:	683b      	ldr	r3, [r7, #0]
 80043c8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ca:	683b      	ldr	r3, [r7, #0]
 80043cc:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ce:	461a      	mov	r2, r3
 80043d0:	f000 fa76 	bl	80048c0 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	681b      	ldr	r3, [r3, #0]
 80043d8:	2160      	movs	r1, #96	@ 0x60
 80043da:	4618      	mov	r0, r3
 80043dc:	f000 fa9f 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 80043e0:	e01c      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043e2:	687b      	ldr	r3, [r7, #4]
 80043e4:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80043e6:	683b      	ldr	r3, [r7, #0]
 80043e8:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043ea:	683b      	ldr	r3, [r7, #0]
 80043ec:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ee:	461a      	mov	r2, r3
 80043f0:	f000 fa38 	bl	8004864 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	2140      	movs	r1, #64	@ 0x40
 80043fa:	4618      	mov	r0, r3
 80043fc:	f000 fa8f 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 8004400:	e00c      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681a      	ldr	r2, [r3, #0]
 8004406:	683b      	ldr	r3, [r7, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	4619      	mov	r1, r3
 800440c:	4610      	mov	r0, r2
 800440e:	f000 fa86 	bl	800491e <TIM_ITRx_SetConfig>
      break;
 8004412:	e003      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8004414:	2301      	movs	r3, #1
 8004416:	73fb      	strb	r3, [r7, #15]
      break;
 8004418:	e000      	b.n	800441c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800441a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	2201      	movs	r2, #1
 8004420:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 800442c:	7bfb      	ldrb	r3, [r7, #15]
}
 800442e:	4618      	mov	r0, r3
 8004430:	3710      	adds	r7, #16
 8004432:	46bd      	mov	sp, r7
 8004434:	bd80      	pop	{r7, pc}

08004436 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004448:	b480      	push	{r7}
 800444a:	b083      	sub	sp, #12
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004450:	bf00      	nop
 8004452:	370c      	adds	r7, #12
 8004454:	46bd      	mov	sp, r7
 8004456:	bc80      	pop	{r7}
 8004458:	4770      	bx	lr

0800445a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800445a:	b480      	push	{r7}
 800445c:	b083      	sub	sp, #12
 800445e:	af00      	add	r7, sp, #0
 8004460:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8004462:	bf00      	nop
 8004464:	370c      	adds	r7, #12
 8004466:	46bd      	mov	sp, r7
 8004468:	bc80      	pop	{r7}
 800446a:	4770      	bx	lr

0800446c <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800446c:	b480      	push	{r7}
 800446e:	b083      	sub	sp, #12
 8004470:	af00      	add	r7, sp, #0
 8004472:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004474:	bf00      	nop
 8004476:	370c      	adds	r7, #12
 8004478:	46bd      	mov	sp, r7
 800447a:	bc80      	pop	{r7}
 800447c:	4770      	bx	lr

0800447e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800447e:	b480      	push	{r7}
 8004480:	b083      	sub	sp, #12
 8004482:	af00      	add	r7, sp, #0
 8004484:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004486:	bf00      	nop
 8004488:	370c      	adds	r7, #12
 800448a:	46bd      	mov	sp, r7
 800448c:	bc80      	pop	{r7}
 800448e:	4770      	bx	lr

08004490 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004490:	b480      	push	{r7}
 8004492:	b085      	sub	sp, #20
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	681b      	ldr	r3, [r3, #0]
 800449e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	4a29      	ldr	r2, [pc, #164]	@ (8004548 <TIM_Base_SetConfig+0xb8>)
 80044a4:	4293      	cmp	r3, r2
 80044a6:	d00b      	beq.n	80044c0 <TIM_Base_SetConfig+0x30>
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044ae:	d007      	beq.n	80044c0 <TIM_Base_SetConfig+0x30>
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	4a26      	ldr	r2, [pc, #152]	@ (800454c <TIM_Base_SetConfig+0xbc>)
 80044b4:	4293      	cmp	r3, r2
 80044b6:	d003      	beq.n	80044c0 <TIM_Base_SetConfig+0x30>
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	4a25      	ldr	r2, [pc, #148]	@ (8004550 <TIM_Base_SetConfig+0xc0>)
 80044bc:	4293      	cmp	r3, r2
 80044be:	d108      	bne.n	80044d2 <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	685b      	ldr	r3, [r3, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	4a1c      	ldr	r2, [pc, #112]	@ (8004548 <TIM_Base_SetConfig+0xb8>)
 80044d6:	4293      	cmp	r3, r2
 80044d8:	d00b      	beq.n	80044f2 <TIM_Base_SetConfig+0x62>
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80044e0:	d007      	beq.n	80044f2 <TIM_Base_SetConfig+0x62>
 80044e2:	687b      	ldr	r3, [r7, #4]
 80044e4:	4a19      	ldr	r2, [pc, #100]	@ (800454c <TIM_Base_SetConfig+0xbc>)
 80044e6:	4293      	cmp	r3, r2
 80044e8:	d003      	beq.n	80044f2 <TIM_Base_SetConfig+0x62>
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	4a18      	ldr	r2, [pc, #96]	@ (8004550 <TIM_Base_SetConfig+0xc0>)
 80044ee:	4293      	cmp	r3, r2
 80044f0:	d108      	bne.n	8004504 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044f2:	68fb      	ldr	r3, [r7, #12]
 80044f4:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044f8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	68db      	ldr	r3, [r3, #12]
 80044fe:	68fa      	ldr	r2, [r7, #12]
 8004500:	4313      	orrs	r3, r2
 8004502:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004504:	68fb      	ldr	r3, [r7, #12]
 8004506:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 800450a:	683b      	ldr	r3, [r7, #0]
 800450c:	695b      	ldr	r3, [r3, #20]
 800450e:	4313      	orrs	r3, r2
 8004510:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	68fa      	ldr	r2, [r7, #12]
 8004516:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004518:	683b      	ldr	r3, [r7, #0]
 800451a:	689a      	ldr	r2, [r3, #8]
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004520:	683b      	ldr	r3, [r7, #0]
 8004522:	681a      	ldr	r2, [r3, #0]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	4a07      	ldr	r2, [pc, #28]	@ (8004548 <TIM_Base_SetConfig+0xb8>)
 800452c:	4293      	cmp	r3, r2
 800452e:	d103      	bne.n	8004538 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8004530:	683b      	ldr	r3, [r7, #0]
 8004532:	691a      	ldr	r2, [r3, #16]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	2201      	movs	r2, #1
 800453c:	615a      	str	r2, [r3, #20]
}
 800453e:	bf00      	nop
 8004540:	3714      	adds	r7, #20
 8004542:	46bd      	mov	sp, r7
 8004544:	bc80      	pop	{r7}
 8004546:	4770      	bx	lr
 8004548:	40012c00 	.word	0x40012c00
 800454c:	40000400 	.word	0x40000400
 8004550:	40000800 	.word	0x40000800

08004554 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004554:	b480      	push	{r7}
 8004556:	b087      	sub	sp, #28
 8004558:	af00      	add	r7, sp, #0
 800455a:	6078      	str	r0, [r7, #4]
 800455c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	6a1b      	ldr	r3, [r3, #32]
 8004562:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6a1b      	ldr	r3, [r3, #32]
 8004568:	f023 0201 	bic.w	r2, r3, #1
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	685b      	ldr	r3, [r3, #4]
 8004574:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	699b      	ldr	r3, [r3, #24]
 800457a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004582:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004584:	68fb      	ldr	r3, [r7, #12]
 8004586:	f023 0303 	bic.w	r3, r3, #3
 800458a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800458c:	683b      	ldr	r3, [r7, #0]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	68fa      	ldr	r2, [r7, #12]
 8004592:	4313      	orrs	r3, r2
 8004594:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004596:	697b      	ldr	r3, [r7, #20]
 8004598:	f023 0302 	bic.w	r3, r3, #2
 800459c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800459e:	683b      	ldr	r3, [r7, #0]
 80045a0:	689b      	ldr	r3, [r3, #8]
 80045a2:	697a      	ldr	r2, [r7, #20]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80045a8:	687b      	ldr	r3, [r7, #4]
 80045aa:	4a1c      	ldr	r2, [pc, #112]	@ (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ac:	4293      	cmp	r3, r2
 80045ae:	d10c      	bne.n	80045ca <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80045b0:	697b      	ldr	r3, [r7, #20]
 80045b2:	f023 0308 	bic.w	r3, r3, #8
 80045b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80045b8:	683b      	ldr	r3, [r7, #0]
 80045ba:	68db      	ldr	r3, [r3, #12]
 80045bc:	697a      	ldr	r2, [r7, #20]
 80045be:	4313      	orrs	r3, r2
 80045c0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80045c2:	697b      	ldr	r3, [r7, #20]
 80045c4:	f023 0304 	bic.w	r3, r3, #4
 80045c8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	4a13      	ldr	r2, [pc, #76]	@ (800461c <TIM_OC1_SetConfig+0xc8>)
 80045ce:	4293      	cmp	r3, r2
 80045d0:	d111      	bne.n	80045f6 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80045d2:	693b      	ldr	r3, [r7, #16]
 80045d4:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80045d8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80045da:	693b      	ldr	r3, [r7, #16]
 80045dc:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80045e0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80045e2:	683b      	ldr	r3, [r7, #0]
 80045e4:	695b      	ldr	r3, [r3, #20]
 80045e6:	693a      	ldr	r2, [r7, #16]
 80045e8:	4313      	orrs	r3, r2
 80045ea:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045ec:	683b      	ldr	r3, [r7, #0]
 80045ee:	699b      	ldr	r3, [r3, #24]
 80045f0:	693a      	ldr	r2, [r7, #16]
 80045f2:	4313      	orrs	r3, r2
 80045f4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045f6:	687b      	ldr	r3, [r7, #4]
 80045f8:	693a      	ldr	r2, [r7, #16]
 80045fa:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	68fa      	ldr	r2, [r7, #12]
 8004600:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8004602:	683b      	ldr	r3, [r7, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800460a:	687b      	ldr	r3, [r7, #4]
 800460c:	697a      	ldr	r2, [r7, #20]
 800460e:	621a      	str	r2, [r3, #32]
}
 8004610:	bf00      	nop
 8004612:	371c      	adds	r7, #28
 8004614:	46bd      	mov	sp, r7
 8004616:	bc80      	pop	{r7}
 8004618:	4770      	bx	lr
 800461a:	bf00      	nop
 800461c:	40012c00 	.word	0x40012c00

08004620 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004620:	b480      	push	{r7}
 8004622:	b087      	sub	sp, #28
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
 8004628:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	6a1b      	ldr	r3, [r3, #32]
 800462e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	6a1b      	ldr	r3, [r3, #32]
 8004634:	f023 0210 	bic.w	r2, r3, #16
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	685b      	ldr	r3, [r3, #4]
 8004640:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	699b      	ldr	r3, [r3, #24]
 8004646:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004648:	68fb      	ldr	r3, [r7, #12]
 800464a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800464e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004656:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004658:	683b      	ldr	r3, [r7, #0]
 800465a:	681b      	ldr	r3, [r3, #0]
 800465c:	021b      	lsls	r3, r3, #8
 800465e:	68fa      	ldr	r2, [r7, #12]
 8004660:	4313      	orrs	r3, r2
 8004662:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004664:	697b      	ldr	r3, [r7, #20]
 8004666:	f023 0320 	bic.w	r3, r3, #32
 800466a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	689b      	ldr	r3, [r3, #8]
 8004670:	011b      	lsls	r3, r3, #4
 8004672:	697a      	ldr	r2, [r7, #20]
 8004674:	4313      	orrs	r3, r2
 8004676:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004678:	687b      	ldr	r3, [r7, #4]
 800467a:	4a1d      	ldr	r2, [pc, #116]	@ (80046f0 <TIM_OC2_SetConfig+0xd0>)
 800467c:	4293      	cmp	r3, r2
 800467e:	d10d      	bne.n	800469c <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004680:	697b      	ldr	r3, [r7, #20]
 8004682:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004686:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004688:	683b      	ldr	r3, [r7, #0]
 800468a:	68db      	ldr	r3, [r3, #12]
 800468c:	011b      	lsls	r3, r3, #4
 800468e:	697a      	ldr	r2, [r7, #20]
 8004690:	4313      	orrs	r3, r2
 8004692:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004694:	697b      	ldr	r3, [r7, #20]
 8004696:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 800469a:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	4a14      	ldr	r2, [pc, #80]	@ (80046f0 <TIM_OC2_SetConfig+0xd0>)
 80046a0:	4293      	cmp	r3, r2
 80046a2:	d113      	bne.n	80046cc <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80046a4:	693b      	ldr	r3, [r7, #16]
 80046a6:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80046aa:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80046ac:	693b      	ldr	r3, [r7, #16]
 80046ae:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80046b2:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80046b4:	683b      	ldr	r3, [r7, #0]
 80046b6:	695b      	ldr	r3, [r3, #20]
 80046b8:	009b      	lsls	r3, r3, #2
 80046ba:	693a      	ldr	r2, [r7, #16]
 80046bc:	4313      	orrs	r3, r2
 80046be:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80046c0:	683b      	ldr	r3, [r7, #0]
 80046c2:	699b      	ldr	r3, [r3, #24]
 80046c4:	009b      	lsls	r3, r3, #2
 80046c6:	693a      	ldr	r2, [r7, #16]
 80046c8:	4313      	orrs	r3, r2
 80046ca:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	693a      	ldr	r2, [r7, #16]
 80046d0:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046d2:	687b      	ldr	r3, [r7, #4]
 80046d4:	68fa      	ldr	r2, [r7, #12]
 80046d6:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80046d8:	683b      	ldr	r3, [r7, #0]
 80046da:	685a      	ldr	r2, [r3, #4]
 80046dc:	687b      	ldr	r3, [r7, #4]
 80046de:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	697a      	ldr	r2, [r7, #20]
 80046e4:	621a      	str	r2, [r3, #32]
}
 80046e6:	bf00      	nop
 80046e8:	371c      	adds	r7, #28
 80046ea:	46bd      	mov	sp, r7
 80046ec:	bc80      	pop	{r7}
 80046ee:	4770      	bx	lr
 80046f0:	40012c00 	.word	0x40012c00

080046f4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046f4:	b480      	push	{r7}
 80046f6:	b087      	sub	sp, #28
 80046f8:	af00      	add	r7, sp, #0
 80046fa:	6078      	str	r0, [r7, #4]
 80046fc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	6a1b      	ldr	r3, [r3, #32]
 8004702:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004704:	687b      	ldr	r3, [r7, #4]
 8004706:	6a1b      	ldr	r3, [r3, #32]
 8004708:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 800470c:	687b      	ldr	r3, [r7, #4]
 800470e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	685b      	ldr	r3, [r3, #4]
 8004714:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	69db      	ldr	r3, [r3, #28]
 800471a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004722:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8004724:	68fb      	ldr	r3, [r7, #12]
 8004726:	f023 0303 	bic.w	r3, r3, #3
 800472a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800472c:	683b      	ldr	r3, [r7, #0]
 800472e:	681b      	ldr	r3, [r3, #0]
 8004730:	68fa      	ldr	r2, [r7, #12]
 8004732:	4313      	orrs	r3, r2
 8004734:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8004736:	697b      	ldr	r3, [r7, #20]
 8004738:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800473c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	689b      	ldr	r3, [r3, #8]
 8004742:	021b      	lsls	r3, r3, #8
 8004744:	697a      	ldr	r2, [r7, #20]
 8004746:	4313      	orrs	r3, r2
 8004748:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a1d      	ldr	r2, [pc, #116]	@ (80047c4 <TIM_OC3_SetConfig+0xd0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d10d      	bne.n	800476e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004752:	697b      	ldr	r3, [r7, #20]
 8004754:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004758:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800475a:	683b      	ldr	r3, [r7, #0]
 800475c:	68db      	ldr	r3, [r3, #12]
 800475e:	021b      	lsls	r3, r3, #8
 8004760:	697a      	ldr	r2, [r7, #20]
 8004762:	4313      	orrs	r3, r2
 8004764:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004766:	697b      	ldr	r3, [r7, #20]
 8004768:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 800476c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	4a14      	ldr	r2, [pc, #80]	@ (80047c4 <TIM_OC3_SetConfig+0xd0>)
 8004772:	4293      	cmp	r3, r2
 8004774:	d113      	bne.n	800479e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004776:	693b      	ldr	r3, [r7, #16]
 8004778:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800477c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800477e:	693b      	ldr	r3, [r7, #16]
 8004780:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004784:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004786:	683b      	ldr	r3, [r7, #0]
 8004788:	695b      	ldr	r3, [r3, #20]
 800478a:	011b      	lsls	r3, r3, #4
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	4313      	orrs	r3, r2
 8004790:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8004792:	683b      	ldr	r3, [r7, #0]
 8004794:	699b      	ldr	r3, [r3, #24]
 8004796:	011b      	lsls	r3, r3, #4
 8004798:	693a      	ldr	r2, [r7, #16]
 800479a:	4313      	orrs	r3, r2
 800479c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	693a      	ldr	r2, [r7, #16]
 80047a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	68fa      	ldr	r2, [r7, #12]
 80047a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80047aa:	683b      	ldr	r3, [r7, #0]
 80047ac:	685a      	ldr	r2, [r3, #4]
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	697a      	ldr	r2, [r7, #20]
 80047b6:	621a      	str	r2, [r3, #32]
}
 80047b8:	bf00      	nop
 80047ba:	371c      	adds	r7, #28
 80047bc:	46bd      	mov	sp, r7
 80047be:	bc80      	pop	{r7}
 80047c0:	4770      	bx	lr
 80047c2:	bf00      	nop
 80047c4:	40012c00 	.word	0x40012c00

080047c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80047c8:	b480      	push	{r7}
 80047ca:	b087      	sub	sp, #28
 80047cc:	af00      	add	r7, sp, #0
 80047ce:	6078      	str	r0, [r7, #4]
 80047d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6a1b      	ldr	r3, [r3, #32]
 80047dc:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047e4:	687b      	ldr	r3, [r7, #4]
 80047e6:	685b      	ldr	r3, [r3, #4]
 80047e8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	69db      	ldr	r3, [r3, #28]
 80047ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047f0:	68fb      	ldr	r3, [r7, #12]
 80047f2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047f8:	68fb      	ldr	r3, [r7, #12]
 80047fa:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	021b      	lsls	r3, r3, #8
 8004806:	68fa      	ldr	r2, [r7, #12]
 8004808:	4313      	orrs	r3, r2
 800480a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800480c:	693b      	ldr	r3, [r7, #16]
 800480e:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004812:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8004814:	683b      	ldr	r3, [r7, #0]
 8004816:	689b      	ldr	r3, [r3, #8]
 8004818:	031b      	lsls	r3, r3, #12
 800481a:	693a      	ldr	r2, [r7, #16]
 800481c:	4313      	orrs	r3, r2
 800481e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004820:	687b      	ldr	r3, [r7, #4]
 8004822:	4a0f      	ldr	r2, [pc, #60]	@ (8004860 <TIM_OC4_SetConfig+0x98>)
 8004824:	4293      	cmp	r3, r2
 8004826:	d109      	bne.n	800483c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8004828:	697b      	ldr	r3, [r7, #20]
 800482a:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 800482e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004830:	683b      	ldr	r3, [r7, #0]
 8004832:	695b      	ldr	r3, [r3, #20]
 8004834:	019b      	lsls	r3, r3, #6
 8004836:	697a      	ldr	r2, [r7, #20]
 8004838:	4313      	orrs	r3, r2
 800483a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	68fa      	ldr	r2, [r7, #12]
 8004846:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	685a      	ldr	r2, [r3, #4]
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	693a      	ldr	r2, [r7, #16]
 8004854:	621a      	str	r2, [r3, #32]
}
 8004856:	bf00      	nop
 8004858:	371c      	adds	r7, #28
 800485a:	46bd      	mov	sp, r7
 800485c:	bc80      	pop	{r7}
 800485e:	4770      	bx	lr
 8004860:	40012c00 	.word	0x40012c00

08004864 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004864:	b480      	push	{r7}
 8004866:	b087      	sub	sp, #28
 8004868:	af00      	add	r7, sp, #0
 800486a:	60f8      	str	r0, [r7, #12]
 800486c:	60b9      	str	r1, [r7, #8]
 800486e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	6a1b      	ldr	r3, [r3, #32]
 8004874:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004876:	68fb      	ldr	r3, [r7, #12]
 8004878:	6a1b      	ldr	r3, [r3, #32]
 800487a:	f023 0201 	bic.w	r2, r3, #1
 800487e:	68fb      	ldr	r3, [r7, #12]
 8004880:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004882:	68fb      	ldr	r3, [r7, #12]
 8004884:	699b      	ldr	r3, [r3, #24]
 8004886:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004888:	693b      	ldr	r3, [r7, #16]
 800488a:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800488e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	011b      	lsls	r3, r3, #4
 8004894:	693a      	ldr	r2, [r7, #16]
 8004896:	4313      	orrs	r3, r2
 8004898:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800489a:	697b      	ldr	r3, [r7, #20]
 800489c:	f023 030a 	bic.w	r3, r3, #10
 80048a0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80048a2:	697a      	ldr	r2, [r7, #20]
 80048a4:	68bb      	ldr	r3, [r7, #8]
 80048a6:	4313      	orrs	r3, r2
 80048a8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	693a      	ldr	r2, [r7, #16]
 80048ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	697a      	ldr	r2, [r7, #20]
 80048b4:	621a      	str	r2, [r3, #32]
}
 80048b6:	bf00      	nop
 80048b8:	371c      	adds	r7, #28
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bc80      	pop	{r7}
 80048be:	4770      	bx	lr

080048c0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80048c0:	b480      	push	{r7}
 80048c2:	b087      	sub	sp, #28
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	60f8      	str	r0, [r7, #12]
 80048c8:	60b9      	str	r1, [r7, #8]
 80048ca:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	6a1b      	ldr	r3, [r3, #32]
 80048d0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80048d2:	68fb      	ldr	r3, [r7, #12]
 80048d4:	6a1b      	ldr	r3, [r3, #32]
 80048d6:	f023 0210 	bic.w	r2, r3, #16
 80048da:	68fb      	ldr	r3, [r7, #12]
 80048dc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	699b      	ldr	r3, [r3, #24]
 80048e2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80048e4:	693b      	ldr	r3, [r7, #16]
 80048e6:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048ea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	031b      	lsls	r3, r3, #12
 80048f0:	693a      	ldr	r2, [r7, #16]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048f6:	697b      	ldr	r3, [r7, #20]
 80048f8:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048fc:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048fe:	68bb      	ldr	r3, [r7, #8]
 8004900:	011b      	lsls	r3, r3, #4
 8004902:	697a      	ldr	r2, [r7, #20]
 8004904:	4313      	orrs	r3, r2
 8004906:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	693a      	ldr	r2, [r7, #16]
 800490c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	697a      	ldr	r2, [r7, #20]
 8004912:	621a      	str	r2, [r3, #32]
}
 8004914:	bf00      	nop
 8004916:	371c      	adds	r7, #28
 8004918:	46bd      	mov	sp, r7
 800491a:	bc80      	pop	{r7}
 800491c:	4770      	bx	lr

0800491e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800491e:	b480      	push	{r7}
 8004920:	b085      	sub	sp, #20
 8004922:	af00      	add	r7, sp, #0
 8004924:	6078      	str	r0, [r7, #4]
 8004926:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	689b      	ldr	r3, [r3, #8]
 800492c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800492e:	68fb      	ldr	r3, [r7, #12]
 8004930:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004934:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004936:	683a      	ldr	r2, [r7, #0]
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	4313      	orrs	r3, r2
 800493c:	f043 0307 	orr.w	r3, r3, #7
 8004940:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	68fa      	ldr	r2, [r7, #12]
 8004946:	609a      	str	r2, [r3, #8]
}
 8004948:	bf00      	nop
 800494a:	3714      	adds	r7, #20
 800494c:	46bd      	mov	sp, r7
 800494e:	bc80      	pop	{r7}
 8004950:	4770      	bx	lr

08004952 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004952:	b480      	push	{r7}
 8004954:	b087      	sub	sp, #28
 8004956:	af00      	add	r7, sp, #0
 8004958:	60f8      	str	r0, [r7, #12]
 800495a:	60b9      	str	r1, [r7, #8]
 800495c:	607a      	str	r2, [r7, #4]
 800495e:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004960:	68fb      	ldr	r3, [r7, #12]
 8004962:	689b      	ldr	r3, [r3, #8]
 8004964:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800496c:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800496e:	683b      	ldr	r3, [r7, #0]
 8004970:	021a      	lsls	r2, r3, #8
 8004972:	687b      	ldr	r3, [r7, #4]
 8004974:	431a      	orrs	r2, r3
 8004976:	68bb      	ldr	r3, [r7, #8]
 8004978:	4313      	orrs	r3, r2
 800497a:	697a      	ldr	r2, [r7, #20]
 800497c:	4313      	orrs	r3, r2
 800497e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004980:	68fb      	ldr	r3, [r7, #12]
 8004982:	697a      	ldr	r2, [r7, #20]
 8004984:	609a      	str	r2, [r3, #8]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004990:	b480      	push	{r7}
 8004992:	b087      	sub	sp, #28
 8004994:	af00      	add	r7, sp, #0
 8004996:	60f8      	str	r0, [r7, #12]
 8004998:	60b9      	str	r1, [r7, #8]
 800499a:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800499c:	68bb      	ldr	r3, [r7, #8]
 800499e:	f003 031f 	and.w	r3, r3, #31
 80049a2:	2201      	movs	r2, #1
 80049a4:	fa02 f303 	lsl.w	r3, r2, r3
 80049a8:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80049aa:	68fb      	ldr	r3, [r7, #12]
 80049ac:	6a1a      	ldr	r2, [r3, #32]
 80049ae:	697b      	ldr	r3, [r7, #20]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	401a      	ands	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80049b8:	68fb      	ldr	r3, [r7, #12]
 80049ba:	6a1a      	ldr	r2, [r3, #32]
 80049bc:	68bb      	ldr	r3, [r7, #8]
 80049be:	f003 031f 	and.w	r3, r3, #31
 80049c2:	6879      	ldr	r1, [r7, #4]
 80049c4:	fa01 f303 	lsl.w	r3, r1, r3
 80049c8:	431a      	orrs	r2, r3
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	621a      	str	r2, [r3, #32]
}
 80049ce:	bf00      	nop
 80049d0:	371c      	adds	r7, #28
 80049d2:	46bd      	mov	sp, r7
 80049d4:	bc80      	pop	{r7}
 80049d6:	4770      	bx	lr

080049d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80049d8:	b480      	push	{r7}
 80049da:	b085      	sub	sp, #20
 80049dc:	af00      	add	r7, sp, #0
 80049de:	6078      	str	r0, [r7, #4]
 80049e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049e8:	2b01      	cmp	r3, #1
 80049ea:	d101      	bne.n	80049f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049ec:	2302      	movs	r3, #2
 80049ee:	e046      	b.n	8004a7e <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2201      	movs	r2, #1
 80049f4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	2202      	movs	r2, #2
 80049fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685b      	ldr	r3, [r3, #4]
 8004a06:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	689b      	ldr	r3, [r3, #8]
 8004a0e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004a10:	68fb      	ldr	r3, [r7, #12]
 8004a12:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004a16:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004a18:	683b      	ldr	r3, [r7, #0]
 8004a1a:	681b      	ldr	r3, [r3, #0]
 8004a1c:	68fa      	ldr	r2, [r7, #12]
 8004a1e:	4313      	orrs	r3, r2
 8004a20:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	681b      	ldr	r3, [r3, #0]
 8004a26:	68fa      	ldr	r2, [r7, #12]
 8004a28:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a16      	ldr	r2, [pc, #88]	@ (8004a88 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8004a30:	4293      	cmp	r3, r2
 8004a32:	d00e      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	681b      	ldr	r3, [r3, #0]
 8004a38:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004a3c:	d009      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	681b      	ldr	r3, [r3, #0]
 8004a42:	4a12      	ldr	r2, [pc, #72]	@ (8004a8c <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8004a44:	4293      	cmp	r3, r2
 8004a46:	d004      	beq.n	8004a52 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	681b      	ldr	r3, [r3, #0]
 8004a4c:	4a10      	ldr	r2, [pc, #64]	@ (8004a90 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a4e:	4293      	cmp	r3, r2
 8004a50:	d10c      	bne.n	8004a6c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a52:	68bb      	ldr	r3, [r7, #8]
 8004a54:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a58:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a5a:	683b      	ldr	r3, [r7, #0]
 8004a5c:	685b      	ldr	r3, [r3, #4]
 8004a5e:	68ba      	ldr	r2, [r7, #8]
 8004a60:	4313      	orrs	r3, r2
 8004a62:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	681b      	ldr	r3, [r3, #0]
 8004a68:	68ba      	ldr	r2, [r7, #8]
 8004a6a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	2201      	movs	r2, #1
 8004a70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a74:	687b      	ldr	r3, [r7, #4]
 8004a76:	2200      	movs	r2, #0
 8004a78:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
}
 8004a7e:	4618      	mov	r0, r3
 8004a80:	3714      	adds	r7, #20
 8004a82:	46bd      	mov	sp, r7
 8004a84:	bc80      	pop	{r7}
 8004a86:	4770      	bx	lr
 8004a88:	40012c00 	.word	0x40012c00
 8004a8c:	40000400 	.word	0x40000400
 8004a90:	40000800 	.word	0x40000800

08004a94 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a94:	b480      	push	{r7}
 8004a96:	b083      	sub	sp, #12
 8004a98:	af00      	add	r7, sp, #0
 8004a9a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a9c:	bf00      	nop
 8004a9e:	370c      	adds	r7, #12
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	bc80      	pop	{r7}
 8004aa4:	4770      	bx	lr

08004aa6 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004aa6:	b480      	push	{r7}
 8004aa8:	b083      	sub	sp, #12
 8004aaa:	af00      	add	r7, sp, #0
 8004aac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004aae:	bf00      	nop
 8004ab0:	370c      	adds	r7, #12
 8004ab2:	46bd      	mov	sp, r7
 8004ab4:	bc80      	pop	{r7}
 8004ab6:	4770      	bx	lr

08004ab8 <memset>:
 8004ab8:	4603      	mov	r3, r0
 8004aba:	4402      	add	r2, r0
 8004abc:	4293      	cmp	r3, r2
 8004abe:	d100      	bne.n	8004ac2 <memset+0xa>
 8004ac0:	4770      	bx	lr
 8004ac2:	f803 1b01 	strb.w	r1, [r3], #1
 8004ac6:	e7f9      	b.n	8004abc <memset+0x4>

08004ac8 <__libc_init_array>:
 8004ac8:	b570      	push	{r4, r5, r6, lr}
 8004aca:	2600      	movs	r6, #0
 8004acc:	4d0c      	ldr	r5, [pc, #48]	@ (8004b00 <__libc_init_array+0x38>)
 8004ace:	4c0d      	ldr	r4, [pc, #52]	@ (8004b04 <__libc_init_array+0x3c>)
 8004ad0:	1b64      	subs	r4, r4, r5
 8004ad2:	10a4      	asrs	r4, r4, #2
 8004ad4:	42a6      	cmp	r6, r4
 8004ad6:	d109      	bne.n	8004aec <__libc_init_array+0x24>
 8004ad8:	f001 fa62 	bl	8005fa0 <_init>
 8004adc:	2600      	movs	r6, #0
 8004ade:	4d0a      	ldr	r5, [pc, #40]	@ (8004b08 <__libc_init_array+0x40>)
 8004ae0:	4c0a      	ldr	r4, [pc, #40]	@ (8004b0c <__libc_init_array+0x44>)
 8004ae2:	1b64      	subs	r4, r4, r5
 8004ae4:	10a4      	asrs	r4, r4, #2
 8004ae6:	42a6      	cmp	r6, r4
 8004ae8:	d105      	bne.n	8004af6 <__libc_init_array+0x2e>
 8004aea:	bd70      	pop	{r4, r5, r6, pc}
 8004aec:	f855 3b04 	ldr.w	r3, [r5], #4
 8004af0:	4798      	blx	r3
 8004af2:	3601      	adds	r6, #1
 8004af4:	e7ee      	b.n	8004ad4 <__libc_init_array+0xc>
 8004af6:	f855 3b04 	ldr.w	r3, [r5], #4
 8004afa:	4798      	blx	r3
 8004afc:	3601      	adds	r6, #1
 8004afe:	e7f2      	b.n	8004ae6 <__libc_init_array+0x1e>
 8004b00:	080061b8 	.word	0x080061b8
 8004b04:	080061b8 	.word	0x080061b8
 8004b08:	080061b8 	.word	0x080061b8
 8004b0c:	080061bc 	.word	0x080061bc

08004b10 <cos>:
 8004b10:	b530      	push	{r4, r5, lr}
 8004b12:	4d20      	ldr	r5, [pc, #128]	@ (8004b94 <cos+0x84>)
 8004b14:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004b18:	42ac      	cmp	r4, r5
 8004b1a:	4602      	mov	r2, r0
 8004b1c:	460b      	mov	r3, r1
 8004b1e:	b087      	sub	sp, #28
 8004b20:	d806      	bhi.n	8004b30 <cos+0x20>
 8004b22:	2200      	movs	r2, #0
 8004b24:	2300      	movs	r3, #0
 8004b26:	b007      	add	sp, #28
 8004b28:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004b2c:	f000 b8a8 	b.w	8004c80 <__kernel_cos>
 8004b30:	4d19      	ldr	r5, [pc, #100]	@ (8004b98 <cos+0x88>)
 8004b32:	42ac      	cmp	r4, r5
 8004b34:	d903      	bls.n	8004b3e <cos+0x2e>
 8004b36:	f7fb fb0f 	bl	8000158 <__aeabi_dsub>
 8004b3a:	b007      	add	sp, #28
 8004b3c:	bd30      	pop	{r4, r5, pc}
 8004b3e:	aa02      	add	r2, sp, #8
 8004b40:	f000 fc16 	bl	8005370 <__ieee754_rem_pio2>
 8004b44:	f000 0003 	and.w	r0, r0, #3
 8004b48:	2801      	cmp	r0, #1
 8004b4a:	d009      	beq.n	8004b60 <cos+0x50>
 8004b4c:	2802      	cmp	r0, #2
 8004b4e:	d011      	beq.n	8004b74 <cos+0x64>
 8004b50:	b9b8      	cbnz	r0, 8004b82 <cos+0x72>
 8004b52:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b56:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b5a:	f000 f891 	bl	8004c80 <__kernel_cos>
 8004b5e:	e7ec      	b.n	8004b3a <cos+0x2a>
 8004b60:	9000      	str	r0, [sp, #0]
 8004b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b6a:	f000 f949 	bl	8004e00 <__kernel_sin>
 8004b6e:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004b72:	e7e2      	b.n	8004b3a <cos+0x2a>
 8004b74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b7c:	f000 f880 	bl	8004c80 <__kernel_cos>
 8004b80:	e7f5      	b.n	8004b6e <cos+0x5e>
 8004b82:	2301      	movs	r3, #1
 8004b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b88:	9300      	str	r3, [sp, #0]
 8004b8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b8e:	f000 f937 	bl	8004e00 <__kernel_sin>
 8004b92:	e7d2      	b.n	8004b3a <cos+0x2a>
 8004b94:	3fe921fb 	.word	0x3fe921fb
 8004b98:	7fefffff 	.word	0x7fefffff

08004b9c <sin>:
 8004b9c:	b530      	push	{r4, r5, lr}
 8004b9e:	4d20      	ldr	r5, [pc, #128]	@ (8004c20 <sin+0x84>)
 8004ba0:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004ba4:	42ac      	cmp	r4, r5
 8004ba6:	4602      	mov	r2, r0
 8004ba8:	460b      	mov	r3, r1
 8004baa:	b087      	sub	sp, #28
 8004bac:	d806      	bhi.n	8004bbc <sin+0x20>
 8004bae:	2300      	movs	r3, #0
 8004bb0:	2200      	movs	r2, #0
 8004bb2:	9300      	str	r3, [sp, #0]
 8004bb4:	2300      	movs	r3, #0
 8004bb6:	f000 f923 	bl	8004e00 <__kernel_sin>
 8004bba:	e004      	b.n	8004bc6 <sin+0x2a>
 8004bbc:	4d19      	ldr	r5, [pc, #100]	@ (8004c24 <sin+0x88>)
 8004bbe:	42ac      	cmp	r4, r5
 8004bc0:	d903      	bls.n	8004bca <sin+0x2e>
 8004bc2:	f7fb fac9 	bl	8000158 <__aeabi_dsub>
 8004bc6:	b007      	add	sp, #28
 8004bc8:	bd30      	pop	{r4, r5, pc}
 8004bca:	aa02      	add	r2, sp, #8
 8004bcc:	f000 fbd0 	bl	8005370 <__ieee754_rem_pio2>
 8004bd0:	f000 0003 	and.w	r0, r0, #3
 8004bd4:	2801      	cmp	r0, #1
 8004bd6:	d009      	beq.n	8004bec <sin+0x50>
 8004bd8:	2802      	cmp	r0, #2
 8004bda:	d00e      	beq.n	8004bfa <sin+0x5e>
 8004bdc:	b9c0      	cbnz	r0, 8004c10 <sin+0x74>
 8004bde:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004be2:	2301      	movs	r3, #1
 8004be4:	9300      	str	r3, [sp, #0]
 8004be6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bea:	e7e4      	b.n	8004bb6 <sin+0x1a>
 8004bec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bf0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bf4:	f000 f844 	bl	8004c80 <__kernel_cos>
 8004bf8:	e7e5      	b.n	8004bc6 <sin+0x2a>
 8004bfa:	2301      	movs	r3, #1
 8004bfc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c00:	9300      	str	r3, [sp, #0]
 8004c02:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c06:	f000 f8fb 	bl	8004e00 <__kernel_sin>
 8004c0a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004c0e:	e7da      	b.n	8004bc6 <sin+0x2a>
 8004c10:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c14:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c18:	f000 f832 	bl	8004c80 <__kernel_cos>
 8004c1c:	e7f5      	b.n	8004c0a <sin+0x6e>
 8004c1e:	bf00      	nop
 8004c20:	3fe921fb 	.word	0x3fe921fb
 8004c24:	7fefffff 	.word	0x7fefffff

08004c28 <tan>:
 8004c28:	b530      	push	{r4, r5, lr}
 8004c2a:	4d12      	ldr	r5, [pc, #72]	@ (8004c74 <tan+0x4c>)
 8004c2c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004c30:	42ac      	cmp	r4, r5
 8004c32:	4602      	mov	r2, r0
 8004c34:	460b      	mov	r3, r1
 8004c36:	b087      	sub	sp, #28
 8004c38:	d806      	bhi.n	8004c48 <tan+0x20>
 8004c3a:	2301      	movs	r3, #1
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	2300      	movs	r3, #0
 8004c42:	f000 f995 	bl	8004f70 <__kernel_tan>
 8004c46:	e004      	b.n	8004c52 <tan+0x2a>
 8004c48:	4d0b      	ldr	r5, [pc, #44]	@ (8004c78 <tan+0x50>)
 8004c4a:	42ac      	cmp	r4, r5
 8004c4c:	d903      	bls.n	8004c56 <tan+0x2e>
 8004c4e:	f7fb fa83 	bl	8000158 <__aeabi_dsub>
 8004c52:	b007      	add	sp, #28
 8004c54:	bd30      	pop	{r4, r5, pc}
 8004c56:	aa02      	add	r2, sp, #8
 8004c58:	f000 fb8a 	bl	8005370 <__ieee754_rem_pio2>
 8004c5c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004c60:	0040      	lsls	r0, r0, #1
 8004c62:	f000 0002 	and.w	r0, r0, #2
 8004c66:	f1c0 0001 	rsb	r0, r0, #1
 8004c6a:	9000      	str	r0, [sp, #0]
 8004c6c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004c70:	e7e7      	b.n	8004c42 <tan+0x1a>
 8004c72:	bf00      	nop
 8004c74:	3fe921fb 	.word	0x3fe921fb
 8004c78:	7fefffff 	.word	0x7fefffff
 8004c7c:	00000000 	.word	0x00000000

08004c80 <__kernel_cos>:
 8004c80:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004c84:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004c88:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004c8c:	4680      	mov	r8, r0
 8004c8e:	4689      	mov	r9, r1
 8004c90:	e9cd 2300 	strd	r2, r3, [sp]
 8004c94:	d204      	bcs.n	8004ca0 <__kernel_cos+0x20>
 8004c96:	f7fb feb1 	bl	80009fc <__aeabi_d2iz>
 8004c9a:	2800      	cmp	r0, #0
 8004c9c:	f000 8086 	beq.w	8004dac <__kernel_cos+0x12c>
 8004ca0:	4642      	mov	r2, r8
 8004ca2:	464b      	mov	r3, r9
 8004ca4:	4640      	mov	r0, r8
 8004ca6:	4649      	mov	r1, r9
 8004ca8:	f7fb fc0e 	bl	80004c8 <__aeabi_dmul>
 8004cac:	2200      	movs	r2, #0
 8004cae:	4b4e      	ldr	r3, [pc, #312]	@ (8004de8 <__kernel_cos+0x168>)
 8004cb0:	4604      	mov	r4, r0
 8004cb2:	460d      	mov	r5, r1
 8004cb4:	f7fb fc08 	bl	80004c8 <__aeabi_dmul>
 8004cb8:	a33f      	add	r3, pc, #252	@ (adr r3, 8004db8 <__kernel_cos+0x138>)
 8004cba:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cbe:	4682      	mov	sl, r0
 8004cc0:	468b      	mov	fp, r1
 8004cc2:	4620      	mov	r0, r4
 8004cc4:	4629      	mov	r1, r5
 8004cc6:	f7fb fbff 	bl	80004c8 <__aeabi_dmul>
 8004cca:	a33d      	add	r3, pc, #244	@ (adr r3, 8004dc0 <__kernel_cos+0x140>)
 8004ccc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cd0:	f7fb fa44 	bl	800015c <__adddf3>
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	462b      	mov	r3, r5
 8004cd8:	f7fb fbf6 	bl	80004c8 <__aeabi_dmul>
 8004cdc:	a33a      	add	r3, pc, #232	@ (adr r3, 8004dc8 <__kernel_cos+0x148>)
 8004cde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce2:	f7fb fa39 	bl	8000158 <__aeabi_dsub>
 8004ce6:	4622      	mov	r2, r4
 8004ce8:	462b      	mov	r3, r5
 8004cea:	f7fb fbed 	bl	80004c8 <__aeabi_dmul>
 8004cee:	a338      	add	r3, pc, #224	@ (adr r3, 8004dd0 <__kernel_cos+0x150>)
 8004cf0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004cf4:	f7fb fa32 	bl	800015c <__adddf3>
 8004cf8:	4622      	mov	r2, r4
 8004cfa:	462b      	mov	r3, r5
 8004cfc:	f7fb fbe4 	bl	80004c8 <__aeabi_dmul>
 8004d00:	a335      	add	r3, pc, #212	@ (adr r3, 8004dd8 <__kernel_cos+0x158>)
 8004d02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d06:	f7fb fa27 	bl	8000158 <__aeabi_dsub>
 8004d0a:	4622      	mov	r2, r4
 8004d0c:	462b      	mov	r3, r5
 8004d0e:	f7fb fbdb 	bl	80004c8 <__aeabi_dmul>
 8004d12:	a333      	add	r3, pc, #204	@ (adr r3, 8004de0 <__kernel_cos+0x160>)
 8004d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d18:	f7fb fa20 	bl	800015c <__adddf3>
 8004d1c:	4622      	mov	r2, r4
 8004d1e:	462b      	mov	r3, r5
 8004d20:	f7fb fbd2 	bl	80004c8 <__aeabi_dmul>
 8004d24:	4622      	mov	r2, r4
 8004d26:	462b      	mov	r3, r5
 8004d28:	f7fb fbce 	bl	80004c8 <__aeabi_dmul>
 8004d2c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004d30:	4604      	mov	r4, r0
 8004d32:	460d      	mov	r5, r1
 8004d34:	4640      	mov	r0, r8
 8004d36:	4649      	mov	r1, r9
 8004d38:	f7fb fbc6 	bl	80004c8 <__aeabi_dmul>
 8004d3c:	460b      	mov	r3, r1
 8004d3e:	4602      	mov	r2, r0
 8004d40:	4629      	mov	r1, r5
 8004d42:	4620      	mov	r0, r4
 8004d44:	f7fb fa08 	bl	8000158 <__aeabi_dsub>
 8004d48:	4b28      	ldr	r3, [pc, #160]	@ (8004dec <__kernel_cos+0x16c>)
 8004d4a:	4680      	mov	r8, r0
 8004d4c:	429e      	cmp	r6, r3
 8004d4e:	4689      	mov	r9, r1
 8004d50:	d80e      	bhi.n	8004d70 <__kernel_cos+0xf0>
 8004d52:	4602      	mov	r2, r0
 8004d54:	460b      	mov	r3, r1
 8004d56:	4650      	mov	r0, sl
 8004d58:	4659      	mov	r1, fp
 8004d5a:	f7fb f9fd 	bl	8000158 <__aeabi_dsub>
 8004d5e:	4602      	mov	r2, r0
 8004d60:	2000      	movs	r0, #0
 8004d62:	460b      	mov	r3, r1
 8004d64:	4922      	ldr	r1, [pc, #136]	@ (8004df0 <__kernel_cos+0x170>)
 8004d66:	f7fb f9f7 	bl	8000158 <__aeabi_dsub>
 8004d6a:	b003      	add	sp, #12
 8004d6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004d70:	2400      	movs	r4, #0
 8004d72:	4b20      	ldr	r3, [pc, #128]	@ (8004df4 <__kernel_cos+0x174>)
 8004d74:	4622      	mov	r2, r4
 8004d76:	429e      	cmp	r6, r3
 8004d78:	bf8c      	ite	hi
 8004d7a:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004df8 <__kernel_cos+0x178>)
 8004d7c:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004d80:	462b      	mov	r3, r5
 8004d82:	2000      	movs	r0, #0
 8004d84:	491a      	ldr	r1, [pc, #104]	@ (8004df0 <__kernel_cos+0x170>)
 8004d86:	f7fb f9e7 	bl	8000158 <__aeabi_dsub>
 8004d8a:	4622      	mov	r2, r4
 8004d8c:	4606      	mov	r6, r0
 8004d8e:	460f      	mov	r7, r1
 8004d90:	462b      	mov	r3, r5
 8004d92:	4650      	mov	r0, sl
 8004d94:	4659      	mov	r1, fp
 8004d96:	f7fb f9df 	bl	8000158 <__aeabi_dsub>
 8004d9a:	4642      	mov	r2, r8
 8004d9c:	464b      	mov	r3, r9
 8004d9e:	f7fb f9db 	bl	8000158 <__aeabi_dsub>
 8004da2:	4602      	mov	r2, r0
 8004da4:	460b      	mov	r3, r1
 8004da6:	4630      	mov	r0, r6
 8004da8:	4639      	mov	r1, r7
 8004daa:	e7dc      	b.n	8004d66 <__kernel_cos+0xe6>
 8004dac:	2000      	movs	r0, #0
 8004dae:	4910      	ldr	r1, [pc, #64]	@ (8004df0 <__kernel_cos+0x170>)
 8004db0:	e7db      	b.n	8004d6a <__kernel_cos+0xea>
 8004db2:	bf00      	nop
 8004db4:	f3af 8000 	nop.w
 8004db8:	be8838d4 	.word	0xbe8838d4
 8004dbc:	bda8fae9 	.word	0xbda8fae9
 8004dc0:	bdb4b1c4 	.word	0xbdb4b1c4
 8004dc4:	3e21ee9e 	.word	0x3e21ee9e
 8004dc8:	809c52ad 	.word	0x809c52ad
 8004dcc:	3e927e4f 	.word	0x3e927e4f
 8004dd0:	19cb1590 	.word	0x19cb1590
 8004dd4:	3efa01a0 	.word	0x3efa01a0
 8004dd8:	16c15177 	.word	0x16c15177
 8004ddc:	3f56c16c 	.word	0x3f56c16c
 8004de0:	5555554c 	.word	0x5555554c
 8004de4:	3fa55555 	.word	0x3fa55555
 8004de8:	3fe00000 	.word	0x3fe00000
 8004dec:	3fd33332 	.word	0x3fd33332
 8004df0:	3ff00000 	.word	0x3ff00000
 8004df4:	3fe90000 	.word	0x3fe90000
 8004df8:	3fd20000 	.word	0x3fd20000
 8004dfc:	00000000 	.word	0x00000000

08004e00 <__kernel_sin>:
 8004e00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e04:	461f      	mov	r7, r3
 8004e06:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004e0a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004e0e:	4604      	mov	r4, r0
 8004e10:	460d      	mov	r5, r1
 8004e12:	4616      	mov	r6, r2
 8004e14:	b085      	sub	sp, #20
 8004e16:	d203      	bcs.n	8004e20 <__kernel_sin+0x20>
 8004e18:	f7fb fdf0 	bl	80009fc <__aeabi_d2iz>
 8004e1c:	2800      	cmp	r0, #0
 8004e1e:	d051      	beq.n	8004ec4 <__kernel_sin+0xc4>
 8004e20:	4622      	mov	r2, r4
 8004e22:	462b      	mov	r3, r5
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	f7fb fb4e 	bl	80004c8 <__aeabi_dmul>
 8004e2c:	4682      	mov	sl, r0
 8004e2e:	468b      	mov	fp, r1
 8004e30:	4602      	mov	r2, r0
 8004e32:	460b      	mov	r3, r1
 8004e34:	4620      	mov	r0, r4
 8004e36:	4629      	mov	r1, r5
 8004e38:	f7fb fb46 	bl	80004c8 <__aeabi_dmul>
 8004e3c:	a33e      	add	r3, pc, #248	@ (adr r3, 8004f38 <__kernel_sin+0x138>)
 8004e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e42:	4680      	mov	r8, r0
 8004e44:	4689      	mov	r9, r1
 8004e46:	4650      	mov	r0, sl
 8004e48:	4659      	mov	r1, fp
 8004e4a:	f7fb fb3d 	bl	80004c8 <__aeabi_dmul>
 8004e4e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004f40 <__kernel_sin+0x140>)
 8004e50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e54:	f7fb f980 	bl	8000158 <__aeabi_dsub>
 8004e58:	4652      	mov	r2, sl
 8004e5a:	465b      	mov	r3, fp
 8004e5c:	f7fb fb34 	bl	80004c8 <__aeabi_dmul>
 8004e60:	a339      	add	r3, pc, #228	@ (adr r3, 8004f48 <__kernel_sin+0x148>)
 8004e62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e66:	f7fb f979 	bl	800015c <__adddf3>
 8004e6a:	4652      	mov	r2, sl
 8004e6c:	465b      	mov	r3, fp
 8004e6e:	f7fb fb2b 	bl	80004c8 <__aeabi_dmul>
 8004e72:	a337      	add	r3, pc, #220	@ (adr r3, 8004f50 <__kernel_sin+0x150>)
 8004e74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e78:	f7fb f96e 	bl	8000158 <__aeabi_dsub>
 8004e7c:	4652      	mov	r2, sl
 8004e7e:	465b      	mov	r3, fp
 8004e80:	f7fb fb22 	bl	80004c8 <__aeabi_dmul>
 8004e84:	a334      	add	r3, pc, #208	@ (adr r3, 8004f58 <__kernel_sin+0x158>)
 8004e86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e8a:	f7fb f967 	bl	800015c <__adddf3>
 8004e8e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004e90:	e9cd 0100 	strd	r0, r1, [sp]
 8004e94:	b9db      	cbnz	r3, 8004ece <__kernel_sin+0xce>
 8004e96:	4602      	mov	r2, r0
 8004e98:	460b      	mov	r3, r1
 8004e9a:	4650      	mov	r0, sl
 8004e9c:	4659      	mov	r1, fp
 8004e9e:	f7fb fb13 	bl	80004c8 <__aeabi_dmul>
 8004ea2:	a32f      	add	r3, pc, #188	@ (adr r3, 8004f60 <__kernel_sin+0x160>)
 8004ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ea8:	f7fb f956 	bl	8000158 <__aeabi_dsub>
 8004eac:	4642      	mov	r2, r8
 8004eae:	464b      	mov	r3, r9
 8004eb0:	f7fb fb0a 	bl	80004c8 <__aeabi_dmul>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	460b      	mov	r3, r1
 8004eb8:	4620      	mov	r0, r4
 8004eba:	4629      	mov	r1, r5
 8004ebc:	f7fb f94e 	bl	800015c <__adddf3>
 8004ec0:	4604      	mov	r4, r0
 8004ec2:	460d      	mov	r5, r1
 8004ec4:	4620      	mov	r0, r4
 8004ec6:	4629      	mov	r1, r5
 8004ec8:	b005      	add	sp, #20
 8004eca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ece:	2200      	movs	r2, #0
 8004ed0:	4630      	mov	r0, r6
 8004ed2:	4639      	mov	r1, r7
 8004ed4:	4b24      	ldr	r3, [pc, #144]	@ (8004f68 <__kernel_sin+0x168>)
 8004ed6:	f7fb faf7 	bl	80004c8 <__aeabi_dmul>
 8004eda:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004ede:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004ee2:	4640      	mov	r0, r8
 8004ee4:	4649      	mov	r1, r9
 8004ee6:	f7fb faef 	bl	80004c8 <__aeabi_dmul>
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ef2:	f7fb f931 	bl	8000158 <__aeabi_dsub>
 8004ef6:	4652      	mov	r2, sl
 8004ef8:	465b      	mov	r3, fp
 8004efa:	f7fb fae5 	bl	80004c8 <__aeabi_dmul>
 8004efe:	4632      	mov	r2, r6
 8004f00:	463b      	mov	r3, r7
 8004f02:	f7fb f929 	bl	8000158 <__aeabi_dsub>
 8004f06:	a316      	add	r3, pc, #88	@ (adr r3, 8004f60 <__kernel_sin+0x160>)
 8004f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f0c:	4606      	mov	r6, r0
 8004f0e:	460f      	mov	r7, r1
 8004f10:	4640      	mov	r0, r8
 8004f12:	4649      	mov	r1, r9
 8004f14:	f7fb fad8 	bl	80004c8 <__aeabi_dmul>
 8004f18:	4602      	mov	r2, r0
 8004f1a:	460b      	mov	r3, r1
 8004f1c:	4630      	mov	r0, r6
 8004f1e:	4639      	mov	r1, r7
 8004f20:	f7fb f91c 	bl	800015c <__adddf3>
 8004f24:	4602      	mov	r2, r0
 8004f26:	460b      	mov	r3, r1
 8004f28:	4620      	mov	r0, r4
 8004f2a:	4629      	mov	r1, r5
 8004f2c:	f7fb f914 	bl	8000158 <__aeabi_dsub>
 8004f30:	e7c6      	b.n	8004ec0 <__kernel_sin+0xc0>
 8004f32:	bf00      	nop
 8004f34:	f3af 8000 	nop.w
 8004f38:	5acfd57c 	.word	0x5acfd57c
 8004f3c:	3de5d93a 	.word	0x3de5d93a
 8004f40:	8a2b9ceb 	.word	0x8a2b9ceb
 8004f44:	3e5ae5e6 	.word	0x3e5ae5e6
 8004f48:	57b1fe7d 	.word	0x57b1fe7d
 8004f4c:	3ec71de3 	.word	0x3ec71de3
 8004f50:	19c161d5 	.word	0x19c161d5
 8004f54:	3f2a01a0 	.word	0x3f2a01a0
 8004f58:	1110f8a6 	.word	0x1110f8a6
 8004f5c:	3f811111 	.word	0x3f811111
 8004f60:	55555549 	.word	0x55555549
 8004f64:	3fc55555 	.word	0x3fc55555
 8004f68:	3fe00000 	.word	0x3fe00000
 8004f6c:	00000000 	.word	0x00000000

08004f70 <__kernel_tan>:
 8004f70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004f74:	4699      	mov	r9, r3
 8004f76:	4b34      	ldr	r3, [pc, #208]	@ (8005048 <__kernel_tan+0xd8>)
 8004f78:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004f7c:	b089      	sub	sp, #36	@ 0x24
 8004f7e:	429e      	cmp	r6, r3
 8004f80:	4682      	mov	sl, r0
 8004f82:	468b      	mov	fp, r1
 8004f84:	4690      	mov	r8, r2
 8004f86:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8004f88:	9102      	str	r1, [sp, #8]
 8004f8a:	d863      	bhi.n	8005054 <__kernel_tan+0xe4>
 8004f8c:	f7fb fd36 	bl	80009fc <__aeabi_d2iz>
 8004f90:	4605      	mov	r5, r0
 8004f92:	2800      	cmp	r0, #0
 8004f94:	f040 8084 	bne.w	80050a0 <__kernel_tan+0x130>
 8004f98:	4652      	mov	r2, sl
 8004f9a:	1c7b      	adds	r3, r7, #1
 8004f9c:	4313      	orrs	r3, r2
 8004f9e:	4333      	orrs	r3, r6
 8004fa0:	d110      	bne.n	8004fc4 <__kernel_tan+0x54>
 8004fa2:	4650      	mov	r0, sl
 8004fa4:	4659      	mov	r1, fp
 8004fa6:	f000 fbd9 	bl	800575c <fabs>
 8004faa:	4602      	mov	r2, r0
 8004fac:	460b      	mov	r3, r1
 8004fae:	2000      	movs	r0, #0
 8004fb0:	4926      	ldr	r1, [pc, #152]	@ (800504c <__kernel_tan+0xdc>)
 8004fb2:	f7fb fbb3 	bl	800071c <__aeabi_ddiv>
 8004fb6:	4682      	mov	sl, r0
 8004fb8:	468b      	mov	fp, r1
 8004fba:	4650      	mov	r0, sl
 8004fbc:	4659      	mov	r1, fp
 8004fbe:	b009      	add	sp, #36	@ 0x24
 8004fc0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004fc4:	2f01      	cmp	r7, #1
 8004fc6:	d0f8      	beq.n	8004fba <__kernel_tan+0x4a>
 8004fc8:	4642      	mov	r2, r8
 8004fca:	464b      	mov	r3, r9
 8004fcc:	4650      	mov	r0, sl
 8004fce:	4659      	mov	r1, fp
 8004fd0:	f7fb f8c4 	bl	800015c <__adddf3>
 8004fd4:	4602      	mov	r2, r0
 8004fd6:	460b      	mov	r3, r1
 8004fd8:	460f      	mov	r7, r1
 8004fda:	2000      	movs	r0, #0
 8004fdc:	491c      	ldr	r1, [pc, #112]	@ (8005050 <__kernel_tan+0xe0>)
 8004fde:	f7fb fb9d 	bl	800071c <__aeabi_ddiv>
 8004fe2:	462e      	mov	r6, r5
 8004fe4:	e9cd 0100 	strd	r0, r1, [sp]
 8004fe8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004fec:	462c      	mov	r4, r5
 8004fee:	4652      	mov	r2, sl
 8004ff0:	461d      	mov	r5, r3
 8004ff2:	4630      	mov	r0, r6
 8004ff4:	465b      	mov	r3, fp
 8004ff6:	4639      	mov	r1, r7
 8004ff8:	f7fb f8ae 	bl	8000158 <__aeabi_dsub>
 8004ffc:	4602      	mov	r2, r0
 8004ffe:	460b      	mov	r3, r1
 8005000:	4640      	mov	r0, r8
 8005002:	4649      	mov	r1, r9
 8005004:	f7fb f8a8 	bl	8000158 <__aeabi_dsub>
 8005008:	4632      	mov	r2, r6
 800500a:	462b      	mov	r3, r5
 800500c:	f7fb fa5c 	bl	80004c8 <__aeabi_dmul>
 8005010:	4632      	mov	r2, r6
 8005012:	4682      	mov	sl, r0
 8005014:	468b      	mov	fp, r1
 8005016:	462b      	mov	r3, r5
 8005018:	4630      	mov	r0, r6
 800501a:	4639      	mov	r1, r7
 800501c:	f7fb fa54 	bl	80004c8 <__aeabi_dmul>
 8005020:	2200      	movs	r2, #0
 8005022:	4b0a      	ldr	r3, [pc, #40]	@ (800504c <__kernel_tan+0xdc>)
 8005024:	f7fb f89a 	bl	800015c <__adddf3>
 8005028:	4602      	mov	r2, r0
 800502a:	460b      	mov	r3, r1
 800502c:	4650      	mov	r0, sl
 800502e:	4659      	mov	r1, fp
 8005030:	f7fb f894 	bl	800015c <__adddf3>
 8005034:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005038:	f7fb fa46 	bl	80004c8 <__aeabi_dmul>
 800503c:	4622      	mov	r2, r4
 800503e:	462b      	mov	r3, r5
 8005040:	f7fb f88c 	bl	800015c <__adddf3>
 8005044:	e7b7      	b.n	8004fb6 <__kernel_tan+0x46>
 8005046:	bf00      	nop
 8005048:	3e2fffff 	.word	0x3e2fffff
 800504c:	3ff00000 	.word	0x3ff00000
 8005050:	bff00000 	.word	0xbff00000
 8005054:	4bc2      	ldr	r3, [pc, #776]	@ (8005360 <__kernel_tan+0x3f0>)
 8005056:	429e      	cmp	r6, r3
 8005058:	d922      	bls.n	80050a0 <__kernel_tan+0x130>
 800505a:	9b02      	ldr	r3, [sp, #8]
 800505c:	2b00      	cmp	r3, #0
 800505e:	da05      	bge.n	800506c <__kernel_tan+0xfc>
 8005060:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005064:	469b      	mov	fp, r3
 8005066:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800506a:	4699      	mov	r9, r3
 800506c:	a19e      	add	r1, pc, #632	@ (adr r1, 80052e8 <__kernel_tan+0x378>)
 800506e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005072:	4652      	mov	r2, sl
 8005074:	465b      	mov	r3, fp
 8005076:	f7fb f86f 	bl	8000158 <__aeabi_dsub>
 800507a:	4604      	mov	r4, r0
 800507c:	460d      	mov	r5, r1
 800507e:	a19c      	add	r1, pc, #624	@ (adr r1, 80052f0 <__kernel_tan+0x380>)
 8005080:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005084:	4642      	mov	r2, r8
 8005086:	464b      	mov	r3, r9
 8005088:	f7fb f866 	bl	8000158 <__aeabi_dsub>
 800508c:	4622      	mov	r2, r4
 800508e:	462b      	mov	r3, r5
 8005090:	f7fb f864 	bl	800015c <__adddf3>
 8005094:	f04f 0800 	mov.w	r8, #0
 8005098:	4682      	mov	sl, r0
 800509a:	468b      	mov	fp, r1
 800509c:	f04f 0900 	mov.w	r9, #0
 80050a0:	4652      	mov	r2, sl
 80050a2:	465b      	mov	r3, fp
 80050a4:	4650      	mov	r0, sl
 80050a6:	4659      	mov	r1, fp
 80050a8:	f7fb fa0e 	bl	80004c8 <__aeabi_dmul>
 80050ac:	4602      	mov	r2, r0
 80050ae:	460b      	mov	r3, r1
 80050b0:	e9cd 2300 	strd	r2, r3, [sp]
 80050b4:	f7fb fa08 	bl	80004c8 <__aeabi_dmul>
 80050b8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80050bc:	4604      	mov	r4, r0
 80050be:	460d      	mov	r5, r1
 80050c0:	4650      	mov	r0, sl
 80050c2:	4659      	mov	r1, fp
 80050c4:	f7fb fa00 	bl	80004c8 <__aeabi_dmul>
 80050c8:	a38b      	add	r3, pc, #556	@ (adr r3, 80052f8 <__kernel_tan+0x388>)
 80050ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80050d2:	4620      	mov	r0, r4
 80050d4:	4629      	mov	r1, r5
 80050d6:	f7fb f9f7 	bl	80004c8 <__aeabi_dmul>
 80050da:	a389      	add	r3, pc, #548	@ (adr r3, 8005300 <__kernel_tan+0x390>)
 80050dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e0:	f7fb f83c 	bl	800015c <__adddf3>
 80050e4:	4622      	mov	r2, r4
 80050e6:	462b      	mov	r3, r5
 80050e8:	f7fb f9ee 	bl	80004c8 <__aeabi_dmul>
 80050ec:	a386      	add	r3, pc, #536	@ (adr r3, 8005308 <__kernel_tan+0x398>)
 80050ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f2:	f7fb f833 	bl	800015c <__adddf3>
 80050f6:	4622      	mov	r2, r4
 80050f8:	462b      	mov	r3, r5
 80050fa:	f7fb f9e5 	bl	80004c8 <__aeabi_dmul>
 80050fe:	a384      	add	r3, pc, #528	@ (adr r3, 8005310 <__kernel_tan+0x3a0>)
 8005100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005104:	f7fb f82a 	bl	800015c <__adddf3>
 8005108:	4622      	mov	r2, r4
 800510a:	462b      	mov	r3, r5
 800510c:	f7fb f9dc 	bl	80004c8 <__aeabi_dmul>
 8005110:	a381      	add	r3, pc, #516	@ (adr r3, 8005318 <__kernel_tan+0x3a8>)
 8005112:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005116:	f7fb f821 	bl	800015c <__adddf3>
 800511a:	4622      	mov	r2, r4
 800511c:	462b      	mov	r3, r5
 800511e:	f7fb f9d3 	bl	80004c8 <__aeabi_dmul>
 8005122:	a37f      	add	r3, pc, #508	@ (adr r3, 8005320 <__kernel_tan+0x3b0>)
 8005124:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005128:	f7fb f818 	bl	800015c <__adddf3>
 800512c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005130:	f7fb f9ca 	bl	80004c8 <__aeabi_dmul>
 8005134:	a37c      	add	r3, pc, #496	@ (adr r3, 8005328 <__kernel_tan+0x3b8>)
 8005136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800513a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800513e:	4620      	mov	r0, r4
 8005140:	4629      	mov	r1, r5
 8005142:	f7fb f9c1 	bl	80004c8 <__aeabi_dmul>
 8005146:	a37a      	add	r3, pc, #488	@ (adr r3, 8005330 <__kernel_tan+0x3c0>)
 8005148:	e9d3 2300 	ldrd	r2, r3, [r3]
 800514c:	f7fb f806 	bl	800015c <__adddf3>
 8005150:	4622      	mov	r2, r4
 8005152:	462b      	mov	r3, r5
 8005154:	f7fb f9b8 	bl	80004c8 <__aeabi_dmul>
 8005158:	a377      	add	r3, pc, #476	@ (adr r3, 8005338 <__kernel_tan+0x3c8>)
 800515a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800515e:	f7fa fffd 	bl	800015c <__adddf3>
 8005162:	4622      	mov	r2, r4
 8005164:	462b      	mov	r3, r5
 8005166:	f7fb f9af 	bl	80004c8 <__aeabi_dmul>
 800516a:	a375      	add	r3, pc, #468	@ (adr r3, 8005340 <__kernel_tan+0x3d0>)
 800516c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005170:	f7fa fff4 	bl	800015c <__adddf3>
 8005174:	4622      	mov	r2, r4
 8005176:	462b      	mov	r3, r5
 8005178:	f7fb f9a6 	bl	80004c8 <__aeabi_dmul>
 800517c:	a372      	add	r3, pc, #456	@ (adr r3, 8005348 <__kernel_tan+0x3d8>)
 800517e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005182:	f7fa ffeb 	bl	800015c <__adddf3>
 8005186:	4622      	mov	r2, r4
 8005188:	462b      	mov	r3, r5
 800518a:	f7fb f99d 	bl	80004c8 <__aeabi_dmul>
 800518e:	a370      	add	r3, pc, #448	@ (adr r3, 8005350 <__kernel_tan+0x3e0>)
 8005190:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005194:	f7fa ffe2 	bl	800015c <__adddf3>
 8005198:	4602      	mov	r2, r0
 800519a:	460b      	mov	r3, r1
 800519c:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80051a0:	f7fa ffdc 	bl	800015c <__adddf3>
 80051a4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80051a8:	f7fb f98e 	bl	80004c8 <__aeabi_dmul>
 80051ac:	4642      	mov	r2, r8
 80051ae:	464b      	mov	r3, r9
 80051b0:	f7fa ffd4 	bl	800015c <__adddf3>
 80051b4:	e9dd 2300 	ldrd	r2, r3, [sp]
 80051b8:	f7fb f986 	bl	80004c8 <__aeabi_dmul>
 80051bc:	4642      	mov	r2, r8
 80051be:	464b      	mov	r3, r9
 80051c0:	f7fa ffcc 	bl	800015c <__adddf3>
 80051c4:	a364      	add	r3, pc, #400	@ (adr r3, 8005358 <__kernel_tan+0x3e8>)
 80051c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051ca:	4604      	mov	r4, r0
 80051cc:	460d      	mov	r5, r1
 80051ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80051d2:	f7fb f979 	bl	80004c8 <__aeabi_dmul>
 80051d6:	4622      	mov	r2, r4
 80051d8:	462b      	mov	r3, r5
 80051da:	f7fa ffbf 	bl	800015c <__adddf3>
 80051de:	460b      	mov	r3, r1
 80051e0:	e9cd 0100 	strd	r0, r1, [sp]
 80051e4:	4602      	mov	r2, r0
 80051e6:	4659      	mov	r1, fp
 80051e8:	4650      	mov	r0, sl
 80051ea:	f7fa ffb7 	bl	800015c <__adddf3>
 80051ee:	4b5c      	ldr	r3, [pc, #368]	@ (8005360 <__kernel_tan+0x3f0>)
 80051f0:	4604      	mov	r4, r0
 80051f2:	429e      	cmp	r6, r3
 80051f4:	460d      	mov	r5, r1
 80051f6:	d93e      	bls.n	8005276 <__kernel_tan+0x306>
 80051f8:	4638      	mov	r0, r7
 80051fa:	f7fb f8fb 	bl	80003f4 <__aeabi_i2d>
 80051fe:	4622      	mov	r2, r4
 8005200:	4680      	mov	r8, r0
 8005202:	4689      	mov	r9, r1
 8005204:	462b      	mov	r3, r5
 8005206:	4620      	mov	r0, r4
 8005208:	4629      	mov	r1, r5
 800520a:	f7fb f95d 	bl	80004c8 <__aeabi_dmul>
 800520e:	4642      	mov	r2, r8
 8005210:	4606      	mov	r6, r0
 8005212:	460f      	mov	r7, r1
 8005214:	464b      	mov	r3, r9
 8005216:	4620      	mov	r0, r4
 8005218:	4629      	mov	r1, r5
 800521a:	f7fa ff9f 	bl	800015c <__adddf3>
 800521e:	4602      	mov	r2, r0
 8005220:	460b      	mov	r3, r1
 8005222:	4630      	mov	r0, r6
 8005224:	4639      	mov	r1, r7
 8005226:	f7fb fa79 	bl	800071c <__aeabi_ddiv>
 800522a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800522e:	f7fa ff93 	bl	8000158 <__aeabi_dsub>
 8005232:	4602      	mov	r2, r0
 8005234:	460b      	mov	r3, r1
 8005236:	4650      	mov	r0, sl
 8005238:	4659      	mov	r1, fp
 800523a:	f7fa ff8d 	bl	8000158 <__aeabi_dsub>
 800523e:	4602      	mov	r2, r0
 8005240:	460b      	mov	r3, r1
 8005242:	f7fa ff8b 	bl	800015c <__adddf3>
 8005246:	4602      	mov	r2, r0
 8005248:	460b      	mov	r3, r1
 800524a:	4640      	mov	r0, r8
 800524c:	4649      	mov	r1, r9
 800524e:	f7fa ff83 	bl	8000158 <__aeabi_dsub>
 8005252:	9b02      	ldr	r3, [sp, #8]
 8005254:	4604      	mov	r4, r0
 8005256:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 800525a:	f00a 0a02 	and.w	sl, sl, #2
 800525e:	f1ca 0001 	rsb	r0, sl, #1
 8005262:	460d      	mov	r5, r1
 8005264:	f7fb f8c6 	bl	80003f4 <__aeabi_i2d>
 8005268:	4602      	mov	r2, r0
 800526a:	460b      	mov	r3, r1
 800526c:	4620      	mov	r0, r4
 800526e:	4629      	mov	r1, r5
 8005270:	f7fb f92a 	bl	80004c8 <__aeabi_dmul>
 8005274:	e69f      	b.n	8004fb6 <__kernel_tan+0x46>
 8005276:	2f01      	cmp	r7, #1
 8005278:	d033      	beq.n	80052e2 <__kernel_tan+0x372>
 800527a:	f04f 0800 	mov.w	r8, #0
 800527e:	4689      	mov	r9, r1
 8005280:	4602      	mov	r2, r0
 8005282:	460b      	mov	r3, r1
 8005284:	2000      	movs	r0, #0
 8005286:	4937      	ldr	r1, [pc, #220]	@ (8005364 <__kernel_tan+0x3f4>)
 8005288:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800528c:	f7fb fa46 	bl	800071c <__aeabi_ddiv>
 8005290:	4652      	mov	r2, sl
 8005292:	460f      	mov	r7, r1
 8005294:	465b      	mov	r3, fp
 8005296:	4606      	mov	r6, r0
 8005298:	460d      	mov	r5, r1
 800529a:	4640      	mov	r0, r8
 800529c:	4649      	mov	r1, r9
 800529e:	f7fa ff5b 	bl	8000158 <__aeabi_dsub>
 80052a2:	4602      	mov	r2, r0
 80052a4:	460b      	mov	r3, r1
 80052a6:	e9dd 0100 	ldrd	r0, r1, [sp]
 80052aa:	f7fa ff55 	bl	8000158 <__aeabi_dsub>
 80052ae:	4642      	mov	r2, r8
 80052b0:	463b      	mov	r3, r7
 80052b2:	f7fb f909 	bl	80004c8 <__aeabi_dmul>
 80052b6:	4642      	mov	r2, r8
 80052b8:	4682      	mov	sl, r0
 80052ba:	468b      	mov	fp, r1
 80052bc:	463b      	mov	r3, r7
 80052be:	4640      	mov	r0, r8
 80052c0:	4649      	mov	r1, r9
 80052c2:	f7fb f901 	bl	80004c8 <__aeabi_dmul>
 80052c6:	2200      	movs	r2, #0
 80052c8:	4b27      	ldr	r3, [pc, #156]	@ (8005368 <__kernel_tan+0x3f8>)
 80052ca:	f7fa ff47 	bl	800015c <__adddf3>
 80052ce:	4602      	mov	r2, r0
 80052d0:	460b      	mov	r3, r1
 80052d2:	4650      	mov	r0, sl
 80052d4:	4659      	mov	r1, fp
 80052d6:	f7fa ff41 	bl	800015c <__adddf3>
 80052da:	4644      	mov	r4, r8
 80052dc:	4632      	mov	r2, r6
 80052de:	463b      	mov	r3, r7
 80052e0:	e6aa      	b.n	8005038 <__kernel_tan+0xc8>
 80052e2:	4682      	mov	sl, r0
 80052e4:	468b      	mov	fp, r1
 80052e6:	e668      	b.n	8004fba <__kernel_tan+0x4a>
 80052e8:	54442d18 	.word	0x54442d18
 80052ec:	3fe921fb 	.word	0x3fe921fb
 80052f0:	33145c07 	.word	0x33145c07
 80052f4:	3c81a626 	.word	0x3c81a626
 80052f8:	74bf7ad4 	.word	0x74bf7ad4
 80052fc:	3efb2a70 	.word	0x3efb2a70
 8005300:	32f0a7e9 	.word	0x32f0a7e9
 8005304:	3f12b80f 	.word	0x3f12b80f
 8005308:	1a8d1068 	.word	0x1a8d1068
 800530c:	3f3026f7 	.word	0x3f3026f7
 8005310:	fee08315 	.word	0xfee08315
 8005314:	3f57dbc8 	.word	0x3f57dbc8
 8005318:	e96e8493 	.word	0xe96e8493
 800531c:	3f8226e3 	.word	0x3f8226e3
 8005320:	1bb341fe 	.word	0x1bb341fe
 8005324:	3faba1ba 	.word	0x3faba1ba
 8005328:	db605373 	.word	0xdb605373
 800532c:	bef375cb 	.word	0xbef375cb
 8005330:	a03792a6 	.word	0xa03792a6
 8005334:	3f147e88 	.word	0x3f147e88
 8005338:	f2f26501 	.word	0xf2f26501
 800533c:	3f4344d8 	.word	0x3f4344d8
 8005340:	c9560328 	.word	0xc9560328
 8005344:	3f6d6d22 	.word	0x3f6d6d22
 8005348:	8406d637 	.word	0x8406d637
 800534c:	3f9664f4 	.word	0x3f9664f4
 8005350:	1110fe7a 	.word	0x1110fe7a
 8005354:	3fc11111 	.word	0x3fc11111
 8005358:	55555563 	.word	0x55555563
 800535c:	3fd55555 	.word	0x3fd55555
 8005360:	3fe59427 	.word	0x3fe59427
 8005364:	bff00000 	.word	0xbff00000
 8005368:	3ff00000 	.word	0x3ff00000
 800536c:	00000000 	.word	0x00000000

08005370 <__ieee754_rem_pio2>:
 8005370:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005374:	4bc4      	ldr	r3, [pc, #784]	@ (8005688 <__ieee754_rem_pio2+0x318>)
 8005376:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 800537a:	b08d      	sub	sp, #52	@ 0x34
 800537c:	4598      	cmp	r8, r3
 800537e:	4606      	mov	r6, r0
 8005380:	460f      	mov	r7, r1
 8005382:	4614      	mov	r4, r2
 8005384:	9104      	str	r1, [sp, #16]
 8005386:	d807      	bhi.n	8005398 <__ieee754_rem_pio2+0x28>
 8005388:	e9c2 6700 	strd	r6, r7, [r2]
 800538c:	2300      	movs	r3, #0
 800538e:	2200      	movs	r2, #0
 8005390:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005394:	2500      	movs	r5, #0
 8005396:	e026      	b.n	80053e6 <__ieee754_rem_pio2+0x76>
 8005398:	4bbc      	ldr	r3, [pc, #752]	@ (800568c <__ieee754_rem_pio2+0x31c>)
 800539a:	4598      	cmp	r8, r3
 800539c:	d876      	bhi.n	800548c <__ieee754_rem_pio2+0x11c>
 800539e:	9b04      	ldr	r3, [sp, #16]
 80053a0:	4dbb      	ldr	r5, [pc, #748]	@ (8005690 <__ieee754_rem_pio2+0x320>)
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	a3aa      	add	r3, pc, #680	@ (adr r3, 8005650 <__ieee754_rem_pio2+0x2e0>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	dd38      	ble.n	800541e <__ieee754_rem_pio2+0xae>
 80053ac:	f7fa fed4 	bl	8000158 <__aeabi_dsub>
 80053b0:	45a8      	cmp	r8, r5
 80053b2:	4606      	mov	r6, r0
 80053b4:	460f      	mov	r7, r1
 80053b6:	d01a      	beq.n	80053ee <__ieee754_rem_pio2+0x7e>
 80053b8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8005658 <__ieee754_rem_pio2+0x2e8>)
 80053ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053be:	f7fa fecb 	bl	8000158 <__aeabi_dsub>
 80053c2:	4602      	mov	r2, r0
 80053c4:	460b      	mov	r3, r1
 80053c6:	4680      	mov	r8, r0
 80053c8:	4689      	mov	r9, r1
 80053ca:	4630      	mov	r0, r6
 80053cc:	4639      	mov	r1, r7
 80053ce:	f7fa fec3 	bl	8000158 <__aeabi_dsub>
 80053d2:	a3a1      	add	r3, pc, #644	@ (adr r3, 8005658 <__ieee754_rem_pio2+0x2e8>)
 80053d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d8:	f7fa febe 	bl	8000158 <__aeabi_dsub>
 80053dc:	2501      	movs	r5, #1
 80053de:	e9c4 8900 	strd	r8, r9, [r4]
 80053e2:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053e6:	4628      	mov	r0, r5
 80053e8:	b00d      	add	sp, #52	@ 0x34
 80053ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80053ee:	a39c      	add	r3, pc, #624	@ (adr r3, 8005660 <__ieee754_rem_pio2+0x2f0>)
 80053f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053f4:	f7fa feb0 	bl	8000158 <__aeabi_dsub>
 80053f8:	a39b      	add	r3, pc, #620	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2f8>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	4606      	mov	r6, r0
 8005400:	460f      	mov	r7, r1
 8005402:	f7fa fea9 	bl	8000158 <__aeabi_dsub>
 8005406:	4602      	mov	r2, r0
 8005408:	460b      	mov	r3, r1
 800540a:	4680      	mov	r8, r0
 800540c:	4689      	mov	r9, r1
 800540e:	4630      	mov	r0, r6
 8005410:	4639      	mov	r1, r7
 8005412:	f7fa fea1 	bl	8000158 <__aeabi_dsub>
 8005416:	a394      	add	r3, pc, #592	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2f8>)
 8005418:	e9d3 2300 	ldrd	r2, r3, [r3]
 800541c:	e7dc      	b.n	80053d8 <__ieee754_rem_pio2+0x68>
 800541e:	f7fa fe9d 	bl	800015c <__adddf3>
 8005422:	45a8      	cmp	r8, r5
 8005424:	4606      	mov	r6, r0
 8005426:	460f      	mov	r7, r1
 8005428:	d018      	beq.n	800545c <__ieee754_rem_pio2+0xec>
 800542a:	a38b      	add	r3, pc, #556	@ (adr r3, 8005658 <__ieee754_rem_pio2+0x2e8>)
 800542c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005430:	f7fa fe94 	bl	800015c <__adddf3>
 8005434:	4602      	mov	r2, r0
 8005436:	460b      	mov	r3, r1
 8005438:	4680      	mov	r8, r0
 800543a:	4689      	mov	r9, r1
 800543c:	4630      	mov	r0, r6
 800543e:	4639      	mov	r1, r7
 8005440:	f7fa fe8a 	bl	8000158 <__aeabi_dsub>
 8005444:	a384      	add	r3, pc, #528	@ (adr r3, 8005658 <__ieee754_rem_pio2+0x2e8>)
 8005446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800544a:	f7fa fe87 	bl	800015c <__adddf3>
 800544e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8005452:	e9c4 8900 	strd	r8, r9, [r4]
 8005456:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800545a:	e7c4      	b.n	80053e6 <__ieee754_rem_pio2+0x76>
 800545c:	a380      	add	r3, pc, #512	@ (adr r3, 8005660 <__ieee754_rem_pio2+0x2f0>)
 800545e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005462:	f7fa fe7b 	bl	800015c <__adddf3>
 8005466:	a380      	add	r3, pc, #512	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2f8>)
 8005468:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546c:	4606      	mov	r6, r0
 800546e:	460f      	mov	r7, r1
 8005470:	f7fa fe74 	bl	800015c <__adddf3>
 8005474:	4602      	mov	r2, r0
 8005476:	460b      	mov	r3, r1
 8005478:	4680      	mov	r8, r0
 800547a:	4689      	mov	r9, r1
 800547c:	4630      	mov	r0, r6
 800547e:	4639      	mov	r1, r7
 8005480:	f7fa fe6a 	bl	8000158 <__aeabi_dsub>
 8005484:	a378      	add	r3, pc, #480	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2f8>)
 8005486:	e9d3 2300 	ldrd	r2, r3, [r3]
 800548a:	e7de      	b.n	800544a <__ieee754_rem_pio2+0xda>
 800548c:	4b81      	ldr	r3, [pc, #516]	@ (8005694 <__ieee754_rem_pio2+0x324>)
 800548e:	4598      	cmp	r8, r3
 8005490:	f200 80cf 	bhi.w	8005632 <__ieee754_rem_pio2+0x2c2>
 8005494:	f000 f962 	bl	800575c <fabs>
 8005498:	a375      	add	r3, pc, #468	@ (adr r3, 8005670 <__ieee754_rem_pio2+0x300>)
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	4606      	mov	r6, r0
 80054a0:	460f      	mov	r7, r1
 80054a2:	f7fb f811 	bl	80004c8 <__aeabi_dmul>
 80054a6:	2200      	movs	r2, #0
 80054a8:	4b7b      	ldr	r3, [pc, #492]	@ (8005698 <__ieee754_rem_pio2+0x328>)
 80054aa:	f7fa fe57 	bl	800015c <__adddf3>
 80054ae:	f7fb faa5 	bl	80009fc <__aeabi_d2iz>
 80054b2:	4605      	mov	r5, r0
 80054b4:	f7fa ff9e 	bl	80003f4 <__aeabi_i2d>
 80054b8:	4602      	mov	r2, r0
 80054ba:	460b      	mov	r3, r1
 80054bc:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80054c0:	a363      	add	r3, pc, #396	@ (adr r3, 8005650 <__ieee754_rem_pio2+0x2e0>)
 80054c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054c6:	f7fa ffff 	bl	80004c8 <__aeabi_dmul>
 80054ca:	4602      	mov	r2, r0
 80054cc:	460b      	mov	r3, r1
 80054ce:	4630      	mov	r0, r6
 80054d0:	4639      	mov	r1, r7
 80054d2:	f7fa fe41 	bl	8000158 <__aeabi_dsub>
 80054d6:	a360      	add	r3, pc, #384	@ (adr r3, 8005658 <__ieee754_rem_pio2+0x2e8>)
 80054d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054dc:	4682      	mov	sl, r0
 80054de:	468b      	mov	fp, r1
 80054e0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054e4:	f7fa fff0 	bl	80004c8 <__aeabi_dmul>
 80054e8:	2d1f      	cmp	r5, #31
 80054ea:	4606      	mov	r6, r0
 80054ec:	460f      	mov	r7, r1
 80054ee:	dc0c      	bgt.n	800550a <__ieee754_rem_pio2+0x19a>
 80054f0:	4b6a      	ldr	r3, [pc, #424]	@ (800569c <__ieee754_rem_pio2+0x32c>)
 80054f2:	1e6a      	subs	r2, r5, #1
 80054f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80054f8:	4543      	cmp	r3, r8
 80054fa:	d006      	beq.n	800550a <__ieee754_rem_pio2+0x19a>
 80054fc:	4632      	mov	r2, r6
 80054fe:	463b      	mov	r3, r7
 8005500:	4650      	mov	r0, sl
 8005502:	4659      	mov	r1, fp
 8005504:	f7fa fe28 	bl	8000158 <__aeabi_dsub>
 8005508:	e00e      	b.n	8005528 <__ieee754_rem_pio2+0x1b8>
 800550a:	463b      	mov	r3, r7
 800550c:	4632      	mov	r2, r6
 800550e:	4650      	mov	r0, sl
 8005510:	4659      	mov	r1, fp
 8005512:	f7fa fe21 	bl	8000158 <__aeabi_dsub>
 8005516:	ea4f 5328 	mov.w	r3, r8, asr #20
 800551a:	9305      	str	r3, [sp, #20]
 800551c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005520:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005524:	2b10      	cmp	r3, #16
 8005526:	dc02      	bgt.n	800552e <__ieee754_rem_pio2+0x1be>
 8005528:	e9c4 0100 	strd	r0, r1, [r4]
 800552c:	e039      	b.n	80055a2 <__ieee754_rem_pio2+0x232>
 800552e:	a34c      	add	r3, pc, #304	@ (adr r3, 8005660 <__ieee754_rem_pio2+0x2f0>)
 8005530:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005534:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005538:	f7fa ffc6 	bl	80004c8 <__aeabi_dmul>
 800553c:	4606      	mov	r6, r0
 800553e:	460f      	mov	r7, r1
 8005540:	4602      	mov	r2, r0
 8005542:	460b      	mov	r3, r1
 8005544:	4650      	mov	r0, sl
 8005546:	4659      	mov	r1, fp
 8005548:	f7fa fe06 	bl	8000158 <__aeabi_dsub>
 800554c:	4602      	mov	r2, r0
 800554e:	460b      	mov	r3, r1
 8005550:	4680      	mov	r8, r0
 8005552:	4689      	mov	r9, r1
 8005554:	4650      	mov	r0, sl
 8005556:	4659      	mov	r1, fp
 8005558:	f7fa fdfe 	bl	8000158 <__aeabi_dsub>
 800555c:	4632      	mov	r2, r6
 800555e:	463b      	mov	r3, r7
 8005560:	f7fa fdfa 	bl	8000158 <__aeabi_dsub>
 8005564:	a340      	add	r3, pc, #256	@ (adr r3, 8005668 <__ieee754_rem_pio2+0x2f8>)
 8005566:	e9d3 2300 	ldrd	r2, r3, [r3]
 800556a:	4606      	mov	r6, r0
 800556c:	460f      	mov	r7, r1
 800556e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005572:	f7fa ffa9 	bl	80004c8 <__aeabi_dmul>
 8005576:	4632      	mov	r2, r6
 8005578:	463b      	mov	r3, r7
 800557a:	f7fa fded 	bl	8000158 <__aeabi_dsub>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4606      	mov	r6, r0
 8005584:	460f      	mov	r7, r1
 8005586:	4640      	mov	r0, r8
 8005588:	4649      	mov	r1, r9
 800558a:	f7fa fde5 	bl	8000158 <__aeabi_dsub>
 800558e:	9a05      	ldr	r2, [sp, #20]
 8005590:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005594:	1ad3      	subs	r3, r2, r3
 8005596:	2b31      	cmp	r3, #49	@ 0x31
 8005598:	dc20      	bgt.n	80055dc <__ieee754_rem_pio2+0x26c>
 800559a:	46c2      	mov	sl, r8
 800559c:	46cb      	mov	fp, r9
 800559e:	e9c4 0100 	strd	r0, r1, [r4]
 80055a2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80055a6:	4650      	mov	r0, sl
 80055a8:	4642      	mov	r2, r8
 80055aa:	464b      	mov	r3, r9
 80055ac:	4659      	mov	r1, fp
 80055ae:	f7fa fdd3 	bl	8000158 <__aeabi_dsub>
 80055b2:	463b      	mov	r3, r7
 80055b4:	4632      	mov	r2, r6
 80055b6:	f7fa fdcf 	bl	8000158 <__aeabi_dsub>
 80055ba:	9b04      	ldr	r3, [sp, #16]
 80055bc:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	f6bf af10 	bge.w	80053e6 <__ieee754_rem_pio2+0x76>
 80055c6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80055ca:	6063      	str	r3, [r4, #4]
 80055cc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80055d0:	f8c4 8000 	str.w	r8, [r4]
 80055d4:	60a0      	str	r0, [r4, #8]
 80055d6:	60e3      	str	r3, [r4, #12]
 80055d8:	426d      	negs	r5, r5
 80055da:	e704      	b.n	80053e6 <__ieee754_rem_pio2+0x76>
 80055dc:	a326      	add	r3, pc, #152	@ (adr r3, 8005678 <__ieee754_rem_pio2+0x308>)
 80055de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055e2:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80055e6:	f7fa ff6f 	bl	80004c8 <__aeabi_dmul>
 80055ea:	4606      	mov	r6, r0
 80055ec:	460f      	mov	r7, r1
 80055ee:	4602      	mov	r2, r0
 80055f0:	460b      	mov	r3, r1
 80055f2:	4640      	mov	r0, r8
 80055f4:	4649      	mov	r1, r9
 80055f6:	f7fa fdaf 	bl	8000158 <__aeabi_dsub>
 80055fa:	4602      	mov	r2, r0
 80055fc:	460b      	mov	r3, r1
 80055fe:	4682      	mov	sl, r0
 8005600:	468b      	mov	fp, r1
 8005602:	4640      	mov	r0, r8
 8005604:	4649      	mov	r1, r9
 8005606:	f7fa fda7 	bl	8000158 <__aeabi_dsub>
 800560a:	4632      	mov	r2, r6
 800560c:	463b      	mov	r3, r7
 800560e:	f7fa fda3 	bl	8000158 <__aeabi_dsub>
 8005612:	a31b      	add	r3, pc, #108	@ (adr r3, 8005680 <__ieee754_rem_pio2+0x310>)
 8005614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005618:	4606      	mov	r6, r0
 800561a:	460f      	mov	r7, r1
 800561c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005620:	f7fa ff52 	bl	80004c8 <__aeabi_dmul>
 8005624:	4632      	mov	r2, r6
 8005626:	463b      	mov	r3, r7
 8005628:	f7fa fd96 	bl	8000158 <__aeabi_dsub>
 800562c:	4606      	mov	r6, r0
 800562e:	460f      	mov	r7, r1
 8005630:	e764      	b.n	80054fc <__ieee754_rem_pio2+0x18c>
 8005632:	4b1b      	ldr	r3, [pc, #108]	@ (80056a0 <__ieee754_rem_pio2+0x330>)
 8005634:	4598      	cmp	r8, r3
 8005636:	d935      	bls.n	80056a4 <__ieee754_rem_pio2+0x334>
 8005638:	4602      	mov	r2, r0
 800563a:	460b      	mov	r3, r1
 800563c:	f7fa fd8c 	bl	8000158 <__aeabi_dsub>
 8005640:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005644:	e9c4 0100 	strd	r0, r1, [r4]
 8005648:	e6a4      	b.n	8005394 <__ieee754_rem_pio2+0x24>
 800564a:	bf00      	nop
 800564c:	f3af 8000 	nop.w
 8005650:	54400000 	.word	0x54400000
 8005654:	3ff921fb 	.word	0x3ff921fb
 8005658:	1a626331 	.word	0x1a626331
 800565c:	3dd0b461 	.word	0x3dd0b461
 8005660:	1a600000 	.word	0x1a600000
 8005664:	3dd0b461 	.word	0x3dd0b461
 8005668:	2e037073 	.word	0x2e037073
 800566c:	3ba3198a 	.word	0x3ba3198a
 8005670:	6dc9c883 	.word	0x6dc9c883
 8005674:	3fe45f30 	.word	0x3fe45f30
 8005678:	2e000000 	.word	0x2e000000
 800567c:	3ba3198a 	.word	0x3ba3198a
 8005680:	252049c1 	.word	0x252049c1
 8005684:	397b839a 	.word	0x397b839a
 8005688:	3fe921fb 	.word	0x3fe921fb
 800568c:	4002d97b 	.word	0x4002d97b
 8005690:	3ff921fb 	.word	0x3ff921fb
 8005694:	413921fb 	.word	0x413921fb
 8005698:	3fe00000 	.word	0x3fe00000
 800569c:	08005fdc 	.word	0x08005fdc
 80056a0:	7fefffff 	.word	0x7fefffff
 80056a4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80056a8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80056ac:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80056b0:	460f      	mov	r7, r1
 80056b2:	f7fb f9a3 	bl	80009fc <__aeabi_d2iz>
 80056b6:	f7fa fe9d 	bl	80003f4 <__aeabi_i2d>
 80056ba:	4602      	mov	r2, r0
 80056bc:	460b      	mov	r3, r1
 80056be:	4630      	mov	r0, r6
 80056c0:	4639      	mov	r1, r7
 80056c2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80056c6:	f7fa fd47 	bl	8000158 <__aeabi_dsub>
 80056ca:	2200      	movs	r2, #0
 80056cc:	4b21      	ldr	r3, [pc, #132]	@ (8005754 <__ieee754_rem_pio2+0x3e4>)
 80056ce:	f7fa fefb 	bl	80004c8 <__aeabi_dmul>
 80056d2:	460f      	mov	r7, r1
 80056d4:	4606      	mov	r6, r0
 80056d6:	f7fb f991 	bl	80009fc <__aeabi_d2iz>
 80056da:	f7fa fe8b 	bl	80003f4 <__aeabi_i2d>
 80056de:	4602      	mov	r2, r0
 80056e0:	460b      	mov	r3, r1
 80056e2:	4630      	mov	r0, r6
 80056e4:	4639      	mov	r1, r7
 80056e6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80056ea:	f7fa fd35 	bl	8000158 <__aeabi_dsub>
 80056ee:	2200      	movs	r2, #0
 80056f0:	4b18      	ldr	r3, [pc, #96]	@ (8005754 <__ieee754_rem_pio2+0x3e4>)
 80056f2:	f7fa fee9 	bl	80004c8 <__aeabi_dmul>
 80056f6:	f04f 0803 	mov.w	r8, #3
 80056fa:	2600      	movs	r6, #0
 80056fc:	2700      	movs	r7, #0
 80056fe:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005702:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005706:	4632      	mov	r2, r6
 8005708:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800570c:	463b      	mov	r3, r7
 800570e:	46c2      	mov	sl, r8
 8005710:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005714:	f7fb f940 	bl	8000998 <__aeabi_dcmpeq>
 8005718:	2800      	cmp	r0, #0
 800571a:	d1f4      	bne.n	8005706 <__ieee754_rem_pio2+0x396>
 800571c:	4b0e      	ldr	r3, [pc, #56]	@ (8005758 <__ieee754_rem_pio2+0x3e8>)
 800571e:	462a      	mov	r2, r5
 8005720:	9301      	str	r3, [sp, #4]
 8005722:	2302      	movs	r3, #2
 8005724:	4621      	mov	r1, r4
 8005726:	9300      	str	r3, [sp, #0]
 8005728:	a806      	add	r0, sp, #24
 800572a:	4653      	mov	r3, sl
 800572c:	f000 f81a 	bl	8005764 <__kernel_rem_pio2>
 8005730:	9b04      	ldr	r3, [sp, #16]
 8005732:	4605      	mov	r5, r0
 8005734:	2b00      	cmp	r3, #0
 8005736:	f6bf ae56 	bge.w	80053e6 <__ieee754_rem_pio2+0x76>
 800573a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800573e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005742:	e9c4 2300 	strd	r2, r3, [r4]
 8005746:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800574a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800574e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8005752:	e741      	b.n	80055d8 <__ieee754_rem_pio2+0x268>
 8005754:	41700000 	.word	0x41700000
 8005758:	0800605c 	.word	0x0800605c

0800575c <fabs>:
 800575c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005760:	4619      	mov	r1, r3
 8005762:	4770      	bx	lr

08005764 <__kernel_rem_pio2>:
 8005764:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005768:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800576c:	9308      	str	r3, [sp, #32]
 800576e:	9104      	str	r1, [sp, #16]
 8005770:	4bb6      	ldr	r3, [pc, #728]	@ (8005a4c <__kernel_rem_pio2+0x2e8>)
 8005772:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 8005774:	f112 0f14 	cmn.w	r2, #20
 8005778:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800577c:	bfa8      	it	ge
 800577e:	1ed4      	subge	r4, r2, #3
 8005780:	9302      	str	r3, [sp, #8]
 8005782:	9b08      	ldr	r3, [sp, #32]
 8005784:	bfb8      	it	lt
 8005786:	2400      	movlt	r4, #0
 8005788:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 800578c:	9306      	str	r3, [sp, #24]
 800578e:	bfa4      	itt	ge
 8005790:	2318      	movge	r3, #24
 8005792:	fb94 f4f3 	sdivge	r4, r4, r3
 8005796:	f06f 0317 	mvn.w	r3, #23
 800579a:	fb04 3303 	mla	r3, r4, r3, r3
 800579e:	eb03 0a02 	add.w	sl, r3, r2
 80057a2:	9a06      	ldr	r2, [sp, #24]
 80057a4:	9b02      	ldr	r3, [sp, #8]
 80057a6:	1aa7      	subs	r7, r4, r2
 80057a8:	eb03 0802 	add.w	r8, r3, r2
 80057ac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80057ae:	2500      	movs	r5, #0
 80057b0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80057b4:	2200      	movs	r2, #0
 80057b6:	2300      	movs	r3, #0
 80057b8:	9009      	str	r0, [sp, #36]	@ 0x24
 80057ba:	ae20      	add	r6, sp, #128	@ 0x80
 80057bc:	4545      	cmp	r5, r8
 80057be:	dd14      	ble.n	80057ea <__kernel_rem_pio2+0x86>
 80057c0:	f04f 0800 	mov.w	r8, #0
 80057c4:	9a08      	ldr	r2, [sp, #32]
 80057c6:	ab20      	add	r3, sp, #128	@ 0x80
 80057c8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80057cc:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 80057d0:	9b02      	ldr	r3, [sp, #8]
 80057d2:	4598      	cmp	r8, r3
 80057d4:	dc35      	bgt.n	8005842 <__kernel_rem_pio2+0xde>
 80057d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80057d8:	2200      	movs	r2, #0
 80057da:	f1a3 0908 	sub.w	r9, r3, #8
 80057de:	2300      	movs	r3, #0
 80057e0:	462f      	mov	r7, r5
 80057e2:	2600      	movs	r6, #0
 80057e4:	e9cd 2300 	strd	r2, r3, [sp]
 80057e8:	e01f      	b.n	800582a <__kernel_rem_pio2+0xc6>
 80057ea:	42ef      	cmn	r7, r5
 80057ec:	d40b      	bmi.n	8005806 <__kernel_rem_pio2+0xa2>
 80057ee:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 80057f2:	e9cd 2300 	strd	r2, r3, [sp]
 80057f6:	f7fa fdfd 	bl	80003f4 <__aeabi_i2d>
 80057fa:	e9dd 2300 	ldrd	r2, r3, [sp]
 80057fe:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005802:	3501      	adds	r5, #1
 8005804:	e7da      	b.n	80057bc <__kernel_rem_pio2+0x58>
 8005806:	4610      	mov	r0, r2
 8005808:	4619      	mov	r1, r3
 800580a:	e7f8      	b.n	80057fe <__kernel_rem_pio2+0x9a>
 800580c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005810:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005814:	f7fa fe58 	bl	80004c8 <__aeabi_dmul>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005820:	f7fa fc9c 	bl	800015c <__adddf3>
 8005824:	e9cd 0100 	strd	r0, r1, [sp]
 8005828:	3601      	adds	r6, #1
 800582a:	9b06      	ldr	r3, [sp, #24]
 800582c:	3f08      	subs	r7, #8
 800582e:	429e      	cmp	r6, r3
 8005830:	ddec      	ble.n	800580c <__kernel_rem_pio2+0xa8>
 8005832:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005836:	f108 0801 	add.w	r8, r8, #1
 800583a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800583e:	3508      	adds	r5, #8
 8005840:	e7c6      	b.n	80057d0 <__kernel_rem_pio2+0x6c>
 8005842:	9b02      	ldr	r3, [sp, #8]
 8005844:	aa0c      	add	r2, sp, #48	@ 0x30
 8005846:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800584a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800584c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800584e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8005852:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8005856:	930a      	str	r3, [sp, #40]	@ 0x28
 8005858:	ab98      	add	r3, sp, #608	@ 0x260
 800585a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800585e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8005862:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005864:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8005868:	ae0c      	add	r6, sp, #48	@ 0x30
 800586a:	4698      	mov	r8, r3
 800586c:	46b1      	mov	r9, r6
 800586e:	465f      	mov	r7, fp
 8005870:	9307      	str	r3, [sp, #28]
 8005872:	2f00      	cmp	r7, #0
 8005874:	f1a8 0808 	sub.w	r8, r8, #8
 8005878:	dc71      	bgt.n	800595e <__kernel_rem_pio2+0x1fa>
 800587a:	4652      	mov	r2, sl
 800587c:	4620      	mov	r0, r4
 800587e:	4629      	mov	r1, r5
 8005880:	f000 fa96 	bl	8005db0 <scalbn>
 8005884:	2200      	movs	r2, #0
 8005886:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 800588a:	4604      	mov	r4, r0
 800588c:	460d      	mov	r5, r1
 800588e:	f7fa fe1b 	bl	80004c8 <__aeabi_dmul>
 8005892:	f000 fb05 	bl	8005ea0 <floor>
 8005896:	2200      	movs	r2, #0
 8005898:	4b6d      	ldr	r3, [pc, #436]	@ (8005a50 <__kernel_rem_pio2+0x2ec>)
 800589a:	f7fa fe15 	bl	80004c8 <__aeabi_dmul>
 800589e:	4602      	mov	r2, r0
 80058a0:	460b      	mov	r3, r1
 80058a2:	4620      	mov	r0, r4
 80058a4:	4629      	mov	r1, r5
 80058a6:	f7fa fc57 	bl	8000158 <__aeabi_dsub>
 80058aa:	460d      	mov	r5, r1
 80058ac:	4604      	mov	r4, r0
 80058ae:	f7fb f8a5 	bl	80009fc <__aeabi_d2iz>
 80058b2:	9005      	str	r0, [sp, #20]
 80058b4:	f7fa fd9e 	bl	80003f4 <__aeabi_i2d>
 80058b8:	4602      	mov	r2, r0
 80058ba:	460b      	mov	r3, r1
 80058bc:	4620      	mov	r0, r4
 80058be:	4629      	mov	r1, r5
 80058c0:	f7fa fc4a 	bl	8000158 <__aeabi_dsub>
 80058c4:	f1ba 0f00 	cmp.w	sl, #0
 80058c8:	4680      	mov	r8, r0
 80058ca:	4689      	mov	r9, r1
 80058cc:	dd6d      	ble.n	80059aa <__kernel_rem_pio2+0x246>
 80058ce:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 80058d2:	ab0c      	add	r3, sp, #48	@ 0x30
 80058d4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80058d8:	9c05      	ldr	r4, [sp, #20]
 80058da:	f1ca 0018 	rsb	r0, sl, #24
 80058de:	fa43 f200 	asr.w	r2, r3, r0
 80058e2:	4414      	add	r4, r2
 80058e4:	4082      	lsls	r2, r0
 80058e6:	1a9b      	subs	r3, r3, r2
 80058e8:	aa0c      	add	r2, sp, #48	@ 0x30
 80058ea:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 80058ee:	f1ca 0217 	rsb	r2, sl, #23
 80058f2:	9405      	str	r4, [sp, #20]
 80058f4:	4113      	asrs	r3, r2
 80058f6:	9300      	str	r3, [sp, #0]
 80058f8:	9b00      	ldr	r3, [sp, #0]
 80058fa:	2b00      	cmp	r3, #0
 80058fc:	dd64      	ble.n	80059c8 <__kernel_rem_pio2+0x264>
 80058fe:	2200      	movs	r2, #0
 8005900:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005904:	4614      	mov	r4, r2
 8005906:	9b05      	ldr	r3, [sp, #20]
 8005908:	3301      	adds	r3, #1
 800590a:	9305      	str	r3, [sp, #20]
 800590c:	4593      	cmp	fp, r2
 800590e:	f300 80ab 	bgt.w	8005a68 <__kernel_rem_pio2+0x304>
 8005912:	f1ba 0f00 	cmp.w	sl, #0
 8005916:	dd07      	ble.n	8005928 <__kernel_rem_pio2+0x1c4>
 8005918:	f1ba 0f01 	cmp.w	sl, #1
 800591c:	f000 80b2 	beq.w	8005a84 <__kernel_rem_pio2+0x320>
 8005920:	f1ba 0f02 	cmp.w	sl, #2
 8005924:	f000 80b9 	beq.w	8005a9a <__kernel_rem_pio2+0x336>
 8005928:	9b00      	ldr	r3, [sp, #0]
 800592a:	2b02      	cmp	r3, #2
 800592c:	d14c      	bne.n	80059c8 <__kernel_rem_pio2+0x264>
 800592e:	4642      	mov	r2, r8
 8005930:	464b      	mov	r3, r9
 8005932:	2000      	movs	r0, #0
 8005934:	4947      	ldr	r1, [pc, #284]	@ (8005a54 <__kernel_rem_pio2+0x2f0>)
 8005936:	f7fa fc0f 	bl	8000158 <__aeabi_dsub>
 800593a:	4680      	mov	r8, r0
 800593c:	4689      	mov	r9, r1
 800593e:	2c00      	cmp	r4, #0
 8005940:	d042      	beq.n	80059c8 <__kernel_rem_pio2+0x264>
 8005942:	4652      	mov	r2, sl
 8005944:	2000      	movs	r0, #0
 8005946:	4943      	ldr	r1, [pc, #268]	@ (8005a54 <__kernel_rem_pio2+0x2f0>)
 8005948:	f000 fa32 	bl	8005db0 <scalbn>
 800594c:	4602      	mov	r2, r0
 800594e:	460b      	mov	r3, r1
 8005950:	4640      	mov	r0, r8
 8005952:	4649      	mov	r1, r9
 8005954:	f7fa fc00 	bl	8000158 <__aeabi_dsub>
 8005958:	4680      	mov	r8, r0
 800595a:	4689      	mov	r9, r1
 800595c:	e034      	b.n	80059c8 <__kernel_rem_pio2+0x264>
 800595e:	2200      	movs	r2, #0
 8005960:	4b3d      	ldr	r3, [pc, #244]	@ (8005a58 <__kernel_rem_pio2+0x2f4>)
 8005962:	4620      	mov	r0, r4
 8005964:	4629      	mov	r1, r5
 8005966:	f7fa fdaf 	bl	80004c8 <__aeabi_dmul>
 800596a:	f7fb f847 	bl	80009fc <__aeabi_d2iz>
 800596e:	f7fa fd41 	bl	80003f4 <__aeabi_i2d>
 8005972:	4602      	mov	r2, r0
 8005974:	460b      	mov	r3, r1
 8005976:	e9cd 2300 	strd	r2, r3, [sp]
 800597a:	2200      	movs	r2, #0
 800597c:	4b37      	ldr	r3, [pc, #220]	@ (8005a5c <__kernel_rem_pio2+0x2f8>)
 800597e:	f7fa fda3 	bl	80004c8 <__aeabi_dmul>
 8005982:	4602      	mov	r2, r0
 8005984:	460b      	mov	r3, r1
 8005986:	4620      	mov	r0, r4
 8005988:	4629      	mov	r1, r5
 800598a:	f7fa fbe5 	bl	8000158 <__aeabi_dsub>
 800598e:	f7fb f835 	bl	80009fc <__aeabi_d2iz>
 8005992:	e9d8 2300 	ldrd	r2, r3, [r8]
 8005996:	f849 0b04 	str.w	r0, [r9], #4
 800599a:	e9dd 0100 	ldrd	r0, r1, [sp]
 800599e:	f7fa fbdd 	bl	800015c <__adddf3>
 80059a2:	3f01      	subs	r7, #1
 80059a4:	4604      	mov	r4, r0
 80059a6:	460d      	mov	r5, r1
 80059a8:	e763      	b.n	8005872 <__kernel_rem_pio2+0x10e>
 80059aa:	d106      	bne.n	80059ba <__kernel_rem_pio2+0x256>
 80059ac:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80059b0:	aa0c      	add	r2, sp, #48	@ 0x30
 80059b2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80059b6:	15db      	asrs	r3, r3, #23
 80059b8:	e79d      	b.n	80058f6 <__kernel_rem_pio2+0x192>
 80059ba:	2200      	movs	r2, #0
 80059bc:	4b28      	ldr	r3, [pc, #160]	@ (8005a60 <__kernel_rem_pio2+0x2fc>)
 80059be:	f7fb f809 	bl	80009d4 <__aeabi_dcmpge>
 80059c2:	2800      	cmp	r0, #0
 80059c4:	d13f      	bne.n	8005a46 <__kernel_rem_pio2+0x2e2>
 80059c6:	9000      	str	r0, [sp, #0]
 80059c8:	2200      	movs	r2, #0
 80059ca:	2300      	movs	r3, #0
 80059cc:	4640      	mov	r0, r8
 80059ce:	4649      	mov	r1, r9
 80059d0:	f7fa ffe2 	bl	8000998 <__aeabi_dcmpeq>
 80059d4:	2800      	cmp	r0, #0
 80059d6:	f000 80af 	beq.w	8005b38 <__kernel_rem_pio2+0x3d4>
 80059da:	2200      	movs	r2, #0
 80059dc:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80059e0:	9902      	ldr	r1, [sp, #8]
 80059e2:	428b      	cmp	r3, r1
 80059e4:	da61      	bge.n	8005aaa <__kernel_rem_pio2+0x346>
 80059e6:	2a00      	cmp	r2, #0
 80059e8:	d076      	beq.n	8005ad8 <__kernel_rem_pio2+0x374>
 80059ea:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 80059ee:	ab0c      	add	r3, sp, #48	@ 0x30
 80059f0:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 80059f4:	f1aa 0a18 	sub.w	sl, sl, #24
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d0f6      	beq.n	80059ea <__kernel_rem_pio2+0x286>
 80059fc:	4652      	mov	r2, sl
 80059fe:	2000      	movs	r0, #0
 8005a00:	4914      	ldr	r1, [pc, #80]	@ (8005a54 <__kernel_rem_pio2+0x2f0>)
 8005a02:	f000 f9d5 	bl	8005db0 <scalbn>
 8005a06:	465d      	mov	r5, fp
 8005a08:	4606      	mov	r6, r0
 8005a0a:	460f      	mov	r7, r1
 8005a0c:	f04f 0900 	mov.w	r9, #0
 8005a10:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a12:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8005a58 <__kernel_rem_pio2+0x2f4>
 8005a16:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 8005a1a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 8005a1e:	2d00      	cmp	r5, #0
 8005a20:	f280 80c0 	bge.w	8005ba4 <__kernel_rem_pio2+0x440>
 8005a24:	465d      	mov	r5, fp
 8005a26:	2d00      	cmp	r5, #0
 8005a28:	f2c0 80f0 	blt.w	8005c0c <__kernel_rem_pio2+0x4a8>
 8005a2c:	4b0d      	ldr	r3, [pc, #52]	@ (8005a64 <__kernel_rem_pio2+0x300>)
 8005a2e:	f04f 0900 	mov.w	r9, #0
 8005a32:	9306      	str	r3, [sp, #24]
 8005a34:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005a36:	f04f 0a00 	mov.w	sl, #0
 8005a3a:	2700      	movs	r7, #0
 8005a3c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8005a40:	ebab 0605 	sub.w	r6, fp, r5
 8005a44:	e0d6      	b.n	8005bf4 <__kernel_rem_pio2+0x490>
 8005a46:	2302      	movs	r3, #2
 8005a48:	9300      	str	r3, [sp, #0]
 8005a4a:	e758      	b.n	80058fe <__kernel_rem_pio2+0x19a>
 8005a4c:	080061a8 	.word	0x080061a8
 8005a50:	40200000 	.word	0x40200000
 8005a54:	3ff00000 	.word	0x3ff00000
 8005a58:	3e700000 	.word	0x3e700000
 8005a5c:	41700000 	.word	0x41700000
 8005a60:	3fe00000 	.word	0x3fe00000
 8005a64:	08006168 	.word	0x08006168
 8005a68:	f856 3b04 	ldr.w	r3, [r6], #4
 8005a6c:	b944      	cbnz	r4, 8005a80 <__kernel_rem_pio2+0x31c>
 8005a6e:	b123      	cbz	r3, 8005a7a <__kernel_rem_pio2+0x316>
 8005a70:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 8005a74:	f846 3c04 	str.w	r3, [r6, #-4]
 8005a78:	2301      	movs	r3, #1
 8005a7a:	461c      	mov	r4, r3
 8005a7c:	3201      	adds	r2, #1
 8005a7e:	e745      	b.n	800590c <__kernel_rem_pio2+0x1a8>
 8005a80:	1acb      	subs	r3, r1, r3
 8005a82:	e7f7      	b.n	8005a74 <__kernel_rem_pio2+0x310>
 8005a84:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8005a88:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a8e:	f3c3 0316 	ubfx	r3, r3, #0, #23
 8005a92:	a90c      	add	r1, sp, #48	@ 0x30
 8005a94:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 8005a98:	e746      	b.n	8005928 <__kernel_rem_pio2+0x1c4>
 8005a9a:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 8005a9e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005aa0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005aa4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005aa8:	e7f3      	b.n	8005a92 <__kernel_rem_pio2+0x32e>
 8005aaa:	a90c      	add	r1, sp, #48	@ 0x30
 8005aac:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005ab0:	3b01      	subs	r3, #1
 8005ab2:	430a      	orrs	r2, r1
 8005ab4:	e794      	b.n	80059e0 <__kernel_rem_pio2+0x27c>
 8005ab6:	3401      	adds	r4, #1
 8005ab8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005abc:	2a00      	cmp	r2, #0
 8005abe:	d0fa      	beq.n	8005ab6 <__kernel_rem_pio2+0x352>
 8005ac0:	9b08      	ldr	r3, [sp, #32]
 8005ac2:	aa20      	add	r2, sp, #128	@ 0x80
 8005ac4:	445b      	add	r3, fp
 8005ac6:	f10b 0801 	add.w	r8, fp, #1
 8005aca:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005ace:	445c      	add	r4, fp
 8005ad0:	4544      	cmp	r4, r8
 8005ad2:	da04      	bge.n	8005ade <__kernel_rem_pio2+0x37a>
 8005ad4:	46a3      	mov	fp, r4
 8005ad6:	e6bf      	b.n	8005858 <__kernel_rem_pio2+0xf4>
 8005ad8:	2401      	movs	r4, #1
 8005ada:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005adc:	e7ec      	b.n	8005ab8 <__kernel_rem_pio2+0x354>
 8005ade:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005ae0:	46ab      	mov	fp, r5
 8005ae2:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005ae6:	f7fa fc85 	bl	80003f4 <__aeabi_i2d>
 8005aea:	f04f 0900 	mov.w	r9, #0
 8005aee:	2600      	movs	r6, #0
 8005af0:	2700      	movs	r7, #0
 8005af2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005af4:	e9c5 0100 	strd	r0, r1, [r5]
 8005af8:	3b08      	subs	r3, #8
 8005afa:	9300      	str	r3, [sp, #0]
 8005afc:	9b06      	ldr	r3, [sp, #24]
 8005afe:	4599      	cmp	r9, r3
 8005b00:	dd07      	ble.n	8005b12 <__kernel_rem_pio2+0x3ae>
 8005b02:	9b07      	ldr	r3, [sp, #28]
 8005b04:	f108 0801 	add.w	r8, r8, #1
 8005b08:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8005b0c:	3508      	adds	r5, #8
 8005b0e:	9307      	str	r3, [sp, #28]
 8005b10:	e7de      	b.n	8005ad0 <__kernel_rem_pio2+0x36c>
 8005b12:	9900      	ldr	r1, [sp, #0]
 8005b14:	f109 0901 	add.w	r9, r9, #1
 8005b18:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005b1c:	9100      	str	r1, [sp, #0]
 8005b1e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8005b22:	f7fa fcd1 	bl	80004c8 <__aeabi_dmul>
 8005b26:	4602      	mov	r2, r0
 8005b28:	460b      	mov	r3, r1
 8005b2a:	4630      	mov	r0, r6
 8005b2c:	4639      	mov	r1, r7
 8005b2e:	f7fa fb15 	bl	800015c <__adddf3>
 8005b32:	4606      	mov	r6, r0
 8005b34:	460f      	mov	r7, r1
 8005b36:	e7e1      	b.n	8005afc <__kernel_rem_pio2+0x398>
 8005b38:	f1ca 0200 	rsb	r2, sl, #0
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f000 f936 	bl	8005db0 <scalbn>
 8005b44:	2200      	movs	r2, #0
 8005b46:	4b97      	ldr	r3, [pc, #604]	@ (8005da4 <__kernel_rem_pio2+0x640>)
 8005b48:	4604      	mov	r4, r0
 8005b4a:	460d      	mov	r5, r1
 8005b4c:	f7fa ff42 	bl	80009d4 <__aeabi_dcmpge>
 8005b50:	b300      	cbz	r0, 8005b94 <__kernel_rem_pio2+0x430>
 8005b52:	2200      	movs	r2, #0
 8005b54:	4b94      	ldr	r3, [pc, #592]	@ (8005da8 <__kernel_rem_pio2+0x644>)
 8005b56:	4620      	mov	r0, r4
 8005b58:	4629      	mov	r1, r5
 8005b5a:	f7fa fcb5 	bl	80004c8 <__aeabi_dmul>
 8005b5e:	f7fa ff4d 	bl	80009fc <__aeabi_d2iz>
 8005b62:	4606      	mov	r6, r0
 8005b64:	f7fa fc46 	bl	80003f4 <__aeabi_i2d>
 8005b68:	2200      	movs	r2, #0
 8005b6a:	4b8e      	ldr	r3, [pc, #568]	@ (8005da4 <__kernel_rem_pio2+0x640>)
 8005b6c:	f7fa fcac 	bl	80004c8 <__aeabi_dmul>
 8005b70:	460b      	mov	r3, r1
 8005b72:	4602      	mov	r2, r0
 8005b74:	4629      	mov	r1, r5
 8005b76:	4620      	mov	r0, r4
 8005b78:	f7fa faee 	bl	8000158 <__aeabi_dsub>
 8005b7c:	f7fa ff3e 	bl	80009fc <__aeabi_d2iz>
 8005b80:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b82:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005b86:	f10b 0b01 	add.w	fp, fp, #1
 8005b8a:	f10a 0a18 	add.w	sl, sl, #24
 8005b8e:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005b92:	e733      	b.n	80059fc <__kernel_rem_pio2+0x298>
 8005b94:	4620      	mov	r0, r4
 8005b96:	4629      	mov	r1, r5
 8005b98:	f7fa ff30 	bl	80009fc <__aeabi_d2iz>
 8005b9c:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b9e:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005ba2:	e72b      	b.n	80059fc <__kernel_rem_pio2+0x298>
 8005ba4:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ba6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005baa:	f7fa fc23 	bl	80003f4 <__aeabi_i2d>
 8005bae:	4632      	mov	r2, r6
 8005bb0:	463b      	mov	r3, r7
 8005bb2:	f7fa fc89 	bl	80004c8 <__aeabi_dmul>
 8005bb6:	464a      	mov	r2, r9
 8005bb8:	e868 0102 	strd	r0, r1, [r8], #-8
 8005bbc:	4653      	mov	r3, sl
 8005bbe:	4630      	mov	r0, r6
 8005bc0:	4639      	mov	r1, r7
 8005bc2:	f7fa fc81 	bl	80004c8 <__aeabi_dmul>
 8005bc6:	3d01      	subs	r5, #1
 8005bc8:	4606      	mov	r6, r0
 8005bca:	460f      	mov	r7, r1
 8005bcc:	e727      	b.n	8005a1e <__kernel_rem_pio2+0x2ba>
 8005bce:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005bd2:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005bd6:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005bda:	f8cd c018 	str.w	ip, [sp, #24]
 8005bde:	f7fa fc73 	bl	80004c8 <__aeabi_dmul>
 8005be2:	4602      	mov	r2, r0
 8005be4:	460b      	mov	r3, r1
 8005be6:	4648      	mov	r0, r9
 8005be8:	4651      	mov	r1, sl
 8005bea:	f7fa fab7 	bl	800015c <__adddf3>
 8005bee:	4681      	mov	r9, r0
 8005bf0:	468a      	mov	sl, r1
 8005bf2:	3701      	adds	r7, #1
 8005bf4:	9b02      	ldr	r3, [sp, #8]
 8005bf6:	429f      	cmp	r7, r3
 8005bf8:	dc01      	bgt.n	8005bfe <__kernel_rem_pio2+0x49a>
 8005bfa:	42be      	cmp	r6, r7
 8005bfc:	dae7      	bge.n	8005bce <__kernel_rem_pio2+0x46a>
 8005bfe:	ab48      	add	r3, sp, #288	@ 0x120
 8005c00:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005c04:	e9c6 9a00 	strd	r9, sl, [r6]
 8005c08:	3d01      	subs	r5, #1
 8005c0a:	e70c      	b.n	8005a26 <__kernel_rem_pio2+0x2c2>
 8005c0c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005c0e:	2b02      	cmp	r3, #2
 8005c10:	dc09      	bgt.n	8005c26 <__kernel_rem_pio2+0x4c2>
 8005c12:	2b00      	cmp	r3, #0
 8005c14:	dc2c      	bgt.n	8005c70 <__kernel_rem_pio2+0x50c>
 8005c16:	d04e      	beq.n	8005cb6 <__kernel_rem_pio2+0x552>
 8005c18:	9b05      	ldr	r3, [sp, #20]
 8005c1a:	f003 0007 	and.w	r0, r3, #7
 8005c1e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005c22:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005c26:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005c28:	2b03      	cmp	r3, #3
 8005c2a:	d1f5      	bne.n	8005c18 <__kernel_rem_pio2+0x4b4>
 8005c2c:	ab48      	add	r3, sp, #288	@ 0x120
 8005c2e:	441c      	add	r4, r3
 8005c30:	4625      	mov	r5, r4
 8005c32:	46da      	mov	sl, fp
 8005c34:	f1ba 0f00 	cmp.w	sl, #0
 8005c38:	dc63      	bgt.n	8005d02 <__kernel_rem_pio2+0x59e>
 8005c3a:	4625      	mov	r5, r4
 8005c3c:	46da      	mov	sl, fp
 8005c3e:	f1ba 0f01 	cmp.w	sl, #1
 8005c42:	dc7b      	bgt.n	8005d3c <__kernel_rem_pio2+0x5d8>
 8005c44:	2000      	movs	r0, #0
 8005c46:	2100      	movs	r1, #0
 8005c48:	f1bb 0f01 	cmp.w	fp, #1
 8005c4c:	f300 8093 	bgt.w	8005d76 <__kernel_rem_pio2+0x612>
 8005c50:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005c54:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005c58:	9b00      	ldr	r3, [sp, #0]
 8005c5a:	2b00      	cmp	r3, #0
 8005c5c:	f040 8092 	bne.w	8005d84 <__kernel_rem_pio2+0x620>
 8005c60:	9b04      	ldr	r3, [sp, #16]
 8005c62:	e9c3 7800 	strd	r7, r8, [r3]
 8005c66:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005c6a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005c6e:	e7d3      	b.n	8005c18 <__kernel_rem_pio2+0x4b4>
 8005c70:	465d      	mov	r5, fp
 8005c72:	2000      	movs	r0, #0
 8005c74:	2100      	movs	r1, #0
 8005c76:	ab48      	add	r3, sp, #288	@ 0x120
 8005c78:	441c      	add	r4, r3
 8005c7a:	2d00      	cmp	r5, #0
 8005c7c:	da32      	bge.n	8005ce4 <__kernel_rem_pio2+0x580>
 8005c7e:	9b00      	ldr	r3, [sp, #0]
 8005c80:	2b00      	cmp	r3, #0
 8005c82:	d035      	beq.n	8005cf0 <__kernel_rem_pio2+0x58c>
 8005c84:	4602      	mov	r2, r0
 8005c86:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c8a:	9c04      	ldr	r4, [sp, #16]
 8005c8c:	2501      	movs	r5, #1
 8005c8e:	e9c4 2300 	strd	r2, r3, [r4]
 8005c92:	4602      	mov	r2, r0
 8005c94:	460b      	mov	r3, r1
 8005c96:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005c9a:	f7fa fa5d 	bl	8000158 <__aeabi_dsub>
 8005c9e:	ac48      	add	r4, sp, #288	@ 0x120
 8005ca0:	45ab      	cmp	fp, r5
 8005ca2:	da28      	bge.n	8005cf6 <__kernel_rem_pio2+0x592>
 8005ca4:	9b00      	ldr	r3, [sp, #0]
 8005ca6:	b113      	cbz	r3, 8005cae <__kernel_rem_pio2+0x54a>
 8005ca8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cac:	4619      	mov	r1, r3
 8005cae:	9b04      	ldr	r3, [sp, #16]
 8005cb0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005cb4:	e7b0      	b.n	8005c18 <__kernel_rem_pio2+0x4b4>
 8005cb6:	2000      	movs	r0, #0
 8005cb8:	2100      	movs	r1, #0
 8005cba:	ab48      	add	r3, sp, #288	@ 0x120
 8005cbc:	441c      	add	r4, r3
 8005cbe:	f1bb 0f00 	cmp.w	fp, #0
 8005cc2:	da08      	bge.n	8005cd6 <__kernel_rem_pio2+0x572>
 8005cc4:	9b00      	ldr	r3, [sp, #0]
 8005cc6:	b113      	cbz	r3, 8005cce <__kernel_rem_pio2+0x56a>
 8005cc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005ccc:	4619      	mov	r1, r3
 8005cce:	9b04      	ldr	r3, [sp, #16]
 8005cd0:	e9c3 0100 	strd	r0, r1, [r3]
 8005cd4:	e7a0      	b.n	8005c18 <__kernel_rem_pio2+0x4b4>
 8005cd6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005cda:	f7fa fa3f 	bl	800015c <__adddf3>
 8005cde:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005ce2:	e7ec      	b.n	8005cbe <__kernel_rem_pio2+0x55a>
 8005ce4:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005ce8:	f7fa fa38 	bl	800015c <__adddf3>
 8005cec:	3d01      	subs	r5, #1
 8005cee:	e7c4      	b.n	8005c7a <__kernel_rem_pio2+0x516>
 8005cf0:	4602      	mov	r2, r0
 8005cf2:	460b      	mov	r3, r1
 8005cf4:	e7c9      	b.n	8005c8a <__kernel_rem_pio2+0x526>
 8005cf6:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8005cfa:	f7fa fa2f 	bl	800015c <__adddf3>
 8005cfe:	3501      	adds	r5, #1
 8005d00:	e7ce      	b.n	8005ca0 <__kernel_rem_pio2+0x53c>
 8005d02:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d06:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005d0a:	4640      	mov	r0, r8
 8005d0c:	4649      	mov	r1, r9
 8005d0e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d12:	f7fa fa23 	bl	800015c <__adddf3>
 8005d16:	4602      	mov	r2, r0
 8005d18:	460b      	mov	r3, r1
 8005d1a:	4606      	mov	r6, r0
 8005d1c:	460f      	mov	r7, r1
 8005d1e:	4640      	mov	r0, r8
 8005d20:	4649      	mov	r1, r9
 8005d22:	f7fa fa19 	bl	8000158 <__aeabi_dsub>
 8005d26:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d2a:	f7fa fa17 	bl	800015c <__adddf3>
 8005d2e:	e865 0102 	strd	r0, r1, [r5], #-8
 8005d32:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005d36:	e9c5 6700 	strd	r6, r7, [r5]
 8005d3a:	e77b      	b.n	8005c34 <__kernel_rem_pio2+0x4d0>
 8005d3c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005d40:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005d44:	4640      	mov	r0, r8
 8005d46:	4649      	mov	r1, r9
 8005d48:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005d4c:	f7fa fa06 	bl	800015c <__adddf3>
 8005d50:	4602      	mov	r2, r0
 8005d52:	460b      	mov	r3, r1
 8005d54:	4606      	mov	r6, r0
 8005d56:	460f      	mov	r7, r1
 8005d58:	4640      	mov	r0, r8
 8005d5a:	4649      	mov	r1, r9
 8005d5c:	f7fa f9fc 	bl	8000158 <__aeabi_dsub>
 8005d60:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005d64:	f7fa f9fa 	bl	800015c <__adddf3>
 8005d68:	e865 0102 	strd	r0, r1, [r5], #-8
 8005d6c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005d70:	e9c5 6700 	strd	r6, r7, [r5]
 8005d74:	e763      	b.n	8005c3e <__kernel_rem_pio2+0x4da>
 8005d76:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005d7a:	f7fa f9ef 	bl	800015c <__adddf3>
 8005d7e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005d82:	e761      	b.n	8005c48 <__kernel_rem_pio2+0x4e4>
 8005d84:	9b04      	ldr	r3, [sp, #16]
 8005d86:	9a04      	ldr	r2, [sp, #16]
 8005d88:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005d8c:	601f      	str	r7, [r3, #0]
 8005d8e:	605c      	str	r4, [r3, #4]
 8005d90:	609d      	str	r5, [r3, #8]
 8005d92:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005d96:	60d3      	str	r3, [r2, #12]
 8005d98:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005d9c:	6110      	str	r0, [r2, #16]
 8005d9e:	6153      	str	r3, [r2, #20]
 8005da0:	e73a      	b.n	8005c18 <__kernel_rem_pio2+0x4b4>
 8005da2:	bf00      	nop
 8005da4:	41700000 	.word	0x41700000
 8005da8:	3e700000 	.word	0x3e700000
 8005dac:	00000000 	.word	0x00000000

08005db0 <scalbn>:
 8005db0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005db4:	4616      	mov	r6, r2
 8005db6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dba:	4683      	mov	fp, r0
 8005dbc:	468c      	mov	ip, r1
 8005dbe:	460b      	mov	r3, r1
 8005dc0:	b982      	cbnz	r2, 8005de4 <scalbn+0x34>
 8005dc2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005dc6:	4303      	orrs	r3, r0
 8005dc8:	d039      	beq.n	8005e3e <scalbn+0x8e>
 8005dca:	4b2f      	ldr	r3, [pc, #188]	@ (8005e88 <scalbn+0xd8>)
 8005dcc:	2200      	movs	r2, #0
 8005dce:	f7fa fb7b 	bl	80004c8 <__aeabi_dmul>
 8005dd2:	4b2e      	ldr	r3, [pc, #184]	@ (8005e8c <scalbn+0xdc>)
 8005dd4:	4683      	mov	fp, r0
 8005dd6:	429e      	cmp	r6, r3
 8005dd8:	468c      	mov	ip, r1
 8005dda:	da0d      	bge.n	8005df8 <scalbn+0x48>
 8005ddc:	a326      	add	r3, pc, #152	@ (adr r3, 8005e78 <scalbn+0xc8>)
 8005dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005de2:	e01b      	b.n	8005e1c <scalbn+0x6c>
 8005de4:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005de8:	42ba      	cmp	r2, r7
 8005dea:	d109      	bne.n	8005e00 <scalbn+0x50>
 8005dec:	4602      	mov	r2, r0
 8005dee:	f7fa f9b5 	bl	800015c <__adddf3>
 8005df2:	4683      	mov	fp, r0
 8005df4:	468c      	mov	ip, r1
 8005df6:	e022      	b.n	8005e3e <scalbn+0x8e>
 8005df8:	460b      	mov	r3, r1
 8005dfa:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005dfe:	3a36      	subs	r2, #54	@ 0x36
 8005e00:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005e04:	428e      	cmp	r6, r1
 8005e06:	dd0c      	ble.n	8005e22 <scalbn+0x72>
 8005e08:	a31d      	add	r3, pc, #116	@ (adr r3, 8005e80 <scalbn+0xd0>)
 8005e0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0e:	461c      	mov	r4, r3
 8005e10:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005e14:	f361 74df 	bfi	r4, r1, #31, #1
 8005e18:	4621      	mov	r1, r4
 8005e1a:	481d      	ldr	r0, [pc, #116]	@ (8005e90 <scalbn+0xe0>)
 8005e1c:	f7fa fb54 	bl	80004c8 <__aeabi_dmul>
 8005e20:	e7e7      	b.n	8005df2 <scalbn+0x42>
 8005e22:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005e26:	4432      	add	r2, r6
 8005e28:	428a      	cmp	r2, r1
 8005e2a:	dced      	bgt.n	8005e08 <scalbn+0x58>
 8005e2c:	2a00      	cmp	r2, #0
 8005e2e:	dd0a      	ble.n	8005e46 <scalbn+0x96>
 8005e30:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005e34:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e38:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e3c:	46ac      	mov	ip, r5
 8005e3e:	4658      	mov	r0, fp
 8005e40:	4661      	mov	r1, ip
 8005e42:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005e46:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005e4a:	da09      	bge.n	8005e60 <scalbn+0xb0>
 8005e4c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005e50:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005e54:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005e58:	480e      	ldr	r0, [pc, #56]	@ (8005e94 <scalbn+0xe4>)
 8005e5a:	f041 011f 	orr.w	r1, r1, #31
 8005e5e:	e7bd      	b.n	8005ddc <scalbn+0x2c>
 8005e60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005e64:	3236      	adds	r2, #54	@ 0x36
 8005e66:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005e6a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005e6e:	4658      	mov	r0, fp
 8005e70:	4629      	mov	r1, r5
 8005e72:	2200      	movs	r2, #0
 8005e74:	4b08      	ldr	r3, [pc, #32]	@ (8005e98 <scalbn+0xe8>)
 8005e76:	e7d1      	b.n	8005e1c <scalbn+0x6c>
 8005e78:	c2f8f359 	.word	0xc2f8f359
 8005e7c:	01a56e1f 	.word	0x01a56e1f
 8005e80:	8800759c 	.word	0x8800759c
 8005e84:	7e37e43c 	.word	0x7e37e43c
 8005e88:	43500000 	.word	0x43500000
 8005e8c:	ffff3cb0 	.word	0xffff3cb0
 8005e90:	8800759c 	.word	0x8800759c
 8005e94:	c2f8f359 	.word	0xc2f8f359
 8005e98:	3c900000 	.word	0x3c900000
 8005e9c:	00000000 	.word	0x00000000

08005ea0 <floor>:
 8005ea0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005ea4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005ea8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8005eac:	2e13      	cmp	r6, #19
 8005eae:	4602      	mov	r2, r0
 8005eb0:	460b      	mov	r3, r1
 8005eb2:	460c      	mov	r4, r1
 8005eb4:	4605      	mov	r5, r0
 8005eb6:	4680      	mov	r8, r0
 8005eb8:	dc35      	bgt.n	8005f26 <floor+0x86>
 8005eba:	2e00      	cmp	r6, #0
 8005ebc:	da17      	bge.n	8005eee <floor+0x4e>
 8005ebe:	a334      	add	r3, pc, #208	@ (adr r3, 8005f90 <floor+0xf0>)
 8005ec0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ec4:	f7fa f94a 	bl	800015c <__adddf3>
 8005ec8:	2200      	movs	r2, #0
 8005eca:	2300      	movs	r3, #0
 8005ecc:	f7fa fd8c 	bl	80009e8 <__aeabi_dcmpgt>
 8005ed0:	b150      	cbz	r0, 8005ee8 <floor+0x48>
 8005ed2:	2c00      	cmp	r4, #0
 8005ed4:	da57      	bge.n	8005f86 <floor+0xe6>
 8005ed6:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005eda:	432c      	orrs	r4, r5
 8005edc:	2500      	movs	r5, #0
 8005ede:	42ac      	cmp	r4, r5
 8005ee0:	4c2d      	ldr	r4, [pc, #180]	@ (8005f98 <floor+0xf8>)
 8005ee2:	bf08      	it	eq
 8005ee4:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005ee8:	4623      	mov	r3, r4
 8005eea:	462a      	mov	r2, r5
 8005eec:	e024      	b.n	8005f38 <floor+0x98>
 8005eee:	4f2b      	ldr	r7, [pc, #172]	@ (8005f9c <floor+0xfc>)
 8005ef0:	4137      	asrs	r7, r6
 8005ef2:	ea01 0c07 	and.w	ip, r1, r7
 8005ef6:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005efa:	d01d      	beq.n	8005f38 <floor+0x98>
 8005efc:	a324      	add	r3, pc, #144	@ (adr r3, 8005f90 <floor+0xf0>)
 8005efe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f02:	f7fa f92b 	bl	800015c <__adddf3>
 8005f06:	2200      	movs	r2, #0
 8005f08:	2300      	movs	r3, #0
 8005f0a:	f7fa fd6d 	bl	80009e8 <__aeabi_dcmpgt>
 8005f0e:	2800      	cmp	r0, #0
 8005f10:	d0ea      	beq.n	8005ee8 <floor+0x48>
 8005f12:	2c00      	cmp	r4, #0
 8005f14:	bfbe      	ittt	lt
 8005f16:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005f1a:	4133      	asrlt	r3, r6
 8005f1c:	18e4      	addlt	r4, r4, r3
 8005f1e:	2500      	movs	r5, #0
 8005f20:	ea24 0407 	bic.w	r4, r4, r7
 8005f24:	e7e0      	b.n	8005ee8 <floor+0x48>
 8005f26:	2e33      	cmp	r6, #51	@ 0x33
 8005f28:	dd0a      	ble.n	8005f40 <floor+0xa0>
 8005f2a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005f2e:	d103      	bne.n	8005f38 <floor+0x98>
 8005f30:	f7fa f914 	bl	800015c <__adddf3>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4610      	mov	r0, r2
 8005f3a:	4619      	mov	r1, r3
 8005f3c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005f40:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8005f44:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005f48:	fa2c f707 	lsr.w	r7, ip, r7
 8005f4c:	4207      	tst	r7, r0
 8005f4e:	d0f3      	beq.n	8005f38 <floor+0x98>
 8005f50:	a30f      	add	r3, pc, #60	@ (adr r3, 8005f90 <floor+0xf0>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	f7fa f901 	bl	800015c <__adddf3>
 8005f5a:	2200      	movs	r2, #0
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	f7fa fd43 	bl	80009e8 <__aeabi_dcmpgt>
 8005f62:	2800      	cmp	r0, #0
 8005f64:	d0c0      	beq.n	8005ee8 <floor+0x48>
 8005f66:	2c00      	cmp	r4, #0
 8005f68:	da0a      	bge.n	8005f80 <floor+0xe0>
 8005f6a:	2e14      	cmp	r6, #20
 8005f6c:	d101      	bne.n	8005f72 <floor+0xd2>
 8005f6e:	3401      	adds	r4, #1
 8005f70:	e006      	b.n	8005f80 <floor+0xe0>
 8005f72:	2301      	movs	r3, #1
 8005f74:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005f78:	40b3      	lsls	r3, r6
 8005f7a:	441d      	add	r5, r3
 8005f7c:	4545      	cmp	r5, r8
 8005f7e:	d3f6      	bcc.n	8005f6e <floor+0xce>
 8005f80:	ea25 0507 	bic.w	r5, r5, r7
 8005f84:	e7b0      	b.n	8005ee8 <floor+0x48>
 8005f86:	2500      	movs	r5, #0
 8005f88:	462c      	mov	r4, r5
 8005f8a:	e7ad      	b.n	8005ee8 <floor+0x48>
 8005f8c:	f3af 8000 	nop.w
 8005f90:	8800759c 	.word	0x8800759c
 8005f94:	7e37e43c 	.word	0x7e37e43c
 8005f98:	bff00000 	.word	0xbff00000
 8005f9c:	000fffff 	.word	0x000fffff

08005fa0 <_init>:
 8005fa0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fa2:	bf00      	nop
 8005fa4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fa6:	bc08      	pop	{r3}
 8005fa8:	469e      	mov	lr, r3
 8005faa:	4770      	bx	lr

08005fac <_fini>:
 8005fac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005fae:	bf00      	nop
 8005fb0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005fb2:	bc08      	pop	{r3}
 8005fb4:	469e      	mov	lr, r3
 8005fb6:	4770      	bx	lr
