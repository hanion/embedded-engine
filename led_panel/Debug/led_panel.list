
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005e60  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000200  08005f70  08005f70  00006f70  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08006170  08006170  000081e4  2**0
                  CONTENTS
  4 .ARM          00000000  08006170  08006170  000081e4  2**0
                  CONTENTS
  5 .preinit_array 00000000  08006170  08006170  000081e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08006170  08006170  00007170  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08006174  08006174  00007174  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001e4  20000000  08006178  00008000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00001164  200001e8  0800635c  000081e8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000134c  0800635c  0000834c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000081e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000af8e  00000000  00000000  0000820d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001fc8  00000000  00000000  0001319b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000cd0  00000000  00000000  00015168  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ed  00000000  00000000  00015e38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018249  00000000  00000000  00016825  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000dd50  00000000  00000000  0002ea6e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a929  00000000  00000000  0003c7be  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c70e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ab4  00000000  00000000  000c712c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cabe0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001e8 	.word	0x200001e8
 800012c:	00000000 	.word	0x00000000
 8000130:	08005f58 	.word	0x08005f58

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001ec 	.word	0x200001ec
 800014c:	08005f58 	.word	0x08005f58

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <__aeabi_d2f>:
 8000a4c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a50:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000a54:	bf24      	itt	cs
 8000a56:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000a5a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000a5e:	d90d      	bls.n	8000a7c <__aeabi_d2f+0x30>
 8000a60:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000a64:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000a68:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000a6c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000a70:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000a74:	bf08      	it	eq
 8000a76:	f020 0001 	biceq.w	r0, r0, #1
 8000a7a:	4770      	bx	lr
 8000a7c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000a80:	d121      	bne.n	8000ac6 <__aeabi_d2f+0x7a>
 8000a82:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000a86:	bfbc      	itt	lt
 8000a88:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000a8c:	4770      	bxlt	lr
 8000a8e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000a92:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000a96:	f1c2 0218 	rsb	r2, r2, #24
 8000a9a:	f1c2 0c20 	rsb	ip, r2, #32
 8000a9e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000aa2:	fa20 f002 	lsr.w	r0, r0, r2
 8000aa6:	bf18      	it	ne
 8000aa8:	f040 0001 	orrne.w	r0, r0, #1
 8000aac:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000ab4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000ab8:	ea40 000c 	orr.w	r0, r0, ip
 8000abc:	fa23 f302 	lsr.w	r3, r3, r2
 8000ac0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ac4:	e7cc      	b.n	8000a60 <__aeabi_d2f+0x14>
 8000ac6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000aca:	d107      	bne.n	8000adc <__aeabi_d2f+0x90>
 8000acc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000ad0:	bf1e      	ittt	ne
 8000ad2:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000ad6:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000ada:	4770      	bxne	lr
 8000adc:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000ae0:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000ae4:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_frsub>:
 8000aec:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000af0:	e002      	b.n	8000af8 <__addsf3>
 8000af2:	bf00      	nop

08000af4 <__aeabi_fsub>:
 8000af4:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000af8 <__addsf3>:
 8000af8:	0042      	lsls	r2, r0, #1
 8000afa:	bf1f      	itttt	ne
 8000afc:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b00:	ea92 0f03 	teqne	r2, r3
 8000b04:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b08:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b0c:	d06a      	beq.n	8000be4 <__addsf3+0xec>
 8000b0e:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b12:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b16:	bfc1      	itttt	gt
 8000b18:	18d2      	addgt	r2, r2, r3
 8000b1a:	4041      	eorgt	r1, r0
 8000b1c:	4048      	eorgt	r0, r1
 8000b1e:	4041      	eorgt	r1, r0
 8000b20:	bfb8      	it	lt
 8000b22:	425b      	neglt	r3, r3
 8000b24:	2b19      	cmp	r3, #25
 8000b26:	bf88      	it	hi
 8000b28:	4770      	bxhi	lr
 8000b2a:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000b2e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000b32:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 8000b36:	bf18      	it	ne
 8000b38:	4240      	negne	r0, r0
 8000b3a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b3e:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 8000b42:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 8000b46:	bf18      	it	ne
 8000b48:	4249      	negne	r1, r1
 8000b4a:	ea92 0f03 	teq	r2, r3
 8000b4e:	d03f      	beq.n	8000bd0 <__addsf3+0xd8>
 8000b50:	f1a2 0201 	sub.w	r2, r2, #1
 8000b54:	fa41 fc03 	asr.w	ip, r1, r3
 8000b58:	eb10 000c 	adds.w	r0, r0, ip
 8000b5c:	f1c3 0320 	rsb	r3, r3, #32
 8000b60:	fa01 f103 	lsl.w	r1, r1, r3
 8000b64:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000b68:	d502      	bpl.n	8000b70 <__addsf3+0x78>
 8000b6a:	4249      	negs	r1, r1
 8000b6c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000b70:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000b74:	d313      	bcc.n	8000b9e <__addsf3+0xa6>
 8000b76:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000b7a:	d306      	bcc.n	8000b8a <__addsf3+0x92>
 8000b7c:	0840      	lsrs	r0, r0, #1
 8000b7e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000b82:	f102 0201 	add.w	r2, r2, #1
 8000b86:	2afe      	cmp	r2, #254	@ 0xfe
 8000b88:	d251      	bcs.n	8000c2e <__addsf3+0x136>
 8000b8a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000b8e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000b92:	bf08      	it	eq
 8000b94:	f020 0001 	biceq.w	r0, r0, #1
 8000b98:	ea40 0003 	orr.w	r0, r0, r3
 8000b9c:	4770      	bx	lr
 8000b9e:	0049      	lsls	r1, r1, #1
 8000ba0:	eb40 0000 	adc.w	r0, r0, r0
 8000ba4:	3a01      	subs	r2, #1
 8000ba6:	bf28      	it	cs
 8000ba8:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000bac:	d2ed      	bcs.n	8000b8a <__addsf3+0x92>
 8000bae:	fab0 fc80 	clz	ip, r0
 8000bb2:	f1ac 0c08 	sub.w	ip, ip, #8
 8000bb6:	ebb2 020c 	subs.w	r2, r2, ip
 8000bba:	fa00 f00c 	lsl.w	r0, r0, ip
 8000bbe:	bfaa      	itet	ge
 8000bc0:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000bc4:	4252      	neglt	r2, r2
 8000bc6:	4318      	orrge	r0, r3
 8000bc8:	bfbc      	itt	lt
 8000bca:	40d0      	lsrlt	r0, r2
 8000bcc:	4318      	orrlt	r0, r3
 8000bce:	4770      	bx	lr
 8000bd0:	f092 0f00 	teq	r2, #0
 8000bd4:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000bd8:	bf06      	itte	eq
 8000bda:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000bde:	3201      	addeq	r2, #1
 8000be0:	3b01      	subne	r3, #1
 8000be2:	e7b5      	b.n	8000b50 <__addsf3+0x58>
 8000be4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000be8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000bec:	bf18      	it	ne
 8000bee:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000bf2:	d021      	beq.n	8000c38 <__addsf3+0x140>
 8000bf4:	ea92 0f03 	teq	r2, r3
 8000bf8:	d004      	beq.n	8000c04 <__addsf3+0x10c>
 8000bfa:	f092 0f00 	teq	r2, #0
 8000bfe:	bf08      	it	eq
 8000c00:	4608      	moveq	r0, r1
 8000c02:	4770      	bx	lr
 8000c04:	ea90 0f01 	teq	r0, r1
 8000c08:	bf1c      	itt	ne
 8000c0a:	2000      	movne	r0, #0
 8000c0c:	4770      	bxne	lr
 8000c0e:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000c12:	d104      	bne.n	8000c1e <__addsf3+0x126>
 8000c14:	0040      	lsls	r0, r0, #1
 8000c16:	bf28      	it	cs
 8000c18:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000c1c:	4770      	bx	lr
 8000c1e:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000c22:	bf3c      	itt	cc
 8000c24:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000c28:	4770      	bxcc	lr
 8000c2a:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000c2e:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c36:	4770      	bx	lr
 8000c38:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000c3c:	bf16      	itet	ne
 8000c3e:	4608      	movne	r0, r1
 8000c40:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000c44:	4601      	movne	r1, r0
 8000c46:	0242      	lsls	r2, r0, #9
 8000c48:	bf06      	itte	eq
 8000c4a:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000c4e:	ea90 0f01 	teqeq	r0, r1
 8000c52:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000c56:	4770      	bx	lr

08000c58 <__aeabi_ui2f>:
 8000c58:	f04f 0300 	mov.w	r3, #0
 8000c5c:	e004      	b.n	8000c68 <__aeabi_i2f+0x8>
 8000c5e:	bf00      	nop

08000c60 <__aeabi_i2f>:
 8000c60:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000c64:	bf48      	it	mi
 8000c66:	4240      	negmi	r0, r0
 8000c68:	ea5f 0c00 	movs.w	ip, r0
 8000c6c:	bf08      	it	eq
 8000c6e:	4770      	bxeq	lr
 8000c70:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000c74:	4601      	mov	r1, r0
 8000c76:	f04f 0000 	mov.w	r0, #0
 8000c7a:	e01c      	b.n	8000cb6 <__aeabi_l2f+0x2a>

08000c7c <__aeabi_ul2f>:
 8000c7c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c80:	bf08      	it	eq
 8000c82:	4770      	bxeq	lr
 8000c84:	f04f 0300 	mov.w	r3, #0
 8000c88:	e00a      	b.n	8000ca0 <__aeabi_l2f+0x14>
 8000c8a:	bf00      	nop

08000c8c <__aeabi_l2f>:
 8000c8c:	ea50 0201 	orrs.w	r2, r0, r1
 8000c90:	bf08      	it	eq
 8000c92:	4770      	bxeq	lr
 8000c94:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000c98:	d502      	bpl.n	8000ca0 <__aeabi_l2f+0x14>
 8000c9a:	4240      	negs	r0, r0
 8000c9c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ca0:	ea5f 0c01 	movs.w	ip, r1
 8000ca4:	bf02      	ittt	eq
 8000ca6:	4684      	moveq	ip, r0
 8000ca8:	4601      	moveq	r1, r0
 8000caa:	2000      	moveq	r0, #0
 8000cac:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000cb0:	bf08      	it	eq
 8000cb2:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000cb6:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000cba:	fabc f28c 	clz	r2, ip
 8000cbe:	3a08      	subs	r2, #8
 8000cc0:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000cc4:	db10      	blt.n	8000ce8 <__aeabi_l2f+0x5c>
 8000cc6:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cca:	4463      	add	r3, ip
 8000ccc:	fa00 fc02 	lsl.w	ip, r0, r2
 8000cd0:	f1c2 0220 	rsb	r2, r2, #32
 8000cd4:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000cd8:	fa20 f202 	lsr.w	r2, r0, r2
 8000cdc:	eb43 0002 	adc.w	r0, r3, r2
 8000ce0:	bf08      	it	eq
 8000ce2:	f020 0001 	biceq.w	r0, r0, #1
 8000ce6:	4770      	bx	lr
 8000ce8:	f102 0220 	add.w	r2, r2, #32
 8000cec:	fa01 fc02 	lsl.w	ip, r1, r2
 8000cf0:	f1c2 0220 	rsb	r2, r2, #32
 8000cf4:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000cf8:	fa21 f202 	lsr.w	r2, r1, r2
 8000cfc:	eb43 0002 	adc.w	r0, r3, r2
 8000d00:	bf08      	it	eq
 8000d02:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d06:	4770      	bx	lr

08000d08 <__aeabi_fmul>:
 8000d08:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d0c:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d10:	bf1e      	ittt	ne
 8000d12:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d16:	ea92 0f0c 	teqne	r2, ip
 8000d1a:	ea93 0f0c 	teqne	r3, ip
 8000d1e:	d06f      	beq.n	8000e00 <__aeabi_fmul+0xf8>
 8000d20:	441a      	add	r2, r3
 8000d22:	ea80 0c01 	eor.w	ip, r0, r1
 8000d26:	0240      	lsls	r0, r0, #9
 8000d28:	bf18      	it	ne
 8000d2a:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000d2e:	d01e      	beq.n	8000d6e <__aeabi_fmul+0x66>
 8000d30:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000d34:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000d38:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000d3c:	fba0 3101 	umull	r3, r1, r0, r1
 8000d40:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d44:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000d48:	bf3e      	ittt	cc
 8000d4a:	0049      	lslcc	r1, r1, #1
 8000d4c:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000d50:	005b      	lslcc	r3, r3, #1
 8000d52:	ea40 0001 	orr.w	r0, r0, r1
 8000d56:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000d5a:	2afd      	cmp	r2, #253	@ 0xfd
 8000d5c:	d81d      	bhi.n	8000d9a <__aeabi_fmul+0x92>
 8000d5e:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000d62:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000d66:	bf08      	it	eq
 8000d68:	f020 0001 	biceq.w	r0, r0, #1
 8000d6c:	4770      	bx	lr
 8000d6e:	f090 0f00 	teq	r0, #0
 8000d72:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000d76:	bf08      	it	eq
 8000d78:	0249      	lsleq	r1, r1, #9
 8000d7a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000d7e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000d82:	3a7f      	subs	r2, #127	@ 0x7f
 8000d84:	bfc2      	ittt	gt
 8000d86:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000d8a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000d8e:	4770      	bxgt	lr
 8000d90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d94:	f04f 0300 	mov.w	r3, #0
 8000d98:	3a01      	subs	r2, #1
 8000d9a:	dc5d      	bgt.n	8000e58 <__aeabi_fmul+0x150>
 8000d9c:	f112 0f19 	cmn.w	r2, #25
 8000da0:	bfdc      	itt	le
 8000da2:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000da6:	4770      	bxle	lr
 8000da8:	f1c2 0200 	rsb	r2, r2, #0
 8000dac:	0041      	lsls	r1, r0, #1
 8000dae:	fa21 f102 	lsr.w	r1, r1, r2
 8000db2:	f1c2 0220 	rsb	r2, r2, #32
 8000db6:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dba:	ea5f 0031 	movs.w	r0, r1, rrx
 8000dbe:	f140 0000 	adc.w	r0, r0, #0
 8000dc2:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000dc6:	bf08      	it	eq
 8000dc8:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000dcc:	4770      	bx	lr
 8000dce:	f092 0f00 	teq	r2, #0
 8000dd2:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd6:	bf02      	ittt	eq
 8000dd8:	0040      	lsleq	r0, r0, #1
 8000dda:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dde:	3a01      	subeq	r2, #1
 8000de0:	d0f9      	beq.n	8000dd6 <__aeabi_fmul+0xce>
 8000de2:	ea40 000c 	orr.w	r0, r0, ip
 8000de6:	f093 0f00 	teq	r3, #0
 8000dea:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dee:	bf02      	ittt	eq
 8000df0:	0049      	lsleq	r1, r1, #1
 8000df2:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df6:	3b01      	subeq	r3, #1
 8000df8:	d0f9      	beq.n	8000dee <__aeabi_fmul+0xe6>
 8000dfa:	ea41 010c 	orr.w	r1, r1, ip
 8000dfe:	e78f      	b.n	8000d20 <__aeabi_fmul+0x18>
 8000e00:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e04:	ea92 0f0c 	teq	r2, ip
 8000e08:	bf18      	it	ne
 8000e0a:	ea93 0f0c 	teqne	r3, ip
 8000e0e:	d00a      	beq.n	8000e26 <__aeabi_fmul+0x11e>
 8000e10:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e14:	bf18      	it	ne
 8000e16:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e1a:	d1d8      	bne.n	8000dce <__aeabi_fmul+0xc6>
 8000e1c:	ea80 0001 	eor.w	r0, r0, r1
 8000e20:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e24:	4770      	bx	lr
 8000e26:	f090 0f00 	teq	r0, #0
 8000e2a:	bf17      	itett	ne
 8000e2c:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000e30:	4608      	moveq	r0, r1
 8000e32:	f091 0f00 	teqne	r1, #0
 8000e36:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000e3a:	d014      	beq.n	8000e66 <__aeabi_fmul+0x15e>
 8000e3c:	ea92 0f0c 	teq	r2, ip
 8000e40:	d101      	bne.n	8000e46 <__aeabi_fmul+0x13e>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d10f      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e46:	ea93 0f0c 	teq	r3, ip
 8000e4a:	d103      	bne.n	8000e54 <__aeabi_fmul+0x14c>
 8000e4c:	024b      	lsls	r3, r1, #9
 8000e4e:	bf18      	it	ne
 8000e50:	4608      	movne	r0, r1
 8000e52:	d108      	bne.n	8000e66 <__aeabi_fmul+0x15e>
 8000e54:	ea80 0001 	eor.w	r0, r0, r1
 8000e58:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000e5c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e60:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000e64:	4770      	bx	lr
 8000e66:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000e6a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000e6e:	4770      	bx	lr

08000e70 <__aeabi_fdiv>:
 8000e70:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000e74:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000e78:	bf1e      	ittt	ne
 8000e7a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000e7e:	ea92 0f0c 	teqne	r2, ip
 8000e82:	ea93 0f0c 	teqne	r3, ip
 8000e86:	d069      	beq.n	8000f5c <__aeabi_fdiv+0xec>
 8000e88:	eba2 0203 	sub.w	r2, r2, r3
 8000e8c:	ea80 0c01 	eor.w	ip, r0, r1
 8000e90:	0249      	lsls	r1, r1, #9
 8000e92:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000e96:	d037      	beq.n	8000f08 <__aeabi_fdiv+0x98>
 8000e98:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000e9c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000ea0:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000ea4:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000ea8:	428b      	cmp	r3, r1
 8000eaa:	bf38      	it	cc
 8000eac:	005b      	lslcc	r3, r3, #1
 8000eae:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000eb2:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000eb6:	428b      	cmp	r3, r1
 8000eb8:	bf24      	itt	cs
 8000eba:	1a5b      	subcs	r3, r3, r1
 8000ebc:	ea40 000c 	orrcs.w	r0, r0, ip
 8000ec0:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000ec4:	bf24      	itt	cs
 8000ec6:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000eca:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000ece:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000ed2:	bf24      	itt	cs
 8000ed4:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000ed8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000edc:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000ee0:	bf24      	itt	cs
 8000ee2:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000ee6:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000eea:	011b      	lsls	r3, r3, #4
 8000eec:	bf18      	it	ne
 8000eee:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000ef2:	d1e0      	bne.n	8000eb6 <__aeabi_fdiv+0x46>
 8000ef4:	2afd      	cmp	r2, #253	@ 0xfd
 8000ef6:	f63f af50 	bhi.w	8000d9a <__aeabi_fmul+0x92>
 8000efa:	428b      	cmp	r3, r1
 8000efc:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000f00:	bf08      	it	eq
 8000f02:	f020 0001 	biceq.w	r0, r0, #1
 8000f06:	4770      	bx	lr
 8000f08:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000f0c:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000f10:	327f      	adds	r2, #127	@ 0x7f
 8000f12:	bfc2      	ittt	gt
 8000f14:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000f18:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000f1c:	4770      	bxgt	lr
 8000f1e:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000f22:	f04f 0300 	mov.w	r3, #0
 8000f26:	3a01      	subs	r2, #1
 8000f28:	e737      	b.n	8000d9a <__aeabi_fmul+0x92>
 8000f2a:	f092 0f00 	teq	r2, #0
 8000f2e:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000f32:	bf02      	ittt	eq
 8000f34:	0040      	lsleq	r0, r0, #1
 8000f36:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000f3a:	3a01      	subeq	r2, #1
 8000f3c:	d0f9      	beq.n	8000f32 <__aeabi_fdiv+0xc2>
 8000f3e:	ea40 000c 	orr.w	r0, r0, ip
 8000f42:	f093 0f00 	teq	r3, #0
 8000f46:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000f4a:	bf02      	ittt	eq
 8000f4c:	0049      	lsleq	r1, r1, #1
 8000f4e:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000f52:	3b01      	subeq	r3, #1
 8000f54:	d0f9      	beq.n	8000f4a <__aeabi_fdiv+0xda>
 8000f56:	ea41 010c 	orr.w	r1, r1, ip
 8000f5a:	e795      	b.n	8000e88 <__aeabi_fdiv+0x18>
 8000f5c:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000f60:	ea92 0f0c 	teq	r2, ip
 8000f64:	d108      	bne.n	8000f78 <__aeabi_fdiv+0x108>
 8000f66:	0242      	lsls	r2, r0, #9
 8000f68:	f47f af7d 	bne.w	8000e66 <__aeabi_fmul+0x15e>
 8000f6c:	ea93 0f0c 	teq	r3, ip
 8000f70:	f47f af70 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f74:	4608      	mov	r0, r1
 8000f76:	e776      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f78:	ea93 0f0c 	teq	r3, ip
 8000f7c:	d104      	bne.n	8000f88 <__aeabi_fdiv+0x118>
 8000f7e:	024b      	lsls	r3, r1, #9
 8000f80:	f43f af4c 	beq.w	8000e1c <__aeabi_fmul+0x114>
 8000f84:	4608      	mov	r0, r1
 8000f86:	e76e      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000f88:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000f8c:	bf18      	it	ne
 8000f8e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000f92:	d1ca      	bne.n	8000f2a <__aeabi_fdiv+0xba>
 8000f94:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000f98:	f47f af5c 	bne.w	8000e54 <__aeabi_fmul+0x14c>
 8000f9c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000fa0:	f47f af3c 	bne.w	8000e1c <__aeabi_fmul+0x114>
 8000fa4:	e75f      	b.n	8000e66 <__aeabi_fmul+0x15e>
 8000fa6:	bf00      	nop

08000fa8 <__gesf2>:
 8000fa8:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8000fac:	e006      	b.n	8000fbc <__cmpsf2+0x4>
 8000fae:	bf00      	nop

08000fb0 <__lesf2>:
 8000fb0:	f04f 0c01 	mov.w	ip, #1
 8000fb4:	e002      	b.n	8000fbc <__cmpsf2+0x4>
 8000fb6:	bf00      	nop

08000fb8 <__cmpsf2>:
 8000fb8:	f04f 0c01 	mov.w	ip, #1
 8000fbc:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000fc0:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000fc4:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000fc8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000fcc:	bf18      	it	ne
 8000fce:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000fd2:	d011      	beq.n	8000ff8 <__cmpsf2+0x40>
 8000fd4:	b001      	add	sp, #4
 8000fd6:	ea52 0c53 	orrs.w	ip, r2, r3, lsr #1
 8000fda:	bf18      	it	ne
 8000fdc:	ea90 0f01 	teqne	r0, r1
 8000fe0:	bf58      	it	pl
 8000fe2:	ebb2 0003 	subspl.w	r0, r2, r3
 8000fe6:	bf88      	it	hi
 8000fe8:	17c8      	asrhi	r0, r1, #31
 8000fea:	bf38      	it	cc
 8000fec:	ea6f 70e1 	mvncc.w	r0, r1, asr #31
 8000ff0:	bf18      	it	ne
 8000ff2:	f040 0001 	orrne.w	r0, r0, #1
 8000ff6:	4770      	bx	lr
 8000ff8:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000ffc:	d102      	bne.n	8001004 <__cmpsf2+0x4c>
 8000ffe:	ea5f 2c40 	movs.w	ip, r0, lsl #9
 8001002:	d105      	bne.n	8001010 <__cmpsf2+0x58>
 8001004:	ea7f 6c23 	mvns.w	ip, r3, asr #24
 8001008:	d1e4      	bne.n	8000fd4 <__cmpsf2+0x1c>
 800100a:	ea5f 2c41 	movs.w	ip, r1, lsl #9
 800100e:	d0e1      	beq.n	8000fd4 <__cmpsf2+0x1c>
 8001010:	f85d 0b04 	ldr.w	r0, [sp], #4
 8001014:	4770      	bx	lr
 8001016:	bf00      	nop

08001018 <__aeabi_cfrcmple>:
 8001018:	4684      	mov	ip, r0
 800101a:	4608      	mov	r0, r1
 800101c:	4661      	mov	r1, ip
 800101e:	e7ff      	b.n	8001020 <__aeabi_cfcmpeq>

08001020 <__aeabi_cfcmpeq>:
 8001020:	b50f      	push	{r0, r1, r2, r3, lr}
 8001022:	f7ff ffc9 	bl	8000fb8 <__cmpsf2>
 8001026:	2800      	cmp	r0, #0
 8001028:	bf48      	it	mi
 800102a:	f110 0f00 	cmnmi.w	r0, #0
 800102e:	bd0f      	pop	{r0, r1, r2, r3, pc}

08001030 <__aeabi_fcmpeq>:
 8001030:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001034:	f7ff fff4 	bl	8001020 <__aeabi_cfcmpeq>
 8001038:	bf0c      	ite	eq
 800103a:	2001      	moveq	r0, #1
 800103c:	2000      	movne	r0, #0
 800103e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001042:	bf00      	nop

08001044 <__aeabi_fcmplt>:
 8001044:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001048:	f7ff ffea 	bl	8001020 <__aeabi_cfcmpeq>
 800104c:	bf34      	ite	cc
 800104e:	2001      	movcc	r0, #1
 8001050:	2000      	movcs	r0, #0
 8001052:	f85d fb08 	ldr.w	pc, [sp], #8
 8001056:	bf00      	nop

08001058 <__aeabi_fcmple>:
 8001058:	f84d ed08 	str.w	lr, [sp, #-8]!
 800105c:	f7ff ffe0 	bl	8001020 <__aeabi_cfcmpeq>
 8001060:	bf94      	ite	ls
 8001062:	2001      	movls	r0, #1
 8001064:	2000      	movhi	r0, #0
 8001066:	f85d fb08 	ldr.w	pc, [sp], #8
 800106a:	bf00      	nop

0800106c <__aeabi_fcmpge>:
 800106c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001070:	f7ff ffd2 	bl	8001018 <__aeabi_cfrcmple>
 8001074:	bf94      	ite	ls
 8001076:	2001      	movls	r0, #1
 8001078:	2000      	movhi	r0, #0
 800107a:	f85d fb08 	ldr.w	pc, [sp], #8
 800107e:	bf00      	nop

08001080 <__aeabi_fcmpgt>:
 8001080:	f84d ed08 	str.w	lr, [sp, #-8]!
 8001084:	f7ff ffc8 	bl	8001018 <__aeabi_cfrcmple>
 8001088:	bf34      	ite	cc
 800108a:	2001      	movcc	r0, #1
 800108c:	2000      	movcs	r0, #0
 800108e:	f85d fb08 	ldr.w	pc, [sp], #8
 8001092:	bf00      	nop

08001094 <__aeabi_f2iz>:
 8001094:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8001098:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 800109c:	d30f      	bcc.n	80010be <__aeabi_f2iz+0x2a>
 800109e:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 80010a2:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 80010a6:	d90d      	bls.n	80010c4 <__aeabi_f2iz+0x30>
 80010a8:	ea4f 2300 	mov.w	r3, r0, lsl #8
 80010ac:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80010b0:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80010b4:	fa23 f002 	lsr.w	r0, r3, r2
 80010b8:	bf18      	it	ne
 80010ba:	4240      	negne	r0, r0
 80010bc:	4770      	bx	lr
 80010be:	f04f 0000 	mov.w	r0, #0
 80010c2:	4770      	bx	lr
 80010c4:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 80010c8:	d101      	bne.n	80010ce <__aeabi_f2iz+0x3a>
 80010ca:	0242      	lsls	r2, r0, #9
 80010cc:	d105      	bne.n	80010da <__aeabi_f2iz+0x46>
 80010ce:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 80010d2:	bf08      	it	eq
 80010d4:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 80010d8:	4770      	bx	lr
 80010da:	f04f 0000 	mov.w	r0, #0
 80010de:	4770      	bx	lr

080010e0 <draw_cube>:
        {4, 0}, {4, 1}, {4, 2}, {4, 3}
    },
    .transform = { 6,0,0, 0,0,0, 3,3,3 }
};

void draw_cube(Cube *cube) {
 80010e0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80010e2:	b0db      	sub	sp, #364	@ 0x16c
 80010e4:	af04      	add	r7, sp, #16
 80010e6:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010ea:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80010ee:	6018      	str	r0, [r3, #0]
	Mat4 transform_matrix = calculate_transform_matrix(&cube->transform);
 80010f0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80010f4:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	f103 02c0 	add.w	r2, r3, #192	@ 0xc0
 80010fe:	f507 7386 	add.w	r3, r7, #268	@ 0x10c
 8001102:	4611      	mov	r1, r2
 8001104:	4618      	mov	r0, r3
 8001106:	f001 f954 	bl	80023b2 <calculate_transform_matrix>
	Mat4 transform_proj_matrix = mat4_mul_mat4(&view_projection_matrix, &transform_matrix);
 800110a:	f107 03cc 	add.w	r3, r7, #204	@ 0xcc
 800110e:	f507 7286 	add.w	r2, r7, #268	@ 0x10c
 8001112:	4995      	ldr	r1, [pc, #596]	@ (8001368 <draw_cube+0x288>)
 8001114:	4618      	mov	r0, r3
 8001116:	f000 fd09 	bl	8001b2c <mat4_mul_mat4>

	Vec4 transformed[POINT_COUNT];
	for (int i = 0; i < POINT_COUNT; ++i) {
 800111a:	2300      	movs	r3, #0
 800111c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001120:	e08e      	b.n	8001240 <draw_cube+0x160>
		Vec4 model_space = { cube->p[i].x, cube->p[i].y, cube->p[i].z, 1.0 };
 8001122:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001126:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800112a:	6819      	ldr	r1, [r3, #0]
 800112c:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001130:	4613      	mov	r3, r2
 8001132:	005b      	lsls	r3, r3, #1
 8001134:	4413      	add	r3, r2
 8001136:	009b      	lsls	r3, r3, #2
 8001138:	440b      	add	r3, r1
 800113a:	681a      	ldr	r2, [r3, #0]
 800113c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001140:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001144:	601a      	str	r2, [r3, #0]
 8001146:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800114a:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 800114e:	6819      	ldr	r1, [r3, #0]
 8001150:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 8001154:	4613      	mov	r3, r2
 8001156:	005b      	lsls	r3, r3, #1
 8001158:	4413      	add	r3, r2
 800115a:	009b      	lsls	r3, r3, #2
 800115c:	440b      	add	r3, r1
 800115e:	3304      	adds	r3, #4
 8001160:	681a      	ldr	r2, [r3, #0]
 8001162:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001166:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800116a:	605a      	str	r2, [r3, #4]
 800116c:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001170:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001174:	6819      	ldr	r1, [r3, #0]
 8001176:	f8d7 2154 	ldr.w	r2, [r7, #340]	@ 0x154
 800117a:	4613      	mov	r3, r2
 800117c:	005b      	lsls	r3, r3, #1
 800117e:	4413      	add	r3, r2
 8001180:	009b      	lsls	r3, r3, #2
 8001182:	440b      	add	r3, r1
 8001184:	3308      	adds	r3, #8
 8001186:	681a      	ldr	r2, [r3, #0]
 8001188:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800118c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001190:	609a      	str	r2, [r3, #8]
 8001192:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001196:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 800119a:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 800119e:	60da      	str	r2, [r3, #12]

		transformed[i] = mat4_mul_vec4_project(&transform_proj_matrix, &model_space);
 80011a0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011a4:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80011a8:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011ac:	011b      	lsls	r3, r3, #4
 80011ae:	18d4      	adds	r4, r2, r3
 80011b0:	463b      	mov	r3, r7
 80011b2:	f107 023c 	add.w	r2, r7, #60	@ 0x3c
 80011b6:	f107 01cc 	add.w	r1, r7, #204	@ 0xcc
 80011ba:	4618      	mov	r0, r3
 80011bc:	f000 fe98 	bl	8001ef0 <mat4_mul_vec4_project>
 80011c0:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011c4:	f5a3 73ac 	sub.w	r3, r3, #344	@ 0x158
 80011c8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80011ca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

		// center
		transformed[i].x += (float)WIDTH/2.0;
 80011ce:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011d2:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80011d6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011da:	011b      	lsls	r3, r3, #4
 80011dc:	4413      	add	r3, r2
 80011de:	681b      	ldr	r3, [r3, #0]
 80011e0:	f04f 4184 	mov.w	r1, #1107296256	@ 0x42000000
 80011e4:	4618      	mov	r0, r3
 80011e6:	f7ff fc87 	bl	8000af8 <__addsf3>
 80011ea:	4603      	mov	r3, r0
 80011ec:	4619      	mov	r1, r3
 80011ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80011f2:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 80011f6:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 80011fa:	011b      	lsls	r3, r3, #4
 80011fc:	4413      	add	r3, r2
 80011fe:	6019      	str	r1, [r3, #0]
		transformed[i].y += (float)HEIGHT/2.0;
 8001200:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001204:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 8001208:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800120c:	011b      	lsls	r3, r3, #4
 800120e:	4413      	add	r3, r2
 8001210:	3304      	adds	r3, #4
 8001212:	681b      	ldr	r3, [r3, #0]
 8001214:	f04f 4183 	mov.w	r1, #1098907648	@ 0x41800000
 8001218:	4618      	mov	r0, r3
 800121a:	f7ff fc6d 	bl	8000af8 <__addsf3>
 800121e:	4603      	mov	r3, r0
 8001220:	4619      	mov	r1, r3
 8001222:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 8001226:	f5a3 7286 	sub.w	r2, r3, #268	@ 0x10c
 800122a:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800122e:	011b      	lsls	r3, r3, #4
 8001230:	4413      	add	r3, r2
 8001232:	3304      	adds	r3, #4
 8001234:	6019      	str	r1, [r3, #0]
	for (int i = 0; i < POINT_COUNT; ++i) {
 8001236:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 800123a:	3301      	adds	r3, #1
 800123c:	f8c7 3154 	str.w	r3, [r7, #340]	@ 0x154
 8001240:	f8d7 3154 	ldr.w	r3, [r7, #340]	@ 0x154
 8001244:	2b07      	cmp	r3, #7
 8001246:	f77f af6c 	ble.w	8001122 <draw_cube+0x42>
	}

	uint8_t color = 1;
 800124a:	2301      	movs	r3, #1
 800124c:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
	for (int i = 0; i < EDGE_COUNT; ++i) {
 8001250:	2300      	movs	r3, #0
 8001252:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001256:	e07b      	b.n	8001350 <draw_cube+0x270>
		Vec4 a = transformed[cube->edges[i][0]];
 8001258:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800125c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001260:	681b      	ldr	r3, [r3, #0]
 8001262:	f8d7 214c 	ldr.w	r2, [r7, #332]	@ 0x14c
 8001266:	320c      	adds	r2, #12
 8001268:	f853 3032 	ldr.w	r3, [r3, r2, lsl #3]
 800126c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8001270:	f5a2 7196 	sub.w	r1, r2, #300	@ 0x12c
 8001274:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 8001278:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 800127c:	011b      	lsls	r3, r3, #4
 800127e:	4413      	add	r3, r2
 8001280:	460c      	mov	r4, r1
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		Vec4 b = transformed[cube->edges[i][1]];
 8001288:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 800128c:	f5a3 73a2 	sub.w	r3, r3, #324	@ 0x144
 8001290:	681a      	ldr	r2, [r3, #0]
 8001292:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001296:	00db      	lsls	r3, r3, #3
 8001298:	4413      	add	r3, r2
 800129a:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 800129c:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80012a0:	f5a2 719e 	sub.w	r1, r2, #316	@ 0x13c
 80012a4:	f507 72ac 	add.w	r2, r7, #344	@ 0x158
 80012a8:	f5a2 7286 	sub.w	r2, r2, #268	@ 0x10c
 80012ac:	011b      	lsls	r3, r3, #4
 80012ae:	4413      	add	r3, r2
 80012b0:	460c      	mov	r4, r1
 80012b2:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 80012b4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		//draw_line(a.x, a.y, b.x, b.y);
		draw_line_colored(a.x, a.y, b.x, b.y, (color&0b100), (color&0b010), (color&0b001));
 80012b8:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012bc:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012c0:	681b      	ldr	r3, [r3, #0]
 80012c2:	4618      	mov	r0, r3
 80012c4:	f7ff fee6 	bl	8001094 <__aeabi_f2iz>
 80012c8:	4604      	mov	r4, r0
 80012ca:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012ce:	f5a3 7396 	sub.w	r3, r3, #300	@ 0x12c
 80012d2:	685b      	ldr	r3, [r3, #4]
 80012d4:	4618      	mov	r0, r3
 80012d6:	f7ff fedd 	bl	8001094 <__aeabi_f2iz>
 80012da:	4605      	mov	r5, r0
 80012dc:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012e0:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012e4:	681b      	ldr	r3, [r3, #0]
 80012e6:	4618      	mov	r0, r3
 80012e8:	f7ff fed4 	bl	8001094 <__aeabi_f2iz>
 80012ec:	4606      	mov	r6, r0
 80012ee:	f507 73ac 	add.w	r3, r7, #344	@ 0x158
 80012f2:	f5a3 739e 	sub.w	r3, r3, #316	@ 0x13c
 80012f6:	685b      	ldr	r3, [r3, #4]
 80012f8:	4618      	mov	r0, r3
 80012fa:	f7ff fecb 	bl	8001094 <__aeabi_f2iz>
 80012fe:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8001302:	f003 0304 	and.w	r3, r3, #4
 8001306:	b2db      	uxtb	r3, r3
 8001308:	f897 2153 	ldrb.w	r2, [r7, #339]	@ 0x153
 800130c:	f002 0202 	and.w	r2, r2, #2
 8001310:	b2d2      	uxtb	r2, r2
 8001312:	f897 1153 	ldrb.w	r1, [r7, #339]	@ 0x153
 8001316:	f001 0101 	and.w	r1, r1, #1
 800131a:	b2c9      	uxtb	r1, r1
 800131c:	9102      	str	r1, [sp, #8]
 800131e:	9201      	str	r2, [sp, #4]
 8001320:	9300      	str	r3, [sp, #0]
 8001322:	4603      	mov	r3, r0
 8001324:	4632      	mov	r2, r6
 8001326:	4629      	mov	r1, r5
 8001328:	4620      	mov	r0, r4
 800132a:	f001 facd 	bl	80028c8 <draw_line_colored>
		if (++color == 8) {
 800132e:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 8001332:	3301      	adds	r3, #1
 8001334:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
 8001338:	f897 3153 	ldrb.w	r3, [r7, #339]	@ 0x153
 800133c:	2b08      	cmp	r3, #8
 800133e:	d102      	bne.n	8001346 <draw_cube+0x266>
			color = 1;
 8001340:	2301      	movs	r3, #1
 8001342:	f887 3153 	strb.w	r3, [r7, #339]	@ 0x153
	for (int i = 0; i < EDGE_COUNT; ++i) {
 8001346:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 800134a:	3301      	adds	r3, #1
 800134c:	f8c7 314c 	str.w	r3, [r7, #332]	@ 0x14c
 8001350:	f8d7 314c 	ldr.w	r3, [r7, #332]	@ 0x14c
 8001354:	2b0b      	cmp	r3, #11
 8001356:	f77f af7f 	ble.w	8001258 <draw_cube+0x178>
		}
	}
}
 800135a:	bf00      	nop
 800135c:	bf00      	nop
 800135e:	f507 77ae 	add.w	r7, r7, #348	@ 0x15c
 8001362:	46bd      	mov	sp, r7
 8001364:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001366:	bf00      	nop
 8001368:	20000204 	.word	0x20000204

0800136c <on_ready>:

void on_ready() {
 800136c:	b5b0      	push	{r4, r5, r7, lr}
 800136e:	b0b2      	sub	sp, #200	@ 0xc8
 8001370:	af02      	add	r7, sp, #8
	Mat4 perspective_projection = mat4_make_perspective(4.0 * (M_PI / 180.0), 1, 1.0, 100.0);
 8001372:	f107 0080 	add.w	r0, r7, #128	@ 0x80
 8001376:	4b15      	ldr	r3, [pc, #84]	@ (80013cc <on_ready+0x60>)
 8001378:	9300      	str	r3, [sp, #0]
 800137a:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800137e:	f04f 527e 	mov.w	r2, #1065353216	@ 0x3f800000
 8001382:	4913      	ldr	r1, [pc, #76]	@ (80013d0 <on_ready+0x64>)
 8001384:	f000 fd28 	bl	8001dd8 <mat4_make_perspective>
	Mat4 view_matrix = get_view_matrix(0, 0, -15); // camera position
 8001388:	f107 0040 	add.w	r0, r7, #64	@ 0x40
 800138c:	4b11      	ldr	r3, [pc, #68]	@ (80013d4 <on_ready+0x68>)
 800138e:	f04f 0200 	mov.w	r2, #0
 8001392:	f04f 0100 	mov.w	r1, #0
 8001396:	f000 fff5 	bl	8002384 <get_view_matrix>
	view_projection_matrix = mat4_mul_mat4(&perspective_projection, &view_matrix);
 800139a:	4c0f      	ldr	r4, [pc, #60]	@ (80013d8 <on_ready+0x6c>)
 800139c:	463b      	mov	r3, r7
 800139e:	f107 0240 	add.w	r2, r7, #64	@ 0x40
 80013a2:	f107 0180 	add.w	r1, r7, #128	@ 0x80
 80013a6:	4618      	mov	r0, r3
 80013a8:	f000 fbc0 	bl	8001b2c <mat4_mul_mat4>
 80013ac:	4625      	mov	r5, r4
 80013ae:	463c      	mov	r4, r7
 80013b0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013b6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013b8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80013ba:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80013bc:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80013c0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80013c4:	bf00      	nop
 80013c6:	37c0      	adds	r7, #192	@ 0xc0
 80013c8:	46bd      	mov	sp, r7
 80013ca:	bdb0      	pop	{r4, r5, r7, pc}
 80013cc:	42c80000 	.word	0x42c80000
 80013d0:	3d8efa35 	.word	0x3d8efa35
 80013d4:	c1700000 	.word	0xc1700000
 80013d8:	20000204 	.word	0x20000204

080013dc <on_update>:


float speed = 0.02;
int level = 2;
void on_update() {
 80013dc:	b598      	push	{r3, r4, r7, lr}
 80013de:	af00      	add	r7, sp, #0
	clear_back_buffer();
 80013e0:	f001 f8da 	bl	8002598 <clear_back_buffer>
	cube0.transform.rot_x += speed * level;
 80013e4:	4b4e      	ldr	r3, [pc, #312]	@ (8001520 <on_update+0x144>)
 80013e6:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 80013ea:	4b4e      	ldr	r3, [pc, #312]	@ (8001524 <on_update+0x148>)
 80013ec:	681b      	ldr	r3, [r3, #0]
 80013ee:	4618      	mov	r0, r3
 80013f0:	f7ff fc36 	bl	8000c60 <__aeabi_i2f>
 80013f4:	4602      	mov	r2, r0
 80013f6:	4b4c      	ldr	r3, [pc, #304]	@ (8001528 <on_update+0x14c>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	4619      	mov	r1, r3
 80013fc:	4610      	mov	r0, r2
 80013fe:	f7ff fc83 	bl	8000d08 <__aeabi_fmul>
 8001402:	4603      	mov	r3, r0
 8001404:	4619      	mov	r1, r3
 8001406:	4620      	mov	r0, r4
 8001408:	f7ff fb76 	bl	8000af8 <__addsf3>
 800140c:	4603      	mov	r3, r0
 800140e:	461a      	mov	r2, r3
 8001410:	4b43      	ldr	r3, [pc, #268]	@ (8001520 <on_update+0x144>)
 8001412:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	cube0.transform.rot_y += speed * level;
 8001416:	4b42      	ldr	r3, [pc, #264]	@ (8001520 <on_update+0x144>)
 8001418:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
 800141c:	4b41      	ldr	r3, [pc, #260]	@ (8001524 <on_update+0x148>)
 800141e:	681b      	ldr	r3, [r3, #0]
 8001420:	4618      	mov	r0, r3
 8001422:	f7ff fc1d 	bl	8000c60 <__aeabi_i2f>
 8001426:	4602      	mov	r2, r0
 8001428:	4b3f      	ldr	r3, [pc, #252]	@ (8001528 <on_update+0x14c>)
 800142a:	681b      	ldr	r3, [r3, #0]
 800142c:	4619      	mov	r1, r3
 800142e:	4610      	mov	r0, r2
 8001430:	f7ff fc6a 	bl	8000d08 <__aeabi_fmul>
 8001434:	4603      	mov	r3, r0
 8001436:	4619      	mov	r1, r3
 8001438:	4620      	mov	r0, r4
 800143a:	f7ff fb5d 	bl	8000af8 <__addsf3>
 800143e:	4603      	mov	r3, r0
 8001440:	461a      	mov	r2, r3
 8001442:	4b37      	ldr	r3, [pc, #220]	@ (8001520 <on_update+0x144>)
 8001444:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	cube0.transform.rot_z += speed * level;
 8001448:	4b35      	ldr	r3, [pc, #212]	@ (8001520 <on_update+0x144>)
 800144a:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
 800144e:	4b35      	ldr	r3, [pc, #212]	@ (8001524 <on_update+0x148>)
 8001450:	681b      	ldr	r3, [r3, #0]
 8001452:	4618      	mov	r0, r3
 8001454:	f7ff fc04 	bl	8000c60 <__aeabi_i2f>
 8001458:	4602      	mov	r2, r0
 800145a:	4b33      	ldr	r3, [pc, #204]	@ (8001528 <on_update+0x14c>)
 800145c:	681b      	ldr	r3, [r3, #0]
 800145e:	4619      	mov	r1, r3
 8001460:	4610      	mov	r0, r2
 8001462:	f7ff fc51 	bl	8000d08 <__aeabi_fmul>
 8001466:	4603      	mov	r3, r0
 8001468:	4619      	mov	r1, r3
 800146a:	4620      	mov	r0, r4
 800146c:	f7ff fb44 	bl	8000af8 <__addsf3>
 8001470:	4603      	mov	r3, r0
 8001472:	461a      	mov	r2, r3
 8001474:	4b2a      	ldr	r3, [pc, #168]	@ (8001520 <on_update+0x144>)
 8001476:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	draw_cube(&cube0);
 800147a:	4829      	ldr	r0, [pc, #164]	@ (8001520 <on_update+0x144>)
 800147c:	f7ff fe30 	bl	80010e0 <draw_cube>


	pyramid0.transform.rot_x += speed * level;
 8001480:	4b2a      	ldr	r3, [pc, #168]	@ (800152c <on_update+0x150>)
 8001482:	f8d3 40cc 	ldr.w	r4, [r3, #204]	@ 0xcc
 8001486:	4b27      	ldr	r3, [pc, #156]	@ (8001524 <on_update+0x148>)
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	4618      	mov	r0, r3
 800148c:	f7ff fbe8 	bl	8000c60 <__aeabi_i2f>
 8001490:	4602      	mov	r2, r0
 8001492:	4b25      	ldr	r3, [pc, #148]	@ (8001528 <on_update+0x14c>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	4619      	mov	r1, r3
 8001498:	4610      	mov	r0, r2
 800149a:	f7ff fc35 	bl	8000d08 <__aeabi_fmul>
 800149e:	4603      	mov	r3, r0
 80014a0:	4619      	mov	r1, r3
 80014a2:	4620      	mov	r0, r4
 80014a4:	f7ff fb28 	bl	8000af8 <__addsf3>
 80014a8:	4603      	mov	r3, r0
 80014aa:	461a      	mov	r2, r3
 80014ac:	4b1f      	ldr	r3, [pc, #124]	@ (800152c <on_update+0x150>)
 80014ae:	f8c3 20cc 	str.w	r2, [r3, #204]	@ 0xcc
	pyramid0.transform.rot_y += speed * level;
 80014b2:	4b1e      	ldr	r3, [pc, #120]	@ (800152c <on_update+0x150>)
 80014b4:	f8d3 40d0 	ldr.w	r4, [r3, #208]	@ 0xd0
 80014b8:	4b1a      	ldr	r3, [pc, #104]	@ (8001524 <on_update+0x148>)
 80014ba:	681b      	ldr	r3, [r3, #0]
 80014bc:	4618      	mov	r0, r3
 80014be:	f7ff fbcf 	bl	8000c60 <__aeabi_i2f>
 80014c2:	4602      	mov	r2, r0
 80014c4:	4b18      	ldr	r3, [pc, #96]	@ (8001528 <on_update+0x14c>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	4619      	mov	r1, r3
 80014ca:	4610      	mov	r0, r2
 80014cc:	f7ff fc1c 	bl	8000d08 <__aeabi_fmul>
 80014d0:	4603      	mov	r3, r0
 80014d2:	4619      	mov	r1, r3
 80014d4:	4620      	mov	r0, r4
 80014d6:	f7ff fb0f 	bl	8000af8 <__addsf3>
 80014da:	4603      	mov	r3, r0
 80014dc:	461a      	mov	r2, r3
 80014de:	4b13      	ldr	r3, [pc, #76]	@ (800152c <on_update+0x150>)
 80014e0:	f8c3 20d0 	str.w	r2, [r3, #208]	@ 0xd0
	pyramid0.transform.rot_z += speed * level;
 80014e4:	4b11      	ldr	r3, [pc, #68]	@ (800152c <on_update+0x150>)
 80014e6:	f8d3 40d4 	ldr.w	r4, [r3, #212]	@ 0xd4
 80014ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001524 <on_update+0x148>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4618      	mov	r0, r3
 80014f0:	f7ff fbb6 	bl	8000c60 <__aeabi_i2f>
 80014f4:	4602      	mov	r2, r0
 80014f6:	4b0c      	ldr	r3, [pc, #48]	@ (8001528 <on_update+0x14c>)
 80014f8:	681b      	ldr	r3, [r3, #0]
 80014fa:	4619      	mov	r1, r3
 80014fc:	4610      	mov	r0, r2
 80014fe:	f7ff fc03 	bl	8000d08 <__aeabi_fmul>
 8001502:	4603      	mov	r3, r0
 8001504:	4619      	mov	r1, r3
 8001506:	4620      	mov	r0, r4
 8001508:	f7ff faf6 	bl	8000af8 <__addsf3>
 800150c:	4603      	mov	r3, r0
 800150e:	461a      	mov	r2, r3
 8001510:	4b06      	ldr	r3, [pc, #24]	@ (800152c <on_update+0x150>)
 8001512:	f8c3 20d4 	str.w	r2, [r3, #212]	@ 0xd4
	draw_cube(&pyramid0);
 8001516:	4805      	ldr	r0, [pc, #20]	@ (800152c <on_update+0x150>)
 8001518:	f7ff fde2 	bl	80010e0 <draw_cube>
}
 800151c:	bf00      	nop
 800151e:	bd98      	pop	{r3, r4, r7, pc}
 8001520:	20000000 	.word	0x20000000
 8001524:	200001cc 	.word	0x200001cc
 8001528:	200001c8 	.word	0x200001c8
 800152c:	200000e4 	.word	0x200000e4

08001530 <on_button_pressed>:


void on_button_pressed() {
 8001530:	b480      	push	{r7}
 8001532:	af00      	add	r7, sp, #0
	if (++level > 5) {
 8001534:	4b07      	ldr	r3, [pc, #28]	@ (8001554 <on_button_pressed+0x24>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	3301      	adds	r3, #1
 800153a:	4a06      	ldr	r2, [pc, #24]	@ (8001554 <on_button_pressed+0x24>)
 800153c:	6013      	str	r3, [r2, #0]
 800153e:	4b05      	ldr	r3, [pc, #20]	@ (8001554 <on_button_pressed+0x24>)
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	2b05      	cmp	r3, #5
 8001544:	dd02      	ble.n	800154c <on_button_pressed+0x1c>
		level = 0;
 8001546:	4b03      	ldr	r3, [pc, #12]	@ (8001554 <on_button_pressed+0x24>)
 8001548:	2200      	movs	r2, #0
 800154a:	601a      	str	r2, [r3, #0]
	}
}
 800154c:	bf00      	nop
 800154e:	46bd      	mov	sp, r7
 8001550:	bc80      	pop	{r7}
 8001552:	4770      	bx	lr
 8001554:	200001cc 	.word	0x200001cc

08001558 <on_button_held>:

#include "base.h"
#include "event.h"

__WEAK void on_button_pressed() {}
__WEAK void on_button_held() {}
 8001558:	b480      	push	{r7}
 800155a:	af00      	add	r7, sp, #0
 800155c:	bf00      	nop
 800155e:	46bd      	mov	sp, r7
 8001560:	bc80      	pop	{r7}
 8001562:	4770      	bx	lr

08001564 <on_button_released>:
__WEAK void on_button_released() {}
 8001564:	b480      	push	{r7}
 8001566:	af00      	add	r7, sp, #0
 8001568:	bf00      	nop
 800156a:	46bd      	mov	sp, r7
 800156c:	bc80      	pop	{r7}
 800156e:	4770      	bx	lr

08001570 <on_event>:


static uint8_t is_button_held = 0;

void on_event() {
 8001570:	b580      	push	{r7, lr}
 8001572:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8001574:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8001578:	480e      	ldr	r0, [pc, #56]	@ (80015b4 <on_event+0x44>)
 800157a:	f001 fe79 	bl	8003270 <HAL_GPIO_ReadPin>
 800157e:	4603      	mov	r3, r0
 8001580:	2b00      	cmp	r3, #0
 8001582:	d10c      	bne.n	800159e <on_event+0x2e>
		if (!is_button_held) {
 8001584:	4b0c      	ldr	r3, [pc, #48]	@ (80015b8 <on_event+0x48>)
 8001586:	781b      	ldrb	r3, [r3, #0]
 8001588:	2b00      	cmp	r3, #0
 800158a:	d105      	bne.n	8001598 <on_event+0x28>
			is_button_held = 1;
 800158c:	4b0a      	ldr	r3, [pc, #40]	@ (80015b8 <on_event+0x48>)
 800158e:	2201      	movs	r2, #1
 8001590:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8001592:	f7ff ffcd 	bl	8001530 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8001596:	e00b      	b.n	80015b0 <on_event+0x40>
			on_button_held();
 8001598:	f7ff ffde 	bl	8001558 <on_button_held>
}
 800159c:	e008      	b.n	80015b0 <on_event+0x40>
		if (is_button_held) {
 800159e:	4b06      	ldr	r3, [pc, #24]	@ (80015b8 <on_event+0x48>)
 80015a0:	781b      	ldrb	r3, [r3, #0]
 80015a2:	2b00      	cmp	r3, #0
 80015a4:	d004      	beq.n	80015b0 <on_event+0x40>
			is_button_held = 0;
 80015a6:	4b04      	ldr	r3, [pc, #16]	@ (80015b8 <on_event+0x48>)
 80015a8:	2200      	movs	r2, #0
 80015aa:	701a      	strb	r2, [r3, #0]
			on_button_released();
 80015ac:	f7ff ffda 	bl	8001564 <on_button_released>
}
 80015b0:	bf00      	nop
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40011000 	.word	0x40011000
 80015b8:	20000244 	.word	0x20000244

080015bc <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80015c2:	f001 fbb9 	bl	8002d38 <HAL_GetTick>
 80015c6:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <get_tick_delta_time+0x28>)
 80015ca:	681b      	ldr	r3, [r3, #0]
 80015cc:	687a      	ldr	r2, [r7, #4]
 80015ce:	1ad3      	subs	r3, r2, r3
 80015d0:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 80015d2:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <get_tick_delta_time+0x28>)
 80015d4:	687b      	ldr	r3, [r7, #4]
 80015d6:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 80015d8:	683b      	ldr	r3, [r7, #0]
}
 80015da:	4618      	mov	r0, r3
 80015dc:	3708      	adds	r7, #8
 80015de:	46bd      	mov	sp, r7
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000338 	.word	0x20000338

080015e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b082      	sub	sp, #8
 80015ec:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ee:	f001 fb4b 	bl	8002c88 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015f2:	f000 f86d 	bl	80016d0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015f6:	f000 f9cf 	bl	8001998 <MX_GPIO_Init>
  MX_SPI1_Init();
 80015fa:	f000 f8ab 	bl	8001754 <MX_SPI1_Init>
  MX_TIM2_Init();
 80015fe:	f000 f8df 	bl	80017c0 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001602:	f000 f953 	bl	80018ac <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8001606:	4829      	ldr	r0, [pc, #164]	@ (80016ac <main+0xc4>)
 8001608:	f002 fb14 	bl	8003c34 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 800160c:	4828      	ldr	r0, [pc, #160]	@ (80016b0 <main+0xc8>)
 800160e:	f002 fb11 	bl	8003c34 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8001612:	2100      	movs	r1, #0
 8001614:	4826      	ldr	r0, [pc, #152]	@ (80016b0 <main+0xc8>)
 8001616:	f002 fbb7 	bl	8003d88 <HAL_TIM_PWM_Start>
	OE_H;
 800161a:	2201      	movs	r2, #1
 800161c:	2140      	movs	r1, #64	@ 0x40
 800161e:	4825      	ldr	r0, [pc, #148]	@ (80016b4 <main+0xcc>)
 8001620:	f001 fe3d 	bl	800329e <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 8001624:	f000 ffb8 	bl	8002598 <clear_back_buffer>
	on_ready();
 8001628:	f7ff fea0 	bl	800136c <on_ready>

#if DEBUG_NUMBERS
	uint32_t debug_var = 0;
#endif

	uint32_t accumulator = 0;
 800162c:	2300      	movs	r3, #0
 800162e:	607b      	str	r3, [r7, #4]

	while (1) {
		uint32_t delta = get_tick_delta_time();
 8001630:	f7ff ffc4 	bl	80015bc <get_tick_delta_time>
 8001634:	6038      	str	r0, [r7, #0]

		accumulator += delta;
 8001636:	687a      	ldr	r2, [r7, #4]
 8001638:	683b      	ldr	r3, [r7, #0]
 800163a:	4413      	add	r3, r2
 800163c:	607b      	str	r3, [r7, #4]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 800163e:	687b      	ldr	r3, [r7, #4]
 8001640:	2b13      	cmp	r3, #19
 8001642:	d91a      	bls.n	800167a <main+0x92>
			if (is_back_buffer_new){
 8001644:	4b1c      	ldr	r3, [pc, #112]	@ (80016b8 <main+0xd0>)
 8001646:	781b      	ldrb	r3, [r3, #0]
 8001648:	2b00      	cmp	r3, #0
 800164a:	d12c      	bne.n	80016a6 <main+0xbe>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 800164c:	6878      	ldr	r0, [r7, #4]
 800164e:	f7fe fec1 	bl	80003d4 <__aeabi_ui2d>
 8001652:	f04f 0200 	mov.w	r2, #0
 8001656:	4b19      	ldr	r3, [pc, #100]	@ (80016bc <main+0xd4>)
 8001658:	f7ff f860 	bl	800071c <__aeabi_ddiv>
 800165c:	4602      	mov	r2, r0
 800165e:	460b      	mov	r3, r1
 8001660:	4917      	ldr	r1, [pc, #92]	@ (80016c0 <main+0xd8>)
 8001662:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8001666:	f7ff ff83 	bl	8001570 <on_event>
			on_update();
 800166a:	f7ff feb7 	bl	80013dc <on_update>
#if DEBUG_NUMBERS
			draw_number(accumulator, 0, HEIGHT-7, false);
			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
#endif

			accumulator -= UPDATE_INTERVAL_MS;
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	3b14      	subs	r3, #20
 8001672:	607b      	str	r3, [r7, #4]
			//accumulator = 0;
			is_back_buffer_new = true;
 8001674:	4b10      	ldr	r3, [pc, #64]	@ (80016b8 <main+0xd0>)
 8001676:	2201      	movs	r2, #1
 8001678:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 800167a:	4b12      	ldr	r3, [pc, #72]	@ (80016c4 <main+0xdc>)
 800167c:	781b      	ldrb	r3, [r3, #0]
 800167e:	2b00      	cmp	r3, #0
 8001680:	d0d6      	beq.n	8001630 <main+0x48>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 8001682:	f001 fb59 	bl	8002d38 <HAL_GetTick>
 8001686:	4602      	mov	r2, r0
 8001688:	4b0f      	ldr	r3, [pc, #60]	@ (80016c8 <main+0xe0>)
 800168a:	681b      	ldr	r3, [r3, #0]
 800168c:	1ad3      	subs	r3, r2, r3
 800168e:	2b14      	cmp	r3, #20
 8001690:	d9ce      	bls.n	8001630 <main+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8001692:	2200      	movs	r2, #0
 8001694:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001698:	480c      	ldr	r0, [pc, #48]	@ (80016cc <main+0xe4>)
 800169a:	f001 fe00 	bl	800329e <HAL_GPIO_WritePin>
				buzzer_request = false;
 800169e:	4b09      	ldr	r3, [pc, #36]	@ (80016c4 <main+0xdc>)
 80016a0:	2200      	movs	r2, #0
 80016a2:	701a      	strb	r2, [r3, #0]
 80016a4:	e7c4      	b.n	8001630 <main+0x48>
				continue;
 80016a6:	bf00      	nop
	while (1) {
 80016a8:	e7c2      	b.n	8001630 <main+0x48>
 80016aa:	bf00      	nop
 80016ac:	200002a0 	.word	0x200002a0
 80016b0:	200002e8 	.word	0x200002e8
 80016b4:	40011000 	.word	0x40011000
 80016b8:	20001344 	.word	0x20001344
 80016bc:	408f4000 	.word	0x408f4000
 80016c0:	20000330 	.word	0x20000330
 80016c4:	2000033c 	.word	0x2000033c
 80016c8:	20000340 	.word	0x20000340
 80016cc:	40010800 	.word	0x40010800

080016d0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80016d0:	b580      	push	{r7, lr}
 80016d2:	b090      	sub	sp, #64	@ 0x40
 80016d4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80016d6:	f107 0318 	add.w	r3, r7, #24
 80016da:	2228      	movs	r2, #40	@ 0x28
 80016dc:	2100      	movs	r1, #0
 80016de:	4618      	mov	r0, r3
 80016e0:	f004 fc0e 	bl	8005f00 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80016e4:	1d3b      	adds	r3, r7, #4
 80016e6:	2200      	movs	r2, #0
 80016e8:	601a      	str	r2, [r3, #0]
 80016ea:	605a      	str	r2, [r3, #4]
 80016ec:	609a      	str	r2, [r3, #8]
 80016ee:	60da      	str	r2, [r3, #12]
 80016f0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016f2:	2302      	movs	r3, #2
 80016f4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016f6:	2301      	movs	r3, #1
 80016f8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016fa:	2310      	movs	r3, #16
 80016fc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016fe:	2302      	movs	r3, #2
 8001700:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8001702:	2300      	movs	r3, #0
 8001704:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8001706:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 800170a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800170c:	f107 0318 	add.w	r3, r7, #24
 8001710:	4618      	mov	r0, r3
 8001712:	f001 fddd 	bl	80032d0 <HAL_RCC_OscConfig>
 8001716:	4603      	mov	r3, r0
 8001718:	2b00      	cmp	r3, #0
 800171a:	d001      	beq.n	8001720 <SystemClock_Config+0x50>
  {
    Error_Handler();
 800171c:	f000 fa00 	bl	8001b20 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001720:	230f      	movs	r3, #15
 8001722:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001724:	2302      	movs	r3, #2
 8001726:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001728:	2300      	movs	r3, #0
 800172a:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800172c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001730:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001732:	2300      	movs	r3, #0
 8001734:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001736:	1d3b      	adds	r3, r7, #4
 8001738:	2102      	movs	r1, #2
 800173a:	4618      	mov	r0, r3
 800173c:	f002 f84a 	bl	80037d4 <HAL_RCC_ClockConfig>
 8001740:	4603      	mov	r3, r0
 8001742:	2b00      	cmp	r3, #0
 8001744:	d001      	beq.n	800174a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001746:	f000 f9eb 	bl	8001b20 <Error_Handler>
  }
}
 800174a:	bf00      	nop
 800174c:	3740      	adds	r7, #64	@ 0x40
 800174e:	46bd      	mov	sp, r7
 8001750:	bd80      	pop	{r7, pc}
	...

08001754 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001754:	b580      	push	{r7, lr}
 8001756:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001758:	4b17      	ldr	r3, [pc, #92]	@ (80017b8 <MX_SPI1_Init+0x64>)
 800175a:	4a18      	ldr	r2, [pc, #96]	@ (80017bc <MX_SPI1_Init+0x68>)
 800175c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800175e:	4b16      	ldr	r3, [pc, #88]	@ (80017b8 <MX_SPI1_Init+0x64>)
 8001760:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001764:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001766:	4b14      	ldr	r3, [pc, #80]	@ (80017b8 <MX_SPI1_Init+0x64>)
 8001768:	2200      	movs	r2, #0
 800176a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800176c:	4b12      	ldr	r3, [pc, #72]	@ (80017b8 <MX_SPI1_Init+0x64>)
 800176e:	2200      	movs	r2, #0
 8001770:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001772:	4b11      	ldr	r3, [pc, #68]	@ (80017b8 <MX_SPI1_Init+0x64>)
 8001774:	2200      	movs	r2, #0
 8001776:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001778:	4b0f      	ldr	r3, [pc, #60]	@ (80017b8 <MX_SPI1_Init+0x64>)
 800177a:	2200      	movs	r2, #0
 800177c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800177e:	4b0e      	ldr	r3, [pc, #56]	@ (80017b8 <MX_SPI1_Init+0x64>)
 8001780:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001784:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001786:	4b0c      	ldr	r3, [pc, #48]	@ (80017b8 <MX_SPI1_Init+0x64>)
 8001788:	2210      	movs	r2, #16
 800178a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800178c:	4b0a      	ldr	r3, [pc, #40]	@ (80017b8 <MX_SPI1_Init+0x64>)
 800178e:	2200      	movs	r2, #0
 8001790:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001792:	4b09      	ldr	r3, [pc, #36]	@ (80017b8 <MX_SPI1_Init+0x64>)
 8001794:	2200      	movs	r2, #0
 8001796:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001798:	4b07      	ldr	r3, [pc, #28]	@ (80017b8 <MX_SPI1_Init+0x64>)
 800179a:	2200      	movs	r2, #0
 800179c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800179e:	4b06      	ldr	r3, [pc, #24]	@ (80017b8 <MX_SPI1_Init+0x64>)
 80017a0:	220a      	movs	r2, #10
 80017a2:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80017a4:	4804      	ldr	r0, [pc, #16]	@ (80017b8 <MX_SPI1_Init+0x64>)
 80017a6:	f002 f971 	bl	8003a8c <HAL_SPI_Init>
 80017aa:	4603      	mov	r3, r0
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d001      	beq.n	80017b4 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 80017b0:	f000 f9b6 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80017b4:	bf00      	nop
 80017b6:	bd80      	pop	{r7, pc}
 80017b8:	20000248 	.word	0x20000248
 80017bc:	40013000 	.word	0x40013000

080017c0 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80017c0:	b580      	push	{r7, lr}
 80017c2:	b08e      	sub	sp, #56	@ 0x38
 80017c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80017c6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80017ca:	2200      	movs	r2, #0
 80017cc:	601a      	str	r2, [r3, #0]
 80017ce:	605a      	str	r2, [r3, #4]
 80017d0:	609a      	str	r2, [r3, #8]
 80017d2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80017d4:	f107 0320 	add.w	r3, r7, #32
 80017d8:	2200      	movs	r2, #0
 80017da:	601a      	str	r2, [r3, #0]
 80017dc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80017de:	1d3b      	adds	r3, r7, #4
 80017e0:	2200      	movs	r2, #0
 80017e2:	601a      	str	r2, [r3, #0]
 80017e4:	605a      	str	r2, [r3, #4]
 80017e6:	609a      	str	r2, [r3, #8]
 80017e8:	60da      	str	r2, [r3, #12]
 80017ea:	611a      	str	r2, [r3, #16]
 80017ec:	615a      	str	r2, [r3, #20]
 80017ee:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80017f0:	4b2d      	ldr	r3, [pc, #180]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 80017f2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80017f6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 80017f8:	4b2b      	ldr	r3, [pc, #172]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 80017fa:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 80017fe:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001800:	4b29      	ldr	r3, [pc, #164]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 8001802:	2200      	movs	r2, #0
 8001804:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8001806:	4b28      	ldr	r3, [pc, #160]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 8001808:	2205      	movs	r2, #5
 800180a:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800180c:	4b26      	ldr	r3, [pc, #152]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 800180e:	2200      	movs	r2, #0
 8001810:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001812:	4b25      	ldr	r3, [pc, #148]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 8001814:	2200      	movs	r2, #0
 8001816:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001818:	4823      	ldr	r0, [pc, #140]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 800181a:	f002 f9bb 	bl	8003b94 <HAL_TIM_Base_Init>
 800181e:	4603      	mov	r3, r0
 8001820:	2b00      	cmp	r3, #0
 8001822:	d001      	beq.n	8001828 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8001824:	f000 f97c 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001828:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800182c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800182e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001832:	4619      	mov	r1, r3
 8001834:	481c      	ldr	r0, [pc, #112]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 8001836:	f002 fd13 	bl	8004260 <HAL_TIM_ConfigClockSource>
 800183a:	4603      	mov	r3, r0
 800183c:	2b00      	cmp	r3, #0
 800183e:	d001      	beq.n	8001844 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001840:	f000 f96e 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001844:	4818      	ldr	r0, [pc, #96]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 8001846:	f002 fa47 	bl	8003cd8 <HAL_TIM_PWM_Init>
 800184a:	4603      	mov	r3, r0
 800184c:	2b00      	cmp	r3, #0
 800184e:	d001      	beq.n	8001854 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001850:	f000 f966 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001854:	2300      	movs	r3, #0
 8001856:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001858:	2300      	movs	r3, #0
 800185a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800185c:	f107 0320 	add.w	r3, r7, #32
 8001860:	4619      	mov	r1, r3
 8001862:	4811      	ldr	r0, [pc, #68]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 8001864:	f003 f894 	bl	8004990 <HAL_TIMEx_MasterConfigSynchronization>
 8001868:	4603      	mov	r3, r0
 800186a:	2b00      	cmp	r3, #0
 800186c:	d001      	beq.n	8001872 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 800186e:	f000 f957 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001872:	2360      	movs	r3, #96	@ 0x60
 8001874:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001876:	2300      	movs	r3, #0
 8001878:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800187a:	2300      	movs	r3, #0
 800187c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800187e:	2300      	movs	r3, #0
 8001880:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001882:	1d3b      	adds	r3, r7, #4
 8001884:	2200      	movs	r2, #0
 8001886:	4619      	mov	r1, r3
 8001888:	4807      	ldr	r0, [pc, #28]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 800188a:	f002 fc27 	bl	80040dc <HAL_TIM_PWM_ConfigChannel>
 800188e:	4603      	mov	r3, r0
 8001890:	2b00      	cmp	r3, #0
 8001892:	d001      	beq.n	8001898 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001894:	f000 f944 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001898:	4803      	ldr	r0, [pc, #12]	@ (80018a8 <MX_TIM2_Init+0xe8>)
 800189a:	f001 f92b 	bl	8002af4 <HAL_TIM_MspPostInit>

}
 800189e:	bf00      	nop
 80018a0:	3738      	adds	r7, #56	@ 0x38
 80018a2:	46bd      	mov	sp, r7
 80018a4:	bd80      	pop	{r7, pc}
 80018a6:	bf00      	nop
 80018a8:	200002a0 	.word	0x200002a0

080018ac <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80018ac:	b580      	push	{r7, lr}
 80018ae:	b08e      	sub	sp, #56	@ 0x38
 80018b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80018b2:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80018c0:	f107 0320 	add.w	r3, r7, #32
 80018c4:	2200      	movs	r2, #0
 80018c6:	601a      	str	r2, [r3, #0]
 80018c8:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80018ca:	1d3b      	adds	r3, r7, #4
 80018cc:	2200      	movs	r2, #0
 80018ce:	601a      	str	r2, [r3, #0]
 80018d0:	605a      	str	r2, [r3, #4]
 80018d2:	609a      	str	r2, [r3, #8]
 80018d4:	60da      	str	r2, [r3, #12]
 80018d6:	611a      	str	r2, [r3, #16]
 80018d8:	615a      	str	r2, [r3, #20]
 80018da:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80018dc:	4b2c      	ldr	r3, [pc, #176]	@ (8001990 <MX_TIM3_Init+0xe4>)
 80018de:	4a2d      	ldr	r2, [pc, #180]	@ (8001994 <MX_TIM3_Init+0xe8>)
 80018e0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 80018e2:	4b2b      	ldr	r3, [pc, #172]	@ (8001990 <MX_TIM3_Init+0xe4>)
 80018e4:	223f      	movs	r2, #63	@ 0x3f
 80018e6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80018e8:	4b29      	ldr	r3, [pc, #164]	@ (8001990 <MX_TIM3_Init+0xe4>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 80018ee:	4b28      	ldr	r3, [pc, #160]	@ (8001990 <MX_TIM3_Init+0xe4>)
 80018f0:	2263      	movs	r2, #99	@ 0x63
 80018f2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80018f4:	4b26      	ldr	r3, [pc, #152]	@ (8001990 <MX_TIM3_Init+0xe4>)
 80018f6:	2200      	movs	r2, #0
 80018f8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80018fa:	4b25      	ldr	r3, [pc, #148]	@ (8001990 <MX_TIM3_Init+0xe4>)
 80018fc:	2200      	movs	r2, #0
 80018fe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001900:	4823      	ldr	r0, [pc, #140]	@ (8001990 <MX_TIM3_Init+0xe4>)
 8001902:	f002 f947 	bl	8003b94 <HAL_TIM_Base_Init>
 8001906:	4603      	mov	r3, r0
 8001908:	2b00      	cmp	r3, #0
 800190a:	d001      	beq.n	8001910 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800190c:	f000 f908 	bl	8001b20 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001910:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001914:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001916:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800191a:	4619      	mov	r1, r3
 800191c:	481c      	ldr	r0, [pc, #112]	@ (8001990 <MX_TIM3_Init+0xe4>)
 800191e:	f002 fc9f 	bl	8004260 <HAL_TIM_ConfigClockSource>
 8001922:	4603      	mov	r3, r0
 8001924:	2b00      	cmp	r3, #0
 8001926:	d001      	beq.n	800192c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001928:	f000 f8fa 	bl	8001b20 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800192c:	4818      	ldr	r0, [pc, #96]	@ (8001990 <MX_TIM3_Init+0xe4>)
 800192e:	f002 f9d3 	bl	8003cd8 <HAL_TIM_PWM_Init>
 8001932:	4603      	mov	r3, r0
 8001934:	2b00      	cmp	r3, #0
 8001936:	d001      	beq.n	800193c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001938:	f000 f8f2 	bl	8001b20 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800193c:	2300      	movs	r3, #0
 800193e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001940:	2300      	movs	r3, #0
 8001942:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001944:	f107 0320 	add.w	r3, r7, #32
 8001948:	4619      	mov	r1, r3
 800194a:	4811      	ldr	r0, [pc, #68]	@ (8001990 <MX_TIM3_Init+0xe4>)
 800194c:	f003 f820 	bl	8004990 <HAL_TIMEx_MasterConfigSynchronization>
 8001950:	4603      	mov	r3, r0
 8001952:	2b00      	cmp	r3, #0
 8001954:	d001      	beq.n	800195a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001956:	f000 f8e3 	bl	8001b20 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800195a:	2360      	movs	r3, #96	@ 0x60
 800195c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 800195e:	230a      	movs	r3, #10
 8001960:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001962:	2302      	movs	r3, #2
 8001964:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001966:	2300      	movs	r3, #0
 8001968:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800196a:	1d3b      	adds	r3, r7, #4
 800196c:	2200      	movs	r2, #0
 800196e:	4619      	mov	r1, r3
 8001970:	4807      	ldr	r0, [pc, #28]	@ (8001990 <MX_TIM3_Init+0xe4>)
 8001972:	f002 fbb3 	bl	80040dc <HAL_TIM_PWM_ConfigChannel>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800197c:	f000 f8d0 	bl	8001b20 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001980:	4803      	ldr	r0, [pc, #12]	@ (8001990 <MX_TIM3_Init+0xe4>)
 8001982:	f001 f8b7 	bl	8002af4 <HAL_TIM_MspPostInit>

}
 8001986:	bf00      	nop
 8001988:	3738      	adds	r7, #56	@ 0x38
 800198a:	46bd      	mov	sp, r7
 800198c:	bd80      	pop	{r7, pc}
 800198e:	bf00      	nop
 8001990:	200002e8 	.word	0x200002e8
 8001994:	40000400 	.word	0x40000400

08001998 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001998:	b580      	push	{r7, lr}
 800199a:	b088      	sub	sp, #32
 800199c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800199e:	f107 0310 	add.w	r3, r7, #16
 80019a2:	2200      	movs	r2, #0
 80019a4:	601a      	str	r2, [r3, #0]
 80019a6:	605a      	str	r2, [r3, #4]
 80019a8:	609a      	str	r2, [r3, #8]
 80019aa:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80019ac:	4b56      	ldr	r3, [pc, #344]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019ae:	699b      	ldr	r3, [r3, #24]
 80019b0:	4a55      	ldr	r2, [pc, #340]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019b2:	f043 0310 	orr.w	r3, r3, #16
 80019b6:	6193      	str	r3, [r2, #24]
 80019b8:	4b53      	ldr	r3, [pc, #332]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019ba:	699b      	ldr	r3, [r3, #24]
 80019bc:	f003 0310 	and.w	r3, r3, #16
 80019c0:	60fb      	str	r3, [r7, #12]
 80019c2:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80019c4:	4b50      	ldr	r3, [pc, #320]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019c6:	699b      	ldr	r3, [r3, #24]
 80019c8:	4a4f      	ldr	r2, [pc, #316]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019ca:	f043 0304 	orr.w	r3, r3, #4
 80019ce:	6193      	str	r3, [r2, #24]
 80019d0:	4b4d      	ldr	r3, [pc, #308]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019d2:	699b      	ldr	r3, [r3, #24]
 80019d4:	f003 0304 	and.w	r3, r3, #4
 80019d8:	60bb      	str	r3, [r7, #8]
 80019da:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80019dc:	4b4a      	ldr	r3, [pc, #296]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019de:	699b      	ldr	r3, [r3, #24]
 80019e0:	4a49      	ldr	r2, [pc, #292]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019e2:	f043 0308 	orr.w	r3, r3, #8
 80019e6:	6193      	str	r3, [r2, #24]
 80019e8:	4b47      	ldr	r3, [pc, #284]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019ea:	699b      	ldr	r3, [r3, #24]
 80019ec:	f003 0308 	and.w	r3, r3, #8
 80019f0:	607b      	str	r3, [r7, #4]
 80019f2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80019f4:	4b44      	ldr	r3, [pc, #272]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019f6:	699b      	ldr	r3, [r3, #24]
 80019f8:	4a43      	ldr	r2, [pc, #268]	@ (8001b08 <MX_GPIO_Init+0x170>)
 80019fa:	f043 0320 	orr.w	r3, r3, #32
 80019fe:	6193      	str	r3, [r2, #24]
 8001a00:	4b41      	ldr	r3, [pc, #260]	@ (8001b08 <MX_GPIO_Init+0x170>)
 8001a02:	699b      	ldr	r3, [r3, #24]
 8001a04:	f003 0320 	and.w	r3, r3, #32
 8001a08:	603b      	str	r3, [r7, #0]
 8001a0a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	f24e 0138 	movw	r1, #57400	@ 0xe038
 8001a12:	483e      	ldr	r0, [pc, #248]	@ (8001b0c <MX_GPIO_Init+0x174>)
 8001a14:	f001 fc43 	bl	800329e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001a18:	2200      	movs	r2, #0
 8001a1a:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8001a1e:	483c      	ldr	r0, [pc, #240]	@ (8001b10 <MX_GPIO_Init+0x178>)
 8001a20:	f001 fc3d 	bl	800329e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001a24:	2200      	movs	r2, #0
 8001a26:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001a2a:	483a      	ldr	r0, [pc, #232]	@ (8001b14 <MX_GPIO_Init+0x17c>)
 8001a2c:	f001 fc37 	bl	800329e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001a30:	2200      	movs	r2, #0
 8001a32:	2104      	movs	r1, #4
 8001a34:	4838      	ldr	r0, [pc, #224]	@ (8001b18 <MX_GPIO_Init+0x180>)
 8001a36:	f001 fc32 	bl	800329e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001a3a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001a3e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001a40:	4b36      	ldr	r3, [pc, #216]	@ (8001b1c <MX_GPIO_Init+0x184>)
 8001a42:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a44:	2300      	movs	r3, #0
 8001a46:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a48:	f107 0310 	add.w	r3, r7, #16
 8001a4c:	4619      	mov	r1, r3
 8001a4e:	4830      	ldr	r0, [pc, #192]	@ (8001b10 <MX_GPIO_Init+0x178>)
 8001a50:	f001 fa8a 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001a54:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8001a58:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a5a:	2301      	movs	r3, #1
 8001a5c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a5e:	2300      	movs	r3, #0
 8001a60:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a62:	2302      	movs	r3, #2
 8001a64:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a66:	f107 0310 	add.w	r3, r7, #16
 8001a6a:	4619      	mov	r1, r3
 8001a6c:	4827      	ldr	r0, [pc, #156]	@ (8001b0c <MX_GPIO_Init+0x174>)
 8001a6e:	f001 fa7b 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001a72:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8001a76:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a78:	2301      	movs	r3, #1
 8001a7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a7c:	2300      	movs	r3, #0
 8001a7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a80:	2302      	movs	r3, #2
 8001a82:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001a84:	f107 0310 	add.w	r3, r7, #16
 8001a88:	4619      	mov	r1, r3
 8001a8a:	4821      	ldr	r0, [pc, #132]	@ (8001b10 <MX_GPIO_Init+0x178>)
 8001a8c:	f001 fa6c 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001a90:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001a94:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001a96:	2301      	movs	r3, #1
 8001a98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a9a:	2300      	movs	r3, #0
 8001a9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001a9e:	2302      	movs	r3, #2
 8001aa0:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001aa2:	f107 0310 	add.w	r3, r7, #16
 8001aa6:	4619      	mov	r1, r3
 8001aa8:	481a      	ldr	r0, [pc, #104]	@ (8001b14 <MX_GPIO_Init+0x17c>)
 8001aaa:	f001 fa5d 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001aae:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ab2:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001ab4:	2300      	movs	r3, #0
 8001ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ab8:	2300      	movs	r3, #0
 8001aba:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001abc:	f107 0310 	add.w	r3, r7, #16
 8001ac0:	4619      	mov	r1, r3
 8001ac2:	4813      	ldr	r0, [pc, #76]	@ (8001b10 <MX_GPIO_Init+0x178>)
 8001ac4:	f001 fa50 	bl	8002f68 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001ac8:	2304      	movs	r3, #4
 8001aca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001acc:	2301      	movs	r3, #1
 8001ace:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ad0:	2300      	movs	r3, #0
 8001ad2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ad4:	2302      	movs	r3, #2
 8001ad6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ad8:	f107 0310 	add.w	r3, r7, #16
 8001adc:	4619      	mov	r1, r3
 8001ade:	480e      	ldr	r0, [pc, #56]	@ (8001b18 <MX_GPIO_Init+0x180>)
 8001ae0:	f001 fa42 	bl	8002f68 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001ae4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001ae8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001aea:	2300      	movs	r3, #0
 8001aec:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001aee:	2301      	movs	r3, #1
 8001af0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001af2:	f107 0310 	add.w	r3, r7, #16
 8001af6:	4619      	mov	r1, r3
 8001af8:	4805      	ldr	r0, [pc, #20]	@ (8001b10 <MX_GPIO_Init+0x178>)
 8001afa:	f001 fa35 	bl	8002f68 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001afe:	bf00      	nop
 8001b00:	3720      	adds	r7, #32
 8001b02:	46bd      	mov	sp, r7
 8001b04:	bd80      	pop	{r7, pc}
 8001b06:	bf00      	nop
 8001b08:	40021000 	.word	0x40021000
 8001b0c:	40010c00 	.word	0x40010c00
 8001b10:	40011000 	.word	0x40011000
 8001b14:	40010800 	.word	0x40010800
 8001b18:	40011400 	.word	0x40011400
 8001b1c:	10110000 	.word	0x10110000

08001b20 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001b20:	b480      	push	{r7}
 8001b22:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001b24:	b672      	cpsid	i
}
 8001b26:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001b28:	bf00      	nop
 8001b2a:	e7fd      	b.n	8001b28 <Error_Handler+0x8>

08001b2c <mat4_mul_mat4>:
Mat4 get_rotation_matrix_z(float angle);
Mat4 get_scaling_matrix(float sx, float sy, float sz);



Mat4 mat4_mul_mat4(const Mat4 *a, const Mat4 *b) {
 8001b2c:	b5b0      	push	{r4, r5, r7, lr}
 8001b2e:	b098      	sub	sp, #96	@ 0x60
 8001b30:	af00      	add	r7, sp, #0
 8001b32:	60f8      	str	r0, [r7, #12]
 8001b34:	60b9      	str	r1, [r7, #8]
 8001b36:	607a      	str	r2, [r7, #4]
	Mat4 result;
	for (int i = 0; i < 4; ++i) {
 8001b38:	2300      	movs	r3, #0
 8001b3a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001b3c:	e049      	b.n	8001bd2 <mat4_mul_mat4+0xa6>
		for (int j = 0; j < 4; ++j) {
 8001b3e:	2300      	movs	r3, #0
 8001b40:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001b42:	e040      	b.n	8001bc6 <mat4_mul_mat4+0x9a>
			result.m[i][j] = 0.0;
 8001b44:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b46:	009a      	lsls	r2, r3, #2
 8001b48:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b4a:	4413      	add	r3, r2
 8001b4c:	009b      	lsls	r3, r3, #2
 8001b4e:	3360      	adds	r3, #96	@ 0x60
 8001b50:	443b      	add	r3, r7
 8001b52:	f04f 0200 	mov.w	r2, #0
 8001b56:	f843 2c4c 	str.w	r2, [r3, #-76]
			for (int k = 0; k < 4; ++k) {
 8001b5a:	2300      	movs	r3, #0
 8001b5c:	657b      	str	r3, [r7, #84]	@ 0x54
 8001b5e:	e02c      	b.n	8001bba <mat4_mul_mat4+0x8e>
				result.m[i][j] += a->m[i][k] * b->m[k][j];
 8001b60:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001b62:	009a      	lsls	r2, r3, #2
 8001b64:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001b66:	4413      	add	r3, r2
 8001b68:	009b      	lsls	r3, r3, #2
 8001b6a:	3360      	adds	r3, #96	@ 0x60
 8001b6c:	443b      	add	r3, r7
 8001b6e:	f853 4c4c 	ldr.w	r4, [r3, #-76]
 8001b72:	68bb      	ldr	r3, [r7, #8]
 8001b74:	6dfa      	ldr	r2, [r7, #92]	@ 0x5c
 8001b76:	0091      	lsls	r1, r2, #2
 8001b78:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b7a:	440a      	add	r2, r1
 8001b7c:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
 8001b80:	687b      	ldr	r3, [r7, #4]
 8001b82:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8001b84:	0091      	lsls	r1, r2, #2
 8001b86:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8001b88:	440a      	add	r2, r1
 8001b8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b8e:	4619      	mov	r1, r3
 8001b90:	f7ff f8ba 	bl	8000d08 <__aeabi_fmul>
 8001b94:	4603      	mov	r3, r0
 8001b96:	4619      	mov	r1, r3
 8001b98:	4620      	mov	r0, r4
 8001b9a:	f7fe ffad 	bl	8000af8 <__addsf3>
 8001b9e:	4603      	mov	r3, r0
 8001ba0:	4619      	mov	r1, r3
 8001ba2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001ba4:	009a      	lsls	r2, r3, #2
 8001ba6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001ba8:	4413      	add	r3, r2
 8001baa:	009b      	lsls	r3, r3, #2
 8001bac:	3360      	adds	r3, #96	@ 0x60
 8001bae:	443b      	add	r3, r7
 8001bb0:	f843 1c4c 	str.w	r1, [r3, #-76]
			for (int k = 0; k < 4; ++k) {
 8001bb4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bb6:	3301      	adds	r3, #1
 8001bb8:	657b      	str	r3, [r7, #84]	@ 0x54
 8001bba:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8001bbc:	2b03      	cmp	r3, #3
 8001bbe:	ddcf      	ble.n	8001b60 <mat4_mul_mat4+0x34>
		for (int j = 0; j < 4; ++j) {
 8001bc0:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc2:	3301      	adds	r3, #1
 8001bc4:	65bb      	str	r3, [r7, #88]	@ 0x58
 8001bc6:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8001bc8:	2b03      	cmp	r3, #3
 8001bca:	ddbb      	ble.n	8001b44 <mat4_mul_mat4+0x18>
	for (int i = 0; i < 4; ++i) {
 8001bcc:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bce:	3301      	adds	r3, #1
 8001bd0:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8001bd2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8001bd4:	2b03      	cmp	r3, #3
 8001bd6:	ddb2      	ble.n	8001b3e <mat4_mul_mat4+0x12>
			}
		}
	}
	return result;
 8001bd8:	68fb      	ldr	r3, [r7, #12]
 8001bda:	461d      	mov	r5, r3
 8001bdc:	f107 0414 	add.w	r4, r7, #20
 8001be0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be4:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001be6:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001be8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001bea:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001bec:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001bf0:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001bf4:	68f8      	ldr	r0, [r7, #12]
 8001bf6:	3760      	adds	r7, #96	@ 0x60
 8001bf8:	46bd      	mov	sp, r7
 8001bfa:	bdb0      	pop	{r4, r5, r7, pc}

08001bfc <mat4_mul_vec4>:

Vec4 mat4_mul_vec4(const Mat4 *m, const Vec4 *v) {
 8001bfc:	b590      	push	{r4, r7, lr}
 8001bfe:	b089      	sub	sp, #36	@ 0x24
 8001c00:	af00      	add	r7, sp, #0
 8001c02:	60f8      	str	r0, [r7, #12]
 8001c04:	60b9      	str	r1, [r7, #8]
 8001c06:	607a      	str	r2, [r7, #4]
	Vec4 result;
    result.x = m->m[0][0] * v->x + m->m[0][1] * v->y + m->m[0][2] * v->z + m->m[0][3] * v->w;
 8001c08:	68bb      	ldr	r3, [r7, #8]
 8001c0a:	681a      	ldr	r2, [r3, #0]
 8001c0c:	687b      	ldr	r3, [r7, #4]
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4619      	mov	r1, r3
 8001c12:	4610      	mov	r0, r2
 8001c14:	f7ff f878 	bl	8000d08 <__aeabi_fmul>
 8001c18:	4603      	mov	r3, r0
 8001c1a:	461c      	mov	r4, r3
 8001c1c:	68bb      	ldr	r3, [r7, #8]
 8001c1e:	685a      	ldr	r2, [r3, #4]
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	685b      	ldr	r3, [r3, #4]
 8001c24:	4619      	mov	r1, r3
 8001c26:	4610      	mov	r0, r2
 8001c28:	f7ff f86e 	bl	8000d08 <__aeabi_fmul>
 8001c2c:	4603      	mov	r3, r0
 8001c2e:	4619      	mov	r1, r3
 8001c30:	4620      	mov	r0, r4
 8001c32:	f7fe ff61 	bl	8000af8 <__addsf3>
 8001c36:	4603      	mov	r3, r0
 8001c38:	461c      	mov	r4, r3
 8001c3a:	68bb      	ldr	r3, [r7, #8]
 8001c3c:	689a      	ldr	r2, [r3, #8]
 8001c3e:	687b      	ldr	r3, [r7, #4]
 8001c40:	689b      	ldr	r3, [r3, #8]
 8001c42:	4619      	mov	r1, r3
 8001c44:	4610      	mov	r0, r2
 8001c46:	f7ff f85f 	bl	8000d08 <__aeabi_fmul>
 8001c4a:	4603      	mov	r3, r0
 8001c4c:	4619      	mov	r1, r3
 8001c4e:	4620      	mov	r0, r4
 8001c50:	f7fe ff52 	bl	8000af8 <__addsf3>
 8001c54:	4603      	mov	r3, r0
 8001c56:	461c      	mov	r4, r3
 8001c58:	68bb      	ldr	r3, [r7, #8]
 8001c5a:	68da      	ldr	r2, [r3, #12]
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	68db      	ldr	r3, [r3, #12]
 8001c60:	4619      	mov	r1, r3
 8001c62:	4610      	mov	r0, r2
 8001c64:	f7ff f850 	bl	8000d08 <__aeabi_fmul>
 8001c68:	4603      	mov	r3, r0
 8001c6a:	4619      	mov	r1, r3
 8001c6c:	4620      	mov	r0, r4
 8001c6e:	f7fe ff43 	bl	8000af8 <__addsf3>
 8001c72:	4603      	mov	r3, r0
 8001c74:	613b      	str	r3, [r7, #16]
    result.y = m->m[1][0] * v->x + m->m[1][1] * v->y + m->m[1][2] * v->z + m->m[1][3] * v->w;
 8001c76:	68bb      	ldr	r3, [r7, #8]
 8001c78:	691a      	ldr	r2, [r3, #16]
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4619      	mov	r1, r3
 8001c80:	4610      	mov	r0, r2
 8001c82:	f7ff f841 	bl	8000d08 <__aeabi_fmul>
 8001c86:	4603      	mov	r3, r0
 8001c88:	461c      	mov	r4, r3
 8001c8a:	68bb      	ldr	r3, [r7, #8]
 8001c8c:	695a      	ldr	r2, [r3, #20]
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	685b      	ldr	r3, [r3, #4]
 8001c92:	4619      	mov	r1, r3
 8001c94:	4610      	mov	r0, r2
 8001c96:	f7ff f837 	bl	8000d08 <__aeabi_fmul>
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	4619      	mov	r1, r3
 8001c9e:	4620      	mov	r0, r4
 8001ca0:	f7fe ff2a 	bl	8000af8 <__addsf3>
 8001ca4:	4603      	mov	r3, r0
 8001ca6:	461c      	mov	r4, r3
 8001ca8:	68bb      	ldr	r3, [r7, #8]
 8001caa:	699a      	ldr	r2, [r3, #24]
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	689b      	ldr	r3, [r3, #8]
 8001cb0:	4619      	mov	r1, r3
 8001cb2:	4610      	mov	r0, r2
 8001cb4:	f7ff f828 	bl	8000d08 <__aeabi_fmul>
 8001cb8:	4603      	mov	r3, r0
 8001cba:	4619      	mov	r1, r3
 8001cbc:	4620      	mov	r0, r4
 8001cbe:	f7fe ff1b 	bl	8000af8 <__addsf3>
 8001cc2:	4603      	mov	r3, r0
 8001cc4:	461c      	mov	r4, r3
 8001cc6:	68bb      	ldr	r3, [r7, #8]
 8001cc8:	69da      	ldr	r2, [r3, #28]
 8001cca:	687b      	ldr	r3, [r7, #4]
 8001ccc:	68db      	ldr	r3, [r3, #12]
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4610      	mov	r0, r2
 8001cd2:	f7ff f819 	bl	8000d08 <__aeabi_fmul>
 8001cd6:	4603      	mov	r3, r0
 8001cd8:	4619      	mov	r1, r3
 8001cda:	4620      	mov	r0, r4
 8001cdc:	f7fe ff0c 	bl	8000af8 <__addsf3>
 8001ce0:	4603      	mov	r3, r0
 8001ce2:	617b      	str	r3, [r7, #20]
    result.z = m->m[2][0] * v->x + m->m[2][1] * v->y + m->m[2][2] * v->z + m->m[2][3] * v->w;
 8001ce4:	68bb      	ldr	r3, [r7, #8]
 8001ce6:	6a1a      	ldr	r2, [r3, #32]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	4619      	mov	r1, r3
 8001cee:	4610      	mov	r0, r2
 8001cf0:	f7ff f80a 	bl	8000d08 <__aeabi_fmul>
 8001cf4:	4603      	mov	r3, r0
 8001cf6:	461c      	mov	r4, r3
 8001cf8:	68bb      	ldr	r3, [r7, #8]
 8001cfa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8001cfc:	687b      	ldr	r3, [r7, #4]
 8001cfe:	685b      	ldr	r3, [r3, #4]
 8001d00:	4619      	mov	r1, r3
 8001d02:	4610      	mov	r0, r2
 8001d04:	f7ff f800 	bl	8000d08 <__aeabi_fmul>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	4619      	mov	r1, r3
 8001d0c:	4620      	mov	r0, r4
 8001d0e:	f7fe fef3 	bl	8000af8 <__addsf3>
 8001d12:	4603      	mov	r3, r0
 8001d14:	461c      	mov	r4, r3
 8001d16:	68bb      	ldr	r3, [r7, #8]
 8001d18:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 8001d1a:	687b      	ldr	r3, [r7, #4]
 8001d1c:	689b      	ldr	r3, [r3, #8]
 8001d1e:	4619      	mov	r1, r3
 8001d20:	4610      	mov	r0, r2
 8001d22:	f7fe fff1 	bl	8000d08 <__aeabi_fmul>
 8001d26:	4603      	mov	r3, r0
 8001d28:	4619      	mov	r1, r3
 8001d2a:	4620      	mov	r0, r4
 8001d2c:	f7fe fee4 	bl	8000af8 <__addsf3>
 8001d30:	4603      	mov	r3, r0
 8001d32:	461c      	mov	r4, r3
 8001d34:	68bb      	ldr	r3, [r7, #8]
 8001d36:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	4619      	mov	r1, r3
 8001d3e:	4610      	mov	r0, r2
 8001d40:	f7fe ffe2 	bl	8000d08 <__aeabi_fmul>
 8001d44:	4603      	mov	r3, r0
 8001d46:	4619      	mov	r1, r3
 8001d48:	4620      	mov	r0, r4
 8001d4a:	f7fe fed5 	bl	8000af8 <__addsf3>
 8001d4e:	4603      	mov	r3, r0
 8001d50:	61bb      	str	r3, [r7, #24]
    result.w = m->m[3][0] * v->x + m->m[3][1] * v->y + m->m[3][2] * v->z + m->m[3][3] * v->w;
 8001d52:	68bb      	ldr	r3, [r7, #8]
 8001d54:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8001d56:	687b      	ldr	r3, [r7, #4]
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4619      	mov	r1, r3
 8001d5c:	4610      	mov	r0, r2
 8001d5e:	f7fe ffd3 	bl	8000d08 <__aeabi_fmul>
 8001d62:	4603      	mov	r3, r0
 8001d64:	461c      	mov	r4, r3
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	685b      	ldr	r3, [r3, #4]
 8001d6e:	4619      	mov	r1, r3
 8001d70:	4610      	mov	r0, r2
 8001d72:	f7fe ffc9 	bl	8000d08 <__aeabi_fmul>
 8001d76:	4603      	mov	r3, r0
 8001d78:	4619      	mov	r1, r3
 8001d7a:	4620      	mov	r0, r4
 8001d7c:	f7fe febc 	bl	8000af8 <__addsf3>
 8001d80:	4603      	mov	r3, r0
 8001d82:	461c      	mov	r4, r3
 8001d84:	68bb      	ldr	r3, [r7, #8]
 8001d86:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8001d88:	687b      	ldr	r3, [r7, #4]
 8001d8a:	689b      	ldr	r3, [r3, #8]
 8001d8c:	4619      	mov	r1, r3
 8001d8e:	4610      	mov	r0, r2
 8001d90:	f7fe ffba 	bl	8000d08 <__aeabi_fmul>
 8001d94:	4603      	mov	r3, r0
 8001d96:	4619      	mov	r1, r3
 8001d98:	4620      	mov	r0, r4
 8001d9a:	f7fe fead 	bl	8000af8 <__addsf3>
 8001d9e:	4603      	mov	r3, r0
 8001da0:	461c      	mov	r4, r3
 8001da2:	68bb      	ldr	r3, [r7, #8]
 8001da4:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8001da6:	687b      	ldr	r3, [r7, #4]
 8001da8:	68db      	ldr	r3, [r3, #12]
 8001daa:	4619      	mov	r1, r3
 8001dac:	4610      	mov	r0, r2
 8001dae:	f7fe ffab 	bl	8000d08 <__aeabi_fmul>
 8001db2:	4603      	mov	r3, r0
 8001db4:	4619      	mov	r1, r3
 8001db6:	4620      	mov	r0, r4
 8001db8:	f7fe fe9e 	bl	8000af8 <__addsf3>
 8001dbc:	4603      	mov	r3, r0
 8001dbe:	61fb      	str	r3, [r7, #28]
    return result;
 8001dc0:	68fb      	ldr	r3, [r7, #12]
 8001dc2:	461c      	mov	r4, r3
 8001dc4:	f107 0310 	add.w	r3, r7, #16
 8001dc8:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001dca:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001dce:	68f8      	ldr	r0, [r7, #12]
 8001dd0:	3724      	adds	r7, #36	@ 0x24
 8001dd2:	46bd      	mov	sp, r7
 8001dd4:	bd90      	pop	{r4, r7, pc}
	...

08001dd8 <mat4_make_perspective>:

Mat4 mat4_make_perspective(float fov, float aspect, float znear, float zfar) {
 8001dd8:	b5b0      	push	{r4, r5, r7, lr}
 8001dda:	b094      	sub	sp, #80	@ 0x50
 8001ddc:	af00      	add	r7, sp, #0
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	607a      	str	r2, [r7, #4]
 8001de4:	603b      	str	r3, [r7, #0]
	Mat4 m = {0};
 8001de6:	f107 0310 	add.w	r3, r7, #16
 8001dea:	2240      	movs	r2, #64	@ 0x40
 8001dec:	2100      	movs	r1, #0
 8001dee:	4618      	mov	r0, r3
 8001df0:	f004 f886 	bl	8005f00 <memset>
	m.m[0][0] = aspect * (1 / tan(fov/2));
 8001df4:	6878      	ldr	r0, [r7, #4]
 8001df6:	f7fe fb0f 	bl	8000418 <__aeabi_f2d>
 8001dfa:	4604      	mov	r4, r0
 8001dfc:	460d      	mov	r5, r1
 8001dfe:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e02:	68b8      	ldr	r0, [r7, #8]
 8001e04:	f7ff f834 	bl	8000e70 <__aeabi_fdiv>
 8001e08:	4603      	mov	r3, r0
 8001e0a:	4618      	mov	r0, r3
 8001e0c:	f7fe fb04 	bl	8000418 <__aeabi_f2d>
 8001e10:	4602      	mov	r2, r0
 8001e12:	460b      	mov	r3, r1
 8001e14:	4610      	mov	r0, r2
 8001e16:	4619      	mov	r1, r3
 8001e18:	f002 feb6 	bl	8004b88 <tan>
 8001e1c:	4602      	mov	r2, r0
 8001e1e:	460b      	mov	r3, r1
 8001e20:	f04f 0000 	mov.w	r0, #0
 8001e24:	4931      	ldr	r1, [pc, #196]	@ (8001eec <mat4_make_perspective+0x114>)
 8001e26:	f7fe fc79 	bl	800071c <__aeabi_ddiv>
 8001e2a:	4602      	mov	r2, r0
 8001e2c:	460b      	mov	r3, r1
 8001e2e:	4620      	mov	r0, r4
 8001e30:	4629      	mov	r1, r5
 8001e32:	f7fe fb49 	bl	80004c8 <__aeabi_dmul>
 8001e36:	4602      	mov	r2, r0
 8001e38:	460b      	mov	r3, r1
 8001e3a:	4610      	mov	r0, r2
 8001e3c:	4619      	mov	r1, r3
 8001e3e:	f7fe fe05 	bl	8000a4c <__aeabi_d2f>
 8001e42:	4603      	mov	r3, r0
 8001e44:	613b      	str	r3, [r7, #16]
	m.m[1][1] = 1 / tan(fov/2);
 8001e46:	f04f 4180 	mov.w	r1, #1073741824	@ 0x40000000
 8001e4a:	68b8      	ldr	r0, [r7, #8]
 8001e4c:	f7ff f810 	bl	8000e70 <__aeabi_fdiv>
 8001e50:	4603      	mov	r3, r0
 8001e52:	4618      	mov	r0, r3
 8001e54:	f7fe fae0 	bl	8000418 <__aeabi_f2d>
 8001e58:	4602      	mov	r2, r0
 8001e5a:	460b      	mov	r3, r1
 8001e5c:	4610      	mov	r0, r2
 8001e5e:	4619      	mov	r1, r3
 8001e60:	f002 fe92 	bl	8004b88 <tan>
 8001e64:	4602      	mov	r2, r0
 8001e66:	460b      	mov	r3, r1
 8001e68:	f04f 0000 	mov.w	r0, #0
 8001e6c:	491f      	ldr	r1, [pc, #124]	@ (8001eec <mat4_make_perspective+0x114>)
 8001e6e:	f7fe fc55 	bl	800071c <__aeabi_ddiv>
 8001e72:	4602      	mov	r2, r0
 8001e74:	460b      	mov	r3, r1
 8001e76:	4610      	mov	r0, r2
 8001e78:	4619      	mov	r1, r3
 8001e7a:	f7fe fde7 	bl	8000a4c <__aeabi_d2f>
 8001e7e:	4603      	mov	r3, r0
 8001e80:	627b      	str	r3, [r7, #36]	@ 0x24
	m.m[2][2] = zfar / (zfar - znear);
 8001e82:	6839      	ldr	r1, [r7, #0]
 8001e84:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e86:	f7fe fe35 	bl	8000af4 <__aeabi_fsub>
 8001e8a:	4603      	mov	r3, r0
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001e90:	f7fe ffee 	bl	8000e70 <__aeabi_fdiv>
 8001e94:	4603      	mov	r3, r0
 8001e96:	63bb      	str	r3, [r7, #56]	@ 0x38
	m.m[2][3] = (-zfar * znear) / (zfar - znear);
 8001e98:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8001e9a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8001e9e:	6839      	ldr	r1, [r7, #0]
 8001ea0:	4618      	mov	r0, r3
 8001ea2:	f7fe ff31 	bl	8000d08 <__aeabi_fmul>
 8001ea6:	4603      	mov	r3, r0
 8001ea8:	461c      	mov	r4, r3
 8001eaa:	6839      	ldr	r1, [r7, #0]
 8001eac:	6e38      	ldr	r0, [r7, #96]	@ 0x60
 8001eae:	f7fe fe21 	bl	8000af4 <__aeabi_fsub>
 8001eb2:	4603      	mov	r3, r0
 8001eb4:	4619      	mov	r1, r3
 8001eb6:	4620      	mov	r0, r4
 8001eb8:	f7fe ffda 	bl	8000e70 <__aeabi_fdiv>
 8001ebc:	4603      	mov	r3, r0
 8001ebe:	63fb      	str	r3, [r7, #60]	@ 0x3c
	m.m[3][2] = 1.0;
 8001ec0:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ec4:	64bb      	str	r3, [r7, #72]	@ 0x48
	return m;
 8001ec6:	68fb      	ldr	r3, [r7, #12]
 8001ec8:	461d      	mov	r5, r3
 8001eca:	f107 0410 	add.w	r4, r7, #16
 8001ece:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001ed6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001ed8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001eda:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001ede:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001ee2:	68f8      	ldr	r0, [r7, #12]
 8001ee4:	3750      	adds	r7, #80	@ 0x50
 8001ee6:	46bd      	mov	sp, r7
 8001ee8:	bdb0      	pop	{r4, r5, r7, pc}
 8001eea:	bf00      	nop
 8001eec:	3ff00000 	.word	0x3ff00000

08001ef0 <mat4_mul_vec4_project>:

Vec4 mat4_mul_vec4_project(Mat4* mat_proj, Vec4* v) {
 8001ef0:	b590      	push	{r4, r7, lr}
 8001ef2:	b089      	sub	sp, #36	@ 0x24
 8001ef4:	af00      	add	r7, sp, #0
 8001ef6:	60f8      	str	r0, [r7, #12]
 8001ef8:	60b9      	str	r1, [r7, #8]
 8001efa:	607a      	str	r2, [r7, #4]
	Vec4 result = mat4_mul_vec4(mat_proj, v);
 8001efc:	f107 0310 	add.w	r3, r7, #16
 8001f00:	687a      	ldr	r2, [r7, #4]
 8001f02:	68b9      	ldr	r1, [r7, #8]
 8001f04:	4618      	mov	r0, r3
 8001f06:	f7ff fe79 	bl	8001bfc <mat4_mul_vec4>

	if (result.w != 0.0) {
 8001f0a:	69fb      	ldr	r3, [r7, #28]
 8001f0c:	f04f 0100 	mov.w	r1, #0
 8001f10:	4618      	mov	r0, r3
 8001f12:	f7ff f88d 	bl	8001030 <__aeabi_fcmpeq>
 8001f16:	4603      	mov	r3, r0
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d117      	bne.n	8001f4c <mat4_mul_vec4_project+0x5c>
		result.x /= result.w;
 8001f1c:	693b      	ldr	r3, [r7, #16]
 8001f1e:	69fa      	ldr	r2, [r7, #28]
 8001f20:	4611      	mov	r1, r2
 8001f22:	4618      	mov	r0, r3
 8001f24:	f7fe ffa4 	bl	8000e70 <__aeabi_fdiv>
 8001f28:	4603      	mov	r3, r0
 8001f2a:	613b      	str	r3, [r7, #16]
		result.y /= result.w;
 8001f2c:	697b      	ldr	r3, [r7, #20]
 8001f2e:	69fa      	ldr	r2, [r7, #28]
 8001f30:	4611      	mov	r1, r2
 8001f32:	4618      	mov	r0, r3
 8001f34:	f7fe ff9c 	bl	8000e70 <__aeabi_fdiv>
 8001f38:	4603      	mov	r3, r0
 8001f3a:	617b      	str	r3, [r7, #20]
		result.z /= result.w;
 8001f3c:	69bb      	ldr	r3, [r7, #24]
 8001f3e:	69fa      	ldr	r2, [r7, #28]
 8001f40:	4611      	mov	r1, r2
 8001f42:	4618      	mov	r0, r3
 8001f44:	f7fe ff94 	bl	8000e70 <__aeabi_fdiv>
 8001f48:	4603      	mov	r3, r0
 8001f4a:	61bb      	str	r3, [r7, #24]
	}
	return result;
 8001f4c:	68fb      	ldr	r3, [r7, #12]
 8001f4e:	461c      	mov	r4, r3
 8001f50:	f107 0310 	add.w	r3, r7, #16
 8001f54:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001f56:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8001f5a:	68f8      	ldr	r0, [r7, #12]
 8001f5c:	3724      	adds	r7, #36	@ 0x24
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd90      	pop	{r4, r7, pc}

08001f62 <get_translation_matrix>:




Mat4 get_translation_matrix(float tx, float ty, float tz) {
 8001f62:	b4b0      	push	{r4, r5, r7}
 8001f64:	b095      	sub	sp, #84	@ 0x54
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	603b      	str	r3, [r7, #0]
	Mat4 mat = {{
 8001f70:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f74:	613b      	str	r3, [r7, #16]
 8001f76:	f04f 0300 	mov.w	r3, #0
 8001f7a:	617b      	str	r3, [r7, #20]
 8001f7c:	f04f 0300 	mov.w	r3, #0
 8001f80:	61bb      	str	r3, [r7, #24]
 8001f82:	68bb      	ldr	r3, [r7, #8]
 8001f84:	61fb      	str	r3, [r7, #28]
 8001f86:	f04f 0300 	mov.w	r3, #0
 8001f8a:	623b      	str	r3, [r7, #32]
 8001f8c:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001f90:	627b      	str	r3, [r7, #36]	@ 0x24
 8001f92:	f04f 0300 	mov.w	r3, #0
 8001f96:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001f98:	687b      	ldr	r3, [r7, #4]
 8001f9a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8001f9c:	f04f 0300 	mov.w	r3, #0
 8001fa0:	633b      	str	r3, [r7, #48]	@ 0x30
 8001fa2:	f04f 0300 	mov.w	r3, #0
 8001fa6:	637b      	str	r3, [r7, #52]	@ 0x34
 8001fa8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fac:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001fae:	683b      	ldr	r3, [r7, #0]
 8001fb0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8001fb2:	f04f 0300 	mov.w	r3, #0
 8001fb6:	643b      	str	r3, [r7, #64]	@ 0x40
 8001fb8:	f04f 0300 	mov.w	r3, #0
 8001fbc:	647b      	str	r3, [r7, #68]	@ 0x44
 8001fbe:	f04f 0300 	mov.w	r3, #0
 8001fc2:	64bb      	str	r3, [r7, #72]	@ 0x48
 8001fc4:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001fc8:	64fb      	str	r3, [r7, #76]	@ 0x4c
		{1, 0, 0, tx},
		{0, 1, 0, ty},
		{0, 0, 1, tz},
		{0, 0, 0, 1}
	}};
	return mat;
 8001fca:	68fb      	ldr	r3, [r7, #12]
 8001fcc:	461d      	mov	r5, r3
 8001fce:	f107 0410 	add.w	r4, r7, #16
 8001fd2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fd6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fd8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fda:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8001fdc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8001fde:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8001fe2:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 8001fe6:	68f8      	ldr	r0, [r7, #12]
 8001fe8:	3754      	adds	r7, #84	@ 0x54
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bcb0      	pop	{r4, r5, r7}
 8001fee:	4770      	bx	lr

08001ff0 <get_rotation_matrix_x>:
Mat4 get_rotation_matrix_x(float angle) {
 8001ff0:	b5b0      	push	{r4, r5, r7, lr}
 8001ff2:	b092      	sub	sp, #72	@ 0x48
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
 8001ffa:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8001ffe:	60bb      	str	r3, [r7, #8]
 8002000:	f04f 0300 	mov.w	r3, #0
 8002004:	60fb      	str	r3, [r7, #12]
 8002006:	f04f 0300 	mov.w	r3, #0
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	f04f 0300 	mov.w	r3, #0
 8002010:	617b      	str	r3, [r7, #20]
 8002012:	f04f 0300 	mov.w	r3, #0
 8002016:	61bb      	str	r3, [r7, #24]
		{1, 0, 0, 0},
		{0, cos(angle), -sin(angle), 0},
 8002018:	6838      	ldr	r0, [r7, #0]
 800201a:	f7fe f9fd 	bl	8000418 <__aeabi_f2d>
 800201e:	4602      	mov	r2, r0
 8002020:	460b      	mov	r3, r1
 8002022:	4610      	mov	r0, r2
 8002024:	4619      	mov	r1, r3
 8002026:	f002 fd23 	bl	8004a70 <cos>
 800202a:	4602      	mov	r2, r0
 800202c:	460b      	mov	r3, r1
 800202e:	4610      	mov	r0, r2
 8002030:	4619      	mov	r1, r3
 8002032:	f7fe fd0b 	bl	8000a4c <__aeabi_d2f>
 8002036:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002038:	61fb      	str	r3, [r7, #28]
		{0, cos(angle), -sin(angle), 0},
 800203a:	6838      	ldr	r0, [r7, #0]
 800203c:	f7fe f9ec 	bl	8000418 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4610      	mov	r0, r2
 8002046:	4619      	mov	r1, r3
 8002048:	f002 fd58 	bl	8004afc <sin>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4610      	mov	r0, r2
 8002052:	4619      	mov	r1, r3
 8002054:	f7fe fcfa 	bl	8000a4c <__aeabi_d2f>
 8002058:	4603      	mov	r3, r0
	Mat4 mat = {{
 800205a:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 800205e:	623b      	str	r3, [r7, #32]
 8002060:	f04f 0300 	mov.w	r3, #0
 8002064:	627b      	str	r3, [r7, #36]	@ 0x24
 8002066:	f04f 0300 	mov.w	r3, #0
 800206a:	62bb      	str	r3, [r7, #40]	@ 0x28
		{0, sin(angle), cos(angle), 0},
 800206c:	6838      	ldr	r0, [r7, #0]
 800206e:	f7fe f9d3 	bl	8000418 <__aeabi_f2d>
 8002072:	4602      	mov	r2, r0
 8002074:	460b      	mov	r3, r1
 8002076:	4610      	mov	r0, r2
 8002078:	4619      	mov	r1, r3
 800207a:	f002 fd3f 	bl	8004afc <sin>
 800207e:	4602      	mov	r2, r0
 8002080:	460b      	mov	r3, r1
 8002082:	4610      	mov	r0, r2
 8002084:	4619      	mov	r1, r3
 8002086:	f7fe fce1 	bl	8000a4c <__aeabi_d2f>
 800208a:	4603      	mov	r3, r0
	Mat4 mat = {{
 800208c:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{0, sin(angle), cos(angle), 0},
 800208e:	6838      	ldr	r0, [r7, #0]
 8002090:	f7fe f9c2 	bl	8000418 <__aeabi_f2d>
 8002094:	4602      	mov	r2, r0
 8002096:	460b      	mov	r3, r1
 8002098:	4610      	mov	r0, r2
 800209a:	4619      	mov	r1, r3
 800209c:	f002 fce8 	bl	8004a70 <cos>
 80020a0:	4602      	mov	r2, r0
 80020a2:	460b      	mov	r3, r1
 80020a4:	4610      	mov	r0, r2
 80020a6:	4619      	mov	r1, r3
 80020a8:	f7fe fcd0 	bl	8000a4c <__aeabi_d2f>
 80020ac:	4603      	mov	r3, r0
	Mat4 mat = {{
 80020ae:	633b      	str	r3, [r7, #48]	@ 0x30
 80020b0:	f04f 0300 	mov.w	r3, #0
 80020b4:	637b      	str	r3, [r7, #52]	@ 0x34
 80020b6:	f04f 0300 	mov.w	r3, #0
 80020ba:	63bb      	str	r3, [r7, #56]	@ 0x38
 80020bc:	f04f 0300 	mov.w	r3, #0
 80020c0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80020c2:	f04f 0300 	mov.w	r3, #0
 80020c6:	643b      	str	r3, [r7, #64]	@ 0x40
 80020c8:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80020cc:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 0, 1}
	}};
	return mat;
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	461d      	mov	r5, r3
 80020d2:	f107 0408 	add.w	r4, r7, #8
 80020d6:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020d8:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80020e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80020e2:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80020e6:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80020ea:	6878      	ldr	r0, [r7, #4]
 80020ec:	3748      	adds	r7, #72	@ 0x48
 80020ee:	46bd      	mov	sp, r7
 80020f0:	bdb0      	pop	{r4, r5, r7, pc}

080020f2 <get_rotation_matrix_y>:

Mat4 get_rotation_matrix_y(float angle) {
 80020f2:	b5b0      	push	{r4, r5, r7, lr}
 80020f4:	b092      	sub	sp, #72	@ 0x48
 80020f6:	af00      	add	r7, sp, #0
 80020f8:	6078      	str	r0, [r7, #4]
 80020fa:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
		{cos(angle), 0, sin(angle), 0},
 80020fc:	6838      	ldr	r0, [r7, #0]
 80020fe:	f7fe f98b 	bl	8000418 <__aeabi_f2d>
 8002102:	4602      	mov	r2, r0
 8002104:	460b      	mov	r3, r1
 8002106:	4610      	mov	r0, r2
 8002108:	4619      	mov	r1, r3
 800210a:	f002 fcb1 	bl	8004a70 <cos>
 800210e:	4602      	mov	r2, r0
 8002110:	460b      	mov	r3, r1
 8002112:	4610      	mov	r0, r2
 8002114:	4619      	mov	r1, r3
 8002116:	f7fe fc99 	bl	8000a4c <__aeabi_d2f>
 800211a:	4603      	mov	r3, r0
	Mat4 mat = {{
 800211c:	60bb      	str	r3, [r7, #8]
 800211e:	f04f 0300 	mov.w	r3, #0
 8002122:	60fb      	str	r3, [r7, #12]
		{cos(angle), 0, sin(angle), 0},
 8002124:	6838      	ldr	r0, [r7, #0]
 8002126:	f7fe f977 	bl	8000418 <__aeabi_f2d>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f002 fce3 	bl	8004afc <sin>
 8002136:	4602      	mov	r2, r0
 8002138:	460b      	mov	r3, r1
 800213a:	4610      	mov	r0, r2
 800213c:	4619      	mov	r1, r3
 800213e:	f7fe fc85 	bl	8000a4c <__aeabi_d2f>
 8002142:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002144:	613b      	str	r3, [r7, #16]
 8002146:	f04f 0300 	mov.w	r3, #0
 800214a:	617b      	str	r3, [r7, #20]
 800214c:	f04f 0300 	mov.w	r3, #0
 8002150:	61bb      	str	r3, [r7, #24]
 8002152:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 8002156:	61fb      	str	r3, [r7, #28]
 8002158:	f04f 0300 	mov.w	r3, #0
 800215c:	623b      	str	r3, [r7, #32]
 800215e:	f04f 0300 	mov.w	r3, #0
 8002162:	627b      	str	r3, [r7, #36]	@ 0x24
		{0, 1, 0, 0},
		{-sin(angle), 0, cos(angle), 0},
 8002164:	6838      	ldr	r0, [r7, #0]
 8002166:	f7fe f957 	bl	8000418 <__aeabi_f2d>
 800216a:	4602      	mov	r2, r0
 800216c:	460b      	mov	r3, r1
 800216e:	4610      	mov	r0, r2
 8002170:	4619      	mov	r1, r3
 8002172:	f002 fcc3 	bl	8004afc <sin>
 8002176:	4602      	mov	r2, r0
 8002178:	460b      	mov	r3, r1
 800217a:	4610      	mov	r0, r2
 800217c:	4619      	mov	r1, r3
 800217e:	f7fe fc65 	bl	8000a4c <__aeabi_d2f>
 8002182:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002184:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002188:	62bb      	str	r3, [r7, #40]	@ 0x28
 800218a:	f04f 0300 	mov.w	r3, #0
 800218e:	62fb      	str	r3, [r7, #44]	@ 0x2c
		{-sin(angle), 0, cos(angle), 0},
 8002190:	6838      	ldr	r0, [r7, #0]
 8002192:	f7fe f941 	bl	8000418 <__aeabi_f2d>
 8002196:	4602      	mov	r2, r0
 8002198:	460b      	mov	r3, r1
 800219a:	4610      	mov	r0, r2
 800219c:	4619      	mov	r1, r3
 800219e:	f002 fc67 	bl	8004a70 <cos>
 80021a2:	4602      	mov	r2, r0
 80021a4:	460b      	mov	r3, r1
 80021a6:	4610      	mov	r0, r2
 80021a8:	4619      	mov	r1, r3
 80021aa:	f7fe fc4f 	bl	8000a4c <__aeabi_d2f>
 80021ae:	4603      	mov	r3, r0
	Mat4 mat = {{
 80021b0:	633b      	str	r3, [r7, #48]	@ 0x30
 80021b2:	f04f 0300 	mov.w	r3, #0
 80021b6:	637b      	str	r3, [r7, #52]	@ 0x34
 80021b8:	f04f 0300 	mov.w	r3, #0
 80021bc:	63bb      	str	r3, [r7, #56]	@ 0x38
 80021be:	f04f 0300 	mov.w	r3, #0
 80021c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80021c4:	f04f 0300 	mov.w	r3, #0
 80021c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80021ca:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80021ce:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 0, 1}
	}};
	return mat;
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	461d      	mov	r5, r3
 80021d4:	f107 0408 	add.w	r4, r7, #8
 80021d8:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021da:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021dc:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021de:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e0:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80021e2:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80021e4:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80021e8:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	3748      	adds	r7, #72	@ 0x48
 80021f0:	46bd      	mov	sp, r7
 80021f2:	bdb0      	pop	{r4, r5, r7, pc}

080021f4 <get_rotation_matrix_z>:

Mat4 get_rotation_matrix_z(float angle) {
 80021f4:	b5b0      	push	{r4, r5, r7, lr}
 80021f6:	b092      	sub	sp, #72	@ 0x48
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
	Mat4 mat = {{
		{cos(angle), -sin(angle), 0, 0},
 80021fe:	6838      	ldr	r0, [r7, #0]
 8002200:	f7fe f90a 	bl	8000418 <__aeabi_f2d>
 8002204:	4602      	mov	r2, r0
 8002206:	460b      	mov	r3, r1
 8002208:	4610      	mov	r0, r2
 800220a:	4619      	mov	r1, r3
 800220c:	f002 fc30 	bl	8004a70 <cos>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fc18 	bl	8000a4c <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
	Mat4 mat = {{
 800221e:	60bb      	str	r3, [r7, #8]
		{cos(angle), -sin(angle), 0, 0},
 8002220:	6838      	ldr	r0, [r7, #0]
 8002222:	f7fe f8f9 	bl	8000418 <__aeabi_f2d>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f002 fc65 	bl	8004afc <sin>
 8002232:	4602      	mov	r2, r0
 8002234:	460b      	mov	r3, r1
 8002236:	4610      	mov	r0, r2
 8002238:	4619      	mov	r1, r3
 800223a:	f7fe fc07 	bl	8000a4c <__aeabi_d2f>
 800223e:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002240:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 8002244:	60fb      	str	r3, [r7, #12]
 8002246:	f04f 0300 	mov.w	r3, #0
 800224a:	613b      	str	r3, [r7, #16]
 800224c:	f04f 0300 	mov.w	r3, #0
 8002250:	617b      	str	r3, [r7, #20]
		{sin(angle), cos(angle), 0, 0},
 8002252:	6838      	ldr	r0, [r7, #0]
 8002254:	f7fe f8e0 	bl	8000418 <__aeabi_f2d>
 8002258:	4602      	mov	r2, r0
 800225a:	460b      	mov	r3, r1
 800225c:	4610      	mov	r0, r2
 800225e:	4619      	mov	r1, r3
 8002260:	f002 fc4c 	bl	8004afc <sin>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4610      	mov	r0, r2
 800226a:	4619      	mov	r1, r3
 800226c:	f7fe fbee 	bl	8000a4c <__aeabi_d2f>
 8002270:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002272:	61bb      	str	r3, [r7, #24]
		{sin(angle), cos(angle), 0, 0},
 8002274:	6838      	ldr	r0, [r7, #0]
 8002276:	f7fe f8cf 	bl	8000418 <__aeabi_f2d>
 800227a:	4602      	mov	r2, r0
 800227c:	460b      	mov	r3, r1
 800227e:	4610      	mov	r0, r2
 8002280:	4619      	mov	r1, r3
 8002282:	f002 fbf5 	bl	8004a70 <cos>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4610      	mov	r0, r2
 800228c:	4619      	mov	r1, r3
 800228e:	f7fe fbdd 	bl	8000a4c <__aeabi_d2f>
 8002292:	4603      	mov	r3, r0
	Mat4 mat = {{
 8002294:	61fb      	str	r3, [r7, #28]
 8002296:	f04f 0300 	mov.w	r3, #0
 800229a:	623b      	str	r3, [r7, #32]
 800229c:	f04f 0300 	mov.w	r3, #0
 80022a0:	627b      	str	r3, [r7, #36]	@ 0x24
 80022a2:	f04f 0300 	mov.w	r3, #0
 80022a6:	62bb      	str	r3, [r7, #40]	@ 0x28
 80022a8:	f04f 0300 	mov.w	r3, #0
 80022ac:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80022ae:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80022b2:	633b      	str	r3, [r7, #48]	@ 0x30
 80022b4:	f04f 0300 	mov.w	r3, #0
 80022b8:	637b      	str	r3, [r7, #52]	@ 0x34
 80022ba:	f04f 0300 	mov.w	r3, #0
 80022be:	63bb      	str	r3, [r7, #56]	@ 0x38
 80022c0:	f04f 0300 	mov.w	r3, #0
 80022c4:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80022c6:	f04f 0300 	mov.w	r3, #0
 80022ca:	643b      	str	r3, [r7, #64]	@ 0x40
 80022cc:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 80022d0:	647b      	str	r3, [r7, #68]	@ 0x44
		{0, 0, 1, 0},
		{0, 0, 0, 1}
	}};
	return mat;
 80022d2:	687b      	ldr	r3, [r7, #4]
 80022d4:	461d      	mov	r5, r3
 80022d6:	f107 0408 	add.w	r4, r7, #8
 80022da:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022dc:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022de:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e0:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e2:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 80022e4:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 80022e6:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 80022ea:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 80022ee:	6878      	ldr	r0, [r7, #4]
 80022f0:	3748      	adds	r7, #72	@ 0x48
 80022f2:	46bd      	mov	sp, r7
 80022f4:	bdb0      	pop	{r4, r5, r7, pc}

080022f6 <get_scaling_matrix>:
Mat4 get_scaling_matrix(float sx, float sy, float sz) {
 80022f6:	b4b0      	push	{r4, r5, r7}
 80022f8:	b095      	sub	sp, #84	@ 0x54
 80022fa:	af00      	add	r7, sp, #0
 80022fc:	60f8      	str	r0, [r7, #12]
 80022fe:	60b9      	str	r1, [r7, #8]
 8002300:	607a      	str	r2, [r7, #4]
 8002302:	603b      	str	r3, [r7, #0]
	Mat4 mat = {{
 8002304:	68bb      	ldr	r3, [r7, #8]
 8002306:	613b      	str	r3, [r7, #16]
 8002308:	f04f 0300 	mov.w	r3, #0
 800230c:	617b      	str	r3, [r7, #20]
 800230e:	f04f 0300 	mov.w	r3, #0
 8002312:	61bb      	str	r3, [r7, #24]
 8002314:	f04f 0300 	mov.w	r3, #0
 8002318:	61fb      	str	r3, [r7, #28]
 800231a:	f04f 0300 	mov.w	r3, #0
 800231e:	623b      	str	r3, [r7, #32]
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	627b      	str	r3, [r7, #36]	@ 0x24
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	62bb      	str	r3, [r7, #40]	@ 0x28
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	633b      	str	r3, [r7, #48]	@ 0x30
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	637b      	str	r3, [r7, #52]	@ 0x34
 800233c:	683b      	ldr	r3, [r7, #0]
 800233e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8002340:	f04f 0300 	mov.w	r3, #0
 8002344:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002346:	f04f 0300 	mov.w	r3, #0
 800234a:	643b      	str	r3, [r7, #64]	@ 0x40
 800234c:	f04f 0300 	mov.w	r3, #0
 8002350:	647b      	str	r3, [r7, #68]	@ 0x44
 8002352:	f04f 0300 	mov.w	r3, #0
 8002356:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002358:	f04f 537e 	mov.w	r3, #1065353216	@ 0x3f800000
 800235c:	64fb      	str	r3, [r7, #76]	@ 0x4c
		{sx, 0, 0, 0},
		{0, sy, 0, 0},
		{0, 0, sz, 0},
		{0, 0, 0, 1}
	}};
	return mat;
 800235e:	68fb      	ldr	r3, [r7, #12]
 8002360:	461d      	mov	r5, r3
 8002362:	f107 0410 	add.w	r4, r7, #16
 8002366:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002368:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236a:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 800236c:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 800236e:	cc0f      	ldmia	r4!, {r0, r1, r2, r3}
 8002370:	c50f      	stmia	r5!, {r0, r1, r2, r3}
 8002372:	e894 000f 	ldmia.w	r4, {r0, r1, r2, r3}
 8002376:	e885 000f 	stmia.w	r5, {r0, r1, r2, r3}
}
 800237a:	68f8      	ldr	r0, [r7, #12]
 800237c:	3754      	adds	r7, #84	@ 0x54
 800237e:	46bd      	mov	sp, r7
 8002380:	bcb0      	pop	{r4, r5, r7}
 8002382:	4770      	bx	lr

08002384 <get_view_matrix>:


Mat4 get_view_matrix(float cam_x, float cam_y, float cam_z) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b084      	sub	sp, #16
 8002388:	af00      	add	r7, sp, #0
 800238a:	60f8      	str	r0, [r7, #12]
 800238c:	60b9      	str	r1, [r7, #8]
 800238e:	607a      	str	r2, [r7, #4]
 8002390:	603b      	str	r3, [r7, #0]
	return get_translation_matrix(-cam_x, -cam_y, -cam_z);
 8002392:	68bb      	ldr	r3, [r7, #8]
 8002394:	f083 4100 	eor.w	r1, r3, #2147483648	@ 0x80000000
 8002398:	687b      	ldr	r3, [r7, #4]
 800239a:	f083 4200 	eor.w	r2, r3, #2147483648	@ 0x80000000
 800239e:	683b      	ldr	r3, [r7, #0]
 80023a0:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000
 80023a4:	68f8      	ldr	r0, [r7, #12]
 80023a6:	f7ff fddc 	bl	8001f62 <get_translation_matrix>
}
 80023aa:	68f8      	ldr	r0, [r7, #12]
 80023ac:	3710      	adds	r7, #16
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}

080023b2 <calculate_transform_matrix>:



Mat4 calculate_transform_matrix(const Transform *transform) {
 80023b2:	b5b0      	push	{r4, r5, r7, lr}
 80023b4:	f5ad 7d02 	sub.w	sp, sp, #520	@ 0x208
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023be:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 80023c2:	6018      	str	r0, [r3, #0]
 80023c4:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023c8:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023cc:	6019      	str	r1, [r3, #0]
	Mat4 rotation_x = get_rotation_matrix_x(transform->rot_x);
 80023ce:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023d2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68da      	ldr	r2, [r3, #12]
 80023da:	f507 73e4 	add.w	r3, r7, #456	@ 0x1c8
 80023de:	4611      	mov	r1, r2
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7ff fe05 	bl	8001ff0 <get_rotation_matrix_x>
	Mat4 rotation_y = get_rotation_matrix_y(transform->rot_y);
 80023e6:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80023ea:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	691a      	ldr	r2, [r3, #16]
 80023f2:	f507 73c4 	add.w	r3, r7, #392	@ 0x188
 80023f6:	4611      	mov	r1, r2
 80023f8:	4618      	mov	r0, r3
 80023fa:	f7ff fe7a 	bl	80020f2 <get_rotation_matrix_y>
	Mat4 rotation_z = get_rotation_matrix_z(transform->rot_z);
 80023fe:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002402:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	695a      	ldr	r2, [r3, #20]
 800240a:	f507 73a4 	add.w	r3, r7, #328	@ 0x148
 800240e:	4611      	mov	r1, r2
 8002410:	4618      	mov	r0, r3
 8002412:	f7ff feef 	bl	80021f4 <get_rotation_matrix_z>
	Mat4 rotation_combined = mat4_mul_mat4(&rotation_z, &rotation_y);
 8002416:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800241a:	f5a3 7380 	sub.w	r3, r3, #256	@ 0x100
 800241e:	f507 72c4 	add.w	r2, r7, #392	@ 0x188
 8002422:	f507 71a4 	add.w	r1, r7, #328	@ 0x148
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fb80 	bl	8001b2c <mat4_mul_mat4>
	rotation_combined = mat4_mul_mat4(&rotation_combined, &rotation_x);
 800242c:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002430:	f5a3 7480 	sub.w	r4, r3, #256	@ 0x100
 8002434:	463b      	mov	r3, r7
 8002436:	f507 72e4 	add.w	r2, r7, #456	@ 0x1c8
 800243a:	f507 7184 	add.w	r1, r7, #264	@ 0x108
 800243e:	4618      	mov	r0, r3
 8002440:	f7ff fb74 	bl	8001b2c <mat4_mul_mat4>
 8002444:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002448:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 800244c:	461d      	mov	r5, r3
 800244e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002450:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002452:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002454:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002456:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002458:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800245a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800245e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}

	Mat4 scaling = get_scaling_matrix(transform->scale_x, transform->scale_y, transform->scale_z);
 8002462:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002466:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	6999      	ldr	r1, [r3, #24]
 800246e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002472:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002476:	681b      	ldr	r3, [r3, #0]
 8002478:	69da      	ldr	r2, [r3, #28]
 800247a:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800247e:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	6a1b      	ldr	r3, [r3, #32]
 8002486:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 800248a:	f5a0 70a0 	sub.w	r0, r0, #320	@ 0x140
 800248e:	f7ff ff32 	bl	80022f6 <get_scaling_matrix>

	Mat4 translation = get_translation_matrix(transform->x, transform->y, transform->z);
 8002492:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002496:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 800249a:	681b      	ldr	r3, [r3, #0]
 800249c:	6819      	ldr	r1, [r3, #0]
 800249e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024a2:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	685a      	ldr	r2, [r3, #4]
 80024aa:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024ae:	f5a3 73e4 	sub.w	r3, r3, #456	@ 0x1c8
 80024b2:	681b      	ldr	r3, [r3, #0]
 80024b4:	689b      	ldr	r3, [r3, #8]
 80024b6:	f507 7002 	add.w	r0, r7, #520	@ 0x208
 80024ba:	f5a0 70c0 	sub.w	r0, r0, #384	@ 0x180
 80024be:	f7ff fd50 	bl	8001f62 <get_translation_matrix>

	Mat4 transform_matrix;
	transform_matrix = mat4_mul_mat4(&scaling, &rotation_combined);
 80024c2:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024c6:	f5a3 74e0 	sub.w	r4, r3, #448	@ 0x1c0
 80024ca:	463b      	mov	r3, r7
 80024cc:	f507 7284 	add.w	r2, r7, #264	@ 0x108
 80024d0:	f107 01c8 	add.w	r1, r7, #200	@ 0xc8
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7ff fb29 	bl	8001b2c <mat4_mul_mat4>
 80024da:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024de:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 80024e2:	461d      	mov	r5, r3
 80024e4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024e6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024e8:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ea:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024ec:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 80024ee:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 80024f0:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 80024f4:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	transform_matrix = mat4_mul_mat4(&translation, &transform_matrix);
 80024f8:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 80024fc:	f5a3 74e0 	sub.w	r4, r3, #448	@ 0x1c0
 8002500:	463b      	mov	r3, r7
 8002502:	f107 0248 	add.w	r2, r7, #72	@ 0x48
 8002506:	f107 0188 	add.w	r1, r7, #136	@ 0x88
 800250a:	4618      	mov	r0, r3
 800250c:	f7ff fb0e 	bl	8001b2c <mat4_mul_mat4>
 8002510:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002514:	f5a3 7302 	sub.w	r3, r3, #520	@ 0x208
 8002518:	461d      	mov	r5, r3
 800251a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800251c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800251e:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002520:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002522:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002524:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002526:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800252a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return transform_matrix;
 800252e:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 8002532:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002536:	681a      	ldr	r2, [r3, #0]
 8002538:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800253c:	f5a3 73e0 	sub.w	r3, r3, #448	@ 0x1c0
 8002540:	4614      	mov	r4, r2
 8002542:	461d      	mov	r5, r3
 8002544:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002546:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002548:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800254c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800254e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8002550:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8002554:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
}
 8002558:	f507 7302 	add.w	r3, r7, #520	@ 0x208
 800255c:	f5a3 73e2 	sub.w	r3, r3, #452	@ 0x1c4
 8002560:	6818      	ldr	r0, [r3, #0]
 8002562:	f507 7702 	add.w	r7, r7, #520	@ 0x208
 8002566:	46bd      	mov	sp, r7
 8002568:	bdb0      	pop	{r4, r5, r7, pc}
	...

0800256c <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 800256c:	b480      	push	{r7}
 800256e:	b083      	sub	sp, #12
 8002570:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 8002572:	4b07      	ldr	r3, [pc, #28]	@ (8002590 <swap_buffers+0x24>)
 8002574:	681b      	ldr	r3, [r3, #0]
 8002576:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 8002578:	4b06      	ldr	r3, [pc, #24]	@ (8002594 <swap_buffers+0x28>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4a04      	ldr	r2, [pc, #16]	@ (8002590 <swap_buffers+0x24>)
 800257e:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8002580:	4a04      	ldr	r2, [pc, #16]	@ (8002594 <swap_buffers+0x28>)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6013      	str	r3, [r2, #0]
}
 8002586:	bf00      	nop
 8002588:	370c      	adds	r7, #12
 800258a:	46bd      	mov	sp, r7
 800258c:	bc80      	pop	{r7}
 800258e:	4770      	bx	lr
 8002590:	200001d0 	.word	0x200001d0
 8002594:	200001d4 	.word	0x200001d4

08002598 <clear_back_buffer>:


void clear_back_buffer(void) {
 8002598:	b580      	push	{r7, lr}
 800259a:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 800259c:	4b04      	ldr	r3, [pc, #16]	@ (80025b0 <clear_back_buffer+0x18>)
 800259e:	681b      	ldr	r3, [r3, #0]
 80025a0:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80025a4:	2100      	movs	r1, #0
 80025a6:	4618      	mov	r0, r3
 80025a8:	f003 fcaa 	bl	8005f00 <memset>
}
 80025ac:	bf00      	nop
 80025ae:	bd80      	pop	{r7, pc}
 80025b0:	200001d4 	.word	0x200001d4

080025b4 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 80025b4:	b480      	push	{r7}
 80025b6:	b085      	sub	sp, #20
 80025b8:	af00      	add	r7, sp, #0
 80025ba:	60f8      	str	r0, [r7, #12]
 80025bc:	60b9      	str	r1, [r7, #8]
 80025be:	4611      	mov	r1, r2
 80025c0:	461a      	mov	r2, r3
 80025c2:	460b      	mov	r3, r1
 80025c4:	71fb      	strb	r3, [r7, #7]
 80025c6:	4613      	mov	r3, r2
 80025c8:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 80025ca:	68fb      	ldr	r3, [r7, #12]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	db34      	blt.n	800263a <set_pixel+0x86>
 80025d0:	68fb      	ldr	r3, [r7, #12]
 80025d2:	2b3f      	cmp	r3, #63	@ 0x3f
 80025d4:	dc31      	bgt.n	800263a <set_pixel+0x86>
 80025d6:	68bb      	ldr	r3, [r7, #8]
 80025d8:	2b00      	cmp	r3, #0
 80025da:	db2e      	blt.n	800263a <set_pixel+0x86>
 80025dc:	68bb      	ldr	r3, [r7, #8]
 80025de:	2b1f      	cmp	r3, #31
 80025e0:	dc2b      	bgt.n	800263a <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 80025e2:	79fb      	ldrb	r3, [r7, #7]
 80025e4:	2b00      	cmp	r3, #0
 80025e6:	bf14      	ite	ne
 80025e8:	2301      	movne	r3, #1
 80025ea:	2300      	moveq	r3, #0
 80025ec:	b2db      	uxtb	r3, r3
 80025ee:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 80025f0:	79bb      	ldrb	r3, [r7, #6]
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	bf14      	ite	ne
 80025f6:	2301      	movne	r3, #1
 80025f8:	2300      	moveq	r3, #0
 80025fa:	b2db      	uxtb	r3, r3
 80025fc:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 80025fe:	7e3b      	ldrb	r3, [r7, #24]
 8002600:	2b00      	cmp	r3, #0
 8002602:	bf14      	ite	ne
 8002604:	2301      	movne	r3, #1
 8002606:	2300      	moveq	r3, #0
 8002608:	b2db      	uxtb	r3, r3
 800260a:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 800260c:	79fb      	ldrb	r3, [r7, #7]
 800260e:	009b      	lsls	r3, r3, #2
 8002610:	b25a      	sxtb	r2, r3
 8002612:	79bb      	ldrb	r3, [r7, #6]
 8002614:	005b      	lsls	r3, r3, #1
 8002616:	b25b      	sxtb	r3, r3
 8002618:	4313      	orrs	r3, r2
 800261a:	b25a      	sxtb	r2, r3
 800261c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8002620:	4313      	orrs	r3, r2
 8002622:	b259      	sxtb	r1, r3
 8002624:	4b07      	ldr	r3, [pc, #28]	@ (8002644 <set_pixel+0x90>)
 8002626:	681a      	ldr	r2, [r3, #0]
 8002628:	b2c9      	uxtb	r1, r1
 800262a:	68fb      	ldr	r3, [r7, #12]
 800262c:	015b      	lsls	r3, r3, #5
 800262e:	441a      	add	r2, r3
 8002630:	68bb      	ldr	r3, [r7, #8]
 8002632:	4413      	add	r3, r2
 8002634:	460a      	mov	r2, r1
 8002636:	701a      	strb	r2, [r3, #0]
 8002638:	e000      	b.n	800263c <set_pixel+0x88>
		return;
 800263a:	bf00      	nop
}
 800263c:	3714      	adds	r7, #20
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr
 8002644:	200001d4 	.word	0x200001d4

08002648 <get_rgb>:
void set_pixel_w(int x, int y, uint8_t w) {
	set_pixel(x, y, w, w, w);
}


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8002648:	b480      	push	{r7}
 800264a:	b085      	sub	sp, #20
 800264c:	af00      	add	r7, sp, #0
 800264e:	60b9      	str	r1, [r7, #8]
 8002650:	607a      	str	r2, [r7, #4]
 8002652:	603b      	str	r3, [r7, #0]
 8002654:	4603      	mov	r3, r0
 8002656:	73fb      	strb	r3, [r7, #15]
	*r = (pixel) & 0b100;
 8002658:	7bfb      	ldrb	r3, [r7, #15]
 800265a:	f003 0304 	and.w	r3, r3, #4
 800265e:	b2da      	uxtb	r2, r3
 8002660:	68bb      	ldr	r3, [r7, #8]
 8002662:	701a      	strb	r2, [r3, #0]
	*g = (pixel) & 0b010;
 8002664:	7bfb      	ldrb	r3, [r7, #15]
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	b2da      	uxtb	r2, r3
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	701a      	strb	r2, [r3, #0]
	*b = (pixel) & 0b001;
 8002670:	7bfb      	ldrb	r3, [r7, #15]
 8002672:	f003 0301 	and.w	r3, r3, #1
 8002676:	b2da      	uxtb	r2, r3
 8002678:	683b      	ldr	r3, [r7, #0]
 800267a:	701a      	strb	r2, [r3, #0]
}
 800267c:	bf00      	nop
 800267e:	3714      	adds	r7, #20
 8002680:	46bd      	mov	sp, r7
 8002682:	bc80      	pop	{r7}
 8002684:	4770      	bx	lr
	...

08002688 <render_row>:

uint8_t current_row = 0;
void render_row() {
 8002688:	b580      	push	{r7, lr}
 800268a:	b084      	sub	sp, #16
 800268c:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 800268e:	2300      	movs	r3, #0
 8002690:	73fb      	strb	r3, [r7, #15]
 8002692:	e092      	b.n	80027ba <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 8002694:	2301      	movs	r3, #1
 8002696:	73bb      	strb	r3, [r7, #14]
 8002698:	e087      	b.n	80027aa <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 800269a:	2300      	movs	r3, #0
 800269c:	737b      	strb	r3, [r7, #13]
 800269e:	e07c      	b.n	800279a <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 80026a0:	7bfb      	ldrb	r3, [r7, #15]
 80026a2:	009b      	lsls	r3, r3, #2
 80026a4:	b2da      	uxtb	r2, r3
 80026a6:	7b7b      	ldrb	r3, [r7, #13]
 80026a8:	4413      	add	r3, r2
 80026aa:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 80026ac:	7bbb      	ldrb	r3, [r7, #14]
 80026ae:	00db      	lsls	r3, r3, #3
 80026b0:	b2da      	uxtb	r2, r3
 80026b2:	4b6f      	ldr	r3, [pc, #444]	@ (8002870 <render_row+0x1e8>)
 80026b4:	781b      	ldrb	r3, [r3, #0]
 80026b6:	4413      	add	r3, r2
 80026b8:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 80026ba:	4b6e      	ldr	r3, [pc, #440]	@ (8002874 <render_row+0x1ec>)
 80026bc:	6819      	ldr	r1, [r3, #0]
 80026be:	7b3a      	ldrb	r2, [r7, #12]
 80026c0:	7afb      	ldrb	r3, [r7, #11]
 80026c2:	0152      	lsls	r2, r2, #5
 80026c4:	440a      	add	r2, r1
 80026c6:	4413      	add	r3, r2
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 80026cc:	4b69      	ldr	r3, [pc, #420]	@ (8002874 <render_row+0x1ec>)
 80026ce:	6819      	ldr	r1, [r3, #0]
 80026d0:	7b3a      	ldrb	r2, [r7, #12]
 80026d2:	7afb      	ldrb	r3, [r7, #11]
 80026d4:	3310      	adds	r3, #16
 80026d6:	0152      	lsls	r2, r2, #5
 80026d8:	440a      	add	r2, r1
 80026da:	4413      	add	r3, r2
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 80026e0:	1dbb      	adds	r3, r7, #6
 80026e2:	1dfa      	adds	r2, r7, #7
 80026e4:	f107 0108 	add.w	r1, r7, #8
 80026e8:	7ab8      	ldrb	r0, [r7, #10]
 80026ea:	f7ff ffad 	bl	8002648 <get_rgb>
				R1(r);
 80026ee:	7a3b      	ldrb	r3, [r7, #8]
 80026f0:	2b00      	cmp	r3, #0
 80026f2:	d003      	beq.n	80026fc <render_row+0x74>
 80026f4:	4b60      	ldr	r3, [pc, #384]	@ (8002878 <render_row+0x1f0>)
 80026f6:	2220      	movs	r2, #32
 80026f8:	611a      	str	r2, [r3, #16]
 80026fa:	e002      	b.n	8002702 <render_row+0x7a>
 80026fc:	4b5e      	ldr	r3, [pc, #376]	@ (8002878 <render_row+0x1f0>)
 80026fe:	2220      	movs	r2, #32
 8002700:	615a      	str	r2, [r3, #20]
				G1(g);
 8002702:	79fb      	ldrb	r3, [r7, #7]
 8002704:	2b00      	cmp	r3, #0
 8002706:	d003      	beq.n	8002710 <render_row+0x88>
 8002708:	4b5b      	ldr	r3, [pc, #364]	@ (8002878 <render_row+0x1f0>)
 800270a:	2208      	movs	r2, #8
 800270c:	611a      	str	r2, [r3, #16]
 800270e:	e002      	b.n	8002716 <render_row+0x8e>
 8002710:	4b59      	ldr	r3, [pc, #356]	@ (8002878 <render_row+0x1f0>)
 8002712:	2208      	movs	r2, #8
 8002714:	615a      	str	r2, [r3, #20]
				B1(b);
 8002716:	79bb      	ldrb	r3, [r7, #6]
 8002718:	2b00      	cmp	r3, #0
 800271a:	d004      	beq.n	8002726 <render_row+0x9e>
 800271c:	4b57      	ldr	r3, [pc, #348]	@ (800287c <render_row+0x1f4>)
 800271e:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8002722:	611a      	str	r2, [r3, #16]
 8002724:	e003      	b.n	800272e <render_row+0xa6>
 8002726:	4b55      	ldr	r3, [pc, #340]	@ (800287c <render_row+0x1f4>)
 8002728:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800272c:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 800272e:	1dbb      	adds	r3, r7, #6
 8002730:	1dfa      	adds	r2, r7, #7
 8002732:	f107 0108 	add.w	r1, r7, #8
 8002736:	7a78      	ldrb	r0, [r7, #9]
 8002738:	f7ff ff86 	bl	8002648 <get_rgb>
				R2(r);
 800273c:	7a3b      	ldrb	r3, [r7, #8]
 800273e:	2b00      	cmp	r3, #0
 8002740:	d003      	beq.n	800274a <render_row+0xc2>
 8002742:	4b4d      	ldr	r3, [pc, #308]	@ (8002878 <render_row+0x1f0>)
 8002744:	2210      	movs	r2, #16
 8002746:	611a      	str	r2, [r3, #16]
 8002748:	e002      	b.n	8002750 <render_row+0xc8>
 800274a:	4b4b      	ldr	r3, [pc, #300]	@ (8002878 <render_row+0x1f0>)
 800274c:	2210      	movs	r2, #16
 800274e:	615a      	str	r2, [r3, #20]
				G2(g);
 8002750:	79fb      	ldrb	r3, [r7, #7]
 8002752:	2b00      	cmp	r3, #0
 8002754:	d003      	beq.n	800275e <render_row+0xd6>
 8002756:	4b4a      	ldr	r3, [pc, #296]	@ (8002880 <render_row+0x1f8>)
 8002758:	2204      	movs	r2, #4
 800275a:	611a      	str	r2, [r3, #16]
 800275c:	e002      	b.n	8002764 <render_row+0xdc>
 800275e:	4b48      	ldr	r3, [pc, #288]	@ (8002880 <render_row+0x1f8>)
 8002760:	2204      	movs	r2, #4
 8002762:	615a      	str	r2, [r3, #20]
				B2(b);
 8002764:	79bb      	ldrb	r3, [r7, #6]
 8002766:	2b00      	cmp	r3, #0
 8002768:	d004      	beq.n	8002774 <render_row+0xec>
 800276a:	4b44      	ldr	r3, [pc, #272]	@ (800287c <render_row+0x1f4>)
 800276c:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8002770:	611a      	str	r2, [r3, #16]
 8002772:	e003      	b.n	800277c <render_row+0xf4>
 8002774:	4b41      	ldr	r3, [pc, #260]	@ (800287c <render_row+0x1f4>)
 8002776:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800277a:	615a      	str	r2, [r3, #20]

				CLK_H;
 800277c:	2201      	movs	r2, #1
 800277e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8002782:	483d      	ldr	r0, [pc, #244]	@ (8002878 <render_row+0x1f0>)
 8002784:	f000 fd8b 	bl	800329e <HAL_GPIO_WritePin>
				CLK_L;
 8002788:	2200      	movs	r2, #0
 800278a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800278e:	483a      	ldr	r0, [pc, #232]	@ (8002878 <render_row+0x1f0>)
 8002790:	f000 fd85 	bl	800329e <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 8002794:	7b7b      	ldrb	r3, [r7, #13]
 8002796:	3301      	adds	r3, #1
 8002798:	737b      	strb	r3, [r7, #13]
 800279a:	7b7b      	ldrb	r3, [r7, #13]
 800279c:	2b03      	cmp	r3, #3
 800279e:	f67f af7f 	bls.w	80026a0 <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 80027a2:	7bbb      	ldrb	r3, [r7, #14]
 80027a4:	3b01      	subs	r3, #1
 80027a6:	b2db      	uxtb	r3, r3
 80027a8:	73bb      	strb	r3, [r7, #14]
 80027aa:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	f6bf af73 	bge.w	800269a <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80027b4:	7bfb      	ldrb	r3, [r7, #15]
 80027b6:	3301      	adds	r3, #1
 80027b8:	73fb      	strb	r3, [r7, #15]
 80027ba:	7bfb      	ldrb	r3, [r7, #15]
 80027bc:	2b0f      	cmp	r3, #15
 80027be:	f67f af69 	bls.w	8002694 <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 80027c2:	4b2e      	ldr	r3, [pc, #184]	@ (800287c <render_row+0x1f4>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4a2d      	ldr	r2, [pc, #180]	@ (800287c <render_row+0x1f4>)
 80027c8:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80027cc:	6013      	str	r3, [r2, #0]
	LAT_H;
 80027ce:	2201      	movs	r2, #1
 80027d0:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027d4:	4828      	ldr	r0, [pc, #160]	@ (8002878 <render_row+0x1f0>)
 80027d6:	f000 fd62 	bl	800329e <HAL_GPIO_WritePin>
	LAT_L;
 80027da:	2200      	movs	r2, #0
 80027dc:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80027e0:	4825      	ldr	r0, [pc, #148]	@ (8002878 <render_row+0x1f0>)
 80027e2:	f000 fd5c 	bl	800329e <HAL_GPIO_WritePin>
	ROW(current_row);
 80027e6:	4b22      	ldr	r3, [pc, #136]	@ (8002870 <render_row+0x1e8>)
 80027e8:	781b      	ldrb	r3, [r3, #0]
 80027ea:	f003 0301 	and.w	r3, r3, #1
 80027ee:	2b00      	cmp	r3, #0
 80027f0:	d004      	beq.n	80027fc <render_row+0x174>
 80027f2:	4b24      	ldr	r3, [pc, #144]	@ (8002884 <render_row+0x1fc>)
 80027f4:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80027f8:	611a      	str	r2, [r3, #16]
 80027fa:	e003      	b.n	8002804 <render_row+0x17c>
 80027fc:	4b21      	ldr	r3, [pc, #132]	@ (8002884 <render_row+0x1fc>)
 80027fe:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002802:	615a      	str	r2, [r3, #20]
 8002804:	4b1a      	ldr	r3, [pc, #104]	@ (8002870 <render_row+0x1e8>)
 8002806:	781b      	ldrb	r3, [r3, #0]
 8002808:	f003 0302 	and.w	r3, r3, #2
 800280c:	2b00      	cmp	r3, #0
 800280e:	d004      	beq.n	800281a <render_row+0x192>
 8002810:	4b1a      	ldr	r3, [pc, #104]	@ (800287c <render_row+0x1f4>)
 8002812:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002816:	611a      	str	r2, [r3, #16]
 8002818:	e003      	b.n	8002822 <render_row+0x19a>
 800281a:	4b18      	ldr	r3, [pc, #96]	@ (800287c <render_row+0x1f4>)
 800281c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002820:	615a      	str	r2, [r3, #20]
 8002822:	4b13      	ldr	r3, [pc, #76]	@ (8002870 <render_row+0x1e8>)
 8002824:	781b      	ldrb	r3, [r3, #0]
 8002826:	f003 0304 	and.w	r3, r3, #4
 800282a:	2b00      	cmp	r3, #0
 800282c:	d004      	beq.n	8002838 <render_row+0x1b0>
 800282e:	4b13      	ldr	r3, [pc, #76]	@ (800287c <render_row+0x1f4>)
 8002830:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8002834:	611a      	str	r2, [r3, #16]
 8002836:	e003      	b.n	8002840 <render_row+0x1b8>
 8002838:	4b10      	ldr	r3, [pc, #64]	@ (800287c <render_row+0x1f4>)
 800283a:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800283e:	615a      	str	r2, [r3, #20]
 8002840:	4b0b      	ldr	r3, [pc, #44]	@ (8002870 <render_row+0x1e8>)
 8002842:	781b      	ldrb	r3, [r3, #0]
 8002844:	f003 0308 	and.w	r3, r3, #8
 8002848:	2b00      	cmp	r3, #0
 800284a:	d003      	beq.n	8002854 <render_row+0x1cc>
 800284c:	4b0b      	ldr	r3, [pc, #44]	@ (800287c <render_row+0x1f4>)
 800284e:	2280      	movs	r2, #128	@ 0x80
 8002850:	611a      	str	r2, [r3, #16]
 8002852:	e002      	b.n	800285a <render_row+0x1d2>
 8002854:	4b09      	ldr	r3, [pc, #36]	@ (800287c <render_row+0x1f4>)
 8002856:	2280      	movs	r2, #128	@ 0x80
 8002858:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 800285a:	4b08      	ldr	r3, [pc, #32]	@ (800287c <render_row+0x1f4>)
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	4a07      	ldr	r2, [pc, #28]	@ (800287c <render_row+0x1f4>)
 8002860:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002864:	6013      	str	r3, [r2, #0]
}
 8002866:	bf00      	nop
 8002868:	3710      	adds	r7, #16
 800286a:	46bd      	mov	sp, r7
 800286c:	bd80      	pop	{r7, pc}
 800286e:	bf00      	nop
 8002870:	20001345 	.word	0x20001345
 8002874:	200001d0 	.word	0x200001d0
 8002878:	40010c00 	.word	0x40010c00
 800287c:	40011000 	.word	0x40011000
 8002880:	40011400 	.word	0x40011400
 8002884:	40010800 	.word	0x40010800

08002888 <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
//#define RENDER_INTERVAL_MS 0
//uint32_t last_render_time = 0;

void render_buffer() {
 8002888:	b580      	push	{r7, lr}
 800288a:	af00      	add	r7, sp, #0
//			last_render_time = tick;
//		}
//	}


	render_row();
 800288c:	f7ff fefc 	bl	8002688 <render_row>

	if (++current_row == 8) {
 8002890:	4b0b      	ldr	r3, [pc, #44]	@ (80028c0 <render_buffer+0x38>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	3301      	adds	r3, #1
 8002896:	b2da      	uxtb	r2, r3
 8002898:	4b09      	ldr	r3, [pc, #36]	@ (80028c0 <render_buffer+0x38>)
 800289a:	701a      	strb	r2, [r3, #0]
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <render_buffer+0x38>)
 800289e:	781b      	ldrb	r3, [r3, #0]
 80028a0:	2b08      	cmp	r3, #8
 80028a2:	d10b      	bne.n	80028bc <render_buffer+0x34>
		current_row = 0;
 80028a4:	4b06      	ldr	r3, [pc, #24]	@ (80028c0 <render_buffer+0x38>)
 80028a6:	2200      	movs	r2, #0
 80028a8:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 80028aa:	4b06      	ldr	r3, [pc, #24]	@ (80028c4 <render_buffer+0x3c>)
 80028ac:	781b      	ldrb	r3, [r3, #0]
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d004      	beq.n	80028bc <render_buffer+0x34>
			swap_buffers();
 80028b2:	f7ff fe5b 	bl	800256c <swap_buffers>
			is_back_buffer_new = false;
 80028b6:	4b03      	ldr	r3, [pc, #12]	@ (80028c4 <render_buffer+0x3c>)
 80028b8:	2200      	movs	r2, #0
 80028ba:	701a      	strb	r2, [r3, #0]
		}
	}
}
 80028bc:	bf00      	nop
 80028be:	bd80      	pop	{r7, pc}
 80028c0:	20001345 	.word	0x20001345
 80028c4:	20001344 	.word	0x20001344

080028c8 <draw_line_colored>:
// Bresenham's line algorithm
// (https://en.wikipedia.org/wiki/Bresenham's_line_algorithm)
void draw_line(int x0, int y0, int x1, int y1) {
	draw_line_colored(x0, y0, x1, y1, 1, 1, 1);
}
void draw_line_colored(int x0, int y0, int x1, int y1, uint8_t r, uint8_t g,uint8_t b) {
 80028c8:	b580      	push	{r7, lr}
 80028ca:	b08c      	sub	sp, #48	@ 0x30
 80028cc:	af02      	add	r7, sp, #8
 80028ce:	60f8      	str	r0, [r7, #12]
 80028d0:	60b9      	str	r1, [r7, #8]
 80028d2:	607a      	str	r2, [r7, #4]
 80028d4:	603b      	str	r3, [r7, #0]
	int dx = abs(x1 - x0);
 80028d6:	687a      	ldr	r2, [r7, #4]
 80028d8:	68fb      	ldr	r3, [r7, #12]
 80028da:	1ad3      	subs	r3, r2, r3
 80028dc:	2b00      	cmp	r3, #0
 80028de:	bfb8      	it	lt
 80028e0:	425b      	neglt	r3, r3
 80028e2:	623b      	str	r3, [r7, #32]
	int sx = (x0 < x1) ? 1 : -1;
 80028e4:	68fa      	ldr	r2, [r7, #12]
 80028e6:	687b      	ldr	r3, [r7, #4]
 80028e8:	429a      	cmp	r2, r3
 80028ea:	da01      	bge.n	80028f0 <draw_line_colored+0x28>
 80028ec:	2301      	movs	r3, #1
 80028ee:	e001      	b.n	80028f4 <draw_line_colored+0x2c>
 80028f0:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80028f4:	61fb      	str	r3, [r7, #28]
	int dy = -abs(y1 - y0);
 80028f6:	683a      	ldr	r2, [r7, #0]
 80028f8:	68bb      	ldr	r3, [r7, #8]
 80028fa:	1ad3      	subs	r3, r2, r3
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	bfb8      	it	lt
 8002900:	425b      	neglt	r3, r3
 8002902:	425b      	negs	r3, r3
 8002904:	61bb      	str	r3, [r7, #24]
	int sy = (y0 < y1) ? 1 : -1;
 8002906:	68ba      	ldr	r2, [r7, #8]
 8002908:	683b      	ldr	r3, [r7, #0]
 800290a:	429a      	cmp	r2, r3
 800290c:	da01      	bge.n	8002912 <draw_line_colored+0x4a>
 800290e:	2301      	movs	r3, #1
 8002910:	e001      	b.n	8002916 <draw_line_colored+0x4e>
 8002912:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002916:	617b      	str	r3, [r7, #20]
	int error = dx + dy;
 8002918:	6a3a      	ldr	r2, [r7, #32]
 800291a:	69bb      	ldr	r3, [r7, #24]
 800291c:	4413      	add	r3, r2
 800291e:	627b      	str	r3, [r7, #36]	@ 0x24

	while (1) {
		set_pixel(x0, y0, r, g, b);
 8002920:	f897 1034 	ldrb.w	r1, [r7, #52]	@ 0x34
 8002924:	f897 2030 	ldrb.w	r2, [r7, #48]	@ 0x30
 8002928:	f897 3038 	ldrb.w	r3, [r7, #56]	@ 0x38
 800292c:	9300      	str	r3, [sp, #0]
 800292e:	460b      	mov	r3, r1
 8002930:	68b9      	ldr	r1, [r7, #8]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f7ff fe3e 	bl	80025b4 <set_pixel>

		if (x0 == x1 && y0 == y1) {
 8002938:	68fa      	ldr	r2, [r7, #12]
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	429a      	cmp	r2, r3
 800293e:	d103      	bne.n	8002948 <draw_line_colored+0x80>
 8002940:	68ba      	ldr	r2, [r7, #8]
 8002942:	683b      	ldr	r3, [r7, #0]
 8002944:	429a      	cmp	r2, r3
 8002946:	d023      	beq.n	8002990 <draw_line_colored+0xc8>
			break;
		}

		int e2 = 2 * error;
 8002948:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800294a:	005b      	lsls	r3, r3, #1
 800294c:	613b      	str	r3, [r7, #16]
		if (e2 >= dy) {
 800294e:	693a      	ldr	r2, [r7, #16]
 8002950:	69bb      	ldr	r3, [r7, #24]
 8002952:	429a      	cmp	r2, r3
 8002954:	db0b      	blt.n	800296e <draw_line_colored+0xa6>
			if (x0 == x1) {
 8002956:	68fa      	ldr	r2, [r7, #12]
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	429a      	cmp	r2, r3
 800295c:	d01a      	beq.n	8002994 <draw_line_colored+0xcc>
				break;
			}
			error += dy;
 800295e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002960:	69bb      	ldr	r3, [r7, #24]
 8002962:	4413      	add	r3, r2
 8002964:	627b      	str	r3, [r7, #36]	@ 0x24
			x0 += sx;
 8002966:	68fa      	ldr	r2, [r7, #12]
 8002968:	69fb      	ldr	r3, [r7, #28]
 800296a:	4413      	add	r3, r2
 800296c:	60fb      	str	r3, [r7, #12]
		}
		if (e2 <= dx) {
 800296e:	693a      	ldr	r2, [r7, #16]
 8002970:	6a3b      	ldr	r3, [r7, #32]
 8002972:	429a      	cmp	r2, r3
 8002974:	dcd4      	bgt.n	8002920 <draw_line_colored+0x58>
			if (y0 == y1) {
 8002976:	68ba      	ldr	r2, [r7, #8]
 8002978:	683b      	ldr	r3, [r7, #0]
 800297a:	429a      	cmp	r2, r3
 800297c:	d00c      	beq.n	8002998 <draw_line_colored+0xd0>
				break;
			}
			error += dx;
 800297e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002980:	6a3b      	ldr	r3, [r7, #32]
 8002982:	4413      	add	r3, r2
 8002984:	627b      	str	r3, [r7, #36]	@ 0x24
			y0 += sy;
 8002986:	68ba      	ldr	r2, [r7, #8]
 8002988:	697b      	ldr	r3, [r7, #20]
 800298a:	4413      	add	r3, r2
 800298c:	60bb      	str	r3, [r7, #8]
	while (1) {
 800298e:	e7c7      	b.n	8002920 <draw_line_colored+0x58>
			break;
 8002990:	bf00      	nop
 8002992:	e002      	b.n	800299a <draw_line_colored+0xd2>
				break;
 8002994:	bf00      	nop
 8002996:	e000      	b.n	800299a <draw_line_colored+0xd2>
				break;
 8002998:	bf00      	nop
		}
	}
}
 800299a:	bf00      	nop
 800299c:	3728      	adds	r7, #40	@ 0x28
 800299e:	46bd      	mov	sp, r7
 80029a0:	bd80      	pop	{r7, pc}
	...

080029a4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	b085      	sub	sp, #20
 80029a8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80029aa:	4b15      	ldr	r3, [pc, #84]	@ (8002a00 <HAL_MspInit+0x5c>)
 80029ac:	699b      	ldr	r3, [r3, #24]
 80029ae:	4a14      	ldr	r2, [pc, #80]	@ (8002a00 <HAL_MspInit+0x5c>)
 80029b0:	f043 0301 	orr.w	r3, r3, #1
 80029b4:	6193      	str	r3, [r2, #24]
 80029b6:	4b12      	ldr	r3, [pc, #72]	@ (8002a00 <HAL_MspInit+0x5c>)
 80029b8:	699b      	ldr	r3, [r3, #24]
 80029ba:	f003 0301 	and.w	r3, r3, #1
 80029be:	60bb      	str	r3, [r7, #8]
 80029c0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80029c2:	4b0f      	ldr	r3, [pc, #60]	@ (8002a00 <HAL_MspInit+0x5c>)
 80029c4:	69db      	ldr	r3, [r3, #28]
 80029c6:	4a0e      	ldr	r2, [pc, #56]	@ (8002a00 <HAL_MspInit+0x5c>)
 80029c8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80029cc:	61d3      	str	r3, [r2, #28]
 80029ce:	4b0c      	ldr	r3, [pc, #48]	@ (8002a00 <HAL_MspInit+0x5c>)
 80029d0:	69db      	ldr	r3, [r3, #28]
 80029d2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80029d6:	607b      	str	r3, [r7, #4]
 80029d8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80029da:	4b0a      	ldr	r3, [pc, #40]	@ (8002a04 <HAL_MspInit+0x60>)
 80029dc:	685b      	ldr	r3, [r3, #4]
 80029de:	60fb      	str	r3, [r7, #12]
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80029e6:	60fb      	str	r3, [r7, #12]
 80029e8:	68fb      	ldr	r3, [r7, #12]
 80029ea:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80029ee:	60fb      	str	r3, [r7, #12]
 80029f0:	4a04      	ldr	r2, [pc, #16]	@ (8002a04 <HAL_MspInit+0x60>)
 80029f2:	68fb      	ldr	r3, [r7, #12]
 80029f4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	bc80      	pop	{r7}
 80029fe:	4770      	bx	lr
 8002a00:	40021000 	.word	0x40021000
 8002a04:	40010000 	.word	0x40010000

08002a08 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002a08:	b580      	push	{r7, lr}
 8002a0a:	b088      	sub	sp, #32
 8002a0c:	af00      	add	r7, sp, #0
 8002a0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a10:	f107 0310 	add.w	r3, r7, #16
 8002a14:	2200      	movs	r2, #0
 8002a16:	601a      	str	r2, [r3, #0]
 8002a18:	605a      	str	r2, [r3, #4]
 8002a1a:	609a      	str	r2, [r3, #8]
 8002a1c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8002a1e:	687b      	ldr	r3, [r7, #4]
 8002a20:	681b      	ldr	r3, [r3, #0]
 8002a22:	4a15      	ldr	r2, [pc, #84]	@ (8002a78 <HAL_SPI_MspInit+0x70>)
 8002a24:	4293      	cmp	r3, r2
 8002a26:	d123      	bne.n	8002a70 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002a28:	4b14      	ldr	r3, [pc, #80]	@ (8002a7c <HAL_SPI_MspInit+0x74>)
 8002a2a:	699b      	ldr	r3, [r3, #24]
 8002a2c:	4a13      	ldr	r2, [pc, #76]	@ (8002a7c <HAL_SPI_MspInit+0x74>)
 8002a2e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002a32:	6193      	str	r3, [r2, #24]
 8002a34:	4b11      	ldr	r3, [pc, #68]	@ (8002a7c <HAL_SPI_MspInit+0x74>)
 8002a36:	699b      	ldr	r3, [r3, #24]
 8002a38:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002a3c:	60fb      	str	r3, [r7, #12]
 8002a3e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002a40:	4b0e      	ldr	r3, [pc, #56]	@ (8002a7c <HAL_SPI_MspInit+0x74>)
 8002a42:	699b      	ldr	r3, [r3, #24]
 8002a44:	4a0d      	ldr	r2, [pc, #52]	@ (8002a7c <HAL_SPI_MspInit+0x74>)
 8002a46:	f043 0304 	orr.w	r3, r3, #4
 8002a4a:	6193      	str	r3, [r2, #24]
 8002a4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002a7c <HAL_SPI_MspInit+0x74>)
 8002a4e:	699b      	ldr	r3, [r3, #24]
 8002a50:	f003 0304 	and.w	r3, r3, #4
 8002a54:	60bb      	str	r3, [r7, #8]
 8002a56:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8002a58:	23a0      	movs	r3, #160	@ 0xa0
 8002a5a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a5c:	2302      	movs	r3, #2
 8002a5e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8002a60:	2303      	movs	r3, #3
 8002a62:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002a64:	f107 0310 	add.w	r3, r7, #16
 8002a68:	4619      	mov	r1, r3
 8002a6a:	4805      	ldr	r0, [pc, #20]	@ (8002a80 <HAL_SPI_MspInit+0x78>)
 8002a6c:	f000 fa7c 	bl	8002f68 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002a70:	bf00      	nop
 8002a72:	3720      	adds	r7, #32
 8002a74:	46bd      	mov	sp, r7
 8002a76:	bd80      	pop	{r7, pc}
 8002a78:	40013000 	.word	0x40013000
 8002a7c:	40021000 	.word	0x40021000
 8002a80:	40010800 	.word	0x40010800

08002a84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a84:	b580      	push	{r7, lr}
 8002a86:	b084      	sub	sp, #16
 8002a88:	af00      	add	r7, sp, #0
 8002a8a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a94:	d114      	bne.n	8002ac0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a96:	4b15      	ldr	r3, [pc, #84]	@ (8002aec <HAL_TIM_Base_MspInit+0x68>)
 8002a98:	69db      	ldr	r3, [r3, #28]
 8002a9a:	4a14      	ldr	r2, [pc, #80]	@ (8002aec <HAL_TIM_Base_MspInit+0x68>)
 8002a9c:	f043 0301 	orr.w	r3, r3, #1
 8002aa0:	61d3      	str	r3, [r2, #28]
 8002aa2:	4b12      	ldr	r3, [pc, #72]	@ (8002aec <HAL_TIM_Base_MspInit+0x68>)
 8002aa4:	69db      	ldr	r3, [r3, #28]
 8002aa6:	f003 0301 	and.w	r3, r3, #1
 8002aaa:	60fb      	str	r3, [r7, #12]
 8002aac:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002aae:	2200      	movs	r2, #0
 8002ab0:	2100      	movs	r1, #0
 8002ab2:	201c      	movs	r0, #28
 8002ab4:	f000 fa21 	bl	8002efa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002ab8:	201c      	movs	r0, #28
 8002aba:	f000 fa3a 	bl	8002f32 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002abe:	e010      	b.n	8002ae2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <HAL_TIM_Base_MspInit+0x6c>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d10b      	bne.n	8002ae2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002aca:	4b08      	ldr	r3, [pc, #32]	@ (8002aec <HAL_TIM_Base_MspInit+0x68>)
 8002acc:	69db      	ldr	r3, [r3, #28]
 8002ace:	4a07      	ldr	r2, [pc, #28]	@ (8002aec <HAL_TIM_Base_MspInit+0x68>)
 8002ad0:	f043 0302 	orr.w	r3, r3, #2
 8002ad4:	61d3      	str	r3, [r2, #28]
 8002ad6:	4b05      	ldr	r3, [pc, #20]	@ (8002aec <HAL_TIM_Base_MspInit+0x68>)
 8002ad8:	69db      	ldr	r3, [r3, #28]
 8002ada:	f003 0302 	and.w	r3, r3, #2
 8002ade:	60bb      	str	r3, [r7, #8]
 8002ae0:	68bb      	ldr	r3, [r7, #8]
}
 8002ae2:	bf00      	nop
 8002ae4:	3710      	adds	r7, #16
 8002ae6:	46bd      	mov	sp, r7
 8002ae8:	bd80      	pop	{r7, pc}
 8002aea:	bf00      	nop
 8002aec:	40021000 	.word	0x40021000
 8002af0:	40000400 	.word	0x40000400

08002af4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b08a      	sub	sp, #40	@ 0x28
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002afc:	f107 0314 	add.w	r3, r7, #20
 8002b00:	2200      	movs	r2, #0
 8002b02:	601a      	str	r2, [r3, #0]
 8002b04:	605a      	str	r2, [r3, #4]
 8002b06:	609a      	str	r2, [r3, #8]
 8002b08:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002b0a:	687b      	ldr	r3, [r7, #4]
 8002b0c:	681b      	ldr	r3, [r3, #0]
 8002b0e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b12:	d118      	bne.n	8002b46 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b14:	4b25      	ldr	r3, [pc, #148]	@ (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b16:	699b      	ldr	r3, [r3, #24]
 8002b18:	4a24      	ldr	r2, [pc, #144]	@ (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b1a:	f043 0304 	orr.w	r3, r3, #4
 8002b1e:	6193      	str	r3, [r2, #24]
 8002b20:	4b22      	ldr	r3, [pc, #136]	@ (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b22:	699b      	ldr	r3, [r3, #24]
 8002b24:	f003 0304 	and.w	r3, r3, #4
 8002b28:	613b      	str	r3, [r7, #16]
 8002b2a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8002b2c:	2301      	movs	r3, #1
 8002b2e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b30:	2302      	movs	r3, #2
 8002b32:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b34:	2302      	movs	r3, #2
 8002b36:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b38:	f107 0314 	add.w	r3, r7, #20
 8002b3c:	4619      	mov	r1, r3
 8002b3e:	481c      	ldr	r0, [pc, #112]	@ (8002bb0 <HAL_TIM_MspPostInit+0xbc>)
 8002b40:	f000 fa12 	bl	8002f68 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002b44:	e02e      	b.n	8002ba4 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	681b      	ldr	r3, [r3, #0]
 8002b4a:	4a1a      	ldr	r2, [pc, #104]	@ (8002bb4 <HAL_TIM_MspPostInit+0xc0>)
 8002b4c:	4293      	cmp	r3, r2
 8002b4e:	d129      	bne.n	8002ba4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b50:	4b16      	ldr	r3, [pc, #88]	@ (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b52:	699b      	ldr	r3, [r3, #24]
 8002b54:	4a15      	ldr	r2, [pc, #84]	@ (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b56:	f043 0310 	orr.w	r3, r3, #16
 8002b5a:	6193      	str	r3, [r2, #24]
 8002b5c:	4b13      	ldr	r3, [pc, #76]	@ (8002bac <HAL_TIM_MspPostInit+0xb8>)
 8002b5e:	699b      	ldr	r3, [r3, #24]
 8002b60:	f003 0310 	and.w	r3, r3, #16
 8002b64:	60fb      	str	r3, [r7, #12]
 8002b66:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002b68:	2340      	movs	r3, #64	@ 0x40
 8002b6a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b6c:	2302      	movs	r3, #2
 8002b6e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002b70:	2302      	movs	r3, #2
 8002b72:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002b74:	f107 0314 	add.w	r3, r7, #20
 8002b78:	4619      	mov	r1, r3
 8002b7a:	480f      	ldr	r0, [pc, #60]	@ (8002bb8 <HAL_TIM_MspPostInit+0xc4>)
 8002b7c:	f000 f9f4 	bl	8002f68 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8002b80:	4b0e      	ldr	r3, [pc, #56]	@ (8002bbc <HAL_TIM_MspPostInit+0xc8>)
 8002b82:	685b      	ldr	r3, [r3, #4]
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b86:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b88:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002b8c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002b94:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b98:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002b9c:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b9e:	4a07      	ldr	r2, [pc, #28]	@ (8002bbc <HAL_TIM_MspPostInit+0xc8>)
 8002ba0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ba2:	6053      	str	r3, [r2, #4]
}
 8002ba4:	bf00      	nop
 8002ba6:	3728      	adds	r7, #40	@ 0x28
 8002ba8:	46bd      	mov	sp, r7
 8002baa:	bd80      	pop	{r7, pc}
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	40010800 	.word	0x40010800
 8002bb4:	40000400 	.word	0x40000400
 8002bb8:	40011000 	.word	0x40011000
 8002bbc:	40010000 	.word	0x40010000

08002bc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002bc4:	bf00      	nop
 8002bc6:	e7fd      	b.n	8002bc4 <NMI_Handler+0x4>

08002bc8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bc8:	b480      	push	{r7}
 8002bca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002bcc:	bf00      	nop
 8002bce:	e7fd      	b.n	8002bcc <HardFault_Handler+0x4>

08002bd0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002bd0:	b480      	push	{r7}
 8002bd2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002bd4:	bf00      	nop
 8002bd6:	e7fd      	b.n	8002bd4 <MemManage_Handler+0x4>

08002bd8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002bd8:	b480      	push	{r7}
 8002bda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002bdc:	bf00      	nop
 8002bde:	e7fd      	b.n	8002bdc <BusFault_Handler+0x4>

08002be0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002be0:	b480      	push	{r7}
 8002be2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002be4:	bf00      	nop
 8002be6:	e7fd      	b.n	8002be4 <UsageFault_Handler+0x4>

08002be8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002be8:	b480      	push	{r7}
 8002bea:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002bec:	bf00      	nop
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr

08002bf4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002bf4:	b480      	push	{r7}
 8002bf6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002bf8:	bf00      	nop
 8002bfa:	46bd      	mov	sp, r7
 8002bfc:	bc80      	pop	{r7}
 8002bfe:	4770      	bx	lr

08002c00 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c00:	b480      	push	{r7}
 8002c02:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c04:	bf00      	nop
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bc80      	pop	{r7}
 8002c0a:	4770      	bx	lr

08002c0c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c0c:	b580      	push	{r7, lr}
 8002c0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c10:	f000 f880 	bl	8002d14 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c14:	bf00      	nop
 8002c16:	bd80      	pop	{r7, pc}

08002c18 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c18:	b580      	push	{r7, lr}
 8002c1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 8002c1c:	f7ff fe34 	bl	8002888 <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c20:	4802      	ldr	r0, [pc, #8]	@ (8002c2c <TIM2_IRQHandler+0x14>)
 8002c22:	f001 f953 	bl	8003ecc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c26:	bf00      	nop
 8002c28:	bd80      	pop	{r7, pc}
 8002c2a:	bf00      	nop
 8002c2c:	200002a0 	.word	0x200002a0

08002c30 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002c30:	b480      	push	{r7}
 8002c32:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002c34:	bf00      	nop
 8002c36:	46bd      	mov	sp, r7
 8002c38:	bc80      	pop	{r7}
 8002c3a:	4770      	bx	lr

08002c3c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002c3c:	f7ff fff8 	bl	8002c30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002c40:	480b      	ldr	r0, [pc, #44]	@ (8002c70 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002c42:	490c      	ldr	r1, [pc, #48]	@ (8002c74 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002c44:	4a0c      	ldr	r2, [pc, #48]	@ (8002c78 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002c46:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002c48:	e002      	b.n	8002c50 <LoopCopyDataInit>

08002c4a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002c4a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002c4c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002c4e:	3304      	adds	r3, #4

08002c50 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002c50:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002c52:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002c54:	d3f9      	bcc.n	8002c4a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002c56:	4a09      	ldr	r2, [pc, #36]	@ (8002c7c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002c58:	4c09      	ldr	r4, [pc, #36]	@ (8002c80 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002c5a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002c5c:	e001      	b.n	8002c62 <LoopFillZerobss>

08002c5e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002c5e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002c60:	3204      	adds	r2, #4

08002c62 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002c62:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002c64:	d3fb      	bcc.n	8002c5e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002c66:	f003 f953 	bl	8005f10 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8002c6a:	f7fe fcbd 	bl	80015e8 <main>
  bx lr
 8002c6e:	4770      	bx	lr
  ldr r0, =_sdata
 8002c70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002c74:	200001e4 	.word	0x200001e4
  ldr r2, =_sidata
 8002c78:	08006178 	.word	0x08006178
  ldr r2, =_sbss
 8002c7c:	200001e8 	.word	0x200001e8
  ldr r4, =_ebss
 8002c80:	2000134c 	.word	0x2000134c

08002c84 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002c84:	e7fe      	b.n	8002c84 <ADC1_2_IRQHandler>
	...

08002c88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002c88:	b580      	push	{r7, lr}
 8002c8a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002c8c:	4b08      	ldr	r3, [pc, #32]	@ (8002cb0 <HAL_Init+0x28>)
 8002c8e:	681b      	ldr	r3, [r3, #0]
 8002c90:	4a07      	ldr	r2, [pc, #28]	@ (8002cb0 <HAL_Init+0x28>)
 8002c92:	f043 0310 	orr.w	r3, r3, #16
 8002c96:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002c98:	2003      	movs	r0, #3
 8002c9a:	f000 f923 	bl	8002ee4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002c9e:	200f      	movs	r0, #15
 8002ca0:	f000 f808 	bl	8002cb4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002ca4:	f7ff fe7e 	bl	80029a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002ca8:	2300      	movs	r3, #0
}
 8002caa:	4618      	mov	r0, r3
 8002cac:	bd80      	pop	{r7, pc}
 8002cae:	bf00      	nop
 8002cb0:	40022000 	.word	0x40022000

08002cb4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b082      	sub	sp, #8
 8002cb8:	af00      	add	r7, sp, #0
 8002cba:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002cbc:	4b12      	ldr	r3, [pc, #72]	@ (8002d08 <HAL_InitTick+0x54>)
 8002cbe:	681a      	ldr	r2, [r3, #0]
 8002cc0:	4b12      	ldr	r3, [pc, #72]	@ (8002d0c <HAL_InitTick+0x58>)
 8002cc2:	781b      	ldrb	r3, [r3, #0]
 8002cc4:	4619      	mov	r1, r3
 8002cc6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002cca:	fbb3 f3f1 	udiv	r3, r3, r1
 8002cce:	fbb2 f3f3 	udiv	r3, r2, r3
 8002cd2:	4618      	mov	r0, r3
 8002cd4:	f000 f93b 	bl	8002f4e <HAL_SYSTICK_Config>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d001      	beq.n	8002ce2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002cde:	2301      	movs	r3, #1
 8002ce0:	e00e      	b.n	8002d00 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0f      	cmp	r3, #15
 8002ce6:	d80a      	bhi.n	8002cfe <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002ce8:	2200      	movs	r2, #0
 8002cea:	6879      	ldr	r1, [r7, #4]
 8002cec:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002cf0:	f000 f903 	bl	8002efa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002cf4:	4a06      	ldr	r2, [pc, #24]	@ (8002d10 <HAL_InitTick+0x5c>)
 8002cf6:	687b      	ldr	r3, [r7, #4]
 8002cf8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	e000      	b.n	8002d00 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002cfe:	2301      	movs	r3, #1
}
 8002d00:	4618      	mov	r0, r3
 8002d02:	3708      	adds	r7, #8
 8002d04:	46bd      	mov	sp, r7
 8002d06:	bd80      	pop	{r7, pc}
 8002d08:	200001d8 	.word	0x200001d8
 8002d0c:	200001e0 	.word	0x200001e0
 8002d10:	200001dc 	.word	0x200001dc

08002d14 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002d14:	b480      	push	{r7}
 8002d16:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002d18:	4b05      	ldr	r3, [pc, #20]	@ (8002d30 <HAL_IncTick+0x1c>)
 8002d1a:	781b      	ldrb	r3, [r3, #0]
 8002d1c:	461a      	mov	r2, r3
 8002d1e:	4b05      	ldr	r3, [pc, #20]	@ (8002d34 <HAL_IncTick+0x20>)
 8002d20:	681b      	ldr	r3, [r3, #0]
 8002d22:	4413      	add	r3, r2
 8002d24:	4a03      	ldr	r2, [pc, #12]	@ (8002d34 <HAL_IncTick+0x20>)
 8002d26:	6013      	str	r3, [r2, #0]
}
 8002d28:	bf00      	nop
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	bc80      	pop	{r7}
 8002d2e:	4770      	bx	lr
 8002d30:	200001e0 	.word	0x200001e0
 8002d34:	20001348 	.word	0x20001348

08002d38 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002d38:	b480      	push	{r7}
 8002d3a:	af00      	add	r7, sp, #0
  return uwTick;
 8002d3c:	4b02      	ldr	r3, [pc, #8]	@ (8002d48 <HAL_GetTick+0x10>)
 8002d3e:	681b      	ldr	r3, [r3, #0]
}
 8002d40:	4618      	mov	r0, r3
 8002d42:	46bd      	mov	sp, r7
 8002d44:	bc80      	pop	{r7}
 8002d46:	4770      	bx	lr
 8002d48:	20001348 	.word	0x20001348

08002d4c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b085      	sub	sp, #20
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002d54:	687b      	ldr	r3, [r7, #4]
 8002d56:	f003 0307 	and.w	r3, r3, #7
 8002d5a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002d5c:	4b0c      	ldr	r3, [pc, #48]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d5e:	68db      	ldr	r3, [r3, #12]
 8002d60:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002d62:	68ba      	ldr	r2, [r7, #8]
 8002d64:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002d68:	4013      	ands	r3, r2
 8002d6a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002d70:	68bb      	ldr	r3, [r7, #8]
 8002d72:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002d74:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002d78:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002d7c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002d7e:	4a04      	ldr	r2, [pc, #16]	@ (8002d90 <__NVIC_SetPriorityGrouping+0x44>)
 8002d80:	68bb      	ldr	r3, [r7, #8]
 8002d82:	60d3      	str	r3, [r2, #12]
}
 8002d84:	bf00      	nop
 8002d86:	3714      	adds	r7, #20
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	bc80      	pop	{r7}
 8002d8c:	4770      	bx	lr
 8002d8e:	bf00      	nop
 8002d90:	e000ed00 	.word	0xe000ed00

08002d94 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002d94:	b480      	push	{r7}
 8002d96:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002d98:	4b04      	ldr	r3, [pc, #16]	@ (8002dac <__NVIC_GetPriorityGrouping+0x18>)
 8002d9a:	68db      	ldr	r3, [r3, #12]
 8002d9c:	0a1b      	lsrs	r3, r3, #8
 8002d9e:	f003 0307 	and.w	r3, r3, #7
}
 8002da2:	4618      	mov	r0, r3
 8002da4:	46bd      	mov	sp, r7
 8002da6:	bc80      	pop	{r7}
 8002da8:	4770      	bx	lr
 8002daa:	bf00      	nop
 8002dac:	e000ed00 	.word	0xe000ed00

08002db0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002db0:	b480      	push	{r7}
 8002db2:	b083      	sub	sp, #12
 8002db4:	af00      	add	r7, sp, #0
 8002db6:	4603      	mov	r3, r0
 8002db8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002dba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dbe:	2b00      	cmp	r3, #0
 8002dc0:	db0b      	blt.n	8002dda <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002dc2:	79fb      	ldrb	r3, [r7, #7]
 8002dc4:	f003 021f 	and.w	r2, r3, #31
 8002dc8:	4906      	ldr	r1, [pc, #24]	@ (8002de4 <__NVIC_EnableIRQ+0x34>)
 8002dca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002dce:	095b      	lsrs	r3, r3, #5
 8002dd0:	2001      	movs	r0, #1
 8002dd2:	fa00 f202 	lsl.w	r2, r0, r2
 8002dd6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002dda:	bf00      	nop
 8002ddc:	370c      	adds	r7, #12
 8002dde:	46bd      	mov	sp, r7
 8002de0:	bc80      	pop	{r7}
 8002de2:	4770      	bx	lr
 8002de4:	e000e100 	.word	0xe000e100

08002de8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002de8:	b480      	push	{r7}
 8002dea:	b083      	sub	sp, #12
 8002dec:	af00      	add	r7, sp, #0
 8002dee:	4603      	mov	r3, r0
 8002df0:	6039      	str	r1, [r7, #0]
 8002df2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002df4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002df8:	2b00      	cmp	r3, #0
 8002dfa:	db0a      	blt.n	8002e12 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	b2da      	uxtb	r2, r3
 8002e00:	490c      	ldr	r1, [pc, #48]	@ (8002e34 <__NVIC_SetPriority+0x4c>)
 8002e02:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e06:	0112      	lsls	r2, r2, #4
 8002e08:	b2d2      	uxtb	r2, r2
 8002e0a:	440b      	add	r3, r1
 8002e0c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002e10:	e00a      	b.n	8002e28 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	b2da      	uxtb	r2, r3
 8002e16:	4908      	ldr	r1, [pc, #32]	@ (8002e38 <__NVIC_SetPriority+0x50>)
 8002e18:	79fb      	ldrb	r3, [r7, #7]
 8002e1a:	f003 030f 	and.w	r3, r3, #15
 8002e1e:	3b04      	subs	r3, #4
 8002e20:	0112      	lsls	r2, r2, #4
 8002e22:	b2d2      	uxtb	r2, r2
 8002e24:	440b      	add	r3, r1
 8002e26:	761a      	strb	r2, [r3, #24]
}
 8002e28:	bf00      	nop
 8002e2a:	370c      	adds	r7, #12
 8002e2c:	46bd      	mov	sp, r7
 8002e2e:	bc80      	pop	{r7}
 8002e30:	4770      	bx	lr
 8002e32:	bf00      	nop
 8002e34:	e000e100 	.word	0xe000e100
 8002e38:	e000ed00 	.word	0xe000ed00

08002e3c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002e3c:	b480      	push	{r7}
 8002e3e:	b089      	sub	sp, #36	@ 0x24
 8002e40:	af00      	add	r7, sp, #0
 8002e42:	60f8      	str	r0, [r7, #12]
 8002e44:	60b9      	str	r1, [r7, #8]
 8002e46:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	f003 0307 	and.w	r3, r3, #7
 8002e4e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	f1c3 0307 	rsb	r3, r3, #7
 8002e56:	2b04      	cmp	r3, #4
 8002e58:	bf28      	it	cs
 8002e5a:	2304      	movcs	r3, #4
 8002e5c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002e5e:	69fb      	ldr	r3, [r7, #28]
 8002e60:	3304      	adds	r3, #4
 8002e62:	2b06      	cmp	r3, #6
 8002e64:	d902      	bls.n	8002e6c <NVIC_EncodePriority+0x30>
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	3b03      	subs	r3, #3
 8002e6a:	e000      	b.n	8002e6e <NVIC_EncodePriority+0x32>
 8002e6c:	2300      	movs	r3, #0
 8002e6e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e70:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002e74:	69bb      	ldr	r3, [r7, #24]
 8002e76:	fa02 f303 	lsl.w	r3, r2, r3
 8002e7a:	43da      	mvns	r2, r3
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	401a      	ands	r2, r3
 8002e80:	697b      	ldr	r3, [r7, #20]
 8002e82:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002e84:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002e88:	697b      	ldr	r3, [r7, #20]
 8002e8a:	fa01 f303 	lsl.w	r3, r1, r3
 8002e8e:	43d9      	mvns	r1, r3
 8002e90:	687b      	ldr	r3, [r7, #4]
 8002e92:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002e94:	4313      	orrs	r3, r2
         );
}
 8002e96:	4618      	mov	r0, r3
 8002e98:	3724      	adds	r7, #36	@ 0x24
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	bc80      	pop	{r7}
 8002e9e:	4770      	bx	lr

08002ea0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ea0:	b580      	push	{r7, lr}
 8002ea2:	b082      	sub	sp, #8
 8002ea4:	af00      	add	r7, sp, #0
 8002ea6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ea8:	687b      	ldr	r3, [r7, #4]
 8002eaa:	3b01      	subs	r3, #1
 8002eac:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002eb0:	d301      	bcc.n	8002eb6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e00f      	b.n	8002ed6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002eb6:	4a0a      	ldr	r2, [pc, #40]	@ (8002ee0 <SysTick_Config+0x40>)
 8002eb8:	687b      	ldr	r3, [r7, #4]
 8002eba:	3b01      	subs	r3, #1
 8002ebc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ebe:	210f      	movs	r1, #15
 8002ec0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ec4:	f7ff ff90 	bl	8002de8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ec8:	4b05      	ldr	r3, [pc, #20]	@ (8002ee0 <SysTick_Config+0x40>)
 8002eca:	2200      	movs	r2, #0
 8002ecc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ece:	4b04      	ldr	r3, [pc, #16]	@ (8002ee0 <SysTick_Config+0x40>)
 8002ed0:	2207      	movs	r2, #7
 8002ed2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ed4:	2300      	movs	r3, #0
}
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	3708      	adds	r7, #8
 8002eda:	46bd      	mov	sp, r7
 8002edc:	bd80      	pop	{r7, pc}
 8002ede:	bf00      	nop
 8002ee0:	e000e010 	.word	0xe000e010

08002ee4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ee4:	b580      	push	{r7, lr}
 8002ee6:	b082      	sub	sp, #8
 8002ee8:	af00      	add	r7, sp, #0
 8002eea:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002eec:	6878      	ldr	r0, [r7, #4]
 8002eee:	f7ff ff2d 	bl	8002d4c <__NVIC_SetPriorityGrouping>
}
 8002ef2:	bf00      	nop
 8002ef4:	3708      	adds	r7, #8
 8002ef6:	46bd      	mov	sp, r7
 8002ef8:	bd80      	pop	{r7, pc}

08002efa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002efa:	b580      	push	{r7, lr}
 8002efc:	b086      	sub	sp, #24
 8002efe:	af00      	add	r7, sp, #0
 8002f00:	4603      	mov	r3, r0
 8002f02:	60b9      	str	r1, [r7, #8]
 8002f04:	607a      	str	r2, [r7, #4]
 8002f06:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002f08:	2300      	movs	r3, #0
 8002f0a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002f0c:	f7ff ff42 	bl	8002d94 <__NVIC_GetPriorityGrouping>
 8002f10:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002f12:	687a      	ldr	r2, [r7, #4]
 8002f14:	68b9      	ldr	r1, [r7, #8]
 8002f16:	6978      	ldr	r0, [r7, #20]
 8002f18:	f7ff ff90 	bl	8002e3c <NVIC_EncodePriority>
 8002f1c:	4602      	mov	r2, r0
 8002f1e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002f22:	4611      	mov	r1, r2
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7ff ff5f 	bl	8002de8 <__NVIC_SetPriority>
}
 8002f2a:	bf00      	nop
 8002f2c:	3718      	adds	r7, #24
 8002f2e:	46bd      	mov	sp, r7
 8002f30:	bd80      	pop	{r7, pc}

08002f32 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002f32:	b580      	push	{r7, lr}
 8002f34:	b082      	sub	sp, #8
 8002f36:	af00      	add	r7, sp, #0
 8002f38:	4603      	mov	r3, r0
 8002f3a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002f3c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f40:	4618      	mov	r0, r3
 8002f42:	f7ff ff35 	bl	8002db0 <__NVIC_EnableIRQ>
}
 8002f46:	bf00      	nop
 8002f48:	3708      	adds	r7, #8
 8002f4a:	46bd      	mov	sp, r7
 8002f4c:	bd80      	pop	{r7, pc}

08002f4e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002f4e:	b580      	push	{r7, lr}
 8002f50:	b082      	sub	sp, #8
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002f56:	6878      	ldr	r0, [r7, #4]
 8002f58:	f7ff ffa2 	bl	8002ea0 <SysTick_Config>
 8002f5c:	4603      	mov	r3, r0
}
 8002f5e:	4618      	mov	r0, r3
 8002f60:	3708      	adds	r7, #8
 8002f62:	46bd      	mov	sp, r7
 8002f64:	bd80      	pop	{r7, pc}
	...

08002f68 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f68:	b480      	push	{r7}
 8002f6a:	b08b      	sub	sp, #44	@ 0x2c
 8002f6c:	af00      	add	r7, sp, #0
 8002f6e:	6078      	str	r0, [r7, #4]
 8002f70:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002f72:	2300      	movs	r3, #0
 8002f74:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002f76:	2300      	movs	r3, #0
 8002f78:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002f7a:	e169      	b.n	8003250 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002f7c:	2201      	movs	r2, #1
 8002f7e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002f80:	fa02 f303 	lsl.w	r3, r2, r3
 8002f84:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	69fa      	ldr	r2, [r7, #28]
 8002f8c:	4013      	ands	r3, r2
 8002f8e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002f90:	69ba      	ldr	r2, [r7, #24]
 8002f92:	69fb      	ldr	r3, [r7, #28]
 8002f94:	429a      	cmp	r2, r3
 8002f96:	f040 8158 	bne.w	800324a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002f9a:	683b      	ldr	r3, [r7, #0]
 8002f9c:	685b      	ldr	r3, [r3, #4]
 8002f9e:	4a9a      	ldr	r2, [pc, #616]	@ (8003208 <HAL_GPIO_Init+0x2a0>)
 8002fa0:	4293      	cmp	r3, r2
 8002fa2:	d05e      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fa4:	4a98      	ldr	r2, [pc, #608]	@ (8003208 <HAL_GPIO_Init+0x2a0>)
 8002fa6:	4293      	cmp	r3, r2
 8002fa8:	d875      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002faa:	4a98      	ldr	r2, [pc, #608]	@ (800320c <HAL_GPIO_Init+0x2a4>)
 8002fac:	4293      	cmp	r3, r2
 8002fae:	d058      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fb0:	4a96      	ldr	r2, [pc, #600]	@ (800320c <HAL_GPIO_Init+0x2a4>)
 8002fb2:	4293      	cmp	r3, r2
 8002fb4:	d86f      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fb6:	4a96      	ldr	r2, [pc, #600]	@ (8003210 <HAL_GPIO_Init+0x2a8>)
 8002fb8:	4293      	cmp	r3, r2
 8002fba:	d052      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fbc:	4a94      	ldr	r2, [pc, #592]	@ (8003210 <HAL_GPIO_Init+0x2a8>)
 8002fbe:	4293      	cmp	r3, r2
 8002fc0:	d869      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fc2:	4a94      	ldr	r2, [pc, #592]	@ (8003214 <HAL_GPIO_Init+0x2ac>)
 8002fc4:	4293      	cmp	r3, r2
 8002fc6:	d04c      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fc8:	4a92      	ldr	r2, [pc, #584]	@ (8003214 <HAL_GPIO_Init+0x2ac>)
 8002fca:	4293      	cmp	r3, r2
 8002fcc:	d863      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fce:	4a92      	ldr	r2, [pc, #584]	@ (8003218 <HAL_GPIO_Init+0x2b0>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d046      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
 8002fd4:	4a90      	ldr	r2, [pc, #576]	@ (8003218 <HAL_GPIO_Init+0x2b0>)
 8002fd6:	4293      	cmp	r3, r2
 8002fd8:	d85d      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fda:	2b12      	cmp	r3, #18
 8002fdc:	d82a      	bhi.n	8003034 <HAL_GPIO_Init+0xcc>
 8002fde:	2b12      	cmp	r3, #18
 8002fe0:	d859      	bhi.n	8003096 <HAL_GPIO_Init+0x12e>
 8002fe2:	a201      	add	r2, pc, #4	@ (adr r2, 8002fe8 <HAL_GPIO_Init+0x80>)
 8002fe4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002fe8:	08003063 	.word	0x08003063
 8002fec:	0800303d 	.word	0x0800303d
 8002ff0:	0800304f 	.word	0x0800304f
 8002ff4:	08003091 	.word	0x08003091
 8002ff8:	08003097 	.word	0x08003097
 8002ffc:	08003097 	.word	0x08003097
 8003000:	08003097 	.word	0x08003097
 8003004:	08003097 	.word	0x08003097
 8003008:	08003097 	.word	0x08003097
 800300c:	08003097 	.word	0x08003097
 8003010:	08003097 	.word	0x08003097
 8003014:	08003097 	.word	0x08003097
 8003018:	08003097 	.word	0x08003097
 800301c:	08003097 	.word	0x08003097
 8003020:	08003097 	.word	0x08003097
 8003024:	08003097 	.word	0x08003097
 8003028:	08003097 	.word	0x08003097
 800302c:	08003045 	.word	0x08003045
 8003030:	08003059 	.word	0x08003059
 8003034:	4a79      	ldr	r2, [pc, #484]	@ (800321c <HAL_GPIO_Init+0x2b4>)
 8003036:	4293      	cmp	r3, r2
 8003038:	d013      	beq.n	8003062 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 800303a:	e02c      	b.n	8003096 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 800303c:	683b      	ldr	r3, [r7, #0]
 800303e:	68db      	ldr	r3, [r3, #12]
 8003040:	623b      	str	r3, [r7, #32]
          break;
 8003042:	e029      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8003044:	683b      	ldr	r3, [r7, #0]
 8003046:	68db      	ldr	r3, [r3, #12]
 8003048:	3304      	adds	r3, #4
 800304a:	623b      	str	r3, [r7, #32]
          break;
 800304c:	e024      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 800304e:	683b      	ldr	r3, [r7, #0]
 8003050:	68db      	ldr	r3, [r3, #12]
 8003052:	3308      	adds	r3, #8
 8003054:	623b      	str	r3, [r7, #32]
          break;
 8003056:	e01f      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8003058:	683b      	ldr	r3, [r7, #0]
 800305a:	68db      	ldr	r3, [r3, #12]
 800305c:	330c      	adds	r3, #12
 800305e:	623b      	str	r3, [r7, #32]
          break;
 8003060:	e01a      	b.n	8003098 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	689b      	ldr	r3, [r3, #8]
 8003066:	2b00      	cmp	r3, #0
 8003068:	d102      	bne.n	8003070 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 800306a:	2304      	movs	r3, #4
 800306c:	623b      	str	r3, [r7, #32]
          break;
 800306e:	e013      	b.n	8003098 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8003070:	683b      	ldr	r3, [r7, #0]
 8003072:	689b      	ldr	r3, [r3, #8]
 8003074:	2b01      	cmp	r3, #1
 8003076:	d105      	bne.n	8003084 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003078:	2308      	movs	r3, #8
 800307a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 800307c:	687b      	ldr	r3, [r7, #4]
 800307e:	69fa      	ldr	r2, [r7, #28]
 8003080:	611a      	str	r2, [r3, #16]
          break;
 8003082:	e009      	b.n	8003098 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8003084:	2308      	movs	r3, #8
 8003086:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8003088:	687b      	ldr	r3, [r7, #4]
 800308a:	69fa      	ldr	r2, [r7, #28]
 800308c:	615a      	str	r2, [r3, #20]
          break;
 800308e:	e003      	b.n	8003098 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8003090:	2300      	movs	r3, #0
 8003092:	623b      	str	r3, [r7, #32]
          break;
 8003094:	e000      	b.n	8003098 <HAL_GPIO_Init+0x130>
          break;
 8003096:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8003098:	69bb      	ldr	r3, [r7, #24]
 800309a:	2bff      	cmp	r3, #255	@ 0xff
 800309c:	d801      	bhi.n	80030a2 <HAL_GPIO_Init+0x13a>
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	e001      	b.n	80030a6 <HAL_GPIO_Init+0x13e>
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	3304      	adds	r3, #4
 80030a6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80030a8:	69bb      	ldr	r3, [r7, #24]
 80030aa:	2bff      	cmp	r3, #255	@ 0xff
 80030ac:	d802      	bhi.n	80030b4 <HAL_GPIO_Init+0x14c>
 80030ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b0:	009b      	lsls	r3, r3, #2
 80030b2:	e002      	b.n	80030ba <HAL_GPIO_Init+0x152>
 80030b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030b6:	3b08      	subs	r3, #8
 80030b8:	009b      	lsls	r3, r3, #2
 80030ba:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80030bc:	697b      	ldr	r3, [r7, #20]
 80030be:	681a      	ldr	r2, [r3, #0]
 80030c0:	210f      	movs	r1, #15
 80030c2:	693b      	ldr	r3, [r7, #16]
 80030c4:	fa01 f303 	lsl.w	r3, r1, r3
 80030c8:	43db      	mvns	r3, r3
 80030ca:	401a      	ands	r2, r3
 80030cc:	6a39      	ldr	r1, [r7, #32]
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	fa01 f303 	lsl.w	r3, r1, r3
 80030d4:	431a      	orrs	r2, r3
 80030d6:	697b      	ldr	r3, [r7, #20]
 80030d8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030da:	683b      	ldr	r3, [r7, #0]
 80030dc:	685b      	ldr	r3, [r3, #4]
 80030de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	f000 80b1 	beq.w	800324a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 80030e8:	4b4d      	ldr	r3, [pc, #308]	@ (8003220 <HAL_GPIO_Init+0x2b8>)
 80030ea:	699b      	ldr	r3, [r3, #24]
 80030ec:	4a4c      	ldr	r2, [pc, #304]	@ (8003220 <HAL_GPIO_Init+0x2b8>)
 80030ee:	f043 0301 	orr.w	r3, r3, #1
 80030f2:	6193      	str	r3, [r2, #24]
 80030f4:	4b4a      	ldr	r3, [pc, #296]	@ (8003220 <HAL_GPIO_Init+0x2b8>)
 80030f6:	699b      	ldr	r3, [r3, #24]
 80030f8:	f003 0301 	and.w	r3, r3, #1
 80030fc:	60bb      	str	r3, [r7, #8]
 80030fe:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8003100:	4a48      	ldr	r2, [pc, #288]	@ (8003224 <HAL_GPIO_Init+0x2bc>)
 8003102:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003104:	089b      	lsrs	r3, r3, #2
 8003106:	3302      	adds	r3, #2
 8003108:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800310c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800310e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003110:	f003 0303 	and.w	r3, r3, #3
 8003114:	009b      	lsls	r3, r3, #2
 8003116:	220f      	movs	r2, #15
 8003118:	fa02 f303 	lsl.w	r3, r2, r3
 800311c:	43db      	mvns	r3, r3
 800311e:	68fa      	ldr	r2, [r7, #12]
 8003120:	4013      	ands	r3, r2
 8003122:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8003124:	687b      	ldr	r3, [r7, #4]
 8003126:	4a40      	ldr	r2, [pc, #256]	@ (8003228 <HAL_GPIO_Init+0x2c0>)
 8003128:	4293      	cmp	r3, r2
 800312a:	d013      	beq.n	8003154 <HAL_GPIO_Init+0x1ec>
 800312c:	687b      	ldr	r3, [r7, #4]
 800312e:	4a3f      	ldr	r2, [pc, #252]	@ (800322c <HAL_GPIO_Init+0x2c4>)
 8003130:	4293      	cmp	r3, r2
 8003132:	d00d      	beq.n	8003150 <HAL_GPIO_Init+0x1e8>
 8003134:	687b      	ldr	r3, [r7, #4]
 8003136:	4a3e      	ldr	r2, [pc, #248]	@ (8003230 <HAL_GPIO_Init+0x2c8>)
 8003138:	4293      	cmp	r3, r2
 800313a:	d007      	beq.n	800314c <HAL_GPIO_Init+0x1e4>
 800313c:	687b      	ldr	r3, [r7, #4]
 800313e:	4a3d      	ldr	r2, [pc, #244]	@ (8003234 <HAL_GPIO_Init+0x2cc>)
 8003140:	4293      	cmp	r3, r2
 8003142:	d101      	bne.n	8003148 <HAL_GPIO_Init+0x1e0>
 8003144:	2303      	movs	r3, #3
 8003146:	e006      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 8003148:	2304      	movs	r3, #4
 800314a:	e004      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 800314c:	2302      	movs	r3, #2
 800314e:	e002      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 8003150:	2301      	movs	r3, #1
 8003152:	e000      	b.n	8003156 <HAL_GPIO_Init+0x1ee>
 8003154:	2300      	movs	r3, #0
 8003156:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003158:	f002 0203 	and.w	r2, r2, #3
 800315c:	0092      	lsls	r2, r2, #2
 800315e:	4093      	lsls	r3, r2
 8003160:	68fa      	ldr	r2, [r7, #12]
 8003162:	4313      	orrs	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8003166:	492f      	ldr	r1, [pc, #188]	@ (8003224 <HAL_GPIO_Init+0x2bc>)
 8003168:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800316a:	089b      	lsrs	r3, r3, #2
 800316c:	3302      	adds	r3, #2
 800316e:	68fa      	ldr	r2, [r7, #12]
 8003170:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003174:	683b      	ldr	r3, [r7, #0]
 8003176:	685b      	ldr	r3, [r3, #4]
 8003178:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800317c:	2b00      	cmp	r3, #0
 800317e:	d006      	beq.n	800318e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8003180:	4b2d      	ldr	r3, [pc, #180]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 8003182:	689a      	ldr	r2, [r3, #8]
 8003184:	492c      	ldr	r1, [pc, #176]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 8003186:	69bb      	ldr	r3, [r7, #24]
 8003188:	4313      	orrs	r3, r2
 800318a:	608b      	str	r3, [r1, #8]
 800318c:	e006      	b.n	800319c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 800318e:	4b2a      	ldr	r3, [pc, #168]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 8003190:	689a      	ldr	r2, [r3, #8]
 8003192:	69bb      	ldr	r3, [r7, #24]
 8003194:	43db      	mvns	r3, r3
 8003196:	4928      	ldr	r1, [pc, #160]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 8003198:	4013      	ands	r3, r2
 800319a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800319c:	683b      	ldr	r3, [r7, #0]
 800319e:	685b      	ldr	r3, [r3, #4]
 80031a0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d006      	beq.n	80031b6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80031a8:	4b23      	ldr	r3, [pc, #140]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031aa:	68da      	ldr	r2, [r3, #12]
 80031ac:	4922      	ldr	r1, [pc, #136]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031ae:	69bb      	ldr	r3, [r7, #24]
 80031b0:	4313      	orrs	r3, r2
 80031b2:	60cb      	str	r3, [r1, #12]
 80031b4:	e006      	b.n	80031c4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80031b6:	4b20      	ldr	r3, [pc, #128]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031b8:	68da      	ldr	r2, [r3, #12]
 80031ba:	69bb      	ldr	r3, [r7, #24]
 80031bc:	43db      	mvns	r3, r3
 80031be:	491e      	ldr	r1, [pc, #120]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031c0:	4013      	ands	r3, r2
 80031c2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031c4:	683b      	ldr	r3, [r7, #0]
 80031c6:	685b      	ldr	r3, [r3, #4]
 80031c8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80031cc:	2b00      	cmp	r3, #0
 80031ce:	d006      	beq.n	80031de <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 80031d0:	4b19      	ldr	r3, [pc, #100]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031d2:	685a      	ldr	r2, [r3, #4]
 80031d4:	4918      	ldr	r1, [pc, #96]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031d6:	69bb      	ldr	r3, [r7, #24]
 80031d8:	4313      	orrs	r3, r2
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	e006      	b.n	80031ec <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 80031de:	4b16      	ldr	r3, [pc, #88]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031e0:	685a      	ldr	r2, [r3, #4]
 80031e2:	69bb      	ldr	r3, [r7, #24]
 80031e4:	43db      	mvns	r3, r3
 80031e6:	4914      	ldr	r1, [pc, #80]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031e8:	4013      	ands	r3, r2
 80031ea:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80031ec:	683b      	ldr	r3, [r7, #0]
 80031ee:	685b      	ldr	r3, [r3, #4]
 80031f0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80031f4:	2b00      	cmp	r3, #0
 80031f6:	d021      	beq.n	800323c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 80031f8:	4b0f      	ldr	r3, [pc, #60]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031fa:	681a      	ldr	r2, [r3, #0]
 80031fc:	490e      	ldr	r1, [pc, #56]	@ (8003238 <HAL_GPIO_Init+0x2d0>)
 80031fe:	69bb      	ldr	r3, [r7, #24]
 8003200:	4313      	orrs	r3, r2
 8003202:	600b      	str	r3, [r1, #0]
 8003204:	e021      	b.n	800324a <HAL_GPIO_Init+0x2e2>
 8003206:	bf00      	nop
 8003208:	10320000 	.word	0x10320000
 800320c:	10310000 	.word	0x10310000
 8003210:	10220000 	.word	0x10220000
 8003214:	10210000 	.word	0x10210000
 8003218:	10120000 	.word	0x10120000
 800321c:	10110000 	.word	0x10110000
 8003220:	40021000 	.word	0x40021000
 8003224:	40010000 	.word	0x40010000
 8003228:	40010800 	.word	0x40010800
 800322c:	40010c00 	.word	0x40010c00
 8003230:	40011000 	.word	0x40011000
 8003234:	40011400 	.word	0x40011400
 8003238:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 800323c:	4b0b      	ldr	r3, [pc, #44]	@ (800326c <HAL_GPIO_Init+0x304>)
 800323e:	681a      	ldr	r2, [r3, #0]
 8003240:	69bb      	ldr	r3, [r7, #24]
 8003242:	43db      	mvns	r3, r3
 8003244:	4909      	ldr	r1, [pc, #36]	@ (800326c <HAL_GPIO_Init+0x304>)
 8003246:	4013      	ands	r3, r2
 8003248:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 800324a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800324c:	3301      	adds	r3, #1
 800324e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8003250:	683b      	ldr	r3, [r7, #0]
 8003252:	681a      	ldr	r2, [r3, #0]
 8003254:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003256:	fa22 f303 	lsr.w	r3, r2, r3
 800325a:	2b00      	cmp	r3, #0
 800325c:	f47f ae8e 	bne.w	8002f7c <HAL_GPIO_Init+0x14>
  }
}
 8003260:	bf00      	nop
 8003262:	bf00      	nop
 8003264:	372c      	adds	r7, #44	@ 0x2c
 8003266:	46bd      	mov	sp, r7
 8003268:	bc80      	pop	{r7}
 800326a:	4770      	bx	lr
 800326c:	40010400 	.word	0x40010400

08003270 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8003270:	b480      	push	{r7}
 8003272:	b085      	sub	sp, #20
 8003274:	af00      	add	r7, sp, #0
 8003276:	6078      	str	r0, [r7, #4]
 8003278:	460b      	mov	r3, r1
 800327a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	689a      	ldr	r2, [r3, #8]
 8003280:	887b      	ldrh	r3, [r7, #2]
 8003282:	4013      	ands	r3, r2
 8003284:	2b00      	cmp	r3, #0
 8003286:	d002      	beq.n	800328e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8003288:	2301      	movs	r3, #1
 800328a:	73fb      	strb	r3, [r7, #15]
 800328c:	e001      	b.n	8003292 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800328e:	2300      	movs	r3, #0
 8003290:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8003292:	7bfb      	ldrb	r3, [r7, #15]
}
 8003294:	4618      	mov	r0, r3
 8003296:	3714      	adds	r7, #20
 8003298:	46bd      	mov	sp, r7
 800329a:	bc80      	pop	{r7}
 800329c:	4770      	bx	lr

0800329e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800329e:	b480      	push	{r7}
 80032a0:	b083      	sub	sp, #12
 80032a2:	af00      	add	r7, sp, #0
 80032a4:	6078      	str	r0, [r7, #4]
 80032a6:	460b      	mov	r3, r1
 80032a8:	807b      	strh	r3, [r7, #2]
 80032aa:	4613      	mov	r3, r2
 80032ac:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80032ae:	787b      	ldrb	r3, [r7, #1]
 80032b0:	2b00      	cmp	r3, #0
 80032b2:	d003      	beq.n	80032bc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80032b4:	887a      	ldrh	r2, [r7, #2]
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80032ba:	e003      	b.n	80032c4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80032bc:	887b      	ldrh	r3, [r7, #2]
 80032be:	041a      	lsls	r2, r3, #16
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	611a      	str	r2, [r3, #16]
}
 80032c4:	bf00      	nop
 80032c6:	370c      	adds	r7, #12
 80032c8:	46bd      	mov	sp, r7
 80032ca:	bc80      	pop	{r7}
 80032cc:	4770      	bx	lr
	...

080032d0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80032d0:	b580      	push	{r7, lr}
 80032d2:	b086      	sub	sp, #24
 80032d4:	af00      	add	r7, sp, #0
 80032d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80032d8:	687b      	ldr	r3, [r7, #4]
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d101      	bne.n	80032e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80032de:	2301      	movs	r3, #1
 80032e0:	e272      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f003 0301 	and.w	r3, r3, #1
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	f000 8087 	beq.w	80033fe <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 80032f0:	4b92      	ldr	r3, [pc, #584]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032f2:	685b      	ldr	r3, [r3, #4]
 80032f4:	f003 030c 	and.w	r3, r3, #12
 80032f8:	2b04      	cmp	r3, #4
 80032fa:	d00c      	beq.n	8003316 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 80032fc:	4b8f      	ldr	r3, [pc, #572]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80032fe:	685b      	ldr	r3, [r3, #4]
 8003300:	f003 030c 	and.w	r3, r3, #12
 8003304:	2b08      	cmp	r3, #8
 8003306:	d112      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
 8003308:	4b8c      	ldr	r3, [pc, #560]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800330a:	685b      	ldr	r3, [r3, #4]
 800330c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003310:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003314:	d10b      	bne.n	800332e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003316:	4b89      	ldr	r3, [pc, #548]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800331e:	2b00      	cmp	r3, #0
 8003320:	d06c      	beq.n	80033fc <HAL_RCC_OscConfig+0x12c>
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	2b00      	cmp	r3, #0
 8003328:	d168      	bne.n	80033fc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800332a:	2301      	movs	r3, #1
 800332c:	e24c      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800332e:	687b      	ldr	r3, [r7, #4]
 8003330:	685b      	ldr	r3, [r3, #4]
 8003332:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003336:	d106      	bne.n	8003346 <HAL_RCC_OscConfig+0x76>
 8003338:	4b80      	ldr	r3, [pc, #512]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4a7f      	ldr	r2, [pc, #508]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800333e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003342:	6013      	str	r3, [r2, #0]
 8003344:	e02e      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	685b      	ldr	r3, [r3, #4]
 800334a:	2b00      	cmp	r3, #0
 800334c:	d10c      	bne.n	8003368 <HAL_RCC_OscConfig+0x98>
 800334e:	4b7b      	ldr	r3, [pc, #492]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	4a7a      	ldr	r2, [pc, #488]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003354:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003358:	6013      	str	r3, [r2, #0]
 800335a:	4b78      	ldr	r3, [pc, #480]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800335c:	681b      	ldr	r3, [r3, #0]
 800335e:	4a77      	ldr	r2, [pc, #476]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003360:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003364:	6013      	str	r3, [r2, #0]
 8003366:	e01d      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	685b      	ldr	r3, [r3, #4]
 800336c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003370:	d10c      	bne.n	800338c <HAL_RCC_OscConfig+0xbc>
 8003372:	4b72      	ldr	r3, [pc, #456]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4a71      	ldr	r2, [pc, #452]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003378:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 800337c:	6013      	str	r3, [r2, #0]
 800337e:	4b6f      	ldr	r3, [pc, #444]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003380:	681b      	ldr	r3, [r3, #0]
 8003382:	4a6e      	ldr	r2, [pc, #440]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003384:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003388:	6013      	str	r3, [r2, #0]
 800338a:	e00b      	b.n	80033a4 <HAL_RCC_OscConfig+0xd4>
 800338c:	4b6b      	ldr	r3, [pc, #428]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800338e:	681b      	ldr	r3, [r3, #0]
 8003390:	4a6a      	ldr	r2, [pc, #424]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003392:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003396:	6013      	str	r3, [r2, #0]
 8003398:	4b68      	ldr	r3, [pc, #416]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4a67      	ldr	r2, [pc, #412]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800339e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80033a2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	685b      	ldr	r3, [r3, #4]
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d013      	beq.n	80033d4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ac:	f7ff fcc4 	bl	8002d38 <HAL_GetTick>
 80033b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033b2:	e008      	b.n	80033c6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033b4:	f7ff fcc0 	bl	8002d38 <HAL_GetTick>
 80033b8:	4602      	mov	r2, r0
 80033ba:	693b      	ldr	r3, [r7, #16]
 80033bc:	1ad3      	subs	r3, r2, r3
 80033be:	2b64      	cmp	r3, #100	@ 0x64
 80033c0:	d901      	bls.n	80033c6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 80033c2:	2303      	movs	r3, #3
 80033c4:	e200      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80033c6:	4b5d      	ldr	r3, [pc, #372]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033ce:	2b00      	cmp	r3, #0
 80033d0:	d0f0      	beq.n	80033b4 <HAL_RCC_OscConfig+0xe4>
 80033d2:	e014      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033d4:	f7ff fcb0 	bl	8002d38 <HAL_GetTick>
 80033d8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033da:	e008      	b.n	80033ee <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80033dc:	f7ff fcac 	bl	8002d38 <HAL_GetTick>
 80033e0:	4602      	mov	r2, r0
 80033e2:	693b      	ldr	r3, [r7, #16]
 80033e4:	1ad3      	subs	r3, r2, r3
 80033e6:	2b64      	cmp	r3, #100	@ 0x64
 80033e8:	d901      	bls.n	80033ee <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 80033ea:	2303      	movs	r3, #3
 80033ec:	e1ec      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80033ee:	4b53      	ldr	r3, [pc, #332]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80033f0:	681b      	ldr	r3, [r3, #0]
 80033f2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d1f0      	bne.n	80033dc <HAL_RCC_OscConfig+0x10c>
 80033fa:	e000      	b.n	80033fe <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80033fc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80033fe:	687b      	ldr	r3, [r7, #4]
 8003400:	681b      	ldr	r3, [r3, #0]
 8003402:	f003 0302 	and.w	r3, r3, #2
 8003406:	2b00      	cmp	r3, #0
 8003408:	d063      	beq.n	80034d2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800340a:	4b4c      	ldr	r3, [pc, #304]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 030c 	and.w	r3, r3, #12
 8003412:	2b00      	cmp	r3, #0
 8003414:	d00b      	beq.n	800342e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003416:	4b49      	ldr	r3, [pc, #292]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003418:	685b      	ldr	r3, [r3, #4]
 800341a:	f003 030c 	and.w	r3, r3, #12
 800341e:	2b08      	cmp	r3, #8
 8003420:	d11c      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
 8003422:	4b46      	ldr	r3, [pc, #280]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003424:	685b      	ldr	r3, [r3, #4]
 8003426:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d116      	bne.n	800345c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800342e:	4b43      	ldr	r3, [pc, #268]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	f003 0302 	and.w	r3, r3, #2
 8003436:	2b00      	cmp	r3, #0
 8003438:	d005      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	691b      	ldr	r3, [r3, #16]
 800343e:	2b01      	cmp	r3, #1
 8003440:	d001      	beq.n	8003446 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003442:	2301      	movs	r3, #1
 8003444:	e1c0      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003446:	4b3d      	ldr	r3, [pc, #244]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003448:	681b      	ldr	r3, [r3, #0]
 800344a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	695b      	ldr	r3, [r3, #20]
 8003452:	00db      	lsls	r3, r3, #3
 8003454:	4939      	ldr	r1, [pc, #228]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003456:	4313      	orrs	r3, r2
 8003458:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800345a:	e03a      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	691b      	ldr	r3, [r3, #16]
 8003460:	2b00      	cmp	r3, #0
 8003462:	d020      	beq.n	80034a6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003464:	4b36      	ldr	r3, [pc, #216]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 8003466:	2201      	movs	r2, #1
 8003468:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346a:	f7ff fc65 	bl	8002d38 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003472:	f7ff fc61 	bl	8002d38 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e1a1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003484:	4b2d      	ldr	r3, [pc, #180]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f003 0302 	and.w	r3, r3, #2
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003490:	4b2a      	ldr	r3, [pc, #168]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003498:	687b      	ldr	r3, [r7, #4]
 800349a:	695b      	ldr	r3, [r3, #20]
 800349c:	00db      	lsls	r3, r3, #3
 800349e:	4927      	ldr	r1, [pc, #156]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034a0:	4313      	orrs	r3, r2
 80034a2:	600b      	str	r3, [r1, #0]
 80034a4:	e015      	b.n	80034d2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80034a6:	4b26      	ldr	r3, [pc, #152]	@ (8003540 <HAL_RCC_OscConfig+0x270>)
 80034a8:	2200      	movs	r2, #0
 80034aa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80034ac:	f7ff fc44 	bl	8002d38 <HAL_GetTick>
 80034b0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034b2:	e008      	b.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80034b4:	f7ff fc40 	bl	8002d38 <HAL_GetTick>
 80034b8:	4602      	mov	r2, r0
 80034ba:	693b      	ldr	r3, [r7, #16]
 80034bc:	1ad3      	subs	r3, r2, r3
 80034be:	2b02      	cmp	r3, #2
 80034c0:	d901      	bls.n	80034c6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80034c2:	2303      	movs	r3, #3
 80034c4:	e180      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80034c6:	4b1d      	ldr	r3, [pc, #116]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	f003 0302 	and.w	r3, r3, #2
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d1f0      	bne.n	80034b4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	f003 0308 	and.w	r3, r3, #8
 80034da:	2b00      	cmp	r3, #0
 80034dc:	d03a      	beq.n	8003554 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80034de:	687b      	ldr	r3, [r7, #4]
 80034e0:	699b      	ldr	r3, [r3, #24]
 80034e2:	2b00      	cmp	r3, #0
 80034e4:	d019      	beq.n	800351a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80034e6:	4b17      	ldr	r3, [pc, #92]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 80034e8:	2201      	movs	r2, #1
 80034ea:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80034ec:	f7ff fc24 	bl	8002d38 <HAL_GetTick>
 80034f0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80034f2:	e008      	b.n	8003506 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80034f4:	f7ff fc20 	bl	8002d38 <HAL_GetTick>
 80034f8:	4602      	mov	r2, r0
 80034fa:	693b      	ldr	r3, [r7, #16]
 80034fc:	1ad3      	subs	r3, r2, r3
 80034fe:	2b02      	cmp	r3, #2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e160      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003506:	4b0d      	ldr	r3, [pc, #52]	@ (800353c <HAL_RCC_OscConfig+0x26c>)
 8003508:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0f0      	beq.n	80034f4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003512:	2001      	movs	r0, #1
 8003514:	f000 fa9c 	bl	8003a50 <RCC_Delay>
 8003518:	e01c      	b.n	8003554 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800351a:	4b0a      	ldr	r3, [pc, #40]	@ (8003544 <HAL_RCC_OscConfig+0x274>)
 800351c:	2200      	movs	r2, #0
 800351e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003520:	f7ff fc0a 	bl	8002d38 <HAL_GetTick>
 8003524:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003526:	e00f      	b.n	8003548 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003528:	f7ff fc06 	bl	8002d38 <HAL_GetTick>
 800352c:	4602      	mov	r2, r0
 800352e:	693b      	ldr	r3, [r7, #16]
 8003530:	1ad3      	subs	r3, r2, r3
 8003532:	2b02      	cmp	r3, #2
 8003534:	d908      	bls.n	8003548 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003536:	2303      	movs	r3, #3
 8003538:	e146      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 800353a:	bf00      	nop
 800353c:	40021000 	.word	0x40021000
 8003540:	42420000 	.word	0x42420000
 8003544:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003548:	4b92      	ldr	r3, [pc, #584]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800354a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800354c:	f003 0302 	and.w	r3, r3, #2
 8003550:	2b00      	cmp	r3, #0
 8003552:	d1e9      	bne.n	8003528 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003554:	687b      	ldr	r3, [r7, #4]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f003 0304 	and.w	r3, r3, #4
 800355c:	2b00      	cmp	r3, #0
 800355e:	f000 80a6 	beq.w	80036ae <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003562:	2300      	movs	r3, #0
 8003564:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003566:	4b8b      	ldr	r3, [pc, #556]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	69db      	ldr	r3, [r3, #28]
 800356a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800356e:	2b00      	cmp	r3, #0
 8003570:	d10d      	bne.n	800358e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	4b88      	ldr	r3, [pc, #544]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	69db      	ldr	r3, [r3, #28]
 8003576:	4a87      	ldr	r2, [pc, #540]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800357c:	61d3      	str	r3, [r2, #28]
 800357e:	4b85      	ldr	r3, [pc, #532]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003580:	69db      	ldr	r3, [r3, #28]
 8003582:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003586:	60bb      	str	r3, [r7, #8]
 8003588:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800358a:	2301      	movs	r3, #1
 800358c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800358e:	4b82      	ldr	r3, [pc, #520]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003596:	2b00      	cmp	r3, #0
 8003598:	d118      	bne.n	80035cc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800359a:	4b7f      	ldr	r3, [pc, #508]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	4a7e      	ldr	r2, [pc, #504]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035a0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80035a4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80035a6:	f7ff fbc7 	bl	8002d38 <HAL_GetTick>
 80035aa:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035ac:	e008      	b.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80035ae:	f7ff fbc3 	bl	8002d38 <HAL_GetTick>
 80035b2:	4602      	mov	r2, r0
 80035b4:	693b      	ldr	r3, [r7, #16]
 80035b6:	1ad3      	subs	r3, r2, r3
 80035b8:	2b64      	cmp	r3, #100	@ 0x64
 80035ba:	d901      	bls.n	80035c0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80035bc:	2303      	movs	r3, #3
 80035be:	e103      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80035c0:	4b75      	ldr	r3, [pc, #468]	@ (8003798 <HAL_RCC_OscConfig+0x4c8>)
 80035c2:	681b      	ldr	r3, [r3, #0]
 80035c4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035c8:	2b00      	cmp	r3, #0
 80035ca:	d0f0      	beq.n	80035ae <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	68db      	ldr	r3, [r3, #12]
 80035d0:	2b01      	cmp	r3, #1
 80035d2:	d106      	bne.n	80035e2 <HAL_RCC_OscConfig+0x312>
 80035d4:	4b6f      	ldr	r3, [pc, #444]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035d6:	6a1b      	ldr	r3, [r3, #32]
 80035d8:	4a6e      	ldr	r2, [pc, #440]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035da:	f043 0301 	orr.w	r3, r3, #1
 80035de:	6213      	str	r3, [r2, #32]
 80035e0:	e02d      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 80035e2:	687b      	ldr	r3, [r7, #4]
 80035e4:	68db      	ldr	r3, [r3, #12]
 80035e6:	2b00      	cmp	r3, #0
 80035e8:	d10c      	bne.n	8003604 <HAL_RCC_OscConfig+0x334>
 80035ea:	4b6a      	ldr	r3, [pc, #424]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035ec:	6a1b      	ldr	r3, [r3, #32]
 80035ee:	4a69      	ldr	r2, [pc, #420]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f0:	f023 0301 	bic.w	r3, r3, #1
 80035f4:	6213      	str	r3, [r2, #32]
 80035f6:	4b67      	ldr	r3, [pc, #412]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035f8:	6a1b      	ldr	r3, [r3, #32]
 80035fa:	4a66      	ldr	r2, [pc, #408]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80035fc:	f023 0304 	bic.w	r3, r3, #4
 8003600:	6213      	str	r3, [r2, #32]
 8003602:	e01c      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	68db      	ldr	r3, [r3, #12]
 8003608:	2b05      	cmp	r3, #5
 800360a:	d10c      	bne.n	8003626 <HAL_RCC_OscConfig+0x356>
 800360c:	4b61      	ldr	r3, [pc, #388]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800360e:	6a1b      	ldr	r3, [r3, #32]
 8003610:	4a60      	ldr	r2, [pc, #384]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003612:	f043 0304 	orr.w	r3, r3, #4
 8003616:	6213      	str	r3, [r2, #32]
 8003618:	4b5e      	ldr	r3, [pc, #376]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361a:	6a1b      	ldr	r3, [r3, #32]
 800361c:	4a5d      	ldr	r2, [pc, #372]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800361e:	f043 0301 	orr.w	r3, r3, #1
 8003622:	6213      	str	r3, [r2, #32]
 8003624:	e00b      	b.n	800363e <HAL_RCC_OscConfig+0x36e>
 8003626:	4b5b      	ldr	r3, [pc, #364]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003628:	6a1b      	ldr	r3, [r3, #32]
 800362a:	4a5a      	ldr	r2, [pc, #360]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800362c:	f023 0301 	bic.w	r3, r3, #1
 8003630:	6213      	str	r3, [r2, #32]
 8003632:	4b58      	ldr	r3, [pc, #352]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003634:	6a1b      	ldr	r3, [r3, #32]
 8003636:	4a57      	ldr	r2, [pc, #348]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003638:	f023 0304 	bic.w	r3, r3, #4
 800363c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	68db      	ldr	r3, [r3, #12]
 8003642:	2b00      	cmp	r3, #0
 8003644:	d015      	beq.n	8003672 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003646:	f7ff fb77 	bl	8002d38 <HAL_GetTick>
 800364a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800364c:	e00a      	b.n	8003664 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800364e:	f7ff fb73 	bl	8002d38 <HAL_GetTick>
 8003652:	4602      	mov	r2, r0
 8003654:	693b      	ldr	r3, [r7, #16]
 8003656:	1ad3      	subs	r3, r2, r3
 8003658:	f241 3288 	movw	r2, #5000	@ 0x1388
 800365c:	4293      	cmp	r3, r2
 800365e:	d901      	bls.n	8003664 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003660:	2303      	movs	r3, #3
 8003662:	e0b1      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003664:	4b4b      	ldr	r3, [pc, #300]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003666:	6a1b      	ldr	r3, [r3, #32]
 8003668:	f003 0302 	and.w	r3, r3, #2
 800366c:	2b00      	cmp	r3, #0
 800366e:	d0ee      	beq.n	800364e <HAL_RCC_OscConfig+0x37e>
 8003670:	e014      	b.n	800369c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003672:	f7ff fb61 	bl	8002d38 <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003678:	e00a      	b.n	8003690 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800367a:	f7ff fb5d 	bl	8002d38 <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003688:	4293      	cmp	r3, r2
 800368a:	d901      	bls.n	8003690 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800368c:	2303      	movs	r3, #3
 800368e:	e09b      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003690:	4b40      	ldr	r3, [pc, #256]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003692:	6a1b      	ldr	r3, [r3, #32]
 8003694:	f003 0302 	and.w	r3, r3, #2
 8003698:	2b00      	cmp	r3, #0
 800369a:	d1ee      	bne.n	800367a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800369c:	7dfb      	ldrb	r3, [r7, #23]
 800369e:	2b01      	cmp	r3, #1
 80036a0:	d105      	bne.n	80036ae <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80036a2:	4b3c      	ldr	r3, [pc, #240]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a4:	69db      	ldr	r3, [r3, #28]
 80036a6:	4a3b      	ldr	r2, [pc, #236]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036a8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80036ac:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	69db      	ldr	r3, [r3, #28]
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	f000 8087 	beq.w	80037c6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80036b8:	4b36      	ldr	r3, [pc, #216]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ba:	685b      	ldr	r3, [r3, #4]
 80036bc:	f003 030c 	and.w	r3, r3, #12
 80036c0:	2b08      	cmp	r3, #8
 80036c2:	d061      	beq.n	8003788 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	69db      	ldr	r3, [r3, #28]
 80036c8:	2b02      	cmp	r3, #2
 80036ca:	d146      	bne.n	800375a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80036cc:	4b33      	ldr	r3, [pc, #204]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 80036ce:	2200      	movs	r2, #0
 80036d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036d2:	f7ff fb31 	bl	8002d38 <HAL_GetTick>
 80036d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036d8:	e008      	b.n	80036ec <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036da:	f7ff fb2d 	bl	8002d38 <HAL_GetTick>
 80036de:	4602      	mov	r2, r0
 80036e0:	693b      	ldr	r3, [r7, #16]
 80036e2:	1ad3      	subs	r3, r2, r3
 80036e4:	2b02      	cmp	r3, #2
 80036e6:	d901      	bls.n	80036ec <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80036e8:	2303      	movs	r3, #3
 80036ea:	e06d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ec:	4b29      	ldr	r3, [pc, #164]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 80036ee:	681b      	ldr	r3, [r3, #0]
 80036f0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80036f4:	2b00      	cmp	r3, #0
 80036f6:	d1f0      	bne.n	80036da <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6a1b      	ldr	r3, [r3, #32]
 80036fc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003700:	d108      	bne.n	8003714 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003702:	4b24      	ldr	r3, [pc, #144]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	689b      	ldr	r3, [r3, #8]
 800370e:	4921      	ldr	r1, [pc, #132]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003710:	4313      	orrs	r3, r2
 8003712:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003714:	4b1f      	ldr	r3, [pc, #124]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003716:	685b      	ldr	r3, [r3, #4]
 8003718:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	6a19      	ldr	r1, [r3, #32]
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003724:	430b      	orrs	r3, r1
 8003726:	491b      	ldr	r1, [pc, #108]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 8003728:	4313      	orrs	r3, r2
 800372a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800372c:	4b1b      	ldr	r3, [pc, #108]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800372e:	2201      	movs	r2, #1
 8003730:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003732:	f7ff fb01 	bl	8002d38 <HAL_GetTick>
 8003736:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003738:	e008      	b.n	800374c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800373a:	f7ff fafd 	bl	8002d38 <HAL_GetTick>
 800373e:	4602      	mov	r2, r0
 8003740:	693b      	ldr	r3, [r7, #16]
 8003742:	1ad3      	subs	r3, r2, r3
 8003744:	2b02      	cmp	r3, #2
 8003746:	d901      	bls.n	800374c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003748:	2303      	movs	r3, #3
 800374a:	e03d      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800374c:	4b11      	ldr	r3, [pc, #68]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003754:	2b00      	cmp	r3, #0
 8003756:	d0f0      	beq.n	800373a <HAL_RCC_OscConfig+0x46a>
 8003758:	e035      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800375a:	4b10      	ldr	r3, [pc, #64]	@ (800379c <HAL_RCC_OscConfig+0x4cc>)
 800375c:	2200      	movs	r2, #0
 800375e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003760:	f7ff faea 	bl	8002d38 <HAL_GetTick>
 8003764:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003766:	e008      	b.n	800377a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003768:	f7ff fae6 	bl	8002d38 <HAL_GetTick>
 800376c:	4602      	mov	r2, r0
 800376e:	693b      	ldr	r3, [r7, #16]
 8003770:	1ad3      	subs	r3, r2, r3
 8003772:	2b02      	cmp	r3, #2
 8003774:	d901      	bls.n	800377a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003776:	2303      	movs	r3, #3
 8003778:	e026      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800377a:	4b06      	ldr	r3, [pc, #24]	@ (8003794 <HAL_RCC_OscConfig+0x4c4>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003782:	2b00      	cmp	r3, #0
 8003784:	d1f0      	bne.n	8003768 <HAL_RCC_OscConfig+0x498>
 8003786:	e01e      	b.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003788:	687b      	ldr	r3, [r7, #4]
 800378a:	69db      	ldr	r3, [r3, #28]
 800378c:	2b01      	cmp	r3, #1
 800378e:	d107      	bne.n	80037a0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003790:	2301      	movs	r3, #1
 8003792:	e019      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
 8003794:	40021000 	.word	0x40021000
 8003798:	40007000 	.word	0x40007000
 800379c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80037a0:	4b0b      	ldr	r3, [pc, #44]	@ (80037d0 <HAL_RCC_OscConfig+0x500>)
 80037a2:	685b      	ldr	r3, [r3, #4]
 80037a4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037a6:	68fb      	ldr	r3, [r7, #12]
 80037a8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	6a1b      	ldr	r3, [r3, #32]
 80037b0:	429a      	cmp	r2, r3
 80037b2:	d106      	bne.n	80037c2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80037b4:	68fb      	ldr	r3, [r7, #12]
 80037b6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80037ba:	687b      	ldr	r3, [r7, #4]
 80037bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80037be:	429a      	cmp	r2, r3
 80037c0:	d001      	beq.n	80037c6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80037c2:	2301      	movs	r3, #1
 80037c4:	e000      	b.n	80037c8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80037c6:	2300      	movs	r3, #0
}
 80037c8:	4618      	mov	r0, r3
 80037ca:	3718      	adds	r7, #24
 80037cc:	46bd      	mov	sp, r7
 80037ce:	bd80      	pop	{r7, pc}
 80037d0:	40021000 	.word	0x40021000

080037d4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	b084      	sub	sp, #16
 80037d8:	af00      	add	r7, sp, #0
 80037da:	6078      	str	r0, [r7, #4]
 80037dc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	2b00      	cmp	r3, #0
 80037e2:	d101      	bne.n	80037e8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80037e4:	2301      	movs	r3, #1
 80037e6:	e0d0      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80037e8:	4b6a      	ldr	r3, [pc, #424]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037ea:	681b      	ldr	r3, [r3, #0]
 80037ec:	f003 0307 	and.w	r3, r3, #7
 80037f0:	683a      	ldr	r2, [r7, #0]
 80037f2:	429a      	cmp	r2, r3
 80037f4:	d910      	bls.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037f6:	4b67      	ldr	r3, [pc, #412]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	f023 0207 	bic.w	r2, r3, #7
 80037fe:	4965      	ldr	r1, [pc, #404]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	4313      	orrs	r3, r2
 8003804:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003806:	4b63      	ldr	r3, [pc, #396]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003808:	681b      	ldr	r3, [r3, #0]
 800380a:	f003 0307 	and.w	r3, r3, #7
 800380e:	683a      	ldr	r2, [r7, #0]
 8003810:	429a      	cmp	r2, r3
 8003812:	d001      	beq.n	8003818 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003814:	2301      	movs	r3, #1
 8003816:	e0b8      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f003 0302 	and.w	r3, r3, #2
 8003820:	2b00      	cmp	r3, #0
 8003822:	d020      	beq.n	8003866 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	f003 0304 	and.w	r3, r3, #4
 800382c:	2b00      	cmp	r3, #0
 800382e:	d005      	beq.n	800383c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003830:	4b59      	ldr	r3, [pc, #356]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003832:	685b      	ldr	r3, [r3, #4]
 8003834:	4a58      	ldr	r2, [pc, #352]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003836:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800383a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800383c:	687b      	ldr	r3, [r7, #4]
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	f003 0308 	and.w	r3, r3, #8
 8003844:	2b00      	cmp	r3, #0
 8003846:	d005      	beq.n	8003854 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003848:	4b53      	ldr	r3, [pc, #332]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384a:	685b      	ldr	r3, [r3, #4]
 800384c:	4a52      	ldr	r2, [pc, #328]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800384e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003852:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003854:	4b50      	ldr	r3, [pc, #320]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003856:	685b      	ldr	r3, [r3, #4]
 8003858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	689b      	ldr	r3, [r3, #8]
 8003860:	494d      	ldr	r1, [pc, #308]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003862:	4313      	orrs	r3, r2
 8003864:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f003 0301 	and.w	r3, r3, #1
 800386e:	2b00      	cmp	r3, #0
 8003870:	d040      	beq.n	80038f4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	685b      	ldr	r3, [r3, #4]
 8003876:	2b01      	cmp	r3, #1
 8003878:	d107      	bne.n	800388a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800387a:	4b47      	ldr	r3, [pc, #284]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800387c:	681b      	ldr	r3, [r3, #0]
 800387e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003882:	2b00      	cmp	r3, #0
 8003884:	d115      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003886:	2301      	movs	r3, #1
 8003888:	e07f      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	685b      	ldr	r3, [r3, #4]
 800388e:	2b02      	cmp	r3, #2
 8003890:	d107      	bne.n	80038a2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003892:	4b41      	ldr	r3, [pc, #260]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800389a:	2b00      	cmp	r3, #0
 800389c:	d109      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800389e:	2301      	movs	r3, #1
 80038a0:	e073      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80038a2:	4b3d      	ldr	r3, [pc, #244]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038a4:	681b      	ldr	r3, [r3, #0]
 80038a6:	f003 0302 	and.w	r3, r3, #2
 80038aa:	2b00      	cmp	r3, #0
 80038ac:	d101      	bne.n	80038b2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80038ae:	2301      	movs	r3, #1
 80038b0:	e06b      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80038b2:	4b39      	ldr	r3, [pc, #228]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038b4:	685b      	ldr	r3, [r3, #4]
 80038b6:	f023 0203 	bic.w	r2, r3, #3
 80038ba:	687b      	ldr	r3, [r7, #4]
 80038bc:	685b      	ldr	r3, [r3, #4]
 80038be:	4936      	ldr	r1, [pc, #216]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038c0:	4313      	orrs	r3, r2
 80038c2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80038c4:	f7ff fa38 	bl	8002d38 <HAL_GetTick>
 80038c8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038ca:	e00a      	b.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80038cc:	f7ff fa34 	bl	8002d38 <HAL_GetTick>
 80038d0:	4602      	mov	r2, r0
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	1ad3      	subs	r3, r2, r3
 80038d6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80038da:	4293      	cmp	r3, r2
 80038dc:	d901      	bls.n	80038e2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80038de:	2303      	movs	r3, #3
 80038e0:	e053      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80038e2:	4b2d      	ldr	r3, [pc, #180]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 80038e4:	685b      	ldr	r3, [r3, #4]
 80038e6:	f003 020c 	and.w	r2, r3, #12
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	685b      	ldr	r3, [r3, #4]
 80038ee:	009b      	lsls	r3, r3, #2
 80038f0:	429a      	cmp	r2, r3
 80038f2:	d1eb      	bne.n	80038cc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80038f4:	4b27      	ldr	r3, [pc, #156]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f003 0307 	and.w	r3, r3, #7
 80038fc:	683a      	ldr	r2, [r7, #0]
 80038fe:	429a      	cmp	r2, r3
 8003900:	d210      	bcs.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003902:	4b24      	ldr	r3, [pc, #144]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003904:	681b      	ldr	r3, [r3, #0]
 8003906:	f023 0207 	bic.w	r2, r3, #7
 800390a:	4922      	ldr	r1, [pc, #136]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 800390c:	683b      	ldr	r3, [r7, #0]
 800390e:	4313      	orrs	r3, r2
 8003910:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003912:	4b20      	ldr	r3, [pc, #128]	@ (8003994 <HAL_RCC_ClockConfig+0x1c0>)
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	f003 0307 	and.w	r3, r3, #7
 800391a:	683a      	ldr	r2, [r7, #0]
 800391c:	429a      	cmp	r2, r3
 800391e:	d001      	beq.n	8003924 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003920:	2301      	movs	r3, #1
 8003922:	e032      	b.n	800398a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	f003 0304 	and.w	r3, r3, #4
 800392c:	2b00      	cmp	r3, #0
 800392e:	d008      	beq.n	8003942 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003930:	4b19      	ldr	r3, [pc, #100]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003932:	685b      	ldr	r3, [r3, #4]
 8003934:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	68db      	ldr	r3, [r3, #12]
 800393c:	4916      	ldr	r1, [pc, #88]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800393e:	4313      	orrs	r3, r2
 8003940:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	681b      	ldr	r3, [r3, #0]
 8003946:	f003 0308 	and.w	r3, r3, #8
 800394a:	2b00      	cmp	r3, #0
 800394c:	d009      	beq.n	8003962 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800394e:	4b12      	ldr	r3, [pc, #72]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003956:	687b      	ldr	r3, [r7, #4]
 8003958:	691b      	ldr	r3, [r3, #16]
 800395a:	00db      	lsls	r3, r3, #3
 800395c:	490e      	ldr	r1, [pc, #56]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800395e:	4313      	orrs	r3, r2
 8003960:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003962:	f000 f821 	bl	80039a8 <HAL_RCC_GetSysClockFreq>
 8003966:	4602      	mov	r2, r0
 8003968:	4b0b      	ldr	r3, [pc, #44]	@ (8003998 <HAL_RCC_ClockConfig+0x1c4>)
 800396a:	685b      	ldr	r3, [r3, #4]
 800396c:	091b      	lsrs	r3, r3, #4
 800396e:	f003 030f 	and.w	r3, r3, #15
 8003972:	490a      	ldr	r1, [pc, #40]	@ (800399c <HAL_RCC_ClockConfig+0x1c8>)
 8003974:	5ccb      	ldrb	r3, [r1, r3]
 8003976:	fa22 f303 	lsr.w	r3, r2, r3
 800397a:	4a09      	ldr	r2, [pc, #36]	@ (80039a0 <HAL_RCC_ClockConfig+0x1cc>)
 800397c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800397e:	4b09      	ldr	r3, [pc, #36]	@ (80039a4 <HAL_RCC_ClockConfig+0x1d0>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4618      	mov	r0, r3
 8003984:	f7ff f996 	bl	8002cb4 <HAL_InitTick>

  return HAL_OK;
 8003988:	2300      	movs	r3, #0
}
 800398a:	4618      	mov	r0, r3
 800398c:	3710      	adds	r7, #16
 800398e:	46bd      	mov	sp, r7
 8003990:	bd80      	pop	{r7, pc}
 8003992:	bf00      	nop
 8003994:	40022000 	.word	0x40022000
 8003998:	40021000 	.word	0x40021000
 800399c:	08005f70 	.word	0x08005f70
 80039a0:	200001d8 	.word	0x200001d8
 80039a4:	200001dc 	.word	0x200001dc

080039a8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80039a8:	b480      	push	{r7}
 80039aa:	b087      	sub	sp, #28
 80039ac:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80039ae:	2300      	movs	r3, #0
 80039b0:	60fb      	str	r3, [r7, #12]
 80039b2:	2300      	movs	r3, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	2300      	movs	r3, #0
 80039b8:	617b      	str	r3, [r7, #20]
 80039ba:	2300      	movs	r3, #0
 80039bc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80039be:	2300      	movs	r3, #0
 80039c0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80039c2:	4b1e      	ldr	r3, [pc, #120]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039c4:	685b      	ldr	r3, [r3, #4]
 80039c6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	f003 030c 	and.w	r3, r3, #12
 80039ce:	2b04      	cmp	r3, #4
 80039d0:	d002      	beq.n	80039d8 <HAL_RCC_GetSysClockFreq+0x30>
 80039d2:	2b08      	cmp	r3, #8
 80039d4:	d003      	beq.n	80039de <HAL_RCC_GetSysClockFreq+0x36>
 80039d6:	e027      	b.n	8003a28 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80039d8:	4b19      	ldr	r3, [pc, #100]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 80039da:	613b      	str	r3, [r7, #16]
      break;
 80039dc:	e027      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80039de:	68fb      	ldr	r3, [r7, #12]
 80039e0:	0c9b      	lsrs	r3, r3, #18
 80039e2:	f003 030f 	and.w	r3, r3, #15
 80039e6:	4a17      	ldr	r2, [pc, #92]	@ (8003a44 <HAL_RCC_GetSysClockFreq+0x9c>)
 80039e8:	5cd3      	ldrb	r3, [r2, r3]
 80039ea:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80039ec:	68fb      	ldr	r3, [r7, #12]
 80039ee:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80039f2:	2b00      	cmp	r3, #0
 80039f4:	d010      	beq.n	8003a18 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80039f6:	4b11      	ldr	r3, [pc, #68]	@ (8003a3c <HAL_RCC_GetSysClockFreq+0x94>)
 80039f8:	685b      	ldr	r3, [r3, #4]
 80039fa:	0c5b      	lsrs	r3, r3, #17
 80039fc:	f003 0301 	and.w	r3, r3, #1
 8003a00:	4a11      	ldr	r2, [pc, #68]	@ (8003a48 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003a02:	5cd3      	ldrb	r3, [r2, r3]
 8003a04:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	4a0d      	ldr	r2, [pc, #52]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a0a:	fb03 f202 	mul.w	r2, r3, r2
 8003a0e:	68bb      	ldr	r3, [r7, #8]
 8003a10:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a14:	617b      	str	r3, [r7, #20]
 8003a16:	e004      	b.n	8003a22 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003a18:	687b      	ldr	r3, [r7, #4]
 8003a1a:	4a0c      	ldr	r2, [pc, #48]	@ (8003a4c <HAL_RCC_GetSysClockFreq+0xa4>)
 8003a1c:	fb02 f303 	mul.w	r3, r2, r3
 8003a20:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003a22:	697b      	ldr	r3, [r7, #20]
 8003a24:	613b      	str	r3, [r7, #16]
      break;
 8003a26:	e002      	b.n	8003a2e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003a28:	4b05      	ldr	r3, [pc, #20]	@ (8003a40 <HAL_RCC_GetSysClockFreq+0x98>)
 8003a2a:	613b      	str	r3, [r7, #16]
      break;
 8003a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003a2e:	693b      	ldr	r3, [r7, #16]
}
 8003a30:	4618      	mov	r0, r3
 8003a32:	371c      	adds	r7, #28
 8003a34:	46bd      	mov	sp, r7
 8003a36:	bc80      	pop	{r7}
 8003a38:	4770      	bx	lr
 8003a3a:	bf00      	nop
 8003a3c:	40021000 	.word	0x40021000
 8003a40:	007a1200 	.word	0x007a1200
 8003a44:	08005f80 	.word	0x08005f80
 8003a48:	08005f90 	.word	0x08005f90
 8003a4c:	003d0900 	.word	0x003d0900

08003a50 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003a50:	b480      	push	{r7}
 8003a52:	b085      	sub	sp, #20
 8003a54:	af00      	add	r7, sp, #0
 8003a56:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003a58:	4b0a      	ldr	r3, [pc, #40]	@ (8003a84 <RCC_Delay+0x34>)
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	4a0a      	ldr	r2, [pc, #40]	@ (8003a88 <RCC_Delay+0x38>)
 8003a5e:	fba2 2303 	umull	r2, r3, r2, r3
 8003a62:	0a5b      	lsrs	r3, r3, #9
 8003a64:	687a      	ldr	r2, [r7, #4]
 8003a66:	fb02 f303 	mul.w	r3, r2, r3
 8003a6a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003a6c:	bf00      	nop
  }
  while (Delay --);
 8003a6e:	68fb      	ldr	r3, [r7, #12]
 8003a70:	1e5a      	subs	r2, r3, #1
 8003a72:	60fa      	str	r2, [r7, #12]
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d1f9      	bne.n	8003a6c <RCC_Delay+0x1c>
}
 8003a78:	bf00      	nop
 8003a7a:	bf00      	nop
 8003a7c:	3714      	adds	r7, #20
 8003a7e:	46bd      	mov	sp, r7
 8003a80:	bc80      	pop	{r7}
 8003a82:	4770      	bx	lr
 8003a84:	200001d8 	.word	0x200001d8
 8003a88:	10624dd3 	.word	0x10624dd3

08003a8c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a8c:	b580      	push	{r7, lr}
 8003a8e:	b082      	sub	sp, #8
 8003a90:	af00      	add	r7, sp, #0
 8003a92:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2b00      	cmp	r3, #0
 8003a98:	d101      	bne.n	8003a9e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a9a:	2301      	movs	r3, #1
 8003a9c:	e076      	b.n	8003b8c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa2:	2b00      	cmp	r3, #0
 8003aa4:	d108      	bne.n	8003ab8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	685b      	ldr	r3, [r3, #4]
 8003aaa:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003aae:	d009      	beq.n	8003ac4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2200      	movs	r2, #0
 8003ab4:	61da      	str	r2, [r3, #28]
 8003ab6:	e005      	b.n	8003ac4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	2200      	movs	r2, #0
 8003abc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	2200      	movs	r2, #0
 8003ac2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8003ad0:	b2db      	uxtb	r3, r3
 8003ad2:	2b00      	cmp	r3, #0
 8003ad4:	d106      	bne.n	8003ae4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	2200      	movs	r2, #0
 8003ada:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003ade:	6878      	ldr	r0, [r7, #4]
 8003ae0:	f7fe ff92 	bl	8002a08 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	2202      	movs	r2, #2
 8003ae8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003afa:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	685b      	ldr	r3, [r3, #4]
 8003b00:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	689b      	ldr	r3, [r3, #8]
 8003b08:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8003b0c:	431a      	orrs	r2, r3
 8003b0e:	687b      	ldr	r3, [r7, #4]
 8003b10:	68db      	ldr	r3, [r3, #12]
 8003b12:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003b16:	431a      	orrs	r2, r3
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	691b      	ldr	r3, [r3, #16]
 8003b1c:	f003 0302 	and.w	r3, r3, #2
 8003b20:	431a      	orrs	r2, r3
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	695b      	ldr	r3, [r3, #20]
 8003b26:	f003 0301 	and.w	r3, r3, #1
 8003b2a:	431a      	orrs	r2, r3
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	699b      	ldr	r3, [r3, #24]
 8003b30:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003b34:	431a      	orrs	r2, r3
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	69db      	ldr	r3, [r3, #28]
 8003b3a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003b3e:	431a      	orrs	r2, r3
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a1b      	ldr	r3, [r3, #32]
 8003b44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003b48:	ea42 0103 	orr.w	r1, r2, r3
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003b50:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	430a      	orrs	r2, r1
 8003b5a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	699b      	ldr	r3, [r3, #24]
 8003b60:	0c1a      	lsrs	r2, r3, #16
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	681b      	ldr	r3, [r3, #0]
 8003b66:	f002 0204 	and.w	r2, r2, #4
 8003b6a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	69da      	ldr	r2, [r3, #28]
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b7a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	2200      	movs	r2, #0
 8003b80:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	2201      	movs	r2, #1
 8003b86:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8003b8a:	2300      	movs	r3, #0
}
 8003b8c:	4618      	mov	r0, r3
 8003b8e:	3708      	adds	r7, #8
 8003b90:	46bd      	mov	sp, r7
 8003b92:	bd80      	pop	{r7, pc}

08003b94 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003b94:	b580      	push	{r7, lr}
 8003b96:	b082      	sub	sp, #8
 8003b98:	af00      	add	r7, sp, #0
 8003b9a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2b00      	cmp	r3, #0
 8003ba0:	d101      	bne.n	8003ba6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e041      	b.n	8003c2a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003bac:	b2db      	uxtb	r3, r3
 8003bae:	2b00      	cmp	r3, #0
 8003bb0:	d106      	bne.n	8003bc0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003bba:	6878      	ldr	r0, [r7, #4]
 8003bbc:	f7fe ff62 	bl	8002a84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	2202      	movs	r2, #2
 8003bc4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681a      	ldr	r2, [r3, #0]
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	3304      	adds	r3, #4
 8003bd0:	4619      	mov	r1, r3
 8003bd2:	4610      	mov	r0, r2
 8003bd4:	f000 fc38 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	2201      	movs	r2, #1
 8003be4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003be8:	687b      	ldr	r3, [r7, #4]
 8003bea:	2201      	movs	r2, #1
 8003bec:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	2201      	movs	r2, #1
 8003bf4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	2201      	movs	r2, #1
 8003c04:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003c08:	687b      	ldr	r3, [r7, #4]
 8003c0a:	2201      	movs	r2, #1
 8003c0c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	2201      	movs	r2, #1
 8003c14:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003c18:	687b      	ldr	r3, [r7, #4]
 8003c1a:	2201      	movs	r2, #1
 8003c1c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2201      	movs	r2, #1
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003c28:	2300      	movs	r3, #0
}
 8003c2a:	4618      	mov	r0, r3
 8003c2c:	3708      	adds	r7, #8
 8003c2e:	46bd      	mov	sp, r7
 8003c30:	bd80      	pop	{r7, pc}
	...

08003c34 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c34:	b480      	push	{r7}
 8003c36:	b085      	sub	sp, #20
 8003c38:	af00      	add	r7, sp, #0
 8003c3a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003c42:	b2db      	uxtb	r3, r3
 8003c44:	2b01      	cmp	r3, #1
 8003c46:	d001      	beq.n	8003c4c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c48:	2301      	movs	r3, #1
 8003c4a:	e03a      	b.n	8003cc2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	2202      	movs	r2, #2
 8003c50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c54:	687b      	ldr	r3, [r7, #4]
 8003c56:	681b      	ldr	r3, [r3, #0]
 8003c58:	68da      	ldr	r2, [r3, #12]
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	f042 0201 	orr.w	r2, r2, #1
 8003c62:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	4a18      	ldr	r2, [pc, #96]	@ (8003ccc <HAL_TIM_Base_Start_IT+0x98>)
 8003c6a:	4293      	cmp	r3, r2
 8003c6c:	d00e      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x58>
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003c76:	d009      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x58>
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	681b      	ldr	r3, [r3, #0]
 8003c7c:	4a14      	ldr	r2, [pc, #80]	@ (8003cd0 <HAL_TIM_Base_Start_IT+0x9c>)
 8003c7e:	4293      	cmp	r3, r2
 8003c80:	d004      	beq.n	8003c8c <HAL_TIM_Base_Start_IT+0x58>
 8003c82:	687b      	ldr	r3, [r7, #4]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	4a13      	ldr	r2, [pc, #76]	@ (8003cd4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003c88:	4293      	cmp	r3, r2
 8003c8a:	d111      	bne.n	8003cb0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	689b      	ldr	r3, [r3, #8]
 8003c92:	f003 0307 	and.w	r3, r3, #7
 8003c96:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	2b06      	cmp	r3, #6
 8003c9c:	d010      	beq.n	8003cc0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003c9e:	687b      	ldr	r3, [r7, #4]
 8003ca0:	681b      	ldr	r3, [r3, #0]
 8003ca2:	681a      	ldr	r2, [r3, #0]
 8003ca4:	687b      	ldr	r3, [r7, #4]
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	f042 0201 	orr.w	r2, r2, #1
 8003cac:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cae:	e007      	b.n	8003cc0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	681a      	ldr	r2, [r3, #0]
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	681b      	ldr	r3, [r3, #0]
 8003cba:	f042 0201 	orr.w	r2, r2, #1
 8003cbe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003cc0:	2300      	movs	r3, #0
}
 8003cc2:	4618      	mov	r0, r3
 8003cc4:	3714      	adds	r7, #20
 8003cc6:	46bd      	mov	sp, r7
 8003cc8:	bc80      	pop	{r7}
 8003cca:	4770      	bx	lr
 8003ccc:	40012c00 	.word	0x40012c00
 8003cd0:	40000400 	.word	0x40000400
 8003cd4:	40000800 	.word	0x40000800

08003cd8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cd8:	b580      	push	{r7, lr}
 8003cda:	b082      	sub	sp, #8
 8003cdc:	af00      	add	r7, sp, #0
 8003cde:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	d101      	bne.n	8003cea <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003ce6:	2301      	movs	r3, #1
 8003ce8:	e041      	b.n	8003d6e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003cea:	687b      	ldr	r3, [r7, #4]
 8003cec:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cf0:	b2db      	uxtb	r3, r3
 8003cf2:	2b00      	cmp	r3, #0
 8003cf4:	d106      	bne.n	8003d04 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003cf6:	687b      	ldr	r3, [r7, #4]
 8003cf8:	2200      	movs	r2, #0
 8003cfa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003cfe:	6878      	ldr	r0, [r7, #4]
 8003d00:	f000 f839 	bl	8003d76 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	2202      	movs	r2, #2
 8003d08:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681a      	ldr	r2, [r3, #0]
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	3304      	adds	r3, #4
 8003d14:	4619      	mov	r1, r3
 8003d16:	4610      	mov	r0, r2
 8003d18:	f000 fb96 	bl	8004448 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2201      	movs	r2, #1
 8003d20:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2201      	movs	r2, #1
 8003d28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	2201      	movs	r2, #1
 8003d30:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003d34:	687b      	ldr	r3, [r7, #4]
 8003d36:	2201      	movs	r2, #1
 8003d38:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003d6c:	2300      	movs	r3, #0
}
 8003d6e:	4618      	mov	r0, r3
 8003d70:	3708      	adds	r7, #8
 8003d72:	46bd      	mov	sp, r7
 8003d74:	bd80      	pop	{r7, pc}

08003d76 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d76:	b480      	push	{r7}
 8003d78:	b083      	sub	sp, #12
 8003d7a:	af00      	add	r7, sp, #0
 8003d7c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d7e:	bf00      	nop
 8003d80:	370c      	adds	r7, #12
 8003d82:	46bd      	mov	sp, r7
 8003d84:	bc80      	pop	{r7}
 8003d86:	4770      	bx	lr

08003d88 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003d88:	b580      	push	{r7, lr}
 8003d8a:	b084      	sub	sp, #16
 8003d8c:	af00      	add	r7, sp, #0
 8003d8e:	6078      	str	r0, [r7, #4]
 8003d90:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003d92:	683b      	ldr	r3, [r7, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d109      	bne.n	8003dac <HAL_TIM_PWM_Start+0x24>
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003d9e:	b2db      	uxtb	r3, r3
 8003da0:	2b01      	cmp	r3, #1
 8003da2:	bf14      	ite	ne
 8003da4:	2301      	movne	r3, #1
 8003da6:	2300      	moveq	r3, #0
 8003da8:	b2db      	uxtb	r3, r3
 8003daa:	e022      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003dac:	683b      	ldr	r3, [r7, #0]
 8003dae:	2b04      	cmp	r3, #4
 8003db0:	d109      	bne.n	8003dc6 <HAL_TIM_PWM_Start+0x3e>
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8003db8:	b2db      	uxtb	r3, r3
 8003dba:	2b01      	cmp	r3, #1
 8003dbc:	bf14      	ite	ne
 8003dbe:	2301      	movne	r3, #1
 8003dc0:	2300      	moveq	r3, #0
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	e015      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	2b08      	cmp	r3, #8
 8003dca:	d109      	bne.n	8003de0 <HAL_TIM_PWM_Start+0x58>
 8003dcc:	687b      	ldr	r3, [r7, #4]
 8003dce:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8003dd2:	b2db      	uxtb	r3, r3
 8003dd4:	2b01      	cmp	r3, #1
 8003dd6:	bf14      	ite	ne
 8003dd8:	2301      	movne	r3, #1
 8003dda:	2300      	moveq	r3, #0
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	e008      	b.n	8003df2 <HAL_TIM_PWM_Start+0x6a>
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	bf14      	ite	ne
 8003dec:	2301      	movne	r3, #1
 8003dee:	2300      	moveq	r3, #0
 8003df0:	b2db      	uxtb	r3, r3
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e05e      	b.n	8003eb8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	2b00      	cmp	r3, #0
 8003dfe:	d104      	bne.n	8003e0a <HAL_TIM_PWM_Start+0x82>
 8003e00:	687b      	ldr	r3, [r7, #4]
 8003e02:	2202      	movs	r2, #2
 8003e04:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003e08:	e013      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e0a:	683b      	ldr	r3, [r7, #0]
 8003e0c:	2b04      	cmp	r3, #4
 8003e0e:	d104      	bne.n	8003e1a <HAL_TIM_PWM_Start+0x92>
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	2202      	movs	r2, #2
 8003e14:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003e18:	e00b      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	2b08      	cmp	r3, #8
 8003e1e:	d104      	bne.n	8003e2a <HAL_TIM_PWM_Start+0xa2>
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	2202      	movs	r2, #2
 8003e24:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003e28:	e003      	b.n	8003e32 <HAL_TIM_PWM_Start+0xaa>
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2202      	movs	r2, #2
 8003e2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	2201      	movs	r2, #1
 8003e38:	6839      	ldr	r1, [r7, #0]
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f000 fd84 	bl	8004948 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4a1e      	ldr	r2, [pc, #120]	@ (8003ec0 <HAL_TIM_PWM_Start+0x138>)
 8003e46:	4293      	cmp	r3, r2
 8003e48:	d107      	bne.n	8003e5a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e4a:	687b      	ldr	r3, [r7, #4]
 8003e4c:	681b      	ldr	r3, [r3, #0]
 8003e4e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	681b      	ldr	r3, [r3, #0]
 8003e54:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003e58:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e5a:	687b      	ldr	r3, [r7, #4]
 8003e5c:	681b      	ldr	r3, [r3, #0]
 8003e5e:	4a18      	ldr	r2, [pc, #96]	@ (8003ec0 <HAL_TIM_PWM_Start+0x138>)
 8003e60:	4293      	cmp	r3, r2
 8003e62:	d00e      	beq.n	8003e82 <HAL_TIM_PWM_Start+0xfa>
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003e6c:	d009      	beq.n	8003e82 <HAL_TIM_PWM_Start+0xfa>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a14      	ldr	r2, [pc, #80]	@ (8003ec4 <HAL_TIM_PWM_Start+0x13c>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d004      	beq.n	8003e82 <HAL_TIM_PWM_Start+0xfa>
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4a12      	ldr	r2, [pc, #72]	@ (8003ec8 <HAL_TIM_PWM_Start+0x140>)
 8003e7e:	4293      	cmp	r3, r2
 8003e80:	d111      	bne.n	8003ea6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	689b      	ldr	r3, [r3, #8]
 8003e88:	f003 0307 	and.w	r3, r3, #7
 8003e8c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2b06      	cmp	r3, #6
 8003e92:	d010      	beq.n	8003eb6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	681b      	ldr	r3, [r3, #0]
 8003e98:	681a      	ldr	r2, [r3, #0]
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	681b      	ldr	r3, [r3, #0]
 8003e9e:	f042 0201 	orr.w	r2, r2, #1
 8003ea2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ea4:	e007      	b.n	8003eb6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	681a      	ldr	r2, [r3, #0]
 8003eac:	687b      	ldr	r3, [r7, #4]
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	f042 0201 	orr.w	r2, r2, #1
 8003eb4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003eb6:	2300      	movs	r3, #0
}
 8003eb8:	4618      	mov	r0, r3
 8003eba:	3710      	adds	r7, #16
 8003ebc:	46bd      	mov	sp, r7
 8003ebe:	bd80      	pop	{r7, pc}
 8003ec0:	40012c00 	.word	0x40012c00
 8003ec4:	40000400 	.word	0x40000400
 8003ec8:	40000800 	.word	0x40000800

08003ecc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003ecc:	b580      	push	{r7, lr}
 8003ece:	b082      	sub	sp, #8
 8003ed0:	af00      	add	r7, sp, #0
 8003ed2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	691b      	ldr	r3, [r3, #16]
 8003eda:	f003 0302 	and.w	r3, r3, #2
 8003ede:	2b02      	cmp	r3, #2
 8003ee0:	d122      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	68db      	ldr	r3, [r3, #12]
 8003ee8:	f003 0302 	and.w	r3, r3, #2
 8003eec:	2b02      	cmp	r3, #2
 8003eee:	d11b      	bne.n	8003f28 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ef0:	687b      	ldr	r3, [r7, #4]
 8003ef2:	681b      	ldr	r3, [r3, #0]
 8003ef4:	f06f 0202 	mvn.w	r2, #2
 8003ef8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	2201      	movs	r2, #1
 8003efe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f00:	687b      	ldr	r3, [r7, #4]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699b      	ldr	r3, [r3, #24]
 8003f06:	f003 0303 	and.w	r3, r3, #3
 8003f0a:	2b00      	cmp	r3, #0
 8003f0c:	d003      	beq.n	8003f16 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f0e:	6878      	ldr	r0, [r7, #4]
 8003f10:	f000 fa7f 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8003f14:	e005      	b.n	8003f22 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f16:	6878      	ldr	r0, [r7, #4]
 8003f18:	f000 fa72 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f1c:	6878      	ldr	r0, [r7, #4]
 8003f1e:	f000 fa81 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	2200      	movs	r2, #0
 8003f26:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	681b      	ldr	r3, [r3, #0]
 8003f2c:	691b      	ldr	r3, [r3, #16]
 8003f2e:	f003 0304 	and.w	r3, r3, #4
 8003f32:	2b04      	cmp	r3, #4
 8003f34:	d122      	bne.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003f36:	687b      	ldr	r3, [r7, #4]
 8003f38:	681b      	ldr	r3, [r3, #0]
 8003f3a:	68db      	ldr	r3, [r3, #12]
 8003f3c:	f003 0304 	and.w	r3, r3, #4
 8003f40:	2b04      	cmp	r3, #4
 8003f42:	d11b      	bne.n	8003f7c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	f06f 0204 	mvn.w	r2, #4
 8003f4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2202      	movs	r2, #2
 8003f52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003f54:	687b      	ldr	r3, [r7, #4]
 8003f56:	681b      	ldr	r3, [r3, #0]
 8003f58:	699b      	ldr	r3, [r3, #24]
 8003f5a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d003      	beq.n	8003f6a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003f62:	6878      	ldr	r0, [r7, #4]
 8003f64:	f000 fa55 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8003f68:	e005      	b.n	8003f76 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f6a:	6878      	ldr	r0, [r7, #4]
 8003f6c:	f000 fa48 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 fa57 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	2200      	movs	r2, #0
 8003f7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	691b      	ldr	r3, [r3, #16]
 8003f82:	f003 0308 	and.w	r3, r3, #8
 8003f86:	2b08      	cmp	r3, #8
 8003f88:	d122      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	68db      	ldr	r3, [r3, #12]
 8003f90:	f003 0308 	and.w	r3, r3, #8
 8003f94:	2b08      	cmp	r3, #8
 8003f96:	d11b      	bne.n	8003fd0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f06f 0208 	mvn.w	r2, #8
 8003fa0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	2204      	movs	r2, #4
 8003fa6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	69db      	ldr	r3, [r3, #28]
 8003fae:	f003 0303 	and.w	r3, r3, #3
 8003fb2:	2b00      	cmp	r3, #0
 8003fb4:	d003      	beq.n	8003fbe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 fa2b 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8003fbc:	e005      	b.n	8003fca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fbe:	6878      	ldr	r0, [r7, #4]
 8003fc0:	f000 fa1e 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fc4:	6878      	ldr	r0, [r7, #4]
 8003fc6:	f000 fa2d 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	2200      	movs	r2, #0
 8003fce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	691b      	ldr	r3, [r3, #16]
 8003fd6:	f003 0310 	and.w	r3, r3, #16
 8003fda:	2b10      	cmp	r3, #16
 8003fdc:	d122      	bne.n	8004024 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003fde:	687b      	ldr	r3, [r7, #4]
 8003fe0:	681b      	ldr	r3, [r3, #0]
 8003fe2:	68db      	ldr	r3, [r3, #12]
 8003fe4:	f003 0310 	and.w	r3, r3, #16
 8003fe8:	2b10      	cmp	r3, #16
 8003fea:	d11b      	bne.n	8004024 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	f06f 0210 	mvn.w	r2, #16
 8003ff4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003ff6:	687b      	ldr	r3, [r7, #4]
 8003ff8:	2208      	movs	r2, #8
 8003ffa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	69db      	ldr	r3, [r3, #28]
 8004002:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8004006:	2b00      	cmp	r3, #0
 8004008:	d003      	beq.n	8004012 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800400a:	6878      	ldr	r0, [r7, #4]
 800400c:	f000 fa01 	bl	8004412 <HAL_TIM_IC_CaptureCallback>
 8004010:	e005      	b.n	800401e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004012:	6878      	ldr	r0, [r7, #4]
 8004014:	f000 f9f4 	bl	8004400 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 fa03 	bl	8004424 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	2200      	movs	r2, #0
 8004022:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	681b      	ldr	r3, [r3, #0]
 8004028:	691b      	ldr	r3, [r3, #16]
 800402a:	f003 0301 	and.w	r3, r3, #1
 800402e:	2b01      	cmp	r3, #1
 8004030:	d10e      	bne.n	8004050 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8004032:	687b      	ldr	r3, [r7, #4]
 8004034:	681b      	ldr	r3, [r3, #0]
 8004036:	68db      	ldr	r3, [r3, #12]
 8004038:	f003 0301 	and.w	r3, r3, #1
 800403c:	2b01      	cmp	r3, #1
 800403e:	d107      	bne.n	8004050 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	f06f 0201 	mvn.w	r2, #1
 8004048:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800404a:	6878      	ldr	r0, [r7, #4]
 800404c:	f000 f9cf 	bl	80043ee <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8004050:	687b      	ldr	r3, [r7, #4]
 8004052:	681b      	ldr	r3, [r3, #0]
 8004054:	691b      	ldr	r3, [r3, #16]
 8004056:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800405a:	2b80      	cmp	r3, #128	@ 0x80
 800405c:	d10e      	bne.n	800407c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	68db      	ldr	r3, [r3, #12]
 8004064:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004068:	2b80      	cmp	r3, #128	@ 0x80
 800406a:	d107      	bne.n	800407c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8004074:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8004076:	6878      	ldr	r0, [r7, #4]
 8004078:	f000 fcf1 	bl	8004a5e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	691b      	ldr	r3, [r3, #16]
 8004082:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004086:	2b40      	cmp	r3, #64	@ 0x40
 8004088:	d10e      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800408a:	687b      	ldr	r3, [r7, #4]
 800408c:	681b      	ldr	r3, [r3, #0]
 800408e:	68db      	ldr	r3, [r3, #12]
 8004090:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004094:	2b40      	cmp	r3, #64	@ 0x40
 8004096:	d107      	bne.n	80040a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	681b      	ldr	r3, [r3, #0]
 800409c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80040a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80040a2:	6878      	ldr	r0, [r7, #4]
 80040a4:	f000 f9c7 	bl	8004436 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	691b      	ldr	r3, [r3, #16]
 80040ae:	f003 0320 	and.w	r3, r3, #32
 80040b2:	2b20      	cmp	r3, #32
 80040b4:	d10e      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f003 0320 	and.w	r3, r3, #32
 80040c0:	2b20      	cmp	r3, #32
 80040c2:	d107      	bne.n	80040d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f06f 0220 	mvn.w	r2, #32
 80040cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80040ce:	6878      	ldr	r0, [r7, #4]
 80040d0:	f000 fcbc 	bl	8004a4c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80040d4:	bf00      	nop
 80040d6:	3708      	adds	r7, #8
 80040d8:	46bd      	mov	sp, r7
 80040da:	bd80      	pop	{r7, pc}

080040dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80040dc:	b580      	push	{r7, lr}
 80040de:	b086      	sub	sp, #24
 80040e0:	af00      	add	r7, sp, #0
 80040e2:	60f8      	str	r0, [r7, #12]
 80040e4:	60b9      	str	r1, [r7, #8]
 80040e6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80040e8:	2300      	movs	r3, #0
 80040ea:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80040f2:	2b01      	cmp	r3, #1
 80040f4:	d101      	bne.n	80040fa <HAL_TIM_PWM_ConfigChannel+0x1e>
 80040f6:	2302      	movs	r3, #2
 80040f8:	e0ae      	b.n	8004258 <HAL_TIM_PWM_ConfigChannel+0x17c>
 80040fa:	68fb      	ldr	r3, [r7, #12]
 80040fc:	2201      	movs	r2, #1
 80040fe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	2b0c      	cmp	r3, #12
 8004106:	f200 809f 	bhi.w	8004248 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800410a:	a201      	add	r2, pc, #4	@ (adr r2, 8004110 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800410c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004110:	08004145 	.word	0x08004145
 8004114:	08004249 	.word	0x08004249
 8004118:	08004249 	.word	0x08004249
 800411c:	08004249 	.word	0x08004249
 8004120:	08004185 	.word	0x08004185
 8004124:	08004249 	.word	0x08004249
 8004128:	08004249 	.word	0x08004249
 800412c:	08004249 	.word	0x08004249
 8004130:	080041c7 	.word	0x080041c7
 8004134:	08004249 	.word	0x08004249
 8004138:	08004249 	.word	0x08004249
 800413c:	08004249 	.word	0x08004249
 8004140:	08004207 	.word	0x08004207
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	681b      	ldr	r3, [r3, #0]
 8004148:	68b9      	ldr	r1, [r7, #8]
 800414a:	4618      	mov	r0, r3
 800414c:	f000 f9de 	bl	800450c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8004150:	68fb      	ldr	r3, [r7, #12]
 8004152:	681b      	ldr	r3, [r3, #0]
 8004154:	699a      	ldr	r2, [r3, #24]
 8004156:	68fb      	ldr	r3, [r7, #12]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f042 0208 	orr.w	r2, r2, #8
 800415e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	699a      	ldr	r2, [r3, #24]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f022 0204 	bic.w	r2, r2, #4
 800416e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	6999      	ldr	r1, [r3, #24]
 8004176:	68bb      	ldr	r3, [r7, #8]
 8004178:	691a      	ldr	r2, [r3, #16]
 800417a:	68fb      	ldr	r3, [r7, #12]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	430a      	orrs	r2, r1
 8004180:	619a      	str	r2, [r3, #24]
      break;
 8004182:	e064      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8004184:	68fb      	ldr	r3, [r7, #12]
 8004186:	681b      	ldr	r3, [r3, #0]
 8004188:	68b9      	ldr	r1, [r7, #8]
 800418a:	4618      	mov	r0, r3
 800418c:	f000 fa24 	bl	80045d8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	699a      	ldr	r2, [r3, #24]
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800419e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80041a0:	68fb      	ldr	r3, [r7, #12]
 80041a2:	681b      	ldr	r3, [r3, #0]
 80041a4:	699a      	ldr	r2, [r3, #24]
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80041ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	6999      	ldr	r1, [r3, #24]
 80041b6:	68bb      	ldr	r3, [r7, #8]
 80041b8:	691b      	ldr	r3, [r3, #16]
 80041ba:	021a      	lsls	r2, r3, #8
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	430a      	orrs	r2, r1
 80041c2:	619a      	str	r2, [r3, #24]
      break;
 80041c4:	e043      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	68b9      	ldr	r1, [r7, #8]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f000 fa6d 	bl	80046ac <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80041d2:	68fb      	ldr	r3, [r7, #12]
 80041d4:	681b      	ldr	r3, [r3, #0]
 80041d6:	69da      	ldr	r2, [r3, #28]
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f042 0208 	orr.w	r2, r2, #8
 80041e0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	69da      	ldr	r2, [r3, #28]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0204 	bic.w	r2, r2, #4
 80041f0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	69d9      	ldr	r1, [r3, #28]
 80041f8:	68bb      	ldr	r3, [r7, #8]
 80041fa:	691a      	ldr	r2, [r3, #16]
 80041fc:	68fb      	ldr	r3, [r7, #12]
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	430a      	orrs	r2, r1
 8004202:	61da      	str	r2, [r3, #28]
      break;
 8004204:	e023      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	68b9      	ldr	r1, [r7, #8]
 800420c:	4618      	mov	r0, r3
 800420e:	f000 fab7 	bl	8004780 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004212:	68fb      	ldr	r3, [r7, #12]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	69da      	ldr	r2, [r3, #28]
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8004220:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004222:	68fb      	ldr	r3, [r7, #12]
 8004224:	681b      	ldr	r3, [r3, #0]
 8004226:	69da      	ldr	r2, [r3, #28]
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8004230:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	69d9      	ldr	r1, [r3, #28]
 8004238:	68bb      	ldr	r3, [r7, #8]
 800423a:	691b      	ldr	r3, [r3, #16]
 800423c:	021a      	lsls	r2, r3, #8
 800423e:	68fb      	ldr	r3, [r7, #12]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	430a      	orrs	r2, r1
 8004244:	61da      	str	r2, [r3, #28]
      break;
 8004246:	e002      	b.n	800424e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8004248:	2301      	movs	r3, #1
 800424a:	75fb      	strb	r3, [r7, #23]
      break;
 800424c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	2200      	movs	r2, #0
 8004252:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8004256:	7dfb      	ldrb	r3, [r7, #23]
}
 8004258:	4618      	mov	r0, r3
 800425a:	3718      	adds	r7, #24
 800425c:	46bd      	mov	sp, r7
 800425e:	bd80      	pop	{r7, pc}

08004260 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004260:	b580      	push	{r7, lr}
 8004262:	b084      	sub	sp, #16
 8004264:	af00      	add	r7, sp, #0
 8004266:	6078      	str	r0, [r7, #4]
 8004268:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800426a:	2300      	movs	r3, #0
 800426c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004274:	2b01      	cmp	r3, #1
 8004276:	d101      	bne.n	800427c <HAL_TIM_ConfigClockSource+0x1c>
 8004278:	2302      	movs	r3, #2
 800427a:	e0b4      	b.n	80043e6 <HAL_TIM_ConfigClockSource+0x186>
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	2201      	movs	r2, #1
 8004280:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	2202      	movs	r2, #2
 8004288:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800428c:	687b      	ldr	r3, [r7, #4]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	689b      	ldr	r3, [r3, #8]
 8004292:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004294:	68bb      	ldr	r3, [r7, #8]
 8004296:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800429a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800429c:	68bb      	ldr	r3, [r7, #8]
 800429e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80042a2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	68ba      	ldr	r2, [r7, #8]
 80042aa:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80042ac:	683b      	ldr	r3, [r7, #0]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042b4:	d03e      	beq.n	8004334 <HAL_TIM_ConfigClockSource+0xd4>
 80042b6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80042ba:	f200 8087 	bhi.w	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042be:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042c2:	f000 8086 	beq.w	80043d2 <HAL_TIM_ConfigClockSource+0x172>
 80042c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80042ca:	d87f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042cc:	2b70      	cmp	r3, #112	@ 0x70
 80042ce:	d01a      	beq.n	8004306 <HAL_TIM_ConfigClockSource+0xa6>
 80042d0:	2b70      	cmp	r3, #112	@ 0x70
 80042d2:	d87b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042d4:	2b60      	cmp	r3, #96	@ 0x60
 80042d6:	d050      	beq.n	800437a <HAL_TIM_ConfigClockSource+0x11a>
 80042d8:	2b60      	cmp	r3, #96	@ 0x60
 80042da:	d877      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042dc:	2b50      	cmp	r3, #80	@ 0x50
 80042de:	d03c      	beq.n	800435a <HAL_TIM_ConfigClockSource+0xfa>
 80042e0:	2b50      	cmp	r3, #80	@ 0x50
 80042e2:	d873      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042e4:	2b40      	cmp	r3, #64	@ 0x40
 80042e6:	d058      	beq.n	800439a <HAL_TIM_ConfigClockSource+0x13a>
 80042e8:	2b40      	cmp	r3, #64	@ 0x40
 80042ea:	d86f      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042ec:	2b30      	cmp	r3, #48	@ 0x30
 80042ee:	d064      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 80042f0:	2b30      	cmp	r3, #48	@ 0x30
 80042f2:	d86b      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042f4:	2b20      	cmp	r3, #32
 80042f6:	d060      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 80042f8:	2b20      	cmp	r3, #32
 80042fa:	d867      	bhi.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
 80042fc:	2b00      	cmp	r3, #0
 80042fe:	d05c      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 8004300:	2b10      	cmp	r3, #16
 8004302:	d05a      	beq.n	80043ba <HAL_TIM_ConfigClockSource+0x15a>
 8004304:	e062      	b.n	80043cc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800430a:	683b      	ldr	r3, [r7, #0]
 800430c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004316:	f000 faf8 	bl	800490a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	689b      	ldr	r3, [r3, #8]
 8004320:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004322:	68bb      	ldr	r3, [r7, #8]
 8004324:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8004328:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	681b      	ldr	r3, [r3, #0]
 800432e:	68ba      	ldr	r2, [r7, #8]
 8004330:	609a      	str	r2, [r3, #8]
      break;
 8004332:	e04f      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8004338:	683b      	ldr	r3, [r7, #0]
 800433a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800433c:	683b      	ldr	r3, [r7, #0]
 800433e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8004340:	683b      	ldr	r3, [r7, #0]
 8004342:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8004344:	f000 fae1 	bl	800490a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8004348:	687b      	ldr	r3, [r7, #4]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	689a      	ldr	r2, [r3, #8]
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8004356:	609a      	str	r2, [r3, #8]
      break;
 8004358:	e03c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800435e:	683b      	ldr	r3, [r7, #0]
 8004360:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004362:	683b      	ldr	r3, [r7, #0]
 8004364:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8004366:	461a      	mov	r2, r3
 8004368:	f000 fa58 	bl	800481c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	2150      	movs	r1, #80	@ 0x50
 8004372:	4618      	mov	r0, r3
 8004374:	f000 faaf 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 8004378:	e02c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8004386:	461a      	mov	r2, r3
 8004388:	f000 fa76 	bl	8004878 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	2160      	movs	r1, #96	@ 0x60
 8004392:	4618      	mov	r0, r3
 8004394:	f000 fa9f 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 8004398:	e01c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800439e:	683b      	ldr	r3, [r7, #0]
 80043a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80043a2:	683b      	ldr	r3, [r7, #0]
 80043a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80043a6:	461a      	mov	r2, r3
 80043a8:	f000 fa38 	bl	800481c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	681b      	ldr	r3, [r3, #0]
 80043b0:	2140      	movs	r1, #64	@ 0x40
 80043b2:	4618      	mov	r0, r3
 80043b4:	f000 fa8f 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 80043b8:	e00c      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	681a      	ldr	r2, [r3, #0]
 80043be:	683b      	ldr	r3, [r7, #0]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	4619      	mov	r1, r3
 80043c4:	4610      	mov	r0, r2
 80043c6:	f000 fa86 	bl	80048d6 <TIM_ITRx_SetConfig>
      break;
 80043ca:	e003      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80043cc:	2301      	movs	r3, #1
 80043ce:	73fb      	strb	r3, [r7, #15]
      break;
 80043d0:	e000      	b.n	80043d4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80043d2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	2201      	movs	r2, #1
 80043d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	2200      	movs	r2, #0
 80043e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80043e4:	7bfb      	ldrb	r3, [r7, #15]
}
 80043e6:	4618      	mov	r0, r3
 80043e8:	3710      	adds	r7, #16
 80043ea:	46bd      	mov	sp, r7
 80043ec:	bd80      	pop	{r7, pc}

080043ee <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80043ee:	b480      	push	{r7}
 80043f0:	b083      	sub	sp, #12
 80043f2:	af00      	add	r7, sp, #0
 80043f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 80043f6:	bf00      	nop
 80043f8:	370c      	adds	r7, #12
 80043fa:	46bd      	mov	sp, r7
 80043fc:	bc80      	pop	{r7}
 80043fe:	4770      	bx	lr

08004400 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004400:	b480      	push	{r7}
 8004402:	b083      	sub	sp, #12
 8004404:	af00      	add	r7, sp, #0
 8004406:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004408:	bf00      	nop
 800440a:	370c      	adds	r7, #12
 800440c:	46bd      	mov	sp, r7
 800440e:	bc80      	pop	{r7}
 8004410:	4770      	bx	lr

08004412 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004412:	b480      	push	{r7}
 8004414:	b083      	sub	sp, #12
 8004416:	af00      	add	r7, sp, #0
 8004418:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800441a:	bf00      	nop
 800441c:	370c      	adds	r7, #12
 800441e:	46bd      	mov	sp, r7
 8004420:	bc80      	pop	{r7}
 8004422:	4770      	bx	lr

08004424 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004424:	b480      	push	{r7}
 8004426:	b083      	sub	sp, #12
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800442c:	bf00      	nop
 800442e:	370c      	adds	r7, #12
 8004430:	46bd      	mov	sp, r7
 8004432:	bc80      	pop	{r7}
 8004434:	4770      	bx	lr

08004436 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004436:	b480      	push	{r7}
 8004438:	b083      	sub	sp, #12
 800443a:	af00      	add	r7, sp, #0
 800443c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800443e:	bf00      	nop
 8004440:	370c      	adds	r7, #12
 8004442:	46bd      	mov	sp, r7
 8004444:	bc80      	pop	{r7}
 8004446:	4770      	bx	lr

08004448 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
 8004450:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	4a29      	ldr	r2, [pc, #164]	@ (8004500 <TIM_Base_SetConfig+0xb8>)
 800445c:	4293      	cmp	r3, r2
 800445e:	d00b      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004466:	d007      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004468:	687b      	ldr	r3, [r7, #4]
 800446a:	4a26      	ldr	r2, [pc, #152]	@ (8004504 <TIM_Base_SetConfig+0xbc>)
 800446c:	4293      	cmp	r3, r2
 800446e:	d003      	beq.n	8004478 <TIM_Base_SetConfig+0x30>
 8004470:	687b      	ldr	r3, [r7, #4]
 8004472:	4a25      	ldr	r2, [pc, #148]	@ (8004508 <TIM_Base_SetConfig+0xc0>)
 8004474:	4293      	cmp	r3, r2
 8004476:	d108      	bne.n	800448a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800447e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004480:	683b      	ldr	r3, [r7, #0]
 8004482:	685b      	ldr	r3, [r3, #4]
 8004484:	68fa      	ldr	r2, [r7, #12]
 8004486:	4313      	orrs	r3, r2
 8004488:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	4a1c      	ldr	r2, [pc, #112]	@ (8004500 <TIM_Base_SetConfig+0xb8>)
 800448e:	4293      	cmp	r3, r2
 8004490:	d00b      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004498:	d007      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	4a19      	ldr	r2, [pc, #100]	@ (8004504 <TIM_Base_SetConfig+0xbc>)
 800449e:	4293      	cmp	r3, r2
 80044a0:	d003      	beq.n	80044aa <TIM_Base_SetConfig+0x62>
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	4a18      	ldr	r2, [pc, #96]	@ (8004508 <TIM_Base_SetConfig+0xc0>)
 80044a6:	4293      	cmp	r3, r2
 80044a8:	d108      	bne.n	80044bc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80044b0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80044b2:	683b      	ldr	r3, [r7, #0]
 80044b4:	68db      	ldr	r3, [r3, #12]
 80044b6:	68fa      	ldr	r2, [r7, #12]
 80044b8:	4313      	orrs	r3, r2
 80044ba:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80044c2:	683b      	ldr	r3, [r7, #0]
 80044c4:	695b      	ldr	r3, [r3, #20]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80044d0:	683b      	ldr	r3, [r7, #0]
 80044d2:	689a      	ldr	r2, [r3, #8]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80044d8:	683b      	ldr	r3, [r7, #0]
 80044da:	681a      	ldr	r2, [r3, #0]
 80044dc:	687b      	ldr	r3, [r7, #4]
 80044de:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a07      	ldr	r2, [pc, #28]	@ (8004500 <TIM_Base_SetConfig+0xb8>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d103      	bne.n	80044f0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80044e8:	683b      	ldr	r3, [r7, #0]
 80044ea:	691a      	ldr	r2, [r3, #16]
 80044ec:	687b      	ldr	r3, [r7, #4]
 80044ee:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	2201      	movs	r2, #1
 80044f4:	615a      	str	r2, [r3, #20]
}
 80044f6:	bf00      	nop
 80044f8:	3714      	adds	r7, #20
 80044fa:	46bd      	mov	sp, r7
 80044fc:	bc80      	pop	{r7}
 80044fe:	4770      	bx	lr
 8004500:	40012c00 	.word	0x40012c00
 8004504:	40000400 	.word	0x40000400
 8004508:	40000800 	.word	0x40000800

0800450c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800450c:	b480      	push	{r7}
 800450e:	b087      	sub	sp, #28
 8004510:	af00      	add	r7, sp, #0
 8004512:	6078      	str	r0, [r7, #4]
 8004514:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	6a1b      	ldr	r3, [r3, #32]
 800451a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	6a1b      	ldr	r3, [r3, #32]
 8004520:	f023 0201 	bic.w	r2, r3, #1
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	685b      	ldr	r3, [r3, #4]
 800452c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004534:	68fb      	ldr	r3, [r7, #12]
 8004536:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800453a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	f023 0303 	bic.w	r3, r3, #3
 8004542:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004544:	683b      	ldr	r3, [r7, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	68fa      	ldr	r2, [r7, #12]
 800454a:	4313      	orrs	r3, r2
 800454c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800454e:	697b      	ldr	r3, [r7, #20]
 8004550:	f023 0302 	bic.w	r3, r3, #2
 8004554:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004556:	683b      	ldr	r3, [r7, #0]
 8004558:	689b      	ldr	r3, [r3, #8]
 800455a:	697a      	ldr	r2, [r7, #20]
 800455c:	4313      	orrs	r3, r2
 800455e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	4a1c      	ldr	r2, [pc, #112]	@ (80045d4 <TIM_OC1_SetConfig+0xc8>)
 8004564:	4293      	cmp	r3, r2
 8004566:	d10c      	bne.n	8004582 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004568:	697b      	ldr	r3, [r7, #20]
 800456a:	f023 0308 	bic.w	r3, r3, #8
 800456e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	68db      	ldr	r3, [r3, #12]
 8004574:	697a      	ldr	r2, [r7, #20]
 8004576:	4313      	orrs	r3, r2
 8004578:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800457a:	697b      	ldr	r3, [r7, #20]
 800457c:	f023 0304 	bic.w	r3, r3, #4
 8004580:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	4a13      	ldr	r2, [pc, #76]	@ (80045d4 <TIM_OC1_SetConfig+0xc8>)
 8004586:	4293      	cmp	r3, r2
 8004588:	d111      	bne.n	80045ae <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800458a:	693b      	ldr	r3, [r7, #16]
 800458c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004590:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004592:	693b      	ldr	r3, [r7, #16]
 8004594:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004598:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800459a:	683b      	ldr	r3, [r7, #0]
 800459c:	695b      	ldr	r3, [r3, #20]
 800459e:	693a      	ldr	r2, [r7, #16]
 80045a0:	4313      	orrs	r3, r2
 80045a2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	699b      	ldr	r3, [r3, #24]
 80045a8:	693a      	ldr	r2, [r7, #16]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	693a      	ldr	r2, [r7, #16]
 80045b2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	68fa      	ldr	r2, [r7, #12]
 80045b8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80045ba:	683b      	ldr	r3, [r7, #0]
 80045bc:	685a      	ldr	r2, [r3, #4]
 80045be:	687b      	ldr	r3, [r7, #4]
 80045c0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	697a      	ldr	r2, [r7, #20]
 80045c6:	621a      	str	r2, [r3, #32]
}
 80045c8:	bf00      	nop
 80045ca:	371c      	adds	r7, #28
 80045cc:	46bd      	mov	sp, r7
 80045ce:	bc80      	pop	{r7}
 80045d0:	4770      	bx	lr
 80045d2:	bf00      	nop
 80045d4:	40012c00 	.word	0x40012c00

080045d8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80045d8:	b480      	push	{r7}
 80045da:	b087      	sub	sp, #28
 80045dc:	af00      	add	r7, sp, #0
 80045de:	6078      	str	r0, [r7, #4]
 80045e0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80045e2:	687b      	ldr	r3, [r7, #4]
 80045e4:	6a1b      	ldr	r3, [r3, #32]
 80045e6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	6a1b      	ldr	r3, [r3, #32]
 80045ec:	f023 0210 	bic.w	r2, r3, #16
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80045f4:	687b      	ldr	r3, [r7, #4]
 80045f6:	685b      	ldr	r3, [r3, #4]
 80045f8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	699b      	ldr	r3, [r3, #24]
 80045fe:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004600:	68fb      	ldr	r3, [r7, #12]
 8004602:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004606:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004608:	68fb      	ldr	r3, [r7, #12]
 800460a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800460e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004610:	683b      	ldr	r3, [r7, #0]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	021b      	lsls	r3, r3, #8
 8004616:	68fa      	ldr	r2, [r7, #12]
 8004618:	4313      	orrs	r3, r2
 800461a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800461c:	697b      	ldr	r3, [r7, #20]
 800461e:	f023 0320 	bic.w	r3, r3, #32
 8004622:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004624:	683b      	ldr	r3, [r7, #0]
 8004626:	689b      	ldr	r3, [r3, #8]
 8004628:	011b      	lsls	r3, r3, #4
 800462a:	697a      	ldr	r2, [r7, #20]
 800462c:	4313      	orrs	r3, r2
 800462e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	4a1d      	ldr	r2, [pc, #116]	@ (80046a8 <TIM_OC2_SetConfig+0xd0>)
 8004634:	4293      	cmp	r3, r2
 8004636:	d10d      	bne.n	8004654 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004638:	697b      	ldr	r3, [r7, #20]
 800463a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800463e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004640:	683b      	ldr	r3, [r7, #0]
 8004642:	68db      	ldr	r3, [r3, #12]
 8004644:	011b      	lsls	r3, r3, #4
 8004646:	697a      	ldr	r2, [r7, #20]
 8004648:	4313      	orrs	r3, r2
 800464a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800464c:	697b      	ldr	r3, [r7, #20]
 800464e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004652:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	4a14      	ldr	r2, [pc, #80]	@ (80046a8 <TIM_OC2_SetConfig+0xd0>)
 8004658:	4293      	cmp	r3, r2
 800465a:	d113      	bne.n	8004684 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800465c:	693b      	ldr	r3, [r7, #16]
 800465e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004662:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004664:	693b      	ldr	r3, [r7, #16]
 8004666:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800466a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800466c:	683b      	ldr	r3, [r7, #0]
 800466e:	695b      	ldr	r3, [r3, #20]
 8004670:	009b      	lsls	r3, r3, #2
 8004672:	693a      	ldr	r2, [r7, #16]
 8004674:	4313      	orrs	r3, r2
 8004676:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004678:	683b      	ldr	r3, [r7, #0]
 800467a:	699b      	ldr	r3, [r3, #24]
 800467c:	009b      	lsls	r3, r3, #2
 800467e:	693a      	ldr	r2, [r7, #16]
 8004680:	4313      	orrs	r3, r2
 8004682:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	693a      	ldr	r2, [r7, #16]
 8004688:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800468a:	687b      	ldr	r3, [r7, #4]
 800468c:	68fa      	ldr	r2, [r7, #12]
 800468e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004690:	683b      	ldr	r3, [r7, #0]
 8004692:	685a      	ldr	r2, [r3, #4]
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	697a      	ldr	r2, [r7, #20]
 800469c:	621a      	str	r2, [r3, #32]
}
 800469e:	bf00      	nop
 80046a0:	371c      	adds	r7, #28
 80046a2:	46bd      	mov	sp, r7
 80046a4:	bc80      	pop	{r7}
 80046a6:	4770      	bx	lr
 80046a8:	40012c00 	.word	0x40012c00

080046ac <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80046ac:	b480      	push	{r7}
 80046ae:	b087      	sub	sp, #28
 80046b0:	af00      	add	r7, sp, #0
 80046b2:	6078      	str	r0, [r7, #4]
 80046b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	6a1b      	ldr	r3, [r3, #32]
 80046ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6a1b      	ldr	r3, [r3, #32]
 80046c0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80046c4:	687b      	ldr	r3, [r7, #4]
 80046c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	685b      	ldr	r3, [r3, #4]
 80046cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	69db      	ldr	r3, [r3, #28]
 80046d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80046d4:	68fb      	ldr	r3, [r7, #12]
 80046d6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80046da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	f023 0303 	bic.w	r3, r3, #3
 80046e2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80046e4:	683b      	ldr	r3, [r7, #0]
 80046e6:	681b      	ldr	r3, [r3, #0]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	4313      	orrs	r3, r2
 80046ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80046ee:	697b      	ldr	r3, [r7, #20]
 80046f0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80046f4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80046f6:	683b      	ldr	r3, [r7, #0]
 80046f8:	689b      	ldr	r3, [r3, #8]
 80046fa:	021b      	lsls	r3, r3, #8
 80046fc:	697a      	ldr	r2, [r7, #20]
 80046fe:	4313      	orrs	r3, r2
 8004700:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	4a1d      	ldr	r2, [pc, #116]	@ (800477c <TIM_OC3_SetConfig+0xd0>)
 8004706:	4293      	cmp	r3, r2
 8004708:	d10d      	bne.n	8004726 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800470a:	697b      	ldr	r3, [r7, #20]
 800470c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004710:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004712:	683b      	ldr	r3, [r7, #0]
 8004714:	68db      	ldr	r3, [r3, #12]
 8004716:	021b      	lsls	r3, r3, #8
 8004718:	697a      	ldr	r2, [r7, #20]
 800471a:	4313      	orrs	r3, r2
 800471c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800471e:	697b      	ldr	r3, [r7, #20]
 8004720:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004724:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004726:	687b      	ldr	r3, [r7, #4]
 8004728:	4a14      	ldr	r2, [pc, #80]	@ (800477c <TIM_OC3_SetConfig+0xd0>)
 800472a:	4293      	cmp	r3, r2
 800472c:	d113      	bne.n	8004756 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800472e:	693b      	ldr	r3, [r7, #16]
 8004730:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004734:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004736:	693b      	ldr	r3, [r7, #16]
 8004738:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800473c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800473e:	683b      	ldr	r3, [r7, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	011b      	lsls	r3, r3, #4
 8004744:	693a      	ldr	r2, [r7, #16]
 8004746:	4313      	orrs	r3, r2
 8004748:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800474a:	683b      	ldr	r3, [r7, #0]
 800474c:	699b      	ldr	r3, [r3, #24]
 800474e:	011b      	lsls	r3, r3, #4
 8004750:	693a      	ldr	r2, [r7, #16]
 8004752:	4313      	orrs	r3, r2
 8004754:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	693a      	ldr	r2, [r7, #16]
 800475a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	68fa      	ldr	r2, [r7, #12]
 8004760:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004762:	683b      	ldr	r3, [r7, #0]
 8004764:	685a      	ldr	r2, [r3, #4]
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	697a      	ldr	r2, [r7, #20]
 800476e:	621a      	str	r2, [r3, #32]
}
 8004770:	bf00      	nop
 8004772:	371c      	adds	r7, #28
 8004774:	46bd      	mov	sp, r7
 8004776:	bc80      	pop	{r7}
 8004778:	4770      	bx	lr
 800477a:	bf00      	nop
 800477c:	40012c00 	.word	0x40012c00

08004780 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004780:	b480      	push	{r7}
 8004782:	b087      	sub	sp, #28
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
 8004788:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	6a1b      	ldr	r3, [r3, #32]
 800478e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	6a1b      	ldr	r3, [r3, #32]
 8004794:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8004798:	687b      	ldr	r3, [r7, #4]
 800479a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	685b      	ldr	r3, [r3, #4]
 80047a0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	69db      	ldr	r3, [r3, #28]
 80047a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80047a8:	68fb      	ldr	r3, [r7, #12]
 80047aa:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80047ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80047b6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80047b8:	683b      	ldr	r3, [r7, #0]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	021b      	lsls	r3, r3, #8
 80047be:	68fa      	ldr	r2, [r7, #12]
 80047c0:	4313      	orrs	r3, r2
 80047c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80047ca:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80047cc:	683b      	ldr	r3, [r7, #0]
 80047ce:	689b      	ldr	r3, [r3, #8]
 80047d0:	031b      	lsls	r3, r3, #12
 80047d2:	693a      	ldr	r2, [r7, #16]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	4a0f      	ldr	r2, [pc, #60]	@ (8004818 <TIM_OC4_SetConfig+0x98>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d109      	bne.n	80047f4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80047e0:	697b      	ldr	r3, [r7, #20]
 80047e2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80047e6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80047e8:	683b      	ldr	r3, [r7, #0]
 80047ea:	695b      	ldr	r3, [r3, #20]
 80047ec:	019b      	lsls	r3, r3, #6
 80047ee:	697a      	ldr	r2, [r7, #20]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	697a      	ldr	r2, [r7, #20]
 80047f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	68fa      	ldr	r2, [r7, #12]
 80047fe:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004800:	683b      	ldr	r3, [r7, #0]
 8004802:	685a      	ldr	r2, [r3, #4]
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	693a      	ldr	r2, [r7, #16]
 800480c:	621a      	str	r2, [r3, #32]
}
 800480e:	bf00      	nop
 8004810:	371c      	adds	r7, #28
 8004812:	46bd      	mov	sp, r7
 8004814:	bc80      	pop	{r7}
 8004816:	4770      	bx	lr
 8004818:	40012c00 	.word	0x40012c00

0800481c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800481c:	b480      	push	{r7}
 800481e:	b087      	sub	sp, #28
 8004820:	af00      	add	r7, sp, #0
 8004822:	60f8      	str	r0, [r7, #12]
 8004824:	60b9      	str	r1, [r7, #8]
 8004826:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004828:	68fb      	ldr	r3, [r7, #12]
 800482a:	6a1b      	ldr	r3, [r3, #32]
 800482c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800482e:	68fb      	ldr	r3, [r7, #12]
 8004830:	6a1b      	ldr	r3, [r3, #32]
 8004832:	f023 0201 	bic.w	r2, r3, #1
 8004836:	68fb      	ldr	r3, [r7, #12]
 8004838:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	699b      	ldr	r3, [r3, #24]
 800483e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004840:	693b      	ldr	r3, [r7, #16]
 8004842:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004846:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	011b      	lsls	r3, r3, #4
 800484c:	693a      	ldr	r2, [r7, #16]
 800484e:	4313      	orrs	r3, r2
 8004850:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004852:	697b      	ldr	r3, [r7, #20]
 8004854:	f023 030a 	bic.w	r3, r3, #10
 8004858:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800485a:	697a      	ldr	r2, [r7, #20]
 800485c:	68bb      	ldr	r3, [r7, #8]
 800485e:	4313      	orrs	r3, r2
 8004860:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004862:	68fb      	ldr	r3, [r7, #12]
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004868:	68fb      	ldr	r3, [r7, #12]
 800486a:	697a      	ldr	r2, [r7, #20]
 800486c:	621a      	str	r2, [r3, #32]
}
 800486e:	bf00      	nop
 8004870:	371c      	adds	r7, #28
 8004872:	46bd      	mov	sp, r7
 8004874:	bc80      	pop	{r7}
 8004876:	4770      	bx	lr

08004878 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004878:	b480      	push	{r7}
 800487a:	b087      	sub	sp, #28
 800487c:	af00      	add	r7, sp, #0
 800487e:	60f8      	str	r0, [r7, #12]
 8004880:	60b9      	str	r1, [r7, #8]
 8004882:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004884:	68fb      	ldr	r3, [r7, #12]
 8004886:	6a1b      	ldr	r3, [r3, #32]
 8004888:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	6a1b      	ldr	r3, [r3, #32]
 800488e:	f023 0210 	bic.w	r2, r3, #16
 8004892:	68fb      	ldr	r3, [r7, #12]
 8004894:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	699b      	ldr	r3, [r3, #24]
 800489a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800489c:	693b      	ldr	r3, [r7, #16]
 800489e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80048a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	031b      	lsls	r3, r3, #12
 80048a8:	693a      	ldr	r2, [r7, #16]
 80048aa:	4313      	orrs	r3, r2
 80048ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80048ae:	697b      	ldr	r3, [r7, #20]
 80048b0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80048b4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80048b6:	68bb      	ldr	r3, [r7, #8]
 80048b8:	011b      	lsls	r3, r3, #4
 80048ba:	697a      	ldr	r2, [r7, #20]
 80048bc:	4313      	orrs	r3, r2
 80048be:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	693a      	ldr	r2, [r7, #16]
 80048c4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80048c6:	68fb      	ldr	r3, [r7, #12]
 80048c8:	697a      	ldr	r2, [r7, #20]
 80048ca:	621a      	str	r2, [r3, #32]
}
 80048cc:	bf00      	nop
 80048ce:	371c      	adds	r7, #28
 80048d0:	46bd      	mov	sp, r7
 80048d2:	bc80      	pop	{r7}
 80048d4:	4770      	bx	lr

080048d6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80048d6:	b480      	push	{r7}
 80048d8:	b085      	sub	sp, #20
 80048da:	af00      	add	r7, sp, #0
 80048dc:	6078      	str	r0, [r7, #4]
 80048de:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	689b      	ldr	r3, [r3, #8]
 80048e4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80048e6:	68fb      	ldr	r3, [r7, #12]
 80048e8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80048ec:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80048ee:	683a      	ldr	r2, [r7, #0]
 80048f0:	68fb      	ldr	r3, [r7, #12]
 80048f2:	4313      	orrs	r3, r2
 80048f4:	f043 0307 	orr.w	r3, r3, #7
 80048f8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	68fa      	ldr	r2, [r7, #12]
 80048fe:	609a      	str	r2, [r3, #8]
}
 8004900:	bf00      	nop
 8004902:	3714      	adds	r7, #20
 8004904:	46bd      	mov	sp, r7
 8004906:	bc80      	pop	{r7}
 8004908:	4770      	bx	lr

0800490a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800490a:	b480      	push	{r7}
 800490c:	b087      	sub	sp, #28
 800490e:	af00      	add	r7, sp, #0
 8004910:	60f8      	str	r0, [r7, #12]
 8004912:	60b9      	str	r1, [r7, #8]
 8004914:	607a      	str	r2, [r7, #4]
 8004916:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	689b      	ldr	r3, [r3, #8]
 800491c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800491e:	697b      	ldr	r3, [r7, #20]
 8004920:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004924:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004926:	683b      	ldr	r3, [r7, #0]
 8004928:	021a      	lsls	r2, r3, #8
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	431a      	orrs	r2, r3
 800492e:	68bb      	ldr	r3, [r7, #8]
 8004930:	4313      	orrs	r3, r2
 8004932:	697a      	ldr	r2, [r7, #20]
 8004934:	4313      	orrs	r3, r2
 8004936:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004938:	68fb      	ldr	r3, [r7, #12]
 800493a:	697a      	ldr	r2, [r7, #20]
 800493c:	609a      	str	r2, [r3, #8]
}
 800493e:	bf00      	nop
 8004940:	371c      	adds	r7, #28
 8004942:	46bd      	mov	sp, r7
 8004944:	bc80      	pop	{r7}
 8004946:	4770      	bx	lr

08004948 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004948:	b480      	push	{r7}
 800494a:	b087      	sub	sp, #28
 800494c:	af00      	add	r7, sp, #0
 800494e:	60f8      	str	r0, [r7, #12]
 8004950:	60b9      	str	r1, [r7, #8]
 8004952:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004954:	68bb      	ldr	r3, [r7, #8]
 8004956:	f003 031f 	and.w	r3, r3, #31
 800495a:	2201      	movs	r2, #1
 800495c:	fa02 f303 	lsl.w	r3, r2, r3
 8004960:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1a      	ldr	r2, [r3, #32]
 8004966:	697b      	ldr	r3, [r7, #20]
 8004968:	43db      	mvns	r3, r3
 800496a:	401a      	ands	r2, r3
 800496c:	68fb      	ldr	r3, [r7, #12]
 800496e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004970:	68fb      	ldr	r3, [r7, #12]
 8004972:	6a1a      	ldr	r2, [r3, #32]
 8004974:	68bb      	ldr	r3, [r7, #8]
 8004976:	f003 031f 	and.w	r3, r3, #31
 800497a:	6879      	ldr	r1, [r7, #4]
 800497c:	fa01 f303 	lsl.w	r3, r1, r3
 8004980:	431a      	orrs	r2, r3
 8004982:	68fb      	ldr	r3, [r7, #12]
 8004984:	621a      	str	r2, [r3, #32]
}
 8004986:	bf00      	nop
 8004988:	371c      	adds	r7, #28
 800498a:	46bd      	mov	sp, r7
 800498c:	bc80      	pop	{r7}
 800498e:	4770      	bx	lr

08004990 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004990:	b480      	push	{r7}
 8004992:	b085      	sub	sp, #20
 8004994:	af00      	add	r7, sp, #0
 8004996:	6078      	str	r0, [r7, #4]
 8004998:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800499a:	687b      	ldr	r3, [r7, #4]
 800499c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80049a0:	2b01      	cmp	r3, #1
 80049a2:	d101      	bne.n	80049a8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80049a4:	2302      	movs	r3, #2
 80049a6:	e046      	b.n	8004a36 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	2201      	movs	r2, #1
 80049ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80049b0:	687b      	ldr	r3, [r7, #4]
 80049b2:	2202      	movs	r2, #2
 80049b4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	685b      	ldr	r3, [r3, #4]
 80049be:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	689b      	ldr	r3, [r3, #8]
 80049c6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80049c8:	68fb      	ldr	r3, [r7, #12]
 80049ca:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80049ce:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80049d0:	683b      	ldr	r3, [r7, #0]
 80049d2:	681b      	ldr	r3, [r3, #0]
 80049d4:	68fa      	ldr	r2, [r7, #12]
 80049d6:	4313      	orrs	r3, r2
 80049d8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	681b      	ldr	r3, [r3, #0]
 80049de:	68fa      	ldr	r2, [r7, #12]
 80049e0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	681b      	ldr	r3, [r3, #0]
 80049e6:	4a16      	ldr	r2, [pc, #88]	@ (8004a40 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80049e8:	4293      	cmp	r3, r2
 80049ea:	d00e      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049ec:	687b      	ldr	r3, [r7, #4]
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80049f4:	d009      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80049f6:	687b      	ldr	r3, [r7, #4]
 80049f8:	681b      	ldr	r3, [r3, #0]
 80049fa:	4a12      	ldr	r2, [pc, #72]	@ (8004a44 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80049fc:	4293      	cmp	r3, r2
 80049fe:	d004      	beq.n	8004a0a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	4a10      	ldr	r2, [pc, #64]	@ (8004a48 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004a06:	4293      	cmp	r3, r2
 8004a08:	d10c      	bne.n	8004a24 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004a0a:	68bb      	ldr	r3, [r7, #8]
 8004a0c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004a10:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004a12:	683b      	ldr	r3, [r7, #0]
 8004a14:	685b      	ldr	r3, [r3, #4]
 8004a16:	68ba      	ldr	r2, [r7, #8]
 8004a18:	4313      	orrs	r3, r2
 8004a1a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	68ba      	ldr	r2, [r7, #8]
 8004a22:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004a24:	687b      	ldr	r3, [r7, #4]
 8004a26:	2201      	movs	r2, #1
 8004a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	2200      	movs	r2, #0
 8004a30:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004a34:	2300      	movs	r3, #0
}
 8004a36:	4618      	mov	r0, r3
 8004a38:	3714      	adds	r7, #20
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	bc80      	pop	{r7}
 8004a3e:	4770      	bx	lr
 8004a40:	40012c00 	.word	0x40012c00
 8004a44:	40000400 	.word	0x40000400
 8004a48:	40000800 	.word	0x40000800

08004a4c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	b083      	sub	sp, #12
 8004a50:	af00      	add	r7, sp, #0
 8004a52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004a54:	bf00      	nop
 8004a56:	370c      	adds	r7, #12
 8004a58:	46bd      	mov	sp, r7
 8004a5a:	bc80      	pop	{r7}
 8004a5c:	4770      	bx	lr

08004a5e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004a5e:	b480      	push	{r7}
 8004a60:	b083      	sub	sp, #12
 8004a62:	af00      	add	r7, sp, #0
 8004a64:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004a66:	bf00      	nop
 8004a68:	370c      	adds	r7, #12
 8004a6a:	46bd      	mov	sp, r7
 8004a6c:	bc80      	pop	{r7}
 8004a6e:	4770      	bx	lr

08004a70 <cos>:
 8004a70:	b530      	push	{r4, r5, lr}
 8004a72:	4d20      	ldr	r5, [pc, #128]	@ (8004af4 <cos+0x84>)
 8004a74:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004a78:	42ac      	cmp	r4, r5
 8004a7a:	4602      	mov	r2, r0
 8004a7c:	460b      	mov	r3, r1
 8004a7e:	b087      	sub	sp, #28
 8004a80:	d806      	bhi.n	8004a90 <cos+0x20>
 8004a82:	2200      	movs	r2, #0
 8004a84:	2300      	movs	r3, #0
 8004a86:	b007      	add	sp, #28
 8004a88:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8004a8c:	f000 b8a8 	b.w	8004be0 <__kernel_cos>
 8004a90:	4d19      	ldr	r5, [pc, #100]	@ (8004af8 <cos+0x88>)
 8004a92:	42ac      	cmp	r4, r5
 8004a94:	d903      	bls.n	8004a9e <cos+0x2e>
 8004a96:	f7fb fb5f 	bl	8000158 <__aeabi_dsub>
 8004a9a:	b007      	add	sp, #28
 8004a9c:	bd30      	pop	{r4, r5, pc}
 8004a9e:	aa02      	add	r2, sp, #8
 8004aa0:	f000 fc16 	bl	80052d0 <__ieee754_rem_pio2>
 8004aa4:	f000 0003 	and.w	r0, r0, #3
 8004aa8:	2801      	cmp	r0, #1
 8004aaa:	d009      	beq.n	8004ac0 <cos+0x50>
 8004aac:	2802      	cmp	r0, #2
 8004aae:	d011      	beq.n	8004ad4 <cos+0x64>
 8004ab0:	b9b8      	cbnz	r0, 8004ae2 <cos+0x72>
 8004ab2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ab6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aba:	f000 f891 	bl	8004be0 <__kernel_cos>
 8004abe:	e7ec      	b.n	8004a9a <cos+0x2a>
 8004ac0:	9000      	str	r0, [sp, #0]
 8004ac2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ac6:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004aca:	f000 f949 	bl	8004d60 <__kernel_sin>
 8004ace:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004ad2:	e7e2      	b.n	8004a9a <cos+0x2a>
 8004ad4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004ad8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004adc:	f000 f880 	bl	8004be0 <__kernel_cos>
 8004ae0:	e7f5      	b.n	8004ace <cos+0x5e>
 8004ae2:	2301      	movs	r3, #1
 8004ae4:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004ae8:	9300      	str	r3, [sp, #0]
 8004aea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004aee:	f000 f937 	bl	8004d60 <__kernel_sin>
 8004af2:	e7d2      	b.n	8004a9a <cos+0x2a>
 8004af4:	3fe921fb 	.word	0x3fe921fb
 8004af8:	7fefffff 	.word	0x7fefffff

08004afc <sin>:
 8004afc:	b530      	push	{r4, r5, lr}
 8004afe:	4d20      	ldr	r5, [pc, #128]	@ (8004b80 <sin+0x84>)
 8004b00:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004b04:	42ac      	cmp	r4, r5
 8004b06:	4602      	mov	r2, r0
 8004b08:	460b      	mov	r3, r1
 8004b0a:	b087      	sub	sp, #28
 8004b0c:	d806      	bhi.n	8004b1c <sin+0x20>
 8004b0e:	2300      	movs	r3, #0
 8004b10:	2200      	movs	r2, #0
 8004b12:	9300      	str	r3, [sp, #0]
 8004b14:	2300      	movs	r3, #0
 8004b16:	f000 f923 	bl	8004d60 <__kernel_sin>
 8004b1a:	e004      	b.n	8004b26 <sin+0x2a>
 8004b1c:	4d19      	ldr	r5, [pc, #100]	@ (8004b84 <sin+0x88>)
 8004b1e:	42ac      	cmp	r4, r5
 8004b20:	d903      	bls.n	8004b2a <sin+0x2e>
 8004b22:	f7fb fb19 	bl	8000158 <__aeabi_dsub>
 8004b26:	b007      	add	sp, #28
 8004b28:	bd30      	pop	{r4, r5, pc}
 8004b2a:	aa02      	add	r2, sp, #8
 8004b2c:	f000 fbd0 	bl	80052d0 <__ieee754_rem_pio2>
 8004b30:	f000 0003 	and.w	r0, r0, #3
 8004b34:	2801      	cmp	r0, #1
 8004b36:	d009      	beq.n	8004b4c <sin+0x50>
 8004b38:	2802      	cmp	r0, #2
 8004b3a:	d00e      	beq.n	8004b5a <sin+0x5e>
 8004b3c:	b9c0      	cbnz	r0, 8004b70 <sin+0x74>
 8004b3e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b42:	2301      	movs	r3, #1
 8004b44:	9300      	str	r3, [sp, #0]
 8004b46:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b4a:	e7e4      	b.n	8004b16 <sin+0x1a>
 8004b4c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b50:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b54:	f000 f844 	bl	8004be0 <__kernel_cos>
 8004b58:	e7e5      	b.n	8004b26 <sin+0x2a>
 8004b5a:	2301      	movs	r3, #1
 8004b5c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b60:	9300      	str	r3, [sp, #0]
 8004b62:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b66:	f000 f8fb 	bl	8004d60 <__kernel_sin>
 8004b6a:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8004b6e:	e7da      	b.n	8004b26 <sin+0x2a>
 8004b70:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004b74:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004b78:	f000 f832 	bl	8004be0 <__kernel_cos>
 8004b7c:	e7f5      	b.n	8004b6a <sin+0x6e>
 8004b7e:	bf00      	nop
 8004b80:	3fe921fb 	.word	0x3fe921fb
 8004b84:	7fefffff 	.word	0x7fefffff

08004b88 <tan>:
 8004b88:	b530      	push	{r4, r5, lr}
 8004b8a:	4d12      	ldr	r5, [pc, #72]	@ (8004bd4 <tan+0x4c>)
 8004b8c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8004b90:	42ac      	cmp	r4, r5
 8004b92:	4602      	mov	r2, r0
 8004b94:	460b      	mov	r3, r1
 8004b96:	b087      	sub	sp, #28
 8004b98:	d806      	bhi.n	8004ba8 <tan+0x20>
 8004b9a:	2301      	movs	r3, #1
 8004b9c:	2200      	movs	r2, #0
 8004b9e:	9300      	str	r3, [sp, #0]
 8004ba0:	2300      	movs	r3, #0
 8004ba2:	f000 f995 	bl	8004ed0 <__kernel_tan>
 8004ba6:	e004      	b.n	8004bb2 <tan+0x2a>
 8004ba8:	4d0b      	ldr	r5, [pc, #44]	@ (8004bd8 <tan+0x50>)
 8004baa:	42ac      	cmp	r4, r5
 8004bac:	d903      	bls.n	8004bb6 <tan+0x2e>
 8004bae:	f7fb fad3 	bl	8000158 <__aeabi_dsub>
 8004bb2:	b007      	add	sp, #28
 8004bb4:	bd30      	pop	{r4, r5, pc}
 8004bb6:	aa02      	add	r2, sp, #8
 8004bb8:	f000 fb8a 	bl	80052d0 <__ieee754_rem_pio2>
 8004bbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8004bc0:	0040      	lsls	r0, r0, #1
 8004bc2:	f000 0002 	and.w	r0, r0, #2
 8004bc6:	f1c0 0001 	rsb	r0, r0, #1
 8004bca:	9000      	str	r0, [sp, #0]
 8004bcc:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004bd0:	e7e7      	b.n	8004ba2 <tan+0x1a>
 8004bd2:	bf00      	nop
 8004bd4:	3fe921fb 	.word	0x3fe921fb
 8004bd8:	7fefffff 	.word	0x7fefffff
 8004bdc:	00000000 	.word	0x00000000

08004be0 <__kernel_cos>:
 8004be0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004be4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004be8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8004bec:	4680      	mov	r8, r0
 8004bee:	4689      	mov	r9, r1
 8004bf0:	e9cd 2300 	strd	r2, r3, [sp]
 8004bf4:	d204      	bcs.n	8004c00 <__kernel_cos+0x20>
 8004bf6:	f7fb ff01 	bl	80009fc <__aeabi_d2iz>
 8004bfa:	2800      	cmp	r0, #0
 8004bfc:	f000 8086 	beq.w	8004d0c <__kernel_cos+0x12c>
 8004c00:	4642      	mov	r2, r8
 8004c02:	464b      	mov	r3, r9
 8004c04:	4640      	mov	r0, r8
 8004c06:	4649      	mov	r1, r9
 8004c08:	f7fb fc5e 	bl	80004c8 <__aeabi_dmul>
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	4b4e      	ldr	r3, [pc, #312]	@ (8004d48 <__kernel_cos+0x168>)
 8004c10:	4604      	mov	r4, r0
 8004c12:	460d      	mov	r5, r1
 8004c14:	f7fb fc58 	bl	80004c8 <__aeabi_dmul>
 8004c18:	a33f      	add	r3, pc, #252	@ (adr r3, 8004d18 <__kernel_cos+0x138>)
 8004c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c1e:	4682      	mov	sl, r0
 8004c20:	468b      	mov	fp, r1
 8004c22:	4620      	mov	r0, r4
 8004c24:	4629      	mov	r1, r5
 8004c26:	f7fb fc4f 	bl	80004c8 <__aeabi_dmul>
 8004c2a:	a33d      	add	r3, pc, #244	@ (adr r3, 8004d20 <__kernel_cos+0x140>)
 8004c2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c30:	f7fb fa94 	bl	800015c <__adddf3>
 8004c34:	4622      	mov	r2, r4
 8004c36:	462b      	mov	r3, r5
 8004c38:	f7fb fc46 	bl	80004c8 <__aeabi_dmul>
 8004c3c:	a33a      	add	r3, pc, #232	@ (adr r3, 8004d28 <__kernel_cos+0x148>)
 8004c3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c42:	f7fb fa89 	bl	8000158 <__aeabi_dsub>
 8004c46:	4622      	mov	r2, r4
 8004c48:	462b      	mov	r3, r5
 8004c4a:	f7fb fc3d 	bl	80004c8 <__aeabi_dmul>
 8004c4e:	a338      	add	r3, pc, #224	@ (adr r3, 8004d30 <__kernel_cos+0x150>)
 8004c50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c54:	f7fb fa82 	bl	800015c <__adddf3>
 8004c58:	4622      	mov	r2, r4
 8004c5a:	462b      	mov	r3, r5
 8004c5c:	f7fb fc34 	bl	80004c8 <__aeabi_dmul>
 8004c60:	a335      	add	r3, pc, #212	@ (adr r3, 8004d38 <__kernel_cos+0x158>)
 8004c62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c66:	f7fb fa77 	bl	8000158 <__aeabi_dsub>
 8004c6a:	4622      	mov	r2, r4
 8004c6c:	462b      	mov	r3, r5
 8004c6e:	f7fb fc2b 	bl	80004c8 <__aeabi_dmul>
 8004c72:	a333      	add	r3, pc, #204	@ (adr r3, 8004d40 <__kernel_cos+0x160>)
 8004c74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c78:	f7fb fa70 	bl	800015c <__adddf3>
 8004c7c:	4622      	mov	r2, r4
 8004c7e:	462b      	mov	r3, r5
 8004c80:	f7fb fc22 	bl	80004c8 <__aeabi_dmul>
 8004c84:	4622      	mov	r2, r4
 8004c86:	462b      	mov	r3, r5
 8004c88:	f7fb fc1e 	bl	80004c8 <__aeabi_dmul>
 8004c8c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004c90:	4604      	mov	r4, r0
 8004c92:	460d      	mov	r5, r1
 8004c94:	4640      	mov	r0, r8
 8004c96:	4649      	mov	r1, r9
 8004c98:	f7fb fc16 	bl	80004c8 <__aeabi_dmul>
 8004c9c:	460b      	mov	r3, r1
 8004c9e:	4602      	mov	r2, r0
 8004ca0:	4629      	mov	r1, r5
 8004ca2:	4620      	mov	r0, r4
 8004ca4:	f7fb fa58 	bl	8000158 <__aeabi_dsub>
 8004ca8:	4b28      	ldr	r3, [pc, #160]	@ (8004d4c <__kernel_cos+0x16c>)
 8004caa:	4680      	mov	r8, r0
 8004cac:	429e      	cmp	r6, r3
 8004cae:	4689      	mov	r9, r1
 8004cb0:	d80e      	bhi.n	8004cd0 <__kernel_cos+0xf0>
 8004cb2:	4602      	mov	r2, r0
 8004cb4:	460b      	mov	r3, r1
 8004cb6:	4650      	mov	r0, sl
 8004cb8:	4659      	mov	r1, fp
 8004cba:	f7fb fa4d 	bl	8000158 <__aeabi_dsub>
 8004cbe:	4602      	mov	r2, r0
 8004cc0:	2000      	movs	r0, #0
 8004cc2:	460b      	mov	r3, r1
 8004cc4:	4922      	ldr	r1, [pc, #136]	@ (8004d50 <__kernel_cos+0x170>)
 8004cc6:	f7fb fa47 	bl	8000158 <__aeabi_dsub>
 8004cca:	b003      	add	sp, #12
 8004ccc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004cd0:	2400      	movs	r4, #0
 8004cd2:	4b20      	ldr	r3, [pc, #128]	@ (8004d54 <__kernel_cos+0x174>)
 8004cd4:	4622      	mov	r2, r4
 8004cd6:	429e      	cmp	r6, r3
 8004cd8:	bf8c      	ite	hi
 8004cda:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004d58 <__kernel_cos+0x178>)
 8004cdc:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 8004ce0:	462b      	mov	r3, r5
 8004ce2:	2000      	movs	r0, #0
 8004ce4:	491a      	ldr	r1, [pc, #104]	@ (8004d50 <__kernel_cos+0x170>)
 8004ce6:	f7fb fa37 	bl	8000158 <__aeabi_dsub>
 8004cea:	4622      	mov	r2, r4
 8004cec:	4606      	mov	r6, r0
 8004cee:	460f      	mov	r7, r1
 8004cf0:	462b      	mov	r3, r5
 8004cf2:	4650      	mov	r0, sl
 8004cf4:	4659      	mov	r1, fp
 8004cf6:	f7fb fa2f 	bl	8000158 <__aeabi_dsub>
 8004cfa:	4642      	mov	r2, r8
 8004cfc:	464b      	mov	r3, r9
 8004cfe:	f7fb fa2b 	bl	8000158 <__aeabi_dsub>
 8004d02:	4602      	mov	r2, r0
 8004d04:	460b      	mov	r3, r1
 8004d06:	4630      	mov	r0, r6
 8004d08:	4639      	mov	r1, r7
 8004d0a:	e7dc      	b.n	8004cc6 <__kernel_cos+0xe6>
 8004d0c:	2000      	movs	r0, #0
 8004d0e:	4910      	ldr	r1, [pc, #64]	@ (8004d50 <__kernel_cos+0x170>)
 8004d10:	e7db      	b.n	8004cca <__kernel_cos+0xea>
 8004d12:	bf00      	nop
 8004d14:	f3af 8000 	nop.w
 8004d18:	be8838d4 	.word	0xbe8838d4
 8004d1c:	bda8fae9 	.word	0xbda8fae9
 8004d20:	bdb4b1c4 	.word	0xbdb4b1c4
 8004d24:	3e21ee9e 	.word	0x3e21ee9e
 8004d28:	809c52ad 	.word	0x809c52ad
 8004d2c:	3e927e4f 	.word	0x3e927e4f
 8004d30:	19cb1590 	.word	0x19cb1590
 8004d34:	3efa01a0 	.word	0x3efa01a0
 8004d38:	16c15177 	.word	0x16c15177
 8004d3c:	3f56c16c 	.word	0x3f56c16c
 8004d40:	5555554c 	.word	0x5555554c
 8004d44:	3fa55555 	.word	0x3fa55555
 8004d48:	3fe00000 	.word	0x3fe00000
 8004d4c:	3fd33332 	.word	0x3fd33332
 8004d50:	3ff00000 	.word	0x3ff00000
 8004d54:	3fe90000 	.word	0x3fe90000
 8004d58:	3fd20000 	.word	0x3fd20000
 8004d5c:	00000000 	.word	0x00000000

08004d60 <__kernel_sin>:
 8004d60:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d64:	461f      	mov	r7, r3
 8004d66:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004d6a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 8004d6e:	4604      	mov	r4, r0
 8004d70:	460d      	mov	r5, r1
 8004d72:	4616      	mov	r6, r2
 8004d74:	b085      	sub	sp, #20
 8004d76:	d203      	bcs.n	8004d80 <__kernel_sin+0x20>
 8004d78:	f7fb fe40 	bl	80009fc <__aeabi_d2iz>
 8004d7c:	2800      	cmp	r0, #0
 8004d7e:	d051      	beq.n	8004e24 <__kernel_sin+0xc4>
 8004d80:	4622      	mov	r2, r4
 8004d82:	462b      	mov	r3, r5
 8004d84:	4620      	mov	r0, r4
 8004d86:	4629      	mov	r1, r5
 8004d88:	f7fb fb9e 	bl	80004c8 <__aeabi_dmul>
 8004d8c:	4682      	mov	sl, r0
 8004d8e:	468b      	mov	fp, r1
 8004d90:	4602      	mov	r2, r0
 8004d92:	460b      	mov	r3, r1
 8004d94:	4620      	mov	r0, r4
 8004d96:	4629      	mov	r1, r5
 8004d98:	f7fb fb96 	bl	80004c8 <__aeabi_dmul>
 8004d9c:	a33e      	add	r3, pc, #248	@ (adr r3, 8004e98 <__kernel_sin+0x138>)
 8004d9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004da2:	4680      	mov	r8, r0
 8004da4:	4689      	mov	r9, r1
 8004da6:	4650      	mov	r0, sl
 8004da8:	4659      	mov	r1, fp
 8004daa:	f7fb fb8d 	bl	80004c8 <__aeabi_dmul>
 8004dae:	a33c      	add	r3, pc, #240	@ (adr r3, 8004ea0 <__kernel_sin+0x140>)
 8004db0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004db4:	f7fb f9d0 	bl	8000158 <__aeabi_dsub>
 8004db8:	4652      	mov	r2, sl
 8004dba:	465b      	mov	r3, fp
 8004dbc:	f7fb fb84 	bl	80004c8 <__aeabi_dmul>
 8004dc0:	a339      	add	r3, pc, #228	@ (adr r3, 8004ea8 <__kernel_sin+0x148>)
 8004dc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dc6:	f7fb f9c9 	bl	800015c <__adddf3>
 8004dca:	4652      	mov	r2, sl
 8004dcc:	465b      	mov	r3, fp
 8004dce:	f7fb fb7b 	bl	80004c8 <__aeabi_dmul>
 8004dd2:	a337      	add	r3, pc, #220	@ (adr r3, 8004eb0 <__kernel_sin+0x150>)
 8004dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dd8:	f7fb f9be 	bl	8000158 <__aeabi_dsub>
 8004ddc:	4652      	mov	r2, sl
 8004dde:	465b      	mov	r3, fp
 8004de0:	f7fb fb72 	bl	80004c8 <__aeabi_dmul>
 8004de4:	a334      	add	r3, pc, #208	@ (adr r3, 8004eb8 <__kernel_sin+0x158>)
 8004de6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004dea:	f7fb f9b7 	bl	800015c <__adddf3>
 8004dee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8004df0:	e9cd 0100 	strd	r0, r1, [sp]
 8004df4:	b9db      	cbnz	r3, 8004e2e <__kernel_sin+0xce>
 8004df6:	4602      	mov	r2, r0
 8004df8:	460b      	mov	r3, r1
 8004dfa:	4650      	mov	r0, sl
 8004dfc:	4659      	mov	r1, fp
 8004dfe:	f7fb fb63 	bl	80004c8 <__aeabi_dmul>
 8004e02:	a32f      	add	r3, pc, #188	@ (adr r3, 8004ec0 <__kernel_sin+0x160>)
 8004e04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e08:	f7fb f9a6 	bl	8000158 <__aeabi_dsub>
 8004e0c:	4642      	mov	r2, r8
 8004e0e:	464b      	mov	r3, r9
 8004e10:	f7fb fb5a 	bl	80004c8 <__aeabi_dmul>
 8004e14:	4602      	mov	r2, r0
 8004e16:	460b      	mov	r3, r1
 8004e18:	4620      	mov	r0, r4
 8004e1a:	4629      	mov	r1, r5
 8004e1c:	f7fb f99e 	bl	800015c <__adddf3>
 8004e20:	4604      	mov	r4, r0
 8004e22:	460d      	mov	r5, r1
 8004e24:	4620      	mov	r0, r4
 8004e26:	4629      	mov	r1, r5
 8004e28:	b005      	add	sp, #20
 8004e2a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e2e:	2200      	movs	r2, #0
 8004e30:	4630      	mov	r0, r6
 8004e32:	4639      	mov	r1, r7
 8004e34:	4b24      	ldr	r3, [pc, #144]	@ (8004ec8 <__kernel_sin+0x168>)
 8004e36:	f7fb fb47 	bl	80004c8 <__aeabi_dmul>
 8004e3a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004e3e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004e42:	4640      	mov	r0, r8
 8004e44:	4649      	mov	r1, r9
 8004e46:	f7fb fb3f 	bl	80004c8 <__aeabi_dmul>
 8004e4a:	4602      	mov	r2, r0
 8004e4c:	460b      	mov	r3, r1
 8004e4e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004e52:	f7fb f981 	bl	8000158 <__aeabi_dsub>
 8004e56:	4652      	mov	r2, sl
 8004e58:	465b      	mov	r3, fp
 8004e5a:	f7fb fb35 	bl	80004c8 <__aeabi_dmul>
 8004e5e:	4632      	mov	r2, r6
 8004e60:	463b      	mov	r3, r7
 8004e62:	f7fb f979 	bl	8000158 <__aeabi_dsub>
 8004e66:	a316      	add	r3, pc, #88	@ (adr r3, 8004ec0 <__kernel_sin+0x160>)
 8004e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e6c:	4606      	mov	r6, r0
 8004e6e:	460f      	mov	r7, r1
 8004e70:	4640      	mov	r0, r8
 8004e72:	4649      	mov	r1, r9
 8004e74:	f7fb fb28 	bl	80004c8 <__aeabi_dmul>
 8004e78:	4602      	mov	r2, r0
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	4630      	mov	r0, r6
 8004e7e:	4639      	mov	r1, r7
 8004e80:	f7fb f96c 	bl	800015c <__adddf3>
 8004e84:	4602      	mov	r2, r0
 8004e86:	460b      	mov	r3, r1
 8004e88:	4620      	mov	r0, r4
 8004e8a:	4629      	mov	r1, r5
 8004e8c:	f7fb f964 	bl	8000158 <__aeabi_dsub>
 8004e90:	e7c6      	b.n	8004e20 <__kernel_sin+0xc0>
 8004e92:	bf00      	nop
 8004e94:	f3af 8000 	nop.w
 8004e98:	5acfd57c 	.word	0x5acfd57c
 8004e9c:	3de5d93a 	.word	0x3de5d93a
 8004ea0:	8a2b9ceb 	.word	0x8a2b9ceb
 8004ea4:	3e5ae5e6 	.word	0x3e5ae5e6
 8004ea8:	57b1fe7d 	.word	0x57b1fe7d
 8004eac:	3ec71de3 	.word	0x3ec71de3
 8004eb0:	19c161d5 	.word	0x19c161d5
 8004eb4:	3f2a01a0 	.word	0x3f2a01a0
 8004eb8:	1110f8a6 	.word	0x1110f8a6
 8004ebc:	3f811111 	.word	0x3f811111
 8004ec0:	55555549 	.word	0x55555549
 8004ec4:	3fc55555 	.word	0x3fc55555
 8004ec8:	3fe00000 	.word	0x3fe00000
 8004ecc:	00000000 	.word	0x00000000

08004ed0 <__kernel_tan>:
 8004ed0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004ed4:	4699      	mov	r9, r3
 8004ed6:	4b34      	ldr	r3, [pc, #208]	@ (8004fa8 <__kernel_tan+0xd8>)
 8004ed8:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8004edc:	b089      	sub	sp, #36	@ 0x24
 8004ede:	429e      	cmp	r6, r3
 8004ee0:	4682      	mov	sl, r0
 8004ee2:	468b      	mov	fp, r1
 8004ee4:	4690      	mov	r8, r2
 8004ee6:	9f12      	ldr	r7, [sp, #72]	@ 0x48
 8004ee8:	9102      	str	r1, [sp, #8]
 8004eea:	d863      	bhi.n	8004fb4 <__kernel_tan+0xe4>
 8004eec:	f7fb fd86 	bl	80009fc <__aeabi_d2iz>
 8004ef0:	4605      	mov	r5, r0
 8004ef2:	2800      	cmp	r0, #0
 8004ef4:	f040 8084 	bne.w	8005000 <__kernel_tan+0x130>
 8004ef8:	4652      	mov	r2, sl
 8004efa:	1c7b      	adds	r3, r7, #1
 8004efc:	4313      	orrs	r3, r2
 8004efe:	4333      	orrs	r3, r6
 8004f00:	d110      	bne.n	8004f24 <__kernel_tan+0x54>
 8004f02:	4650      	mov	r0, sl
 8004f04:	4659      	mov	r1, fp
 8004f06:	f000 fbd9 	bl	80056bc <fabs>
 8004f0a:	4602      	mov	r2, r0
 8004f0c:	460b      	mov	r3, r1
 8004f0e:	2000      	movs	r0, #0
 8004f10:	4926      	ldr	r1, [pc, #152]	@ (8004fac <__kernel_tan+0xdc>)
 8004f12:	f7fb fc03 	bl	800071c <__aeabi_ddiv>
 8004f16:	4682      	mov	sl, r0
 8004f18:	468b      	mov	fp, r1
 8004f1a:	4650      	mov	r0, sl
 8004f1c:	4659      	mov	r1, fp
 8004f1e:	b009      	add	sp, #36	@ 0x24
 8004f20:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004f24:	2f01      	cmp	r7, #1
 8004f26:	d0f8      	beq.n	8004f1a <__kernel_tan+0x4a>
 8004f28:	4642      	mov	r2, r8
 8004f2a:	464b      	mov	r3, r9
 8004f2c:	4650      	mov	r0, sl
 8004f2e:	4659      	mov	r1, fp
 8004f30:	f7fb f914 	bl	800015c <__adddf3>
 8004f34:	4602      	mov	r2, r0
 8004f36:	460b      	mov	r3, r1
 8004f38:	460f      	mov	r7, r1
 8004f3a:	2000      	movs	r0, #0
 8004f3c:	491c      	ldr	r1, [pc, #112]	@ (8004fb0 <__kernel_tan+0xe0>)
 8004f3e:	f7fb fbed 	bl	800071c <__aeabi_ddiv>
 8004f42:	462e      	mov	r6, r5
 8004f44:	e9cd 0100 	strd	r0, r1, [sp]
 8004f48:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f4c:	462c      	mov	r4, r5
 8004f4e:	4652      	mov	r2, sl
 8004f50:	461d      	mov	r5, r3
 8004f52:	4630      	mov	r0, r6
 8004f54:	465b      	mov	r3, fp
 8004f56:	4639      	mov	r1, r7
 8004f58:	f7fb f8fe 	bl	8000158 <__aeabi_dsub>
 8004f5c:	4602      	mov	r2, r0
 8004f5e:	460b      	mov	r3, r1
 8004f60:	4640      	mov	r0, r8
 8004f62:	4649      	mov	r1, r9
 8004f64:	f7fb f8f8 	bl	8000158 <__aeabi_dsub>
 8004f68:	4632      	mov	r2, r6
 8004f6a:	462b      	mov	r3, r5
 8004f6c:	f7fb faac 	bl	80004c8 <__aeabi_dmul>
 8004f70:	4632      	mov	r2, r6
 8004f72:	4682      	mov	sl, r0
 8004f74:	468b      	mov	fp, r1
 8004f76:	462b      	mov	r3, r5
 8004f78:	4630      	mov	r0, r6
 8004f7a:	4639      	mov	r1, r7
 8004f7c:	f7fb faa4 	bl	80004c8 <__aeabi_dmul>
 8004f80:	2200      	movs	r2, #0
 8004f82:	4b0a      	ldr	r3, [pc, #40]	@ (8004fac <__kernel_tan+0xdc>)
 8004f84:	f7fb f8ea 	bl	800015c <__adddf3>
 8004f88:	4602      	mov	r2, r0
 8004f8a:	460b      	mov	r3, r1
 8004f8c:	4650      	mov	r0, sl
 8004f8e:	4659      	mov	r1, fp
 8004f90:	f7fb f8e4 	bl	800015c <__adddf3>
 8004f94:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004f98:	f7fb fa96 	bl	80004c8 <__aeabi_dmul>
 8004f9c:	4622      	mov	r2, r4
 8004f9e:	462b      	mov	r3, r5
 8004fa0:	f7fb f8dc 	bl	800015c <__adddf3>
 8004fa4:	e7b7      	b.n	8004f16 <__kernel_tan+0x46>
 8004fa6:	bf00      	nop
 8004fa8:	3e2fffff 	.word	0x3e2fffff
 8004fac:	3ff00000 	.word	0x3ff00000
 8004fb0:	bff00000 	.word	0xbff00000
 8004fb4:	4bc2      	ldr	r3, [pc, #776]	@ (80052c0 <__kernel_tan+0x3f0>)
 8004fb6:	429e      	cmp	r6, r3
 8004fb8:	d922      	bls.n	8005000 <__kernel_tan+0x130>
 8004fba:	9b02      	ldr	r3, [sp, #8]
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	da05      	bge.n	8004fcc <__kernel_tan+0xfc>
 8004fc0:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004fc4:	469b      	mov	fp, r3
 8004fc6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 8004fca:	4699      	mov	r9, r3
 8004fcc:	a19e      	add	r1, pc, #632	@ (adr r1, 8005248 <__kernel_tan+0x378>)
 8004fce:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fd2:	4652      	mov	r2, sl
 8004fd4:	465b      	mov	r3, fp
 8004fd6:	f7fb f8bf 	bl	8000158 <__aeabi_dsub>
 8004fda:	4604      	mov	r4, r0
 8004fdc:	460d      	mov	r5, r1
 8004fde:	a19c      	add	r1, pc, #624	@ (adr r1, 8005250 <__kernel_tan+0x380>)
 8004fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8004fe4:	4642      	mov	r2, r8
 8004fe6:	464b      	mov	r3, r9
 8004fe8:	f7fb f8b6 	bl	8000158 <__aeabi_dsub>
 8004fec:	4622      	mov	r2, r4
 8004fee:	462b      	mov	r3, r5
 8004ff0:	f7fb f8b4 	bl	800015c <__adddf3>
 8004ff4:	f04f 0800 	mov.w	r8, #0
 8004ff8:	4682      	mov	sl, r0
 8004ffa:	468b      	mov	fp, r1
 8004ffc:	f04f 0900 	mov.w	r9, #0
 8005000:	4652      	mov	r2, sl
 8005002:	465b      	mov	r3, fp
 8005004:	4650      	mov	r0, sl
 8005006:	4659      	mov	r1, fp
 8005008:	f7fb fa5e 	bl	80004c8 <__aeabi_dmul>
 800500c:	4602      	mov	r2, r0
 800500e:	460b      	mov	r3, r1
 8005010:	e9cd 2300 	strd	r2, r3, [sp]
 8005014:	f7fb fa58 	bl	80004c8 <__aeabi_dmul>
 8005018:	e9dd 2300 	ldrd	r2, r3, [sp]
 800501c:	4604      	mov	r4, r0
 800501e:	460d      	mov	r5, r1
 8005020:	4650      	mov	r0, sl
 8005022:	4659      	mov	r1, fp
 8005024:	f7fb fa50 	bl	80004c8 <__aeabi_dmul>
 8005028:	a38b      	add	r3, pc, #556	@ (adr r3, 8005258 <__kernel_tan+0x388>)
 800502a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800502e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005032:	4620      	mov	r0, r4
 8005034:	4629      	mov	r1, r5
 8005036:	f7fb fa47 	bl	80004c8 <__aeabi_dmul>
 800503a:	a389      	add	r3, pc, #548	@ (adr r3, 8005260 <__kernel_tan+0x390>)
 800503c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005040:	f7fb f88c 	bl	800015c <__adddf3>
 8005044:	4622      	mov	r2, r4
 8005046:	462b      	mov	r3, r5
 8005048:	f7fb fa3e 	bl	80004c8 <__aeabi_dmul>
 800504c:	a386      	add	r3, pc, #536	@ (adr r3, 8005268 <__kernel_tan+0x398>)
 800504e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005052:	f7fb f883 	bl	800015c <__adddf3>
 8005056:	4622      	mov	r2, r4
 8005058:	462b      	mov	r3, r5
 800505a:	f7fb fa35 	bl	80004c8 <__aeabi_dmul>
 800505e:	a384      	add	r3, pc, #528	@ (adr r3, 8005270 <__kernel_tan+0x3a0>)
 8005060:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005064:	f7fb f87a 	bl	800015c <__adddf3>
 8005068:	4622      	mov	r2, r4
 800506a:	462b      	mov	r3, r5
 800506c:	f7fb fa2c 	bl	80004c8 <__aeabi_dmul>
 8005070:	a381      	add	r3, pc, #516	@ (adr r3, 8005278 <__kernel_tan+0x3a8>)
 8005072:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005076:	f7fb f871 	bl	800015c <__adddf3>
 800507a:	4622      	mov	r2, r4
 800507c:	462b      	mov	r3, r5
 800507e:	f7fb fa23 	bl	80004c8 <__aeabi_dmul>
 8005082:	a37f      	add	r3, pc, #508	@ (adr r3, 8005280 <__kernel_tan+0x3b0>)
 8005084:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005088:	f7fb f868 	bl	800015c <__adddf3>
 800508c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005090:	f7fb fa1a 	bl	80004c8 <__aeabi_dmul>
 8005094:	a37c      	add	r3, pc, #496	@ (adr r3, 8005288 <__kernel_tan+0x3b8>)
 8005096:	e9d3 2300 	ldrd	r2, r3, [r3]
 800509a:	e9cd 0106 	strd	r0, r1, [sp, #24]
 800509e:	4620      	mov	r0, r4
 80050a0:	4629      	mov	r1, r5
 80050a2:	f7fb fa11 	bl	80004c8 <__aeabi_dmul>
 80050a6:	a37a      	add	r3, pc, #488	@ (adr r3, 8005290 <__kernel_tan+0x3c0>)
 80050a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050ac:	f7fb f856 	bl	800015c <__adddf3>
 80050b0:	4622      	mov	r2, r4
 80050b2:	462b      	mov	r3, r5
 80050b4:	f7fb fa08 	bl	80004c8 <__aeabi_dmul>
 80050b8:	a377      	add	r3, pc, #476	@ (adr r3, 8005298 <__kernel_tan+0x3c8>)
 80050ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050be:	f7fb f84d 	bl	800015c <__adddf3>
 80050c2:	4622      	mov	r2, r4
 80050c4:	462b      	mov	r3, r5
 80050c6:	f7fb f9ff 	bl	80004c8 <__aeabi_dmul>
 80050ca:	a375      	add	r3, pc, #468	@ (adr r3, 80052a0 <__kernel_tan+0x3d0>)
 80050cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050d0:	f7fb f844 	bl	800015c <__adddf3>
 80050d4:	4622      	mov	r2, r4
 80050d6:	462b      	mov	r3, r5
 80050d8:	f7fb f9f6 	bl	80004c8 <__aeabi_dmul>
 80050dc:	a372      	add	r3, pc, #456	@ (adr r3, 80052a8 <__kernel_tan+0x3d8>)
 80050de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050e2:	f7fb f83b 	bl	800015c <__adddf3>
 80050e6:	4622      	mov	r2, r4
 80050e8:	462b      	mov	r3, r5
 80050ea:	f7fb f9ed 	bl	80004c8 <__aeabi_dmul>
 80050ee:	a370      	add	r3, pc, #448	@ (adr r3, 80052b0 <__kernel_tan+0x3e0>)
 80050f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050f4:	f7fb f832 	bl	800015c <__adddf3>
 80050f8:	4602      	mov	r2, r0
 80050fa:	460b      	mov	r3, r1
 80050fc:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005100:	f7fb f82c 	bl	800015c <__adddf3>
 8005104:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005108:	f7fb f9de 	bl	80004c8 <__aeabi_dmul>
 800510c:	4642      	mov	r2, r8
 800510e:	464b      	mov	r3, r9
 8005110:	f7fb f824 	bl	800015c <__adddf3>
 8005114:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005118:	f7fb f9d6 	bl	80004c8 <__aeabi_dmul>
 800511c:	4642      	mov	r2, r8
 800511e:	464b      	mov	r3, r9
 8005120:	f7fb f81c 	bl	800015c <__adddf3>
 8005124:	a364      	add	r3, pc, #400	@ (adr r3, 80052b8 <__kernel_tan+0x3e8>)
 8005126:	e9d3 2300 	ldrd	r2, r3, [r3]
 800512a:	4604      	mov	r4, r0
 800512c:	460d      	mov	r5, r1
 800512e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005132:	f7fb f9c9 	bl	80004c8 <__aeabi_dmul>
 8005136:	4622      	mov	r2, r4
 8005138:	462b      	mov	r3, r5
 800513a:	f7fb f80f 	bl	800015c <__adddf3>
 800513e:	460b      	mov	r3, r1
 8005140:	e9cd 0100 	strd	r0, r1, [sp]
 8005144:	4602      	mov	r2, r0
 8005146:	4659      	mov	r1, fp
 8005148:	4650      	mov	r0, sl
 800514a:	f7fb f807 	bl	800015c <__adddf3>
 800514e:	4b5c      	ldr	r3, [pc, #368]	@ (80052c0 <__kernel_tan+0x3f0>)
 8005150:	4604      	mov	r4, r0
 8005152:	429e      	cmp	r6, r3
 8005154:	460d      	mov	r5, r1
 8005156:	d93e      	bls.n	80051d6 <__kernel_tan+0x306>
 8005158:	4638      	mov	r0, r7
 800515a:	f7fb f94b 	bl	80003f4 <__aeabi_i2d>
 800515e:	4622      	mov	r2, r4
 8005160:	4680      	mov	r8, r0
 8005162:	4689      	mov	r9, r1
 8005164:	462b      	mov	r3, r5
 8005166:	4620      	mov	r0, r4
 8005168:	4629      	mov	r1, r5
 800516a:	f7fb f9ad 	bl	80004c8 <__aeabi_dmul>
 800516e:	4642      	mov	r2, r8
 8005170:	4606      	mov	r6, r0
 8005172:	460f      	mov	r7, r1
 8005174:	464b      	mov	r3, r9
 8005176:	4620      	mov	r0, r4
 8005178:	4629      	mov	r1, r5
 800517a:	f7fa ffef 	bl	800015c <__adddf3>
 800517e:	4602      	mov	r2, r0
 8005180:	460b      	mov	r3, r1
 8005182:	4630      	mov	r0, r6
 8005184:	4639      	mov	r1, r7
 8005186:	f7fb fac9 	bl	800071c <__aeabi_ddiv>
 800518a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800518e:	f7fa ffe3 	bl	8000158 <__aeabi_dsub>
 8005192:	4602      	mov	r2, r0
 8005194:	460b      	mov	r3, r1
 8005196:	4650      	mov	r0, sl
 8005198:	4659      	mov	r1, fp
 800519a:	f7fa ffdd 	bl	8000158 <__aeabi_dsub>
 800519e:	4602      	mov	r2, r0
 80051a0:	460b      	mov	r3, r1
 80051a2:	f7fa ffdb 	bl	800015c <__adddf3>
 80051a6:	4602      	mov	r2, r0
 80051a8:	460b      	mov	r3, r1
 80051aa:	4640      	mov	r0, r8
 80051ac:	4649      	mov	r1, r9
 80051ae:	f7fa ffd3 	bl	8000158 <__aeabi_dsub>
 80051b2:	9b02      	ldr	r3, [sp, #8]
 80051b4:	4604      	mov	r4, r0
 80051b6:	ea4f 7aa3 	mov.w	sl, r3, asr #30
 80051ba:	f00a 0a02 	and.w	sl, sl, #2
 80051be:	f1ca 0001 	rsb	r0, sl, #1
 80051c2:	460d      	mov	r5, r1
 80051c4:	f7fb f916 	bl	80003f4 <__aeabi_i2d>
 80051c8:	4602      	mov	r2, r0
 80051ca:	460b      	mov	r3, r1
 80051cc:	4620      	mov	r0, r4
 80051ce:	4629      	mov	r1, r5
 80051d0:	f7fb f97a 	bl	80004c8 <__aeabi_dmul>
 80051d4:	e69f      	b.n	8004f16 <__kernel_tan+0x46>
 80051d6:	2f01      	cmp	r7, #1
 80051d8:	d033      	beq.n	8005242 <__kernel_tan+0x372>
 80051da:	f04f 0800 	mov.w	r8, #0
 80051de:	4689      	mov	r9, r1
 80051e0:	4602      	mov	r2, r0
 80051e2:	460b      	mov	r3, r1
 80051e4:	2000      	movs	r0, #0
 80051e6:	4937      	ldr	r1, [pc, #220]	@ (80052c4 <__kernel_tan+0x3f4>)
 80051e8:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80051ec:	f7fb fa96 	bl	800071c <__aeabi_ddiv>
 80051f0:	4652      	mov	r2, sl
 80051f2:	460f      	mov	r7, r1
 80051f4:	465b      	mov	r3, fp
 80051f6:	4606      	mov	r6, r0
 80051f8:	460d      	mov	r5, r1
 80051fa:	4640      	mov	r0, r8
 80051fc:	4649      	mov	r1, r9
 80051fe:	f7fa ffab 	bl	8000158 <__aeabi_dsub>
 8005202:	4602      	mov	r2, r0
 8005204:	460b      	mov	r3, r1
 8005206:	e9dd 0100 	ldrd	r0, r1, [sp]
 800520a:	f7fa ffa5 	bl	8000158 <__aeabi_dsub>
 800520e:	4642      	mov	r2, r8
 8005210:	463b      	mov	r3, r7
 8005212:	f7fb f959 	bl	80004c8 <__aeabi_dmul>
 8005216:	4642      	mov	r2, r8
 8005218:	4682      	mov	sl, r0
 800521a:	468b      	mov	fp, r1
 800521c:	463b      	mov	r3, r7
 800521e:	4640      	mov	r0, r8
 8005220:	4649      	mov	r1, r9
 8005222:	f7fb f951 	bl	80004c8 <__aeabi_dmul>
 8005226:	2200      	movs	r2, #0
 8005228:	4b27      	ldr	r3, [pc, #156]	@ (80052c8 <__kernel_tan+0x3f8>)
 800522a:	f7fa ff97 	bl	800015c <__adddf3>
 800522e:	4602      	mov	r2, r0
 8005230:	460b      	mov	r3, r1
 8005232:	4650      	mov	r0, sl
 8005234:	4659      	mov	r1, fp
 8005236:	f7fa ff91 	bl	800015c <__adddf3>
 800523a:	4644      	mov	r4, r8
 800523c:	4632      	mov	r2, r6
 800523e:	463b      	mov	r3, r7
 8005240:	e6aa      	b.n	8004f98 <__kernel_tan+0xc8>
 8005242:	4682      	mov	sl, r0
 8005244:	468b      	mov	fp, r1
 8005246:	e668      	b.n	8004f1a <__kernel_tan+0x4a>
 8005248:	54442d18 	.word	0x54442d18
 800524c:	3fe921fb 	.word	0x3fe921fb
 8005250:	33145c07 	.word	0x33145c07
 8005254:	3c81a626 	.word	0x3c81a626
 8005258:	74bf7ad4 	.word	0x74bf7ad4
 800525c:	3efb2a70 	.word	0x3efb2a70
 8005260:	32f0a7e9 	.word	0x32f0a7e9
 8005264:	3f12b80f 	.word	0x3f12b80f
 8005268:	1a8d1068 	.word	0x1a8d1068
 800526c:	3f3026f7 	.word	0x3f3026f7
 8005270:	fee08315 	.word	0xfee08315
 8005274:	3f57dbc8 	.word	0x3f57dbc8
 8005278:	e96e8493 	.word	0xe96e8493
 800527c:	3f8226e3 	.word	0x3f8226e3
 8005280:	1bb341fe 	.word	0x1bb341fe
 8005284:	3faba1ba 	.word	0x3faba1ba
 8005288:	db605373 	.word	0xdb605373
 800528c:	bef375cb 	.word	0xbef375cb
 8005290:	a03792a6 	.word	0xa03792a6
 8005294:	3f147e88 	.word	0x3f147e88
 8005298:	f2f26501 	.word	0xf2f26501
 800529c:	3f4344d8 	.word	0x3f4344d8
 80052a0:	c9560328 	.word	0xc9560328
 80052a4:	3f6d6d22 	.word	0x3f6d6d22
 80052a8:	8406d637 	.word	0x8406d637
 80052ac:	3f9664f4 	.word	0x3f9664f4
 80052b0:	1110fe7a 	.word	0x1110fe7a
 80052b4:	3fc11111 	.word	0x3fc11111
 80052b8:	55555563 	.word	0x55555563
 80052bc:	3fd55555 	.word	0x3fd55555
 80052c0:	3fe59427 	.word	0x3fe59427
 80052c4:	bff00000 	.word	0xbff00000
 80052c8:	3ff00000 	.word	0x3ff00000
 80052cc:	00000000 	.word	0x00000000

080052d0 <__ieee754_rem_pio2>:
 80052d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80052d4:	4bc4      	ldr	r3, [pc, #784]	@ (80055e8 <__ieee754_rem_pio2+0x318>)
 80052d6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80052da:	b08d      	sub	sp, #52	@ 0x34
 80052dc:	4598      	cmp	r8, r3
 80052de:	4606      	mov	r6, r0
 80052e0:	460f      	mov	r7, r1
 80052e2:	4614      	mov	r4, r2
 80052e4:	9104      	str	r1, [sp, #16]
 80052e6:	d807      	bhi.n	80052f8 <__ieee754_rem_pio2+0x28>
 80052e8:	e9c2 6700 	strd	r6, r7, [r2]
 80052ec:	2300      	movs	r3, #0
 80052ee:	2200      	movs	r2, #0
 80052f0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80052f4:	2500      	movs	r5, #0
 80052f6:	e026      	b.n	8005346 <__ieee754_rem_pio2+0x76>
 80052f8:	4bbc      	ldr	r3, [pc, #752]	@ (80055ec <__ieee754_rem_pio2+0x31c>)
 80052fa:	4598      	cmp	r8, r3
 80052fc:	d876      	bhi.n	80053ec <__ieee754_rem_pio2+0x11c>
 80052fe:	9b04      	ldr	r3, [sp, #16]
 8005300:	4dbb      	ldr	r5, [pc, #748]	@ (80055f0 <__ieee754_rem_pio2+0x320>)
 8005302:	2b00      	cmp	r3, #0
 8005304:	a3aa      	add	r3, pc, #680	@ (adr r3, 80055b0 <__ieee754_rem_pio2+0x2e0>)
 8005306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800530a:	dd38      	ble.n	800537e <__ieee754_rem_pio2+0xae>
 800530c:	f7fa ff24 	bl	8000158 <__aeabi_dsub>
 8005310:	45a8      	cmp	r8, r5
 8005312:	4606      	mov	r6, r0
 8005314:	460f      	mov	r7, r1
 8005316:	d01a      	beq.n	800534e <__ieee754_rem_pio2+0x7e>
 8005318:	a3a7      	add	r3, pc, #668	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 800531a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800531e:	f7fa ff1b 	bl	8000158 <__aeabi_dsub>
 8005322:	4602      	mov	r2, r0
 8005324:	460b      	mov	r3, r1
 8005326:	4680      	mov	r8, r0
 8005328:	4689      	mov	r9, r1
 800532a:	4630      	mov	r0, r6
 800532c:	4639      	mov	r1, r7
 800532e:	f7fa ff13 	bl	8000158 <__aeabi_dsub>
 8005332:	a3a1      	add	r3, pc, #644	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 8005334:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005338:	f7fa ff0e 	bl	8000158 <__aeabi_dsub>
 800533c:	2501      	movs	r5, #1
 800533e:	e9c4 8900 	strd	r8, r9, [r4]
 8005342:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005346:	4628      	mov	r0, r5
 8005348:	b00d      	add	sp, #52	@ 0x34
 800534a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800534e:	a39c      	add	r3, pc, #624	@ (adr r3, 80055c0 <__ieee754_rem_pio2+0x2f0>)
 8005350:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005354:	f7fa ff00 	bl	8000158 <__aeabi_dsub>
 8005358:	a39b      	add	r3, pc, #620	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 800535a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535e:	4606      	mov	r6, r0
 8005360:	460f      	mov	r7, r1
 8005362:	f7fa fef9 	bl	8000158 <__aeabi_dsub>
 8005366:	4602      	mov	r2, r0
 8005368:	460b      	mov	r3, r1
 800536a:	4680      	mov	r8, r0
 800536c:	4689      	mov	r9, r1
 800536e:	4630      	mov	r0, r6
 8005370:	4639      	mov	r1, r7
 8005372:	f7fa fef1 	bl	8000158 <__aeabi_dsub>
 8005376:	a394      	add	r3, pc, #592	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 8005378:	e9d3 2300 	ldrd	r2, r3, [r3]
 800537c:	e7dc      	b.n	8005338 <__ieee754_rem_pio2+0x68>
 800537e:	f7fa feed 	bl	800015c <__adddf3>
 8005382:	45a8      	cmp	r8, r5
 8005384:	4606      	mov	r6, r0
 8005386:	460f      	mov	r7, r1
 8005388:	d018      	beq.n	80053bc <__ieee754_rem_pio2+0xec>
 800538a:	a38b      	add	r3, pc, #556	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 800538c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005390:	f7fa fee4 	bl	800015c <__adddf3>
 8005394:	4602      	mov	r2, r0
 8005396:	460b      	mov	r3, r1
 8005398:	4680      	mov	r8, r0
 800539a:	4689      	mov	r9, r1
 800539c:	4630      	mov	r0, r6
 800539e:	4639      	mov	r1, r7
 80053a0:	f7fa feda 	bl	8000158 <__aeabi_dsub>
 80053a4:	a384      	add	r3, pc, #528	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 80053a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053aa:	f7fa fed7 	bl	800015c <__adddf3>
 80053ae:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 80053b2:	e9c4 8900 	strd	r8, r9, [r4]
 80053b6:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80053ba:	e7c4      	b.n	8005346 <__ieee754_rem_pio2+0x76>
 80053bc:	a380      	add	r3, pc, #512	@ (adr r3, 80055c0 <__ieee754_rem_pio2+0x2f0>)
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f7fa fecb 	bl	800015c <__adddf3>
 80053c6:	a380      	add	r3, pc, #512	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 80053c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053cc:	4606      	mov	r6, r0
 80053ce:	460f      	mov	r7, r1
 80053d0:	f7fa fec4 	bl	800015c <__adddf3>
 80053d4:	4602      	mov	r2, r0
 80053d6:	460b      	mov	r3, r1
 80053d8:	4680      	mov	r8, r0
 80053da:	4689      	mov	r9, r1
 80053dc:	4630      	mov	r0, r6
 80053de:	4639      	mov	r1, r7
 80053e0:	f7fa feba 	bl	8000158 <__aeabi_dsub>
 80053e4:	a378      	add	r3, pc, #480	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 80053e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053ea:	e7de      	b.n	80053aa <__ieee754_rem_pio2+0xda>
 80053ec:	4b81      	ldr	r3, [pc, #516]	@ (80055f4 <__ieee754_rem_pio2+0x324>)
 80053ee:	4598      	cmp	r8, r3
 80053f0:	f200 80cf 	bhi.w	8005592 <__ieee754_rem_pio2+0x2c2>
 80053f4:	f000 f962 	bl	80056bc <fabs>
 80053f8:	a375      	add	r3, pc, #468	@ (adr r3, 80055d0 <__ieee754_rem_pio2+0x300>)
 80053fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fe:	4606      	mov	r6, r0
 8005400:	460f      	mov	r7, r1
 8005402:	f7fb f861 	bl	80004c8 <__aeabi_dmul>
 8005406:	2200      	movs	r2, #0
 8005408:	4b7b      	ldr	r3, [pc, #492]	@ (80055f8 <__ieee754_rem_pio2+0x328>)
 800540a:	f7fa fea7 	bl	800015c <__adddf3>
 800540e:	f7fb faf5 	bl	80009fc <__aeabi_d2iz>
 8005412:	4605      	mov	r5, r0
 8005414:	f7fa ffee 	bl	80003f4 <__aeabi_i2d>
 8005418:	4602      	mov	r2, r0
 800541a:	460b      	mov	r3, r1
 800541c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005420:	a363      	add	r3, pc, #396	@ (adr r3, 80055b0 <__ieee754_rem_pio2+0x2e0>)
 8005422:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005426:	f7fb f84f 	bl	80004c8 <__aeabi_dmul>
 800542a:	4602      	mov	r2, r0
 800542c:	460b      	mov	r3, r1
 800542e:	4630      	mov	r0, r6
 8005430:	4639      	mov	r1, r7
 8005432:	f7fa fe91 	bl	8000158 <__aeabi_dsub>
 8005436:	a360      	add	r3, pc, #384	@ (adr r3, 80055b8 <__ieee754_rem_pio2+0x2e8>)
 8005438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800543c:	4682      	mov	sl, r0
 800543e:	468b      	mov	fp, r1
 8005440:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005444:	f7fb f840 	bl	80004c8 <__aeabi_dmul>
 8005448:	2d1f      	cmp	r5, #31
 800544a:	4606      	mov	r6, r0
 800544c:	460f      	mov	r7, r1
 800544e:	dc0c      	bgt.n	800546a <__ieee754_rem_pio2+0x19a>
 8005450:	4b6a      	ldr	r3, [pc, #424]	@ (80055fc <__ieee754_rem_pio2+0x32c>)
 8005452:	1e6a      	subs	r2, r5, #1
 8005454:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005458:	4543      	cmp	r3, r8
 800545a:	d006      	beq.n	800546a <__ieee754_rem_pio2+0x19a>
 800545c:	4632      	mov	r2, r6
 800545e:	463b      	mov	r3, r7
 8005460:	4650      	mov	r0, sl
 8005462:	4659      	mov	r1, fp
 8005464:	f7fa fe78 	bl	8000158 <__aeabi_dsub>
 8005468:	e00e      	b.n	8005488 <__ieee754_rem_pio2+0x1b8>
 800546a:	463b      	mov	r3, r7
 800546c:	4632      	mov	r2, r6
 800546e:	4650      	mov	r0, sl
 8005470:	4659      	mov	r1, fp
 8005472:	f7fa fe71 	bl	8000158 <__aeabi_dsub>
 8005476:	ea4f 5328 	mov.w	r3, r8, asr #20
 800547a:	9305      	str	r3, [sp, #20]
 800547c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8005480:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8005484:	2b10      	cmp	r3, #16
 8005486:	dc02      	bgt.n	800548e <__ieee754_rem_pio2+0x1be>
 8005488:	e9c4 0100 	strd	r0, r1, [r4]
 800548c:	e039      	b.n	8005502 <__ieee754_rem_pio2+0x232>
 800548e:	a34c      	add	r3, pc, #304	@ (adr r3, 80055c0 <__ieee754_rem_pio2+0x2f0>)
 8005490:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005494:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005498:	f7fb f816 	bl	80004c8 <__aeabi_dmul>
 800549c:	4606      	mov	r6, r0
 800549e:	460f      	mov	r7, r1
 80054a0:	4602      	mov	r2, r0
 80054a2:	460b      	mov	r3, r1
 80054a4:	4650      	mov	r0, sl
 80054a6:	4659      	mov	r1, fp
 80054a8:	f7fa fe56 	bl	8000158 <__aeabi_dsub>
 80054ac:	4602      	mov	r2, r0
 80054ae:	460b      	mov	r3, r1
 80054b0:	4680      	mov	r8, r0
 80054b2:	4689      	mov	r9, r1
 80054b4:	4650      	mov	r0, sl
 80054b6:	4659      	mov	r1, fp
 80054b8:	f7fa fe4e 	bl	8000158 <__aeabi_dsub>
 80054bc:	4632      	mov	r2, r6
 80054be:	463b      	mov	r3, r7
 80054c0:	f7fa fe4a 	bl	8000158 <__aeabi_dsub>
 80054c4:	a340      	add	r3, pc, #256	@ (adr r3, 80055c8 <__ieee754_rem_pio2+0x2f8>)
 80054c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054ca:	4606      	mov	r6, r0
 80054cc:	460f      	mov	r7, r1
 80054ce:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80054d2:	f7fa fff9 	bl	80004c8 <__aeabi_dmul>
 80054d6:	4632      	mov	r2, r6
 80054d8:	463b      	mov	r3, r7
 80054da:	f7fa fe3d 	bl	8000158 <__aeabi_dsub>
 80054de:	4602      	mov	r2, r0
 80054e0:	460b      	mov	r3, r1
 80054e2:	4606      	mov	r6, r0
 80054e4:	460f      	mov	r7, r1
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f7fa fe35 	bl	8000158 <__aeabi_dsub>
 80054ee:	9a05      	ldr	r2, [sp, #20]
 80054f0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80054f4:	1ad3      	subs	r3, r2, r3
 80054f6:	2b31      	cmp	r3, #49	@ 0x31
 80054f8:	dc20      	bgt.n	800553c <__ieee754_rem_pio2+0x26c>
 80054fa:	46c2      	mov	sl, r8
 80054fc:	46cb      	mov	fp, r9
 80054fe:	e9c4 0100 	strd	r0, r1, [r4]
 8005502:	e9d4 8900 	ldrd	r8, r9, [r4]
 8005506:	4650      	mov	r0, sl
 8005508:	4642      	mov	r2, r8
 800550a:	464b      	mov	r3, r9
 800550c:	4659      	mov	r1, fp
 800550e:	f7fa fe23 	bl	8000158 <__aeabi_dsub>
 8005512:	463b      	mov	r3, r7
 8005514:	4632      	mov	r2, r6
 8005516:	f7fa fe1f 	bl	8000158 <__aeabi_dsub>
 800551a:	9b04      	ldr	r3, [sp, #16]
 800551c:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8005520:	2b00      	cmp	r3, #0
 8005522:	f6bf af10 	bge.w	8005346 <__ieee754_rem_pio2+0x76>
 8005526:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 800552a:	6063      	str	r3, [r4, #4]
 800552c:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005530:	f8c4 8000 	str.w	r8, [r4]
 8005534:	60a0      	str	r0, [r4, #8]
 8005536:	60e3      	str	r3, [r4, #12]
 8005538:	426d      	negs	r5, r5
 800553a:	e704      	b.n	8005346 <__ieee754_rem_pio2+0x76>
 800553c:	a326      	add	r3, pc, #152	@ (adr r3, 80055d8 <__ieee754_rem_pio2+0x308>)
 800553e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005542:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005546:	f7fa ffbf 	bl	80004c8 <__aeabi_dmul>
 800554a:	4606      	mov	r6, r0
 800554c:	460f      	mov	r7, r1
 800554e:	4602      	mov	r2, r0
 8005550:	460b      	mov	r3, r1
 8005552:	4640      	mov	r0, r8
 8005554:	4649      	mov	r1, r9
 8005556:	f7fa fdff 	bl	8000158 <__aeabi_dsub>
 800555a:	4602      	mov	r2, r0
 800555c:	460b      	mov	r3, r1
 800555e:	4682      	mov	sl, r0
 8005560:	468b      	mov	fp, r1
 8005562:	4640      	mov	r0, r8
 8005564:	4649      	mov	r1, r9
 8005566:	f7fa fdf7 	bl	8000158 <__aeabi_dsub>
 800556a:	4632      	mov	r2, r6
 800556c:	463b      	mov	r3, r7
 800556e:	f7fa fdf3 	bl	8000158 <__aeabi_dsub>
 8005572:	a31b      	add	r3, pc, #108	@ (adr r3, 80055e0 <__ieee754_rem_pio2+0x310>)
 8005574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005578:	4606      	mov	r6, r0
 800557a:	460f      	mov	r7, r1
 800557c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005580:	f7fa ffa2 	bl	80004c8 <__aeabi_dmul>
 8005584:	4632      	mov	r2, r6
 8005586:	463b      	mov	r3, r7
 8005588:	f7fa fde6 	bl	8000158 <__aeabi_dsub>
 800558c:	4606      	mov	r6, r0
 800558e:	460f      	mov	r7, r1
 8005590:	e764      	b.n	800545c <__ieee754_rem_pio2+0x18c>
 8005592:	4b1b      	ldr	r3, [pc, #108]	@ (8005600 <__ieee754_rem_pio2+0x330>)
 8005594:	4598      	cmp	r8, r3
 8005596:	d935      	bls.n	8005604 <__ieee754_rem_pio2+0x334>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	f7fa fddc 	bl	8000158 <__aeabi_dsub>
 80055a0:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80055a4:	e9c4 0100 	strd	r0, r1, [r4]
 80055a8:	e6a4      	b.n	80052f4 <__ieee754_rem_pio2+0x24>
 80055aa:	bf00      	nop
 80055ac:	f3af 8000 	nop.w
 80055b0:	54400000 	.word	0x54400000
 80055b4:	3ff921fb 	.word	0x3ff921fb
 80055b8:	1a626331 	.word	0x1a626331
 80055bc:	3dd0b461 	.word	0x3dd0b461
 80055c0:	1a600000 	.word	0x1a600000
 80055c4:	3dd0b461 	.word	0x3dd0b461
 80055c8:	2e037073 	.word	0x2e037073
 80055cc:	3ba3198a 	.word	0x3ba3198a
 80055d0:	6dc9c883 	.word	0x6dc9c883
 80055d4:	3fe45f30 	.word	0x3fe45f30
 80055d8:	2e000000 	.word	0x2e000000
 80055dc:	3ba3198a 	.word	0x3ba3198a
 80055e0:	252049c1 	.word	0x252049c1
 80055e4:	397b839a 	.word	0x397b839a
 80055e8:	3fe921fb 	.word	0x3fe921fb
 80055ec:	4002d97b 	.word	0x4002d97b
 80055f0:	3ff921fb 	.word	0x3ff921fb
 80055f4:	413921fb 	.word	0x413921fb
 80055f8:	3fe00000 	.word	0x3fe00000
 80055fc:	08005f94 	.word	0x08005f94
 8005600:	7fefffff 	.word	0x7fefffff
 8005604:	ea4f 5528 	mov.w	r5, r8, asr #20
 8005608:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 800560c:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 8005610:	460f      	mov	r7, r1
 8005612:	f7fb f9f3 	bl	80009fc <__aeabi_d2iz>
 8005616:	f7fa feed 	bl	80003f4 <__aeabi_i2d>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4630      	mov	r0, r6
 8005620:	4639      	mov	r1, r7
 8005622:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8005626:	f7fa fd97 	bl	8000158 <__aeabi_dsub>
 800562a:	2200      	movs	r2, #0
 800562c:	4b21      	ldr	r3, [pc, #132]	@ (80056b4 <__ieee754_rem_pio2+0x3e4>)
 800562e:	f7fa ff4b 	bl	80004c8 <__aeabi_dmul>
 8005632:	460f      	mov	r7, r1
 8005634:	4606      	mov	r6, r0
 8005636:	f7fb f9e1 	bl	80009fc <__aeabi_d2iz>
 800563a:	f7fa fedb 	bl	80003f4 <__aeabi_i2d>
 800563e:	4602      	mov	r2, r0
 8005640:	460b      	mov	r3, r1
 8005642:	4630      	mov	r0, r6
 8005644:	4639      	mov	r1, r7
 8005646:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800564a:	f7fa fd85 	bl	8000158 <__aeabi_dsub>
 800564e:	2200      	movs	r2, #0
 8005650:	4b18      	ldr	r3, [pc, #96]	@ (80056b4 <__ieee754_rem_pio2+0x3e4>)
 8005652:	f7fa ff39 	bl	80004c8 <__aeabi_dmul>
 8005656:	f04f 0803 	mov.w	r8, #3
 800565a:	2600      	movs	r6, #0
 800565c:	2700      	movs	r7, #0
 800565e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8005662:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8005666:	4632      	mov	r2, r6
 8005668:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800566c:	463b      	mov	r3, r7
 800566e:	46c2      	mov	sl, r8
 8005670:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8005674:	f7fb f990 	bl	8000998 <__aeabi_dcmpeq>
 8005678:	2800      	cmp	r0, #0
 800567a:	d1f4      	bne.n	8005666 <__ieee754_rem_pio2+0x396>
 800567c:	4b0e      	ldr	r3, [pc, #56]	@ (80056b8 <__ieee754_rem_pio2+0x3e8>)
 800567e:	462a      	mov	r2, r5
 8005680:	9301      	str	r3, [sp, #4]
 8005682:	2302      	movs	r3, #2
 8005684:	4621      	mov	r1, r4
 8005686:	9300      	str	r3, [sp, #0]
 8005688:	a806      	add	r0, sp, #24
 800568a:	4653      	mov	r3, sl
 800568c:	f000 f81a 	bl	80056c4 <__kernel_rem_pio2>
 8005690:	9b04      	ldr	r3, [sp, #16]
 8005692:	4605      	mov	r5, r0
 8005694:	2b00      	cmp	r3, #0
 8005696:	f6bf ae56 	bge.w	8005346 <__ieee754_rem_pio2+0x76>
 800569a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800569e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056a2:	e9c4 2300 	strd	r2, r3, [r4]
 80056a6:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 80056aa:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 80056ae:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80056b2:	e741      	b.n	8005538 <__ieee754_rem_pio2+0x268>
 80056b4:	41700000 	.word	0x41700000
 80056b8:	08006014 	.word	0x08006014

080056bc <fabs>:
 80056bc:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 80056c0:	4619      	mov	r1, r3
 80056c2:	4770      	bx	lr

080056c4 <__kernel_rem_pio2>:
 80056c4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80056c8:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 80056cc:	9308      	str	r3, [sp, #32]
 80056ce:	9104      	str	r1, [sp, #16]
 80056d0:	4bb6      	ldr	r3, [pc, #728]	@ (80059ac <__kernel_rem_pio2+0x2e8>)
 80056d2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80056d4:	f112 0f14 	cmn.w	r2, #20
 80056d8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80056dc:	bfa8      	it	ge
 80056de:	1ed4      	subge	r4, r2, #3
 80056e0:	9302      	str	r3, [sp, #8]
 80056e2:	9b08      	ldr	r3, [sp, #32]
 80056e4:	bfb8      	it	lt
 80056e6:	2400      	movlt	r4, #0
 80056e8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80056ec:	9306      	str	r3, [sp, #24]
 80056ee:	bfa4      	itt	ge
 80056f0:	2318      	movge	r3, #24
 80056f2:	fb94 f4f3 	sdivge	r4, r4, r3
 80056f6:	f06f 0317 	mvn.w	r3, #23
 80056fa:	fb04 3303 	mla	r3, r4, r3, r3
 80056fe:	eb03 0a02 	add.w	sl, r3, r2
 8005702:	9a06      	ldr	r2, [sp, #24]
 8005704:	9b02      	ldr	r3, [sp, #8]
 8005706:	1aa7      	subs	r7, r4, r2
 8005708:	eb03 0802 	add.w	r8, r3, r2
 800570c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800570e:	2500      	movs	r5, #0
 8005710:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 8005714:	2200      	movs	r2, #0
 8005716:	2300      	movs	r3, #0
 8005718:	9009      	str	r0, [sp, #36]	@ 0x24
 800571a:	ae20      	add	r6, sp, #128	@ 0x80
 800571c:	4545      	cmp	r5, r8
 800571e:	dd14      	ble.n	800574a <__kernel_rem_pio2+0x86>
 8005720:	f04f 0800 	mov.w	r8, #0
 8005724:	9a08      	ldr	r2, [sp, #32]
 8005726:	ab20      	add	r3, sp, #128	@ 0x80
 8005728:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 800572c:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8005730:	9b02      	ldr	r3, [sp, #8]
 8005732:	4598      	cmp	r8, r3
 8005734:	dc35      	bgt.n	80057a2 <__kernel_rem_pio2+0xde>
 8005736:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005738:	2200      	movs	r2, #0
 800573a:	f1a3 0908 	sub.w	r9, r3, #8
 800573e:	2300      	movs	r3, #0
 8005740:	462f      	mov	r7, r5
 8005742:	2600      	movs	r6, #0
 8005744:	e9cd 2300 	strd	r2, r3, [sp]
 8005748:	e01f      	b.n	800578a <__kernel_rem_pio2+0xc6>
 800574a:	42ef      	cmn	r7, r5
 800574c:	d40b      	bmi.n	8005766 <__kernel_rem_pio2+0xa2>
 800574e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8005752:	e9cd 2300 	strd	r2, r3, [sp]
 8005756:	f7fa fe4d 	bl	80003f4 <__aeabi_i2d>
 800575a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800575e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8005762:	3501      	adds	r5, #1
 8005764:	e7da      	b.n	800571c <__kernel_rem_pio2+0x58>
 8005766:	4610      	mov	r0, r2
 8005768:	4619      	mov	r1, r3
 800576a:	e7f8      	b.n	800575e <__kernel_rem_pio2+0x9a>
 800576c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005770:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8005774:	f7fa fea8 	bl	80004c8 <__aeabi_dmul>
 8005778:	4602      	mov	r2, r0
 800577a:	460b      	mov	r3, r1
 800577c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005780:	f7fa fcec 	bl	800015c <__adddf3>
 8005784:	e9cd 0100 	strd	r0, r1, [sp]
 8005788:	3601      	adds	r6, #1
 800578a:	9b06      	ldr	r3, [sp, #24]
 800578c:	3f08      	subs	r7, #8
 800578e:	429e      	cmp	r6, r3
 8005790:	ddec      	ble.n	800576c <__kernel_rem_pio2+0xa8>
 8005792:	e9dd 2300 	ldrd	r2, r3, [sp]
 8005796:	f108 0801 	add.w	r8, r8, #1
 800579a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800579e:	3508      	adds	r5, #8
 80057a0:	e7c6      	b.n	8005730 <__kernel_rem_pio2+0x6c>
 80057a2:	9b02      	ldr	r3, [sp, #8]
 80057a4:	aa0c      	add	r2, sp, #48	@ 0x30
 80057a6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80057aa:	930b      	str	r3, [sp, #44]	@ 0x2c
 80057ac:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80057ae:	f8dd b008 	ldr.w	fp, [sp, #8]
 80057b2:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 80057b6:	930a      	str	r3, [sp, #40]	@ 0x28
 80057b8:	ab98      	add	r3, sp, #608	@ 0x260
 80057ba:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057be:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 80057c2:	ab70      	add	r3, sp, #448	@ 0x1c0
 80057c4:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80057c8:	ae0c      	add	r6, sp, #48	@ 0x30
 80057ca:	4698      	mov	r8, r3
 80057cc:	46b1      	mov	r9, r6
 80057ce:	465f      	mov	r7, fp
 80057d0:	9307      	str	r3, [sp, #28]
 80057d2:	2f00      	cmp	r7, #0
 80057d4:	f1a8 0808 	sub.w	r8, r8, #8
 80057d8:	dc71      	bgt.n	80058be <__kernel_rem_pio2+0x1fa>
 80057da:	4652      	mov	r2, sl
 80057dc:	4620      	mov	r0, r4
 80057de:	4629      	mov	r1, r5
 80057e0:	f000 fa96 	bl	8005d10 <scalbn>
 80057e4:	2200      	movs	r2, #0
 80057e6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80057ea:	4604      	mov	r4, r0
 80057ec:	460d      	mov	r5, r1
 80057ee:	f7fa fe6b 	bl	80004c8 <__aeabi_dmul>
 80057f2:	f000 fb05 	bl	8005e00 <floor>
 80057f6:	2200      	movs	r2, #0
 80057f8:	4b6d      	ldr	r3, [pc, #436]	@ (80059b0 <__kernel_rem_pio2+0x2ec>)
 80057fa:	f7fa fe65 	bl	80004c8 <__aeabi_dmul>
 80057fe:	4602      	mov	r2, r0
 8005800:	460b      	mov	r3, r1
 8005802:	4620      	mov	r0, r4
 8005804:	4629      	mov	r1, r5
 8005806:	f7fa fca7 	bl	8000158 <__aeabi_dsub>
 800580a:	460d      	mov	r5, r1
 800580c:	4604      	mov	r4, r0
 800580e:	f7fb f8f5 	bl	80009fc <__aeabi_d2iz>
 8005812:	9005      	str	r0, [sp, #20]
 8005814:	f7fa fdee 	bl	80003f4 <__aeabi_i2d>
 8005818:	4602      	mov	r2, r0
 800581a:	460b      	mov	r3, r1
 800581c:	4620      	mov	r0, r4
 800581e:	4629      	mov	r1, r5
 8005820:	f7fa fc9a 	bl	8000158 <__aeabi_dsub>
 8005824:	f1ba 0f00 	cmp.w	sl, #0
 8005828:	4680      	mov	r8, r0
 800582a:	4689      	mov	r9, r1
 800582c:	dd6d      	ble.n	800590a <__kernel_rem_pio2+0x246>
 800582e:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 8005832:	ab0c      	add	r3, sp, #48	@ 0x30
 8005834:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8005838:	9c05      	ldr	r4, [sp, #20]
 800583a:	f1ca 0018 	rsb	r0, sl, #24
 800583e:	fa43 f200 	asr.w	r2, r3, r0
 8005842:	4414      	add	r4, r2
 8005844:	4082      	lsls	r2, r0
 8005846:	1a9b      	subs	r3, r3, r2
 8005848:	aa0c      	add	r2, sp, #48	@ 0x30
 800584a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800584e:	f1ca 0217 	rsb	r2, sl, #23
 8005852:	9405      	str	r4, [sp, #20]
 8005854:	4113      	asrs	r3, r2
 8005856:	9300      	str	r3, [sp, #0]
 8005858:	9b00      	ldr	r3, [sp, #0]
 800585a:	2b00      	cmp	r3, #0
 800585c:	dd64      	ble.n	8005928 <__kernel_rem_pio2+0x264>
 800585e:	2200      	movs	r2, #0
 8005860:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8005864:	4614      	mov	r4, r2
 8005866:	9b05      	ldr	r3, [sp, #20]
 8005868:	3301      	adds	r3, #1
 800586a:	9305      	str	r3, [sp, #20]
 800586c:	4593      	cmp	fp, r2
 800586e:	f300 80ab 	bgt.w	80059c8 <__kernel_rem_pio2+0x304>
 8005872:	f1ba 0f00 	cmp.w	sl, #0
 8005876:	dd07      	ble.n	8005888 <__kernel_rem_pio2+0x1c4>
 8005878:	f1ba 0f01 	cmp.w	sl, #1
 800587c:	f000 80b2 	beq.w	80059e4 <__kernel_rem_pio2+0x320>
 8005880:	f1ba 0f02 	cmp.w	sl, #2
 8005884:	f000 80b9 	beq.w	80059fa <__kernel_rem_pio2+0x336>
 8005888:	9b00      	ldr	r3, [sp, #0]
 800588a:	2b02      	cmp	r3, #2
 800588c:	d14c      	bne.n	8005928 <__kernel_rem_pio2+0x264>
 800588e:	4642      	mov	r2, r8
 8005890:	464b      	mov	r3, r9
 8005892:	2000      	movs	r0, #0
 8005894:	4947      	ldr	r1, [pc, #284]	@ (80059b4 <__kernel_rem_pio2+0x2f0>)
 8005896:	f7fa fc5f 	bl	8000158 <__aeabi_dsub>
 800589a:	4680      	mov	r8, r0
 800589c:	4689      	mov	r9, r1
 800589e:	2c00      	cmp	r4, #0
 80058a0:	d042      	beq.n	8005928 <__kernel_rem_pio2+0x264>
 80058a2:	4652      	mov	r2, sl
 80058a4:	2000      	movs	r0, #0
 80058a6:	4943      	ldr	r1, [pc, #268]	@ (80059b4 <__kernel_rem_pio2+0x2f0>)
 80058a8:	f000 fa32 	bl	8005d10 <scalbn>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fc50 	bl	8000158 <__aeabi_dsub>
 80058b8:	4680      	mov	r8, r0
 80058ba:	4689      	mov	r9, r1
 80058bc:	e034      	b.n	8005928 <__kernel_rem_pio2+0x264>
 80058be:	2200      	movs	r2, #0
 80058c0:	4b3d      	ldr	r3, [pc, #244]	@ (80059b8 <__kernel_rem_pio2+0x2f4>)
 80058c2:	4620      	mov	r0, r4
 80058c4:	4629      	mov	r1, r5
 80058c6:	f7fa fdff 	bl	80004c8 <__aeabi_dmul>
 80058ca:	f7fb f897 	bl	80009fc <__aeabi_d2iz>
 80058ce:	f7fa fd91 	bl	80003f4 <__aeabi_i2d>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	e9cd 2300 	strd	r2, r3, [sp]
 80058da:	2200      	movs	r2, #0
 80058dc:	4b37      	ldr	r3, [pc, #220]	@ (80059bc <__kernel_rem_pio2+0x2f8>)
 80058de:	f7fa fdf3 	bl	80004c8 <__aeabi_dmul>
 80058e2:	4602      	mov	r2, r0
 80058e4:	460b      	mov	r3, r1
 80058e6:	4620      	mov	r0, r4
 80058e8:	4629      	mov	r1, r5
 80058ea:	f7fa fc35 	bl	8000158 <__aeabi_dsub>
 80058ee:	f7fb f885 	bl	80009fc <__aeabi_d2iz>
 80058f2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80058f6:	f849 0b04 	str.w	r0, [r9], #4
 80058fa:	e9dd 0100 	ldrd	r0, r1, [sp]
 80058fe:	f7fa fc2d 	bl	800015c <__adddf3>
 8005902:	3f01      	subs	r7, #1
 8005904:	4604      	mov	r4, r0
 8005906:	460d      	mov	r5, r1
 8005908:	e763      	b.n	80057d2 <__kernel_rem_pio2+0x10e>
 800590a:	d106      	bne.n	800591a <__kernel_rem_pio2+0x256>
 800590c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8005910:	aa0c      	add	r2, sp, #48	@ 0x30
 8005912:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8005916:	15db      	asrs	r3, r3, #23
 8005918:	e79d      	b.n	8005856 <__kernel_rem_pio2+0x192>
 800591a:	2200      	movs	r2, #0
 800591c:	4b28      	ldr	r3, [pc, #160]	@ (80059c0 <__kernel_rem_pio2+0x2fc>)
 800591e:	f7fb f859 	bl	80009d4 <__aeabi_dcmpge>
 8005922:	2800      	cmp	r0, #0
 8005924:	d13f      	bne.n	80059a6 <__kernel_rem_pio2+0x2e2>
 8005926:	9000      	str	r0, [sp, #0]
 8005928:	2200      	movs	r2, #0
 800592a:	2300      	movs	r3, #0
 800592c:	4640      	mov	r0, r8
 800592e:	4649      	mov	r1, r9
 8005930:	f7fb f832 	bl	8000998 <__aeabi_dcmpeq>
 8005934:	2800      	cmp	r0, #0
 8005936:	f000 80af 	beq.w	8005a98 <__kernel_rem_pio2+0x3d4>
 800593a:	2200      	movs	r2, #0
 800593c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8005940:	9902      	ldr	r1, [sp, #8]
 8005942:	428b      	cmp	r3, r1
 8005944:	da61      	bge.n	8005a0a <__kernel_rem_pio2+0x346>
 8005946:	2a00      	cmp	r2, #0
 8005948:	d076      	beq.n	8005a38 <__kernel_rem_pio2+0x374>
 800594a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800594e:	ab0c      	add	r3, sp, #48	@ 0x30
 8005950:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8005954:	f1aa 0a18 	sub.w	sl, sl, #24
 8005958:	2b00      	cmp	r3, #0
 800595a:	d0f6      	beq.n	800594a <__kernel_rem_pio2+0x286>
 800595c:	4652      	mov	r2, sl
 800595e:	2000      	movs	r0, #0
 8005960:	4914      	ldr	r1, [pc, #80]	@ (80059b4 <__kernel_rem_pio2+0x2f0>)
 8005962:	f000 f9d5 	bl	8005d10 <scalbn>
 8005966:	465d      	mov	r5, fp
 8005968:	4606      	mov	r6, r0
 800596a:	460f      	mov	r7, r1
 800596c:	f04f 0900 	mov.w	r9, #0
 8005970:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005972:	f8df a044 	ldr.w	sl, [pc, #68]	@ 80059b8 <__kernel_rem_pio2+0x2f4>
 8005976:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800597a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800597e:	2d00      	cmp	r5, #0
 8005980:	f280 80c0 	bge.w	8005b04 <__kernel_rem_pio2+0x440>
 8005984:	465d      	mov	r5, fp
 8005986:	2d00      	cmp	r5, #0
 8005988:	f2c0 80f0 	blt.w	8005b6c <__kernel_rem_pio2+0x4a8>
 800598c:	4b0d      	ldr	r3, [pc, #52]	@ (80059c4 <__kernel_rem_pio2+0x300>)
 800598e:	f04f 0900 	mov.w	r9, #0
 8005992:	9306      	str	r3, [sp, #24]
 8005994:	ab70      	add	r3, sp, #448	@ 0x1c0
 8005996:	f04f 0a00 	mov.w	sl, #0
 800599a:	2700      	movs	r7, #0
 800599c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 80059a0:	ebab 0605 	sub.w	r6, fp, r5
 80059a4:	e0d6      	b.n	8005b54 <__kernel_rem_pio2+0x490>
 80059a6:	2302      	movs	r3, #2
 80059a8:	9300      	str	r3, [sp, #0]
 80059aa:	e758      	b.n	800585e <__kernel_rem_pio2+0x19a>
 80059ac:	08006160 	.word	0x08006160
 80059b0:	40200000 	.word	0x40200000
 80059b4:	3ff00000 	.word	0x3ff00000
 80059b8:	3e700000 	.word	0x3e700000
 80059bc:	41700000 	.word	0x41700000
 80059c0:	3fe00000 	.word	0x3fe00000
 80059c4:	08006120 	.word	0x08006120
 80059c8:	f856 3b04 	ldr.w	r3, [r6], #4
 80059cc:	b944      	cbnz	r4, 80059e0 <__kernel_rem_pio2+0x31c>
 80059ce:	b123      	cbz	r3, 80059da <__kernel_rem_pio2+0x316>
 80059d0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80059d4:	f846 3c04 	str.w	r3, [r6, #-4]
 80059d8:	2301      	movs	r3, #1
 80059da:	461c      	mov	r4, r3
 80059dc:	3201      	adds	r2, #1
 80059de:	e745      	b.n	800586c <__kernel_rem_pio2+0x1a8>
 80059e0:	1acb      	subs	r3, r1, r3
 80059e2:	e7f7      	b.n	80059d4 <__kernel_rem_pio2+0x310>
 80059e4:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80059e8:	ab0c      	add	r3, sp, #48	@ 0x30
 80059ea:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059ee:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80059f2:	a90c      	add	r1, sp, #48	@ 0x30
 80059f4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80059f8:	e746      	b.n	8005888 <__kernel_rem_pio2+0x1c4>
 80059fa:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80059fe:	ab0c      	add	r3, sp, #48	@ 0x30
 8005a00:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005a04:	f3c3 0315 	ubfx	r3, r3, #0, #22
 8005a08:	e7f3      	b.n	80059f2 <__kernel_rem_pio2+0x32e>
 8005a0a:	a90c      	add	r1, sp, #48	@ 0x30
 8005a0c:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 8005a10:	3b01      	subs	r3, #1
 8005a12:	430a      	orrs	r2, r1
 8005a14:	e794      	b.n	8005940 <__kernel_rem_pio2+0x27c>
 8005a16:	3401      	adds	r4, #1
 8005a18:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 8005a1c:	2a00      	cmp	r2, #0
 8005a1e:	d0fa      	beq.n	8005a16 <__kernel_rem_pio2+0x352>
 8005a20:	9b08      	ldr	r3, [sp, #32]
 8005a22:	aa20      	add	r2, sp, #128	@ 0x80
 8005a24:	445b      	add	r3, fp
 8005a26:	f10b 0801 	add.w	r8, fp, #1
 8005a2a:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 8005a2e:	445c      	add	r4, fp
 8005a30:	4544      	cmp	r4, r8
 8005a32:	da04      	bge.n	8005a3e <__kernel_rem_pio2+0x37a>
 8005a34:	46a3      	mov	fp, r4
 8005a36:	e6bf      	b.n	80057b8 <__kernel_rem_pio2+0xf4>
 8005a38:	2401      	movs	r4, #1
 8005a3a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005a3c:	e7ec      	b.n	8005a18 <__kernel_rem_pio2+0x354>
 8005a3e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005a40:	46ab      	mov	fp, r5
 8005a42:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8005a46:	f7fa fcd5 	bl	80003f4 <__aeabi_i2d>
 8005a4a:	f04f 0900 	mov.w	r9, #0
 8005a4e:	2600      	movs	r6, #0
 8005a50:	2700      	movs	r7, #0
 8005a52:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005a54:	e9c5 0100 	strd	r0, r1, [r5]
 8005a58:	3b08      	subs	r3, #8
 8005a5a:	9300      	str	r3, [sp, #0]
 8005a5c:	9b06      	ldr	r3, [sp, #24]
 8005a5e:	4599      	cmp	r9, r3
 8005a60:	dd07      	ble.n	8005a72 <__kernel_rem_pio2+0x3ae>
 8005a62:	9b07      	ldr	r3, [sp, #28]
 8005a64:	f108 0801 	add.w	r8, r8, #1
 8005a68:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8005a6c:	3508      	adds	r5, #8
 8005a6e:	9307      	str	r3, [sp, #28]
 8005a70:	e7de      	b.n	8005a30 <__kernel_rem_pio2+0x36c>
 8005a72:	9900      	ldr	r1, [sp, #0]
 8005a74:	f109 0901 	add.w	r9, r9, #1
 8005a78:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8005a7c:	9100      	str	r1, [sp, #0]
 8005a7e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8005a82:	f7fa fd21 	bl	80004c8 <__aeabi_dmul>
 8005a86:	4602      	mov	r2, r0
 8005a88:	460b      	mov	r3, r1
 8005a8a:	4630      	mov	r0, r6
 8005a8c:	4639      	mov	r1, r7
 8005a8e:	f7fa fb65 	bl	800015c <__adddf3>
 8005a92:	4606      	mov	r6, r0
 8005a94:	460f      	mov	r7, r1
 8005a96:	e7e1      	b.n	8005a5c <__kernel_rem_pio2+0x398>
 8005a98:	f1ca 0200 	rsb	r2, sl, #0
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	f000 f936 	bl	8005d10 <scalbn>
 8005aa4:	2200      	movs	r2, #0
 8005aa6:	4b97      	ldr	r3, [pc, #604]	@ (8005d04 <__kernel_rem_pio2+0x640>)
 8005aa8:	4604      	mov	r4, r0
 8005aaa:	460d      	mov	r5, r1
 8005aac:	f7fa ff92 	bl	80009d4 <__aeabi_dcmpge>
 8005ab0:	b300      	cbz	r0, 8005af4 <__kernel_rem_pio2+0x430>
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	4b94      	ldr	r3, [pc, #592]	@ (8005d08 <__kernel_rem_pio2+0x644>)
 8005ab6:	4620      	mov	r0, r4
 8005ab8:	4629      	mov	r1, r5
 8005aba:	f7fa fd05 	bl	80004c8 <__aeabi_dmul>
 8005abe:	f7fa ff9d 	bl	80009fc <__aeabi_d2iz>
 8005ac2:	4606      	mov	r6, r0
 8005ac4:	f7fa fc96 	bl	80003f4 <__aeabi_i2d>
 8005ac8:	2200      	movs	r2, #0
 8005aca:	4b8e      	ldr	r3, [pc, #568]	@ (8005d04 <__kernel_rem_pio2+0x640>)
 8005acc:	f7fa fcfc 	bl	80004c8 <__aeabi_dmul>
 8005ad0:	460b      	mov	r3, r1
 8005ad2:	4602      	mov	r2, r0
 8005ad4:	4629      	mov	r1, r5
 8005ad6:	4620      	mov	r0, r4
 8005ad8:	f7fa fb3e 	bl	8000158 <__aeabi_dsub>
 8005adc:	f7fa ff8e 	bl	80009fc <__aeabi_d2iz>
 8005ae0:	ab0c      	add	r3, sp, #48	@ 0x30
 8005ae2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005ae6:	f10b 0b01 	add.w	fp, fp, #1
 8005aea:	f10a 0a18 	add.w	sl, sl, #24
 8005aee:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8005af2:	e733      	b.n	800595c <__kernel_rem_pio2+0x298>
 8005af4:	4620      	mov	r0, r4
 8005af6:	4629      	mov	r1, r5
 8005af8:	f7fa ff80 	bl	80009fc <__aeabi_d2iz>
 8005afc:	ab0c      	add	r3, sp, #48	@ 0x30
 8005afe:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8005b02:	e72b      	b.n	800595c <__kernel_rem_pio2+0x298>
 8005b04:	ab0c      	add	r3, sp, #48	@ 0x30
 8005b06:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8005b0a:	f7fa fc73 	bl	80003f4 <__aeabi_i2d>
 8005b0e:	4632      	mov	r2, r6
 8005b10:	463b      	mov	r3, r7
 8005b12:	f7fa fcd9 	bl	80004c8 <__aeabi_dmul>
 8005b16:	464a      	mov	r2, r9
 8005b18:	e868 0102 	strd	r0, r1, [r8], #-8
 8005b1c:	4653      	mov	r3, sl
 8005b1e:	4630      	mov	r0, r6
 8005b20:	4639      	mov	r1, r7
 8005b22:	f7fa fcd1 	bl	80004c8 <__aeabi_dmul>
 8005b26:	3d01      	subs	r5, #1
 8005b28:	4606      	mov	r6, r0
 8005b2a:	460f      	mov	r7, r1
 8005b2c:	e727      	b.n	800597e <__kernel_rem_pio2+0x2ba>
 8005b2e:	f8dd c018 	ldr.w	ip, [sp, #24]
 8005b32:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8005b36:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8005b3a:	f8cd c018 	str.w	ip, [sp, #24]
 8005b3e:	f7fa fcc3 	bl	80004c8 <__aeabi_dmul>
 8005b42:	4602      	mov	r2, r0
 8005b44:	460b      	mov	r3, r1
 8005b46:	4648      	mov	r0, r9
 8005b48:	4651      	mov	r1, sl
 8005b4a:	f7fa fb07 	bl	800015c <__adddf3>
 8005b4e:	4681      	mov	r9, r0
 8005b50:	468a      	mov	sl, r1
 8005b52:	3701      	adds	r7, #1
 8005b54:	9b02      	ldr	r3, [sp, #8]
 8005b56:	429f      	cmp	r7, r3
 8005b58:	dc01      	bgt.n	8005b5e <__kernel_rem_pio2+0x49a>
 8005b5a:	42be      	cmp	r6, r7
 8005b5c:	dae7      	bge.n	8005b2e <__kernel_rem_pio2+0x46a>
 8005b5e:	ab48      	add	r3, sp, #288	@ 0x120
 8005b60:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8005b64:	e9c6 9a00 	strd	r9, sl, [r6]
 8005b68:	3d01      	subs	r5, #1
 8005b6a:	e70c      	b.n	8005986 <__kernel_rem_pio2+0x2c2>
 8005b6c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005b6e:	2b02      	cmp	r3, #2
 8005b70:	dc09      	bgt.n	8005b86 <__kernel_rem_pio2+0x4c2>
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	dc2c      	bgt.n	8005bd0 <__kernel_rem_pio2+0x50c>
 8005b76:	d04e      	beq.n	8005c16 <__kernel_rem_pio2+0x552>
 8005b78:	9b05      	ldr	r3, [sp, #20]
 8005b7a:	f003 0007 	and.w	r0, r3, #7
 8005b7e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8005b82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b86:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8005b88:	2b03      	cmp	r3, #3
 8005b8a:	d1f5      	bne.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005b8c:	ab48      	add	r3, sp, #288	@ 0x120
 8005b8e:	441c      	add	r4, r3
 8005b90:	4625      	mov	r5, r4
 8005b92:	46da      	mov	sl, fp
 8005b94:	f1ba 0f00 	cmp.w	sl, #0
 8005b98:	dc63      	bgt.n	8005c62 <__kernel_rem_pio2+0x59e>
 8005b9a:	4625      	mov	r5, r4
 8005b9c:	46da      	mov	sl, fp
 8005b9e:	f1ba 0f01 	cmp.w	sl, #1
 8005ba2:	dc7b      	bgt.n	8005c9c <__kernel_rem_pio2+0x5d8>
 8005ba4:	2000      	movs	r0, #0
 8005ba6:	2100      	movs	r1, #0
 8005ba8:	f1bb 0f01 	cmp.w	fp, #1
 8005bac:	f300 8093 	bgt.w	8005cd6 <__kernel_rem_pio2+0x612>
 8005bb0:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8005bb4:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8005bb8:	9b00      	ldr	r3, [sp, #0]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	f040 8092 	bne.w	8005ce4 <__kernel_rem_pio2+0x620>
 8005bc0:	9b04      	ldr	r3, [sp, #16]
 8005bc2:	e9c3 7800 	strd	r7, r8, [r3]
 8005bc6:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8005bca:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8005bce:	e7d3      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005bd0:	465d      	mov	r5, fp
 8005bd2:	2000      	movs	r0, #0
 8005bd4:	2100      	movs	r1, #0
 8005bd6:	ab48      	add	r3, sp, #288	@ 0x120
 8005bd8:	441c      	add	r4, r3
 8005bda:	2d00      	cmp	r5, #0
 8005bdc:	da32      	bge.n	8005c44 <__kernel_rem_pio2+0x580>
 8005bde:	9b00      	ldr	r3, [sp, #0]
 8005be0:	2b00      	cmp	r3, #0
 8005be2:	d035      	beq.n	8005c50 <__kernel_rem_pio2+0x58c>
 8005be4:	4602      	mov	r2, r0
 8005be6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005bea:	9c04      	ldr	r4, [sp, #16]
 8005bec:	2501      	movs	r5, #1
 8005bee:	e9c4 2300 	strd	r2, r3, [r4]
 8005bf2:	4602      	mov	r2, r0
 8005bf4:	460b      	mov	r3, r1
 8005bf6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8005bfa:	f7fa faad 	bl	8000158 <__aeabi_dsub>
 8005bfe:	ac48      	add	r4, sp, #288	@ 0x120
 8005c00:	45ab      	cmp	fp, r5
 8005c02:	da28      	bge.n	8005c56 <__kernel_rem_pio2+0x592>
 8005c04:	9b00      	ldr	r3, [sp, #0]
 8005c06:	b113      	cbz	r3, 8005c0e <__kernel_rem_pio2+0x54a>
 8005c08:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c0c:	4619      	mov	r1, r3
 8005c0e:	9b04      	ldr	r3, [sp, #16]
 8005c10:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8005c14:	e7b0      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005c16:	2000      	movs	r0, #0
 8005c18:	2100      	movs	r1, #0
 8005c1a:	ab48      	add	r3, sp, #288	@ 0x120
 8005c1c:	441c      	add	r4, r3
 8005c1e:	f1bb 0f00 	cmp.w	fp, #0
 8005c22:	da08      	bge.n	8005c36 <__kernel_rem_pio2+0x572>
 8005c24:	9b00      	ldr	r3, [sp, #0]
 8005c26:	b113      	cbz	r3, 8005c2e <__kernel_rem_pio2+0x56a>
 8005c28:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005c2c:	4619      	mov	r1, r3
 8005c2e:	9b04      	ldr	r3, [sp, #16]
 8005c30:	e9c3 0100 	strd	r0, r1, [r3]
 8005c34:	e7a0      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005c36:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005c3a:	f7fa fa8f 	bl	800015c <__adddf3>
 8005c3e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005c42:	e7ec      	b.n	8005c1e <__kernel_rem_pio2+0x55a>
 8005c44:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005c48:	f7fa fa88 	bl	800015c <__adddf3>
 8005c4c:	3d01      	subs	r5, #1
 8005c4e:	e7c4      	b.n	8005bda <__kernel_rem_pio2+0x516>
 8005c50:	4602      	mov	r2, r0
 8005c52:	460b      	mov	r3, r1
 8005c54:	e7c9      	b.n	8005bea <__kernel_rem_pio2+0x526>
 8005c56:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8005c5a:	f7fa fa7f 	bl	800015c <__adddf3>
 8005c5e:	3501      	adds	r5, #1
 8005c60:	e7ce      	b.n	8005c00 <__kernel_rem_pio2+0x53c>
 8005c62:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005c66:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005c6a:	4640      	mov	r0, r8
 8005c6c:	4649      	mov	r1, r9
 8005c6e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005c72:	f7fa fa73 	bl	800015c <__adddf3>
 8005c76:	4602      	mov	r2, r0
 8005c78:	460b      	mov	r3, r1
 8005c7a:	4606      	mov	r6, r0
 8005c7c:	460f      	mov	r7, r1
 8005c7e:	4640      	mov	r0, r8
 8005c80:	4649      	mov	r1, r9
 8005c82:	f7fa fa69 	bl	8000158 <__aeabi_dsub>
 8005c86:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005c8a:	f7fa fa67 	bl	800015c <__adddf3>
 8005c8e:	e865 0102 	strd	r0, r1, [r5], #-8
 8005c92:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005c96:	e9c5 6700 	strd	r6, r7, [r5]
 8005c9a:	e77b      	b.n	8005b94 <__kernel_rem_pio2+0x4d0>
 8005c9c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8005ca0:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8005ca4:	4640      	mov	r0, r8
 8005ca6:	4649      	mov	r1, r9
 8005ca8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8005cac:	f7fa fa56 	bl	800015c <__adddf3>
 8005cb0:	4602      	mov	r2, r0
 8005cb2:	460b      	mov	r3, r1
 8005cb4:	4606      	mov	r6, r0
 8005cb6:	460f      	mov	r7, r1
 8005cb8:	4640      	mov	r0, r8
 8005cba:	4649      	mov	r1, r9
 8005cbc:	f7fa fa4c 	bl	8000158 <__aeabi_dsub>
 8005cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8005cc4:	f7fa fa4a 	bl	800015c <__adddf3>
 8005cc8:	e865 0102 	strd	r0, r1, [r5], #-8
 8005ccc:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8005cd0:	e9c5 6700 	strd	r6, r7, [r5]
 8005cd4:	e763      	b.n	8005b9e <__kernel_rem_pio2+0x4da>
 8005cd6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8005cda:	f7fa fa3f 	bl	800015c <__adddf3>
 8005cde:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8005ce2:	e761      	b.n	8005ba8 <__kernel_rem_pio2+0x4e4>
 8005ce4:	9b04      	ldr	r3, [sp, #16]
 8005ce6:	9a04      	ldr	r2, [sp, #16]
 8005ce8:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8005cec:	601f      	str	r7, [r3, #0]
 8005cee:	605c      	str	r4, [r3, #4]
 8005cf0:	609d      	str	r5, [r3, #8]
 8005cf2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8005cf6:	60d3      	str	r3, [r2, #12]
 8005cf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8005cfc:	6110      	str	r0, [r2, #16]
 8005cfe:	6153      	str	r3, [r2, #20]
 8005d00:	e73a      	b.n	8005b78 <__kernel_rem_pio2+0x4b4>
 8005d02:	bf00      	nop
 8005d04:	41700000 	.word	0x41700000
 8005d08:	3e700000 	.word	0x3e700000
 8005d0c:	00000000 	.word	0x00000000

08005d10 <scalbn>:
 8005d10:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8005d14:	4616      	mov	r6, r2
 8005d16:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d1a:	4683      	mov	fp, r0
 8005d1c:	468c      	mov	ip, r1
 8005d1e:	460b      	mov	r3, r1
 8005d20:	b982      	cbnz	r2, 8005d44 <scalbn+0x34>
 8005d22:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8005d26:	4303      	orrs	r3, r0
 8005d28:	d039      	beq.n	8005d9e <scalbn+0x8e>
 8005d2a:	4b2f      	ldr	r3, [pc, #188]	@ (8005de8 <scalbn+0xd8>)
 8005d2c:	2200      	movs	r2, #0
 8005d2e:	f7fa fbcb 	bl	80004c8 <__aeabi_dmul>
 8005d32:	4b2e      	ldr	r3, [pc, #184]	@ (8005dec <scalbn+0xdc>)
 8005d34:	4683      	mov	fp, r0
 8005d36:	429e      	cmp	r6, r3
 8005d38:	468c      	mov	ip, r1
 8005d3a:	da0d      	bge.n	8005d58 <scalbn+0x48>
 8005d3c:	a326      	add	r3, pc, #152	@ (adr r3, 8005dd8 <scalbn+0xc8>)
 8005d3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d42:	e01b      	b.n	8005d7c <scalbn+0x6c>
 8005d44:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8005d48:	42ba      	cmp	r2, r7
 8005d4a:	d109      	bne.n	8005d60 <scalbn+0x50>
 8005d4c:	4602      	mov	r2, r0
 8005d4e:	f7fa fa05 	bl	800015c <__adddf3>
 8005d52:	4683      	mov	fp, r0
 8005d54:	468c      	mov	ip, r1
 8005d56:	e022      	b.n	8005d9e <scalbn+0x8e>
 8005d58:	460b      	mov	r3, r1
 8005d5a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005d5e:	3a36      	subs	r2, #54	@ 0x36
 8005d60:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8005d64:	428e      	cmp	r6, r1
 8005d66:	dd0c      	ble.n	8005d82 <scalbn+0x72>
 8005d68:	a31d      	add	r3, pc, #116	@ (adr r3, 8005de0 <scalbn+0xd0>)
 8005d6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005d6e:	461c      	mov	r4, r3
 8005d70:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8005d74:	f361 74df 	bfi	r4, r1, #31, #1
 8005d78:	4621      	mov	r1, r4
 8005d7a:	481d      	ldr	r0, [pc, #116]	@ (8005df0 <scalbn+0xe0>)
 8005d7c:	f7fa fba4 	bl	80004c8 <__aeabi_dmul>
 8005d80:	e7e7      	b.n	8005d52 <scalbn+0x42>
 8005d82:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8005d86:	4432      	add	r2, r6
 8005d88:	428a      	cmp	r2, r1
 8005d8a:	dced      	bgt.n	8005d68 <scalbn+0x58>
 8005d8c:	2a00      	cmp	r2, #0
 8005d8e:	dd0a      	ble.n	8005da6 <scalbn+0x96>
 8005d90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005d94:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005d98:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005d9c:	46ac      	mov	ip, r5
 8005d9e:	4658      	mov	r0, fp
 8005da0:	4661      	mov	r1, ip
 8005da2:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8005da6:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8005daa:	da09      	bge.n	8005dc0 <scalbn+0xb0>
 8005dac:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8005db0:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8005db4:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8005db8:	480e      	ldr	r0, [pc, #56]	@ (8005df4 <scalbn+0xe4>)
 8005dba:	f041 011f 	orr.w	r1, r1, #31
 8005dbe:	e7bd      	b.n	8005d3c <scalbn+0x2c>
 8005dc0:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8005dc4:	3236      	adds	r2, #54	@ 0x36
 8005dc6:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8005dca:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005dce:	4658      	mov	r0, fp
 8005dd0:	4629      	mov	r1, r5
 8005dd2:	2200      	movs	r2, #0
 8005dd4:	4b08      	ldr	r3, [pc, #32]	@ (8005df8 <scalbn+0xe8>)
 8005dd6:	e7d1      	b.n	8005d7c <scalbn+0x6c>
 8005dd8:	c2f8f359 	.word	0xc2f8f359
 8005ddc:	01a56e1f 	.word	0x01a56e1f
 8005de0:	8800759c 	.word	0x8800759c
 8005de4:	7e37e43c 	.word	0x7e37e43c
 8005de8:	43500000 	.word	0x43500000
 8005dec:	ffff3cb0 	.word	0xffff3cb0
 8005df0:	8800759c 	.word	0x8800759c
 8005df4:	c2f8f359 	.word	0xc2f8f359
 8005df8:	3c900000 	.word	0x3c900000
 8005dfc:	00000000 	.word	0x00000000

08005e00 <floor>:
 8005e00:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005e04:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8005e08:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8005e0c:	2e13      	cmp	r6, #19
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	460c      	mov	r4, r1
 8005e14:	4605      	mov	r5, r0
 8005e16:	4680      	mov	r8, r0
 8005e18:	dc35      	bgt.n	8005e86 <floor+0x86>
 8005e1a:	2e00      	cmp	r6, #0
 8005e1c:	da17      	bge.n	8005e4e <floor+0x4e>
 8005e1e:	a334      	add	r3, pc, #208	@ (adr r3, 8005ef0 <floor+0xf0>)
 8005e20:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e24:	f7fa f99a 	bl	800015c <__adddf3>
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	f7fa fddc 	bl	80009e8 <__aeabi_dcmpgt>
 8005e30:	b150      	cbz	r0, 8005e48 <floor+0x48>
 8005e32:	2c00      	cmp	r4, #0
 8005e34:	da57      	bge.n	8005ee6 <floor+0xe6>
 8005e36:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8005e3a:	432c      	orrs	r4, r5
 8005e3c:	2500      	movs	r5, #0
 8005e3e:	42ac      	cmp	r4, r5
 8005e40:	4c2d      	ldr	r4, [pc, #180]	@ (8005ef8 <floor+0xf8>)
 8005e42:	bf08      	it	eq
 8005e44:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8005e48:	4623      	mov	r3, r4
 8005e4a:	462a      	mov	r2, r5
 8005e4c:	e024      	b.n	8005e98 <floor+0x98>
 8005e4e:	4f2b      	ldr	r7, [pc, #172]	@ (8005efc <floor+0xfc>)
 8005e50:	4137      	asrs	r7, r6
 8005e52:	ea01 0c07 	and.w	ip, r1, r7
 8005e56:	ea5c 0c00 	orrs.w	ip, ip, r0
 8005e5a:	d01d      	beq.n	8005e98 <floor+0x98>
 8005e5c:	a324      	add	r3, pc, #144	@ (adr r3, 8005ef0 <floor+0xf0>)
 8005e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e62:	f7fa f97b 	bl	800015c <__adddf3>
 8005e66:	2200      	movs	r2, #0
 8005e68:	2300      	movs	r3, #0
 8005e6a:	f7fa fdbd 	bl	80009e8 <__aeabi_dcmpgt>
 8005e6e:	2800      	cmp	r0, #0
 8005e70:	d0ea      	beq.n	8005e48 <floor+0x48>
 8005e72:	2c00      	cmp	r4, #0
 8005e74:	bfbe      	ittt	lt
 8005e76:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8005e7a:	4133      	asrlt	r3, r6
 8005e7c:	18e4      	addlt	r4, r4, r3
 8005e7e:	2500      	movs	r5, #0
 8005e80:	ea24 0407 	bic.w	r4, r4, r7
 8005e84:	e7e0      	b.n	8005e48 <floor+0x48>
 8005e86:	2e33      	cmp	r6, #51	@ 0x33
 8005e88:	dd0a      	ble.n	8005ea0 <floor+0xa0>
 8005e8a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8005e8e:	d103      	bne.n	8005e98 <floor+0x98>
 8005e90:	f7fa f964 	bl	800015c <__adddf3>
 8005e94:	4602      	mov	r2, r0
 8005e96:	460b      	mov	r3, r1
 8005e98:	4610      	mov	r0, r2
 8005e9a:	4619      	mov	r1, r3
 8005e9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ea0:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8005ea4:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8005ea8:	fa2c f707 	lsr.w	r7, ip, r7
 8005eac:	4207      	tst	r7, r0
 8005eae:	d0f3      	beq.n	8005e98 <floor+0x98>
 8005eb0:	a30f      	add	r3, pc, #60	@ (adr r3, 8005ef0 <floor+0xf0>)
 8005eb2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005eb6:	f7fa f951 	bl	800015c <__adddf3>
 8005eba:	2200      	movs	r2, #0
 8005ebc:	2300      	movs	r3, #0
 8005ebe:	f7fa fd93 	bl	80009e8 <__aeabi_dcmpgt>
 8005ec2:	2800      	cmp	r0, #0
 8005ec4:	d0c0      	beq.n	8005e48 <floor+0x48>
 8005ec6:	2c00      	cmp	r4, #0
 8005ec8:	da0a      	bge.n	8005ee0 <floor+0xe0>
 8005eca:	2e14      	cmp	r6, #20
 8005ecc:	d101      	bne.n	8005ed2 <floor+0xd2>
 8005ece:	3401      	adds	r4, #1
 8005ed0:	e006      	b.n	8005ee0 <floor+0xe0>
 8005ed2:	2301      	movs	r3, #1
 8005ed4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8005ed8:	40b3      	lsls	r3, r6
 8005eda:	441d      	add	r5, r3
 8005edc:	4545      	cmp	r5, r8
 8005ede:	d3f6      	bcc.n	8005ece <floor+0xce>
 8005ee0:	ea25 0507 	bic.w	r5, r5, r7
 8005ee4:	e7b0      	b.n	8005e48 <floor+0x48>
 8005ee6:	2500      	movs	r5, #0
 8005ee8:	462c      	mov	r4, r5
 8005eea:	e7ad      	b.n	8005e48 <floor+0x48>
 8005eec:	f3af 8000 	nop.w
 8005ef0:	8800759c 	.word	0x8800759c
 8005ef4:	7e37e43c 	.word	0x7e37e43c
 8005ef8:	bff00000 	.word	0xbff00000
 8005efc:	000fffff 	.word	0x000fffff

08005f00 <memset>:
 8005f00:	4603      	mov	r3, r0
 8005f02:	4402      	add	r2, r0
 8005f04:	4293      	cmp	r3, r2
 8005f06:	d100      	bne.n	8005f0a <memset+0xa>
 8005f08:	4770      	bx	lr
 8005f0a:	f803 1b01 	strb.w	r1, [r3], #1
 8005f0e:	e7f9      	b.n	8005f04 <memset+0x4>

08005f10 <__libc_init_array>:
 8005f10:	b570      	push	{r4, r5, r6, lr}
 8005f12:	2600      	movs	r6, #0
 8005f14:	4d0c      	ldr	r5, [pc, #48]	@ (8005f48 <__libc_init_array+0x38>)
 8005f16:	4c0d      	ldr	r4, [pc, #52]	@ (8005f4c <__libc_init_array+0x3c>)
 8005f18:	1b64      	subs	r4, r4, r5
 8005f1a:	10a4      	asrs	r4, r4, #2
 8005f1c:	42a6      	cmp	r6, r4
 8005f1e:	d109      	bne.n	8005f34 <__libc_init_array+0x24>
 8005f20:	f000 f81a 	bl	8005f58 <_init>
 8005f24:	2600      	movs	r6, #0
 8005f26:	4d0a      	ldr	r5, [pc, #40]	@ (8005f50 <__libc_init_array+0x40>)
 8005f28:	4c0a      	ldr	r4, [pc, #40]	@ (8005f54 <__libc_init_array+0x44>)
 8005f2a:	1b64      	subs	r4, r4, r5
 8005f2c:	10a4      	asrs	r4, r4, #2
 8005f2e:	42a6      	cmp	r6, r4
 8005f30:	d105      	bne.n	8005f3e <__libc_init_array+0x2e>
 8005f32:	bd70      	pop	{r4, r5, r6, pc}
 8005f34:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f38:	4798      	blx	r3
 8005f3a:	3601      	adds	r6, #1
 8005f3c:	e7ee      	b.n	8005f1c <__libc_init_array+0xc>
 8005f3e:	f855 3b04 	ldr.w	r3, [r5], #4
 8005f42:	4798      	blx	r3
 8005f44:	3601      	adds	r6, #1
 8005f46:	e7f2      	b.n	8005f2e <__libc_init_array+0x1e>
 8005f48:	08006170 	.word	0x08006170
 8005f4c:	08006170 	.word	0x08006170
 8005f50:	08006170 	.word	0x08006170
 8005f54:	08006174 	.word	0x08006174

08005f58 <_init>:
 8005f58:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f5a:	bf00      	nop
 8005f5c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f5e:	bc08      	pop	{r3}
 8005f60:	469e      	mov	lr, r3
 8005f62:	4770      	bx	lr

08005f64 <_fini>:
 8005f64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005f66:	bf00      	nop
 8005f68:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005f6a:	bc08      	pop	{r3}
 8005f6c:	469e      	mov	lr, r3
 8005f6e:	4770      	bx	lr
