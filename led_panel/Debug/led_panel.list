
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00004dd8  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000398  08004ee8  08004ee8  00005ee8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08005280  08005280  0000709c  2**0
                  CONTENTS
  4 .ARM          00000000  08005280  08005280  0000709c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08005280  08005280  0000709c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08005280  08005280  00006280  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005284  08005284  00006284  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000009c  20000000  08005288  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000012b0  200000a0  08005324  000070a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20001350  08005324  00007350  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000709c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b121  00000000  00000000  000070c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002108  00000000  00000000  000121e6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d10  00000000  00000000  000142f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a1b  00000000  00000000  00015000  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018d8b  00000000  00000000  00015a1b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000def8  00000000  00000000  0002e7a6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cd78  00000000  00000000  0003c69e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c9416  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003ce4  00000000  00000000  000c945c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cd140  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200000a0 	.word	0x200000a0
 800012c:	00000000 	.word	0x00000000
 8000130:	08004ed0 	.word	0x08004ed0

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200000a4 	.word	0x200000a4
 800014c:	08004ed0 	.word	0x08004ed0

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__gedf2>:
 80008ec:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 80008f0:	e006      	b.n	8000900 <__cmpdf2+0x4>
 80008f2:	bf00      	nop

080008f4 <__ledf2>:
 80008f4:	f04f 0c01 	mov.w	ip, #1
 80008f8:	e002      	b.n	8000900 <__cmpdf2+0x4>
 80008fa:	bf00      	nop

080008fc <__cmpdf2>:
 80008fc:	f04f 0c01 	mov.w	ip, #1
 8000900:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000904:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000908:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 800090c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000910:	bf18      	it	ne
 8000912:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000916:	d01b      	beq.n	8000950 <__cmpdf2+0x54>
 8000918:	b001      	add	sp, #4
 800091a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 800091e:	bf0c      	ite	eq
 8000920:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000924:	ea91 0f03 	teqne	r1, r3
 8000928:	bf02      	ittt	eq
 800092a:	ea90 0f02 	teqeq	r0, r2
 800092e:	2000      	moveq	r0, #0
 8000930:	4770      	bxeq	lr
 8000932:	f110 0f00 	cmn.w	r0, #0
 8000936:	ea91 0f03 	teq	r1, r3
 800093a:	bf58      	it	pl
 800093c:	4299      	cmppl	r1, r3
 800093e:	bf08      	it	eq
 8000940:	4290      	cmpeq	r0, r2
 8000942:	bf2c      	ite	cs
 8000944:	17d8      	asrcs	r0, r3, #31
 8000946:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 800094a:	f040 0001 	orr.w	r0, r0, #1
 800094e:	4770      	bx	lr
 8000950:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000954:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000958:	d102      	bne.n	8000960 <__cmpdf2+0x64>
 800095a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 800095e:	d107      	bne.n	8000970 <__cmpdf2+0x74>
 8000960:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000964:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000968:	d1d6      	bne.n	8000918 <__cmpdf2+0x1c>
 800096a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 800096e:	d0d3      	beq.n	8000918 <__cmpdf2+0x1c>
 8000970:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000974:	4770      	bx	lr
 8000976:	bf00      	nop

08000978 <__aeabi_cdrcmple>:
 8000978:	4684      	mov	ip, r0
 800097a:	4610      	mov	r0, r2
 800097c:	4662      	mov	r2, ip
 800097e:	468c      	mov	ip, r1
 8000980:	4619      	mov	r1, r3
 8000982:	4663      	mov	r3, ip
 8000984:	e000      	b.n	8000988 <__aeabi_cdcmpeq>
 8000986:	bf00      	nop

08000988 <__aeabi_cdcmpeq>:
 8000988:	b501      	push	{r0, lr}
 800098a:	f7ff ffb7 	bl	80008fc <__cmpdf2>
 800098e:	2800      	cmp	r0, #0
 8000990:	bf48      	it	mi
 8000992:	f110 0f00 	cmnmi.w	r0, #0
 8000996:	bd01      	pop	{r0, pc}

08000998 <__aeabi_dcmpeq>:
 8000998:	f84d ed08 	str.w	lr, [sp, #-8]!
 800099c:	f7ff fff4 	bl	8000988 <__aeabi_cdcmpeq>
 80009a0:	bf0c      	ite	eq
 80009a2:	2001      	moveq	r0, #1
 80009a4:	2000      	movne	r0, #0
 80009a6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009aa:	bf00      	nop

080009ac <__aeabi_dcmplt>:
 80009ac:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009b0:	f7ff ffea 	bl	8000988 <__aeabi_cdcmpeq>
 80009b4:	bf34      	ite	cc
 80009b6:	2001      	movcc	r0, #1
 80009b8:	2000      	movcs	r0, #0
 80009ba:	f85d fb08 	ldr.w	pc, [sp], #8
 80009be:	bf00      	nop

080009c0 <__aeabi_dcmple>:
 80009c0:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009c4:	f7ff ffe0 	bl	8000988 <__aeabi_cdcmpeq>
 80009c8:	bf94      	ite	ls
 80009ca:	2001      	movls	r0, #1
 80009cc:	2000      	movhi	r0, #0
 80009ce:	f85d fb08 	ldr.w	pc, [sp], #8
 80009d2:	bf00      	nop

080009d4 <__aeabi_dcmpge>:
 80009d4:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009d8:	f7ff ffce 	bl	8000978 <__aeabi_cdrcmple>
 80009dc:	bf94      	ite	ls
 80009de:	2001      	movls	r0, #1
 80009e0:	2000      	movhi	r0, #0
 80009e2:	f85d fb08 	ldr.w	pc, [sp], #8
 80009e6:	bf00      	nop

080009e8 <__aeabi_dcmpgt>:
 80009e8:	f84d ed08 	str.w	lr, [sp, #-8]!
 80009ec:	f7ff ffc4 	bl	8000978 <__aeabi_cdrcmple>
 80009f0:	bf34      	ite	cc
 80009f2:	2001      	movcc	r0, #1
 80009f4:	2000      	movcs	r0, #0
 80009f6:	f85d fb08 	ldr.w	pc, [sp], #8
 80009fa:	bf00      	nop

080009fc <__aeabi_d2iz>:
 80009fc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000a00:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000a04:	d215      	bcs.n	8000a32 <__aeabi_d2iz+0x36>
 8000a06:	d511      	bpl.n	8000a2c <__aeabi_d2iz+0x30>
 8000a08:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000a0c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000a10:	d912      	bls.n	8000a38 <__aeabi_d2iz+0x3c>
 8000a12:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000a16:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000a1a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000a1e:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000a22:	fa23 f002 	lsr.w	r0, r3, r2
 8000a26:	bf18      	it	ne
 8000a28:	4240      	negne	r0, r0
 8000a2a:	4770      	bx	lr
 8000a2c:	f04f 0000 	mov.w	r0, #0
 8000a30:	4770      	bx	lr
 8000a32:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000a36:	d105      	bne.n	8000a44 <__aeabi_d2iz+0x48>
 8000a38:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000a3c:	bf08      	it	eq
 8000a3e:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000a42:	4770      	bx	lr
 8000a44:	f04f 0000 	mov.w	r0, #0
 8000a48:	4770      	bx	lr
 8000a4a:	bf00      	nop

08000a4c <scroll_msg>:

#define MSG_COUNT 2
Message msgs[MSG_COUNT];


void scroll_msg(Message* msg) {
 8000a4c:	b580      	push	{r7, lr}
 8000a4e:	b082      	sub	sp, #8
 8000a50:	af00      	add	r7, sp, #0
 8000a52:	6078      	str	r0, [r7, #4]
	draw_text(msg->string, msg->rect.x, msg->rect.y, msg->bold);
 8000a54:	687b      	ldr	r3, [r7, #4]
 8000a56:	6818      	ldr	r0, [r3, #0]
 8000a58:	687b      	ldr	r3, [r7, #4]
 8000a5a:	6859      	ldr	r1, [r3, #4]
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	689a      	ldr	r2, [r3, #8]
 8000a60:	687b      	ldr	r3, [r7, #4]
 8000a62:	7d1b      	ldrb	r3, [r3, #20]
 8000a64:	f000 ff88 	bl	8001978 <draw_text>
	msg->rect.x += msg->dir;//DeltaTime * 60;
 8000a68:	687b      	ldr	r3, [r7, #4]
 8000a6a:	685a      	ldr	r2, [r3, #4]
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	699b      	ldr	r3, [r3, #24]
 8000a70:	441a      	add	r2, r3
 8000a72:	687b      	ldr	r3, [r7, #4]
 8000a74:	605a      	str	r2, [r3, #4]
	if (msg->dir < 0) {
 8000a76:	687b      	ldr	r3, [r7, #4]
 8000a78:	699b      	ldr	r3, [r3, #24]
 8000a7a:	2b00      	cmp	r3, #0
 8000a7c:	da0a      	bge.n	8000a94 <scroll_msg+0x48>
		if (msg->rect.x < -msg->rect.width) {
 8000a7e:	687b      	ldr	r3, [r7, #4]
 8000a80:	685a      	ldr	r2, [r3, #4]
 8000a82:	687b      	ldr	r3, [r7, #4]
 8000a84:	68db      	ldr	r3, [r3, #12]
 8000a86:	425b      	negs	r3, r3
 8000a88:	429a      	cmp	r2, r3
 8000a8a:	da0c      	bge.n	8000aa6 <scroll_msg+0x5a>
			msg->rect.x = WIDTH;
 8000a8c:	687b      	ldr	r3, [r7, #4]
 8000a8e:	2240      	movs	r2, #64	@ 0x40
 8000a90:	605a      	str	r2, [r3, #4]
	} else {
		if (msg->rect.x > WIDTH) {
			msg->rect.x = -msg->rect.width;
		}
	}
}
 8000a92:	e008      	b.n	8000aa6 <scroll_msg+0x5a>
		if (msg->rect.x > WIDTH) {
 8000a94:	687b      	ldr	r3, [r7, #4]
 8000a96:	685b      	ldr	r3, [r3, #4]
 8000a98:	2b40      	cmp	r3, #64	@ 0x40
 8000a9a:	dd04      	ble.n	8000aa6 <scroll_msg+0x5a>
			msg->rect.x = -msg->rect.width;
 8000a9c:	687b      	ldr	r3, [r7, #4]
 8000a9e:	68db      	ldr	r3, [r3, #12]
 8000aa0:	425a      	negs	r2, r3
 8000aa2:	687b      	ldr	r3, [r7, #4]
 8000aa4:	605a      	str	r2, [r3, #4]
}
 8000aa6:	bf00      	nop
 8000aa8:	3708      	adds	r7, #8
 8000aaa:	46bd      	mov	sp, r7
 8000aac:	bd80      	pop	{r7, pc}
	...

08000ab0 <on_ready>:

void on_ready() {
 8000ab0:	b5b0      	push	{r4, r5, r7, lr}
 8000ab2:	b082      	sub	sp, #8
 8000ab4:	af00      	add	r7, sp, #0
	msgs[0] = msg0;
 8000ab6:	4a20      	ldr	r2, [pc, #128]	@ (8000b38 <on_ready+0x88>)
 8000ab8:	4b20      	ldr	r3, [pc, #128]	@ (8000b3c <on_ready+0x8c>)
 8000aba:	4614      	mov	r4, r2
 8000abc:	461d      	mov	r5, r3
 8000abe:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ac0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ac2:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000ac6:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	msgs[1] = msg1;
 8000aca:	4b1b      	ldr	r3, [pc, #108]	@ (8000b38 <on_ready+0x88>)
 8000acc:	4a1c      	ldr	r2, [pc, #112]	@ (8000b40 <on_ready+0x90>)
 8000ace:	f103 041c 	add.w	r4, r3, #28
 8000ad2:	4615      	mov	r5, r2
 8000ad4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000ad6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000ad8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000adc:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	for (uint8_t i = 0; i < MSG_COUNT; ++i) {
 8000ae0:	2300      	movs	r3, #0
 8000ae2:	71fb      	strb	r3, [r7, #7]
 8000ae4:	e020      	b.n	8000b28 <on_ready+0x78>
		msgs[i].rect.width = calculate_text_width(msgs[i].string, msgs[i].bold);
 8000ae6:	79fa      	ldrb	r2, [r7, #7]
 8000ae8:	4913      	ldr	r1, [pc, #76]	@ (8000b38 <on_ready+0x88>)
 8000aea:	4613      	mov	r3, r2
 8000aec:	00db      	lsls	r3, r3, #3
 8000aee:	1a9b      	subs	r3, r3, r2
 8000af0:	009b      	lsls	r3, r3, #2
 8000af2:	440b      	add	r3, r1
 8000af4:	6818      	ldr	r0, [r3, #0]
 8000af6:	79fa      	ldrb	r2, [r7, #7]
 8000af8:	490f      	ldr	r1, [pc, #60]	@ (8000b38 <on_ready+0x88>)
 8000afa:	4613      	mov	r3, r2
 8000afc:	00db      	lsls	r3, r3, #3
 8000afe:	1a9b      	subs	r3, r3, r2
 8000b00:	009b      	lsls	r3, r3, #2
 8000b02:	440b      	add	r3, r1
 8000b04:	3314      	adds	r3, #20
 8000b06:	781b      	ldrb	r3, [r3, #0]
 8000b08:	79fc      	ldrb	r4, [r7, #7]
 8000b0a:	4619      	mov	r1, r3
 8000b0c:	f000 ff56 	bl	80019bc <calculate_text_width>
 8000b10:	4602      	mov	r2, r0
 8000b12:	4909      	ldr	r1, [pc, #36]	@ (8000b38 <on_ready+0x88>)
 8000b14:	4623      	mov	r3, r4
 8000b16:	00db      	lsls	r3, r3, #3
 8000b18:	1b1b      	subs	r3, r3, r4
 8000b1a:	009b      	lsls	r3, r3, #2
 8000b1c:	440b      	add	r3, r1
 8000b1e:	330c      	adds	r3, #12
 8000b20:	601a      	str	r2, [r3, #0]
	for (uint8_t i = 0; i < MSG_COUNT; ++i) {
 8000b22:	79fb      	ldrb	r3, [r7, #7]
 8000b24:	3301      	adds	r3, #1
 8000b26:	71fb      	strb	r3, [r7, #7]
 8000b28:	79fb      	ldrb	r3, [r7, #7]
 8000b2a:	2b01      	cmp	r3, #1
 8000b2c:	d9db      	bls.n	8000ae6 <on_ready+0x36>
	}
}
 8000b2e:	bf00      	nop
 8000b30:	bf00      	nop
 8000b32:	3708      	adds	r7, #8
 8000b34:	46bd      	mov	sp, r7
 8000b36:	bdb0      	pop	{r4, r5, r7, pc}
 8000b38:	200000bc 	.word	0x200000bc
 8000b3c:	20000000 	.word	0x20000000
 8000b40:	2000001c 	.word	0x2000001c

08000b44 <on_update>:
void on_update() {
 8000b44:	b580      	push	{r7, lr}
 8000b46:	b082      	sub	sp, #8
 8000b48:	af00      	add	r7, sp, #0
	clear_back_buffer();
 8000b4a:	f000 fba1 	bl	8001290 <clear_back_buffer>
	for (uint8_t i = 0; i < MSG_COUNT; ++i) {
 8000b4e:	2300      	movs	r3, #0
 8000b50:	71fb      	strb	r3, [r7, #7]
 8000b52:	e00c      	b.n	8000b6e <on_update+0x2a>
		scroll_msg(&msgs[i]);
 8000b54:	79fa      	ldrb	r2, [r7, #7]
 8000b56:	4613      	mov	r3, r2
 8000b58:	00db      	lsls	r3, r3, #3
 8000b5a:	1a9b      	subs	r3, r3, r2
 8000b5c:	009b      	lsls	r3, r3, #2
 8000b5e:	4a08      	ldr	r2, [pc, #32]	@ (8000b80 <on_update+0x3c>)
 8000b60:	4413      	add	r3, r2
 8000b62:	4618      	mov	r0, r3
 8000b64:	f7ff ff72 	bl	8000a4c <scroll_msg>
	for (uint8_t i = 0; i < MSG_COUNT; ++i) {
 8000b68:	79fb      	ldrb	r3, [r7, #7]
 8000b6a:	3301      	adds	r3, #1
 8000b6c:	71fb      	strb	r3, [r7, #7]
 8000b6e:	79fb      	ldrb	r3, [r7, #7]
 8000b70:	2b01      	cmp	r3, #1
 8000b72:	d9ef      	bls.n	8000b54 <on_update+0x10>
	}
}
 8000b74:	bf00      	nop
 8000b76:	bf00      	nop
 8000b78:	3708      	adds	r7, #8
 8000b7a:	46bd      	mov	sp, r7
 8000b7c:	bd80      	pop	{r7, pc}
 8000b7e:	bf00      	nop
 8000b80:	200000bc 	.word	0x200000bc

08000b84 <create_performance_impact>:

void create_performance_impact() {
 8000b84:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000b86:	b085      	sub	sp, #20
 8000b88:	af00      	add	r7, sp, #0
#define ARRAY_SIZE 100
#define NUM_ITERATIONS 10
	double *data = (double *)malloc(ARRAY_SIZE * sizeof(double));
 8000b8a:	f44f 7048 	mov.w	r0, #800	@ 0x320
 8000b8e:	f003 f839 	bl	8003c04 <malloc>
 8000b92:	4603      	mov	r3, r0
 8000b94:	603b      	str	r3, [r7, #0]
	if (data == NULL) {
 8000b96:	683b      	ldr	r3, [r7, #0]
 8000b98:	2b00      	cmp	r3, #0
 8000b9a:	d102      	bne.n	8000ba2 <create_performance_impact+0x1e>
		exit(EXIT_FAILURE);
 8000b9c:	2001      	movs	r0, #1
 8000b9e:	f003 f81f 	bl	8003be0 <exit>
	}

	for (int i = 0; i < ARRAY_SIZE; ++i) {
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	60fb      	str	r3, [r7, #12]
 8000ba6:	e00b      	b.n	8000bc0 <create_performance_impact+0x3c>
		data[i] = 1.0;
 8000ba8:	68fb      	ldr	r3, [r7, #12]
 8000baa:	00db      	lsls	r3, r3, #3
 8000bac:	683a      	ldr	r2, [r7, #0]
 8000bae:	18d1      	adds	r1, r2, r3
 8000bb0:	f04f 0200 	mov.w	r2, #0
 8000bb4:	4b22      	ldr	r3, [pc, #136]	@ (8000c40 <create_performance_impact+0xbc>)
 8000bb6:	e9c1 2300 	strd	r2, r3, [r1]
	for (int i = 0; i < ARRAY_SIZE; ++i) {
 8000bba:	68fb      	ldr	r3, [r7, #12]
 8000bbc:	3301      	adds	r3, #1
 8000bbe:	60fb      	str	r3, [r7, #12]
 8000bc0:	68fb      	ldr	r3, [r7, #12]
 8000bc2:	2b63      	cmp	r3, #99	@ 0x63
 8000bc4:	ddf0      	ble.n	8000ba8 <create_performance_impact+0x24>
	}
	for (int i = 0; i < NUM_ITERATIONS; ++i) {
 8000bc6:	2300      	movs	r3, #0
 8000bc8:	60bb      	str	r3, [r7, #8]
 8000bca:	e02f      	b.n	8000c2c <create_performance_impact+0xa8>
		for (int j = 0; j < ARRAY_SIZE; ++j) {
 8000bcc:	2300      	movs	r3, #0
 8000bce:	607b      	str	r3, [r7, #4]
 8000bd0:	e026      	b.n	8000c20 <create_performance_impact+0x9c>
			data[j] = sin(data[j]) * cos(data[j]);
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	00db      	lsls	r3, r3, #3
 8000bd6:	683a      	ldr	r2, [r7, #0]
 8000bd8:	4413      	add	r3, r2
 8000bda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bde:	4610      	mov	r0, r2
 8000be0:	4619      	mov	r1, r3
 8000be2:	f003 f99f 	bl	8003f24 <sin>
 8000be6:	4604      	mov	r4, r0
 8000be8:	460d      	mov	r5, r1
 8000bea:	687b      	ldr	r3, [r7, #4]
 8000bec:	00db      	lsls	r3, r3, #3
 8000bee:	683a      	ldr	r2, [r7, #0]
 8000bf0:	4413      	add	r3, r2
 8000bf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8000bf6:	4610      	mov	r0, r2
 8000bf8:	4619      	mov	r1, r3
 8000bfa:	f003 f94d 	bl	8003e98 <cos>
 8000bfe:	4602      	mov	r2, r0
 8000c00:	460b      	mov	r3, r1
 8000c02:	6879      	ldr	r1, [r7, #4]
 8000c04:	00c9      	lsls	r1, r1, #3
 8000c06:	6838      	ldr	r0, [r7, #0]
 8000c08:	1846      	adds	r6, r0, r1
 8000c0a:	4620      	mov	r0, r4
 8000c0c:	4629      	mov	r1, r5
 8000c0e:	f7ff fc5b 	bl	80004c8 <__aeabi_dmul>
 8000c12:	4602      	mov	r2, r0
 8000c14:	460b      	mov	r3, r1
 8000c16:	e9c6 2300 	strd	r2, r3, [r6]
		for (int j = 0; j < ARRAY_SIZE; ++j) {
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	3301      	adds	r3, #1
 8000c1e:	607b      	str	r3, [r7, #4]
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	2b63      	cmp	r3, #99	@ 0x63
 8000c24:	ddd5      	ble.n	8000bd2 <create_performance_impact+0x4e>
	for (int i = 0; i < NUM_ITERATIONS; ++i) {
 8000c26:	68bb      	ldr	r3, [r7, #8]
 8000c28:	3301      	adds	r3, #1
 8000c2a:	60bb      	str	r3, [r7, #8]
 8000c2c:	68bb      	ldr	r3, [r7, #8]
 8000c2e:	2b09      	cmp	r3, #9
 8000c30:	ddcc      	ble.n	8000bcc <create_performance_impact+0x48>
		}
	}
	free(data);
 8000c32:	6838      	ldr	r0, [r7, #0]
 8000c34:	f002 ffee 	bl	8003c14 <free>
}
 8000c38:	bf00      	nop
 8000c3a:	3714      	adds	r7, #20
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000c40:	3ff00000 	.word	0x3ff00000

08000c44 <on_button_pressed>:

void on_button_pressed() {
 8000c44:	b580      	push	{r7, lr}
 8000c46:	af00      	add	r7, sp, #0
	create_performance_impact();
 8000c48:	f7ff ff9c 	bl	8000b84 <create_performance_impact>
	//buzzer();
}
 8000c4c:	bf00      	nop
 8000c4e:	bd80      	pop	{r7, pc}

08000c50 <on_button_held>:
void on_button_held() {
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
	//draw_text("LL", 0, 0, true);
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <on_button_released>:
void on_button_released() {
 8000c5c:	b480      	push	{r7}
 8000c5e:	af00      	add	r7, sp, #0
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	bc80      	pop	{r7}
 8000c66:	4770      	bx	lr

08000c68 <on_event>:
#include "event.h"


static uint8_t is_button_held = 0;

void on_event() {
 8000c68:	b580      	push	{r7, lr}
 8000c6a:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8000c6c:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000c70:	480e      	ldr	r0, [pc, #56]	@ (8000cac <on_event+0x44>)
 8000c72:	f001 fbb5 	bl	80023e0 <HAL_GPIO_ReadPin>
 8000c76:	4603      	mov	r3, r0
 8000c78:	2b00      	cmp	r3, #0
 8000c7a:	d10c      	bne.n	8000c96 <on_event+0x2e>
		if (!is_button_held) {
 8000c7c:	4b0c      	ldr	r3, [pc, #48]	@ (8000cb0 <on_event+0x48>)
 8000c7e:	781b      	ldrb	r3, [r3, #0]
 8000c80:	2b00      	cmp	r3, #0
 8000c82:	d105      	bne.n	8000c90 <on_event+0x28>
			is_button_held = 1;
 8000c84:	4b0a      	ldr	r3, [pc, #40]	@ (8000cb0 <on_event+0x48>)
 8000c86:	2201      	movs	r2, #1
 8000c88:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8000c8a:	f7ff ffdb 	bl	8000c44 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8000c8e:	e00b      	b.n	8000ca8 <on_event+0x40>
			on_button_held();
 8000c90:	f7ff ffde 	bl	8000c50 <on_button_held>
}
 8000c94:	e008      	b.n	8000ca8 <on_event+0x40>
		if (is_button_held) {
 8000c96:	4b06      	ldr	r3, [pc, #24]	@ (8000cb0 <on_event+0x48>)
 8000c98:	781b      	ldrb	r3, [r3, #0]
 8000c9a:	2b00      	cmp	r3, #0
 8000c9c:	d004      	beq.n	8000ca8 <on_event+0x40>
			is_button_held = 0;
 8000c9e:	4b04      	ldr	r3, [pc, #16]	@ (8000cb0 <on_event+0x48>)
 8000ca0:	2200      	movs	r2, #0
 8000ca2:	701a      	strb	r2, [r3, #0]
			on_button_released();
 8000ca4:	f7ff ffda 	bl	8000c5c <on_button_released>
}
 8000ca8:	bf00      	nop
 8000caa:	bd80      	pop	{r7, pc}
 8000cac:	40011000 	.word	0x40011000
 8000cb0:	200000f4 	.word	0x200000f4

08000cb4 <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8000cb4:	b580      	push	{r7, lr}
 8000cb6:	b082      	sub	sp, #8
 8000cb8:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000cba:	f001 f8f5 	bl	8001ea8 <HAL_GetTick>
 8000cbe:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8000cc0:	4b06      	ldr	r3, [pc, #24]	@ (8000cdc <get_tick_delta_time+0x28>)
 8000cc2:	681b      	ldr	r3, [r3, #0]
 8000cc4:	687a      	ldr	r2, [r7, #4]
 8000cc6:	1ad3      	subs	r3, r2, r3
 8000cc8:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 8000cca:	4a04      	ldr	r2, [pc, #16]	@ (8000cdc <get_tick_delta_time+0x28>)
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8000cd0:	683b      	ldr	r3, [r7, #0]
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3708      	adds	r7, #8
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	bd80      	pop	{r7, pc}
 8000cda:	bf00      	nop
 8000cdc:	200001e8 	.word	0x200001e8

08000ce0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000ce0:	b590      	push	{r4, r7, lr}
 8000ce2:	b085      	sub	sp, #20
 8000ce4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000ce6:	f001 f887 	bl	8001df8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000cea:	f000 f88d 	bl	8000e08 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000cee:	f000 f9ef 	bl	80010d0 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000cf2:	f000 f8cb 	bl	8000e8c <MX_SPI1_Init>
  MX_TIM2_Init();
 8000cf6:	f000 f8ff 	bl	8000ef8 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000cfa:	f000 f973 	bl	8000fe4 <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000cfe:	4838      	ldr	r0, [pc, #224]	@ (8000de0 <main+0x100>)
 8000d00:	f002 f850 	bl	8002da4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000d04:	4837      	ldr	r0, [pc, #220]	@ (8000de4 <main+0x104>)
 8000d06:	f002 f84d 	bl	8002da4 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000d0a:	2100      	movs	r1, #0
 8000d0c:	4835      	ldr	r0, [pc, #212]	@ (8000de4 <main+0x104>)
 8000d0e:	f002 f8f3 	bl	8002ef8 <HAL_TIM_PWM_Start>
	OE_H;
 8000d12:	2201      	movs	r2, #1
 8000d14:	2140      	movs	r1, #64	@ 0x40
 8000d16:	4834      	ldr	r0, [pc, #208]	@ (8000de8 <main+0x108>)
 8000d18:	f001 fb79 	bl	800240e <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 8000d1c:	f000 fab8 	bl	8001290 <clear_back_buffer>
	on_ready();
 8000d20:	f7ff fec6 	bl	8000ab0 <on_ready>

#define UPDATE_INTERVAL_MS 10

	uint32_t debug_var = 0;
 8000d24:	2300      	movs	r3, #0
 8000d26:	60fb      	str	r3, [r7, #12]

	uint32_t accumulator = 0;
 8000d28:	2300      	movs	r3, #0
 8000d2a:	60bb      	str	r3, [r7, #8]
	while (1) {
		uint32_t delta = get_tick_delta_time();
 8000d2c:	f7ff ffc2 	bl	8000cb4 <get_tick_delta_time>
 8000d30:	6078      	str	r0, [r7, #4]

		accumulator += delta;
 8000d32:	68ba      	ldr	r2, [r7, #8]
 8000d34:	687b      	ldr	r3, [r7, #4]
 8000d36:	4413      	add	r3, r2
 8000d38:	60bb      	str	r3, [r7, #8]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 8000d3a:	68bb      	ldr	r3, [r7, #8]
 8000d3c:	2b09      	cmp	r3, #9
 8000d3e:	d92e      	bls.n	8000d9e <main+0xbe>
			if (is_back_buffer_new){
 8000d40:	4b2a      	ldr	r3, [pc, #168]	@ (8000dec <main+0x10c>)
 8000d42:	781b      	ldrb	r3, [r3, #0]
 8000d44:	2b00      	cmp	r3, #0
 8000d46:	d148      	bne.n	8000dda <main+0xfa>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 8000d48:	68b8      	ldr	r0, [r7, #8]
 8000d4a:	f7ff fb43 	bl	80003d4 <__aeabi_ui2d>
 8000d4e:	f04f 0200 	mov.w	r2, #0
 8000d52:	4b27      	ldr	r3, [pc, #156]	@ (8000df0 <main+0x110>)
 8000d54:	f7ff fce2 	bl	800071c <__aeabi_ddiv>
 8000d58:	4602      	mov	r2, r0
 8000d5a:	460b      	mov	r3, r1
 8000d5c:	4925      	ldr	r1, [pc, #148]	@ (8000df4 <main+0x114>)
 8000d5e:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8000d62:	f7ff ff81 	bl	8000c68 <on_event>
			on_update();
 8000d66:	f7ff feed 	bl	8000b44 <on_update>

			draw_number(accumulator, 0, HEIGHT-7, false);
 8000d6a:	68b8      	ldr	r0, [r7, #8]
 8000d6c:	2300      	movs	r3, #0
 8000d6e:	2219      	movs	r2, #25
 8000d70:	2100      	movs	r1, #0
 8000d72:	f000 fceb 	bl	800174c <draw_number>
			accumulator -= UPDATE_INTERVAL_MS;
 8000d76:	68bb      	ldr	r3, [r7, #8]
 8000d78:	3b0a      	subs	r3, #10
 8000d7a:	60bb      	str	r3, [r7, #8]
			//accumulator = 0;

			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
 8000d7c:	68fc      	ldr	r4, [r7, #12]
 8000d7e:	68fb      	ldr	r3, [r7, #12]
 8000d80:	2100      	movs	r1, #0
 8000d82:	4618      	mov	r0, r3
 8000d84:	f000 fe40 	bl	8001a08 <calculate_number_width>
 8000d88:	4603      	mov	r3, r0
 8000d8a:	f1c3 013f 	rsb	r1, r3, #63	@ 0x3f
 8000d8e:	2300      	movs	r3, #0
 8000d90:	2219      	movs	r2, #25
 8000d92:	4620      	mov	r0, r4
 8000d94:	f000 fcda 	bl	800174c <draw_number>
			is_back_buffer_new = true;
 8000d98:	4b14      	ldr	r3, [pc, #80]	@ (8000dec <main+0x10c>)
 8000d9a:	2201      	movs	r2, #1
 8000d9c:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 8000d9e:	4b16      	ldr	r3, [pc, #88]	@ (8000df8 <main+0x118>)
 8000da0:	781b      	ldrb	r3, [r3, #0]
 8000da2:	2b00      	cmp	r3, #0
 8000da4:	d010      	beq.n	8000dc8 <main+0xe8>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 8000da6:	f001 f87f 	bl	8001ea8 <HAL_GetTick>
 8000daa:	4602      	mov	r2, r0
 8000dac:	4b13      	ldr	r3, [pc, #76]	@ (8000dfc <main+0x11c>)
 8000dae:	681b      	ldr	r3, [r3, #0]
 8000db0:	1ad3      	subs	r3, r2, r3
 8000db2:	2b14      	cmp	r3, #20
 8000db4:	d908      	bls.n	8000dc8 <main+0xe8>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000db6:	2200      	movs	r2, #0
 8000db8:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000dbc:	4810      	ldr	r0, [pc, #64]	@ (8000e00 <main+0x120>)
 8000dbe:	f001 fb26 	bl	800240e <HAL_GPIO_WritePin>
				buzzer_request = false;
 8000dc2:	4b0d      	ldr	r3, [pc, #52]	@ (8000df8 <main+0x118>)
 8000dc4:	2200      	movs	r2, #0
 8000dc6:	701a      	strb	r2, [r3, #0]
			}
		}

		uint32_t current_time = HAL_GetTick();
 8000dc8:	f001 f86e 	bl	8001ea8 <HAL_GetTick>
 8000dcc:	6038      	str	r0, [r7, #0]
		debug_var = current_time - last_tick_time;
 8000dce:	4b0d      	ldr	r3, [pc, #52]	@ (8000e04 <main+0x124>)
 8000dd0:	681b      	ldr	r3, [r3, #0]
 8000dd2:	683a      	ldr	r2, [r7, #0]
 8000dd4:	1ad3      	subs	r3, r2, r3
 8000dd6:	60fb      	str	r3, [r7, #12]
 8000dd8:	e7a8      	b.n	8000d2c <main+0x4c>
				continue;
 8000dda:	bf00      	nop
	while (1) {
 8000ddc:	e7a6      	b.n	8000d2c <main+0x4c>
 8000dde:	bf00      	nop
 8000de0:	20000150 	.word	0x20000150
 8000de4:	20000198 	.word	0x20000198
 8000de8:	40011000 	.word	0x40011000
 8000dec:	200011f4 	.word	0x200011f4
 8000df0:	408f4000 	.word	0x408f4000
 8000df4:	200001e0 	.word	0x200001e0
 8000df8:	200001ec 	.word	0x200001ec
 8000dfc:	200001f0 	.word	0x200001f0
 8000e00:	40010800 	.word	0x40010800
 8000e04:	200001e8 	.word	0x200001e8

08000e08 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000e08:	b580      	push	{r7, lr}
 8000e0a:	b090      	sub	sp, #64	@ 0x40
 8000e0c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000e0e:	f107 0318 	add.w	r3, r7, #24
 8000e12:	2228      	movs	r2, #40	@ 0x28
 8000e14:	2100      	movs	r1, #0
 8000e16:	4618      	mov	r0, r3
 8000e18:	f002 ffb2 	bl	8003d80 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000e1c:	1d3b      	adds	r3, r7, #4
 8000e1e:	2200      	movs	r2, #0
 8000e20:	601a      	str	r2, [r3, #0]
 8000e22:	605a      	str	r2, [r3, #4]
 8000e24:	609a      	str	r2, [r3, #8]
 8000e26:	60da      	str	r2, [r3, #12]
 8000e28:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000e2a:	2302      	movs	r3, #2
 8000e2c:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000e2e:	2301      	movs	r3, #1
 8000e30:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000e32:	2310      	movs	r3, #16
 8000e34:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000e36:	2302      	movs	r3, #2
 8000e38:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000e3a:	2300      	movs	r3, #0
 8000e3c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000e3e:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000e42:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000e44:	f107 0318 	add.w	r3, r7, #24
 8000e48:	4618      	mov	r0, r3
 8000e4a:	f001 faf9 	bl	8002440 <HAL_RCC_OscConfig>
 8000e4e:	4603      	mov	r3, r0
 8000e50:	2b00      	cmp	r3, #0
 8000e52:	d001      	beq.n	8000e58 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000e54:	f000 fa00 	bl	8001258 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000e58:	230f      	movs	r3, #15
 8000e5a:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000e5c:	2302      	movs	r3, #2
 8000e5e:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000e60:	2300      	movs	r3, #0
 8000e62:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000e64:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000e68:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000e6e:	1d3b      	adds	r3, r7, #4
 8000e70:	2102      	movs	r1, #2
 8000e72:	4618      	mov	r0, r3
 8000e74:	f001 fd66 	bl	8002944 <HAL_RCC_ClockConfig>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000e7e:	f000 f9eb 	bl	8001258 <Error_Handler>
  }
}
 8000e82:	bf00      	nop
 8000e84:	3740      	adds	r7, #64	@ 0x40
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}
	...

08000e8c <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000e8c:	b580      	push	{r7, lr}
 8000e8e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000e90:	4b17      	ldr	r3, [pc, #92]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000e92:	4a18      	ldr	r2, [pc, #96]	@ (8000ef4 <MX_SPI1_Init+0x68>)
 8000e94:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000e96:	4b16      	ldr	r3, [pc, #88]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000e98:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e9c:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e9e:	4b14      	ldr	r3, [pc, #80]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ea0:	2200      	movs	r2, #0
 8000ea2:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000ea4:	4b12      	ldr	r3, [pc, #72]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ea6:	2200      	movs	r2, #0
 8000ea8:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000eaa:	4b11      	ldr	r3, [pc, #68]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000eac:	2200      	movs	r2, #0
 8000eae:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000eb0:	4b0f      	ldr	r3, [pc, #60]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000eb2:	2200      	movs	r2, #0
 8000eb4:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000eb6:	4b0e      	ldr	r3, [pc, #56]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000eb8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000ebc:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000ebe:	4b0c      	ldr	r3, [pc, #48]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ec0:	2210      	movs	r2, #16
 8000ec2:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000ec4:	4b0a      	ldr	r3, [pc, #40]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ec6:	2200      	movs	r2, #0
 8000ec8:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000eca:	4b09      	ldr	r3, [pc, #36]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000ed0:	4b07      	ldr	r3, [pc, #28]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ed2:	2200      	movs	r2, #0
 8000ed4:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000ed6:	4b06      	ldr	r3, [pc, #24]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ed8:	220a      	movs	r2, #10
 8000eda:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000edc:	4804      	ldr	r0, [pc, #16]	@ (8000ef0 <MX_SPI1_Init+0x64>)
 8000ede:	f001 fe8d 	bl	8002bfc <HAL_SPI_Init>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	2b00      	cmp	r3, #0
 8000ee6:	d001      	beq.n	8000eec <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000ee8:	f000 f9b6 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000eec:	bf00      	nop
 8000eee:	bd80      	pop	{r7, pc}
 8000ef0:	200000f8 	.word	0x200000f8
 8000ef4:	40013000 	.word	0x40013000

08000ef8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000ef8:	b580      	push	{r7, lr}
 8000efa:	b08e      	sub	sp, #56	@ 0x38
 8000efc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000efe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f02:	2200      	movs	r2, #0
 8000f04:	601a      	str	r2, [r3, #0]
 8000f06:	605a      	str	r2, [r3, #4]
 8000f08:	609a      	str	r2, [r3, #8]
 8000f0a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f0c:	f107 0320 	add.w	r3, r7, #32
 8000f10:	2200      	movs	r2, #0
 8000f12:	601a      	str	r2, [r3, #0]
 8000f14:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f16:	1d3b      	adds	r3, r7, #4
 8000f18:	2200      	movs	r2, #0
 8000f1a:	601a      	str	r2, [r3, #0]
 8000f1c:	605a      	str	r2, [r3, #4]
 8000f1e:	609a      	str	r2, [r3, #8]
 8000f20:	60da      	str	r2, [r3, #12]
 8000f22:	611a      	str	r2, [r3, #16]
 8000f24:	615a      	str	r2, [r3, #20]
 8000f26:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000f28:	4b2d      	ldr	r3, [pc, #180]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f2a:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000f2e:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000f30:	4b2b      	ldr	r3, [pc, #172]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f32:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000f36:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f38:	4b29      	ldr	r3, [pc, #164]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f3a:	2200      	movs	r2, #0
 8000f3c:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8000f3e:	4b28      	ldr	r3, [pc, #160]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f40:	2205      	movs	r2, #5
 8000f42:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f44:	4b26      	ldr	r3, [pc, #152]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f46:	2200      	movs	r2, #0
 8000f48:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f4a:	4b25      	ldr	r3, [pc, #148]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f4c:	2200      	movs	r2, #0
 8000f4e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000f50:	4823      	ldr	r0, [pc, #140]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f52:	f001 fed7 	bl	8002d04 <HAL_TIM_Base_Init>
 8000f56:	4603      	mov	r3, r0
 8000f58:	2b00      	cmp	r3, #0
 8000f5a:	d001      	beq.n	8000f60 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000f5c:	f000 f97c 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000f60:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000f64:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000f66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f6a:	4619      	mov	r1, r3
 8000f6c:	481c      	ldr	r0, [pc, #112]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f6e:	f002 fa2f 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 8000f72:	4603      	mov	r3, r0
 8000f74:	2b00      	cmp	r3, #0
 8000f76:	d001      	beq.n	8000f7c <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000f78:	f000 f96e 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000f7c:	4818      	ldr	r0, [pc, #96]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f7e:	f001 ff63 	bl	8002e48 <HAL_TIM_PWM_Init>
 8000f82:	4603      	mov	r3, r0
 8000f84:	2b00      	cmp	r3, #0
 8000f86:	d001      	beq.n	8000f8c <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000f88:	f000 f966 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000f90:	2300      	movs	r3, #0
 8000f92:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000f94:	f107 0320 	add.w	r3, r7, #32
 8000f98:	4619      	mov	r1, r3
 8000f9a:	4811      	ldr	r0, [pc, #68]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000f9c:	f002 fdb0 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 8000fa0:	4603      	mov	r3, r0
 8000fa2:	2b00      	cmp	r3, #0
 8000fa4:	d001      	beq.n	8000faa <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000fa6:	f000 f957 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000faa:	2360      	movs	r3, #96	@ 0x60
 8000fac:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000fae:	2300      	movs	r3, #0
 8000fb0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000fb6:	2300      	movs	r3, #0
 8000fb8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000fba:	1d3b      	adds	r3, r7, #4
 8000fbc:	2200      	movs	r2, #0
 8000fbe:	4619      	mov	r1, r3
 8000fc0:	4807      	ldr	r0, [pc, #28]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000fc2:	f002 f943 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 8000fc6:	4603      	mov	r3, r0
 8000fc8:	2b00      	cmp	r3, #0
 8000fca:	d001      	beq.n	8000fd0 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000fcc:	f000 f944 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000fd0:	4803      	ldr	r0, [pc, #12]	@ (8000fe0 <MX_TIM2_Init+0xe8>)
 8000fd2:	f000 fdf5 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 8000fd6:	bf00      	nop
 8000fd8:	3738      	adds	r7, #56	@ 0x38
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}
 8000fde:	bf00      	nop
 8000fe0:	20000150 	.word	0x20000150

08000fe4 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000fe4:	b580      	push	{r7, lr}
 8000fe6:	b08e      	sub	sp, #56	@ 0x38
 8000fe8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000fea:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fee:	2200      	movs	r2, #0
 8000ff0:	601a      	str	r2, [r3, #0]
 8000ff2:	605a      	str	r2, [r3, #4]
 8000ff4:	609a      	str	r2, [r3, #8]
 8000ff6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000ff8:	f107 0320 	add.w	r3, r7, #32
 8000ffc:	2200      	movs	r2, #0
 8000ffe:	601a      	str	r2, [r3, #0]
 8001000:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001002:	1d3b      	adds	r3, r7, #4
 8001004:	2200      	movs	r2, #0
 8001006:	601a      	str	r2, [r3, #0]
 8001008:	605a      	str	r2, [r3, #4]
 800100a:	609a      	str	r2, [r3, #8]
 800100c:	60da      	str	r2, [r3, #12]
 800100e:	611a      	str	r2, [r3, #16]
 8001010:	615a      	str	r2, [r3, #20]
 8001012:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001014:	4b2c      	ldr	r3, [pc, #176]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001016:	4a2d      	ldr	r2, [pc, #180]	@ (80010cc <MX_TIM3_Init+0xe8>)
 8001018:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 800101a:	4b2b      	ldr	r3, [pc, #172]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 800101c:	223f      	movs	r2, #63	@ 0x3f
 800101e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001020:	4b29      	ldr	r3, [pc, #164]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001022:	2200      	movs	r2, #0
 8001024:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001026:	4b28      	ldr	r3, [pc, #160]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001028:	2263      	movs	r2, #99	@ 0x63
 800102a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800102c:	4b26      	ldr	r3, [pc, #152]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 800102e:	2200      	movs	r2, #0
 8001030:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001032:	4b25      	ldr	r3, [pc, #148]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001034:	2200      	movs	r2, #0
 8001036:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001038:	4823      	ldr	r0, [pc, #140]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 800103a:	f001 fe63 	bl	8002d04 <HAL_TIM_Base_Init>
 800103e:	4603      	mov	r3, r0
 8001040:	2b00      	cmp	r3, #0
 8001042:	d001      	beq.n	8001048 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001044:	f000 f908 	bl	8001258 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001048:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800104c:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800104e:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001052:	4619      	mov	r1, r3
 8001054:	481c      	ldr	r0, [pc, #112]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001056:	f002 f9bb 	bl	80033d0 <HAL_TIM_ConfigClockSource>
 800105a:	4603      	mov	r3, r0
 800105c:	2b00      	cmp	r3, #0
 800105e:	d001      	beq.n	8001064 <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001060:	f000 f8fa 	bl	8001258 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001064:	4818      	ldr	r0, [pc, #96]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001066:	f001 feef 	bl	8002e48 <HAL_TIM_PWM_Init>
 800106a:	4603      	mov	r3, r0
 800106c:	2b00      	cmp	r3, #0
 800106e:	d001      	beq.n	8001074 <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001070:	f000 f8f2 	bl	8001258 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001074:	2300      	movs	r3, #0
 8001076:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001078:	2300      	movs	r3, #0
 800107a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800107c:	f107 0320 	add.w	r3, r7, #32
 8001080:	4619      	mov	r1, r3
 8001082:	4811      	ldr	r0, [pc, #68]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 8001084:	f002 fd3c 	bl	8003b00 <HAL_TIMEx_MasterConfigSynchronization>
 8001088:	4603      	mov	r3, r0
 800108a:	2b00      	cmp	r3, #0
 800108c:	d001      	beq.n	8001092 <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 800108e:	f000 f8e3 	bl	8001258 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001092:	2360      	movs	r3, #96	@ 0x60
 8001094:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8001096:	230a      	movs	r3, #10
 8001098:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 800109a:	2302      	movs	r3, #2
 800109c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800109e:	2300      	movs	r3, #0
 80010a0:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80010a2:	1d3b      	adds	r3, r7, #4
 80010a4:	2200      	movs	r2, #0
 80010a6:	4619      	mov	r1, r3
 80010a8:	4807      	ldr	r0, [pc, #28]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 80010aa:	f002 f8cf 	bl	800324c <HAL_TIM_PWM_ConfigChannel>
 80010ae:	4603      	mov	r3, r0
 80010b0:	2b00      	cmp	r3, #0
 80010b2:	d001      	beq.n	80010b8 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80010b4:	f000 f8d0 	bl	8001258 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80010b8:	4803      	ldr	r0, [pc, #12]	@ (80010c8 <MX_TIM3_Init+0xe4>)
 80010ba:	f000 fd81 	bl	8001bc0 <HAL_TIM_MspPostInit>

}
 80010be:	bf00      	nop
 80010c0:	3738      	adds	r7, #56	@ 0x38
 80010c2:	46bd      	mov	sp, r7
 80010c4:	bd80      	pop	{r7, pc}
 80010c6:	bf00      	nop
 80010c8:	20000198 	.word	0x20000198
 80010cc:	40000400 	.word	0x40000400

080010d0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80010d0:	b580      	push	{r7, lr}
 80010d2:	b088      	sub	sp, #32
 80010d4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80010d6:	f107 0310 	add.w	r3, r7, #16
 80010da:	2200      	movs	r2, #0
 80010dc:	601a      	str	r2, [r3, #0]
 80010de:	605a      	str	r2, [r3, #4]
 80010e0:	609a      	str	r2, [r3, #8]
 80010e2:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80010e4:	4b56      	ldr	r3, [pc, #344]	@ (8001240 <MX_GPIO_Init+0x170>)
 80010e6:	699b      	ldr	r3, [r3, #24]
 80010e8:	4a55      	ldr	r2, [pc, #340]	@ (8001240 <MX_GPIO_Init+0x170>)
 80010ea:	f043 0310 	orr.w	r3, r3, #16
 80010ee:	6193      	str	r3, [r2, #24]
 80010f0:	4b53      	ldr	r3, [pc, #332]	@ (8001240 <MX_GPIO_Init+0x170>)
 80010f2:	699b      	ldr	r3, [r3, #24]
 80010f4:	f003 0310 	and.w	r3, r3, #16
 80010f8:	60fb      	str	r3, [r7, #12]
 80010fa:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80010fc:	4b50      	ldr	r3, [pc, #320]	@ (8001240 <MX_GPIO_Init+0x170>)
 80010fe:	699b      	ldr	r3, [r3, #24]
 8001100:	4a4f      	ldr	r2, [pc, #316]	@ (8001240 <MX_GPIO_Init+0x170>)
 8001102:	f043 0304 	orr.w	r3, r3, #4
 8001106:	6193      	str	r3, [r2, #24]
 8001108:	4b4d      	ldr	r3, [pc, #308]	@ (8001240 <MX_GPIO_Init+0x170>)
 800110a:	699b      	ldr	r3, [r3, #24]
 800110c:	f003 0304 	and.w	r3, r3, #4
 8001110:	60bb      	str	r3, [r7, #8]
 8001112:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001114:	4b4a      	ldr	r3, [pc, #296]	@ (8001240 <MX_GPIO_Init+0x170>)
 8001116:	699b      	ldr	r3, [r3, #24]
 8001118:	4a49      	ldr	r2, [pc, #292]	@ (8001240 <MX_GPIO_Init+0x170>)
 800111a:	f043 0308 	orr.w	r3, r3, #8
 800111e:	6193      	str	r3, [r2, #24]
 8001120:	4b47      	ldr	r3, [pc, #284]	@ (8001240 <MX_GPIO_Init+0x170>)
 8001122:	699b      	ldr	r3, [r3, #24]
 8001124:	f003 0308 	and.w	r3, r3, #8
 8001128:	607b      	str	r3, [r7, #4]
 800112a:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800112c:	4b44      	ldr	r3, [pc, #272]	@ (8001240 <MX_GPIO_Init+0x170>)
 800112e:	699b      	ldr	r3, [r3, #24]
 8001130:	4a43      	ldr	r2, [pc, #268]	@ (8001240 <MX_GPIO_Init+0x170>)
 8001132:	f043 0320 	orr.w	r3, r3, #32
 8001136:	6193      	str	r3, [r2, #24]
 8001138:	4b41      	ldr	r3, [pc, #260]	@ (8001240 <MX_GPIO_Init+0x170>)
 800113a:	699b      	ldr	r3, [r3, #24]
 800113c:	f003 0320 	and.w	r3, r3, #32
 8001140:	603b      	str	r3, [r7, #0]
 8001142:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001144:	2200      	movs	r2, #0
 8001146:	f24e 0138 	movw	r1, #57400	@ 0xe038
 800114a:	483e      	ldr	r0, [pc, #248]	@ (8001244 <MX_GPIO_Init+0x174>)
 800114c:	f001 f95f 	bl	800240e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001150:	2200      	movs	r2, #0
 8001152:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8001156:	483c      	ldr	r0, [pc, #240]	@ (8001248 <MX_GPIO_Init+0x178>)
 8001158:	f001 f959 	bl	800240e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 800115c:	2200      	movs	r2, #0
 800115e:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001162:	483a      	ldr	r0, [pc, #232]	@ (800124c <MX_GPIO_Init+0x17c>)
 8001164:	f001 f953 	bl	800240e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001168:	2200      	movs	r2, #0
 800116a:	2104      	movs	r1, #4
 800116c:	4838      	ldr	r0, [pc, #224]	@ (8001250 <MX_GPIO_Init+0x180>)
 800116e:	f001 f94e 	bl	800240e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001172:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001176:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001178:	4b36      	ldr	r3, [pc, #216]	@ (8001254 <MX_GPIO_Init+0x184>)
 800117a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800117c:	2300      	movs	r3, #0
 800117e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001180:	f107 0310 	add.w	r3, r7, #16
 8001184:	4619      	mov	r1, r3
 8001186:	4830      	ldr	r0, [pc, #192]	@ (8001248 <MX_GPIO_Init+0x178>)
 8001188:	f000 ffa6 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 800118c:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8001190:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001192:	2301      	movs	r3, #1
 8001194:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001196:	2300      	movs	r3, #0
 8001198:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800119a:	2302      	movs	r3, #2
 800119c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800119e:	f107 0310 	add.w	r3, r7, #16
 80011a2:	4619      	mov	r1, r3
 80011a4:	4827      	ldr	r0, [pc, #156]	@ (8001244 <MX_GPIO_Init+0x174>)
 80011a6:	f000 ff97 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 80011aa:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 80011ae:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011b0:	2301      	movs	r3, #1
 80011b2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011b4:	2300      	movs	r3, #0
 80011b6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011b8:	2302      	movs	r3, #2
 80011ba:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011bc:	f107 0310 	add.w	r3, r7, #16
 80011c0:	4619      	mov	r1, r3
 80011c2:	4821      	ldr	r0, [pc, #132]	@ (8001248 <MX_GPIO_Init+0x178>)
 80011c4:	f000 ff88 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 80011c8:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 80011cc:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80011ce:	2301      	movs	r3, #1
 80011d0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011d2:	2300      	movs	r3, #0
 80011d4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80011d6:	2302      	movs	r3, #2
 80011d8:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80011da:	f107 0310 	add.w	r3, r7, #16
 80011de:	4619      	mov	r1, r3
 80011e0:	481a      	ldr	r0, [pc, #104]	@ (800124c <MX_GPIO_Init+0x17c>)
 80011e2:	f000 ff79 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 80011e6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80011ea:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80011ec:	2300      	movs	r3, #0
 80011ee:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80011f0:	2300      	movs	r3, #0
 80011f2:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80011f4:	f107 0310 	add.w	r3, r7, #16
 80011f8:	4619      	mov	r1, r3
 80011fa:	4813      	ldr	r0, [pc, #76]	@ (8001248 <MX_GPIO_Init+0x178>)
 80011fc:	f000 ff6c 	bl	80020d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001200:	2304      	movs	r3, #4
 8001202:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001204:	2301      	movs	r3, #1
 8001206:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001208:	2300      	movs	r3, #0
 800120a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800120c:	2302      	movs	r3, #2
 800120e:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001210:	f107 0310 	add.w	r3, r7, #16
 8001214:	4619      	mov	r1, r3
 8001216:	480e      	ldr	r0, [pc, #56]	@ (8001250 <MX_GPIO_Init+0x180>)
 8001218:	f000 ff5e 	bl	80020d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 800121c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001220:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001222:	2300      	movs	r3, #0
 8001224:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001226:	2301      	movs	r3, #1
 8001228:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 800122a:	f107 0310 	add.w	r3, r7, #16
 800122e:	4619      	mov	r1, r3
 8001230:	4805      	ldr	r0, [pc, #20]	@ (8001248 <MX_GPIO_Init+0x178>)
 8001232:	f000 ff51 	bl	80020d8 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001236:	bf00      	nop
 8001238:	3720      	adds	r7, #32
 800123a:	46bd      	mov	sp, r7
 800123c:	bd80      	pop	{r7, pc}
 800123e:	bf00      	nop
 8001240:	40021000 	.word	0x40021000
 8001244:	40010c00 	.word	0x40010c00
 8001248:	40011000 	.word	0x40011000
 800124c:	40010800 	.word	0x40010800
 8001250:	40011400 	.word	0x40011400
 8001254:	10110000 	.word	0x10110000

08001258 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001258:	b480      	push	{r7}
 800125a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800125c:	b672      	cpsid	i
}
 800125e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001260:	bf00      	nop
 8001262:	e7fd      	b.n	8001260 <Error_Handler+0x8>

08001264 <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 8001264:	b480      	push	{r7}
 8001266:	b083      	sub	sp, #12
 8001268:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 800126a:	4b07      	ldr	r3, [pc, #28]	@ (8001288 <swap_buffers+0x24>)
 800126c:	681b      	ldr	r3, [r3, #0]
 800126e:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 8001270:	4b06      	ldr	r3, [pc, #24]	@ (800128c <swap_buffers+0x28>)
 8001272:	681b      	ldr	r3, [r3, #0]
 8001274:	4a04      	ldr	r2, [pc, #16]	@ (8001288 <swap_buffers+0x24>)
 8001276:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8001278:	4a04      	ldr	r2, [pc, #16]	@ (800128c <swap_buffers+0x28>)
 800127a:	687b      	ldr	r3, [r7, #4]
 800127c:	6013      	str	r3, [r2, #0]
}
 800127e:	bf00      	nop
 8001280:	370c      	adds	r7, #12
 8001282:	46bd      	mov	sp, r7
 8001284:	bc80      	pop	{r7}
 8001286:	4770      	bx	lr
 8001288:	20000038 	.word	0x20000038
 800128c:	2000003c 	.word	0x2000003c

08001290 <clear_back_buffer>:


void clear_back_buffer(void) {
 8001290:	b580      	push	{r7, lr}
 8001292:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 8001294:	4b04      	ldr	r3, [pc, #16]	@ (80012a8 <clear_back_buffer+0x18>)
 8001296:	681b      	ldr	r3, [r3, #0]
 8001298:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800129c:	2100      	movs	r1, #0
 800129e:	4618      	mov	r0, r3
 80012a0:	f002 fd6e 	bl	8003d80 <memset>
}
 80012a4:	bf00      	nop
 80012a6:	bd80      	pop	{r7, pc}
 80012a8:	2000003c 	.word	0x2000003c

080012ac <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 80012ac:	b480      	push	{r7}
 80012ae:	b085      	sub	sp, #20
 80012b0:	af00      	add	r7, sp, #0
 80012b2:	60f8      	str	r0, [r7, #12]
 80012b4:	60b9      	str	r1, [r7, #8]
 80012b6:	4611      	mov	r1, r2
 80012b8:	461a      	mov	r2, r3
 80012ba:	460b      	mov	r3, r1
 80012bc:	71fb      	strb	r3, [r7, #7]
 80012be:	4613      	mov	r3, r2
 80012c0:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 80012c2:	68fb      	ldr	r3, [r7, #12]
 80012c4:	2b00      	cmp	r3, #0
 80012c6:	db34      	blt.n	8001332 <set_pixel+0x86>
 80012c8:	68fb      	ldr	r3, [r7, #12]
 80012ca:	2b3f      	cmp	r3, #63	@ 0x3f
 80012cc:	dc31      	bgt.n	8001332 <set_pixel+0x86>
 80012ce:	68bb      	ldr	r3, [r7, #8]
 80012d0:	2b00      	cmp	r3, #0
 80012d2:	db2e      	blt.n	8001332 <set_pixel+0x86>
 80012d4:	68bb      	ldr	r3, [r7, #8]
 80012d6:	2b1f      	cmp	r3, #31
 80012d8:	dc2b      	bgt.n	8001332 <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 80012da:	79fb      	ldrb	r3, [r7, #7]
 80012dc:	2b00      	cmp	r3, #0
 80012de:	bf14      	ite	ne
 80012e0:	2301      	movne	r3, #1
 80012e2:	2300      	moveq	r3, #0
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 80012e8:	79bb      	ldrb	r3, [r7, #6]
 80012ea:	2b00      	cmp	r3, #0
 80012ec:	bf14      	ite	ne
 80012ee:	2301      	movne	r3, #1
 80012f0:	2300      	moveq	r3, #0
 80012f2:	b2db      	uxtb	r3, r3
 80012f4:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 80012f6:	7e3b      	ldrb	r3, [r7, #24]
 80012f8:	2b00      	cmp	r3, #0
 80012fa:	bf14      	ite	ne
 80012fc:	2301      	movne	r3, #1
 80012fe:	2300      	moveq	r3, #0
 8001300:	b2db      	uxtb	r3, r3
 8001302:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 8001304:	79fb      	ldrb	r3, [r7, #7]
 8001306:	009b      	lsls	r3, r3, #2
 8001308:	b25a      	sxtb	r2, r3
 800130a:	79bb      	ldrb	r3, [r7, #6]
 800130c:	005b      	lsls	r3, r3, #1
 800130e:	b25b      	sxtb	r3, r3
 8001310:	4313      	orrs	r3, r2
 8001312:	b25a      	sxtb	r2, r3
 8001314:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001318:	4313      	orrs	r3, r2
 800131a:	b259      	sxtb	r1, r3
 800131c:	4b07      	ldr	r3, [pc, #28]	@ (800133c <set_pixel+0x90>)
 800131e:	681a      	ldr	r2, [r3, #0]
 8001320:	b2c9      	uxtb	r1, r1
 8001322:	68fb      	ldr	r3, [r7, #12]
 8001324:	015b      	lsls	r3, r3, #5
 8001326:	441a      	add	r2, r3
 8001328:	68bb      	ldr	r3, [r7, #8]
 800132a:	4413      	add	r3, r2
 800132c:	460a      	mov	r2, r1
 800132e:	701a      	strb	r2, [r3, #0]
 8001330:	e000      	b.n	8001334 <set_pixel+0x88>
		return;
 8001332:	bf00      	nop
}
 8001334:	3714      	adds	r7, #20
 8001336:	46bd      	mov	sp, r7
 8001338:	bc80      	pop	{r7}
 800133a:	4770      	bx	lr
 800133c:	2000003c 	.word	0x2000003c

08001340 <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b086      	sub	sp, #24
 8001344:	af02      	add	r7, sp, #8
 8001346:	60f8      	str	r0, [r7, #12]
 8001348:	60b9      	str	r1, [r7, #8]
 800134a:	4613      	mov	r3, r2
 800134c:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 800134e:	79f9      	ldrb	r1, [r7, #7]
 8001350:	79fa      	ldrb	r2, [r7, #7]
 8001352:	79fb      	ldrb	r3, [r7, #7]
 8001354:	9300      	str	r3, [sp, #0]
 8001356:	460b      	mov	r3, r1
 8001358:	68b9      	ldr	r1, [r7, #8]
 800135a:	68f8      	ldr	r0, [r7, #12]
 800135c:	f7ff ffa6 	bl	80012ac <set_pixel>
}
 8001360:	bf00      	nop
 8001362:	3710      	adds	r7, #16
 8001364:	46bd      	mov	sp, r7
 8001366:	bd80      	pop	{r7, pc}

08001368 <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8001368:	b480      	push	{r7}
 800136a:	b085      	sub	sp, #20
 800136c:	af00      	add	r7, sp, #0
 800136e:	60b9      	str	r1, [r7, #8]
 8001370:	607a      	str	r2, [r7, #4]
 8001372:	603b      	str	r3, [r7, #0]
 8001374:	4603      	mov	r3, r0
 8001376:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8001378:	7bfb      	ldrb	r3, [r7, #15]
 800137a:	089b      	lsrs	r3, r3, #2
 800137c:	b2db      	uxtb	r3, r3
 800137e:	f003 0301 	and.w	r3, r3, #1
 8001382:	b2da      	uxtb	r2, r3
 8001384:	68bb      	ldr	r3, [r7, #8]
 8001386:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8001388:	7bfb      	ldrb	r3, [r7, #15]
 800138a:	085b      	lsrs	r3, r3, #1
 800138c:	b2db      	uxtb	r3, r3
 800138e:	f003 0301 	and.w	r3, r3, #1
 8001392:	b2da      	uxtb	r2, r3
 8001394:	687b      	ldr	r3, [r7, #4]
 8001396:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8001398:	7bfb      	ldrb	r3, [r7, #15]
 800139a:	f003 0301 	and.w	r3, r3, #1
 800139e:	b2da      	uxtb	r2, r3
 80013a0:	683b      	ldr	r3, [r7, #0]
 80013a2:	701a      	strb	r2, [r3, #0]
}
 80013a4:	bf00      	nop
 80013a6:	3714      	adds	r7, #20
 80013a8:	46bd      	mov	sp, r7
 80013aa:	bc80      	pop	{r7}
 80013ac:	4770      	bx	lr
	...

080013b0 <render_row>:

uint8_t current_row = 0;
void render_row() {
 80013b0:	b580      	push	{r7, lr}
 80013b2:	b084      	sub	sp, #16
 80013b4:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80013b6:	2300      	movs	r3, #0
 80013b8:	73fb      	strb	r3, [r7, #15]
 80013ba:	e092      	b.n	80014e2 <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 80013bc:	2301      	movs	r3, #1
 80013be:	73bb      	strb	r3, [r7, #14]
 80013c0:	e087      	b.n	80014d2 <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 80013c2:	2300      	movs	r3, #0
 80013c4:	737b      	strb	r3, [r7, #13]
 80013c6:	e07c      	b.n	80014c2 <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 80013c8:	7bfb      	ldrb	r3, [r7, #15]
 80013ca:	009b      	lsls	r3, r3, #2
 80013cc:	b2da      	uxtb	r2, r3
 80013ce:	7b7b      	ldrb	r3, [r7, #13]
 80013d0:	4413      	add	r3, r2
 80013d2:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 80013d4:	7bbb      	ldrb	r3, [r7, #14]
 80013d6:	00db      	lsls	r3, r3, #3
 80013d8:	b2da      	uxtb	r2, r3
 80013da:	4b6f      	ldr	r3, [pc, #444]	@ (8001598 <render_row+0x1e8>)
 80013dc:	781b      	ldrb	r3, [r3, #0]
 80013de:	4413      	add	r3, r2
 80013e0:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 80013e2:	4b6e      	ldr	r3, [pc, #440]	@ (800159c <render_row+0x1ec>)
 80013e4:	6819      	ldr	r1, [r3, #0]
 80013e6:	7b3a      	ldrb	r2, [r7, #12]
 80013e8:	7afb      	ldrb	r3, [r7, #11]
 80013ea:	0152      	lsls	r2, r2, #5
 80013ec:	440a      	add	r2, r1
 80013ee:	4413      	add	r3, r2
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 80013f4:	4b69      	ldr	r3, [pc, #420]	@ (800159c <render_row+0x1ec>)
 80013f6:	6819      	ldr	r1, [r3, #0]
 80013f8:	7b3a      	ldrb	r2, [r7, #12]
 80013fa:	7afb      	ldrb	r3, [r7, #11]
 80013fc:	3310      	adds	r3, #16
 80013fe:	0152      	lsls	r2, r2, #5
 8001400:	440a      	add	r2, r1
 8001402:	4413      	add	r3, r2
 8001404:	781b      	ldrb	r3, [r3, #0]
 8001406:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 8001408:	1dbb      	adds	r3, r7, #6
 800140a:	1dfa      	adds	r2, r7, #7
 800140c:	f107 0108 	add.w	r1, r7, #8
 8001410:	7ab8      	ldrb	r0, [r7, #10]
 8001412:	f7ff ffa9 	bl	8001368 <get_rgb>
				R1(r);
 8001416:	7a3b      	ldrb	r3, [r7, #8]
 8001418:	2b00      	cmp	r3, #0
 800141a:	d003      	beq.n	8001424 <render_row+0x74>
 800141c:	4b60      	ldr	r3, [pc, #384]	@ (80015a0 <render_row+0x1f0>)
 800141e:	2220      	movs	r2, #32
 8001420:	611a      	str	r2, [r3, #16]
 8001422:	e002      	b.n	800142a <render_row+0x7a>
 8001424:	4b5e      	ldr	r3, [pc, #376]	@ (80015a0 <render_row+0x1f0>)
 8001426:	2220      	movs	r2, #32
 8001428:	615a      	str	r2, [r3, #20]
				G1(g);
 800142a:	79fb      	ldrb	r3, [r7, #7]
 800142c:	2b00      	cmp	r3, #0
 800142e:	d003      	beq.n	8001438 <render_row+0x88>
 8001430:	4b5b      	ldr	r3, [pc, #364]	@ (80015a0 <render_row+0x1f0>)
 8001432:	2208      	movs	r2, #8
 8001434:	611a      	str	r2, [r3, #16]
 8001436:	e002      	b.n	800143e <render_row+0x8e>
 8001438:	4b59      	ldr	r3, [pc, #356]	@ (80015a0 <render_row+0x1f0>)
 800143a:	2208      	movs	r2, #8
 800143c:	615a      	str	r2, [r3, #20]
				B1(b);
 800143e:	79bb      	ldrb	r3, [r7, #6]
 8001440:	2b00      	cmp	r3, #0
 8001442:	d004      	beq.n	800144e <render_row+0x9e>
 8001444:	4b57      	ldr	r3, [pc, #348]	@ (80015a4 <render_row+0x1f4>)
 8001446:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 800144a:	611a      	str	r2, [r3, #16]
 800144c:	e003      	b.n	8001456 <render_row+0xa6>
 800144e:	4b55      	ldr	r3, [pc, #340]	@ (80015a4 <render_row+0x1f4>)
 8001450:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001454:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 8001456:	1dbb      	adds	r3, r7, #6
 8001458:	1dfa      	adds	r2, r7, #7
 800145a:	f107 0108 	add.w	r1, r7, #8
 800145e:	7a78      	ldrb	r0, [r7, #9]
 8001460:	f7ff ff82 	bl	8001368 <get_rgb>
				R2(r);
 8001464:	7a3b      	ldrb	r3, [r7, #8]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d003      	beq.n	8001472 <render_row+0xc2>
 800146a:	4b4d      	ldr	r3, [pc, #308]	@ (80015a0 <render_row+0x1f0>)
 800146c:	2210      	movs	r2, #16
 800146e:	611a      	str	r2, [r3, #16]
 8001470:	e002      	b.n	8001478 <render_row+0xc8>
 8001472:	4b4b      	ldr	r3, [pc, #300]	@ (80015a0 <render_row+0x1f0>)
 8001474:	2210      	movs	r2, #16
 8001476:	615a      	str	r2, [r3, #20]
				G2(g);
 8001478:	79fb      	ldrb	r3, [r7, #7]
 800147a:	2b00      	cmp	r3, #0
 800147c:	d003      	beq.n	8001486 <render_row+0xd6>
 800147e:	4b4a      	ldr	r3, [pc, #296]	@ (80015a8 <render_row+0x1f8>)
 8001480:	2204      	movs	r2, #4
 8001482:	611a      	str	r2, [r3, #16]
 8001484:	e002      	b.n	800148c <render_row+0xdc>
 8001486:	4b48      	ldr	r3, [pc, #288]	@ (80015a8 <render_row+0x1f8>)
 8001488:	2204      	movs	r2, #4
 800148a:	615a      	str	r2, [r3, #20]
				B2(b);
 800148c:	79bb      	ldrb	r3, [r7, #6]
 800148e:	2b00      	cmp	r3, #0
 8001490:	d004      	beq.n	800149c <render_row+0xec>
 8001492:	4b44      	ldr	r3, [pc, #272]	@ (80015a4 <render_row+0x1f4>)
 8001494:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001498:	611a      	str	r2, [r3, #16]
 800149a:	e003      	b.n	80014a4 <render_row+0xf4>
 800149c:	4b41      	ldr	r3, [pc, #260]	@ (80015a4 <render_row+0x1f4>)
 800149e:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 80014a2:	615a      	str	r2, [r3, #20]

				CLK_H;
 80014a4:	2201      	movs	r2, #1
 80014a6:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014aa:	483d      	ldr	r0, [pc, #244]	@ (80015a0 <render_row+0x1f0>)
 80014ac:	f000 ffaf 	bl	800240e <HAL_GPIO_WritePin>
				CLK_L;
 80014b0:	2200      	movs	r2, #0
 80014b2:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 80014b6:	483a      	ldr	r0, [pc, #232]	@ (80015a0 <render_row+0x1f0>)
 80014b8:	f000 ffa9 	bl	800240e <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 80014bc:	7b7b      	ldrb	r3, [r7, #13]
 80014be:	3301      	adds	r3, #1
 80014c0:	737b      	strb	r3, [r7, #13]
 80014c2:	7b7b      	ldrb	r3, [r7, #13]
 80014c4:	2b03      	cmp	r3, #3
 80014c6:	f67f af7f 	bls.w	80013c8 <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 80014ca:	7bbb      	ldrb	r3, [r7, #14]
 80014cc:	3b01      	subs	r3, #1
 80014ce:	b2db      	uxtb	r3, r3
 80014d0:	73bb      	strb	r3, [r7, #14]
 80014d2:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	f6bf af73 	bge.w	80013c2 <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 80014dc:	7bfb      	ldrb	r3, [r7, #15]
 80014de:	3301      	adds	r3, #1
 80014e0:	73fb      	strb	r3, [r7, #15]
 80014e2:	7bfb      	ldrb	r3, [r7, #15]
 80014e4:	2b0f      	cmp	r3, #15
 80014e6:	f67f af69 	bls.w	80013bc <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 80014ea:	4b2e      	ldr	r3, [pc, #184]	@ (80015a4 <render_row+0x1f4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a2d      	ldr	r2, [pc, #180]	@ (80015a4 <render_row+0x1f4>)
 80014f0:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 80014f4:	6013      	str	r3, [r2, #0]
	LAT_H;
 80014f6:	2201      	movs	r2, #1
 80014f8:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014fc:	4828      	ldr	r0, [pc, #160]	@ (80015a0 <render_row+0x1f0>)
 80014fe:	f000 ff86 	bl	800240e <HAL_GPIO_WritePin>
	LAT_L;
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001508:	4825      	ldr	r0, [pc, #148]	@ (80015a0 <render_row+0x1f0>)
 800150a:	f000 ff80 	bl	800240e <HAL_GPIO_WritePin>
	ROW(current_row);
 800150e:	4b22      	ldr	r3, [pc, #136]	@ (8001598 <render_row+0x1e8>)
 8001510:	781b      	ldrb	r3, [r3, #0]
 8001512:	f003 0301 	and.w	r3, r3, #1
 8001516:	2b00      	cmp	r3, #0
 8001518:	d004      	beq.n	8001524 <render_row+0x174>
 800151a:	4b24      	ldr	r3, [pc, #144]	@ (80015ac <render_row+0x1fc>)
 800151c:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001520:	611a      	str	r2, [r3, #16]
 8001522:	e003      	b.n	800152c <render_row+0x17c>
 8001524:	4b21      	ldr	r3, [pc, #132]	@ (80015ac <render_row+0x1fc>)
 8001526:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800152a:	615a      	str	r2, [r3, #20]
 800152c:	4b1a      	ldr	r3, [pc, #104]	@ (8001598 <render_row+0x1e8>)
 800152e:	781b      	ldrb	r3, [r3, #0]
 8001530:	f003 0302 	and.w	r3, r3, #2
 8001534:	2b00      	cmp	r3, #0
 8001536:	d004      	beq.n	8001542 <render_row+0x192>
 8001538:	4b1a      	ldr	r3, [pc, #104]	@ (80015a4 <render_row+0x1f4>)
 800153a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800153e:	611a      	str	r2, [r3, #16]
 8001540:	e003      	b.n	800154a <render_row+0x19a>
 8001542:	4b18      	ldr	r3, [pc, #96]	@ (80015a4 <render_row+0x1f4>)
 8001544:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001548:	615a      	str	r2, [r3, #20]
 800154a:	4b13      	ldr	r3, [pc, #76]	@ (8001598 <render_row+0x1e8>)
 800154c:	781b      	ldrb	r3, [r3, #0]
 800154e:	f003 0304 	and.w	r3, r3, #4
 8001552:	2b00      	cmp	r3, #0
 8001554:	d004      	beq.n	8001560 <render_row+0x1b0>
 8001556:	4b13      	ldr	r3, [pc, #76]	@ (80015a4 <render_row+0x1f4>)
 8001558:	f44f 7280 	mov.w	r2, #256	@ 0x100
 800155c:	611a      	str	r2, [r3, #16]
 800155e:	e003      	b.n	8001568 <render_row+0x1b8>
 8001560:	4b10      	ldr	r3, [pc, #64]	@ (80015a4 <render_row+0x1f4>)
 8001562:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001566:	615a      	str	r2, [r3, #20]
 8001568:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <render_row+0x1e8>)
 800156a:	781b      	ldrb	r3, [r3, #0]
 800156c:	f003 0308 	and.w	r3, r3, #8
 8001570:	2b00      	cmp	r3, #0
 8001572:	d003      	beq.n	800157c <render_row+0x1cc>
 8001574:	4b0b      	ldr	r3, [pc, #44]	@ (80015a4 <render_row+0x1f4>)
 8001576:	2280      	movs	r2, #128	@ 0x80
 8001578:	611a      	str	r2, [r3, #16]
 800157a:	e002      	b.n	8001582 <render_row+0x1d2>
 800157c:	4b09      	ldr	r3, [pc, #36]	@ (80015a4 <render_row+0x1f4>)
 800157e:	2280      	movs	r2, #128	@ 0x80
 8001580:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 8001582:	4b08      	ldr	r3, [pc, #32]	@ (80015a4 <render_row+0x1f4>)
 8001584:	681b      	ldr	r3, [r3, #0]
 8001586:	4a07      	ldr	r2, [pc, #28]	@ (80015a4 <render_row+0x1f4>)
 8001588:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800158c:	6013      	str	r3, [r2, #0]
}
 800158e:	bf00      	nop
 8001590:	3710      	adds	r7, #16
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	200011f5 	.word	0x200011f5
 800159c:	20000038 	.word	0x20000038
 80015a0:	40010c00 	.word	0x40010c00
 80015a4:	40011000 	.word	0x40011000
 80015a8:	40011400 	.word	0x40011400
 80015ac:	40010800 	.word	0x40010800

080015b0 <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
#define RENDER_INTERVAL_MS 10
uint32_t last_render_time = 0;

void render_buffer() {
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b082      	sub	sp, #8
 80015b4:	af00      	add	r7, sp, #0
	if (current_row == 0) {
 80015b6:	4b16      	ldr	r3, [pc, #88]	@ (8001610 <render_buffer+0x60>)
 80015b8:	781b      	ldrb	r3, [r3, #0]
 80015ba:	2b00      	cmp	r3, #0
 80015bc:	d10b      	bne.n	80015d6 <render_buffer+0x26>
		uint32_t tick = HAL_GetTick();
 80015be:	f000 fc73 	bl	8001ea8 <HAL_GetTick>
 80015c2:	6078      	str	r0, [r7, #4]
		if (tick - last_render_time < RENDER_INTERVAL_MS) {
 80015c4:	4b13      	ldr	r3, [pc, #76]	@ (8001614 <render_buffer+0x64>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	687a      	ldr	r2, [r7, #4]
 80015ca:	1ad3      	subs	r3, r2, r3
 80015cc:	2b09      	cmp	r3, #9
 80015ce:	d91b      	bls.n	8001608 <render_buffer+0x58>
			return;
		} else {
			last_render_time = tick;
 80015d0:	4a10      	ldr	r2, [pc, #64]	@ (8001614 <render_buffer+0x64>)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	6013      	str	r3, [r2, #0]
		}
	}


	render_row();
 80015d6:	f7ff feeb 	bl	80013b0 <render_row>

	if (++current_row == 8) {
 80015da:	4b0d      	ldr	r3, [pc, #52]	@ (8001610 <render_buffer+0x60>)
 80015dc:	781b      	ldrb	r3, [r3, #0]
 80015de:	3301      	adds	r3, #1
 80015e0:	b2da      	uxtb	r2, r3
 80015e2:	4b0b      	ldr	r3, [pc, #44]	@ (8001610 <render_buffer+0x60>)
 80015e4:	701a      	strb	r2, [r3, #0]
 80015e6:	4b0a      	ldr	r3, [pc, #40]	@ (8001610 <render_buffer+0x60>)
 80015e8:	781b      	ldrb	r3, [r3, #0]
 80015ea:	2b08      	cmp	r3, #8
 80015ec:	d10d      	bne.n	800160a <render_buffer+0x5a>
		current_row = 0;
 80015ee:	4b08      	ldr	r3, [pc, #32]	@ (8001610 <render_buffer+0x60>)
 80015f0:	2200      	movs	r2, #0
 80015f2:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 80015f4:	4b08      	ldr	r3, [pc, #32]	@ (8001618 <render_buffer+0x68>)
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	2b00      	cmp	r3, #0
 80015fa:	d006      	beq.n	800160a <render_buffer+0x5a>
			swap_buffers();
 80015fc:	f7ff fe32 	bl	8001264 <swap_buffers>
			is_back_buffer_new = false;
 8001600:	4b05      	ldr	r3, [pc, #20]	@ (8001618 <render_buffer+0x68>)
 8001602:	2200      	movs	r2, #0
 8001604:	701a      	strb	r2, [r3, #0]
 8001606:	e000      	b.n	800160a <render_buffer+0x5a>
			return;
 8001608:	bf00      	nop
		}
	}
}
 800160a:	3708      	adds	r7, #8
 800160c:	46bd      	mov	sp, r7
 800160e:	bd80      	pop	{r7, pc}
 8001610:	200011f5 	.word	0x200011f5
 8001614:	200011f8 	.word	0x200011f8
 8001618:	200011f4 	.word	0x200011f4

0800161c <set_pixel_w_bold>:
};
#define FONT_WIDTH 5
#define FONT_HEIGHT 7


void set_pixel_w_bold(int x, int y, uint8_t w) {
 800161c:	b580      	push	{r7, lr}
 800161e:	b084      	sub	sp, #16
 8001620:	af00      	add	r7, sp, #0
 8001622:	60f8      	str	r0, [r7, #12]
 8001624:	60b9      	str	r1, [r7, #8]
 8001626:	4613      	mov	r3, r2
 8001628:	71fb      	strb	r3, [r7, #7]
	set_pixel_w(x  , y  , w);
 800162a:	79fb      	ldrb	r3, [r7, #7]
 800162c:	461a      	mov	r2, r3
 800162e:	68b9      	ldr	r1, [r7, #8]
 8001630:	68f8      	ldr	r0, [r7, #12]
 8001632:	f7ff fe85 	bl	8001340 <set_pixel_w>
	set_pixel_w(x+1, y  , w);
 8001636:	68fb      	ldr	r3, [r7, #12]
 8001638:	3301      	adds	r3, #1
 800163a:	79fa      	ldrb	r2, [r7, #7]
 800163c:	68b9      	ldr	r1, [r7, #8]
 800163e:	4618      	mov	r0, r3
 8001640:	f7ff fe7e 	bl	8001340 <set_pixel_w>
	set_pixel_w(x  , y+1, w);
 8001644:	68bb      	ldr	r3, [r7, #8]
 8001646:	3301      	adds	r3, #1
 8001648:	79fa      	ldrb	r2, [r7, #7]
 800164a:	4619      	mov	r1, r3
 800164c:	68f8      	ldr	r0, [r7, #12]
 800164e:	f7ff fe77 	bl	8001340 <set_pixel_w>
	set_pixel_w(x+1, y+1, w);
 8001652:	68fb      	ldr	r3, [r7, #12]
 8001654:	1c58      	adds	r0, r3, #1
 8001656:	68bb      	ldr	r3, [r7, #8]
 8001658:	3301      	adds	r3, #1
 800165a:	79fa      	ldrb	r2, [r7, #7]
 800165c:	4619      	mov	r1, r3
 800165e:	f7ff fe6f 	bl	8001340 <set_pixel_w>
}
 8001662:	bf00      	nop
 8001664:	3710      	adds	r7, #16
 8001666:	46bd      	mov	sp, r7
 8001668:	bd80      	pop	{r7, pc}
	...

0800166c <draw_digit>:

void draw_digit(uint8_t num, int x, int y, bool bold) {
 800166c:	b580      	push	{r7, lr}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
 8001672:	60b9      	str	r1, [r7, #8]
 8001674:	607a      	str	r2, [r7, #4]
 8001676:	461a      	mov	r2, r3
 8001678:	4603      	mov	r3, r0
 800167a:	73fb      	strb	r3, [r7, #15]
 800167c:	4613      	mov	r3, r2
 800167e:	73bb      	strb	r3, [r7, #14]
	if (num > 9) {
 8001680:	7bfb      	ldrb	r3, [r7, #15]
 8001682:	2b09      	cmp	r3, #9
 8001684:	d858      	bhi.n	8001738 <draw_digit+0xcc>
		return;
	}
	if (x > WIDTH || y > HEIGHT) {
 8001686:	68bb      	ldr	r3, [r7, #8]
 8001688:	2b40      	cmp	r3, #64	@ 0x40
 800168a:	dc57      	bgt.n	800173c <draw_digit+0xd0>
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	2b20      	cmp	r3, #32
 8001690:	dc54      	bgt.n	800173c <draw_digit+0xd0>
		return;
	}
	if (x < -FONT_WIDTH - FONT_WIDTH*bold || y < -FONT_HEIGHT - FONT_HEIGHT*bold) {
 8001692:	7bbb      	ldrb	r3, [r7, #14]
 8001694:	1c5a      	adds	r2, r3, #1
 8001696:	4613      	mov	r3, r2
 8001698:	079b      	lsls	r3, r3, #30
 800169a:	1a9b      	subs	r3, r3, r2
 800169c:	009b      	lsls	r3, r3, #2
 800169e:	1a9b      	subs	r3, r3, r2
 80016a0:	68ba      	ldr	r2, [r7, #8]
 80016a2:	429a      	cmp	r2, r3
 80016a4:	db4c      	blt.n	8001740 <draw_digit+0xd4>
 80016a6:	7bbb      	ldrb	r3, [r7, #14]
 80016a8:	3301      	adds	r3, #1
 80016aa:	461a      	mov	r2, r3
 80016ac:	00db      	lsls	r3, r3, #3
 80016ae:	1ad3      	subs	r3, r2, r3
 80016b0:	687a      	ldr	r2, [r7, #4]
 80016b2:	429a      	cmp	r2, r3
 80016b4:	db44      	blt.n	8001740 <draw_digit+0xd4>
		return;
	}

	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 80016b6:	2300      	movs	r3, #0
 80016b8:	75fb      	strb	r3, [r7, #23]
 80016ba:	e039      	b.n	8001730 <draw_digit+0xc4>
		uint8_t col_bitmap = text_bitmaps[num+59][col];
 80016bc:	7bfb      	ldrb	r3, [r7, #15]
 80016be:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 80016c2:	7df9      	ldrb	r1, [r7, #23]
 80016c4:	4820      	ldr	r0, [pc, #128]	@ (8001748 <draw_digit+0xdc>)
 80016c6:	4613      	mov	r3, r2
 80016c8:	009b      	lsls	r3, r3, #2
 80016ca:	4413      	add	r3, r2
 80016cc:	4403      	add	r3, r0
 80016ce:	440b      	add	r3, r1
 80016d0:	781b      	ldrb	r3, [r3, #0]
 80016d2:	757b      	strb	r3, [r7, #21]

		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 80016d4:	2300      	movs	r3, #0
 80016d6:	75bb      	strb	r3, [r7, #22]
 80016d8:	e024      	b.n	8001724 <draw_digit+0xb8>
			if (col_bitmap & (1 << row)) {
 80016da:	7d7a      	ldrb	r2, [r7, #21]
 80016dc:	7dbb      	ldrb	r3, [r7, #22]
 80016de:	fa42 f303 	asr.w	r3, r2, r3
 80016e2:	f003 0301 	and.w	r3, r3, #1
 80016e6:	2b00      	cmp	r3, #0
 80016e8:	d019      	beq.n	800171e <draw_digit+0xb2>
				if (bold) {
 80016ea:	7bbb      	ldrb	r3, [r7, #14]
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d00c      	beq.n	800170a <draw_digit+0x9e>
					set_pixel_w_bold(x + 2 * col, y + 2 * row, 1);
 80016f0:	7dfb      	ldrb	r3, [r7, #23]
 80016f2:	005a      	lsls	r2, r3, #1
 80016f4:	68bb      	ldr	r3, [r7, #8]
 80016f6:	18d0      	adds	r0, r2, r3
 80016f8:	7dbb      	ldrb	r3, [r7, #22]
 80016fa:	005a      	lsls	r2, r3, #1
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	4413      	add	r3, r2
 8001700:	2201      	movs	r2, #1
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff ff8a 	bl	800161c <set_pixel_w_bold>
 8001708:	e009      	b.n	800171e <draw_digit+0xb2>
				} else {
					set_pixel_w(x + col, y + row, 1);
 800170a:	7dfa      	ldrb	r2, [r7, #23]
 800170c:	68bb      	ldr	r3, [r7, #8]
 800170e:	18d0      	adds	r0, r2, r3
 8001710:	7dba      	ldrb	r2, [r7, #22]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	4413      	add	r3, r2
 8001716:	2201      	movs	r2, #1
 8001718:	4619      	mov	r1, r3
 800171a:	f7ff fe11 	bl	8001340 <set_pixel_w>
		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 800171e:	7dbb      	ldrb	r3, [r7, #22]
 8001720:	3301      	adds	r3, #1
 8001722:	75bb      	strb	r3, [r7, #22]
 8001724:	7dbb      	ldrb	r3, [r7, #22]
 8001726:	2b06      	cmp	r3, #6
 8001728:	d9d7      	bls.n	80016da <draw_digit+0x6e>
	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 800172a:	7dfb      	ldrb	r3, [r7, #23]
 800172c:	3301      	adds	r3, #1
 800172e:	75fb      	strb	r3, [r7, #23]
 8001730:	7dfb      	ldrb	r3, [r7, #23]
 8001732:	2b04      	cmp	r3, #4
 8001734:	d9c2      	bls.n	80016bc <draw_digit+0x50>
 8001736:	e004      	b.n	8001742 <draw_digit+0xd6>
		return;
 8001738:	bf00      	nop
 800173a:	e002      	b.n	8001742 <draw_digit+0xd6>
		return;
 800173c:	bf00      	nop
 800173e:	e000      	b.n	8001742 <draw_digit+0xd6>
		return;
 8001740:	bf00      	nop
				}
			}
		}
	}
}
 8001742:	3718      	adds	r7, #24
 8001744:	46bd      	mov	sp, r7
 8001746:	bd80      	pop	{r7, pc}
 8001748:	08004f24 	.word	0x08004f24

0800174c <draw_number>:

void draw_number(int num, int x, int y, bool bold) {
 800174c:	b580      	push	{r7, lr}
 800174e:	b08a      	sub	sp, #40	@ 0x28
 8001750:	af00      	add	r7, sp, #0
 8001752:	60f8      	str	r0, [r7, #12]
 8001754:	60b9      	str	r1, [r7, #8]
 8001756:	607a      	str	r2, [r7, #4]
 8001758:	70fb      	strb	r3, [r7, #3]
	if (num == 0) {
 800175a:	68fb      	ldr	r3, [r7, #12]
 800175c:	2b00      	cmp	r3, #0
 800175e:	d106      	bne.n	800176e <draw_number+0x22>
		draw_digit(0, x, y, bold);
 8001760:	78fb      	ldrb	r3, [r7, #3]
 8001762:	687a      	ldr	r2, [r7, #4]
 8001764:	68b9      	ldr	r1, [r7, #8]
 8001766:	2000      	movs	r0, #0
 8001768:	f7ff ff80 	bl	800166c <draw_digit>
		return;
 800176c:	e049      	b.n	8001802 <draw_number+0xb6>
	}

	uint8_t digit_count = 0;
 800176e:	2300      	movs	r3, #0
 8001770:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int tmp = num;
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	623b      	str	r3, [r7, #32]
	while (tmp > 0) {
 8001778:	e00c      	b.n	8001794 <draw_number+0x48>
		tmp /= 10;
 800177a:	6a3b      	ldr	r3, [r7, #32]
 800177c:	4a22      	ldr	r2, [pc, #136]	@ (8001808 <draw_number+0xbc>)
 800177e:	fb82 1203 	smull	r1, r2, r2, r3
 8001782:	1092      	asrs	r2, r2, #2
 8001784:	17db      	asrs	r3, r3, #31
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	623b      	str	r3, [r7, #32]
		digit_count++;
 800178a:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 800178e:	3301      	adds	r3, #1
 8001790:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (tmp > 0) {
 8001794:	6a3b      	ldr	r3, [r7, #32]
 8001796:	2b00      	cmp	r3, #0
 8001798:	dcef      	bgt.n	800177a <draw_number+0x2e>
	}

	uint8_t digit_width = bold ? (FONT_WIDTH * 2) : FONT_WIDTH;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	2b00      	cmp	r3, #0
 800179e:	d001      	beq.n	80017a4 <draw_number+0x58>
 80017a0:	230a      	movs	r3, #10
 80017a2:	e000      	b.n	80017a6 <draw_number+0x5a>
 80017a4:	2305      	movs	r3, #5
 80017a6:	76fb      	strb	r3, [r7, #27]
	for (int i = digit_count - 1; i >= 0; --i) {
 80017a8:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80017ac:	3b01      	subs	r3, #1
 80017ae:	61fb      	str	r3, [r7, #28]
 80017b0:	e024      	b.n	80017fc <draw_number+0xb0>
		int digit = num % 10;
 80017b2:	68fa      	ldr	r2, [r7, #12]
 80017b4:	4b14      	ldr	r3, [pc, #80]	@ (8001808 <draw_number+0xbc>)
 80017b6:	fb83 1302 	smull	r1, r3, r3, r2
 80017ba:	1099      	asrs	r1, r3, #2
 80017bc:	17d3      	asrs	r3, r2, #31
 80017be:	1ac9      	subs	r1, r1, r3
 80017c0:	460b      	mov	r3, r1
 80017c2:	009b      	lsls	r3, r3, #2
 80017c4:	440b      	add	r3, r1
 80017c6:	005b      	lsls	r3, r3, #1
 80017c8:	1ad3      	subs	r3, r2, r3
 80017ca:	617b      	str	r3, [r7, #20]
		draw_digit(digit, x + i * (digit_width + 1), y, bold);
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	b2d8      	uxtb	r0, r3
 80017d0:	7efb      	ldrb	r3, [r7, #27]
 80017d2:	3301      	adds	r3, #1
 80017d4:	69fa      	ldr	r2, [r7, #28]
 80017d6:	fb03 f202 	mul.w	r2, r3, r2
 80017da:	68bb      	ldr	r3, [r7, #8]
 80017dc:	18d1      	adds	r1, r2, r3
 80017de:	78fb      	ldrb	r3, [r7, #3]
 80017e0:	687a      	ldr	r2, [r7, #4]
 80017e2:	f7ff ff43 	bl	800166c <draw_digit>
		num /= 10;
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	4a07      	ldr	r2, [pc, #28]	@ (8001808 <draw_number+0xbc>)
 80017ea:	fb82 1203 	smull	r1, r2, r2, r3
 80017ee:	1092      	asrs	r2, r2, #2
 80017f0:	17db      	asrs	r3, r3, #31
 80017f2:	1ad3      	subs	r3, r2, r3
 80017f4:	60fb      	str	r3, [r7, #12]
	for (int i = digit_count - 1; i >= 0; --i) {
 80017f6:	69fb      	ldr	r3, [r7, #28]
 80017f8:	3b01      	subs	r3, #1
 80017fa:	61fb      	str	r3, [r7, #28]
 80017fc:	69fb      	ldr	r3, [r7, #28]
 80017fe:	2b00      	cmp	r3, #0
 8001800:	dad7      	bge.n	80017b2 <draw_number+0x66>
	}
}
 8001802:	3728      	adds	r7, #40	@ 0x28
 8001804:	46bd      	mov	sp, r7
 8001806:	bd80      	pop	{r7, pc}
 8001808:	66666667 	.word	0x66666667

0800180c <draw_char>:


void draw_char(char c, int x, int y, bool bold) {
 800180c:	b580      	push	{r7, lr}
 800180e:	b086      	sub	sp, #24
 8001810:	af00      	add	r7, sp, #0
 8001812:	60b9      	str	r1, [r7, #8]
 8001814:	607a      	str	r2, [r7, #4]
 8001816:	461a      	mov	r2, r3
 8001818:	4603      	mov	r3, r0
 800181a:	73fb      	strb	r3, [r7, #15]
 800181c:	4613      	mov	r3, r2
 800181e:	73bb      	strb	r3, [r7, #14]
	if (x > WIDTH || y > HEIGHT) {
 8001820:	68bb      	ldr	r3, [r7, #8]
 8001822:	2b40      	cmp	r3, #64	@ 0x40
 8001824:	f300 809e 	bgt.w	8001964 <draw_char+0x158>
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	2b20      	cmp	r3, #32
 800182c:	f300 809a 	bgt.w	8001964 <draw_char+0x158>
		return;
	}
	if (x < -FONT_WIDTH - FONT_WIDTH*bold || y < -FONT_HEIGHT - FONT_HEIGHT*bold) {
 8001830:	7bbb      	ldrb	r3, [r7, #14]
 8001832:	1c5a      	adds	r2, r3, #1
 8001834:	4613      	mov	r3, r2
 8001836:	079b      	lsls	r3, r3, #30
 8001838:	1a9b      	subs	r3, r3, r2
 800183a:	009b      	lsls	r3, r3, #2
 800183c:	1a9b      	subs	r3, r3, r2
 800183e:	68ba      	ldr	r2, [r7, #8]
 8001840:	429a      	cmp	r2, r3
 8001842:	f2c0 8091 	blt.w	8001968 <draw_char+0x15c>
 8001846:	7bbb      	ldrb	r3, [r7, #14]
 8001848:	3301      	adds	r3, #1
 800184a:	461a      	mov	r2, r3
 800184c:	00db      	lsls	r3, r3, #3
 800184e:	1ad3      	subs	r3, r2, r3
 8001850:	687a      	ldr	r2, [r7, #4]
 8001852:	429a      	cmp	r2, r3
 8001854:	f2c0 8088 	blt.w	8001968 <draw_char+0x15c>
		return;
	}

	uint8_t index;
	if (c >= 'A' && c <= 'Z') {
 8001858:	7bfb      	ldrb	r3, [r7, #15]
 800185a:	2b40      	cmp	r3, #64	@ 0x40
 800185c:	d906      	bls.n	800186c <draw_char+0x60>
 800185e:	7bfb      	ldrb	r3, [r7, #15]
 8001860:	2b5a      	cmp	r3, #90	@ 0x5a
 8001862:	d803      	bhi.n	800186c <draw_char+0x60>
		index = c - 'A';
 8001864:	7bfb      	ldrb	r3, [r7, #15]
 8001866:	3b41      	subs	r3, #65	@ 0x41
 8001868:	75fb      	strb	r3, [r7, #23]
 800186a:	e03c      	b.n	80018e6 <draw_char+0xda>
	} else if (c >= 'a' && c <= 'z') {
 800186c:	7bfb      	ldrb	r3, [r7, #15]
 800186e:	2b60      	cmp	r3, #96	@ 0x60
 8001870:	d906      	bls.n	8001880 <draw_char+0x74>
 8001872:	7bfb      	ldrb	r3, [r7, #15]
 8001874:	2b7a      	cmp	r3, #122	@ 0x7a
 8001876:	d803      	bhi.n	8001880 <draw_char+0x74>
		index = c - 'a' + 26;
 8001878:	7bfb      	ldrb	r3, [r7, #15]
 800187a:	3b47      	subs	r3, #71	@ 0x47
 800187c:	75fb      	strb	r3, [r7, #23]
 800187e:	e032      	b.n	80018e6 <draw_char+0xda>
	} else if (c >= '0' && c <= '9') {
 8001880:	7bfb      	ldrb	r3, [r7, #15]
 8001882:	2b2f      	cmp	r3, #47	@ 0x2f
 8001884:	d906      	bls.n	8001894 <draw_char+0x88>
 8001886:	7bfb      	ldrb	r3, [r7, #15]
 8001888:	2b39      	cmp	r3, #57	@ 0x39
 800188a:	d803      	bhi.n	8001894 <draw_char+0x88>
		index = c - '0' + 59;
 800188c:	7bfb      	ldrb	r3, [r7, #15]
 800188e:	330b      	adds	r3, #11
 8001890:	75fb      	strb	r3, [r7, #23]
 8001892:	e028      	b.n	80018e6 <draw_char+0xda>
	} else if (c == ' ') {
 8001894:	7bfb      	ldrb	r3, [r7, #15]
 8001896:	2b20      	cmp	r3, #32
 8001898:	d102      	bne.n	80018a0 <draw_char+0x94>
		index = 52;
 800189a:	2334      	movs	r3, #52	@ 0x34
 800189c:	75fb      	strb	r3, [r7, #23]
 800189e:	e022      	b.n	80018e6 <draw_char+0xda>
	} else if (c == '!') {
 80018a0:	7bfb      	ldrb	r3, [r7, #15]
 80018a2:	2b21      	cmp	r3, #33	@ 0x21
 80018a4:	d102      	bne.n	80018ac <draw_char+0xa0>
		index = 53;
 80018a6:	2335      	movs	r3, #53	@ 0x35
 80018a8:	75fb      	strb	r3, [r7, #23]
 80018aa:	e01c      	b.n	80018e6 <draw_char+0xda>
	} else if (c == '?') {
 80018ac:	7bfb      	ldrb	r3, [r7, #15]
 80018ae:	2b3f      	cmp	r3, #63	@ 0x3f
 80018b0:	d102      	bne.n	80018b8 <draw_char+0xac>
		index = 54;
 80018b2:	2336      	movs	r3, #54	@ 0x36
 80018b4:	75fb      	strb	r3, [r7, #23]
 80018b6:	e016      	b.n	80018e6 <draw_char+0xda>
	} else if (c == '.') {
 80018b8:	7bfb      	ldrb	r3, [r7, #15]
 80018ba:	2b2e      	cmp	r3, #46	@ 0x2e
 80018bc:	d102      	bne.n	80018c4 <draw_char+0xb8>
		index = 55;
 80018be:	2337      	movs	r3, #55	@ 0x37
 80018c0:	75fb      	strb	r3, [r7, #23]
 80018c2:	e010      	b.n	80018e6 <draw_char+0xda>
	} else if (c == ',') {
 80018c4:	7bfb      	ldrb	r3, [r7, #15]
 80018c6:	2b2c      	cmp	r3, #44	@ 0x2c
 80018c8:	d102      	bne.n	80018d0 <draw_char+0xc4>
		index = 56;
 80018ca:	2338      	movs	r3, #56	@ 0x38
 80018cc:	75fb      	strb	r3, [r7, #23]
 80018ce:	e00a      	b.n	80018e6 <draw_char+0xda>
	} else if (c == '-') {
 80018d0:	7bfb      	ldrb	r3, [r7, #15]
 80018d2:	2b2d      	cmp	r3, #45	@ 0x2d
 80018d4:	d102      	bne.n	80018dc <draw_char+0xd0>
		index = 57;
 80018d6:	2339      	movs	r3, #57	@ 0x39
 80018d8:	75fb      	strb	r3, [r7, #23]
 80018da:	e004      	b.n	80018e6 <draw_char+0xda>
	} else if (c == '\'') {
 80018dc:	7bfb      	ldrb	r3, [r7, #15]
 80018de:	2b27      	cmp	r3, #39	@ 0x27
 80018e0:	d144      	bne.n	800196c <draw_char+0x160>
		index = 58;
 80018e2:	233a      	movs	r3, #58	@ 0x3a
 80018e4:	75fb      	strb	r3, [r7, #23]
	} else {
		return;
	}

	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 80018e6:	2300      	movs	r3, #0
 80018e8:	75bb      	strb	r3, [r7, #22]
 80018ea:	e037      	b.n	800195c <draw_char+0x150>
		uint8_t col_bitmap = text_bitmaps[index][col];
 80018ec:	7dfa      	ldrb	r2, [r7, #23]
 80018ee:	7db9      	ldrb	r1, [r7, #22]
 80018f0:	4820      	ldr	r0, [pc, #128]	@ (8001974 <draw_char+0x168>)
 80018f2:	4613      	mov	r3, r2
 80018f4:	009b      	lsls	r3, r3, #2
 80018f6:	4413      	add	r3, r2
 80018f8:	4403      	add	r3, r0
 80018fa:	440b      	add	r3, r1
 80018fc:	781b      	ldrb	r3, [r3, #0]
 80018fe:	753b      	strb	r3, [r7, #20]

		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 8001900:	2300      	movs	r3, #0
 8001902:	757b      	strb	r3, [r7, #21]
 8001904:	e024      	b.n	8001950 <draw_char+0x144>
			if (col_bitmap & (1 << row)) {
 8001906:	7d3a      	ldrb	r2, [r7, #20]
 8001908:	7d7b      	ldrb	r3, [r7, #21]
 800190a:	fa42 f303 	asr.w	r3, r2, r3
 800190e:	f003 0301 	and.w	r3, r3, #1
 8001912:	2b00      	cmp	r3, #0
 8001914:	d019      	beq.n	800194a <draw_char+0x13e>
				if (bold) {
 8001916:	7bbb      	ldrb	r3, [r7, #14]
 8001918:	2b00      	cmp	r3, #0
 800191a:	d00c      	beq.n	8001936 <draw_char+0x12a>
					set_pixel_w_bold(x + 2 * col, y + 2 * row, 1);
 800191c:	7dbb      	ldrb	r3, [r7, #22]
 800191e:	005a      	lsls	r2, r3, #1
 8001920:	68bb      	ldr	r3, [r7, #8]
 8001922:	18d0      	adds	r0, r2, r3
 8001924:	7d7b      	ldrb	r3, [r7, #21]
 8001926:	005a      	lsls	r2, r3, #1
 8001928:	687b      	ldr	r3, [r7, #4]
 800192a:	4413      	add	r3, r2
 800192c:	2201      	movs	r2, #1
 800192e:	4619      	mov	r1, r3
 8001930:	f7ff fe74 	bl	800161c <set_pixel_w_bold>
 8001934:	e009      	b.n	800194a <draw_char+0x13e>
				} else {
					set_pixel_w(x + col, y + row, 1);
 8001936:	7dba      	ldrb	r2, [r7, #22]
 8001938:	68bb      	ldr	r3, [r7, #8]
 800193a:	18d0      	adds	r0, r2, r3
 800193c:	7d7a      	ldrb	r2, [r7, #21]
 800193e:	687b      	ldr	r3, [r7, #4]
 8001940:	4413      	add	r3, r2
 8001942:	2201      	movs	r2, #1
 8001944:	4619      	mov	r1, r3
 8001946:	f7ff fcfb 	bl	8001340 <set_pixel_w>
		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 800194a:	7d7b      	ldrb	r3, [r7, #21]
 800194c:	3301      	adds	r3, #1
 800194e:	757b      	strb	r3, [r7, #21]
 8001950:	7d7b      	ldrb	r3, [r7, #21]
 8001952:	2b06      	cmp	r3, #6
 8001954:	d9d7      	bls.n	8001906 <draw_char+0xfa>
	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 8001956:	7dbb      	ldrb	r3, [r7, #22]
 8001958:	3301      	adds	r3, #1
 800195a:	75bb      	strb	r3, [r7, #22]
 800195c:	7dbb      	ldrb	r3, [r7, #22]
 800195e:	2b04      	cmp	r3, #4
 8001960:	d9c4      	bls.n	80018ec <draw_char+0xe0>
 8001962:	e004      	b.n	800196e <draw_char+0x162>
		return;
 8001964:	bf00      	nop
 8001966:	e002      	b.n	800196e <draw_char+0x162>
		return;
 8001968:	bf00      	nop
 800196a:	e000      	b.n	800196e <draw_char+0x162>
		return;
 800196c:	bf00      	nop
				}
			}
		}
	}
}
 800196e:	3718      	adds	r7, #24
 8001970:	46bd      	mov	sp, r7
 8001972:	bd80      	pop	{r7, pc}
 8001974:	08004f24 	.word	0x08004f24

08001978 <draw_text>:

void draw_text(const char *text, int x, int y, bool bold) {
 8001978:	b580      	push	{r7, lr}
 800197a:	b084      	sub	sp, #16
 800197c:	af00      	add	r7, sp, #0
 800197e:	60f8      	str	r0, [r7, #12]
 8001980:	60b9      	str	r1, [r7, #8]
 8001982:	607a      	str	r2, [r7, #4]
 8001984:	70fb      	strb	r3, [r7, #3]
	while (*text) {
 8001986:	e010      	b.n	80019aa <draw_text+0x32>
		draw_char(*text++, x, y, bold);
 8001988:	68fb      	ldr	r3, [r7, #12]
 800198a:	1c5a      	adds	r2, r3, #1
 800198c:	60fa      	str	r2, [r7, #12]
 800198e:	7818      	ldrb	r0, [r3, #0]
 8001990:	78fb      	ldrb	r3, [r7, #3]
 8001992:	687a      	ldr	r2, [r7, #4]
 8001994:	68b9      	ldr	r1, [r7, #8]
 8001996:	f7ff ff39 	bl	800180c <draw_char>
		x += FONT_WIDTH + 1 + FONT_WIDTH*bold;
 800199a:	78fa      	ldrb	r2, [r7, #3]
 800199c:	4613      	mov	r3, r2
 800199e:	009b      	lsls	r3, r3, #2
 80019a0:	4413      	add	r3, r2
 80019a2:	3306      	adds	r3, #6
 80019a4:	68ba      	ldr	r2, [r7, #8]
 80019a6:	4413      	add	r3, r2
 80019a8:	60bb      	str	r3, [r7, #8]
	while (*text) {
 80019aa:	68fb      	ldr	r3, [r7, #12]
 80019ac:	781b      	ldrb	r3, [r3, #0]
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d1ea      	bne.n	8001988 <draw_text+0x10>
	}
}
 80019b2:	bf00      	nop
 80019b4:	bf00      	nop
 80019b6:	3710      	adds	r7, #16
 80019b8:	46bd      	mov	sp, r7
 80019ba:	bd80      	pop	{r7, pc}

080019bc <calculate_text_width>:

const int calculate_text_width(const char* text, bool bold) {
 80019bc:	b480      	push	{r7}
 80019be:	b085      	sub	sp, #20
 80019c0:	af00      	add	r7, sp, #0
 80019c2:	6078      	str	r0, [r7, #4]
 80019c4:	460b      	mov	r3, r1
 80019c6:	70fb      	strb	r3, [r7, #3]
	int width = 0;
 80019c8:	2300      	movs	r3, #0
 80019ca:	60fb      	str	r3, [r7, #12]
	uint8_t char_width = bold ? FONT_WIDTH * 2 : FONT_WIDTH;
 80019cc:	78fb      	ldrb	r3, [r7, #3]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d001      	beq.n	80019d6 <calculate_text_width+0x1a>
 80019d2:	230a      	movs	r3, #10
 80019d4:	e000      	b.n	80019d8 <calculate_text_width+0x1c>
 80019d6:	2305      	movs	r3, #5
 80019d8:	72fb      	strb	r3, [r7, #11]

	while (*text) {
 80019da:	e007      	b.n	80019ec <calculate_text_width+0x30>
		width += char_width + 1;
 80019dc:	7afb      	ldrb	r3, [r7, #11]
 80019de:	3301      	adds	r3, #1
 80019e0:	68fa      	ldr	r2, [r7, #12]
 80019e2:	4413      	add	r3, r2
 80019e4:	60fb      	str	r3, [r7, #12]
		text++;
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	3301      	adds	r3, #1
 80019ea:	607b      	str	r3, [r7, #4]
	while (*text) {
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	781b      	ldrb	r3, [r3, #0]
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d1f3      	bne.n	80019dc <calculate_text_width+0x20>
	}

	return width > 0 ? width - 1 : 0;
 80019f4:	68fb      	ldr	r3, [r7, #12]
 80019f6:	2b01      	cmp	r3, #1
 80019f8:	bfb8      	it	lt
 80019fa:	2301      	movlt	r3, #1
 80019fc:	3b01      	subs	r3, #1
}
 80019fe:	4618      	mov	r0, r3
 8001a00:	3714      	adds	r7, #20
 8001a02:	46bd      	mov	sp, r7
 8001a04:	bc80      	pop	{r7}
 8001a06:	4770      	bx	lr

08001a08 <calculate_number_width>:

const int calculate_number_width(int number, bool bold) {
 8001a08:	b480      	push	{r7}
 8001a0a:	b085      	sub	sp, #20
 8001a0c:	af00      	add	r7, sp, #0
 8001a0e:	6078      	str	r0, [r7, #4]
 8001a10:	460b      	mov	r3, r1
 8001a12:	70fb      	strb	r3, [r7, #3]
	uint8_t digit_width = FONT_WIDTH;
 8001a14:	2305      	movs	r3, #5
 8001a16:	72fb      	strb	r3, [r7, #11]
	int width = 0;
 8001a18:	2300      	movs	r3, #0
 8001a1a:	60fb      	str	r3, [r7, #12]

	if (number == 0) {
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	2b00      	cmp	r3, #0
 8001a20:	d117      	bne.n	8001a52 <calculate_number_width+0x4a>
		width += digit_width + 1;
 8001a22:	7afb      	ldrb	r3, [r7, #11]
 8001a24:	3301      	adds	r3, #1
 8001a26:	68fa      	ldr	r2, [r7, #12]
 8001a28:	4413      	add	r3, r2
 8001a2a:	60fb      	str	r3, [r7, #12]
 8001a2c:	e014      	b.n	8001a58 <calculate_number_width+0x50>
	} else {
		while (number > 0) {
			width += digit_width + 1 + digit_width*bold;
 8001a2e:	7afb      	ldrb	r3, [r7, #11]
 8001a30:	1c5a      	adds	r2, r3, #1
 8001a32:	7afb      	ldrb	r3, [r7, #11]
 8001a34:	78f9      	ldrb	r1, [r7, #3]
 8001a36:	fb01 f303 	mul.w	r3, r1, r3
 8001a3a:	4413      	add	r3, r2
 8001a3c:	68fa      	ldr	r2, [r7, #12]
 8001a3e:	4413      	add	r3, r2
 8001a40:	60fb      	str	r3, [r7, #12]
			number /= 10;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	4a09      	ldr	r2, [pc, #36]	@ (8001a6c <calculate_number_width+0x64>)
 8001a46:	fb82 1203 	smull	r1, r2, r2, r3
 8001a4a:	1092      	asrs	r2, r2, #2
 8001a4c:	17db      	asrs	r3, r3, #31
 8001a4e:	1ad3      	subs	r3, r2, r3
 8001a50:	607b      	str	r3, [r7, #4]
		while (number > 0) {
 8001a52:	687b      	ldr	r3, [r7, #4]
 8001a54:	2b00      	cmp	r3, #0
 8001a56:	dcea      	bgt.n	8001a2e <calculate_number_width+0x26>
		}
	}
	return width > 0 ? width - 1 : 0;
 8001a58:	68fb      	ldr	r3, [r7, #12]
 8001a5a:	2b01      	cmp	r3, #1
 8001a5c:	bfb8      	it	lt
 8001a5e:	2301      	movlt	r3, #1
 8001a60:	3b01      	subs	r3, #1
}
 8001a62:	4618      	mov	r0, r3
 8001a64:	3714      	adds	r7, #20
 8001a66:	46bd      	mov	sp, r7
 8001a68:	bc80      	pop	{r7}
 8001a6a:	4770      	bx	lr
 8001a6c:	66666667 	.word	0x66666667

08001a70 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	b085      	sub	sp, #20
 8001a74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001a76:	4b15      	ldr	r3, [pc, #84]	@ (8001acc <HAL_MspInit+0x5c>)
 8001a78:	699b      	ldr	r3, [r3, #24]
 8001a7a:	4a14      	ldr	r2, [pc, #80]	@ (8001acc <HAL_MspInit+0x5c>)
 8001a7c:	f043 0301 	orr.w	r3, r3, #1
 8001a80:	6193      	str	r3, [r2, #24]
 8001a82:	4b12      	ldr	r3, [pc, #72]	@ (8001acc <HAL_MspInit+0x5c>)
 8001a84:	699b      	ldr	r3, [r3, #24]
 8001a86:	f003 0301 	and.w	r3, r3, #1
 8001a8a:	60bb      	str	r3, [r7, #8]
 8001a8c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001a8e:	4b0f      	ldr	r3, [pc, #60]	@ (8001acc <HAL_MspInit+0x5c>)
 8001a90:	69db      	ldr	r3, [r3, #28]
 8001a92:	4a0e      	ldr	r2, [pc, #56]	@ (8001acc <HAL_MspInit+0x5c>)
 8001a94:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a98:	61d3      	str	r3, [r2, #28]
 8001a9a:	4b0c      	ldr	r3, [pc, #48]	@ (8001acc <HAL_MspInit+0x5c>)
 8001a9c:	69db      	ldr	r3, [r3, #28]
 8001a9e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001aa2:	607b      	str	r3, [r7, #4]
 8001aa4:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8001aa6:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad0 <HAL_MspInit+0x60>)
 8001aa8:	685b      	ldr	r3, [r3, #4]
 8001aaa:	60fb      	str	r3, [r7, #12]
 8001aac:	68fb      	ldr	r3, [r7, #12]
 8001aae:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8001ab2:	60fb      	str	r3, [r7, #12]
 8001ab4:	68fb      	ldr	r3, [r7, #12]
 8001ab6:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8001aba:	60fb      	str	r3, [r7, #12]
 8001abc:	4a04      	ldr	r2, [pc, #16]	@ (8001ad0 <HAL_MspInit+0x60>)
 8001abe:	68fb      	ldr	r3, [r7, #12]
 8001ac0:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ac2:	bf00      	nop
 8001ac4:	3714      	adds	r7, #20
 8001ac6:	46bd      	mov	sp, r7
 8001ac8:	bc80      	pop	{r7}
 8001aca:	4770      	bx	lr
 8001acc:	40021000 	.word	0x40021000
 8001ad0:	40010000 	.word	0x40010000

08001ad4 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001ad4:	b580      	push	{r7, lr}
 8001ad6:	b088      	sub	sp, #32
 8001ad8:	af00      	add	r7, sp, #0
 8001ada:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001adc:	f107 0310 	add.w	r3, r7, #16
 8001ae0:	2200      	movs	r2, #0
 8001ae2:	601a      	str	r2, [r3, #0]
 8001ae4:	605a      	str	r2, [r3, #4]
 8001ae6:	609a      	str	r2, [r3, #8]
 8001ae8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4a15      	ldr	r2, [pc, #84]	@ (8001b44 <HAL_SPI_MspInit+0x70>)
 8001af0:	4293      	cmp	r3, r2
 8001af2:	d123      	bne.n	8001b3c <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001af4:	4b14      	ldr	r3, [pc, #80]	@ (8001b48 <HAL_SPI_MspInit+0x74>)
 8001af6:	699b      	ldr	r3, [r3, #24]
 8001af8:	4a13      	ldr	r2, [pc, #76]	@ (8001b48 <HAL_SPI_MspInit+0x74>)
 8001afa:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001afe:	6193      	str	r3, [r2, #24]
 8001b00:	4b11      	ldr	r3, [pc, #68]	@ (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b02:	699b      	ldr	r3, [r3, #24]
 8001b04:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001b08:	60fb      	str	r3, [r7, #12]
 8001b0a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b0c:	4b0e      	ldr	r3, [pc, #56]	@ (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b0e:	699b      	ldr	r3, [r3, #24]
 8001b10:	4a0d      	ldr	r2, [pc, #52]	@ (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b12:	f043 0304 	orr.w	r3, r3, #4
 8001b16:	6193      	str	r3, [r2, #24]
 8001b18:	4b0b      	ldr	r3, [pc, #44]	@ (8001b48 <HAL_SPI_MspInit+0x74>)
 8001b1a:	699b      	ldr	r3, [r3, #24]
 8001b1c:	f003 0304 	and.w	r3, r3, #4
 8001b20:	60bb      	str	r3, [r7, #8]
 8001b22:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001b24:	23a0      	movs	r3, #160	@ 0xa0
 8001b26:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b28:	2302      	movs	r3, #2
 8001b2a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b2c:	2303      	movs	r3, #3
 8001b2e:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b30:	f107 0310 	add.w	r3, r7, #16
 8001b34:	4619      	mov	r1, r3
 8001b36:	4805      	ldr	r0, [pc, #20]	@ (8001b4c <HAL_SPI_MspInit+0x78>)
 8001b38:	f000 face 	bl	80020d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001b3c:	bf00      	nop
 8001b3e:	3720      	adds	r7, #32
 8001b40:	46bd      	mov	sp, r7
 8001b42:	bd80      	pop	{r7, pc}
 8001b44:	40013000 	.word	0x40013000
 8001b48:	40021000 	.word	0x40021000
 8001b4c:	40010800 	.word	0x40010800

08001b50 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001b50:	b580      	push	{r7, lr}
 8001b52:	b084      	sub	sp, #16
 8001b54:	af00      	add	r7, sp, #0
 8001b56:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b60:	d114      	bne.n	8001b8c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b62:	4b15      	ldr	r3, [pc, #84]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x68>)
 8001b64:	69db      	ldr	r3, [r3, #28]
 8001b66:	4a14      	ldr	r2, [pc, #80]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x68>)
 8001b68:	f043 0301 	orr.w	r3, r3, #1
 8001b6c:	61d3      	str	r3, [r2, #28]
 8001b6e:	4b12      	ldr	r3, [pc, #72]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x68>)
 8001b70:	69db      	ldr	r3, [r3, #28]
 8001b72:	f003 0301 	and.w	r3, r3, #1
 8001b76:	60fb      	str	r3, [r7, #12]
 8001b78:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b7a:	2200      	movs	r2, #0
 8001b7c:	2100      	movs	r1, #0
 8001b7e:	201c      	movs	r0, #28
 8001b80:	f000 fa73 	bl	800206a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b84:	201c      	movs	r0, #28
 8001b86:	f000 fa8c 	bl	80020a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8001b8a:	e010      	b.n	8001bae <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8001b8c:	687b      	ldr	r3, [r7, #4]
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4a0a      	ldr	r2, [pc, #40]	@ (8001bbc <HAL_TIM_Base_MspInit+0x6c>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d10b      	bne.n	8001bae <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8001b96:	4b08      	ldr	r3, [pc, #32]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x68>)
 8001b98:	69db      	ldr	r3, [r3, #28]
 8001b9a:	4a07      	ldr	r2, [pc, #28]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x68>)
 8001b9c:	f043 0302 	orr.w	r3, r3, #2
 8001ba0:	61d3      	str	r3, [r2, #28]
 8001ba2:	4b05      	ldr	r3, [pc, #20]	@ (8001bb8 <HAL_TIM_Base_MspInit+0x68>)
 8001ba4:	69db      	ldr	r3, [r3, #28]
 8001ba6:	f003 0302 	and.w	r3, r3, #2
 8001baa:	60bb      	str	r3, [r7, #8]
 8001bac:	68bb      	ldr	r3, [r7, #8]
}
 8001bae:	bf00      	nop
 8001bb0:	3710      	adds	r7, #16
 8001bb2:	46bd      	mov	sp, r7
 8001bb4:	bd80      	pop	{r7, pc}
 8001bb6:	bf00      	nop
 8001bb8:	40021000 	.word	0x40021000
 8001bbc:	40000400 	.word	0x40000400

08001bc0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8001bc0:	b580      	push	{r7, lr}
 8001bc2:	b08a      	sub	sp, #40	@ 0x28
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001bc8:	f107 0314 	add.w	r3, r7, #20
 8001bcc:	2200      	movs	r2, #0
 8001bce:	601a      	str	r2, [r3, #0]
 8001bd0:	605a      	str	r2, [r3, #4]
 8001bd2:	609a      	str	r2, [r3, #8]
 8001bd4:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001bde:	d118      	bne.n	8001c12 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001be0:	4b25      	ldr	r3, [pc, #148]	@ (8001c78 <HAL_TIM_MspPostInit+0xb8>)
 8001be2:	699b      	ldr	r3, [r3, #24]
 8001be4:	4a24      	ldr	r2, [pc, #144]	@ (8001c78 <HAL_TIM_MspPostInit+0xb8>)
 8001be6:	f043 0304 	orr.w	r3, r3, #4
 8001bea:	6193      	str	r3, [r2, #24]
 8001bec:	4b22      	ldr	r3, [pc, #136]	@ (8001c78 <HAL_TIM_MspPostInit+0xb8>)
 8001bee:	699b      	ldr	r3, [r3, #24]
 8001bf0:	f003 0304 	and.w	r3, r3, #4
 8001bf4:	613b      	str	r3, [r7, #16]
 8001bf6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8001bf8:	2301      	movs	r3, #1
 8001bfa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001bfc:	2302      	movs	r3, #2
 8001bfe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c00:	2302      	movs	r3, #2
 8001c02:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c04:	f107 0314 	add.w	r3, r7, #20
 8001c08:	4619      	mov	r1, r3
 8001c0a:	481c      	ldr	r0, [pc, #112]	@ (8001c7c <HAL_TIM_MspPostInit+0xbc>)
 8001c0c:	f000 fa64 	bl	80020d8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001c10:	e02e      	b.n	8001c70 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4a1a      	ldr	r2, [pc, #104]	@ (8001c80 <HAL_TIM_MspPostInit+0xc0>)
 8001c18:	4293      	cmp	r3, r2
 8001c1a:	d129      	bne.n	8001c70 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001c1c:	4b16      	ldr	r3, [pc, #88]	@ (8001c78 <HAL_TIM_MspPostInit+0xb8>)
 8001c1e:	699b      	ldr	r3, [r3, #24]
 8001c20:	4a15      	ldr	r2, [pc, #84]	@ (8001c78 <HAL_TIM_MspPostInit+0xb8>)
 8001c22:	f043 0310 	orr.w	r3, r3, #16
 8001c26:	6193      	str	r3, [r2, #24]
 8001c28:	4b13      	ldr	r3, [pc, #76]	@ (8001c78 <HAL_TIM_MspPostInit+0xb8>)
 8001c2a:	699b      	ldr	r3, [r3, #24]
 8001c2c:	f003 0310 	and.w	r3, r3, #16
 8001c30:	60fb      	str	r3, [r7, #12]
 8001c32:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001c34:	2340      	movs	r3, #64	@ 0x40
 8001c36:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c38:	2302      	movs	r3, #2
 8001c3a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c3c:	2302      	movs	r3, #2
 8001c3e:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c40:	f107 0314 	add.w	r3, r7, #20
 8001c44:	4619      	mov	r1, r3
 8001c46:	480f      	ldr	r0, [pc, #60]	@ (8001c84 <HAL_TIM_MspPostInit+0xc4>)
 8001c48:	f000 fa46 	bl	80020d8 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001c4c:	4b0e      	ldr	r3, [pc, #56]	@ (8001c88 <HAL_TIM_MspPostInit+0xc8>)
 8001c4e:	685b      	ldr	r3, [r3, #4]
 8001c50:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c54:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8001c58:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c5c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001c60:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c62:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c64:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8001c68:	627b      	str	r3, [r7, #36]	@ 0x24
 8001c6a:	4a07      	ldr	r2, [pc, #28]	@ (8001c88 <HAL_TIM_MspPostInit+0xc8>)
 8001c6c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c6e:	6053      	str	r3, [r2, #4]
}
 8001c70:	bf00      	nop
 8001c72:	3728      	adds	r7, #40	@ 0x28
 8001c74:	46bd      	mov	sp, r7
 8001c76:	bd80      	pop	{r7, pc}
 8001c78:	40021000 	.word	0x40021000
 8001c7c:	40010800 	.word	0x40010800
 8001c80:	40000400 	.word	0x40000400
 8001c84:	40011000 	.word	0x40011000
 8001c88:	40010000 	.word	0x40010000

08001c8c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001c8c:	b480      	push	{r7}
 8001c8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <NMI_Handler+0x4>

08001c94 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001c94:	b480      	push	{r7}
 8001c96:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001c98:	bf00      	nop
 8001c9a:	e7fd      	b.n	8001c98 <HardFault_Handler+0x4>

08001c9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001c9c:	b480      	push	{r7}
 8001c9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ca0:	bf00      	nop
 8001ca2:	e7fd      	b.n	8001ca0 <MemManage_Handler+0x4>

08001ca4 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ca4:	b480      	push	{r7}
 8001ca6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ca8:	bf00      	nop
 8001caa:	e7fd      	b.n	8001ca8 <BusFault_Handler+0x4>

08001cac <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001cac:	b480      	push	{r7}
 8001cae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001cb0:	bf00      	nop
 8001cb2:	e7fd      	b.n	8001cb0 <UsageFault_Handler+0x4>

08001cb4 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001cb4:	b480      	push	{r7}
 8001cb6:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001cb8:	bf00      	nop
 8001cba:	46bd      	mov	sp, r7
 8001cbc:	bc80      	pop	{r7}
 8001cbe:	4770      	bx	lr

08001cc0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001cc0:	b480      	push	{r7}
 8001cc2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001cc4:	bf00      	nop
 8001cc6:	46bd      	mov	sp, r7
 8001cc8:	bc80      	pop	{r7}
 8001cca:	4770      	bx	lr

08001ccc <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001ccc:	b480      	push	{r7}
 8001cce:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001cd0:	bf00      	nop
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bc80      	pop	{r7}
 8001cd6:	4770      	bx	lr

08001cd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001cdc:	f000 f8d2 	bl	8001e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001ce0:	bf00      	nop
 8001ce2:	bd80      	pop	{r7, pc}

08001ce4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001ce4:	b580      	push	{r7, lr}
 8001ce6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 8001ce8:	f7ff fc62 	bl	80015b0 <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001cec:	4802      	ldr	r0, [pc, #8]	@ (8001cf8 <TIM2_IRQHandler+0x14>)
 8001cee:	f001 f9a5 	bl	800303c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001cf2:	bf00      	nop
 8001cf4:	bd80      	pop	{r7, pc}
 8001cf6:	bf00      	nop
 8001cf8:	20000150 	.word	0x20000150

08001cfc <_kill>:
{
  return 1;
}

int _kill(int pid, int sig)
{
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b082      	sub	sp, #8
 8001d00:	af00      	add	r7, sp, #0
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8001d06:	f002 f853 	bl	8003db0 <__errno>
 8001d0a:	4603      	mov	r3, r0
 8001d0c:	2216      	movs	r2, #22
 8001d0e:	601a      	str	r2, [r3, #0]
  return -1;
 8001d10:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8001d14:	4618      	mov	r0, r3
 8001d16:	3708      	adds	r7, #8
 8001d18:	46bd      	mov	sp, r7
 8001d1a:	bd80      	pop	{r7, pc}

08001d1c <_exit>:

void _exit (int status)
{
 8001d1c:	b580      	push	{r7, lr}
 8001d1e:	b082      	sub	sp, #8
 8001d20:	af00      	add	r7, sp, #0
 8001d22:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8001d24:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001d28:	6878      	ldr	r0, [r7, #4]
 8001d2a:	f7ff ffe7 	bl	8001cfc <_kill>
  while (1) {}    /* Make sure we hang here */
 8001d2e:	bf00      	nop
 8001d30:	e7fd      	b.n	8001d2e <_exit+0x12>
	...

08001d34 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8001d34:	b580      	push	{r7, lr}
 8001d36:	b086      	sub	sp, #24
 8001d38:	af00      	add	r7, sp, #0
 8001d3a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8001d3c:	4a14      	ldr	r2, [pc, #80]	@ (8001d90 <_sbrk+0x5c>)
 8001d3e:	4b15      	ldr	r3, [pc, #84]	@ (8001d94 <_sbrk+0x60>)
 8001d40:	1ad3      	subs	r3, r2, r3
 8001d42:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8001d44:	697b      	ldr	r3, [r7, #20]
 8001d46:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8001d48:	4b13      	ldr	r3, [pc, #76]	@ (8001d98 <_sbrk+0x64>)
 8001d4a:	681b      	ldr	r3, [r3, #0]
 8001d4c:	2b00      	cmp	r3, #0
 8001d4e:	d102      	bne.n	8001d56 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8001d50:	4b11      	ldr	r3, [pc, #68]	@ (8001d98 <_sbrk+0x64>)
 8001d52:	4a12      	ldr	r2, [pc, #72]	@ (8001d9c <_sbrk+0x68>)
 8001d54:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8001d56:	4b10      	ldr	r3, [pc, #64]	@ (8001d98 <_sbrk+0x64>)
 8001d58:	681a      	ldr	r2, [r3, #0]
 8001d5a:	687b      	ldr	r3, [r7, #4]
 8001d5c:	4413      	add	r3, r2
 8001d5e:	693a      	ldr	r2, [r7, #16]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	d207      	bcs.n	8001d74 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8001d64:	f002 f824 	bl	8003db0 <__errno>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	220c      	movs	r2, #12
 8001d6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001d6e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8001d72:	e009      	b.n	8001d88 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001d74:	4b08      	ldr	r3, [pc, #32]	@ (8001d98 <_sbrk+0x64>)
 8001d76:	681b      	ldr	r3, [r3, #0]
 8001d78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001d7a:	4b07      	ldr	r3, [pc, #28]	@ (8001d98 <_sbrk+0x64>)
 8001d7c:	681a      	ldr	r2, [r3, #0]
 8001d7e:	687b      	ldr	r3, [r7, #4]
 8001d80:	4413      	add	r3, r2
 8001d82:	4a05      	ldr	r2, [pc, #20]	@ (8001d98 <_sbrk+0x64>)
 8001d84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001d86:	68fb      	ldr	r3, [r7, #12]
}
 8001d88:	4618      	mov	r0, r3
 8001d8a:	3718      	adds	r7, #24
 8001d8c:	46bd      	mov	sp, r7
 8001d8e:	bd80      	pop	{r7, pc}
 8001d90:	20005000 	.word	0x20005000
 8001d94:	00000400 	.word	0x00000400
 8001d98:	200011fc 	.word	0x200011fc
 8001d9c:	20001350 	.word	0x20001350

08001da0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001da0:	b480      	push	{r7}
 8001da2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001da4:	bf00      	nop
 8001da6:	46bd      	mov	sp, r7
 8001da8:	bc80      	pop	{r7}
 8001daa:	4770      	bx	lr

08001dac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8001dac:	f7ff fff8 	bl	8001da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001db0:	480b      	ldr	r0, [pc, #44]	@ (8001de0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001db2:	490c      	ldr	r1, [pc, #48]	@ (8001de4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001db4:	4a0c      	ldr	r2, [pc, #48]	@ (8001de8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001db8:	e002      	b.n	8001dc0 <LoopCopyDataInit>

08001dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dbe:	3304      	adds	r3, #4

08001dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001dc4:	d3f9      	bcc.n	8001dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001dc6:	4a09      	ldr	r2, [pc, #36]	@ (8001dec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001dc8:	4c09      	ldr	r4, [pc, #36]	@ (8001df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8001dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001dcc:	e001      	b.n	8001dd2 <LoopFillZerobss>

08001dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001dd0:	3204      	adds	r2, #4

08001dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001dd4:	d3fb      	bcc.n	8001dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001dd6:	f001 fff1 	bl	8003dbc <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8001dda:	f7fe ff81 	bl	8000ce0 <main>
  bx lr
 8001dde:	4770      	bx	lr
  ldr r0, =_sdata
 8001de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001de4:	2000009c 	.word	0x2000009c
  ldr r2, =_sidata
 8001de8:	08005288 	.word	0x08005288
  ldr r2, =_sbss
 8001dec:	200000a0 	.word	0x200000a0
  ldr r4, =_ebss
 8001df0:	20001350 	.word	0x20001350

08001df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001df4:	e7fe      	b.n	8001df4 <ADC1_2_IRQHandler>
	...

08001df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001df8:	b580      	push	{r7, lr}
 8001dfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001dfc:	4b08      	ldr	r3, [pc, #32]	@ (8001e20 <HAL_Init+0x28>)
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	4a07      	ldr	r2, [pc, #28]	@ (8001e20 <HAL_Init+0x28>)
 8001e02:	f043 0310 	orr.w	r3, r3, #16
 8001e06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e08:	2003      	movs	r0, #3
 8001e0a:	f000 f923 	bl	8002054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e0e:	200f      	movs	r0, #15
 8001e10:	f000 f808 	bl	8001e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e14:	f7ff fe2c 	bl	8001a70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e18:	2300      	movs	r3, #0
}
 8001e1a:	4618      	mov	r0, r3
 8001e1c:	bd80      	pop	{r7, pc}
 8001e1e:	bf00      	nop
 8001e20:	40022000 	.word	0x40022000

08001e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e24:	b580      	push	{r7, lr}
 8001e26:	b082      	sub	sp, #8
 8001e28:	af00      	add	r7, sp, #0
 8001e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e2c:	4b12      	ldr	r3, [pc, #72]	@ (8001e78 <HAL_InitTick+0x54>)
 8001e2e:	681a      	ldr	r2, [r3, #0]
 8001e30:	4b12      	ldr	r3, [pc, #72]	@ (8001e7c <HAL_InitTick+0x58>)
 8001e32:	781b      	ldrb	r3, [r3, #0]
 8001e34:	4619      	mov	r1, r3
 8001e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e42:	4618      	mov	r0, r3
 8001e44:	f000 f93b 	bl	80020be <HAL_SYSTICK_Config>
 8001e48:	4603      	mov	r3, r0
 8001e4a:	2b00      	cmp	r3, #0
 8001e4c:	d001      	beq.n	8001e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001e4e:	2301      	movs	r3, #1
 8001e50:	e00e      	b.n	8001e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001e52:	687b      	ldr	r3, [r7, #4]
 8001e54:	2b0f      	cmp	r3, #15
 8001e56:	d80a      	bhi.n	8001e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001e58:	2200      	movs	r2, #0
 8001e5a:	6879      	ldr	r1, [r7, #4]
 8001e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001e60:	f000 f903 	bl	800206a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001e64:	4a06      	ldr	r2, [pc, #24]	@ (8001e80 <HAL_InitTick+0x5c>)
 8001e66:	687b      	ldr	r3, [r7, #4]
 8001e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001e6a:	2300      	movs	r3, #0
 8001e6c:	e000      	b.n	8001e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001e6e:	2301      	movs	r3, #1
}
 8001e70:	4618      	mov	r0, r3
 8001e72:	3708      	adds	r7, #8
 8001e74:	46bd      	mov	sp, r7
 8001e76:	bd80      	pop	{r7, pc}
 8001e78:	20000040 	.word	0x20000040
 8001e7c:	20000048 	.word	0x20000048
 8001e80:	20000044 	.word	0x20000044

08001e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001e84:	b480      	push	{r7}
 8001e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001e88:	4b05      	ldr	r3, [pc, #20]	@ (8001ea0 <HAL_IncTick+0x1c>)
 8001e8a:	781b      	ldrb	r3, [r3, #0]
 8001e8c:	461a      	mov	r2, r3
 8001e8e:	4b05      	ldr	r3, [pc, #20]	@ (8001ea4 <HAL_IncTick+0x20>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	4413      	add	r3, r2
 8001e94:	4a03      	ldr	r2, [pc, #12]	@ (8001ea4 <HAL_IncTick+0x20>)
 8001e96:	6013      	str	r3, [r2, #0]
}
 8001e98:	bf00      	nop
 8001e9a:	46bd      	mov	sp, r7
 8001e9c:	bc80      	pop	{r7}
 8001e9e:	4770      	bx	lr
 8001ea0:	20000048 	.word	0x20000048
 8001ea4:	20001200 	.word	0x20001200

08001ea8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001ea8:	b480      	push	{r7}
 8001eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8001eac:	4b02      	ldr	r3, [pc, #8]	@ (8001eb8 <HAL_GetTick+0x10>)
 8001eae:	681b      	ldr	r3, [r3, #0]
}
 8001eb0:	4618      	mov	r0, r3
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bc80      	pop	{r7}
 8001eb6:	4770      	bx	lr
 8001eb8:	20001200 	.word	0x20001200

08001ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ebc:	b480      	push	{r7}
 8001ebe:	b085      	sub	sp, #20
 8001ec0:	af00      	add	r7, sp, #0
 8001ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001ec4:	687b      	ldr	r3, [r7, #4]
 8001ec6:	f003 0307 	and.w	r3, r3, #7
 8001eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ece:	68db      	ldr	r3, [r3, #12]
 8001ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001ed2:	68ba      	ldr	r2, [r7, #8]
 8001ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001ed8:	4013      	ands	r3, r2
 8001eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8001edc:	68fb      	ldr	r3, [r7, #12]
 8001ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001ee0:	68bb      	ldr	r3, [r7, #8]
 8001ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001eee:	4a04      	ldr	r2, [pc, #16]	@ (8001f00 <__NVIC_SetPriorityGrouping+0x44>)
 8001ef0:	68bb      	ldr	r3, [r7, #8]
 8001ef2:	60d3      	str	r3, [r2, #12]
}
 8001ef4:	bf00      	nop
 8001ef6:	3714      	adds	r7, #20
 8001ef8:	46bd      	mov	sp, r7
 8001efa:	bc80      	pop	{r7}
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	e000ed00 	.word	0xe000ed00

08001f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001f04:	b480      	push	{r7}
 8001f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001f08:	4b04      	ldr	r3, [pc, #16]	@ (8001f1c <__NVIC_GetPriorityGrouping+0x18>)
 8001f0a:	68db      	ldr	r3, [r3, #12]
 8001f0c:	0a1b      	lsrs	r3, r3, #8
 8001f0e:	f003 0307 	and.w	r3, r3, #7
}
 8001f12:	4618      	mov	r0, r3
 8001f14:	46bd      	mov	sp, r7
 8001f16:	bc80      	pop	{r7}
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	e000ed00 	.word	0xe000ed00

08001f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f20:	b480      	push	{r7}
 8001f22:	b083      	sub	sp, #12
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	4603      	mov	r3, r0
 8001f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	db0b      	blt.n	8001f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001f32:	79fb      	ldrb	r3, [r7, #7]
 8001f34:	f003 021f 	and.w	r2, r3, #31
 8001f38:	4906      	ldr	r1, [pc, #24]	@ (8001f54 <__NVIC_EnableIRQ+0x34>)
 8001f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f3e:	095b      	lsrs	r3, r3, #5
 8001f40:	2001      	movs	r0, #1
 8001f42:	fa00 f202 	lsl.w	r2, r0, r2
 8001f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001f4a:	bf00      	nop
 8001f4c:	370c      	adds	r7, #12
 8001f4e:	46bd      	mov	sp, r7
 8001f50:	bc80      	pop	{r7}
 8001f52:	4770      	bx	lr
 8001f54:	e000e100 	.word	0xe000e100

08001f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001f58:	b480      	push	{r7}
 8001f5a:	b083      	sub	sp, #12
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	6039      	str	r1, [r7, #0]
 8001f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f68:	2b00      	cmp	r3, #0
 8001f6a:	db0a      	blt.n	8001f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f6c:	683b      	ldr	r3, [r7, #0]
 8001f6e:	b2da      	uxtb	r2, r3
 8001f70:	490c      	ldr	r1, [pc, #48]	@ (8001fa4 <__NVIC_SetPriority+0x4c>)
 8001f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f76:	0112      	lsls	r2, r2, #4
 8001f78:	b2d2      	uxtb	r2, r2
 8001f7a:	440b      	add	r3, r1
 8001f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001f80:	e00a      	b.n	8001f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001f82:	683b      	ldr	r3, [r7, #0]
 8001f84:	b2da      	uxtb	r2, r3
 8001f86:	4908      	ldr	r1, [pc, #32]	@ (8001fa8 <__NVIC_SetPriority+0x50>)
 8001f88:	79fb      	ldrb	r3, [r7, #7]
 8001f8a:	f003 030f 	and.w	r3, r3, #15
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	0112      	lsls	r2, r2, #4
 8001f92:	b2d2      	uxtb	r2, r2
 8001f94:	440b      	add	r3, r1
 8001f96:	761a      	strb	r2, [r3, #24]
}
 8001f98:	bf00      	nop
 8001f9a:	370c      	adds	r7, #12
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	bc80      	pop	{r7}
 8001fa0:	4770      	bx	lr
 8001fa2:	bf00      	nop
 8001fa4:	e000e100 	.word	0xe000e100
 8001fa8:	e000ed00 	.word	0xe000ed00

08001fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001fac:	b480      	push	{r7}
 8001fae:	b089      	sub	sp, #36	@ 0x24
 8001fb0:	af00      	add	r7, sp, #0
 8001fb2:	60f8      	str	r0, [r7, #12]
 8001fb4:	60b9      	str	r1, [r7, #8]
 8001fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001fb8:	68fb      	ldr	r3, [r7, #12]
 8001fba:	f003 0307 	and.w	r3, r3, #7
 8001fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001fc0:	69fb      	ldr	r3, [r7, #28]
 8001fc2:	f1c3 0307 	rsb	r3, r3, #7
 8001fc6:	2b04      	cmp	r3, #4
 8001fc8:	bf28      	it	cs
 8001fca:	2304      	movcs	r3, #4
 8001fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001fce:	69fb      	ldr	r3, [r7, #28]
 8001fd0:	3304      	adds	r3, #4
 8001fd2:	2b06      	cmp	r3, #6
 8001fd4:	d902      	bls.n	8001fdc <NVIC_EncodePriority+0x30>
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	3b03      	subs	r3, #3
 8001fda:	e000      	b.n	8001fde <NVIC_EncodePriority+0x32>
 8001fdc:	2300      	movs	r3, #0
 8001fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001fe4:	69bb      	ldr	r3, [r7, #24]
 8001fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fea:	43da      	mvns	r2, r3
 8001fec:	68bb      	ldr	r3, [r7, #8]
 8001fee:	401a      	ands	r2, r3
 8001ff0:	697b      	ldr	r3, [r7, #20]
 8001ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001ff4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001ff8:	697b      	ldr	r3, [r7, #20]
 8001ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8001ffe:	43d9      	mvns	r1, r3
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002004:	4313      	orrs	r3, r2
         );
}
 8002006:	4618      	mov	r0, r3
 8002008:	3724      	adds	r7, #36	@ 0x24
 800200a:	46bd      	mov	sp, r7
 800200c:	bc80      	pop	{r7}
 800200e:	4770      	bx	lr

08002010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002010:	b580      	push	{r7, lr}
 8002012:	b082      	sub	sp, #8
 8002014:	af00      	add	r7, sp, #0
 8002016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002018:	687b      	ldr	r3, [r7, #4]
 800201a:	3b01      	subs	r3, #1
 800201c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002020:	d301      	bcc.n	8002026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002022:	2301      	movs	r3, #1
 8002024:	e00f      	b.n	8002046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002026:	4a0a      	ldr	r2, [pc, #40]	@ (8002050 <SysTick_Config+0x40>)
 8002028:	687b      	ldr	r3, [r7, #4]
 800202a:	3b01      	subs	r3, #1
 800202c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800202e:	210f      	movs	r1, #15
 8002030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002034:	f7ff ff90 	bl	8001f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002038:	4b05      	ldr	r3, [pc, #20]	@ (8002050 <SysTick_Config+0x40>)
 800203a:	2200      	movs	r2, #0
 800203c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800203e:	4b04      	ldr	r3, [pc, #16]	@ (8002050 <SysTick_Config+0x40>)
 8002040:	2207      	movs	r2, #7
 8002042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002044:	2300      	movs	r3, #0
}
 8002046:	4618      	mov	r0, r3
 8002048:	3708      	adds	r7, #8
 800204a:	46bd      	mov	sp, r7
 800204c:	bd80      	pop	{r7, pc}
 800204e:	bf00      	nop
 8002050:	e000e010 	.word	0xe000e010

08002054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002054:	b580      	push	{r7, lr}
 8002056:	b082      	sub	sp, #8
 8002058:	af00      	add	r7, sp, #0
 800205a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f7ff ff2d 	bl	8001ebc <__NVIC_SetPriorityGrouping>
}
 8002062:	bf00      	nop
 8002064:	3708      	adds	r7, #8
 8002066:	46bd      	mov	sp, r7
 8002068:	bd80      	pop	{r7, pc}

0800206a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800206a:	b580      	push	{r7, lr}
 800206c:	b086      	sub	sp, #24
 800206e:	af00      	add	r7, sp, #0
 8002070:	4603      	mov	r3, r0
 8002072:	60b9      	str	r1, [r7, #8]
 8002074:	607a      	str	r2, [r7, #4]
 8002076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002078:	2300      	movs	r3, #0
 800207a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800207c:	f7ff ff42 	bl	8001f04 <__NVIC_GetPriorityGrouping>
 8002080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002082:	687a      	ldr	r2, [r7, #4]
 8002084:	68b9      	ldr	r1, [r7, #8]
 8002086:	6978      	ldr	r0, [r7, #20]
 8002088:	f7ff ff90 	bl	8001fac <NVIC_EncodePriority>
 800208c:	4602      	mov	r2, r0
 800208e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002092:	4611      	mov	r1, r2
 8002094:	4618      	mov	r0, r3
 8002096:	f7ff ff5f 	bl	8001f58 <__NVIC_SetPriority>
}
 800209a:	bf00      	nop
 800209c:	3718      	adds	r7, #24
 800209e:	46bd      	mov	sp, r7
 80020a0:	bd80      	pop	{r7, pc}

080020a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80020a2:	b580      	push	{r7, lr}
 80020a4:	b082      	sub	sp, #8
 80020a6:	af00      	add	r7, sp, #0
 80020a8:	4603      	mov	r3, r0
 80020aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80020ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80020b0:	4618      	mov	r0, r3
 80020b2:	f7ff ff35 	bl	8001f20 <__NVIC_EnableIRQ>
}
 80020b6:	bf00      	nop
 80020b8:	3708      	adds	r7, #8
 80020ba:	46bd      	mov	sp, r7
 80020bc:	bd80      	pop	{r7, pc}

080020be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80020be:	b580      	push	{r7, lr}
 80020c0:	b082      	sub	sp, #8
 80020c2:	af00      	add	r7, sp, #0
 80020c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80020c6:	6878      	ldr	r0, [r7, #4]
 80020c8:	f7ff ffa2 	bl	8002010 <SysTick_Config>
 80020cc:	4603      	mov	r3, r0
}
 80020ce:	4618      	mov	r0, r3
 80020d0:	3708      	adds	r7, #8
 80020d2:	46bd      	mov	sp, r7
 80020d4:	bd80      	pop	{r7, pc}
	...

080020d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80020d8:	b480      	push	{r7}
 80020da:	b08b      	sub	sp, #44	@ 0x2c
 80020dc:	af00      	add	r7, sp, #0
 80020de:	6078      	str	r0, [r7, #4]
 80020e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80020e2:	2300      	movs	r3, #0
 80020e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80020e6:	2300      	movs	r3, #0
 80020e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80020ea:	e169      	b.n	80023c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80020ec:	2201      	movs	r2, #1
 80020ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80020f0:	fa02 f303 	lsl.w	r3, r2, r3
 80020f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80020f6:	683b      	ldr	r3, [r7, #0]
 80020f8:	681b      	ldr	r3, [r3, #0]
 80020fa:	69fa      	ldr	r2, [r7, #28]
 80020fc:	4013      	ands	r3, r2
 80020fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002100:	69ba      	ldr	r2, [r7, #24]
 8002102:	69fb      	ldr	r3, [r7, #28]
 8002104:	429a      	cmp	r2, r3
 8002106:	f040 8158 	bne.w	80023ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	685b      	ldr	r3, [r3, #4]
 800210e:	4a9a      	ldr	r2, [pc, #616]	@ (8002378 <HAL_GPIO_Init+0x2a0>)
 8002110:	4293      	cmp	r3, r2
 8002112:	d05e      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002114:	4a98      	ldr	r2, [pc, #608]	@ (8002378 <HAL_GPIO_Init+0x2a0>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d875      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800211a:	4a98      	ldr	r2, [pc, #608]	@ (800237c <HAL_GPIO_Init+0x2a4>)
 800211c:	4293      	cmp	r3, r2
 800211e:	d058      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002120:	4a96      	ldr	r2, [pc, #600]	@ (800237c <HAL_GPIO_Init+0x2a4>)
 8002122:	4293      	cmp	r3, r2
 8002124:	d86f      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002126:	4a96      	ldr	r2, [pc, #600]	@ (8002380 <HAL_GPIO_Init+0x2a8>)
 8002128:	4293      	cmp	r3, r2
 800212a:	d052      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 800212c:	4a94      	ldr	r2, [pc, #592]	@ (8002380 <HAL_GPIO_Init+0x2a8>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d869      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002132:	4a94      	ldr	r2, [pc, #592]	@ (8002384 <HAL_GPIO_Init+0x2ac>)
 8002134:	4293      	cmp	r3, r2
 8002136:	d04c      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002138:	4a92      	ldr	r2, [pc, #584]	@ (8002384 <HAL_GPIO_Init+0x2ac>)
 800213a:	4293      	cmp	r3, r2
 800213c:	d863      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800213e:	4a92      	ldr	r2, [pc, #584]	@ (8002388 <HAL_GPIO_Init+0x2b0>)
 8002140:	4293      	cmp	r3, r2
 8002142:	d046      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
 8002144:	4a90      	ldr	r2, [pc, #576]	@ (8002388 <HAL_GPIO_Init+0x2b0>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d85d      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 800214a:	2b12      	cmp	r3, #18
 800214c:	d82a      	bhi.n	80021a4 <HAL_GPIO_Init+0xcc>
 800214e:	2b12      	cmp	r3, #18
 8002150:	d859      	bhi.n	8002206 <HAL_GPIO_Init+0x12e>
 8002152:	a201      	add	r2, pc, #4	@ (adr r2, 8002158 <HAL_GPIO_Init+0x80>)
 8002154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002158:	080021d3 	.word	0x080021d3
 800215c:	080021ad 	.word	0x080021ad
 8002160:	080021bf 	.word	0x080021bf
 8002164:	08002201 	.word	0x08002201
 8002168:	08002207 	.word	0x08002207
 800216c:	08002207 	.word	0x08002207
 8002170:	08002207 	.word	0x08002207
 8002174:	08002207 	.word	0x08002207
 8002178:	08002207 	.word	0x08002207
 800217c:	08002207 	.word	0x08002207
 8002180:	08002207 	.word	0x08002207
 8002184:	08002207 	.word	0x08002207
 8002188:	08002207 	.word	0x08002207
 800218c:	08002207 	.word	0x08002207
 8002190:	08002207 	.word	0x08002207
 8002194:	08002207 	.word	0x08002207
 8002198:	08002207 	.word	0x08002207
 800219c:	080021b5 	.word	0x080021b5
 80021a0:	080021c9 	.word	0x080021c9
 80021a4:	4a79      	ldr	r2, [pc, #484]	@ (800238c <HAL_GPIO_Init+0x2b4>)
 80021a6:	4293      	cmp	r3, r2
 80021a8:	d013      	beq.n	80021d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80021aa:	e02c      	b.n	8002206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80021ac:	683b      	ldr	r3, [r7, #0]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	623b      	str	r3, [r7, #32]
          break;
 80021b2:	e029      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80021b4:	683b      	ldr	r3, [r7, #0]
 80021b6:	68db      	ldr	r3, [r3, #12]
 80021b8:	3304      	adds	r3, #4
 80021ba:	623b      	str	r3, [r7, #32]
          break;
 80021bc:	e024      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80021be:	683b      	ldr	r3, [r7, #0]
 80021c0:	68db      	ldr	r3, [r3, #12]
 80021c2:	3308      	adds	r3, #8
 80021c4:	623b      	str	r3, [r7, #32]
          break;
 80021c6:	e01f      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80021c8:	683b      	ldr	r3, [r7, #0]
 80021ca:	68db      	ldr	r3, [r3, #12]
 80021cc:	330c      	adds	r3, #12
 80021ce:	623b      	str	r3, [r7, #32]
          break;
 80021d0:	e01a      	b.n	8002208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80021d2:	683b      	ldr	r3, [r7, #0]
 80021d4:	689b      	ldr	r3, [r3, #8]
 80021d6:	2b00      	cmp	r3, #0
 80021d8:	d102      	bne.n	80021e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80021da:	2304      	movs	r3, #4
 80021dc:	623b      	str	r3, [r7, #32]
          break;
 80021de:	e013      	b.n	8002208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80021e0:	683b      	ldr	r3, [r7, #0]
 80021e2:	689b      	ldr	r3, [r3, #8]
 80021e4:	2b01      	cmp	r3, #1
 80021e6:	d105      	bne.n	80021f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021e8:	2308      	movs	r3, #8
 80021ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	69fa      	ldr	r2, [r7, #28]
 80021f0:	611a      	str	r2, [r3, #16]
          break;
 80021f2:	e009      	b.n	8002208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80021f4:	2308      	movs	r3, #8
 80021f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	69fa      	ldr	r2, [r7, #28]
 80021fc:	615a      	str	r2, [r3, #20]
          break;
 80021fe:	e003      	b.n	8002208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002200:	2300      	movs	r3, #0
 8002202:	623b      	str	r3, [r7, #32]
          break;
 8002204:	e000      	b.n	8002208 <HAL_GPIO_Init+0x130>
          break;
 8002206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002208:	69bb      	ldr	r3, [r7, #24]
 800220a:	2bff      	cmp	r3, #255	@ 0xff
 800220c:	d801      	bhi.n	8002212 <HAL_GPIO_Init+0x13a>
 800220e:	687b      	ldr	r3, [r7, #4]
 8002210:	e001      	b.n	8002216 <HAL_GPIO_Init+0x13e>
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	3304      	adds	r3, #4
 8002216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002218:	69bb      	ldr	r3, [r7, #24]
 800221a:	2bff      	cmp	r3, #255	@ 0xff
 800221c:	d802      	bhi.n	8002224 <HAL_GPIO_Init+0x14c>
 800221e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002220:	009b      	lsls	r3, r3, #2
 8002222:	e002      	b.n	800222a <HAL_GPIO_Init+0x152>
 8002224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002226:	3b08      	subs	r3, #8
 8002228:	009b      	lsls	r3, r3, #2
 800222a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800222c:	697b      	ldr	r3, [r7, #20]
 800222e:	681a      	ldr	r2, [r3, #0]
 8002230:	210f      	movs	r1, #15
 8002232:	693b      	ldr	r3, [r7, #16]
 8002234:	fa01 f303 	lsl.w	r3, r1, r3
 8002238:	43db      	mvns	r3, r3
 800223a:	401a      	ands	r2, r3
 800223c:	6a39      	ldr	r1, [r7, #32]
 800223e:	693b      	ldr	r3, [r7, #16]
 8002240:	fa01 f303 	lsl.w	r3, r1, r3
 8002244:	431a      	orrs	r2, r3
 8002246:	697b      	ldr	r3, [r7, #20]
 8002248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800224a:	683b      	ldr	r3, [r7, #0]
 800224c:	685b      	ldr	r3, [r3, #4]
 800224e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002252:	2b00      	cmp	r3, #0
 8002254:	f000 80b1 	beq.w	80023ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002258:	4b4d      	ldr	r3, [pc, #308]	@ (8002390 <HAL_GPIO_Init+0x2b8>)
 800225a:	699b      	ldr	r3, [r3, #24]
 800225c:	4a4c      	ldr	r2, [pc, #304]	@ (8002390 <HAL_GPIO_Init+0x2b8>)
 800225e:	f043 0301 	orr.w	r3, r3, #1
 8002262:	6193      	str	r3, [r2, #24]
 8002264:	4b4a      	ldr	r3, [pc, #296]	@ (8002390 <HAL_GPIO_Init+0x2b8>)
 8002266:	699b      	ldr	r3, [r3, #24]
 8002268:	f003 0301 	and.w	r3, r3, #1
 800226c:	60bb      	str	r3, [r7, #8]
 800226e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002270:	4a48      	ldr	r2, [pc, #288]	@ (8002394 <HAL_GPIO_Init+0x2bc>)
 8002272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002274:	089b      	lsrs	r3, r3, #2
 8002276:	3302      	adds	r3, #2
 8002278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800227c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800227e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002280:	f003 0303 	and.w	r3, r3, #3
 8002284:	009b      	lsls	r3, r3, #2
 8002286:	220f      	movs	r2, #15
 8002288:	fa02 f303 	lsl.w	r3, r2, r3
 800228c:	43db      	mvns	r3, r3
 800228e:	68fa      	ldr	r2, [r7, #12]
 8002290:	4013      	ands	r3, r2
 8002292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002294:	687b      	ldr	r3, [r7, #4]
 8002296:	4a40      	ldr	r2, [pc, #256]	@ (8002398 <HAL_GPIO_Init+0x2c0>)
 8002298:	4293      	cmp	r3, r2
 800229a:	d013      	beq.n	80022c4 <HAL_GPIO_Init+0x1ec>
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	4a3f      	ldr	r2, [pc, #252]	@ (800239c <HAL_GPIO_Init+0x2c4>)
 80022a0:	4293      	cmp	r3, r2
 80022a2:	d00d      	beq.n	80022c0 <HAL_GPIO_Init+0x1e8>
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	4a3e      	ldr	r2, [pc, #248]	@ (80023a0 <HAL_GPIO_Init+0x2c8>)
 80022a8:	4293      	cmp	r3, r2
 80022aa:	d007      	beq.n	80022bc <HAL_GPIO_Init+0x1e4>
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	4a3d      	ldr	r2, [pc, #244]	@ (80023a4 <HAL_GPIO_Init+0x2cc>)
 80022b0:	4293      	cmp	r3, r2
 80022b2:	d101      	bne.n	80022b8 <HAL_GPIO_Init+0x1e0>
 80022b4:	2303      	movs	r3, #3
 80022b6:	e006      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022b8:	2304      	movs	r3, #4
 80022ba:	e004      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022bc:	2302      	movs	r3, #2
 80022be:	e002      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022c0:	2301      	movs	r3, #1
 80022c2:	e000      	b.n	80022c6 <HAL_GPIO_Init+0x1ee>
 80022c4:	2300      	movs	r3, #0
 80022c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80022c8:	f002 0203 	and.w	r2, r2, #3
 80022cc:	0092      	lsls	r2, r2, #2
 80022ce:	4093      	lsls	r3, r2
 80022d0:	68fa      	ldr	r2, [r7, #12]
 80022d2:	4313      	orrs	r3, r2
 80022d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80022d6:	492f      	ldr	r1, [pc, #188]	@ (8002394 <HAL_GPIO_Init+0x2bc>)
 80022d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022da:	089b      	lsrs	r3, r3, #2
 80022dc:	3302      	adds	r3, #2
 80022de:	68fa      	ldr	r2, [r7, #12]
 80022e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	685b      	ldr	r3, [r3, #4]
 80022e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80022ec:	2b00      	cmp	r3, #0
 80022ee:	d006      	beq.n	80022fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80022f0:	4b2d      	ldr	r3, [pc, #180]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 80022f2:	689a      	ldr	r2, [r3, #8]
 80022f4:	492c      	ldr	r1, [pc, #176]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 80022f6:	69bb      	ldr	r3, [r7, #24]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	608b      	str	r3, [r1, #8]
 80022fc:	e006      	b.n	800230c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80022fe:	4b2a      	ldr	r3, [pc, #168]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002300:	689a      	ldr	r2, [r3, #8]
 8002302:	69bb      	ldr	r3, [r7, #24]
 8002304:	43db      	mvns	r3, r3
 8002306:	4928      	ldr	r1, [pc, #160]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002308:	4013      	ands	r3, r2
 800230a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800230c:	683b      	ldr	r3, [r7, #0]
 800230e:	685b      	ldr	r3, [r3, #4]
 8002310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002314:	2b00      	cmp	r3, #0
 8002316:	d006      	beq.n	8002326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002318:	4b23      	ldr	r3, [pc, #140]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 800231a:	68da      	ldr	r2, [r3, #12]
 800231c:	4922      	ldr	r1, [pc, #136]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 800231e:	69bb      	ldr	r3, [r7, #24]
 8002320:	4313      	orrs	r3, r2
 8002322:	60cb      	str	r3, [r1, #12]
 8002324:	e006      	b.n	8002334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002326:	4b20      	ldr	r3, [pc, #128]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002328:	68da      	ldr	r2, [r3, #12]
 800232a:	69bb      	ldr	r3, [r7, #24]
 800232c:	43db      	mvns	r3, r3
 800232e:	491e      	ldr	r1, [pc, #120]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002330:	4013      	ands	r3, r2
 8002332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002334:	683b      	ldr	r3, [r7, #0]
 8002336:	685b      	ldr	r3, [r3, #4]
 8002338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800233c:	2b00      	cmp	r3, #0
 800233e:	d006      	beq.n	800234e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002340:	4b19      	ldr	r3, [pc, #100]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002342:	685a      	ldr	r2, [r3, #4]
 8002344:	4918      	ldr	r1, [pc, #96]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002346:	69bb      	ldr	r3, [r7, #24]
 8002348:	4313      	orrs	r3, r2
 800234a:	604b      	str	r3, [r1, #4]
 800234c:	e006      	b.n	800235c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800234e:	4b16      	ldr	r3, [pc, #88]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002350:	685a      	ldr	r2, [r3, #4]
 8002352:	69bb      	ldr	r3, [r7, #24]
 8002354:	43db      	mvns	r3, r3
 8002356:	4914      	ldr	r1, [pc, #80]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 8002358:	4013      	ands	r3, r2
 800235a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800235c:	683b      	ldr	r3, [r7, #0]
 800235e:	685b      	ldr	r3, [r3, #4]
 8002360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002364:	2b00      	cmp	r3, #0
 8002366:	d021      	beq.n	80023ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002368:	4b0f      	ldr	r3, [pc, #60]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 800236a:	681a      	ldr	r2, [r3, #0]
 800236c:	490e      	ldr	r1, [pc, #56]	@ (80023a8 <HAL_GPIO_Init+0x2d0>)
 800236e:	69bb      	ldr	r3, [r7, #24]
 8002370:	4313      	orrs	r3, r2
 8002372:	600b      	str	r3, [r1, #0]
 8002374:	e021      	b.n	80023ba <HAL_GPIO_Init+0x2e2>
 8002376:	bf00      	nop
 8002378:	10320000 	.word	0x10320000
 800237c:	10310000 	.word	0x10310000
 8002380:	10220000 	.word	0x10220000
 8002384:	10210000 	.word	0x10210000
 8002388:	10120000 	.word	0x10120000
 800238c:	10110000 	.word	0x10110000
 8002390:	40021000 	.word	0x40021000
 8002394:	40010000 	.word	0x40010000
 8002398:	40010800 	.word	0x40010800
 800239c:	40010c00 	.word	0x40010c00
 80023a0:	40011000 	.word	0x40011000
 80023a4:	40011400 	.word	0x40011400
 80023a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80023ac:	4b0b      	ldr	r3, [pc, #44]	@ (80023dc <HAL_GPIO_Init+0x304>)
 80023ae:	681a      	ldr	r2, [r3, #0]
 80023b0:	69bb      	ldr	r3, [r7, #24]
 80023b2:	43db      	mvns	r3, r3
 80023b4:	4909      	ldr	r1, [pc, #36]	@ (80023dc <HAL_GPIO_Init+0x304>)
 80023b6:	4013      	ands	r3, r2
 80023b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80023ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023bc:	3301      	adds	r3, #1
 80023be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	681a      	ldr	r2, [r3, #0]
 80023c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80023c6:	fa22 f303 	lsr.w	r3, r2, r3
 80023ca:	2b00      	cmp	r3, #0
 80023cc:	f47f ae8e 	bne.w	80020ec <HAL_GPIO_Init+0x14>
  }
}
 80023d0:	bf00      	nop
 80023d2:	bf00      	nop
 80023d4:	372c      	adds	r7, #44	@ 0x2c
 80023d6:	46bd      	mov	sp, r7
 80023d8:	bc80      	pop	{r7}
 80023da:	4770      	bx	lr
 80023dc:	40010400 	.word	0x40010400

080023e0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 80023e0:	b480      	push	{r7}
 80023e2:	b085      	sub	sp, #20
 80023e4:	af00      	add	r7, sp, #0
 80023e6:	6078      	str	r0, [r7, #4]
 80023e8:	460b      	mov	r3, r1
 80023ea:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80023ec:	687b      	ldr	r3, [r7, #4]
 80023ee:	689a      	ldr	r2, [r3, #8]
 80023f0:	887b      	ldrh	r3, [r7, #2]
 80023f2:	4013      	ands	r3, r2
 80023f4:	2b00      	cmp	r3, #0
 80023f6:	d002      	beq.n	80023fe <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80023f8:	2301      	movs	r3, #1
 80023fa:	73fb      	strb	r3, [r7, #15]
 80023fc:	e001      	b.n	8002402 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80023fe:	2300      	movs	r3, #0
 8002400:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002402:	7bfb      	ldrb	r3, [r7, #15]
}
 8002404:	4618      	mov	r0, r3
 8002406:	3714      	adds	r7, #20
 8002408:	46bd      	mov	sp, r7
 800240a:	bc80      	pop	{r7}
 800240c:	4770      	bx	lr

0800240e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800240e:	b480      	push	{r7}
 8002410:	b083      	sub	sp, #12
 8002412:	af00      	add	r7, sp, #0
 8002414:	6078      	str	r0, [r7, #4]
 8002416:	460b      	mov	r3, r1
 8002418:	807b      	strh	r3, [r7, #2]
 800241a:	4613      	mov	r3, r2
 800241c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800241e:	787b      	ldrb	r3, [r7, #1]
 8002420:	2b00      	cmp	r3, #0
 8002422:	d003      	beq.n	800242c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002424:	887a      	ldrh	r2, [r7, #2]
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 800242a:	e003      	b.n	8002434 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 800242c:	887b      	ldrh	r3, [r7, #2]
 800242e:	041a      	lsls	r2, r3, #16
 8002430:	687b      	ldr	r3, [r7, #4]
 8002432:	611a      	str	r2, [r3, #16]
}
 8002434:	bf00      	nop
 8002436:	370c      	adds	r7, #12
 8002438:	46bd      	mov	sp, r7
 800243a:	bc80      	pop	{r7}
 800243c:	4770      	bx	lr
	...

08002440 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002440:	b580      	push	{r7, lr}
 8002442:	b086      	sub	sp, #24
 8002444:	af00      	add	r7, sp, #0
 8002446:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002448:	687b      	ldr	r3, [r7, #4]
 800244a:	2b00      	cmp	r3, #0
 800244c:	d101      	bne.n	8002452 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800244e:	2301      	movs	r3, #1
 8002450:	e272      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	681b      	ldr	r3, [r3, #0]
 8002456:	f003 0301 	and.w	r3, r3, #1
 800245a:	2b00      	cmp	r3, #0
 800245c:	f000 8087 	beq.w	800256e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002460:	4b92      	ldr	r3, [pc, #584]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002462:	685b      	ldr	r3, [r3, #4]
 8002464:	f003 030c 	and.w	r3, r3, #12
 8002468:	2b04      	cmp	r3, #4
 800246a:	d00c      	beq.n	8002486 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800246c:	4b8f      	ldr	r3, [pc, #572]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800246e:	685b      	ldr	r3, [r3, #4]
 8002470:	f003 030c 	and.w	r3, r3, #12
 8002474:	2b08      	cmp	r3, #8
 8002476:	d112      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
 8002478:	4b8c      	ldr	r3, [pc, #560]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800247a:	685b      	ldr	r3, [r3, #4]
 800247c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002480:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002484:	d10b      	bne.n	800249e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002486:	4b89      	ldr	r3, [pc, #548]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800248e:	2b00      	cmp	r3, #0
 8002490:	d06c      	beq.n	800256c <HAL_RCC_OscConfig+0x12c>
 8002492:	687b      	ldr	r3, [r7, #4]
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	2b00      	cmp	r3, #0
 8002498:	d168      	bne.n	800256c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800249a:	2301      	movs	r3, #1
 800249c:	e24c      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800249e:	687b      	ldr	r3, [r7, #4]
 80024a0:	685b      	ldr	r3, [r3, #4]
 80024a2:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80024a6:	d106      	bne.n	80024b6 <HAL_RCC_OscConfig+0x76>
 80024a8:	4b80      	ldr	r3, [pc, #512]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024aa:	681b      	ldr	r3, [r3, #0]
 80024ac:	4a7f      	ldr	r2, [pc, #508]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024ae:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024b2:	6013      	str	r3, [r2, #0]
 80024b4:	e02e      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024b6:	687b      	ldr	r3, [r7, #4]
 80024b8:	685b      	ldr	r3, [r3, #4]
 80024ba:	2b00      	cmp	r3, #0
 80024bc:	d10c      	bne.n	80024d8 <HAL_RCC_OscConfig+0x98>
 80024be:	4b7b      	ldr	r3, [pc, #492]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	4a7a      	ldr	r2, [pc, #488]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024c4:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80024c8:	6013      	str	r3, [r2, #0]
 80024ca:	4b78      	ldr	r3, [pc, #480]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	4a77      	ldr	r2, [pc, #476]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024d0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80024d4:	6013      	str	r3, [r2, #0]
 80024d6:	e01d      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024d8:	687b      	ldr	r3, [r7, #4]
 80024da:	685b      	ldr	r3, [r3, #4]
 80024dc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80024e0:	d10c      	bne.n	80024fc <HAL_RCC_OscConfig+0xbc>
 80024e2:	4b72      	ldr	r3, [pc, #456]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	4a71      	ldr	r2, [pc, #452]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024e8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80024ec:	6013      	str	r3, [r2, #0]
 80024ee:	4b6f      	ldr	r3, [pc, #444]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f0:	681b      	ldr	r3, [r3, #0]
 80024f2:	4a6e      	ldr	r2, [pc, #440]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024f4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80024f8:	6013      	str	r3, [r2, #0]
 80024fa:	e00b      	b.n	8002514 <HAL_RCC_OscConfig+0xd4>
 80024fc:	4b6b      	ldr	r3, [pc, #428]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80024fe:	681b      	ldr	r3, [r3, #0]
 8002500:	4a6a      	ldr	r2, [pc, #424]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002502:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002506:	6013      	str	r3, [r2, #0]
 8002508:	4b68      	ldr	r3, [pc, #416]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250a:	681b      	ldr	r3, [r3, #0]
 800250c:	4a67      	ldr	r2, [pc, #412]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800250e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002512:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	685b      	ldr	r3, [r3, #4]
 8002518:	2b00      	cmp	r3, #0
 800251a:	d013      	beq.n	8002544 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800251c:	f7ff fcc4 	bl	8001ea8 <HAL_GetTick>
 8002520:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002522:	e008      	b.n	8002536 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002524:	f7ff fcc0 	bl	8001ea8 <HAL_GetTick>
 8002528:	4602      	mov	r2, r0
 800252a:	693b      	ldr	r3, [r7, #16]
 800252c:	1ad3      	subs	r3, r2, r3
 800252e:	2b64      	cmp	r3, #100	@ 0x64
 8002530:	d901      	bls.n	8002536 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002532:	2303      	movs	r3, #3
 8002534:	e200      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002536:	4b5d      	ldr	r3, [pc, #372]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d0f0      	beq.n	8002524 <HAL_RCC_OscConfig+0xe4>
 8002542:	e014      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002544:	f7ff fcb0 	bl	8001ea8 <HAL_GetTick>
 8002548:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800254a:	e008      	b.n	800255e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800254c:	f7ff fcac 	bl	8001ea8 <HAL_GetTick>
 8002550:	4602      	mov	r2, r0
 8002552:	693b      	ldr	r3, [r7, #16]
 8002554:	1ad3      	subs	r3, r2, r3
 8002556:	2b64      	cmp	r3, #100	@ 0x64
 8002558:	d901      	bls.n	800255e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800255a:	2303      	movs	r3, #3
 800255c:	e1ec      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800255e:	4b53      	ldr	r3, [pc, #332]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002566:	2b00      	cmp	r3, #0
 8002568:	d1f0      	bne.n	800254c <HAL_RCC_OscConfig+0x10c>
 800256a:	e000      	b.n	800256e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800256c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800256e:	687b      	ldr	r3, [r7, #4]
 8002570:	681b      	ldr	r3, [r3, #0]
 8002572:	f003 0302 	and.w	r3, r3, #2
 8002576:	2b00      	cmp	r3, #0
 8002578:	d063      	beq.n	8002642 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800257a:	4b4c      	ldr	r3, [pc, #304]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 800257c:	685b      	ldr	r3, [r3, #4]
 800257e:	f003 030c 	and.w	r3, r3, #12
 8002582:	2b00      	cmp	r3, #0
 8002584:	d00b      	beq.n	800259e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002586:	4b49      	ldr	r3, [pc, #292]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002588:	685b      	ldr	r3, [r3, #4]
 800258a:	f003 030c 	and.w	r3, r3, #12
 800258e:	2b08      	cmp	r3, #8
 8002590:	d11c      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
 8002592:	4b46      	ldr	r3, [pc, #280]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002594:	685b      	ldr	r3, [r3, #4]
 8002596:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800259a:	2b00      	cmp	r3, #0
 800259c:	d116      	bne.n	80025cc <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800259e:	4b43      	ldr	r3, [pc, #268]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025a0:	681b      	ldr	r3, [r3, #0]
 80025a2:	f003 0302 	and.w	r3, r3, #2
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d005      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
 80025aa:	687b      	ldr	r3, [r7, #4]
 80025ac:	691b      	ldr	r3, [r3, #16]
 80025ae:	2b01      	cmp	r3, #1
 80025b0:	d001      	beq.n	80025b6 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 80025b2:	2301      	movs	r3, #1
 80025b4:	e1c0      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80025b6:	4b3d      	ldr	r3, [pc, #244]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025b8:	681b      	ldr	r3, [r3, #0]
 80025ba:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	695b      	ldr	r3, [r3, #20]
 80025c2:	00db      	lsls	r3, r3, #3
 80025c4:	4939      	ldr	r1, [pc, #228]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025c6:	4313      	orrs	r3, r2
 80025c8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80025ca:	e03a      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 80025cc:	687b      	ldr	r3, [r7, #4]
 80025ce:	691b      	ldr	r3, [r3, #16]
 80025d0:	2b00      	cmp	r3, #0
 80025d2:	d020      	beq.n	8002616 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80025d4:	4b36      	ldr	r3, [pc, #216]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 80025d6:	2201      	movs	r2, #1
 80025d8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80025da:	f7ff fc65 	bl	8001ea8 <HAL_GetTick>
 80025de:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025e0:	e008      	b.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80025e2:	f7ff fc61 	bl	8001ea8 <HAL_GetTick>
 80025e6:	4602      	mov	r2, r0
 80025e8:	693b      	ldr	r3, [r7, #16]
 80025ea:	1ad3      	subs	r3, r2, r3
 80025ec:	2b02      	cmp	r3, #2
 80025ee:	d901      	bls.n	80025f4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80025f0:	2303      	movs	r3, #3
 80025f2:	e1a1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80025f4:	4b2d      	ldr	r3, [pc, #180]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 80025f6:	681b      	ldr	r3, [r3, #0]
 80025f8:	f003 0302 	and.w	r3, r3, #2
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d0f0      	beq.n	80025e2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002600:	4b2a      	ldr	r3, [pc, #168]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002602:	681b      	ldr	r3, [r3, #0]
 8002604:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	695b      	ldr	r3, [r3, #20]
 800260c:	00db      	lsls	r3, r3, #3
 800260e:	4927      	ldr	r1, [pc, #156]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002610:	4313      	orrs	r3, r2
 8002612:	600b      	str	r3, [r1, #0]
 8002614:	e015      	b.n	8002642 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002616:	4b26      	ldr	r3, [pc, #152]	@ (80026b0 <HAL_RCC_OscConfig+0x270>)
 8002618:	2200      	movs	r2, #0
 800261a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800261c:	f7ff fc44 	bl	8001ea8 <HAL_GetTick>
 8002620:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002622:	e008      	b.n	8002636 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002624:	f7ff fc40 	bl	8001ea8 <HAL_GetTick>
 8002628:	4602      	mov	r2, r0
 800262a:	693b      	ldr	r3, [r7, #16]
 800262c:	1ad3      	subs	r3, r2, r3
 800262e:	2b02      	cmp	r3, #2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e180      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002636:	4b1d      	ldr	r3, [pc, #116]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d1f0      	bne.n	8002624 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	681b      	ldr	r3, [r3, #0]
 8002646:	f003 0308 	and.w	r3, r3, #8
 800264a:	2b00      	cmp	r3, #0
 800264c:	d03a      	beq.n	80026c4 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800264e:	687b      	ldr	r3, [r7, #4]
 8002650:	699b      	ldr	r3, [r3, #24]
 8002652:	2b00      	cmp	r3, #0
 8002654:	d019      	beq.n	800268a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8002656:	4b17      	ldr	r3, [pc, #92]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 8002658:	2201      	movs	r2, #1
 800265a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800265c:	f7ff fc24 	bl	8001ea8 <HAL_GetTick>
 8002660:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002662:	e008      	b.n	8002676 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002664:	f7ff fc20 	bl	8001ea8 <HAL_GetTick>
 8002668:	4602      	mov	r2, r0
 800266a:	693b      	ldr	r3, [r7, #16]
 800266c:	1ad3      	subs	r3, r2, r3
 800266e:	2b02      	cmp	r3, #2
 8002670:	d901      	bls.n	8002676 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8002672:	2303      	movs	r3, #3
 8002674:	e160      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8002676:	4b0d      	ldr	r3, [pc, #52]	@ (80026ac <HAL_RCC_OscConfig+0x26c>)
 8002678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800267a:	f003 0302 	and.w	r3, r3, #2
 800267e:	2b00      	cmp	r3, #0
 8002680:	d0f0      	beq.n	8002664 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8002682:	2001      	movs	r0, #1
 8002684:	f000 fa9c 	bl	8002bc0 <RCC_Delay>
 8002688:	e01c      	b.n	80026c4 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800268a:	4b0a      	ldr	r3, [pc, #40]	@ (80026b4 <HAL_RCC_OscConfig+0x274>)
 800268c:	2200      	movs	r2, #0
 800268e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002690:	f7ff fc0a 	bl	8001ea8 <HAL_GetTick>
 8002694:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002696:	e00f      	b.n	80026b8 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002698:	f7ff fc06 	bl	8001ea8 <HAL_GetTick>
 800269c:	4602      	mov	r2, r0
 800269e:	693b      	ldr	r3, [r7, #16]
 80026a0:	1ad3      	subs	r3, r2, r3
 80026a2:	2b02      	cmp	r3, #2
 80026a4:	d908      	bls.n	80026b8 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 80026a6:	2303      	movs	r3, #3
 80026a8:	e146      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 80026aa:	bf00      	nop
 80026ac:	40021000 	.word	0x40021000
 80026b0:	42420000 	.word	0x42420000
 80026b4:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80026b8:	4b92      	ldr	r3, [pc, #584]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026ba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026bc:	f003 0302 	and.w	r3, r3, #2
 80026c0:	2b00      	cmp	r3, #0
 80026c2:	d1e9      	bne.n	8002698 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	f003 0304 	and.w	r3, r3, #4
 80026cc:	2b00      	cmp	r3, #0
 80026ce:	f000 80a6 	beq.w	800281e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80026d2:	2300      	movs	r3, #0
 80026d4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80026d6:	4b8b      	ldr	r3, [pc, #556]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026d8:	69db      	ldr	r3, [r3, #28]
 80026da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026de:	2b00      	cmp	r3, #0
 80026e0:	d10d      	bne.n	80026fe <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80026e2:	4b88      	ldr	r3, [pc, #544]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e4:	69db      	ldr	r3, [r3, #28]
 80026e6:	4a87      	ldr	r2, [pc, #540]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026e8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80026ec:	61d3      	str	r3, [r2, #28]
 80026ee:	4b85      	ldr	r3, [pc, #532]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80026f0:	69db      	ldr	r3, [r3, #28]
 80026f2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80026f6:	60bb      	str	r3, [r7, #8]
 80026f8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80026fa:	2301      	movs	r3, #1
 80026fc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80026fe:	4b82      	ldr	r3, [pc, #520]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002700:	681b      	ldr	r3, [r3, #0]
 8002702:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002706:	2b00      	cmp	r3, #0
 8002708:	d118      	bne.n	800273c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800270a:	4b7f      	ldr	r3, [pc, #508]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 800270c:	681b      	ldr	r3, [r3, #0]
 800270e:	4a7e      	ldr	r2, [pc, #504]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002710:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002714:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002716:	f7ff fbc7 	bl	8001ea8 <HAL_GetTick>
 800271a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800271c:	e008      	b.n	8002730 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800271e:	f7ff fbc3 	bl	8001ea8 <HAL_GetTick>
 8002722:	4602      	mov	r2, r0
 8002724:	693b      	ldr	r3, [r7, #16]
 8002726:	1ad3      	subs	r3, r2, r3
 8002728:	2b64      	cmp	r3, #100	@ 0x64
 800272a:	d901      	bls.n	8002730 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800272c:	2303      	movs	r3, #3
 800272e:	e103      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002730:	4b75      	ldr	r3, [pc, #468]	@ (8002908 <HAL_RCC_OscConfig+0x4c8>)
 8002732:	681b      	ldr	r3, [r3, #0]
 8002734:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002738:	2b00      	cmp	r3, #0
 800273a:	d0f0      	beq.n	800271e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	68db      	ldr	r3, [r3, #12]
 8002740:	2b01      	cmp	r3, #1
 8002742:	d106      	bne.n	8002752 <HAL_RCC_OscConfig+0x312>
 8002744:	4b6f      	ldr	r3, [pc, #444]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002746:	6a1b      	ldr	r3, [r3, #32]
 8002748:	4a6e      	ldr	r2, [pc, #440]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800274a:	f043 0301 	orr.w	r3, r3, #1
 800274e:	6213      	str	r3, [r2, #32]
 8002750:	e02d      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	68db      	ldr	r3, [r3, #12]
 8002756:	2b00      	cmp	r3, #0
 8002758:	d10c      	bne.n	8002774 <HAL_RCC_OscConfig+0x334>
 800275a:	4b6a      	ldr	r3, [pc, #424]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800275c:	6a1b      	ldr	r3, [r3, #32]
 800275e:	4a69      	ldr	r2, [pc, #420]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002760:	f023 0301 	bic.w	r3, r3, #1
 8002764:	6213      	str	r3, [r2, #32]
 8002766:	4b67      	ldr	r3, [pc, #412]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002768:	6a1b      	ldr	r3, [r3, #32]
 800276a:	4a66      	ldr	r2, [pc, #408]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800276c:	f023 0304 	bic.w	r3, r3, #4
 8002770:	6213      	str	r3, [r2, #32]
 8002772:	e01c      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	68db      	ldr	r3, [r3, #12]
 8002778:	2b05      	cmp	r3, #5
 800277a:	d10c      	bne.n	8002796 <HAL_RCC_OscConfig+0x356>
 800277c:	4b61      	ldr	r3, [pc, #388]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800277e:	6a1b      	ldr	r3, [r3, #32]
 8002780:	4a60      	ldr	r2, [pc, #384]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002782:	f043 0304 	orr.w	r3, r3, #4
 8002786:	6213      	str	r3, [r2, #32]
 8002788:	4b5e      	ldr	r3, [pc, #376]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278a:	6a1b      	ldr	r3, [r3, #32]
 800278c:	4a5d      	ldr	r2, [pc, #372]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800278e:	f043 0301 	orr.w	r3, r3, #1
 8002792:	6213      	str	r3, [r2, #32]
 8002794:	e00b      	b.n	80027ae <HAL_RCC_OscConfig+0x36e>
 8002796:	4b5b      	ldr	r3, [pc, #364]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002798:	6a1b      	ldr	r3, [r3, #32]
 800279a:	4a5a      	ldr	r2, [pc, #360]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800279c:	f023 0301 	bic.w	r3, r3, #1
 80027a0:	6213      	str	r3, [r2, #32]
 80027a2:	4b58      	ldr	r3, [pc, #352]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a4:	6a1b      	ldr	r3, [r3, #32]
 80027a6:	4a57      	ldr	r2, [pc, #348]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027a8:	f023 0304 	bic.w	r3, r3, #4
 80027ac:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 80027ae:	687b      	ldr	r3, [r7, #4]
 80027b0:	68db      	ldr	r3, [r3, #12]
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d015      	beq.n	80027e2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027b6:	f7ff fb77 	bl	8001ea8 <HAL_GetTick>
 80027ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027bc:	e00a      	b.n	80027d4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027be:	f7ff fb73 	bl	8001ea8 <HAL_GetTick>
 80027c2:	4602      	mov	r2, r0
 80027c4:	693b      	ldr	r3, [r7, #16]
 80027c6:	1ad3      	subs	r3, r2, r3
 80027c8:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027cc:	4293      	cmp	r3, r2
 80027ce:	d901      	bls.n	80027d4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80027d0:	2303      	movs	r3, #3
 80027d2:	e0b1      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80027d4:	4b4b      	ldr	r3, [pc, #300]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80027d6:	6a1b      	ldr	r3, [r3, #32]
 80027d8:	f003 0302 	and.w	r3, r3, #2
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d0ee      	beq.n	80027be <HAL_RCC_OscConfig+0x37e>
 80027e0:	e014      	b.n	800280c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80027e2:	f7ff fb61 	bl	8001ea8 <HAL_GetTick>
 80027e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80027e8:	e00a      	b.n	8002800 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80027ea:	f7ff fb5d 	bl	8001ea8 <HAL_GetTick>
 80027ee:	4602      	mov	r2, r0
 80027f0:	693b      	ldr	r3, [r7, #16]
 80027f2:	1ad3      	subs	r3, r2, r3
 80027f4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80027f8:	4293      	cmp	r3, r2
 80027fa:	d901      	bls.n	8002800 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80027fc:	2303      	movs	r3, #3
 80027fe:	e09b      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002800:	4b40      	ldr	r3, [pc, #256]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002802:	6a1b      	ldr	r3, [r3, #32]
 8002804:	f003 0302 	and.w	r3, r3, #2
 8002808:	2b00      	cmp	r3, #0
 800280a:	d1ee      	bne.n	80027ea <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800280c:	7dfb      	ldrb	r3, [r7, #23]
 800280e:	2b01      	cmp	r3, #1
 8002810:	d105      	bne.n	800281e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002812:	4b3c      	ldr	r3, [pc, #240]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002814:	69db      	ldr	r3, [r3, #28]
 8002816:	4a3b      	ldr	r2, [pc, #236]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002818:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800281c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	69db      	ldr	r3, [r3, #28]
 8002822:	2b00      	cmp	r3, #0
 8002824:	f000 8087 	beq.w	8002936 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002828:	4b36      	ldr	r3, [pc, #216]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800282a:	685b      	ldr	r3, [r3, #4]
 800282c:	f003 030c 	and.w	r3, r3, #12
 8002830:	2b08      	cmp	r3, #8
 8002832:	d061      	beq.n	80028f8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	69db      	ldr	r3, [r3, #28]
 8002838:	2b02      	cmp	r3, #2
 800283a:	d146      	bne.n	80028ca <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800283c:	4b33      	ldr	r3, [pc, #204]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800283e:	2200      	movs	r2, #0
 8002840:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002842:	f7ff fb31 	bl	8001ea8 <HAL_GetTick>
 8002846:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002848:	e008      	b.n	800285c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800284a:	f7ff fb2d 	bl	8001ea8 <HAL_GetTick>
 800284e:	4602      	mov	r2, r0
 8002850:	693b      	ldr	r3, [r7, #16]
 8002852:	1ad3      	subs	r3, r2, r3
 8002854:	2b02      	cmp	r3, #2
 8002856:	d901      	bls.n	800285c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8002858:	2303      	movs	r3, #3
 800285a:	e06d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800285c:	4b29      	ldr	r3, [pc, #164]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 800285e:	681b      	ldr	r3, [r3, #0]
 8002860:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002864:	2b00      	cmp	r3, #0
 8002866:	d1f0      	bne.n	800284a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8002868:	687b      	ldr	r3, [r7, #4]
 800286a:	6a1b      	ldr	r3, [r3, #32]
 800286c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002870:	d108      	bne.n	8002884 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8002872:	4b24      	ldr	r3, [pc, #144]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800287a:	687b      	ldr	r3, [r7, #4]
 800287c:	689b      	ldr	r3, [r3, #8]
 800287e:	4921      	ldr	r1, [pc, #132]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002880:	4313      	orrs	r3, r2
 8002882:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8002884:	4b1f      	ldr	r3, [pc, #124]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002886:	685b      	ldr	r3, [r3, #4]
 8002888:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800288c:	687b      	ldr	r3, [r7, #4]
 800288e:	6a19      	ldr	r1, [r3, #32]
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002894:	430b      	orrs	r3, r1
 8002896:	491b      	ldr	r1, [pc, #108]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 8002898:	4313      	orrs	r3, r2
 800289a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800289c:	4b1b      	ldr	r3, [pc, #108]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 800289e:	2201      	movs	r2, #1
 80028a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028a2:	f7ff fb01 	bl	8001ea8 <HAL_GetTick>
 80028a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028a8:	e008      	b.n	80028bc <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028aa:	f7ff fafd 	bl	8001ea8 <HAL_GetTick>
 80028ae:	4602      	mov	r2, r0
 80028b0:	693b      	ldr	r3, [r7, #16]
 80028b2:	1ad3      	subs	r3, r2, r3
 80028b4:	2b02      	cmp	r3, #2
 80028b6:	d901      	bls.n	80028bc <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 80028b8:	2303      	movs	r3, #3
 80028ba:	e03d      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 80028bc:	4b11      	ldr	r3, [pc, #68]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028be:	681b      	ldr	r3, [r3, #0]
 80028c0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028c4:	2b00      	cmp	r3, #0
 80028c6:	d0f0      	beq.n	80028aa <HAL_RCC_OscConfig+0x46a>
 80028c8:	e035      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80028ca:	4b10      	ldr	r3, [pc, #64]	@ (800290c <HAL_RCC_OscConfig+0x4cc>)
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80028d0:	f7ff faea 	bl	8001ea8 <HAL_GetTick>
 80028d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028d6:	e008      	b.n	80028ea <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80028d8:	f7ff fae6 	bl	8001ea8 <HAL_GetTick>
 80028dc:	4602      	mov	r2, r0
 80028de:	693b      	ldr	r3, [r7, #16]
 80028e0:	1ad3      	subs	r3, r2, r3
 80028e2:	2b02      	cmp	r3, #2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e026      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80028ea:	4b06      	ldr	r3, [pc, #24]	@ (8002904 <HAL_RCC_OscConfig+0x4c4>)
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d1f0      	bne.n	80028d8 <HAL_RCC_OscConfig+0x498>
 80028f6:	e01e      	b.n	8002936 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80028f8:	687b      	ldr	r3, [r7, #4]
 80028fa:	69db      	ldr	r3, [r3, #28]
 80028fc:	2b01      	cmp	r3, #1
 80028fe:	d107      	bne.n	8002910 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002900:	2301      	movs	r3, #1
 8002902:	e019      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
 8002904:	40021000 	.word	0x40021000
 8002908:	40007000 	.word	0x40007000
 800290c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002910:	4b0b      	ldr	r3, [pc, #44]	@ (8002940 <HAL_RCC_OscConfig+0x500>)
 8002912:	685b      	ldr	r3, [r3, #4]
 8002914:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	6a1b      	ldr	r3, [r3, #32]
 8002920:	429a      	cmp	r2, r3
 8002922:	d106      	bne.n	8002932 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002924:	68fb      	ldr	r3, [r7, #12]
 8002926:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800292a:	687b      	ldr	r3, [r7, #4]
 800292c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800292e:	429a      	cmp	r2, r3
 8002930:	d001      	beq.n	8002936 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8002932:	2301      	movs	r3, #1
 8002934:	e000      	b.n	8002938 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8002936:	2300      	movs	r3, #0
}
 8002938:	4618      	mov	r0, r3
 800293a:	3718      	adds	r7, #24
 800293c:	46bd      	mov	sp, r7
 800293e:	bd80      	pop	{r7, pc}
 8002940:	40021000 	.word	0x40021000

08002944 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8002944:	b580      	push	{r7, lr}
 8002946:	b084      	sub	sp, #16
 8002948:	af00      	add	r7, sp, #0
 800294a:	6078      	str	r0, [r7, #4]
 800294c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800294e:	687b      	ldr	r3, [r7, #4]
 8002950:	2b00      	cmp	r3, #0
 8002952:	d101      	bne.n	8002958 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8002954:	2301      	movs	r3, #1
 8002956:	e0d0      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8002958:	4b6a      	ldr	r3, [pc, #424]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 800295a:	681b      	ldr	r3, [r3, #0]
 800295c:	f003 0307 	and.w	r3, r3, #7
 8002960:	683a      	ldr	r2, [r7, #0]
 8002962:	429a      	cmp	r2, r3
 8002964:	d910      	bls.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002966:	4b67      	ldr	r3, [pc, #412]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002968:	681b      	ldr	r3, [r3, #0]
 800296a:	f023 0207 	bic.w	r2, r3, #7
 800296e:	4965      	ldr	r1, [pc, #404]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002970:	683b      	ldr	r3, [r7, #0]
 8002972:	4313      	orrs	r3, r2
 8002974:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002976:	4b63      	ldr	r3, [pc, #396]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	f003 0307 	and.w	r3, r3, #7
 800297e:	683a      	ldr	r2, [r7, #0]
 8002980:	429a      	cmp	r2, r3
 8002982:	d001      	beq.n	8002988 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8002984:	2301      	movs	r3, #1
 8002986:	e0b8      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	f003 0302 	and.w	r3, r3, #2
 8002990:	2b00      	cmp	r3, #0
 8002992:	d020      	beq.n	80029d6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002994:	687b      	ldr	r3, [r7, #4]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f003 0304 	and.w	r3, r3, #4
 800299c:	2b00      	cmp	r3, #0
 800299e:	d005      	beq.n	80029ac <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80029a0:	4b59      	ldr	r3, [pc, #356]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a2:	685b      	ldr	r3, [r3, #4]
 80029a4:	4a58      	ldr	r2, [pc, #352]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029a6:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 80029aa:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	681b      	ldr	r3, [r3, #0]
 80029b0:	f003 0308 	and.w	r3, r3, #8
 80029b4:	2b00      	cmp	r3, #0
 80029b6:	d005      	beq.n	80029c4 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80029b8:	4b53      	ldr	r3, [pc, #332]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ba:	685b      	ldr	r3, [r3, #4]
 80029bc:	4a52      	ldr	r2, [pc, #328]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029be:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 80029c2:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80029c4:	4b50      	ldr	r3, [pc, #320]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029c6:	685b      	ldr	r3, [r3, #4]
 80029c8:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80029cc:	687b      	ldr	r3, [r7, #4]
 80029ce:	689b      	ldr	r3, [r3, #8]
 80029d0:	494d      	ldr	r1, [pc, #308]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029d2:	4313      	orrs	r3, r2
 80029d4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	681b      	ldr	r3, [r3, #0]
 80029da:	f003 0301 	and.w	r3, r3, #1
 80029de:	2b00      	cmp	r3, #0
 80029e0:	d040      	beq.n	8002a64 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	685b      	ldr	r3, [r3, #4]
 80029e6:	2b01      	cmp	r3, #1
 80029e8:	d107      	bne.n	80029fa <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80029ea:	4b47      	ldr	r3, [pc, #284]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 80029ec:	681b      	ldr	r3, [r3, #0]
 80029ee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80029f2:	2b00      	cmp	r3, #0
 80029f4:	d115      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80029f6:	2301      	movs	r3, #1
 80029f8:	e07f      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80029fa:	687b      	ldr	r3, [r7, #4]
 80029fc:	685b      	ldr	r3, [r3, #4]
 80029fe:	2b02      	cmp	r3, #2
 8002a00:	d107      	bne.n	8002a12 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002a02:	4b41      	ldr	r3, [pc, #260]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a04:	681b      	ldr	r3, [r3, #0]
 8002a06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002a0a:	2b00      	cmp	r3, #0
 8002a0c:	d109      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
 8002a10:	e073      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002a12:	4b3d      	ldr	r3, [pc, #244]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	f003 0302 	and.w	r3, r3, #2
 8002a1a:	2b00      	cmp	r3, #0
 8002a1c:	d101      	bne.n	8002a22 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002a1e:	2301      	movs	r3, #1
 8002a20:	e06b      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002a22:	4b39      	ldr	r3, [pc, #228]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a24:	685b      	ldr	r3, [r3, #4]
 8002a26:	f023 0203 	bic.w	r2, r3, #3
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	685b      	ldr	r3, [r3, #4]
 8002a2e:	4936      	ldr	r1, [pc, #216]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a30:	4313      	orrs	r3, r2
 8002a32:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8002a34:	f7ff fa38 	bl	8001ea8 <HAL_GetTick>
 8002a38:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a3a:	e00a      	b.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8002a3c:	f7ff fa34 	bl	8001ea8 <HAL_GetTick>
 8002a40:	4602      	mov	r2, r0
 8002a42:	68fb      	ldr	r3, [r7, #12]
 8002a44:	1ad3      	subs	r3, r2, r3
 8002a46:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002a4a:	4293      	cmp	r3, r2
 8002a4c:	d901      	bls.n	8002a52 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8002a4e:	2303      	movs	r3, #3
 8002a50:	e053      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8002a52:	4b2d      	ldr	r3, [pc, #180]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002a54:	685b      	ldr	r3, [r3, #4]
 8002a56:	f003 020c 	and.w	r2, r3, #12
 8002a5a:	687b      	ldr	r3, [r7, #4]
 8002a5c:	685b      	ldr	r3, [r3, #4]
 8002a5e:	009b      	lsls	r3, r3, #2
 8002a60:	429a      	cmp	r2, r3
 8002a62:	d1eb      	bne.n	8002a3c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8002a64:	4b27      	ldr	r3, [pc, #156]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a66:	681b      	ldr	r3, [r3, #0]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	683a      	ldr	r2, [r7, #0]
 8002a6e:	429a      	cmp	r2, r3
 8002a70:	d210      	bcs.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8002a72:	4b24      	ldr	r3, [pc, #144]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	f023 0207 	bic.w	r2, r3, #7
 8002a7a:	4922      	ldr	r1, [pc, #136]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a7c:	683b      	ldr	r3, [r7, #0]
 8002a7e:	4313      	orrs	r3, r2
 8002a80:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8002a82:	4b20      	ldr	r3, [pc, #128]	@ (8002b04 <HAL_RCC_ClockConfig+0x1c0>)
 8002a84:	681b      	ldr	r3, [r3, #0]
 8002a86:	f003 0307 	and.w	r3, r3, #7
 8002a8a:	683a      	ldr	r2, [r7, #0]
 8002a8c:	429a      	cmp	r2, r3
 8002a8e:	d001      	beq.n	8002a94 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002a90:	2301      	movs	r3, #1
 8002a92:	e032      	b.n	8002afa <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002a94:	687b      	ldr	r3, [r7, #4]
 8002a96:	681b      	ldr	r3, [r3, #0]
 8002a98:	f003 0304 	and.w	r3, r3, #4
 8002a9c:	2b00      	cmp	r3, #0
 8002a9e:	d008      	beq.n	8002ab2 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002aa0:	4b19      	ldr	r3, [pc, #100]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aa2:	685b      	ldr	r3, [r3, #4]
 8002aa4:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	68db      	ldr	r3, [r3, #12]
 8002aac:	4916      	ldr	r1, [pc, #88]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002aae:	4313      	orrs	r3, r2
 8002ab0:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002ab2:	687b      	ldr	r3, [r7, #4]
 8002ab4:	681b      	ldr	r3, [r3, #0]
 8002ab6:	f003 0308 	and.w	r3, r3, #8
 8002aba:	2b00      	cmp	r3, #0
 8002abc:	d009      	beq.n	8002ad2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8002abe:	4b12      	ldr	r3, [pc, #72]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ac0:	685b      	ldr	r3, [r3, #4]
 8002ac2:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	691b      	ldr	r3, [r3, #16]
 8002aca:	00db      	lsls	r3, r3, #3
 8002acc:	490e      	ldr	r1, [pc, #56]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ace:	4313      	orrs	r3, r2
 8002ad0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002ad2:	f000 f821 	bl	8002b18 <HAL_RCC_GetSysClockFreq>
 8002ad6:	4602      	mov	r2, r0
 8002ad8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b08 <HAL_RCC_ClockConfig+0x1c4>)
 8002ada:	685b      	ldr	r3, [r3, #4]
 8002adc:	091b      	lsrs	r3, r3, #4
 8002ade:	f003 030f 	and.w	r3, r3, #15
 8002ae2:	490a      	ldr	r1, [pc, #40]	@ (8002b0c <HAL_RCC_ClockConfig+0x1c8>)
 8002ae4:	5ccb      	ldrb	r3, [r1, r3]
 8002ae6:	fa22 f303 	lsr.w	r3, r2, r3
 8002aea:	4a09      	ldr	r2, [pc, #36]	@ (8002b10 <HAL_RCC_ClockConfig+0x1cc>)
 8002aec:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8002aee:	4b09      	ldr	r3, [pc, #36]	@ (8002b14 <HAL_RCC_ClockConfig+0x1d0>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7ff f996 	bl	8001e24 <HAL_InitTick>

  return HAL_OK;
 8002af8:	2300      	movs	r3, #0
}
 8002afa:	4618      	mov	r0, r3
 8002afc:	3710      	adds	r7, #16
 8002afe:	46bd      	mov	sp, r7
 8002b00:	bd80      	pop	{r7, pc}
 8002b02:	bf00      	nop
 8002b04:	40022000 	.word	0x40022000
 8002b08:	40021000 	.word	0x40021000
 8002b0c:	08005080 	.word	0x08005080
 8002b10:	20000040 	.word	0x20000040
 8002b14:	20000044 	.word	0x20000044

08002b18 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002b18:	b480      	push	{r7}
 8002b1a:	b087      	sub	sp, #28
 8002b1c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8002b1e:	2300      	movs	r3, #0
 8002b20:	60fb      	str	r3, [r7, #12]
 8002b22:	2300      	movs	r3, #0
 8002b24:	60bb      	str	r3, [r7, #8]
 8002b26:	2300      	movs	r3, #0
 8002b28:	617b      	str	r3, [r7, #20]
 8002b2a:	2300      	movs	r3, #0
 8002b2c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8002b2e:	2300      	movs	r3, #0
 8002b30:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8002b32:	4b1e      	ldr	r3, [pc, #120]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b34:	685b      	ldr	r3, [r3, #4]
 8002b36:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8002b38:	68fb      	ldr	r3, [r7, #12]
 8002b3a:	f003 030c 	and.w	r3, r3, #12
 8002b3e:	2b04      	cmp	r3, #4
 8002b40:	d002      	beq.n	8002b48 <HAL_RCC_GetSysClockFreq+0x30>
 8002b42:	2b08      	cmp	r3, #8
 8002b44:	d003      	beq.n	8002b4e <HAL_RCC_GetSysClockFreq+0x36>
 8002b46:	e027      	b.n	8002b98 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8002b48:	4b19      	ldr	r3, [pc, #100]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b4a:	613b      	str	r3, [r7, #16]
      break;
 8002b4c:	e027      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8002b4e:	68fb      	ldr	r3, [r7, #12]
 8002b50:	0c9b      	lsrs	r3, r3, #18
 8002b52:	f003 030f 	and.w	r3, r3, #15
 8002b56:	4a17      	ldr	r2, [pc, #92]	@ (8002bb4 <HAL_RCC_GetSysClockFreq+0x9c>)
 8002b58:	5cd3      	ldrb	r3, [r2, r3]
 8002b5a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d010      	beq.n	8002b88 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8002b66:	4b11      	ldr	r3, [pc, #68]	@ (8002bac <HAL_RCC_GetSysClockFreq+0x94>)
 8002b68:	685b      	ldr	r3, [r3, #4]
 8002b6a:	0c5b      	lsrs	r3, r3, #17
 8002b6c:	f003 0301 	and.w	r3, r3, #1
 8002b70:	4a11      	ldr	r2, [pc, #68]	@ (8002bb8 <HAL_RCC_GetSysClockFreq+0xa0>)
 8002b72:	5cd3      	ldrb	r3, [r2, r3]
 8002b74:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8002b76:	687b      	ldr	r3, [r7, #4]
 8002b78:	4a0d      	ldr	r2, [pc, #52]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b7a:	fb03 f202 	mul.w	r2, r3, r2
 8002b7e:	68bb      	ldr	r3, [r7, #8]
 8002b80:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b84:	617b      	str	r3, [r7, #20]
 8002b86:	e004      	b.n	8002b92 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	4a0c      	ldr	r2, [pc, #48]	@ (8002bbc <HAL_RCC_GetSysClockFreq+0xa4>)
 8002b8c:	fb02 f303 	mul.w	r3, r2, r3
 8002b90:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002b92:	697b      	ldr	r3, [r7, #20]
 8002b94:	613b      	str	r3, [r7, #16]
      break;
 8002b96:	e002      	b.n	8002b9e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <HAL_RCC_GetSysClockFreq+0x98>)
 8002b9a:	613b      	str	r3, [r7, #16]
      break;
 8002b9c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b9e:	693b      	ldr	r3, [r7, #16]
}
 8002ba0:	4618      	mov	r0, r3
 8002ba2:	371c      	adds	r7, #28
 8002ba4:	46bd      	mov	sp, r7
 8002ba6:	bc80      	pop	{r7}
 8002ba8:	4770      	bx	lr
 8002baa:	bf00      	nop
 8002bac:	40021000 	.word	0x40021000
 8002bb0:	007a1200 	.word	0x007a1200
 8002bb4:	08005090 	.word	0x08005090
 8002bb8:	080050a0 	.word	0x080050a0
 8002bbc:	003d0900 	.word	0x003d0900

08002bc0 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002bc0:	b480      	push	{r7}
 8002bc2:	b085      	sub	sp, #20
 8002bc4:	af00      	add	r7, sp, #0
 8002bc6:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002bc8:	4b0a      	ldr	r3, [pc, #40]	@ (8002bf4 <RCC_Delay+0x34>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4a0a      	ldr	r2, [pc, #40]	@ (8002bf8 <RCC_Delay+0x38>)
 8002bce:	fba2 2303 	umull	r2, r3, r2, r3
 8002bd2:	0a5b      	lsrs	r3, r3, #9
 8002bd4:	687a      	ldr	r2, [r7, #4]
 8002bd6:	fb02 f303 	mul.w	r3, r2, r3
 8002bda:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8002bdc:	bf00      	nop
  }
  while (Delay --);
 8002bde:	68fb      	ldr	r3, [r7, #12]
 8002be0:	1e5a      	subs	r2, r3, #1
 8002be2:	60fa      	str	r2, [r7, #12]
 8002be4:	2b00      	cmp	r3, #0
 8002be6:	d1f9      	bne.n	8002bdc <RCC_Delay+0x1c>
}
 8002be8:	bf00      	nop
 8002bea:	bf00      	nop
 8002bec:	3714      	adds	r7, #20
 8002bee:	46bd      	mov	sp, r7
 8002bf0:	bc80      	pop	{r7}
 8002bf2:	4770      	bx	lr
 8002bf4:	20000040 	.word	0x20000040
 8002bf8:	10624dd3 	.word	0x10624dd3

08002bfc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002bfc:	b580      	push	{r7, lr}
 8002bfe:	b082      	sub	sp, #8
 8002c00:	af00      	add	r7, sp, #0
 8002c02:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	2b00      	cmp	r3, #0
 8002c08:	d101      	bne.n	8002c0e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002c0a:	2301      	movs	r3, #1
 8002c0c:	e076      	b.n	8002cfc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	2b00      	cmp	r3, #0
 8002c14:	d108      	bne.n	8002c28 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	685b      	ldr	r3, [r3, #4]
 8002c1a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c1e:	d009      	beq.n	8002c34 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	2200      	movs	r2, #0
 8002c24:	61da      	str	r2, [r3, #28]
 8002c26:	e005      	b.n	8002c34 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002c28:	687b      	ldr	r3, [r7, #4]
 8002c2a:	2200      	movs	r2, #0
 8002c2c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2200      	movs	r2, #0
 8002c38:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002c3a:	687b      	ldr	r3, [r7, #4]
 8002c3c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c40:	b2db      	uxtb	r3, r3
 8002c42:	2b00      	cmp	r3, #0
 8002c44:	d106      	bne.n	8002c54 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002c46:	687b      	ldr	r3, [r7, #4]
 8002c48:	2200      	movs	r2, #0
 8002c4a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002c4e:	6878      	ldr	r0, [r7, #4]
 8002c50:	f7fe ff40 	bl	8001ad4 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002c54:	687b      	ldr	r3, [r7, #4]
 8002c56:	2202      	movs	r2, #2
 8002c58:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	681a      	ldr	r2, [r3, #0]
 8002c62:	687b      	ldr	r3, [r7, #4]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002c6a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002c74:	687b      	ldr	r3, [r7, #4]
 8002c76:	689b      	ldr	r3, [r3, #8]
 8002c78:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002c7c:	431a      	orrs	r2, r3
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	68db      	ldr	r3, [r3, #12]
 8002c82:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002c86:	431a      	orrs	r2, r3
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	691b      	ldr	r3, [r3, #16]
 8002c8c:	f003 0302 	and.w	r3, r3, #2
 8002c90:	431a      	orrs	r2, r3
 8002c92:	687b      	ldr	r3, [r7, #4]
 8002c94:	695b      	ldr	r3, [r3, #20]
 8002c96:	f003 0301 	and.w	r3, r3, #1
 8002c9a:	431a      	orrs	r2, r3
 8002c9c:	687b      	ldr	r3, [r7, #4]
 8002c9e:	699b      	ldr	r3, [r3, #24]
 8002ca0:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002ca4:	431a      	orrs	r2, r3
 8002ca6:	687b      	ldr	r3, [r7, #4]
 8002ca8:	69db      	ldr	r3, [r3, #28]
 8002caa:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002cae:	431a      	orrs	r2, r3
 8002cb0:	687b      	ldr	r3, [r7, #4]
 8002cb2:	6a1b      	ldr	r3, [r3, #32]
 8002cb4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002cb8:	ea42 0103 	orr.w	r1, r2, r3
 8002cbc:	687b      	ldr	r3, [r7, #4]
 8002cbe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002cc0:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002cc4:	687b      	ldr	r3, [r7, #4]
 8002cc6:	681b      	ldr	r3, [r3, #0]
 8002cc8:	430a      	orrs	r2, r1
 8002cca:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8002ccc:	687b      	ldr	r3, [r7, #4]
 8002cce:	699b      	ldr	r3, [r3, #24]
 8002cd0:	0c1a      	lsrs	r2, r3, #16
 8002cd2:	687b      	ldr	r3, [r7, #4]
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	f002 0204 	and.w	r2, r2, #4
 8002cda:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002cdc:	687b      	ldr	r3, [r7, #4]
 8002cde:	681b      	ldr	r3, [r3, #0]
 8002ce0:	69da      	ldr	r2, [r3, #28]
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002cea:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002cec:	687b      	ldr	r3, [r7, #4]
 8002cee:	2200      	movs	r2, #0
 8002cf0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002cf2:	687b      	ldr	r3, [r7, #4]
 8002cf4:	2201      	movs	r2, #1
 8002cf6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002cfa:	2300      	movs	r3, #0
}
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	3708      	adds	r7, #8
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b082      	sub	sp, #8
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002d0c:	687b      	ldr	r3, [r7, #4]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d101      	bne.n	8002d16 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002d12:	2301      	movs	r3, #1
 8002d14:	e041      	b.n	8002d9a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002d1c:	b2db      	uxtb	r3, r3
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d106      	bne.n	8002d30 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002d22:	687b      	ldr	r3, [r7, #4]
 8002d24:	2200      	movs	r2, #0
 8002d26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8002d2a:	6878      	ldr	r0, [r7, #4]
 8002d2c:	f7fe ff10 	bl	8001b50 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002d30:	687b      	ldr	r3, [r7, #4]
 8002d32:	2202      	movs	r2, #2
 8002d34:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002d38:	687b      	ldr	r3, [r7, #4]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3304      	adds	r3, #4
 8002d40:	4619      	mov	r1, r3
 8002d42:	4610      	mov	r0, r2
 8002d44:	f000 fc38 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002d48:	687b      	ldr	r3, [r7, #4]
 8002d4a:	2201      	movs	r2, #1
 8002d4c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d50:	687b      	ldr	r3, [r7, #4]
 8002d52:	2201      	movs	r2, #1
 8002d54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002d58:	687b      	ldr	r3, [r7, #4]
 8002d5a:	2201      	movs	r2, #1
 8002d5c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002d60:	687b      	ldr	r3, [r7, #4]
 8002d62:	2201      	movs	r2, #1
 8002d64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	2201      	movs	r2, #1
 8002d6c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	2201      	movs	r2, #1
 8002d74:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002d78:	687b      	ldr	r3, [r7, #4]
 8002d7a:	2201      	movs	r2, #1
 8002d7c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	2201      	movs	r2, #1
 8002d84:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002d88:	687b      	ldr	r3, [r7, #4]
 8002d8a:	2201      	movs	r2, #1
 8002d8c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002d90:	687b      	ldr	r3, [r7, #4]
 8002d92:	2201      	movs	r2, #1
 8002d94:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002d98:	2300      	movs	r3, #0
}
 8002d9a:	4618      	mov	r0, r3
 8002d9c:	3708      	adds	r7, #8
 8002d9e:	46bd      	mov	sp, r7
 8002da0:	bd80      	pop	{r7, pc}
	...

08002da4 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002da4:	b480      	push	{r7}
 8002da6:	b085      	sub	sp, #20
 8002da8:	af00      	add	r7, sp, #0
 8002daa:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8002dac:	687b      	ldr	r3, [r7, #4]
 8002dae:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002db2:	b2db      	uxtb	r3, r3
 8002db4:	2b01      	cmp	r3, #1
 8002db6:	d001      	beq.n	8002dbc <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002db8:	2301      	movs	r3, #1
 8002dba:	e03a      	b.n	8002e32 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002dbc:	687b      	ldr	r3, [r7, #4]
 8002dbe:	2202      	movs	r2, #2
 8002dc0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	681b      	ldr	r3, [r3, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f042 0201 	orr.w	r2, r2, #1
 8002dd2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002dd4:	687b      	ldr	r3, [r7, #4]
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4a18      	ldr	r2, [pc, #96]	@ (8002e3c <HAL_TIM_Base_Start_IT+0x98>)
 8002dda:	4293      	cmp	r3, r2
 8002ddc:	d00e      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x58>
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	681b      	ldr	r3, [r3, #0]
 8002de2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002de6:	d009      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x58>
 8002de8:	687b      	ldr	r3, [r7, #4]
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	4a14      	ldr	r2, [pc, #80]	@ (8002e40 <HAL_TIM_Base_Start_IT+0x9c>)
 8002dee:	4293      	cmp	r3, r2
 8002df0:	d004      	beq.n	8002dfc <HAL_TIM_Base_Start_IT+0x58>
 8002df2:	687b      	ldr	r3, [r7, #4]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	4a13      	ldr	r2, [pc, #76]	@ (8002e44 <HAL_TIM_Base_Start_IT+0xa0>)
 8002df8:	4293      	cmp	r3, r2
 8002dfa:	d111      	bne.n	8002e20 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002dfc:	687b      	ldr	r3, [r7, #4]
 8002dfe:	681b      	ldr	r3, [r3, #0]
 8002e00:	689b      	ldr	r3, [r3, #8]
 8002e02:	f003 0307 	and.w	r3, r3, #7
 8002e06:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	2b06      	cmp	r3, #6
 8002e0c:	d010      	beq.n	8002e30 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8002e0e:	687b      	ldr	r3, [r7, #4]
 8002e10:	681b      	ldr	r3, [r3, #0]
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	f042 0201 	orr.w	r2, r2, #1
 8002e1c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002e1e:	e007      	b.n	8002e30 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	681a      	ldr	r2, [r3, #0]
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	681b      	ldr	r3, [r3, #0]
 8002e2a:	f042 0201 	orr.w	r2, r2, #1
 8002e2e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002e30:	2300      	movs	r3, #0
}
 8002e32:	4618      	mov	r0, r3
 8002e34:	3714      	adds	r7, #20
 8002e36:	46bd      	mov	sp, r7
 8002e38:	bc80      	pop	{r7}
 8002e3a:	4770      	bx	lr
 8002e3c:	40012c00 	.word	0x40012c00
 8002e40:	40000400 	.word	0x40000400
 8002e44:	40000800 	.word	0x40000800

08002e48 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8002e48:	b580      	push	{r7, lr}
 8002e4a:	b082      	sub	sp, #8
 8002e4c:	af00      	add	r7, sp, #0
 8002e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d101      	bne.n	8002e5a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	e041      	b.n	8002ede <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002e60:	b2db      	uxtb	r3, r3
 8002e62:	2b00      	cmp	r3, #0
 8002e64:	d106      	bne.n	8002e74 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002e66:	687b      	ldr	r3, [r7, #4]
 8002e68:	2200      	movs	r2, #0
 8002e6a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8002e6e:	6878      	ldr	r0, [r7, #4]
 8002e70:	f000 f839 	bl	8002ee6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002e74:	687b      	ldr	r3, [r7, #4]
 8002e76:	2202      	movs	r2, #2
 8002e78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8002e7c:	687b      	ldr	r3, [r7, #4]
 8002e7e:	681a      	ldr	r2, [r3, #0]
 8002e80:	687b      	ldr	r3, [r7, #4]
 8002e82:	3304      	adds	r3, #4
 8002e84:	4619      	mov	r1, r3
 8002e86:	4610      	mov	r0, r2
 8002e88:	f000 fb96 	bl	80035b8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	2201      	movs	r2, #1
 8002e90:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	2201      	movs	r2, #1
 8002e98:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002e9c:	687b      	ldr	r3, [r7, #4]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002ea4:	687b      	ldr	r3, [r7, #4]
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2201      	movs	r2, #1
 8002eb0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	2201      	movs	r2, #1
 8002eb8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8002ebc:	687b      	ldr	r3, [r7, #4]
 8002ebe:	2201      	movs	r2, #1
 8002ec0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002ec4:	687b      	ldr	r3, [r7, #4]
 8002ec6:	2201      	movs	r2, #1
 8002ec8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8002ecc:	687b      	ldr	r3, [r7, #4]
 8002ece:	2201      	movs	r2, #1
 8002ed0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002ed4:	687b      	ldr	r3, [r7, #4]
 8002ed6:	2201      	movs	r2, #1
 8002ed8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002edc:	2300      	movs	r3, #0
}
 8002ede:	4618      	mov	r0, r3
 8002ee0:	3708      	adds	r7, #8
 8002ee2:	46bd      	mov	sp, r7
 8002ee4:	bd80      	pop	{r7, pc}

08002ee6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002ee6:	b480      	push	{r7}
 8002ee8:	b083      	sub	sp, #12
 8002eea:	af00      	add	r7, sp, #0
 8002eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8002eee:	bf00      	nop
 8002ef0:	370c      	adds	r7, #12
 8002ef2:	46bd      	mov	sp, r7
 8002ef4:	bc80      	pop	{r7}
 8002ef6:	4770      	bx	lr

08002ef8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	b084      	sub	sp, #16
 8002efc:	af00      	add	r7, sp, #0
 8002efe:	6078      	str	r0, [r7, #4]
 8002f00:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002f02:	683b      	ldr	r3, [r7, #0]
 8002f04:	2b00      	cmp	r3, #0
 8002f06:	d109      	bne.n	8002f1c <HAL_TIM_PWM_Start+0x24>
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8002f0e:	b2db      	uxtb	r3, r3
 8002f10:	2b01      	cmp	r3, #1
 8002f12:	bf14      	ite	ne
 8002f14:	2301      	movne	r3, #1
 8002f16:	2300      	moveq	r3, #0
 8002f18:	b2db      	uxtb	r3, r3
 8002f1a:	e022      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	2b04      	cmp	r3, #4
 8002f20:	d109      	bne.n	8002f36 <HAL_TIM_PWM_Start+0x3e>
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002f28:	b2db      	uxtb	r3, r3
 8002f2a:	2b01      	cmp	r3, #1
 8002f2c:	bf14      	ite	ne
 8002f2e:	2301      	movne	r3, #1
 8002f30:	2300      	moveq	r3, #0
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	e015      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f36:	683b      	ldr	r3, [r7, #0]
 8002f38:	2b08      	cmp	r3, #8
 8002f3a:	d109      	bne.n	8002f50 <HAL_TIM_PWM_Start+0x58>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8002f42:	b2db      	uxtb	r3, r3
 8002f44:	2b01      	cmp	r3, #1
 8002f46:	bf14      	ite	ne
 8002f48:	2301      	movne	r3, #1
 8002f4a:	2300      	moveq	r3, #0
 8002f4c:	b2db      	uxtb	r3, r3
 8002f4e:	e008      	b.n	8002f62 <HAL_TIM_PWM_Start+0x6a>
 8002f50:	687b      	ldr	r3, [r7, #4]
 8002f52:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8002f56:	b2db      	uxtb	r3, r3
 8002f58:	2b01      	cmp	r3, #1
 8002f5a:	bf14      	ite	ne
 8002f5c:	2301      	movne	r3, #1
 8002f5e:	2300      	moveq	r3, #0
 8002f60:	b2db      	uxtb	r3, r3
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d001      	beq.n	8002f6a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8002f66:	2301      	movs	r3, #1
 8002f68:	e05e      	b.n	8003028 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8002f6a:	683b      	ldr	r3, [r7, #0]
 8002f6c:	2b00      	cmp	r3, #0
 8002f6e:	d104      	bne.n	8002f7a <HAL_TIM_PWM_Start+0x82>
 8002f70:	687b      	ldr	r3, [r7, #4]
 8002f72:	2202      	movs	r2, #2
 8002f74:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8002f78:	e013      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f7a:	683b      	ldr	r3, [r7, #0]
 8002f7c:	2b04      	cmp	r3, #4
 8002f7e:	d104      	bne.n	8002f8a <HAL_TIM_PWM_Start+0x92>
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2202      	movs	r2, #2
 8002f84:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002f88:	e00b      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f8a:	683b      	ldr	r3, [r7, #0]
 8002f8c:	2b08      	cmp	r3, #8
 8002f8e:	d104      	bne.n	8002f9a <HAL_TIM_PWM_Start+0xa2>
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	2202      	movs	r2, #2
 8002f94:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002f98:	e003      	b.n	8002fa2 <HAL_TIM_PWM_Start+0xaa>
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	2202      	movs	r2, #2
 8002f9e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002fa2:	687b      	ldr	r3, [r7, #4]
 8002fa4:	681b      	ldr	r3, [r3, #0]
 8002fa6:	2201      	movs	r2, #1
 8002fa8:	6839      	ldr	r1, [r7, #0]
 8002faa:	4618      	mov	r0, r3
 8002fac:	f000 fd84 	bl	8003ab8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002fb0:	687b      	ldr	r3, [r7, #4]
 8002fb2:	681b      	ldr	r3, [r3, #0]
 8002fb4:	4a1e      	ldr	r2, [pc, #120]	@ (8003030 <HAL_TIM_PWM_Start+0x138>)
 8002fb6:	4293      	cmp	r3, r2
 8002fb8:	d107      	bne.n	8002fca <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	681b      	ldr	r3, [r3, #0]
 8002fbe:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002fc0:	687b      	ldr	r3, [r7, #4]
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fc8:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002fca:	687b      	ldr	r3, [r7, #4]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	4a18      	ldr	r2, [pc, #96]	@ (8003030 <HAL_TIM_PWM_Start+0x138>)
 8002fd0:	4293      	cmp	r3, r2
 8002fd2:	d00e      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002fdc:	d009      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4a14      	ldr	r2, [pc, #80]	@ (8003034 <HAL_TIM_PWM_Start+0x13c>)
 8002fe4:	4293      	cmp	r3, r2
 8002fe6:	d004      	beq.n	8002ff2 <HAL_TIM_PWM_Start+0xfa>
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	681b      	ldr	r3, [r3, #0]
 8002fec:	4a12      	ldr	r2, [pc, #72]	@ (8003038 <HAL_TIM_PWM_Start+0x140>)
 8002fee:	4293      	cmp	r3, r2
 8002ff0:	d111      	bne.n	8003016 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002ff2:	687b      	ldr	r3, [r7, #4]
 8002ff4:	681b      	ldr	r3, [r3, #0]
 8002ff6:	689b      	ldr	r3, [r3, #8]
 8002ff8:	f003 0307 	and.w	r3, r3, #7
 8002ffc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	2b06      	cmp	r3, #6
 8003002:	d010      	beq.n	8003026 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003004:	687b      	ldr	r3, [r7, #4]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	681a      	ldr	r2, [r3, #0]
 800300a:	687b      	ldr	r3, [r7, #4]
 800300c:	681b      	ldr	r3, [r3, #0]
 800300e:	f042 0201 	orr.w	r2, r2, #1
 8003012:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003014:	e007      	b.n	8003026 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	681b      	ldr	r3, [r3, #0]
 800301a:	681a      	ldr	r2, [r3, #0]
 800301c:	687b      	ldr	r3, [r7, #4]
 800301e:	681b      	ldr	r3, [r3, #0]
 8003020:	f042 0201 	orr.w	r2, r2, #1
 8003024:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003026:	2300      	movs	r3, #0
}
 8003028:	4618      	mov	r0, r3
 800302a:	3710      	adds	r7, #16
 800302c:	46bd      	mov	sp, r7
 800302e:	bd80      	pop	{r7, pc}
 8003030:	40012c00 	.word	0x40012c00
 8003034:	40000400 	.word	0x40000400
 8003038:	40000800 	.word	0x40000800

0800303c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800303c:	b580      	push	{r7, lr}
 800303e:	b082      	sub	sp, #8
 8003040:	af00      	add	r7, sp, #0
 8003042:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003044:	687b      	ldr	r3, [r7, #4]
 8003046:	681b      	ldr	r3, [r3, #0]
 8003048:	691b      	ldr	r3, [r3, #16]
 800304a:	f003 0302 	and.w	r3, r3, #2
 800304e:	2b02      	cmp	r3, #2
 8003050:	d122      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003052:	687b      	ldr	r3, [r7, #4]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	68db      	ldr	r3, [r3, #12]
 8003058:	f003 0302 	and.w	r3, r3, #2
 800305c:	2b02      	cmp	r3, #2
 800305e:	d11b      	bne.n	8003098 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	f06f 0202 	mvn.w	r2, #2
 8003068:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	2201      	movs	r2, #1
 800306e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003070:	687b      	ldr	r3, [r7, #4]
 8003072:	681b      	ldr	r3, [r3, #0]
 8003074:	699b      	ldr	r3, [r3, #24]
 8003076:	f003 0303 	and.w	r3, r3, #3
 800307a:	2b00      	cmp	r3, #0
 800307c:	d003      	beq.n	8003086 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f000 fa7f 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 8003084:	e005      	b.n	8003092 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003086:	6878      	ldr	r0, [r7, #4]
 8003088:	f000 fa72 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800308c:	6878      	ldr	r0, [r7, #4]
 800308e:	f000 fa81 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003092:	687b      	ldr	r3, [r7, #4]
 8003094:	2200      	movs	r2, #0
 8003096:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	691b      	ldr	r3, [r3, #16]
 800309e:	f003 0304 	and.w	r3, r3, #4
 80030a2:	2b04      	cmp	r3, #4
 80030a4:	d122      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	68db      	ldr	r3, [r3, #12]
 80030ac:	f003 0304 	and.w	r3, r3, #4
 80030b0:	2b04      	cmp	r3, #4
 80030b2:	d11b      	bne.n	80030ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	f06f 0204 	mvn.w	r2, #4
 80030bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	2202      	movs	r2, #2
 80030c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80030c4:	687b      	ldr	r3, [r7, #4]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	699b      	ldr	r3, [r3, #24]
 80030ca:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80030ce:	2b00      	cmp	r3, #0
 80030d0:	d003      	beq.n	80030da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80030d2:	6878      	ldr	r0, [r7, #4]
 80030d4:	f000 fa55 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 80030d8:	e005      	b.n	80030e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80030da:	6878      	ldr	r0, [r7, #4]
 80030dc:	f000 fa48 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80030e0:	6878      	ldr	r0, [r7, #4]
 80030e2:	f000 fa57 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80030e6:	687b      	ldr	r3, [r7, #4]
 80030e8:	2200      	movs	r2, #0
 80030ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80030ec:	687b      	ldr	r3, [r7, #4]
 80030ee:	681b      	ldr	r3, [r3, #0]
 80030f0:	691b      	ldr	r3, [r3, #16]
 80030f2:	f003 0308 	and.w	r3, r3, #8
 80030f6:	2b08      	cmp	r3, #8
 80030f8:	d122      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80030fa:	687b      	ldr	r3, [r7, #4]
 80030fc:	681b      	ldr	r3, [r3, #0]
 80030fe:	68db      	ldr	r3, [r3, #12]
 8003100:	f003 0308 	and.w	r3, r3, #8
 8003104:	2b08      	cmp	r3, #8
 8003106:	d11b      	bne.n	8003140 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	681b      	ldr	r3, [r3, #0]
 800310c:	f06f 0208 	mvn.w	r2, #8
 8003110:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	2204      	movs	r2, #4
 8003116:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003118:	687b      	ldr	r3, [r7, #4]
 800311a:	681b      	ldr	r3, [r3, #0]
 800311c:	69db      	ldr	r3, [r3, #28]
 800311e:	f003 0303 	and.w	r3, r3, #3
 8003122:	2b00      	cmp	r3, #0
 8003124:	d003      	beq.n	800312e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003126:	6878      	ldr	r0, [r7, #4]
 8003128:	f000 fa2b 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 800312c:	e005      	b.n	800313a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800312e:	6878      	ldr	r0, [r7, #4]
 8003130:	f000 fa1e 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003134:	6878      	ldr	r0, [r7, #4]
 8003136:	f000 fa2d 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800313a:	687b      	ldr	r3, [r7, #4]
 800313c:	2200      	movs	r2, #0
 800313e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	681b      	ldr	r3, [r3, #0]
 8003144:	691b      	ldr	r3, [r3, #16]
 8003146:	f003 0310 	and.w	r3, r3, #16
 800314a:	2b10      	cmp	r3, #16
 800314c:	d122      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	f003 0310 	and.w	r3, r3, #16
 8003158:	2b10      	cmp	r3, #16
 800315a:	d11b      	bne.n	8003194 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	f06f 0210 	mvn.w	r2, #16
 8003164:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	2208      	movs	r2, #8
 800316a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	681b      	ldr	r3, [r3, #0]
 8003170:	69db      	ldr	r3, [r3, #28]
 8003172:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003176:	2b00      	cmp	r3, #0
 8003178:	d003      	beq.n	8003182 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800317a:	6878      	ldr	r0, [r7, #4]
 800317c:	f000 fa01 	bl	8003582 <HAL_TIM_IC_CaptureCallback>
 8003180:	e005      	b.n	800318e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003182:	6878      	ldr	r0, [r7, #4]
 8003184:	f000 f9f4 	bl	8003570 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003188:	6878      	ldr	r0, [r7, #4]
 800318a:	f000 fa03 	bl	8003594 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	2200      	movs	r2, #0
 8003192:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	691b      	ldr	r3, [r3, #16]
 800319a:	f003 0301 	and.w	r3, r3, #1
 800319e:	2b01      	cmp	r3, #1
 80031a0:	d10e      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	68db      	ldr	r3, [r3, #12]
 80031a8:	f003 0301 	and.w	r3, r3, #1
 80031ac:	2b01      	cmp	r3, #1
 80031ae:	d107      	bne.n	80031c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	f06f 0201 	mvn.w	r2, #1
 80031b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80031ba:	6878      	ldr	r0, [r7, #4]
 80031bc:	f000 f9cf 	bl	800355e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	681b      	ldr	r3, [r3, #0]
 80031c4:	691b      	ldr	r3, [r3, #16]
 80031c6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031ca:	2b80      	cmp	r3, #128	@ 0x80
 80031cc:	d10e      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	68db      	ldr	r3, [r3, #12]
 80031d4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80031d8:	2b80      	cmp	r3, #128	@ 0x80
 80031da:	d107      	bne.n	80031ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80031e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80031e6:	6878      	ldr	r0, [r7, #4]
 80031e8:	f000 fcf1 	bl	8003bce <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	691b      	ldr	r3, [r3, #16]
 80031f2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80031f6:	2b40      	cmp	r3, #64	@ 0x40
 80031f8:	d10e      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	68db      	ldr	r3, [r3, #12]
 8003200:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003204:	2b40      	cmp	r3, #64	@ 0x40
 8003206:	d107      	bne.n	8003218 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003208:	687b      	ldr	r3, [r7, #4]
 800320a:	681b      	ldr	r3, [r3, #0]
 800320c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003210:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003212:	6878      	ldr	r0, [r7, #4]
 8003214:	f000 f9c7 	bl	80035a6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	681b      	ldr	r3, [r3, #0]
 800321c:	691b      	ldr	r3, [r3, #16]
 800321e:	f003 0320 	and.w	r3, r3, #32
 8003222:	2b20      	cmp	r3, #32
 8003224:	d10e      	bne.n	8003244 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003226:	687b      	ldr	r3, [r7, #4]
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	68db      	ldr	r3, [r3, #12]
 800322c:	f003 0320 	and.w	r3, r3, #32
 8003230:	2b20      	cmp	r3, #32
 8003232:	d107      	bne.n	8003244 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f06f 0220 	mvn.w	r2, #32
 800323c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800323e:	6878      	ldr	r0, [r7, #4]
 8003240:	f000 fcbc 	bl	8003bbc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003244:	bf00      	nop
 8003246:	3708      	adds	r7, #8
 8003248:	46bd      	mov	sp, r7
 800324a:	bd80      	pop	{r7, pc}

0800324c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800324c:	b580      	push	{r7, lr}
 800324e:	b086      	sub	sp, #24
 8003250:	af00      	add	r7, sp, #0
 8003252:	60f8      	str	r0, [r7, #12]
 8003254:	60b9      	str	r1, [r7, #8]
 8003256:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003258:	2300      	movs	r3, #0
 800325a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003262:	2b01      	cmp	r3, #1
 8003264:	d101      	bne.n	800326a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003266:	2302      	movs	r3, #2
 8003268:	e0ae      	b.n	80033c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800326a:	68fb      	ldr	r3, [r7, #12]
 800326c:	2201      	movs	r2, #1
 800326e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	2b0c      	cmp	r3, #12
 8003276:	f200 809f 	bhi.w	80033b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800327a:	a201      	add	r2, pc, #4	@ (adr r2, 8003280 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800327c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003280:	080032b5 	.word	0x080032b5
 8003284:	080033b9 	.word	0x080033b9
 8003288:	080033b9 	.word	0x080033b9
 800328c:	080033b9 	.word	0x080033b9
 8003290:	080032f5 	.word	0x080032f5
 8003294:	080033b9 	.word	0x080033b9
 8003298:	080033b9 	.word	0x080033b9
 800329c:	080033b9 	.word	0x080033b9
 80032a0:	08003337 	.word	0x08003337
 80032a4:	080033b9 	.word	0x080033b9
 80032a8:	080033b9 	.word	0x080033b9
 80032ac:	080033b9 	.word	0x080033b9
 80032b0:	08003377 	.word	0x08003377
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	681b      	ldr	r3, [r3, #0]
 80032b8:	68b9      	ldr	r1, [r7, #8]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f000 f9de 	bl	800367c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80032c0:	68fb      	ldr	r3, [r7, #12]
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	699a      	ldr	r2, [r3, #24]
 80032c6:	68fb      	ldr	r3, [r7, #12]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f042 0208 	orr.w	r2, r2, #8
 80032ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80032d0:	68fb      	ldr	r3, [r7, #12]
 80032d2:	681b      	ldr	r3, [r3, #0]
 80032d4:	699a      	ldr	r2, [r3, #24]
 80032d6:	68fb      	ldr	r3, [r7, #12]
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	f022 0204 	bic.w	r2, r2, #4
 80032de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80032e0:	68fb      	ldr	r3, [r7, #12]
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	6999      	ldr	r1, [r3, #24]
 80032e6:	68bb      	ldr	r3, [r7, #8]
 80032e8:	691a      	ldr	r2, [r3, #16]
 80032ea:	68fb      	ldr	r3, [r7, #12]
 80032ec:	681b      	ldr	r3, [r3, #0]
 80032ee:	430a      	orrs	r2, r1
 80032f0:	619a      	str	r2, [r3, #24]
      break;
 80032f2:	e064      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	681b      	ldr	r3, [r3, #0]
 80032f8:	68b9      	ldr	r1, [r7, #8]
 80032fa:	4618      	mov	r0, r3
 80032fc:	f000 fa24 	bl	8003748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003300:	68fb      	ldr	r3, [r7, #12]
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	699a      	ldr	r2, [r3, #24]
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800330e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003310:	68fb      	ldr	r3, [r7, #12]
 8003312:	681b      	ldr	r3, [r3, #0]
 8003314:	699a      	ldr	r2, [r3, #24]
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800331e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	6999      	ldr	r1, [r3, #24]
 8003326:	68bb      	ldr	r3, [r7, #8]
 8003328:	691b      	ldr	r3, [r3, #16]
 800332a:	021a      	lsls	r2, r3, #8
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	430a      	orrs	r2, r1
 8003332:	619a      	str	r2, [r3, #24]
      break;
 8003334:	e043      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	681b      	ldr	r3, [r3, #0]
 800333a:	68b9      	ldr	r1, [r7, #8]
 800333c:	4618      	mov	r0, r3
 800333e:	f000 fa6d 	bl	800381c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	69da      	ldr	r2, [r3, #28]
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	f042 0208 	orr.w	r2, r2, #8
 8003350:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	69da      	ldr	r2, [r3, #28]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f022 0204 	bic.w	r2, r2, #4
 8003360:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	69d9      	ldr	r1, [r3, #28]
 8003368:	68bb      	ldr	r3, [r7, #8]
 800336a:	691a      	ldr	r2, [r3, #16]
 800336c:	68fb      	ldr	r3, [r7, #12]
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	430a      	orrs	r2, r1
 8003372:	61da      	str	r2, [r3, #28]
      break;
 8003374:	e023      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003376:	68fb      	ldr	r3, [r7, #12]
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	68b9      	ldr	r1, [r7, #8]
 800337c:	4618      	mov	r0, r3
 800337e:	f000 fab7 	bl	80038f0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	69da      	ldr	r2, [r3, #28]
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003390:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003392:	68fb      	ldr	r3, [r7, #12]
 8003394:	681b      	ldr	r3, [r3, #0]
 8003396:	69da      	ldr	r2, [r3, #28]
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80033a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80033a2:	68fb      	ldr	r3, [r7, #12]
 80033a4:	681b      	ldr	r3, [r3, #0]
 80033a6:	69d9      	ldr	r1, [r3, #28]
 80033a8:	68bb      	ldr	r3, [r7, #8]
 80033aa:	691b      	ldr	r3, [r3, #16]
 80033ac:	021a      	lsls	r2, r3, #8
 80033ae:	68fb      	ldr	r3, [r7, #12]
 80033b0:	681b      	ldr	r3, [r3, #0]
 80033b2:	430a      	orrs	r2, r1
 80033b4:	61da      	str	r2, [r3, #28]
      break;
 80033b6:	e002      	b.n	80033be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	75fb      	strb	r3, [r7, #23]
      break;
 80033bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	2200      	movs	r2, #0
 80033c2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80033c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80033c8:	4618      	mov	r0, r3
 80033ca:	3718      	adds	r7, #24
 80033cc:	46bd      	mov	sp, r7
 80033ce:	bd80      	pop	{r7, pc}

080033d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80033d0:	b580      	push	{r7, lr}
 80033d2:	b084      	sub	sp, #16
 80033d4:	af00      	add	r7, sp, #0
 80033d6:	6078      	str	r0, [r7, #4]
 80033d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80033da:	2300      	movs	r3, #0
 80033dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80033e4:	2b01      	cmp	r3, #1
 80033e6:	d101      	bne.n	80033ec <HAL_TIM_ConfigClockSource+0x1c>
 80033e8:	2302      	movs	r3, #2
 80033ea:	e0b4      	b.n	8003556 <HAL_TIM_ConfigClockSource+0x186>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	2201      	movs	r2, #1
 80033f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	2202      	movs	r2, #2
 80033f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	681b      	ldr	r3, [r3, #0]
 8003400:	689b      	ldr	r3, [r3, #8]
 8003402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003404:	68bb      	ldr	r3, [r7, #8]
 8003406:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800340a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800340c:	68bb      	ldr	r3, [r7, #8]
 800340e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003412:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	68ba      	ldr	r2, [r7, #8]
 800341a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800341c:	683b      	ldr	r3, [r7, #0]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003424:	d03e      	beq.n	80034a4 <HAL_TIM_ConfigClockSource+0xd4>
 8003426:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800342a:	f200 8087 	bhi.w	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800342e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003432:	f000 8086 	beq.w	8003542 <HAL_TIM_ConfigClockSource+0x172>
 8003436:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800343a:	d87f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800343c:	2b70      	cmp	r3, #112	@ 0x70
 800343e:	d01a      	beq.n	8003476 <HAL_TIM_ConfigClockSource+0xa6>
 8003440:	2b70      	cmp	r3, #112	@ 0x70
 8003442:	d87b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003444:	2b60      	cmp	r3, #96	@ 0x60
 8003446:	d050      	beq.n	80034ea <HAL_TIM_ConfigClockSource+0x11a>
 8003448:	2b60      	cmp	r3, #96	@ 0x60
 800344a:	d877      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800344c:	2b50      	cmp	r3, #80	@ 0x50
 800344e:	d03c      	beq.n	80034ca <HAL_TIM_ConfigClockSource+0xfa>
 8003450:	2b50      	cmp	r3, #80	@ 0x50
 8003452:	d873      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003454:	2b40      	cmp	r3, #64	@ 0x40
 8003456:	d058      	beq.n	800350a <HAL_TIM_ConfigClockSource+0x13a>
 8003458:	2b40      	cmp	r3, #64	@ 0x40
 800345a:	d86f      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800345c:	2b30      	cmp	r3, #48	@ 0x30
 800345e:	d064      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003460:	2b30      	cmp	r3, #48	@ 0x30
 8003462:	d86b      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 8003464:	2b20      	cmp	r3, #32
 8003466:	d060      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003468:	2b20      	cmp	r3, #32
 800346a:	d867      	bhi.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
 800346c:	2b00      	cmp	r3, #0
 800346e:	d05c      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003470:	2b10      	cmp	r3, #16
 8003472:	d05a      	beq.n	800352a <HAL_TIM_ConfigClockSource+0x15a>
 8003474:	e062      	b.n	800353c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800347a:	683b      	ldr	r3, [r7, #0]
 800347c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800347e:	683b      	ldr	r3, [r7, #0]
 8003480:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003482:	683b      	ldr	r3, [r7, #0]
 8003484:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003486:	f000 faf8 	bl	8003a7a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800348a:	687b      	ldr	r3, [r7, #4]
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	689b      	ldr	r3, [r3, #8]
 8003490:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003492:	68bb      	ldr	r3, [r7, #8]
 8003494:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003498:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	681b      	ldr	r3, [r3, #0]
 800349e:	68ba      	ldr	r2, [r7, #8]
 80034a0:	609a      	str	r2, [r3, #8]
      break;
 80034a2:	e04f      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80034a4:	687b      	ldr	r3, [r7, #4]
 80034a6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80034a8:	683b      	ldr	r3, [r7, #0]
 80034aa:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80034ac:	683b      	ldr	r3, [r7, #0]
 80034ae:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80034b0:	683b      	ldr	r3, [r7, #0]
 80034b2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80034b4:	f000 fae1 	bl	8003a7a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689a      	ldr	r2, [r3, #8]
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80034c6:	609a      	str	r2, [r3, #8]
      break;
 80034c8:	e03c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ce:	683b      	ldr	r3, [r7, #0]
 80034d0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034d2:	683b      	ldr	r3, [r7, #0]
 80034d4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80034d6:	461a      	mov	r2, r3
 80034d8:	f000 fa58 	bl	800398c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80034dc:	687b      	ldr	r3, [r7, #4]
 80034de:	681b      	ldr	r3, [r3, #0]
 80034e0:	2150      	movs	r1, #80	@ 0x50
 80034e2:	4618      	mov	r0, r3
 80034e4:	f000 faaf 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 80034e8:	e02c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80034ea:	687b      	ldr	r3, [r7, #4]
 80034ec:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80034ee:	683b      	ldr	r3, [r7, #0]
 80034f0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80034f2:	683b      	ldr	r3, [r7, #0]
 80034f4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80034f6:	461a      	mov	r2, r3
 80034f8:	f000 fa76 	bl	80039e8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80034fc:	687b      	ldr	r3, [r7, #4]
 80034fe:	681b      	ldr	r3, [r3, #0]
 8003500:	2160      	movs	r1, #96	@ 0x60
 8003502:	4618      	mov	r0, r3
 8003504:	f000 fa9f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003508:	e01c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800350e:	683b      	ldr	r3, [r7, #0]
 8003510:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003512:	683b      	ldr	r3, [r7, #0]
 8003514:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003516:	461a      	mov	r2, r3
 8003518:	f000 fa38 	bl	800398c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800351c:	687b      	ldr	r3, [r7, #4]
 800351e:	681b      	ldr	r3, [r3, #0]
 8003520:	2140      	movs	r1, #64	@ 0x40
 8003522:	4618      	mov	r0, r3
 8003524:	f000 fa8f 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 8003528:	e00c      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	683b      	ldr	r3, [r7, #0]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	4619      	mov	r1, r3
 8003534:	4610      	mov	r0, r2
 8003536:	f000 fa86 	bl	8003a46 <TIM_ITRx_SetConfig>
      break;
 800353a:	e003      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800353c:	2301      	movs	r3, #1
 800353e:	73fb      	strb	r3, [r7, #15]
      break;
 8003540:	e000      	b.n	8003544 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003542:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	2201      	movs	r2, #1
 8003548:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	2200      	movs	r2, #0
 8003550:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003554:	7bfb      	ldrb	r3, [r7, #15]
}
 8003556:	4618      	mov	r0, r3
 8003558:	3710      	adds	r7, #16
 800355a:	46bd      	mov	sp, r7
 800355c:	bd80      	pop	{r7, pc}

0800355e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800355e:	b480      	push	{r7}
 8003560:	b083      	sub	sp, #12
 8003562:	af00      	add	r7, sp, #0
 8003564:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003566:	bf00      	nop
 8003568:	370c      	adds	r7, #12
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003570:	b480      	push	{r7}
 8003572:	b083      	sub	sp, #12
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003578:	bf00      	nop
 800357a:	370c      	adds	r7, #12
 800357c:	46bd      	mov	sp, r7
 800357e:	bc80      	pop	{r7}
 8003580:	4770      	bx	lr

08003582 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003582:	b480      	push	{r7}
 8003584:	b083      	sub	sp, #12
 8003586:	af00      	add	r7, sp, #0
 8003588:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800358a:	bf00      	nop
 800358c:	370c      	adds	r7, #12
 800358e:	46bd      	mov	sp, r7
 8003590:	bc80      	pop	{r7}
 8003592:	4770      	bx	lr

08003594 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003594:	b480      	push	{r7}
 8003596:	b083      	sub	sp, #12
 8003598:	af00      	add	r7, sp, #0
 800359a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800359c:	bf00      	nop
 800359e:	370c      	adds	r7, #12
 80035a0:	46bd      	mov	sp, r7
 80035a2:	bc80      	pop	{r7}
 80035a4:	4770      	bx	lr

080035a6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80035a6:	b480      	push	{r7}
 80035a8:	b083      	sub	sp, #12
 80035aa:	af00      	add	r7, sp, #0
 80035ac:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80035ae:	bf00      	nop
 80035b0:	370c      	adds	r7, #12
 80035b2:	46bd      	mov	sp, r7
 80035b4:	bc80      	pop	{r7}
 80035b6:	4770      	bx	lr

080035b8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b085      	sub	sp, #20
 80035bc:	af00      	add	r7, sp, #0
 80035be:	6078      	str	r0, [r7, #4]
 80035c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	4a29      	ldr	r2, [pc, #164]	@ (8003670 <TIM_Base_SetConfig+0xb8>)
 80035cc:	4293      	cmp	r3, r2
 80035ce:	d00b      	beq.n	80035e8 <TIM_Base_SetConfig+0x30>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d6:	d007      	beq.n	80035e8 <TIM_Base_SetConfig+0x30>
 80035d8:	687b      	ldr	r3, [r7, #4]
 80035da:	4a26      	ldr	r2, [pc, #152]	@ (8003674 <TIM_Base_SetConfig+0xbc>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d003      	beq.n	80035e8 <TIM_Base_SetConfig+0x30>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	4a25      	ldr	r2, [pc, #148]	@ (8003678 <TIM_Base_SetConfig+0xc0>)
 80035e4:	4293      	cmp	r3, r2
 80035e6:	d108      	bne.n	80035fa <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	685b      	ldr	r3, [r3, #4]
 80035f4:	68fa      	ldr	r2, [r7, #12]
 80035f6:	4313      	orrs	r3, r2
 80035f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80035fa:	687b      	ldr	r3, [r7, #4]
 80035fc:	4a1c      	ldr	r2, [pc, #112]	@ (8003670 <TIM_Base_SetConfig+0xb8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d00b      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003608:	d007      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	4a19      	ldr	r2, [pc, #100]	@ (8003674 <TIM_Base_SetConfig+0xbc>)
 800360e:	4293      	cmp	r3, r2
 8003610:	d003      	beq.n	800361a <TIM_Base_SetConfig+0x62>
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	4a18      	ldr	r2, [pc, #96]	@ (8003678 <TIM_Base_SetConfig+0xc0>)
 8003616:	4293      	cmp	r3, r2
 8003618:	d108      	bne.n	800362c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003620:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003622:	683b      	ldr	r3, [r7, #0]
 8003624:	68db      	ldr	r3, [r3, #12]
 8003626:	68fa      	ldr	r2, [r7, #12]
 8003628:	4313      	orrs	r3, r2
 800362a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003632:	683b      	ldr	r3, [r7, #0]
 8003634:	695b      	ldr	r3, [r3, #20]
 8003636:	4313      	orrs	r3, r2
 8003638:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800363a:	687b      	ldr	r3, [r7, #4]
 800363c:	68fa      	ldr	r2, [r7, #12]
 800363e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003640:	683b      	ldr	r3, [r7, #0]
 8003642:	689a      	ldr	r2, [r3, #8]
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003650:	687b      	ldr	r3, [r7, #4]
 8003652:	4a07      	ldr	r2, [pc, #28]	@ (8003670 <TIM_Base_SetConfig+0xb8>)
 8003654:	4293      	cmp	r3, r2
 8003656:	d103      	bne.n	8003660 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	691a      	ldr	r2, [r3, #16]
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	2201      	movs	r2, #1
 8003664:	615a      	str	r2, [r3, #20]
}
 8003666:	bf00      	nop
 8003668:	3714      	adds	r7, #20
 800366a:	46bd      	mov	sp, r7
 800366c:	bc80      	pop	{r7}
 800366e:	4770      	bx	lr
 8003670:	40012c00 	.word	0x40012c00
 8003674:	40000400 	.word	0x40000400
 8003678:	40000800 	.word	0x40000800

0800367c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800367c:	b480      	push	{r7}
 800367e:	b087      	sub	sp, #28
 8003680:	af00      	add	r7, sp, #0
 8003682:	6078      	str	r0, [r7, #4]
 8003684:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	6a1b      	ldr	r3, [r3, #32]
 800368a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	6a1b      	ldr	r3, [r3, #32]
 8003690:	f023 0201 	bic.w	r2, r3, #1
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	685b      	ldr	r3, [r3, #4]
 800369c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	699b      	ldr	r3, [r3, #24]
 80036a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80036a4:	68fb      	ldr	r3, [r7, #12]
 80036a6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80036aa:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	f023 0303 	bic.w	r3, r3, #3
 80036b2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80036b4:	683b      	ldr	r3, [r7, #0]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	68fa      	ldr	r2, [r7, #12]
 80036ba:	4313      	orrs	r3, r2
 80036bc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80036be:	697b      	ldr	r3, [r7, #20]
 80036c0:	f023 0302 	bic.w	r3, r3, #2
 80036c4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80036c6:	683b      	ldr	r3, [r7, #0]
 80036c8:	689b      	ldr	r3, [r3, #8]
 80036ca:	697a      	ldr	r2, [r7, #20]
 80036cc:	4313      	orrs	r3, r2
 80036ce:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	4a1c      	ldr	r2, [pc, #112]	@ (8003744 <TIM_OC1_SetConfig+0xc8>)
 80036d4:	4293      	cmp	r3, r2
 80036d6:	d10c      	bne.n	80036f2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80036d8:	697b      	ldr	r3, [r7, #20]
 80036da:	f023 0308 	bic.w	r3, r3, #8
 80036de:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80036e0:	683b      	ldr	r3, [r7, #0]
 80036e2:	68db      	ldr	r3, [r3, #12]
 80036e4:	697a      	ldr	r2, [r7, #20]
 80036e6:	4313      	orrs	r3, r2
 80036e8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80036ea:	697b      	ldr	r3, [r7, #20]
 80036ec:	f023 0304 	bic.w	r3, r3, #4
 80036f0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80036f2:	687b      	ldr	r3, [r7, #4]
 80036f4:	4a13      	ldr	r2, [pc, #76]	@ (8003744 <TIM_OC1_SetConfig+0xc8>)
 80036f6:	4293      	cmp	r3, r2
 80036f8:	d111      	bne.n	800371e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80036fa:	693b      	ldr	r3, [r7, #16]
 80036fc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003700:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003702:	693b      	ldr	r3, [r7, #16]
 8003704:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003708:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800370a:	683b      	ldr	r3, [r7, #0]
 800370c:	695b      	ldr	r3, [r3, #20]
 800370e:	693a      	ldr	r2, [r7, #16]
 8003710:	4313      	orrs	r3, r2
 8003712:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003714:	683b      	ldr	r3, [r7, #0]
 8003716:	699b      	ldr	r3, [r3, #24]
 8003718:	693a      	ldr	r2, [r7, #16]
 800371a:	4313      	orrs	r3, r2
 800371c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	693a      	ldr	r2, [r7, #16]
 8003722:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	68fa      	ldr	r2, [r7, #12]
 8003728:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800372a:	683b      	ldr	r3, [r7, #0]
 800372c:	685a      	ldr	r2, [r3, #4]
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	697a      	ldr	r2, [r7, #20]
 8003736:	621a      	str	r2, [r3, #32]
}
 8003738:	bf00      	nop
 800373a:	371c      	adds	r7, #28
 800373c:	46bd      	mov	sp, r7
 800373e:	bc80      	pop	{r7}
 8003740:	4770      	bx	lr
 8003742:	bf00      	nop
 8003744:	40012c00 	.word	0x40012c00

08003748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003748:	b480      	push	{r7}
 800374a:	b087      	sub	sp, #28
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
 8003750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003752:	687b      	ldr	r3, [r7, #4]
 8003754:	6a1b      	ldr	r3, [r3, #32]
 8003756:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	6a1b      	ldr	r3, [r3, #32]
 800375c:	f023 0210 	bic.w	r2, r3, #16
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	685b      	ldr	r3, [r3, #4]
 8003768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	699b      	ldr	r3, [r3, #24]
 800376e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8003776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8003778:	68fb      	ldr	r3, [r7, #12]
 800377a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800377e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	021b      	lsls	r3, r3, #8
 8003786:	68fa      	ldr	r2, [r7, #12]
 8003788:	4313      	orrs	r3, r2
 800378a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800378c:	697b      	ldr	r3, [r7, #20]
 800378e:	f023 0320 	bic.w	r3, r3, #32
 8003792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003794:	683b      	ldr	r3, [r7, #0]
 8003796:	689b      	ldr	r3, [r3, #8]
 8003798:	011b      	lsls	r3, r3, #4
 800379a:	697a      	ldr	r2, [r7, #20]
 800379c:	4313      	orrs	r3, r2
 800379e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	4a1d      	ldr	r2, [pc, #116]	@ (8003818 <TIM_OC2_SetConfig+0xd0>)
 80037a4:	4293      	cmp	r3, r2
 80037a6:	d10d      	bne.n	80037c4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80037a8:	697b      	ldr	r3, [r7, #20]
 80037aa:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80037ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80037b0:	683b      	ldr	r3, [r7, #0]
 80037b2:	68db      	ldr	r3, [r3, #12]
 80037b4:	011b      	lsls	r3, r3, #4
 80037b6:	697a      	ldr	r2, [r7, #20]
 80037b8:	4313      	orrs	r3, r2
 80037ba:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80037bc:	697b      	ldr	r3, [r7, #20]
 80037be:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80037c2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	4a14      	ldr	r2, [pc, #80]	@ (8003818 <TIM_OC2_SetConfig+0xd0>)
 80037c8:	4293      	cmp	r3, r2
 80037ca:	d113      	bne.n	80037f4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80037cc:	693b      	ldr	r3, [r7, #16]
 80037ce:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80037d2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80037d4:	693b      	ldr	r3, [r7, #16]
 80037d6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80037da:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80037dc:	683b      	ldr	r3, [r7, #0]
 80037de:	695b      	ldr	r3, [r3, #20]
 80037e0:	009b      	lsls	r3, r3, #2
 80037e2:	693a      	ldr	r2, [r7, #16]
 80037e4:	4313      	orrs	r3, r2
 80037e6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80037e8:	683b      	ldr	r3, [r7, #0]
 80037ea:	699b      	ldr	r3, [r3, #24]
 80037ec:	009b      	lsls	r3, r3, #2
 80037ee:	693a      	ldr	r2, [r7, #16]
 80037f0:	4313      	orrs	r3, r2
 80037f2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	693a      	ldr	r2, [r7, #16]
 80037f8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	68fa      	ldr	r2, [r7, #12]
 80037fe:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003800:	683b      	ldr	r3, [r7, #0]
 8003802:	685a      	ldr	r2, [r3, #4]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	697a      	ldr	r2, [r7, #20]
 800380c:	621a      	str	r2, [r3, #32]
}
 800380e:	bf00      	nop
 8003810:	371c      	adds	r7, #28
 8003812:	46bd      	mov	sp, r7
 8003814:	bc80      	pop	{r7}
 8003816:	4770      	bx	lr
 8003818:	40012c00 	.word	0x40012c00

0800381c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800381c:	b480      	push	{r7}
 800381e:	b087      	sub	sp, #28
 8003820:	af00      	add	r7, sp, #0
 8003822:	6078      	str	r0, [r7, #4]
 8003824:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	6a1b      	ldr	r3, [r3, #32]
 800382a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	6a1b      	ldr	r3, [r3, #32]
 8003830:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	685b      	ldr	r3, [r3, #4]
 800383c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	69db      	ldr	r3, [r3, #28]
 8003842:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800384a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	f023 0303 	bic.w	r3, r3, #3
 8003852:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	68fa      	ldr	r2, [r7, #12]
 800385a:	4313      	orrs	r3, r2
 800385c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800385e:	697b      	ldr	r3, [r7, #20]
 8003860:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003864:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8003866:	683b      	ldr	r3, [r7, #0]
 8003868:	689b      	ldr	r3, [r3, #8]
 800386a:	021b      	lsls	r3, r3, #8
 800386c:	697a      	ldr	r2, [r7, #20]
 800386e:	4313      	orrs	r3, r2
 8003870:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	4a1d      	ldr	r2, [pc, #116]	@ (80038ec <TIM_OC3_SetConfig+0xd0>)
 8003876:	4293      	cmp	r3, r2
 8003878:	d10d      	bne.n	8003896 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800387a:	697b      	ldr	r3, [r7, #20]
 800387c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8003880:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8003882:	683b      	ldr	r3, [r7, #0]
 8003884:	68db      	ldr	r3, [r3, #12]
 8003886:	021b      	lsls	r3, r3, #8
 8003888:	697a      	ldr	r2, [r7, #20]
 800388a:	4313      	orrs	r3, r2
 800388c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003894:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	4a14      	ldr	r2, [pc, #80]	@ (80038ec <TIM_OC3_SetConfig+0xd0>)
 800389a:	4293      	cmp	r3, r2
 800389c:	d113      	bne.n	80038c6 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800389e:	693b      	ldr	r3, [r7, #16]
 80038a0:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80038a4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80038a6:	693b      	ldr	r3, [r7, #16]
 80038a8:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80038ac:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	695b      	ldr	r3, [r3, #20]
 80038b2:	011b      	lsls	r3, r3, #4
 80038b4:	693a      	ldr	r2, [r7, #16]
 80038b6:	4313      	orrs	r3, r2
 80038b8:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80038ba:	683b      	ldr	r3, [r7, #0]
 80038bc:	699b      	ldr	r3, [r3, #24]
 80038be:	011b      	lsls	r3, r3, #4
 80038c0:	693a      	ldr	r2, [r7, #16]
 80038c2:	4313      	orrs	r3, r2
 80038c4:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	693a      	ldr	r2, [r7, #16]
 80038ca:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80038cc:	687b      	ldr	r3, [r7, #4]
 80038ce:	68fa      	ldr	r2, [r7, #12]
 80038d0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80038d2:	683b      	ldr	r3, [r7, #0]
 80038d4:	685a      	ldr	r2, [r3, #4]
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80038da:	687b      	ldr	r3, [r7, #4]
 80038dc:	697a      	ldr	r2, [r7, #20]
 80038de:	621a      	str	r2, [r3, #32]
}
 80038e0:	bf00      	nop
 80038e2:	371c      	adds	r7, #28
 80038e4:	46bd      	mov	sp, r7
 80038e6:	bc80      	pop	{r7}
 80038e8:	4770      	bx	lr
 80038ea:	bf00      	nop
 80038ec:	40012c00 	.word	0x40012c00

080038f0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80038f0:	b480      	push	{r7}
 80038f2:	b087      	sub	sp, #28
 80038f4:	af00      	add	r7, sp, #0
 80038f6:	6078      	str	r0, [r7, #4]
 80038f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	6a1b      	ldr	r3, [r3, #32]
 80038fe:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	6a1b      	ldr	r3, [r3, #32]
 8003904:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800390c:	687b      	ldr	r3, [r7, #4]
 800390e:	685b      	ldr	r3, [r3, #4]
 8003910:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	69db      	ldr	r3, [r3, #28]
 8003916:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800391e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003920:	68fb      	ldr	r3, [r7, #12]
 8003922:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003926:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	021b      	lsls	r3, r3, #8
 800392e:	68fa      	ldr	r2, [r7, #12]
 8003930:	4313      	orrs	r3, r2
 8003932:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8003934:	693b      	ldr	r3, [r7, #16]
 8003936:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800393a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800393c:	683b      	ldr	r3, [r7, #0]
 800393e:	689b      	ldr	r3, [r3, #8]
 8003940:	031b      	lsls	r3, r3, #12
 8003942:	693a      	ldr	r2, [r7, #16]
 8003944:	4313      	orrs	r3, r2
 8003946:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	4a0f      	ldr	r2, [pc, #60]	@ (8003988 <TIM_OC4_SetConfig+0x98>)
 800394c:	4293      	cmp	r3, r2
 800394e:	d109      	bne.n	8003964 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8003950:	697b      	ldr	r3, [r7, #20]
 8003952:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8003956:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8003958:	683b      	ldr	r3, [r7, #0]
 800395a:	695b      	ldr	r3, [r3, #20]
 800395c:	019b      	lsls	r3, r3, #6
 800395e:	697a      	ldr	r2, [r7, #20]
 8003960:	4313      	orrs	r3, r2
 8003962:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	697a      	ldr	r2, [r7, #20]
 8003968:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800396a:	687b      	ldr	r3, [r7, #4]
 800396c:	68fa      	ldr	r2, [r7, #12]
 800396e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8003970:	683b      	ldr	r3, [r7, #0]
 8003972:	685a      	ldr	r2, [r3, #4]
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	693a      	ldr	r2, [r7, #16]
 800397c:	621a      	str	r2, [r3, #32]
}
 800397e:	bf00      	nop
 8003980:	371c      	adds	r7, #28
 8003982:	46bd      	mov	sp, r7
 8003984:	bc80      	pop	{r7}
 8003986:	4770      	bx	lr
 8003988:	40012c00 	.word	0x40012c00

0800398c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800398c:	b480      	push	{r7}
 800398e:	b087      	sub	sp, #28
 8003990:	af00      	add	r7, sp, #0
 8003992:	60f8      	str	r0, [r7, #12]
 8003994:	60b9      	str	r1, [r7, #8]
 8003996:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	6a1b      	ldr	r3, [r3, #32]
 800399c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800399e:	68fb      	ldr	r3, [r7, #12]
 80039a0:	6a1b      	ldr	r3, [r3, #32]
 80039a2:	f023 0201 	bic.w	r2, r3, #1
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	699b      	ldr	r3, [r3, #24]
 80039ae:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80039b0:	693b      	ldr	r3, [r7, #16]
 80039b2:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80039b6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	011b      	lsls	r3, r3, #4
 80039bc:	693a      	ldr	r2, [r7, #16]
 80039be:	4313      	orrs	r3, r2
 80039c0:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80039c2:	697b      	ldr	r3, [r7, #20]
 80039c4:	f023 030a 	bic.w	r3, r3, #10
 80039c8:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80039ca:	697a      	ldr	r2, [r7, #20]
 80039cc:	68bb      	ldr	r3, [r7, #8]
 80039ce:	4313      	orrs	r3, r2
 80039d0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	693a      	ldr	r2, [r7, #16]
 80039d6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	697a      	ldr	r2, [r7, #20]
 80039dc:	621a      	str	r2, [r3, #32]
}
 80039de:	bf00      	nop
 80039e0:	371c      	adds	r7, #28
 80039e2:	46bd      	mov	sp, r7
 80039e4:	bc80      	pop	{r7}
 80039e6:	4770      	bx	lr

080039e8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b087      	sub	sp, #28
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	60f8      	str	r0, [r7, #12]
 80039f0:	60b9      	str	r1, [r7, #8]
 80039f2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	6a1b      	ldr	r3, [r3, #32]
 80039f8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	6a1b      	ldr	r3, [r3, #32]
 80039fe:	f023 0210 	bic.w	r2, r3, #16
 8003a02:	68fb      	ldr	r3, [r7, #12]
 8003a04:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	699b      	ldr	r3, [r3, #24]
 8003a0a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003a0c:	693b      	ldr	r3, [r7, #16]
 8003a0e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003a12:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	031b      	lsls	r3, r3, #12
 8003a18:	693a      	ldr	r2, [r7, #16]
 8003a1a:	4313      	orrs	r3, r2
 8003a1c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003a1e:	697b      	ldr	r3, [r7, #20]
 8003a20:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003a24:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003a26:	68bb      	ldr	r3, [r7, #8]
 8003a28:	011b      	lsls	r3, r3, #4
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	4313      	orrs	r3, r2
 8003a2e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003a30:	68fb      	ldr	r3, [r7, #12]
 8003a32:	693a      	ldr	r2, [r7, #16]
 8003a34:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003a36:	68fb      	ldr	r3, [r7, #12]
 8003a38:	697a      	ldr	r2, [r7, #20]
 8003a3a:	621a      	str	r2, [r3, #32]
}
 8003a3c:	bf00      	nop
 8003a3e:	371c      	adds	r7, #28
 8003a40:	46bd      	mov	sp, r7
 8003a42:	bc80      	pop	{r7}
 8003a44:	4770      	bx	lr

08003a46 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003a46:	b480      	push	{r7}
 8003a48:	b085      	sub	sp, #20
 8003a4a:	af00      	add	r7, sp, #0
 8003a4c:	6078      	str	r0, [r7, #4]
 8003a4e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	689b      	ldr	r3, [r3, #8]
 8003a54:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a5c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003a5e:	683a      	ldr	r2, [r7, #0]
 8003a60:	68fb      	ldr	r3, [r7, #12]
 8003a62:	4313      	orrs	r3, r2
 8003a64:	f043 0307 	orr.w	r3, r3, #7
 8003a68:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	68fa      	ldr	r2, [r7, #12]
 8003a6e:	609a      	str	r2, [r3, #8]
}
 8003a70:	bf00      	nop
 8003a72:	3714      	adds	r7, #20
 8003a74:	46bd      	mov	sp, r7
 8003a76:	bc80      	pop	{r7}
 8003a78:	4770      	bx	lr

08003a7a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	b087      	sub	sp, #28
 8003a7e:	af00      	add	r7, sp, #0
 8003a80:	60f8      	str	r0, [r7, #12]
 8003a82:	60b9      	str	r1, [r7, #8]
 8003a84:	607a      	str	r2, [r7, #4]
 8003a86:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	689b      	ldr	r3, [r3, #8]
 8003a8c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003a8e:	697b      	ldr	r3, [r7, #20]
 8003a90:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003a94:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003a96:	683b      	ldr	r3, [r7, #0]
 8003a98:	021a      	lsls	r2, r3, #8
 8003a9a:	687b      	ldr	r3, [r7, #4]
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	68bb      	ldr	r3, [r7, #8]
 8003aa0:	4313      	orrs	r3, r2
 8003aa2:	697a      	ldr	r2, [r7, #20]
 8003aa4:	4313      	orrs	r3, r2
 8003aa6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	697a      	ldr	r2, [r7, #20]
 8003aac:	609a      	str	r2, [r3, #8]
}
 8003aae:	bf00      	nop
 8003ab0:	371c      	adds	r7, #28
 8003ab2:	46bd      	mov	sp, r7
 8003ab4:	bc80      	pop	{r7}
 8003ab6:	4770      	bx	lr

08003ab8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003ab8:	b480      	push	{r7}
 8003aba:	b087      	sub	sp, #28
 8003abc:	af00      	add	r7, sp, #0
 8003abe:	60f8      	str	r0, [r7, #12]
 8003ac0:	60b9      	str	r1, [r7, #8]
 8003ac2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003ac4:	68bb      	ldr	r3, [r7, #8]
 8003ac6:	f003 031f 	and.w	r3, r3, #31
 8003aca:	2201      	movs	r2, #1
 8003acc:	fa02 f303 	lsl.w	r3, r2, r3
 8003ad0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003ad2:	68fb      	ldr	r3, [r7, #12]
 8003ad4:	6a1a      	ldr	r2, [r3, #32]
 8003ad6:	697b      	ldr	r3, [r7, #20]
 8003ad8:	43db      	mvns	r3, r3
 8003ada:	401a      	ands	r2, r3
 8003adc:	68fb      	ldr	r3, [r7, #12]
 8003ade:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	6a1a      	ldr	r2, [r3, #32]
 8003ae4:	68bb      	ldr	r3, [r7, #8]
 8003ae6:	f003 031f 	and.w	r3, r3, #31
 8003aea:	6879      	ldr	r1, [r7, #4]
 8003aec:	fa01 f303 	lsl.w	r3, r1, r3
 8003af0:	431a      	orrs	r2, r3
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	621a      	str	r2, [r3, #32]
}
 8003af6:	bf00      	nop
 8003af8:	371c      	adds	r7, #28
 8003afa:	46bd      	mov	sp, r7
 8003afc:	bc80      	pop	{r7}
 8003afe:	4770      	bx	lr

08003b00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003b00:	b480      	push	{r7}
 8003b02:	b085      	sub	sp, #20
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
 8003b08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b10:	2b01      	cmp	r3, #1
 8003b12:	d101      	bne.n	8003b18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003b14:	2302      	movs	r3, #2
 8003b16:	e046      	b.n	8003ba6 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	2201      	movs	r2, #1
 8003b1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	2202      	movs	r2, #2
 8003b24:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	685b      	ldr	r3, [r3, #4]
 8003b2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	689b      	ldr	r3, [r3, #8]
 8003b36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003b38:	68fb      	ldr	r3, [r7, #12]
 8003b3a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003b3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003b40:	683b      	ldr	r3, [r7, #0]
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	68fa      	ldr	r2, [r7, #12]
 8003b46:	4313      	orrs	r3, r2
 8003b48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	681b      	ldr	r3, [r3, #0]
 8003b4e:	68fa      	ldr	r2, [r7, #12]
 8003b50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	681b      	ldr	r3, [r3, #0]
 8003b56:	4a16      	ldr	r2, [pc, #88]	@ (8003bb0 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8003b58:	4293      	cmp	r3, r2
 8003b5a:	d00e      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b5c:	687b      	ldr	r3, [r7, #4]
 8003b5e:	681b      	ldr	r3, [r3, #0]
 8003b60:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003b64:	d009      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	4a12      	ldr	r2, [pc, #72]	@ (8003bb4 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8003b6c:	4293      	cmp	r3, r2
 8003b6e:	d004      	beq.n	8003b7a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	4a10      	ldr	r2, [pc, #64]	@ (8003bb8 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8003b76:	4293      	cmp	r3, r2
 8003b78:	d10c      	bne.n	8003b94 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003b7a:	68bb      	ldr	r3, [r7, #8]
 8003b7c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003b80:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003b82:	683b      	ldr	r3, [r7, #0]
 8003b84:	685b      	ldr	r3, [r3, #4]
 8003b86:	68ba      	ldr	r2, [r7, #8]
 8003b88:	4313      	orrs	r3, r2
 8003b8a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	68ba      	ldr	r2, [r7, #8]
 8003b92:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	2201      	movs	r2, #1
 8003b98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	2200      	movs	r2, #0
 8003ba0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003ba4:	2300      	movs	r3, #0
}
 8003ba6:	4618      	mov	r0, r3
 8003ba8:	3714      	adds	r7, #20
 8003baa:	46bd      	mov	sp, r7
 8003bac:	bc80      	pop	{r7}
 8003bae:	4770      	bx	lr
 8003bb0:	40012c00 	.word	0x40012c00
 8003bb4:	40000400 	.word	0x40000400
 8003bb8:	40000800 	.word	0x40000800

08003bbc <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003bbc:	b480      	push	{r7}
 8003bbe:	b083      	sub	sp, #12
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003bc4:	bf00      	nop
 8003bc6:	370c      	adds	r7, #12
 8003bc8:	46bd      	mov	sp, r7
 8003bca:	bc80      	pop	{r7}
 8003bcc:	4770      	bx	lr

08003bce <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003bce:	b480      	push	{r7}
 8003bd0:	b083      	sub	sp, #12
 8003bd2:	af00      	add	r7, sp, #0
 8003bd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003bd6:	bf00      	nop
 8003bd8:	370c      	adds	r7, #12
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	bc80      	pop	{r7}
 8003bde:	4770      	bx	lr

08003be0 <exit>:
 8003be0:	b508      	push	{r3, lr}
 8003be2:	4b06      	ldr	r3, [pc, #24]	@ (8003bfc <exit+0x1c>)
 8003be4:	4604      	mov	r4, r0
 8003be6:	b113      	cbz	r3, 8003bee <exit+0xe>
 8003be8:	2100      	movs	r1, #0
 8003bea:	f3af 8000 	nop.w
 8003bee:	4b04      	ldr	r3, [pc, #16]	@ (8003c00 <exit+0x20>)
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	b103      	cbz	r3, 8003bf6 <exit+0x16>
 8003bf4:	4798      	blx	r3
 8003bf6:	4620      	mov	r0, r4
 8003bf8:	f7fe f890 	bl	8001d1c <_exit>
 8003bfc:	00000000 	.word	0x00000000
 8003c00:	20001344 	.word	0x20001344

08003c04 <malloc>:
 8003c04:	4b02      	ldr	r3, [pc, #8]	@ (8003c10 <malloc+0xc>)
 8003c06:	4601      	mov	r1, r0
 8003c08:	6818      	ldr	r0, [r3, #0]
 8003c0a:	f000 b82d 	b.w	8003c68 <_malloc_r>
 8003c0e:	bf00      	nop
 8003c10:	2000004c 	.word	0x2000004c

08003c14 <free>:
 8003c14:	4b02      	ldr	r3, [pc, #8]	@ (8003c20 <free+0xc>)
 8003c16:	4601      	mov	r1, r0
 8003c18:	6818      	ldr	r0, [r3, #0]
 8003c1a:	f000 b8f5 	b.w	8003e08 <_free_r>
 8003c1e:	bf00      	nop
 8003c20:	2000004c 	.word	0x2000004c

08003c24 <sbrk_aligned>:
 8003c24:	b570      	push	{r4, r5, r6, lr}
 8003c26:	4e0f      	ldr	r6, [pc, #60]	@ (8003c64 <sbrk_aligned+0x40>)
 8003c28:	460c      	mov	r4, r1
 8003c2a:	6831      	ldr	r1, [r6, #0]
 8003c2c:	4605      	mov	r5, r0
 8003c2e:	b911      	cbnz	r1, 8003c36 <sbrk_aligned+0x12>
 8003c30:	f000 f8ae 	bl	8003d90 <_sbrk_r>
 8003c34:	6030      	str	r0, [r6, #0]
 8003c36:	4621      	mov	r1, r4
 8003c38:	4628      	mov	r0, r5
 8003c3a:	f000 f8a9 	bl	8003d90 <_sbrk_r>
 8003c3e:	1c43      	adds	r3, r0, #1
 8003c40:	d103      	bne.n	8003c4a <sbrk_aligned+0x26>
 8003c42:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8003c46:	4620      	mov	r0, r4
 8003c48:	bd70      	pop	{r4, r5, r6, pc}
 8003c4a:	1cc4      	adds	r4, r0, #3
 8003c4c:	f024 0403 	bic.w	r4, r4, #3
 8003c50:	42a0      	cmp	r0, r4
 8003c52:	d0f8      	beq.n	8003c46 <sbrk_aligned+0x22>
 8003c54:	1a21      	subs	r1, r4, r0
 8003c56:	4628      	mov	r0, r5
 8003c58:	f000 f89a 	bl	8003d90 <_sbrk_r>
 8003c5c:	3001      	adds	r0, #1
 8003c5e:	d1f2      	bne.n	8003c46 <sbrk_aligned+0x22>
 8003c60:	e7ef      	b.n	8003c42 <sbrk_aligned+0x1e>
 8003c62:	bf00      	nop
 8003c64:	20001204 	.word	0x20001204

08003c68 <_malloc_r>:
 8003c68:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003c6c:	1ccd      	adds	r5, r1, #3
 8003c6e:	f025 0503 	bic.w	r5, r5, #3
 8003c72:	3508      	adds	r5, #8
 8003c74:	2d0c      	cmp	r5, #12
 8003c76:	bf38      	it	cc
 8003c78:	250c      	movcc	r5, #12
 8003c7a:	2d00      	cmp	r5, #0
 8003c7c:	4606      	mov	r6, r0
 8003c7e:	db01      	blt.n	8003c84 <_malloc_r+0x1c>
 8003c80:	42a9      	cmp	r1, r5
 8003c82:	d904      	bls.n	8003c8e <_malloc_r+0x26>
 8003c84:	230c      	movs	r3, #12
 8003c86:	6033      	str	r3, [r6, #0]
 8003c88:	2000      	movs	r0, #0
 8003c8a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8003c8e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003d64 <_malloc_r+0xfc>
 8003c92:	f000 f869 	bl	8003d68 <__malloc_lock>
 8003c96:	f8d8 3000 	ldr.w	r3, [r8]
 8003c9a:	461c      	mov	r4, r3
 8003c9c:	bb44      	cbnz	r4, 8003cf0 <_malloc_r+0x88>
 8003c9e:	4629      	mov	r1, r5
 8003ca0:	4630      	mov	r0, r6
 8003ca2:	f7ff ffbf 	bl	8003c24 <sbrk_aligned>
 8003ca6:	1c43      	adds	r3, r0, #1
 8003ca8:	4604      	mov	r4, r0
 8003caa:	d158      	bne.n	8003d5e <_malloc_r+0xf6>
 8003cac:	f8d8 4000 	ldr.w	r4, [r8]
 8003cb0:	4627      	mov	r7, r4
 8003cb2:	2f00      	cmp	r7, #0
 8003cb4:	d143      	bne.n	8003d3e <_malloc_r+0xd6>
 8003cb6:	2c00      	cmp	r4, #0
 8003cb8:	d04b      	beq.n	8003d52 <_malloc_r+0xea>
 8003cba:	6823      	ldr	r3, [r4, #0]
 8003cbc:	4639      	mov	r1, r7
 8003cbe:	4630      	mov	r0, r6
 8003cc0:	eb04 0903 	add.w	r9, r4, r3
 8003cc4:	f000 f864 	bl	8003d90 <_sbrk_r>
 8003cc8:	4581      	cmp	r9, r0
 8003cca:	d142      	bne.n	8003d52 <_malloc_r+0xea>
 8003ccc:	6821      	ldr	r1, [r4, #0]
 8003cce:	4630      	mov	r0, r6
 8003cd0:	1a6d      	subs	r5, r5, r1
 8003cd2:	4629      	mov	r1, r5
 8003cd4:	f7ff ffa6 	bl	8003c24 <sbrk_aligned>
 8003cd8:	3001      	adds	r0, #1
 8003cda:	d03a      	beq.n	8003d52 <_malloc_r+0xea>
 8003cdc:	6823      	ldr	r3, [r4, #0]
 8003cde:	442b      	add	r3, r5
 8003ce0:	6023      	str	r3, [r4, #0]
 8003ce2:	f8d8 3000 	ldr.w	r3, [r8]
 8003ce6:	685a      	ldr	r2, [r3, #4]
 8003ce8:	bb62      	cbnz	r2, 8003d44 <_malloc_r+0xdc>
 8003cea:	f8c8 7000 	str.w	r7, [r8]
 8003cee:	e00f      	b.n	8003d10 <_malloc_r+0xa8>
 8003cf0:	6822      	ldr	r2, [r4, #0]
 8003cf2:	1b52      	subs	r2, r2, r5
 8003cf4:	d420      	bmi.n	8003d38 <_malloc_r+0xd0>
 8003cf6:	2a0b      	cmp	r2, #11
 8003cf8:	d917      	bls.n	8003d2a <_malloc_r+0xc2>
 8003cfa:	1961      	adds	r1, r4, r5
 8003cfc:	42a3      	cmp	r3, r4
 8003cfe:	6025      	str	r5, [r4, #0]
 8003d00:	bf18      	it	ne
 8003d02:	6059      	strne	r1, [r3, #4]
 8003d04:	6863      	ldr	r3, [r4, #4]
 8003d06:	bf08      	it	eq
 8003d08:	f8c8 1000 	streq.w	r1, [r8]
 8003d0c:	5162      	str	r2, [r4, r5]
 8003d0e:	604b      	str	r3, [r1, #4]
 8003d10:	4630      	mov	r0, r6
 8003d12:	f000 f82f 	bl	8003d74 <__malloc_unlock>
 8003d16:	f104 000b 	add.w	r0, r4, #11
 8003d1a:	1d23      	adds	r3, r4, #4
 8003d1c:	f020 0007 	bic.w	r0, r0, #7
 8003d20:	1ac2      	subs	r2, r0, r3
 8003d22:	bf1c      	itt	ne
 8003d24:	1a1b      	subne	r3, r3, r0
 8003d26:	50a3      	strne	r3, [r4, r2]
 8003d28:	e7af      	b.n	8003c8a <_malloc_r+0x22>
 8003d2a:	6862      	ldr	r2, [r4, #4]
 8003d2c:	42a3      	cmp	r3, r4
 8003d2e:	bf0c      	ite	eq
 8003d30:	f8c8 2000 	streq.w	r2, [r8]
 8003d34:	605a      	strne	r2, [r3, #4]
 8003d36:	e7eb      	b.n	8003d10 <_malloc_r+0xa8>
 8003d38:	4623      	mov	r3, r4
 8003d3a:	6864      	ldr	r4, [r4, #4]
 8003d3c:	e7ae      	b.n	8003c9c <_malloc_r+0x34>
 8003d3e:	463c      	mov	r4, r7
 8003d40:	687f      	ldr	r7, [r7, #4]
 8003d42:	e7b6      	b.n	8003cb2 <_malloc_r+0x4a>
 8003d44:	461a      	mov	r2, r3
 8003d46:	685b      	ldr	r3, [r3, #4]
 8003d48:	42a3      	cmp	r3, r4
 8003d4a:	d1fb      	bne.n	8003d44 <_malloc_r+0xdc>
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	6053      	str	r3, [r2, #4]
 8003d50:	e7de      	b.n	8003d10 <_malloc_r+0xa8>
 8003d52:	230c      	movs	r3, #12
 8003d54:	4630      	mov	r0, r6
 8003d56:	6033      	str	r3, [r6, #0]
 8003d58:	f000 f80c 	bl	8003d74 <__malloc_unlock>
 8003d5c:	e794      	b.n	8003c88 <_malloc_r+0x20>
 8003d5e:	6005      	str	r5, [r0, #0]
 8003d60:	e7d6      	b.n	8003d10 <_malloc_r+0xa8>
 8003d62:	bf00      	nop
 8003d64:	20001208 	.word	0x20001208

08003d68 <__malloc_lock>:
 8003d68:	4801      	ldr	r0, [pc, #4]	@ (8003d70 <__malloc_lock+0x8>)
 8003d6a:	f000 b84b 	b.w	8003e04 <__retarget_lock_acquire_recursive>
 8003d6e:	bf00      	nop
 8003d70:	2000134c 	.word	0x2000134c

08003d74 <__malloc_unlock>:
 8003d74:	4801      	ldr	r0, [pc, #4]	@ (8003d7c <__malloc_unlock+0x8>)
 8003d76:	f000 b846 	b.w	8003e06 <__retarget_lock_release_recursive>
 8003d7a:	bf00      	nop
 8003d7c:	2000134c 	.word	0x2000134c

08003d80 <memset>:
 8003d80:	4603      	mov	r3, r0
 8003d82:	4402      	add	r2, r0
 8003d84:	4293      	cmp	r3, r2
 8003d86:	d100      	bne.n	8003d8a <memset+0xa>
 8003d88:	4770      	bx	lr
 8003d8a:	f803 1b01 	strb.w	r1, [r3], #1
 8003d8e:	e7f9      	b.n	8003d84 <memset+0x4>

08003d90 <_sbrk_r>:
 8003d90:	b538      	push	{r3, r4, r5, lr}
 8003d92:	2300      	movs	r3, #0
 8003d94:	4d05      	ldr	r5, [pc, #20]	@ (8003dac <_sbrk_r+0x1c>)
 8003d96:	4604      	mov	r4, r0
 8003d98:	4608      	mov	r0, r1
 8003d9a:	602b      	str	r3, [r5, #0]
 8003d9c:	f7fd ffca 	bl	8001d34 <_sbrk>
 8003da0:	1c43      	adds	r3, r0, #1
 8003da2:	d102      	bne.n	8003daa <_sbrk_r+0x1a>
 8003da4:	682b      	ldr	r3, [r5, #0]
 8003da6:	b103      	cbz	r3, 8003daa <_sbrk_r+0x1a>
 8003da8:	6023      	str	r3, [r4, #0]
 8003daa:	bd38      	pop	{r3, r4, r5, pc}
 8003dac:	20001348 	.word	0x20001348

08003db0 <__errno>:
 8003db0:	4b01      	ldr	r3, [pc, #4]	@ (8003db8 <__errno+0x8>)
 8003db2:	6818      	ldr	r0, [r3, #0]
 8003db4:	4770      	bx	lr
 8003db6:	bf00      	nop
 8003db8:	2000004c 	.word	0x2000004c

08003dbc <__libc_init_array>:
 8003dbc:	b570      	push	{r4, r5, r6, lr}
 8003dbe:	2600      	movs	r6, #0
 8003dc0:	4d0c      	ldr	r5, [pc, #48]	@ (8003df4 <__libc_init_array+0x38>)
 8003dc2:	4c0d      	ldr	r4, [pc, #52]	@ (8003df8 <__libc_init_array+0x3c>)
 8003dc4:	1b64      	subs	r4, r4, r5
 8003dc6:	10a4      	asrs	r4, r4, #2
 8003dc8:	42a6      	cmp	r6, r4
 8003dca:	d109      	bne.n	8003de0 <__libc_init_array+0x24>
 8003dcc:	f001 f880 	bl	8004ed0 <_init>
 8003dd0:	2600      	movs	r6, #0
 8003dd2:	4d0a      	ldr	r5, [pc, #40]	@ (8003dfc <__libc_init_array+0x40>)
 8003dd4:	4c0a      	ldr	r4, [pc, #40]	@ (8003e00 <__libc_init_array+0x44>)
 8003dd6:	1b64      	subs	r4, r4, r5
 8003dd8:	10a4      	asrs	r4, r4, #2
 8003dda:	42a6      	cmp	r6, r4
 8003ddc:	d105      	bne.n	8003dea <__libc_init_array+0x2e>
 8003dde:	bd70      	pop	{r4, r5, r6, pc}
 8003de0:	f855 3b04 	ldr.w	r3, [r5], #4
 8003de4:	4798      	blx	r3
 8003de6:	3601      	adds	r6, #1
 8003de8:	e7ee      	b.n	8003dc8 <__libc_init_array+0xc>
 8003dea:	f855 3b04 	ldr.w	r3, [r5], #4
 8003dee:	4798      	blx	r3
 8003df0:	3601      	adds	r6, #1
 8003df2:	e7f2      	b.n	8003dda <__libc_init_array+0x1e>
 8003df4:	08005280 	.word	0x08005280
 8003df8:	08005280 	.word	0x08005280
 8003dfc:	08005280 	.word	0x08005280
 8003e00:	08005284 	.word	0x08005284

08003e04 <__retarget_lock_acquire_recursive>:
 8003e04:	4770      	bx	lr

08003e06 <__retarget_lock_release_recursive>:
 8003e06:	4770      	bx	lr

08003e08 <_free_r>:
 8003e08:	b538      	push	{r3, r4, r5, lr}
 8003e0a:	4605      	mov	r5, r0
 8003e0c:	2900      	cmp	r1, #0
 8003e0e:	d040      	beq.n	8003e92 <_free_r+0x8a>
 8003e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003e14:	1f0c      	subs	r4, r1, #4
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	bfb8      	it	lt
 8003e1a:	18e4      	addlt	r4, r4, r3
 8003e1c:	f7ff ffa4 	bl	8003d68 <__malloc_lock>
 8003e20:	4a1c      	ldr	r2, [pc, #112]	@ (8003e94 <_free_r+0x8c>)
 8003e22:	6813      	ldr	r3, [r2, #0]
 8003e24:	b933      	cbnz	r3, 8003e34 <_free_r+0x2c>
 8003e26:	6063      	str	r3, [r4, #4]
 8003e28:	6014      	str	r4, [r2, #0]
 8003e2a:	4628      	mov	r0, r5
 8003e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003e30:	f7ff bfa0 	b.w	8003d74 <__malloc_unlock>
 8003e34:	42a3      	cmp	r3, r4
 8003e36:	d908      	bls.n	8003e4a <_free_r+0x42>
 8003e38:	6820      	ldr	r0, [r4, #0]
 8003e3a:	1821      	adds	r1, r4, r0
 8003e3c:	428b      	cmp	r3, r1
 8003e3e:	bf01      	itttt	eq
 8003e40:	6819      	ldreq	r1, [r3, #0]
 8003e42:	685b      	ldreq	r3, [r3, #4]
 8003e44:	1809      	addeq	r1, r1, r0
 8003e46:	6021      	streq	r1, [r4, #0]
 8003e48:	e7ed      	b.n	8003e26 <_free_r+0x1e>
 8003e4a:	461a      	mov	r2, r3
 8003e4c:	685b      	ldr	r3, [r3, #4]
 8003e4e:	b10b      	cbz	r3, 8003e54 <_free_r+0x4c>
 8003e50:	42a3      	cmp	r3, r4
 8003e52:	d9fa      	bls.n	8003e4a <_free_r+0x42>
 8003e54:	6811      	ldr	r1, [r2, #0]
 8003e56:	1850      	adds	r0, r2, r1
 8003e58:	42a0      	cmp	r0, r4
 8003e5a:	d10b      	bne.n	8003e74 <_free_r+0x6c>
 8003e5c:	6820      	ldr	r0, [r4, #0]
 8003e5e:	4401      	add	r1, r0
 8003e60:	1850      	adds	r0, r2, r1
 8003e62:	4283      	cmp	r3, r0
 8003e64:	6011      	str	r1, [r2, #0]
 8003e66:	d1e0      	bne.n	8003e2a <_free_r+0x22>
 8003e68:	6818      	ldr	r0, [r3, #0]
 8003e6a:	685b      	ldr	r3, [r3, #4]
 8003e6c:	4408      	add	r0, r1
 8003e6e:	6010      	str	r0, [r2, #0]
 8003e70:	6053      	str	r3, [r2, #4]
 8003e72:	e7da      	b.n	8003e2a <_free_r+0x22>
 8003e74:	d902      	bls.n	8003e7c <_free_r+0x74>
 8003e76:	230c      	movs	r3, #12
 8003e78:	602b      	str	r3, [r5, #0]
 8003e7a:	e7d6      	b.n	8003e2a <_free_r+0x22>
 8003e7c:	6820      	ldr	r0, [r4, #0]
 8003e7e:	1821      	adds	r1, r4, r0
 8003e80:	428b      	cmp	r3, r1
 8003e82:	bf01      	itttt	eq
 8003e84:	6819      	ldreq	r1, [r3, #0]
 8003e86:	685b      	ldreq	r3, [r3, #4]
 8003e88:	1809      	addeq	r1, r1, r0
 8003e8a:	6021      	streq	r1, [r4, #0]
 8003e8c:	6063      	str	r3, [r4, #4]
 8003e8e:	6054      	str	r4, [r2, #4]
 8003e90:	e7cb      	b.n	8003e2a <_free_r+0x22>
 8003e92:	bd38      	pop	{r3, r4, r5, pc}
 8003e94:	20001208 	.word	0x20001208

08003e98 <cos>:
 8003e98:	b530      	push	{r4, r5, lr}
 8003e9a:	4d20      	ldr	r5, [pc, #128]	@ (8003f1c <cos+0x84>)
 8003e9c:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003ea0:	42ac      	cmp	r4, r5
 8003ea2:	4602      	mov	r2, r0
 8003ea4:	460b      	mov	r3, r1
 8003ea6:	b087      	sub	sp, #28
 8003ea8:	d806      	bhi.n	8003eb8 <cos+0x20>
 8003eaa:	2200      	movs	r2, #0
 8003eac:	2300      	movs	r3, #0
 8003eae:	b007      	add	sp, #28
 8003eb0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8003eb4:	f000 b87c 	b.w	8003fb0 <__kernel_cos>
 8003eb8:	4d19      	ldr	r5, [pc, #100]	@ (8003f20 <cos+0x88>)
 8003eba:	42ac      	cmp	r4, r5
 8003ebc:	d903      	bls.n	8003ec6 <cos+0x2e>
 8003ebe:	f7fc f94b 	bl	8000158 <__aeabi_dsub>
 8003ec2:	b007      	add	sp, #28
 8003ec4:	bd30      	pop	{r4, r5, pc}
 8003ec6:	aa02      	add	r2, sp, #8
 8003ec8:	f000 f9ea 	bl	80042a0 <__ieee754_rem_pio2>
 8003ecc:	f000 0003 	and.w	r0, r0, #3
 8003ed0:	2801      	cmp	r0, #1
 8003ed2:	d009      	beq.n	8003ee8 <cos+0x50>
 8003ed4:	2802      	cmp	r0, #2
 8003ed6:	d011      	beq.n	8003efc <cos+0x64>
 8003ed8:	b9b8      	cbnz	r0, 8003f0a <cos+0x72>
 8003eda:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003ede:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ee2:	f000 f865 	bl	8003fb0 <__kernel_cos>
 8003ee6:	e7ec      	b.n	8003ec2 <cos+0x2a>
 8003ee8:	9000      	str	r0, [sp, #0]
 8003eea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003eee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003ef2:	f000 f91d 	bl	8004130 <__kernel_sin>
 8003ef6:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8003efa:	e7e2      	b.n	8003ec2 <cos+0x2a>
 8003efc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f00:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f04:	f000 f854 	bl	8003fb0 <__kernel_cos>
 8003f08:	e7f5      	b.n	8003ef6 <cos+0x5e>
 8003f0a:	2301      	movs	r3, #1
 8003f0c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f10:	9300      	str	r3, [sp, #0]
 8003f12:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f16:	f000 f90b 	bl	8004130 <__kernel_sin>
 8003f1a:	e7d2      	b.n	8003ec2 <cos+0x2a>
 8003f1c:	3fe921fb 	.word	0x3fe921fb
 8003f20:	7fefffff 	.word	0x7fefffff

08003f24 <sin>:
 8003f24:	b530      	push	{r4, r5, lr}
 8003f26:	4d20      	ldr	r5, [pc, #128]	@ (8003fa8 <sin+0x84>)
 8003f28:	f021 4400 	bic.w	r4, r1, #2147483648	@ 0x80000000
 8003f2c:	42ac      	cmp	r4, r5
 8003f2e:	4602      	mov	r2, r0
 8003f30:	460b      	mov	r3, r1
 8003f32:	b087      	sub	sp, #28
 8003f34:	d806      	bhi.n	8003f44 <sin+0x20>
 8003f36:	2300      	movs	r3, #0
 8003f38:	2200      	movs	r2, #0
 8003f3a:	9300      	str	r3, [sp, #0]
 8003f3c:	2300      	movs	r3, #0
 8003f3e:	f000 f8f7 	bl	8004130 <__kernel_sin>
 8003f42:	e004      	b.n	8003f4e <sin+0x2a>
 8003f44:	4d19      	ldr	r5, [pc, #100]	@ (8003fac <sin+0x88>)
 8003f46:	42ac      	cmp	r4, r5
 8003f48:	d903      	bls.n	8003f52 <sin+0x2e>
 8003f4a:	f7fc f905 	bl	8000158 <__aeabi_dsub>
 8003f4e:	b007      	add	sp, #28
 8003f50:	bd30      	pop	{r4, r5, pc}
 8003f52:	aa02      	add	r2, sp, #8
 8003f54:	f000 f9a4 	bl	80042a0 <__ieee754_rem_pio2>
 8003f58:	f000 0003 	and.w	r0, r0, #3
 8003f5c:	2801      	cmp	r0, #1
 8003f5e:	d009      	beq.n	8003f74 <sin+0x50>
 8003f60:	2802      	cmp	r0, #2
 8003f62:	d00e      	beq.n	8003f82 <sin+0x5e>
 8003f64:	b9c0      	cbnz	r0, 8003f98 <sin+0x74>
 8003f66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f6a:	2301      	movs	r3, #1
 8003f6c:	9300      	str	r3, [sp, #0]
 8003f6e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f72:	e7e4      	b.n	8003f3e <sin+0x1a>
 8003f74:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f78:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f7c:	f000 f818 	bl	8003fb0 <__kernel_cos>
 8003f80:	e7e5      	b.n	8003f4e <sin+0x2a>
 8003f82:	2301      	movs	r3, #1
 8003f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003f88:	9300      	str	r3, [sp, #0]
 8003f8a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f8e:	f000 f8cf 	bl	8004130 <__kernel_sin>
 8003f92:	f101 4100 	add.w	r1, r1, #2147483648	@ 0x80000000
 8003f96:	e7da      	b.n	8003f4e <sin+0x2a>
 8003f98:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8003f9c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8003fa0:	f000 f806 	bl	8003fb0 <__kernel_cos>
 8003fa4:	e7f5      	b.n	8003f92 <sin+0x6e>
 8003fa6:	bf00      	nop
 8003fa8:	3fe921fb 	.word	0x3fe921fb
 8003fac:	7fefffff 	.word	0x7fefffff

08003fb0 <__kernel_cos>:
 8003fb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003fb4:	f021 4600 	bic.w	r6, r1, #2147483648	@ 0x80000000
 8003fb8:	f1b6 5f79 	cmp.w	r6, #1044381696	@ 0x3e400000
 8003fbc:	4680      	mov	r8, r0
 8003fbe:	4689      	mov	r9, r1
 8003fc0:	e9cd 2300 	strd	r2, r3, [sp]
 8003fc4:	d204      	bcs.n	8003fd0 <__kernel_cos+0x20>
 8003fc6:	f7fc fd19 	bl	80009fc <__aeabi_d2iz>
 8003fca:	2800      	cmp	r0, #0
 8003fcc:	f000 8086 	beq.w	80040dc <__kernel_cos+0x12c>
 8003fd0:	4642      	mov	r2, r8
 8003fd2:	464b      	mov	r3, r9
 8003fd4:	4640      	mov	r0, r8
 8003fd6:	4649      	mov	r1, r9
 8003fd8:	f7fc fa76 	bl	80004c8 <__aeabi_dmul>
 8003fdc:	2200      	movs	r2, #0
 8003fde:	4b4e      	ldr	r3, [pc, #312]	@ (8004118 <__kernel_cos+0x168>)
 8003fe0:	4604      	mov	r4, r0
 8003fe2:	460d      	mov	r5, r1
 8003fe4:	f7fc fa70 	bl	80004c8 <__aeabi_dmul>
 8003fe8:	a33f      	add	r3, pc, #252	@ (adr r3, 80040e8 <__kernel_cos+0x138>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	4682      	mov	sl, r0
 8003ff0:	468b      	mov	fp, r1
 8003ff2:	4620      	mov	r0, r4
 8003ff4:	4629      	mov	r1, r5
 8003ff6:	f7fc fa67 	bl	80004c8 <__aeabi_dmul>
 8003ffa:	a33d      	add	r3, pc, #244	@ (adr r3, 80040f0 <__kernel_cos+0x140>)
 8003ffc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004000:	f7fc f8ac 	bl	800015c <__adddf3>
 8004004:	4622      	mov	r2, r4
 8004006:	462b      	mov	r3, r5
 8004008:	f7fc fa5e 	bl	80004c8 <__aeabi_dmul>
 800400c:	a33a      	add	r3, pc, #232	@ (adr r3, 80040f8 <__kernel_cos+0x148>)
 800400e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004012:	f7fc f8a1 	bl	8000158 <__aeabi_dsub>
 8004016:	4622      	mov	r2, r4
 8004018:	462b      	mov	r3, r5
 800401a:	f7fc fa55 	bl	80004c8 <__aeabi_dmul>
 800401e:	a338      	add	r3, pc, #224	@ (adr r3, 8004100 <__kernel_cos+0x150>)
 8004020:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004024:	f7fc f89a 	bl	800015c <__adddf3>
 8004028:	4622      	mov	r2, r4
 800402a:	462b      	mov	r3, r5
 800402c:	f7fc fa4c 	bl	80004c8 <__aeabi_dmul>
 8004030:	a335      	add	r3, pc, #212	@ (adr r3, 8004108 <__kernel_cos+0x158>)
 8004032:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004036:	f7fc f88f 	bl	8000158 <__aeabi_dsub>
 800403a:	4622      	mov	r2, r4
 800403c:	462b      	mov	r3, r5
 800403e:	f7fc fa43 	bl	80004c8 <__aeabi_dmul>
 8004042:	a333      	add	r3, pc, #204	@ (adr r3, 8004110 <__kernel_cos+0x160>)
 8004044:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004048:	f7fc f888 	bl	800015c <__adddf3>
 800404c:	4622      	mov	r2, r4
 800404e:	462b      	mov	r3, r5
 8004050:	f7fc fa3a 	bl	80004c8 <__aeabi_dmul>
 8004054:	4622      	mov	r2, r4
 8004056:	462b      	mov	r3, r5
 8004058:	f7fc fa36 	bl	80004c8 <__aeabi_dmul>
 800405c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004060:	4604      	mov	r4, r0
 8004062:	460d      	mov	r5, r1
 8004064:	4640      	mov	r0, r8
 8004066:	4649      	mov	r1, r9
 8004068:	f7fc fa2e 	bl	80004c8 <__aeabi_dmul>
 800406c:	460b      	mov	r3, r1
 800406e:	4602      	mov	r2, r0
 8004070:	4629      	mov	r1, r5
 8004072:	4620      	mov	r0, r4
 8004074:	f7fc f870 	bl	8000158 <__aeabi_dsub>
 8004078:	4b28      	ldr	r3, [pc, #160]	@ (800411c <__kernel_cos+0x16c>)
 800407a:	4680      	mov	r8, r0
 800407c:	429e      	cmp	r6, r3
 800407e:	4689      	mov	r9, r1
 8004080:	d80e      	bhi.n	80040a0 <__kernel_cos+0xf0>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4650      	mov	r0, sl
 8004088:	4659      	mov	r1, fp
 800408a:	f7fc f865 	bl	8000158 <__aeabi_dsub>
 800408e:	4602      	mov	r2, r0
 8004090:	2000      	movs	r0, #0
 8004092:	460b      	mov	r3, r1
 8004094:	4922      	ldr	r1, [pc, #136]	@ (8004120 <__kernel_cos+0x170>)
 8004096:	f7fc f85f 	bl	8000158 <__aeabi_dsub>
 800409a:	b003      	add	sp, #12
 800409c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80040a0:	2400      	movs	r4, #0
 80040a2:	4b20      	ldr	r3, [pc, #128]	@ (8004124 <__kernel_cos+0x174>)
 80040a4:	4622      	mov	r2, r4
 80040a6:	429e      	cmp	r6, r3
 80040a8:	bf8c      	ite	hi
 80040aa:	4d1f      	ldrhi	r5, [pc, #124]	@ (8004128 <__kernel_cos+0x178>)
 80040ac:	f5a6 1500 	subls.w	r5, r6, #2097152	@ 0x200000
 80040b0:	462b      	mov	r3, r5
 80040b2:	2000      	movs	r0, #0
 80040b4:	491a      	ldr	r1, [pc, #104]	@ (8004120 <__kernel_cos+0x170>)
 80040b6:	f7fc f84f 	bl	8000158 <__aeabi_dsub>
 80040ba:	4622      	mov	r2, r4
 80040bc:	4606      	mov	r6, r0
 80040be:	460f      	mov	r7, r1
 80040c0:	462b      	mov	r3, r5
 80040c2:	4650      	mov	r0, sl
 80040c4:	4659      	mov	r1, fp
 80040c6:	f7fc f847 	bl	8000158 <__aeabi_dsub>
 80040ca:	4642      	mov	r2, r8
 80040cc:	464b      	mov	r3, r9
 80040ce:	f7fc f843 	bl	8000158 <__aeabi_dsub>
 80040d2:	4602      	mov	r2, r0
 80040d4:	460b      	mov	r3, r1
 80040d6:	4630      	mov	r0, r6
 80040d8:	4639      	mov	r1, r7
 80040da:	e7dc      	b.n	8004096 <__kernel_cos+0xe6>
 80040dc:	2000      	movs	r0, #0
 80040de:	4910      	ldr	r1, [pc, #64]	@ (8004120 <__kernel_cos+0x170>)
 80040e0:	e7db      	b.n	800409a <__kernel_cos+0xea>
 80040e2:	bf00      	nop
 80040e4:	f3af 8000 	nop.w
 80040e8:	be8838d4 	.word	0xbe8838d4
 80040ec:	bda8fae9 	.word	0xbda8fae9
 80040f0:	bdb4b1c4 	.word	0xbdb4b1c4
 80040f4:	3e21ee9e 	.word	0x3e21ee9e
 80040f8:	809c52ad 	.word	0x809c52ad
 80040fc:	3e927e4f 	.word	0x3e927e4f
 8004100:	19cb1590 	.word	0x19cb1590
 8004104:	3efa01a0 	.word	0x3efa01a0
 8004108:	16c15177 	.word	0x16c15177
 800410c:	3f56c16c 	.word	0x3f56c16c
 8004110:	5555554c 	.word	0x5555554c
 8004114:	3fa55555 	.word	0x3fa55555
 8004118:	3fe00000 	.word	0x3fe00000
 800411c:	3fd33332 	.word	0x3fd33332
 8004120:	3ff00000 	.word	0x3ff00000
 8004124:	3fe90000 	.word	0x3fe90000
 8004128:	3fd20000 	.word	0x3fd20000
 800412c:	00000000 	.word	0x00000000

08004130 <__kernel_sin>:
 8004130:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004134:	461f      	mov	r7, r3
 8004136:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 800413a:	f1b3 5f79 	cmp.w	r3, #1044381696	@ 0x3e400000
 800413e:	4604      	mov	r4, r0
 8004140:	460d      	mov	r5, r1
 8004142:	4616      	mov	r6, r2
 8004144:	b085      	sub	sp, #20
 8004146:	d203      	bcs.n	8004150 <__kernel_sin+0x20>
 8004148:	f7fc fc58 	bl	80009fc <__aeabi_d2iz>
 800414c:	2800      	cmp	r0, #0
 800414e:	d051      	beq.n	80041f4 <__kernel_sin+0xc4>
 8004150:	4622      	mov	r2, r4
 8004152:	462b      	mov	r3, r5
 8004154:	4620      	mov	r0, r4
 8004156:	4629      	mov	r1, r5
 8004158:	f7fc f9b6 	bl	80004c8 <__aeabi_dmul>
 800415c:	4682      	mov	sl, r0
 800415e:	468b      	mov	fp, r1
 8004160:	4602      	mov	r2, r0
 8004162:	460b      	mov	r3, r1
 8004164:	4620      	mov	r0, r4
 8004166:	4629      	mov	r1, r5
 8004168:	f7fc f9ae 	bl	80004c8 <__aeabi_dmul>
 800416c:	a33e      	add	r3, pc, #248	@ (adr r3, 8004268 <__kernel_sin+0x138>)
 800416e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004172:	4680      	mov	r8, r0
 8004174:	4689      	mov	r9, r1
 8004176:	4650      	mov	r0, sl
 8004178:	4659      	mov	r1, fp
 800417a:	f7fc f9a5 	bl	80004c8 <__aeabi_dmul>
 800417e:	a33c      	add	r3, pc, #240	@ (adr r3, 8004270 <__kernel_sin+0x140>)
 8004180:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004184:	f7fb ffe8 	bl	8000158 <__aeabi_dsub>
 8004188:	4652      	mov	r2, sl
 800418a:	465b      	mov	r3, fp
 800418c:	f7fc f99c 	bl	80004c8 <__aeabi_dmul>
 8004190:	a339      	add	r3, pc, #228	@ (adr r3, 8004278 <__kernel_sin+0x148>)
 8004192:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004196:	f7fb ffe1 	bl	800015c <__adddf3>
 800419a:	4652      	mov	r2, sl
 800419c:	465b      	mov	r3, fp
 800419e:	f7fc f993 	bl	80004c8 <__aeabi_dmul>
 80041a2:	a337      	add	r3, pc, #220	@ (adr r3, 8004280 <__kernel_sin+0x150>)
 80041a4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041a8:	f7fb ffd6 	bl	8000158 <__aeabi_dsub>
 80041ac:	4652      	mov	r2, sl
 80041ae:	465b      	mov	r3, fp
 80041b0:	f7fc f98a 	bl	80004c8 <__aeabi_dmul>
 80041b4:	a334      	add	r3, pc, #208	@ (adr r3, 8004288 <__kernel_sin+0x158>)
 80041b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041ba:	f7fb ffcf 	bl	800015c <__adddf3>
 80041be:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80041c0:	e9cd 0100 	strd	r0, r1, [sp]
 80041c4:	b9db      	cbnz	r3, 80041fe <__kernel_sin+0xce>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4650      	mov	r0, sl
 80041cc:	4659      	mov	r1, fp
 80041ce:	f7fc f97b 	bl	80004c8 <__aeabi_dmul>
 80041d2:	a32f      	add	r3, pc, #188	@ (adr r3, 8004290 <__kernel_sin+0x160>)
 80041d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041d8:	f7fb ffbe 	bl	8000158 <__aeabi_dsub>
 80041dc:	4642      	mov	r2, r8
 80041de:	464b      	mov	r3, r9
 80041e0:	f7fc f972 	bl	80004c8 <__aeabi_dmul>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4620      	mov	r0, r4
 80041ea:	4629      	mov	r1, r5
 80041ec:	f7fb ffb6 	bl	800015c <__adddf3>
 80041f0:	4604      	mov	r4, r0
 80041f2:	460d      	mov	r5, r1
 80041f4:	4620      	mov	r0, r4
 80041f6:	4629      	mov	r1, r5
 80041f8:	b005      	add	sp, #20
 80041fa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80041fe:	2200      	movs	r2, #0
 8004200:	4630      	mov	r0, r6
 8004202:	4639      	mov	r1, r7
 8004204:	4b24      	ldr	r3, [pc, #144]	@ (8004298 <__kernel_sin+0x168>)
 8004206:	f7fc f95f 	bl	80004c8 <__aeabi_dmul>
 800420a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800420e:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8004212:	4640      	mov	r0, r8
 8004214:	4649      	mov	r1, r9
 8004216:	f7fc f957 	bl	80004c8 <__aeabi_dmul>
 800421a:	4602      	mov	r2, r0
 800421c:	460b      	mov	r3, r1
 800421e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004222:	f7fb ff99 	bl	8000158 <__aeabi_dsub>
 8004226:	4652      	mov	r2, sl
 8004228:	465b      	mov	r3, fp
 800422a:	f7fc f94d 	bl	80004c8 <__aeabi_dmul>
 800422e:	4632      	mov	r2, r6
 8004230:	463b      	mov	r3, r7
 8004232:	f7fb ff91 	bl	8000158 <__aeabi_dsub>
 8004236:	a316      	add	r3, pc, #88	@ (adr r3, 8004290 <__kernel_sin+0x160>)
 8004238:	e9d3 2300 	ldrd	r2, r3, [r3]
 800423c:	4606      	mov	r6, r0
 800423e:	460f      	mov	r7, r1
 8004240:	4640      	mov	r0, r8
 8004242:	4649      	mov	r1, r9
 8004244:	f7fc f940 	bl	80004c8 <__aeabi_dmul>
 8004248:	4602      	mov	r2, r0
 800424a:	460b      	mov	r3, r1
 800424c:	4630      	mov	r0, r6
 800424e:	4639      	mov	r1, r7
 8004250:	f7fb ff84 	bl	800015c <__adddf3>
 8004254:	4602      	mov	r2, r0
 8004256:	460b      	mov	r3, r1
 8004258:	4620      	mov	r0, r4
 800425a:	4629      	mov	r1, r5
 800425c:	f7fb ff7c 	bl	8000158 <__aeabi_dsub>
 8004260:	e7c6      	b.n	80041f0 <__kernel_sin+0xc0>
 8004262:	bf00      	nop
 8004264:	f3af 8000 	nop.w
 8004268:	5acfd57c 	.word	0x5acfd57c
 800426c:	3de5d93a 	.word	0x3de5d93a
 8004270:	8a2b9ceb 	.word	0x8a2b9ceb
 8004274:	3e5ae5e6 	.word	0x3e5ae5e6
 8004278:	57b1fe7d 	.word	0x57b1fe7d
 800427c:	3ec71de3 	.word	0x3ec71de3
 8004280:	19c161d5 	.word	0x19c161d5
 8004284:	3f2a01a0 	.word	0x3f2a01a0
 8004288:	1110f8a6 	.word	0x1110f8a6
 800428c:	3f811111 	.word	0x3f811111
 8004290:	55555549 	.word	0x55555549
 8004294:	3fc55555 	.word	0x3fc55555
 8004298:	3fe00000 	.word	0x3fe00000
 800429c:	00000000 	.word	0x00000000

080042a0 <__ieee754_rem_pio2>:
 80042a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80042a4:	4bc4      	ldr	r3, [pc, #784]	@ (80045b8 <__ieee754_rem_pio2+0x318>)
 80042a6:	f021 4800 	bic.w	r8, r1, #2147483648	@ 0x80000000
 80042aa:	b08d      	sub	sp, #52	@ 0x34
 80042ac:	4598      	cmp	r8, r3
 80042ae:	4606      	mov	r6, r0
 80042b0:	460f      	mov	r7, r1
 80042b2:	4614      	mov	r4, r2
 80042b4:	9104      	str	r1, [sp, #16]
 80042b6:	d807      	bhi.n	80042c8 <__ieee754_rem_pio2+0x28>
 80042b8:	e9c2 6700 	strd	r6, r7, [r2]
 80042bc:	2300      	movs	r3, #0
 80042be:	2200      	movs	r2, #0
 80042c0:	e9c4 2302 	strd	r2, r3, [r4, #8]
 80042c4:	2500      	movs	r5, #0
 80042c6:	e026      	b.n	8004316 <__ieee754_rem_pio2+0x76>
 80042c8:	4bbc      	ldr	r3, [pc, #752]	@ (80045bc <__ieee754_rem_pio2+0x31c>)
 80042ca:	4598      	cmp	r8, r3
 80042cc:	d876      	bhi.n	80043bc <__ieee754_rem_pio2+0x11c>
 80042ce:	9b04      	ldr	r3, [sp, #16]
 80042d0:	4dbb      	ldr	r5, [pc, #748]	@ (80045c0 <__ieee754_rem_pio2+0x320>)
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	a3aa      	add	r3, pc, #680	@ (adr r3, 8004580 <__ieee754_rem_pio2+0x2e0>)
 80042d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042da:	dd38      	ble.n	800434e <__ieee754_rem_pio2+0xae>
 80042dc:	f7fb ff3c 	bl	8000158 <__aeabi_dsub>
 80042e0:	45a8      	cmp	r8, r5
 80042e2:	4606      	mov	r6, r0
 80042e4:	460f      	mov	r7, r1
 80042e6:	d01a      	beq.n	800431e <__ieee754_rem_pio2+0x7e>
 80042e8:	a3a7      	add	r3, pc, #668	@ (adr r3, 8004588 <__ieee754_rem_pio2+0x2e8>)
 80042ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ee:	f7fb ff33 	bl	8000158 <__aeabi_dsub>
 80042f2:	4602      	mov	r2, r0
 80042f4:	460b      	mov	r3, r1
 80042f6:	4680      	mov	r8, r0
 80042f8:	4689      	mov	r9, r1
 80042fa:	4630      	mov	r0, r6
 80042fc:	4639      	mov	r1, r7
 80042fe:	f7fb ff2b 	bl	8000158 <__aeabi_dsub>
 8004302:	a3a1      	add	r3, pc, #644	@ (adr r3, 8004588 <__ieee754_rem_pio2+0x2e8>)
 8004304:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004308:	f7fb ff26 	bl	8000158 <__aeabi_dsub>
 800430c:	2501      	movs	r5, #1
 800430e:	e9c4 8900 	strd	r8, r9, [r4]
 8004312:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004316:	4628      	mov	r0, r5
 8004318:	b00d      	add	sp, #52	@ 0x34
 800431a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800431e:	a39c      	add	r3, pc, #624	@ (adr r3, 8004590 <__ieee754_rem_pio2+0x2f0>)
 8004320:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004324:	f7fb ff18 	bl	8000158 <__aeabi_dsub>
 8004328:	a39b      	add	r3, pc, #620	@ (adr r3, 8004598 <__ieee754_rem_pio2+0x2f8>)
 800432a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800432e:	4606      	mov	r6, r0
 8004330:	460f      	mov	r7, r1
 8004332:	f7fb ff11 	bl	8000158 <__aeabi_dsub>
 8004336:	4602      	mov	r2, r0
 8004338:	460b      	mov	r3, r1
 800433a:	4680      	mov	r8, r0
 800433c:	4689      	mov	r9, r1
 800433e:	4630      	mov	r0, r6
 8004340:	4639      	mov	r1, r7
 8004342:	f7fb ff09 	bl	8000158 <__aeabi_dsub>
 8004346:	a394      	add	r3, pc, #592	@ (adr r3, 8004598 <__ieee754_rem_pio2+0x2f8>)
 8004348:	e9d3 2300 	ldrd	r2, r3, [r3]
 800434c:	e7dc      	b.n	8004308 <__ieee754_rem_pio2+0x68>
 800434e:	f7fb ff05 	bl	800015c <__adddf3>
 8004352:	45a8      	cmp	r8, r5
 8004354:	4606      	mov	r6, r0
 8004356:	460f      	mov	r7, r1
 8004358:	d018      	beq.n	800438c <__ieee754_rem_pio2+0xec>
 800435a:	a38b      	add	r3, pc, #556	@ (adr r3, 8004588 <__ieee754_rem_pio2+0x2e8>)
 800435c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004360:	f7fb fefc 	bl	800015c <__adddf3>
 8004364:	4602      	mov	r2, r0
 8004366:	460b      	mov	r3, r1
 8004368:	4680      	mov	r8, r0
 800436a:	4689      	mov	r9, r1
 800436c:	4630      	mov	r0, r6
 800436e:	4639      	mov	r1, r7
 8004370:	f7fb fef2 	bl	8000158 <__aeabi_dsub>
 8004374:	a384      	add	r3, pc, #528	@ (adr r3, 8004588 <__ieee754_rem_pio2+0x2e8>)
 8004376:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437a:	f7fb feef 	bl	800015c <__adddf3>
 800437e:	f04f 35ff 	mov.w	r5, #4294967295	@ 0xffffffff
 8004382:	e9c4 8900 	strd	r8, r9, [r4]
 8004386:	e9c4 0102 	strd	r0, r1, [r4, #8]
 800438a:	e7c4      	b.n	8004316 <__ieee754_rem_pio2+0x76>
 800438c:	a380      	add	r3, pc, #512	@ (adr r3, 8004590 <__ieee754_rem_pio2+0x2f0>)
 800438e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004392:	f7fb fee3 	bl	800015c <__adddf3>
 8004396:	a380      	add	r3, pc, #512	@ (adr r3, 8004598 <__ieee754_rem_pio2+0x2f8>)
 8004398:	e9d3 2300 	ldrd	r2, r3, [r3]
 800439c:	4606      	mov	r6, r0
 800439e:	460f      	mov	r7, r1
 80043a0:	f7fb fedc 	bl	800015c <__adddf3>
 80043a4:	4602      	mov	r2, r0
 80043a6:	460b      	mov	r3, r1
 80043a8:	4680      	mov	r8, r0
 80043aa:	4689      	mov	r9, r1
 80043ac:	4630      	mov	r0, r6
 80043ae:	4639      	mov	r1, r7
 80043b0:	f7fb fed2 	bl	8000158 <__aeabi_dsub>
 80043b4:	a378      	add	r3, pc, #480	@ (adr r3, 8004598 <__ieee754_rem_pio2+0x2f8>)
 80043b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ba:	e7de      	b.n	800437a <__ieee754_rem_pio2+0xda>
 80043bc:	4b81      	ldr	r3, [pc, #516]	@ (80045c4 <__ieee754_rem_pio2+0x324>)
 80043be:	4598      	cmp	r8, r3
 80043c0:	f200 80cf 	bhi.w	8004562 <__ieee754_rem_pio2+0x2c2>
 80043c4:	f000 f962 	bl	800468c <fabs>
 80043c8:	a375      	add	r3, pc, #468	@ (adr r3, 80045a0 <__ieee754_rem_pio2+0x300>)
 80043ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043ce:	4606      	mov	r6, r0
 80043d0:	460f      	mov	r7, r1
 80043d2:	f7fc f879 	bl	80004c8 <__aeabi_dmul>
 80043d6:	2200      	movs	r2, #0
 80043d8:	4b7b      	ldr	r3, [pc, #492]	@ (80045c8 <__ieee754_rem_pio2+0x328>)
 80043da:	f7fb febf 	bl	800015c <__adddf3>
 80043de:	f7fc fb0d 	bl	80009fc <__aeabi_d2iz>
 80043e2:	4605      	mov	r5, r0
 80043e4:	f7fc f806 	bl	80003f4 <__aeabi_i2d>
 80043e8:	4602      	mov	r2, r0
 80043ea:	460b      	mov	r3, r1
 80043ec:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80043f0:	a363      	add	r3, pc, #396	@ (adr r3, 8004580 <__ieee754_rem_pio2+0x2e0>)
 80043f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80043f6:	f7fc f867 	bl	80004c8 <__aeabi_dmul>
 80043fa:	4602      	mov	r2, r0
 80043fc:	460b      	mov	r3, r1
 80043fe:	4630      	mov	r0, r6
 8004400:	4639      	mov	r1, r7
 8004402:	f7fb fea9 	bl	8000158 <__aeabi_dsub>
 8004406:	a360      	add	r3, pc, #384	@ (adr r3, 8004588 <__ieee754_rem_pio2+0x2e8>)
 8004408:	e9d3 2300 	ldrd	r2, r3, [r3]
 800440c:	4682      	mov	sl, r0
 800440e:	468b      	mov	fp, r1
 8004410:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004414:	f7fc f858 	bl	80004c8 <__aeabi_dmul>
 8004418:	2d1f      	cmp	r5, #31
 800441a:	4606      	mov	r6, r0
 800441c:	460f      	mov	r7, r1
 800441e:	dc0c      	bgt.n	800443a <__ieee754_rem_pio2+0x19a>
 8004420:	4b6a      	ldr	r3, [pc, #424]	@ (80045cc <__ieee754_rem_pio2+0x32c>)
 8004422:	1e6a      	subs	r2, r5, #1
 8004424:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004428:	4543      	cmp	r3, r8
 800442a:	d006      	beq.n	800443a <__ieee754_rem_pio2+0x19a>
 800442c:	4632      	mov	r2, r6
 800442e:	463b      	mov	r3, r7
 8004430:	4650      	mov	r0, sl
 8004432:	4659      	mov	r1, fp
 8004434:	f7fb fe90 	bl	8000158 <__aeabi_dsub>
 8004438:	e00e      	b.n	8004458 <__ieee754_rem_pio2+0x1b8>
 800443a:	463b      	mov	r3, r7
 800443c:	4632      	mov	r2, r6
 800443e:	4650      	mov	r0, sl
 8004440:	4659      	mov	r1, fp
 8004442:	f7fb fe89 	bl	8000158 <__aeabi_dsub>
 8004446:	ea4f 5328 	mov.w	r3, r8, asr #20
 800444a:	9305      	str	r3, [sp, #20]
 800444c:	f3c1 530a 	ubfx	r3, r1, #20, #11
 8004450:	ebc3 5318 	rsb	r3, r3, r8, lsr #20
 8004454:	2b10      	cmp	r3, #16
 8004456:	dc02      	bgt.n	800445e <__ieee754_rem_pio2+0x1be>
 8004458:	e9c4 0100 	strd	r0, r1, [r4]
 800445c:	e039      	b.n	80044d2 <__ieee754_rem_pio2+0x232>
 800445e:	a34c      	add	r3, pc, #304	@ (adr r3, 8004590 <__ieee754_rem_pio2+0x2f0>)
 8004460:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004464:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004468:	f7fc f82e 	bl	80004c8 <__aeabi_dmul>
 800446c:	4606      	mov	r6, r0
 800446e:	460f      	mov	r7, r1
 8004470:	4602      	mov	r2, r0
 8004472:	460b      	mov	r3, r1
 8004474:	4650      	mov	r0, sl
 8004476:	4659      	mov	r1, fp
 8004478:	f7fb fe6e 	bl	8000158 <__aeabi_dsub>
 800447c:	4602      	mov	r2, r0
 800447e:	460b      	mov	r3, r1
 8004480:	4680      	mov	r8, r0
 8004482:	4689      	mov	r9, r1
 8004484:	4650      	mov	r0, sl
 8004486:	4659      	mov	r1, fp
 8004488:	f7fb fe66 	bl	8000158 <__aeabi_dsub>
 800448c:	4632      	mov	r2, r6
 800448e:	463b      	mov	r3, r7
 8004490:	f7fb fe62 	bl	8000158 <__aeabi_dsub>
 8004494:	a340      	add	r3, pc, #256	@ (adr r3, 8004598 <__ieee754_rem_pio2+0x2f8>)
 8004496:	e9d3 2300 	ldrd	r2, r3, [r3]
 800449a:	4606      	mov	r6, r0
 800449c:	460f      	mov	r7, r1
 800449e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80044a2:	f7fc f811 	bl	80004c8 <__aeabi_dmul>
 80044a6:	4632      	mov	r2, r6
 80044a8:	463b      	mov	r3, r7
 80044aa:	f7fb fe55 	bl	8000158 <__aeabi_dsub>
 80044ae:	4602      	mov	r2, r0
 80044b0:	460b      	mov	r3, r1
 80044b2:	4606      	mov	r6, r0
 80044b4:	460f      	mov	r7, r1
 80044b6:	4640      	mov	r0, r8
 80044b8:	4649      	mov	r1, r9
 80044ba:	f7fb fe4d 	bl	8000158 <__aeabi_dsub>
 80044be:	9a05      	ldr	r2, [sp, #20]
 80044c0:	f3c1 530a 	ubfx	r3, r1, #20, #11
 80044c4:	1ad3      	subs	r3, r2, r3
 80044c6:	2b31      	cmp	r3, #49	@ 0x31
 80044c8:	dc20      	bgt.n	800450c <__ieee754_rem_pio2+0x26c>
 80044ca:	46c2      	mov	sl, r8
 80044cc:	46cb      	mov	fp, r9
 80044ce:	e9c4 0100 	strd	r0, r1, [r4]
 80044d2:	e9d4 8900 	ldrd	r8, r9, [r4]
 80044d6:	4650      	mov	r0, sl
 80044d8:	4642      	mov	r2, r8
 80044da:	464b      	mov	r3, r9
 80044dc:	4659      	mov	r1, fp
 80044de:	f7fb fe3b 	bl	8000158 <__aeabi_dsub>
 80044e2:	463b      	mov	r3, r7
 80044e4:	4632      	mov	r2, r6
 80044e6:	f7fb fe37 	bl	8000158 <__aeabi_dsub>
 80044ea:	9b04      	ldr	r3, [sp, #16]
 80044ec:	e9c4 0102 	strd	r0, r1, [r4, #8]
 80044f0:	2b00      	cmp	r3, #0
 80044f2:	f6bf af10 	bge.w	8004316 <__ieee754_rem_pio2+0x76>
 80044f6:	f109 4300 	add.w	r3, r9, #2147483648	@ 0x80000000
 80044fa:	6063      	str	r3, [r4, #4]
 80044fc:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004500:	f8c4 8000 	str.w	r8, [r4]
 8004504:	60a0      	str	r0, [r4, #8]
 8004506:	60e3      	str	r3, [r4, #12]
 8004508:	426d      	negs	r5, r5
 800450a:	e704      	b.n	8004316 <__ieee754_rem_pio2+0x76>
 800450c:	a326      	add	r3, pc, #152	@ (adr r3, 80045a8 <__ieee754_rem_pio2+0x308>)
 800450e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004512:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004516:	f7fb ffd7 	bl	80004c8 <__aeabi_dmul>
 800451a:	4606      	mov	r6, r0
 800451c:	460f      	mov	r7, r1
 800451e:	4602      	mov	r2, r0
 8004520:	460b      	mov	r3, r1
 8004522:	4640      	mov	r0, r8
 8004524:	4649      	mov	r1, r9
 8004526:	f7fb fe17 	bl	8000158 <__aeabi_dsub>
 800452a:	4602      	mov	r2, r0
 800452c:	460b      	mov	r3, r1
 800452e:	4682      	mov	sl, r0
 8004530:	468b      	mov	fp, r1
 8004532:	4640      	mov	r0, r8
 8004534:	4649      	mov	r1, r9
 8004536:	f7fb fe0f 	bl	8000158 <__aeabi_dsub>
 800453a:	4632      	mov	r2, r6
 800453c:	463b      	mov	r3, r7
 800453e:	f7fb fe0b 	bl	8000158 <__aeabi_dsub>
 8004542:	a31b      	add	r3, pc, #108	@ (adr r3, 80045b0 <__ieee754_rem_pio2+0x310>)
 8004544:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004548:	4606      	mov	r6, r0
 800454a:	460f      	mov	r7, r1
 800454c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8004550:	f7fb ffba 	bl	80004c8 <__aeabi_dmul>
 8004554:	4632      	mov	r2, r6
 8004556:	463b      	mov	r3, r7
 8004558:	f7fb fdfe 	bl	8000158 <__aeabi_dsub>
 800455c:	4606      	mov	r6, r0
 800455e:	460f      	mov	r7, r1
 8004560:	e764      	b.n	800442c <__ieee754_rem_pio2+0x18c>
 8004562:	4b1b      	ldr	r3, [pc, #108]	@ (80045d0 <__ieee754_rem_pio2+0x330>)
 8004564:	4598      	cmp	r8, r3
 8004566:	d935      	bls.n	80045d4 <__ieee754_rem_pio2+0x334>
 8004568:	4602      	mov	r2, r0
 800456a:	460b      	mov	r3, r1
 800456c:	f7fb fdf4 	bl	8000158 <__aeabi_dsub>
 8004570:	e9c4 0102 	strd	r0, r1, [r4, #8]
 8004574:	e9c4 0100 	strd	r0, r1, [r4]
 8004578:	e6a4      	b.n	80042c4 <__ieee754_rem_pio2+0x24>
 800457a:	bf00      	nop
 800457c:	f3af 8000 	nop.w
 8004580:	54400000 	.word	0x54400000
 8004584:	3ff921fb 	.word	0x3ff921fb
 8004588:	1a626331 	.word	0x1a626331
 800458c:	3dd0b461 	.word	0x3dd0b461
 8004590:	1a600000 	.word	0x1a600000
 8004594:	3dd0b461 	.word	0x3dd0b461
 8004598:	2e037073 	.word	0x2e037073
 800459c:	3ba3198a 	.word	0x3ba3198a
 80045a0:	6dc9c883 	.word	0x6dc9c883
 80045a4:	3fe45f30 	.word	0x3fe45f30
 80045a8:	2e000000 	.word	0x2e000000
 80045ac:	3ba3198a 	.word	0x3ba3198a
 80045b0:	252049c1 	.word	0x252049c1
 80045b4:	397b839a 	.word	0x397b839a
 80045b8:	3fe921fb 	.word	0x3fe921fb
 80045bc:	4002d97b 	.word	0x4002d97b
 80045c0:	3ff921fb 	.word	0x3ff921fb
 80045c4:	413921fb 	.word	0x413921fb
 80045c8:	3fe00000 	.word	0x3fe00000
 80045cc:	080050a4 	.word	0x080050a4
 80045d0:	7fefffff 	.word	0x7fefffff
 80045d4:	ea4f 5528 	mov.w	r5, r8, asr #20
 80045d8:	f2a5 4516 	subw	r5, r5, #1046	@ 0x416
 80045dc:	eba8 5105 	sub.w	r1, r8, r5, lsl #20
 80045e0:	460f      	mov	r7, r1
 80045e2:	f7fc fa0b 	bl	80009fc <__aeabi_d2iz>
 80045e6:	f7fb ff05 	bl	80003f4 <__aeabi_i2d>
 80045ea:	4602      	mov	r2, r0
 80045ec:	460b      	mov	r3, r1
 80045ee:	4630      	mov	r0, r6
 80045f0:	4639      	mov	r1, r7
 80045f2:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80045f6:	f7fb fdaf 	bl	8000158 <__aeabi_dsub>
 80045fa:	2200      	movs	r2, #0
 80045fc:	4b21      	ldr	r3, [pc, #132]	@ (8004684 <__ieee754_rem_pio2+0x3e4>)
 80045fe:	f7fb ff63 	bl	80004c8 <__aeabi_dmul>
 8004602:	460f      	mov	r7, r1
 8004604:	4606      	mov	r6, r0
 8004606:	f7fc f9f9 	bl	80009fc <__aeabi_d2iz>
 800460a:	f7fb fef3 	bl	80003f4 <__aeabi_i2d>
 800460e:	4602      	mov	r2, r0
 8004610:	460b      	mov	r3, r1
 8004612:	4630      	mov	r0, r6
 8004614:	4639      	mov	r1, r7
 8004616:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800461a:	f7fb fd9d 	bl	8000158 <__aeabi_dsub>
 800461e:	2200      	movs	r2, #0
 8004620:	4b18      	ldr	r3, [pc, #96]	@ (8004684 <__ieee754_rem_pio2+0x3e4>)
 8004622:	f7fb ff51 	bl	80004c8 <__aeabi_dmul>
 8004626:	f04f 0803 	mov.w	r8, #3
 800462a:	2600      	movs	r6, #0
 800462c:	2700      	movs	r7, #0
 800462e:	e9cd 010a 	strd	r0, r1, [sp, #40]	@ 0x28
 8004632:	f10d 0930 	add.w	r9, sp, #48	@ 0x30
 8004636:	4632      	mov	r2, r6
 8004638:	e979 0102 	ldrd	r0, r1, [r9, #-8]!
 800463c:	463b      	mov	r3, r7
 800463e:	46c2      	mov	sl, r8
 8004640:	f108 38ff 	add.w	r8, r8, #4294967295	@ 0xffffffff
 8004644:	f7fc f9a8 	bl	8000998 <__aeabi_dcmpeq>
 8004648:	2800      	cmp	r0, #0
 800464a:	d1f4      	bne.n	8004636 <__ieee754_rem_pio2+0x396>
 800464c:	4b0e      	ldr	r3, [pc, #56]	@ (8004688 <__ieee754_rem_pio2+0x3e8>)
 800464e:	462a      	mov	r2, r5
 8004650:	9301      	str	r3, [sp, #4]
 8004652:	2302      	movs	r3, #2
 8004654:	4621      	mov	r1, r4
 8004656:	9300      	str	r3, [sp, #0]
 8004658:	a806      	add	r0, sp, #24
 800465a:	4653      	mov	r3, sl
 800465c:	f000 f81a 	bl	8004694 <__kernel_rem_pio2>
 8004660:	9b04      	ldr	r3, [sp, #16]
 8004662:	4605      	mov	r5, r0
 8004664:	2b00      	cmp	r3, #0
 8004666:	f6bf ae56 	bge.w	8004316 <__ieee754_rem_pio2+0x76>
 800466a:	e9d4 2100 	ldrd	r2, r1, [r4]
 800466e:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004672:	e9c4 2300 	strd	r2, r3, [r4]
 8004676:	e9d4 2102 	ldrd	r2, r1, [r4, #8]
 800467a:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800467e:	e9c4 2302 	strd	r2, r3, [r4, #8]
 8004682:	e741      	b.n	8004508 <__ieee754_rem_pio2+0x268>
 8004684:	41700000 	.word	0x41700000
 8004688:	08005124 	.word	0x08005124

0800468c <fabs>:
 800468c:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004690:	4619      	mov	r1, r3
 8004692:	4770      	bx	lr

08004694 <__kernel_rem_pio2>:
 8004694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004698:	f5ad 7d19 	sub.w	sp, sp, #612	@ 0x264
 800469c:	9308      	str	r3, [sp, #32]
 800469e:	9104      	str	r1, [sp, #16]
 80046a0:	4bb6      	ldr	r3, [pc, #728]	@ (800497c <__kernel_rem_pio2+0x2e8>)
 80046a2:	99a2      	ldr	r1, [sp, #648]	@ 0x288
 80046a4:	f112 0f14 	cmn.w	r2, #20
 80046a8:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80046ac:	bfa8      	it	ge
 80046ae:	1ed4      	subge	r4, r2, #3
 80046b0:	9302      	str	r3, [sp, #8]
 80046b2:	9b08      	ldr	r3, [sp, #32]
 80046b4:	bfb8      	it	lt
 80046b6:	2400      	movlt	r4, #0
 80046b8:	f103 33ff 	add.w	r3, r3, #4294967295	@ 0xffffffff
 80046bc:	9306      	str	r3, [sp, #24]
 80046be:	bfa4      	itt	ge
 80046c0:	2318      	movge	r3, #24
 80046c2:	fb94 f4f3 	sdivge	r4, r4, r3
 80046c6:	f06f 0317 	mvn.w	r3, #23
 80046ca:	fb04 3303 	mla	r3, r4, r3, r3
 80046ce:	eb03 0a02 	add.w	sl, r3, r2
 80046d2:	9a06      	ldr	r2, [sp, #24]
 80046d4:	9b02      	ldr	r3, [sp, #8]
 80046d6:	1aa7      	subs	r7, r4, r2
 80046d8:	eb03 0802 	add.w	r8, r3, r2
 80046dc:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 80046de:	2500      	movs	r5, #0
 80046e0:	eb03 0987 	add.w	r9, r3, r7, lsl #2
 80046e4:	2200      	movs	r2, #0
 80046e6:	2300      	movs	r3, #0
 80046e8:	9009      	str	r0, [sp, #36]	@ 0x24
 80046ea:	ae20      	add	r6, sp, #128	@ 0x80
 80046ec:	4545      	cmp	r5, r8
 80046ee:	dd14      	ble.n	800471a <__kernel_rem_pio2+0x86>
 80046f0:	f04f 0800 	mov.w	r8, #0
 80046f4:	9a08      	ldr	r2, [sp, #32]
 80046f6:	ab20      	add	r3, sp, #128	@ 0x80
 80046f8:	eb03 05c2 	add.w	r5, r3, r2, lsl #3
 80046fc:	f50d 7be0 	add.w	fp, sp, #448	@ 0x1c0
 8004700:	9b02      	ldr	r3, [sp, #8]
 8004702:	4598      	cmp	r8, r3
 8004704:	dc35      	bgt.n	8004772 <__kernel_rem_pio2+0xde>
 8004706:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004708:	2200      	movs	r2, #0
 800470a:	f1a3 0908 	sub.w	r9, r3, #8
 800470e:	2300      	movs	r3, #0
 8004710:	462f      	mov	r7, r5
 8004712:	2600      	movs	r6, #0
 8004714:	e9cd 2300 	strd	r2, r3, [sp]
 8004718:	e01f      	b.n	800475a <__kernel_rem_pio2+0xc6>
 800471a:	42ef      	cmn	r7, r5
 800471c:	d40b      	bmi.n	8004736 <__kernel_rem_pio2+0xa2>
 800471e:	f859 0025 	ldr.w	r0, [r9, r5, lsl #2]
 8004722:	e9cd 2300 	strd	r2, r3, [sp]
 8004726:	f7fb fe65 	bl	80003f4 <__aeabi_i2d>
 800472a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800472e:	e8e6 0102 	strd	r0, r1, [r6], #8
 8004732:	3501      	adds	r5, #1
 8004734:	e7da      	b.n	80046ec <__kernel_rem_pio2+0x58>
 8004736:	4610      	mov	r0, r2
 8004738:	4619      	mov	r1, r3
 800473a:	e7f8      	b.n	800472e <__kernel_rem_pio2+0x9a>
 800473c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004740:	e9f9 0102 	ldrd	r0, r1, [r9, #8]!
 8004744:	f7fb fec0 	bl	80004c8 <__aeabi_dmul>
 8004748:	4602      	mov	r2, r0
 800474a:	460b      	mov	r3, r1
 800474c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8004750:	f7fb fd04 	bl	800015c <__adddf3>
 8004754:	e9cd 0100 	strd	r0, r1, [sp]
 8004758:	3601      	adds	r6, #1
 800475a:	9b06      	ldr	r3, [sp, #24]
 800475c:	3f08      	subs	r7, #8
 800475e:	429e      	cmp	r6, r3
 8004760:	ddec      	ble.n	800473c <__kernel_rem_pio2+0xa8>
 8004762:	e9dd 2300 	ldrd	r2, r3, [sp]
 8004766:	f108 0801 	add.w	r8, r8, #1
 800476a:	e8eb 2302 	strd	r2, r3, [fp], #8
 800476e:	3508      	adds	r5, #8
 8004770:	e7c6      	b.n	8004700 <__kernel_rem_pio2+0x6c>
 8004772:	9b02      	ldr	r3, [sp, #8]
 8004774:	aa0c      	add	r2, sp, #48	@ 0x30
 8004776:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800477a:	930b      	str	r3, [sp, #44]	@ 0x2c
 800477c:	9ba3      	ldr	r3, [sp, #652]	@ 0x28c
 800477e:	f8dd b008 	ldr.w	fp, [sp, #8]
 8004782:	eb03 0384 	add.w	r3, r3, r4, lsl #2
 8004786:	930a      	str	r3, [sp, #40]	@ 0x28
 8004788:	ab98      	add	r3, sp, #608	@ 0x260
 800478a:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 800478e:	e953 4528 	ldrd	r4, r5, [r3, #-160]	@ 0xa0
 8004792:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004794:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 8004798:	ae0c      	add	r6, sp, #48	@ 0x30
 800479a:	4698      	mov	r8, r3
 800479c:	46b1      	mov	r9, r6
 800479e:	465f      	mov	r7, fp
 80047a0:	9307      	str	r3, [sp, #28]
 80047a2:	2f00      	cmp	r7, #0
 80047a4:	f1a8 0808 	sub.w	r8, r8, #8
 80047a8:	dc71      	bgt.n	800488e <__kernel_rem_pio2+0x1fa>
 80047aa:	4652      	mov	r2, sl
 80047ac:	4620      	mov	r0, r4
 80047ae:	4629      	mov	r1, r5
 80047b0:	f000 fa96 	bl	8004ce0 <scalbn>
 80047b4:	2200      	movs	r2, #0
 80047b6:	f04f 537f 	mov.w	r3, #1069547520	@ 0x3fc00000
 80047ba:	4604      	mov	r4, r0
 80047bc:	460d      	mov	r5, r1
 80047be:	f7fb fe83 	bl	80004c8 <__aeabi_dmul>
 80047c2:	f000 fb05 	bl	8004dd0 <floor>
 80047c6:	2200      	movs	r2, #0
 80047c8:	4b6d      	ldr	r3, [pc, #436]	@ (8004980 <__kernel_rem_pio2+0x2ec>)
 80047ca:	f7fb fe7d 	bl	80004c8 <__aeabi_dmul>
 80047ce:	4602      	mov	r2, r0
 80047d0:	460b      	mov	r3, r1
 80047d2:	4620      	mov	r0, r4
 80047d4:	4629      	mov	r1, r5
 80047d6:	f7fb fcbf 	bl	8000158 <__aeabi_dsub>
 80047da:	460d      	mov	r5, r1
 80047dc:	4604      	mov	r4, r0
 80047de:	f7fc f90d 	bl	80009fc <__aeabi_d2iz>
 80047e2:	9005      	str	r0, [sp, #20]
 80047e4:	f7fb fe06 	bl	80003f4 <__aeabi_i2d>
 80047e8:	4602      	mov	r2, r0
 80047ea:	460b      	mov	r3, r1
 80047ec:	4620      	mov	r0, r4
 80047ee:	4629      	mov	r1, r5
 80047f0:	f7fb fcb2 	bl	8000158 <__aeabi_dsub>
 80047f4:	f1ba 0f00 	cmp.w	sl, #0
 80047f8:	4680      	mov	r8, r0
 80047fa:	4689      	mov	r9, r1
 80047fc:	dd6d      	ble.n	80048da <__kernel_rem_pio2+0x246>
 80047fe:	f10b 31ff 	add.w	r1, fp, #4294967295	@ 0xffffffff
 8004802:	ab0c      	add	r3, sp, #48	@ 0x30
 8004804:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 8004808:	9c05      	ldr	r4, [sp, #20]
 800480a:	f1ca 0018 	rsb	r0, sl, #24
 800480e:	fa43 f200 	asr.w	r2, r3, r0
 8004812:	4414      	add	r4, r2
 8004814:	4082      	lsls	r2, r0
 8004816:	1a9b      	subs	r3, r3, r2
 8004818:	aa0c      	add	r2, sp, #48	@ 0x30
 800481a:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
 800481e:	f1ca 0217 	rsb	r2, sl, #23
 8004822:	9405      	str	r4, [sp, #20]
 8004824:	4113      	asrs	r3, r2
 8004826:	9300      	str	r3, [sp, #0]
 8004828:	9b00      	ldr	r3, [sp, #0]
 800482a:	2b00      	cmp	r3, #0
 800482c:	dd64      	ble.n	80048f8 <__kernel_rem_pio2+0x264>
 800482e:	2200      	movs	r2, #0
 8004830:	f06f 417f 	mvn.w	r1, #4278190080	@ 0xff000000
 8004834:	4614      	mov	r4, r2
 8004836:	9b05      	ldr	r3, [sp, #20]
 8004838:	3301      	adds	r3, #1
 800483a:	9305      	str	r3, [sp, #20]
 800483c:	4593      	cmp	fp, r2
 800483e:	f300 80ab 	bgt.w	8004998 <__kernel_rem_pio2+0x304>
 8004842:	f1ba 0f00 	cmp.w	sl, #0
 8004846:	dd07      	ble.n	8004858 <__kernel_rem_pio2+0x1c4>
 8004848:	f1ba 0f01 	cmp.w	sl, #1
 800484c:	f000 80b2 	beq.w	80049b4 <__kernel_rem_pio2+0x320>
 8004850:	f1ba 0f02 	cmp.w	sl, #2
 8004854:	f000 80b9 	beq.w	80049ca <__kernel_rem_pio2+0x336>
 8004858:	9b00      	ldr	r3, [sp, #0]
 800485a:	2b02      	cmp	r3, #2
 800485c:	d14c      	bne.n	80048f8 <__kernel_rem_pio2+0x264>
 800485e:	4642      	mov	r2, r8
 8004860:	464b      	mov	r3, r9
 8004862:	2000      	movs	r0, #0
 8004864:	4947      	ldr	r1, [pc, #284]	@ (8004984 <__kernel_rem_pio2+0x2f0>)
 8004866:	f7fb fc77 	bl	8000158 <__aeabi_dsub>
 800486a:	4680      	mov	r8, r0
 800486c:	4689      	mov	r9, r1
 800486e:	2c00      	cmp	r4, #0
 8004870:	d042      	beq.n	80048f8 <__kernel_rem_pio2+0x264>
 8004872:	4652      	mov	r2, sl
 8004874:	2000      	movs	r0, #0
 8004876:	4943      	ldr	r1, [pc, #268]	@ (8004984 <__kernel_rem_pio2+0x2f0>)
 8004878:	f000 fa32 	bl	8004ce0 <scalbn>
 800487c:	4602      	mov	r2, r0
 800487e:	460b      	mov	r3, r1
 8004880:	4640      	mov	r0, r8
 8004882:	4649      	mov	r1, r9
 8004884:	f7fb fc68 	bl	8000158 <__aeabi_dsub>
 8004888:	4680      	mov	r8, r0
 800488a:	4689      	mov	r9, r1
 800488c:	e034      	b.n	80048f8 <__kernel_rem_pio2+0x264>
 800488e:	2200      	movs	r2, #0
 8004890:	4b3d      	ldr	r3, [pc, #244]	@ (8004988 <__kernel_rem_pio2+0x2f4>)
 8004892:	4620      	mov	r0, r4
 8004894:	4629      	mov	r1, r5
 8004896:	f7fb fe17 	bl	80004c8 <__aeabi_dmul>
 800489a:	f7fc f8af 	bl	80009fc <__aeabi_d2iz>
 800489e:	f7fb fda9 	bl	80003f4 <__aeabi_i2d>
 80048a2:	4602      	mov	r2, r0
 80048a4:	460b      	mov	r3, r1
 80048a6:	e9cd 2300 	strd	r2, r3, [sp]
 80048aa:	2200      	movs	r2, #0
 80048ac:	4b37      	ldr	r3, [pc, #220]	@ (800498c <__kernel_rem_pio2+0x2f8>)
 80048ae:	f7fb fe0b 	bl	80004c8 <__aeabi_dmul>
 80048b2:	4602      	mov	r2, r0
 80048b4:	460b      	mov	r3, r1
 80048b6:	4620      	mov	r0, r4
 80048b8:	4629      	mov	r1, r5
 80048ba:	f7fb fc4d 	bl	8000158 <__aeabi_dsub>
 80048be:	f7fc f89d 	bl	80009fc <__aeabi_d2iz>
 80048c2:	e9d8 2300 	ldrd	r2, r3, [r8]
 80048c6:	f849 0b04 	str.w	r0, [r9], #4
 80048ca:	e9dd 0100 	ldrd	r0, r1, [sp]
 80048ce:	f7fb fc45 	bl	800015c <__adddf3>
 80048d2:	3f01      	subs	r7, #1
 80048d4:	4604      	mov	r4, r0
 80048d6:	460d      	mov	r5, r1
 80048d8:	e763      	b.n	80047a2 <__kernel_rem_pio2+0x10e>
 80048da:	d106      	bne.n	80048ea <__kernel_rem_pio2+0x256>
 80048dc:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 80048e0:	aa0c      	add	r2, sp, #48	@ 0x30
 80048e2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80048e6:	15db      	asrs	r3, r3, #23
 80048e8:	e79d      	b.n	8004826 <__kernel_rem_pio2+0x192>
 80048ea:	2200      	movs	r2, #0
 80048ec:	4b28      	ldr	r3, [pc, #160]	@ (8004990 <__kernel_rem_pio2+0x2fc>)
 80048ee:	f7fc f871 	bl	80009d4 <__aeabi_dcmpge>
 80048f2:	2800      	cmp	r0, #0
 80048f4:	d13f      	bne.n	8004976 <__kernel_rem_pio2+0x2e2>
 80048f6:	9000      	str	r0, [sp, #0]
 80048f8:	2200      	movs	r2, #0
 80048fa:	2300      	movs	r3, #0
 80048fc:	4640      	mov	r0, r8
 80048fe:	4649      	mov	r1, r9
 8004900:	f7fc f84a 	bl	8000998 <__aeabi_dcmpeq>
 8004904:	2800      	cmp	r0, #0
 8004906:	f000 80af 	beq.w	8004a68 <__kernel_rem_pio2+0x3d4>
 800490a:	2200      	movs	r2, #0
 800490c:	f10b 33ff 	add.w	r3, fp, #4294967295	@ 0xffffffff
 8004910:	9902      	ldr	r1, [sp, #8]
 8004912:	428b      	cmp	r3, r1
 8004914:	da61      	bge.n	80049da <__kernel_rem_pio2+0x346>
 8004916:	2a00      	cmp	r2, #0
 8004918:	d076      	beq.n	8004a08 <__kernel_rem_pio2+0x374>
 800491a:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 800491e:	ab0c      	add	r3, sp, #48	@ 0x30
 8004920:	f853 302b 	ldr.w	r3, [r3, fp, lsl #2]
 8004924:	f1aa 0a18 	sub.w	sl, sl, #24
 8004928:	2b00      	cmp	r3, #0
 800492a:	d0f6      	beq.n	800491a <__kernel_rem_pio2+0x286>
 800492c:	4652      	mov	r2, sl
 800492e:	2000      	movs	r0, #0
 8004930:	4914      	ldr	r1, [pc, #80]	@ (8004984 <__kernel_rem_pio2+0x2f0>)
 8004932:	f000 f9d5 	bl	8004ce0 <scalbn>
 8004936:	465d      	mov	r5, fp
 8004938:	4606      	mov	r6, r0
 800493a:	460f      	mov	r7, r1
 800493c:	f04f 0900 	mov.w	r9, #0
 8004940:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004942:	f8df a044 	ldr.w	sl, [pc, #68]	@ 8004988 <__kernel_rem_pio2+0x2f4>
 8004946:	ea4f 04cb 	mov.w	r4, fp, lsl #3
 800494a:	eb03 08cb 	add.w	r8, r3, fp, lsl #3
 800494e:	2d00      	cmp	r5, #0
 8004950:	f280 80c0 	bge.w	8004ad4 <__kernel_rem_pio2+0x440>
 8004954:	465d      	mov	r5, fp
 8004956:	2d00      	cmp	r5, #0
 8004958:	f2c0 80f0 	blt.w	8004b3c <__kernel_rem_pio2+0x4a8>
 800495c:	4b0d      	ldr	r3, [pc, #52]	@ (8004994 <__kernel_rem_pio2+0x300>)
 800495e:	f04f 0900 	mov.w	r9, #0
 8004962:	9306      	str	r3, [sp, #24]
 8004964:	ab70      	add	r3, sp, #448	@ 0x1c0
 8004966:	f04f 0a00 	mov.w	sl, #0
 800496a:	2700      	movs	r7, #0
 800496c:	eb03 08c5 	add.w	r8, r3, r5, lsl #3
 8004970:	ebab 0605 	sub.w	r6, fp, r5
 8004974:	e0d6      	b.n	8004b24 <__kernel_rem_pio2+0x490>
 8004976:	2302      	movs	r3, #2
 8004978:	9300      	str	r3, [sp, #0]
 800497a:	e758      	b.n	800482e <__kernel_rem_pio2+0x19a>
 800497c:	08005270 	.word	0x08005270
 8004980:	40200000 	.word	0x40200000
 8004984:	3ff00000 	.word	0x3ff00000
 8004988:	3e700000 	.word	0x3e700000
 800498c:	41700000 	.word	0x41700000
 8004990:	3fe00000 	.word	0x3fe00000
 8004994:	08005230 	.word	0x08005230
 8004998:	f856 3b04 	ldr.w	r3, [r6], #4
 800499c:	b944      	cbnz	r4, 80049b0 <__kernel_rem_pio2+0x31c>
 800499e:	b123      	cbz	r3, 80049aa <__kernel_rem_pio2+0x316>
 80049a0:	f1c3 7380 	rsb	r3, r3, #16777216	@ 0x1000000
 80049a4:	f846 3c04 	str.w	r3, [r6, #-4]
 80049a8:	2301      	movs	r3, #1
 80049aa:	461c      	mov	r4, r3
 80049ac:	3201      	adds	r2, #1
 80049ae:	e745      	b.n	800483c <__kernel_rem_pio2+0x1a8>
 80049b0:	1acb      	subs	r3, r1, r3
 80049b2:	e7f7      	b.n	80049a4 <__kernel_rem_pio2+0x310>
 80049b4:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80049b8:	ab0c      	add	r3, sp, #48	@ 0x30
 80049ba:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049be:	f3c3 0316 	ubfx	r3, r3, #0, #23
 80049c2:	a90c      	add	r1, sp, #48	@ 0x30
 80049c4:	f841 3022 	str.w	r3, [r1, r2, lsl #2]
 80049c8:	e746      	b.n	8004858 <__kernel_rem_pio2+0x1c4>
 80049ca:	f10b 32ff 	add.w	r2, fp, #4294967295	@ 0xffffffff
 80049ce:	ab0c      	add	r3, sp, #48	@ 0x30
 80049d0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80049d4:	f3c3 0315 	ubfx	r3, r3, #0, #22
 80049d8:	e7f3      	b.n	80049c2 <__kernel_rem_pio2+0x32e>
 80049da:	a90c      	add	r1, sp, #48	@ 0x30
 80049dc:	f851 1023 	ldr.w	r1, [r1, r3, lsl #2]
 80049e0:	3b01      	subs	r3, #1
 80049e2:	430a      	orrs	r2, r1
 80049e4:	e794      	b.n	8004910 <__kernel_rem_pio2+0x27c>
 80049e6:	3401      	adds	r4, #1
 80049e8:	f853 2d04 	ldr.w	r2, [r3, #-4]!
 80049ec:	2a00      	cmp	r2, #0
 80049ee:	d0fa      	beq.n	80049e6 <__kernel_rem_pio2+0x352>
 80049f0:	9b08      	ldr	r3, [sp, #32]
 80049f2:	aa20      	add	r2, sp, #128	@ 0x80
 80049f4:	445b      	add	r3, fp
 80049f6:	f10b 0801 	add.w	r8, fp, #1
 80049fa:	eb02 05c3 	add.w	r5, r2, r3, lsl #3
 80049fe:	445c      	add	r4, fp
 8004a00:	4544      	cmp	r4, r8
 8004a02:	da04      	bge.n	8004a0e <__kernel_rem_pio2+0x37a>
 8004a04:	46a3      	mov	fp, r4
 8004a06:	e6bf      	b.n	8004788 <__kernel_rem_pio2+0xf4>
 8004a08:	2401      	movs	r4, #1
 8004a0a:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8004a0c:	e7ec      	b.n	80049e8 <__kernel_rem_pio2+0x354>
 8004a0e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8004a10:	46ab      	mov	fp, r5
 8004a12:	f853 0028 	ldr.w	r0, [r3, r8, lsl #2]
 8004a16:	f7fb fced 	bl	80003f4 <__aeabi_i2d>
 8004a1a:	f04f 0900 	mov.w	r9, #0
 8004a1e:	2600      	movs	r6, #0
 8004a20:	2700      	movs	r7, #0
 8004a22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004a24:	e9c5 0100 	strd	r0, r1, [r5]
 8004a28:	3b08      	subs	r3, #8
 8004a2a:	9300      	str	r3, [sp, #0]
 8004a2c:	9b06      	ldr	r3, [sp, #24]
 8004a2e:	4599      	cmp	r9, r3
 8004a30:	dd07      	ble.n	8004a42 <__kernel_rem_pio2+0x3ae>
 8004a32:	9b07      	ldr	r3, [sp, #28]
 8004a34:	f108 0801 	add.w	r8, r8, #1
 8004a38:	e9e3 6702 	strd	r6, r7, [r3, #8]!
 8004a3c:	3508      	adds	r5, #8
 8004a3e:	9307      	str	r3, [sp, #28]
 8004a40:	e7de      	b.n	8004a00 <__kernel_rem_pio2+0x36c>
 8004a42:	9900      	ldr	r1, [sp, #0]
 8004a44:	f109 0901 	add.w	r9, r9, #1
 8004a48:	e9f1 2302 	ldrd	r2, r3, [r1, #8]!
 8004a4c:	9100      	str	r1, [sp, #0]
 8004a4e:	e87b 0102 	ldrd	r0, r1, [fp], #-8
 8004a52:	f7fb fd39 	bl	80004c8 <__aeabi_dmul>
 8004a56:	4602      	mov	r2, r0
 8004a58:	460b      	mov	r3, r1
 8004a5a:	4630      	mov	r0, r6
 8004a5c:	4639      	mov	r1, r7
 8004a5e:	f7fb fb7d 	bl	800015c <__adddf3>
 8004a62:	4606      	mov	r6, r0
 8004a64:	460f      	mov	r7, r1
 8004a66:	e7e1      	b.n	8004a2c <__kernel_rem_pio2+0x398>
 8004a68:	f1ca 0200 	rsb	r2, sl, #0
 8004a6c:	4640      	mov	r0, r8
 8004a6e:	4649      	mov	r1, r9
 8004a70:	f000 f936 	bl	8004ce0 <scalbn>
 8004a74:	2200      	movs	r2, #0
 8004a76:	4b97      	ldr	r3, [pc, #604]	@ (8004cd4 <__kernel_rem_pio2+0x640>)
 8004a78:	4604      	mov	r4, r0
 8004a7a:	460d      	mov	r5, r1
 8004a7c:	f7fb ffaa 	bl	80009d4 <__aeabi_dcmpge>
 8004a80:	b300      	cbz	r0, 8004ac4 <__kernel_rem_pio2+0x430>
 8004a82:	2200      	movs	r2, #0
 8004a84:	4b94      	ldr	r3, [pc, #592]	@ (8004cd8 <__kernel_rem_pio2+0x644>)
 8004a86:	4620      	mov	r0, r4
 8004a88:	4629      	mov	r1, r5
 8004a8a:	f7fb fd1d 	bl	80004c8 <__aeabi_dmul>
 8004a8e:	f7fb ffb5 	bl	80009fc <__aeabi_d2iz>
 8004a92:	4606      	mov	r6, r0
 8004a94:	f7fb fcae 	bl	80003f4 <__aeabi_i2d>
 8004a98:	2200      	movs	r2, #0
 8004a9a:	4b8e      	ldr	r3, [pc, #568]	@ (8004cd4 <__kernel_rem_pio2+0x640>)
 8004a9c:	f7fb fd14 	bl	80004c8 <__aeabi_dmul>
 8004aa0:	460b      	mov	r3, r1
 8004aa2:	4602      	mov	r2, r0
 8004aa4:	4629      	mov	r1, r5
 8004aa6:	4620      	mov	r0, r4
 8004aa8:	f7fb fb56 	bl	8000158 <__aeabi_dsub>
 8004aac:	f7fb ffa6 	bl	80009fc <__aeabi_d2iz>
 8004ab0:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ab2:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004ab6:	f10b 0b01 	add.w	fp, fp, #1
 8004aba:	f10a 0a18 	add.w	sl, sl, #24
 8004abe:	f843 602b 	str.w	r6, [r3, fp, lsl #2]
 8004ac2:	e733      	b.n	800492c <__kernel_rem_pio2+0x298>
 8004ac4:	4620      	mov	r0, r4
 8004ac6:	4629      	mov	r1, r5
 8004ac8:	f7fb ff98 	bl	80009fc <__aeabi_d2iz>
 8004acc:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ace:	f843 002b 	str.w	r0, [r3, fp, lsl #2]
 8004ad2:	e72b      	b.n	800492c <__kernel_rem_pio2+0x298>
 8004ad4:	ab0c      	add	r3, sp, #48	@ 0x30
 8004ad6:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8004ada:	f7fb fc8b 	bl	80003f4 <__aeabi_i2d>
 8004ade:	4632      	mov	r2, r6
 8004ae0:	463b      	mov	r3, r7
 8004ae2:	f7fb fcf1 	bl	80004c8 <__aeabi_dmul>
 8004ae6:	464a      	mov	r2, r9
 8004ae8:	e868 0102 	strd	r0, r1, [r8], #-8
 8004aec:	4653      	mov	r3, sl
 8004aee:	4630      	mov	r0, r6
 8004af0:	4639      	mov	r1, r7
 8004af2:	f7fb fce9 	bl	80004c8 <__aeabi_dmul>
 8004af6:	3d01      	subs	r5, #1
 8004af8:	4606      	mov	r6, r0
 8004afa:	460f      	mov	r7, r1
 8004afc:	e727      	b.n	800494e <__kernel_rem_pio2+0x2ba>
 8004afe:	f8dd c018 	ldr.w	ip, [sp, #24]
 8004b02:	e8f8 2302 	ldrd	r2, r3, [r8], #8
 8004b06:	e8fc 0102 	ldrd	r0, r1, [ip], #8
 8004b0a:	f8cd c018 	str.w	ip, [sp, #24]
 8004b0e:	f7fb fcdb 	bl	80004c8 <__aeabi_dmul>
 8004b12:	4602      	mov	r2, r0
 8004b14:	460b      	mov	r3, r1
 8004b16:	4648      	mov	r0, r9
 8004b18:	4651      	mov	r1, sl
 8004b1a:	f7fb fb1f 	bl	800015c <__adddf3>
 8004b1e:	4681      	mov	r9, r0
 8004b20:	468a      	mov	sl, r1
 8004b22:	3701      	adds	r7, #1
 8004b24:	9b02      	ldr	r3, [sp, #8]
 8004b26:	429f      	cmp	r7, r3
 8004b28:	dc01      	bgt.n	8004b2e <__kernel_rem_pio2+0x49a>
 8004b2a:	42be      	cmp	r6, r7
 8004b2c:	dae7      	bge.n	8004afe <__kernel_rem_pio2+0x46a>
 8004b2e:	ab48      	add	r3, sp, #288	@ 0x120
 8004b30:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8004b34:	e9c6 9a00 	strd	r9, sl, [r6]
 8004b38:	3d01      	subs	r5, #1
 8004b3a:	e70c      	b.n	8004956 <__kernel_rem_pio2+0x2c2>
 8004b3c:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004b3e:	2b02      	cmp	r3, #2
 8004b40:	dc09      	bgt.n	8004b56 <__kernel_rem_pio2+0x4c2>
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	dc2c      	bgt.n	8004ba0 <__kernel_rem_pio2+0x50c>
 8004b46:	d04e      	beq.n	8004be6 <__kernel_rem_pio2+0x552>
 8004b48:	9b05      	ldr	r3, [sp, #20]
 8004b4a:	f003 0007 	and.w	r0, r3, #7
 8004b4e:	f50d 7d19 	add.w	sp, sp, #612	@ 0x264
 8004b52:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004b56:	9ba2      	ldr	r3, [sp, #648]	@ 0x288
 8004b58:	2b03      	cmp	r3, #3
 8004b5a:	d1f5      	bne.n	8004b48 <__kernel_rem_pio2+0x4b4>
 8004b5c:	ab48      	add	r3, sp, #288	@ 0x120
 8004b5e:	441c      	add	r4, r3
 8004b60:	4625      	mov	r5, r4
 8004b62:	46da      	mov	sl, fp
 8004b64:	f1ba 0f00 	cmp.w	sl, #0
 8004b68:	dc63      	bgt.n	8004c32 <__kernel_rem_pio2+0x59e>
 8004b6a:	4625      	mov	r5, r4
 8004b6c:	46da      	mov	sl, fp
 8004b6e:	f1ba 0f01 	cmp.w	sl, #1
 8004b72:	dc7b      	bgt.n	8004c6c <__kernel_rem_pio2+0x5d8>
 8004b74:	2000      	movs	r0, #0
 8004b76:	2100      	movs	r1, #0
 8004b78:	f1bb 0f01 	cmp.w	fp, #1
 8004b7c:	f300 8093 	bgt.w	8004ca6 <__kernel_rem_pio2+0x612>
 8004b80:	e9dd 7848 	ldrd	r7, r8, [sp, #288]	@ 0x120
 8004b84:	e9dd 564a 	ldrd	r5, r6, [sp, #296]	@ 0x128
 8004b88:	9b00      	ldr	r3, [sp, #0]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	f040 8092 	bne.w	8004cb4 <__kernel_rem_pio2+0x620>
 8004b90:	9b04      	ldr	r3, [sp, #16]
 8004b92:	e9c3 7800 	strd	r7, r8, [r3]
 8004b96:	e9c3 5602 	strd	r5, r6, [r3, #8]
 8004b9a:	e9c3 0104 	strd	r0, r1, [r3, #16]
 8004b9e:	e7d3      	b.n	8004b48 <__kernel_rem_pio2+0x4b4>
 8004ba0:	465d      	mov	r5, fp
 8004ba2:	2000      	movs	r0, #0
 8004ba4:	2100      	movs	r1, #0
 8004ba6:	ab48      	add	r3, sp, #288	@ 0x120
 8004ba8:	441c      	add	r4, r3
 8004baa:	2d00      	cmp	r5, #0
 8004bac:	da32      	bge.n	8004c14 <__kernel_rem_pio2+0x580>
 8004bae:	9b00      	ldr	r3, [sp, #0]
 8004bb0:	2b00      	cmp	r3, #0
 8004bb2:	d035      	beq.n	8004c20 <__kernel_rem_pio2+0x58c>
 8004bb4:	4602      	mov	r2, r0
 8004bb6:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bba:	9c04      	ldr	r4, [sp, #16]
 8004bbc:	2501      	movs	r5, #1
 8004bbe:	e9c4 2300 	strd	r2, r3, [r4]
 8004bc2:	4602      	mov	r2, r0
 8004bc4:	460b      	mov	r3, r1
 8004bc6:	e9dd 0148 	ldrd	r0, r1, [sp, #288]	@ 0x120
 8004bca:	f7fb fac5 	bl	8000158 <__aeabi_dsub>
 8004bce:	ac48      	add	r4, sp, #288	@ 0x120
 8004bd0:	45ab      	cmp	fp, r5
 8004bd2:	da28      	bge.n	8004c26 <__kernel_rem_pio2+0x592>
 8004bd4:	9b00      	ldr	r3, [sp, #0]
 8004bd6:	b113      	cbz	r3, 8004bde <__kernel_rem_pio2+0x54a>
 8004bd8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bdc:	4619      	mov	r1, r3
 8004bde:	9b04      	ldr	r3, [sp, #16]
 8004be0:	e9c3 0102 	strd	r0, r1, [r3, #8]
 8004be4:	e7b0      	b.n	8004b48 <__kernel_rem_pio2+0x4b4>
 8004be6:	2000      	movs	r0, #0
 8004be8:	2100      	movs	r1, #0
 8004bea:	ab48      	add	r3, sp, #288	@ 0x120
 8004bec:	441c      	add	r4, r3
 8004bee:	f1bb 0f00 	cmp.w	fp, #0
 8004bf2:	da08      	bge.n	8004c06 <__kernel_rem_pio2+0x572>
 8004bf4:	9b00      	ldr	r3, [sp, #0]
 8004bf6:	b113      	cbz	r3, 8004bfe <__kernel_rem_pio2+0x56a>
 8004bf8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004bfc:	4619      	mov	r1, r3
 8004bfe:	9b04      	ldr	r3, [sp, #16]
 8004c00:	e9c3 0100 	strd	r0, r1, [r3]
 8004c04:	e7a0      	b.n	8004b48 <__kernel_rem_pio2+0x4b4>
 8004c06:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004c0a:	f7fb faa7 	bl	800015c <__adddf3>
 8004c0e:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004c12:	e7ec      	b.n	8004bee <__kernel_rem_pio2+0x55a>
 8004c14:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004c18:	f7fb faa0 	bl	800015c <__adddf3>
 8004c1c:	3d01      	subs	r5, #1
 8004c1e:	e7c4      	b.n	8004baa <__kernel_rem_pio2+0x516>
 8004c20:	4602      	mov	r2, r0
 8004c22:	460b      	mov	r3, r1
 8004c24:	e7c9      	b.n	8004bba <__kernel_rem_pio2+0x526>
 8004c26:	e9f4 2302 	ldrd	r2, r3, [r4, #8]!
 8004c2a:	f7fb fa97 	bl	800015c <__adddf3>
 8004c2e:	3501      	adds	r5, #1
 8004c30:	e7ce      	b.n	8004bd0 <__kernel_rem_pio2+0x53c>
 8004c32:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c36:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004c3a:	4640      	mov	r0, r8
 8004c3c:	4649      	mov	r1, r9
 8004c3e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c42:	f7fb fa8b 	bl	800015c <__adddf3>
 8004c46:	4602      	mov	r2, r0
 8004c48:	460b      	mov	r3, r1
 8004c4a:	4606      	mov	r6, r0
 8004c4c:	460f      	mov	r7, r1
 8004c4e:	4640      	mov	r0, r8
 8004c50:	4649      	mov	r1, r9
 8004c52:	f7fb fa81 	bl	8000158 <__aeabi_dsub>
 8004c56:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c5a:	f7fb fa7f 	bl	800015c <__adddf3>
 8004c5e:	e865 0102 	strd	r0, r1, [r5], #-8
 8004c62:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004c66:	e9c5 6700 	strd	r6, r7, [r5]
 8004c6a:	e77b      	b.n	8004b64 <__kernel_rem_pio2+0x4d0>
 8004c6c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8004c70:	e955 8902 	ldrd	r8, r9, [r5, #-8]
 8004c74:	4640      	mov	r0, r8
 8004c76:	4649      	mov	r1, r9
 8004c78:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8004c7c:	f7fb fa6e 	bl	800015c <__adddf3>
 8004c80:	4602      	mov	r2, r0
 8004c82:	460b      	mov	r3, r1
 8004c84:	4606      	mov	r6, r0
 8004c86:	460f      	mov	r7, r1
 8004c88:	4640      	mov	r0, r8
 8004c8a:	4649      	mov	r1, r9
 8004c8c:	f7fb fa64 	bl	8000158 <__aeabi_dsub>
 8004c90:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8004c94:	f7fb fa62 	bl	800015c <__adddf3>
 8004c98:	e865 0102 	strd	r0, r1, [r5], #-8
 8004c9c:	f10a 3aff 	add.w	sl, sl, #4294967295	@ 0xffffffff
 8004ca0:	e9c5 6700 	strd	r6, r7, [r5]
 8004ca4:	e763      	b.n	8004b6e <__kernel_rem_pio2+0x4da>
 8004ca6:	e874 2302 	ldrd	r2, r3, [r4], #-8
 8004caa:	f7fb fa57 	bl	800015c <__adddf3>
 8004cae:	f10b 3bff 	add.w	fp, fp, #4294967295	@ 0xffffffff
 8004cb2:	e761      	b.n	8004b78 <__kernel_rem_pio2+0x4e4>
 8004cb4:	9b04      	ldr	r3, [sp, #16]
 8004cb6:	9a04      	ldr	r2, [sp, #16]
 8004cb8:	f108 4400 	add.w	r4, r8, #2147483648	@ 0x80000000
 8004cbc:	601f      	str	r7, [r3, #0]
 8004cbe:	605c      	str	r4, [r3, #4]
 8004cc0:	609d      	str	r5, [r3, #8]
 8004cc2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8004cc6:	60d3      	str	r3, [r2, #12]
 8004cc8:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8004ccc:	6110      	str	r0, [r2, #16]
 8004cce:	6153      	str	r3, [r2, #20]
 8004cd0:	e73a      	b.n	8004b48 <__kernel_rem_pio2+0x4b4>
 8004cd2:	bf00      	nop
 8004cd4:	41700000 	.word	0x41700000
 8004cd8:	3e700000 	.word	0x3e700000
 8004cdc:	00000000 	.word	0x00000000

08004ce0 <scalbn>:
 8004ce0:	e92d 48f0 	stmdb	sp!, {r4, r5, r6, r7, fp, lr}
 8004ce4:	4616      	mov	r6, r2
 8004ce6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004cea:	4683      	mov	fp, r0
 8004cec:	468c      	mov	ip, r1
 8004cee:	460b      	mov	r3, r1
 8004cf0:	b982      	cbnz	r2, 8004d14 <scalbn+0x34>
 8004cf2:	f021 4300 	bic.w	r3, r1, #2147483648	@ 0x80000000
 8004cf6:	4303      	orrs	r3, r0
 8004cf8:	d039      	beq.n	8004d6e <scalbn+0x8e>
 8004cfa:	4b2f      	ldr	r3, [pc, #188]	@ (8004db8 <scalbn+0xd8>)
 8004cfc:	2200      	movs	r2, #0
 8004cfe:	f7fb fbe3 	bl	80004c8 <__aeabi_dmul>
 8004d02:	4b2e      	ldr	r3, [pc, #184]	@ (8004dbc <scalbn+0xdc>)
 8004d04:	4683      	mov	fp, r0
 8004d06:	429e      	cmp	r6, r3
 8004d08:	468c      	mov	ip, r1
 8004d0a:	da0d      	bge.n	8004d28 <scalbn+0x48>
 8004d0c:	a326      	add	r3, pc, #152	@ (adr r3, 8004da8 <scalbn+0xc8>)
 8004d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d12:	e01b      	b.n	8004d4c <scalbn+0x6c>
 8004d14:	f240 77ff 	movw	r7, #2047	@ 0x7ff
 8004d18:	42ba      	cmp	r2, r7
 8004d1a:	d109      	bne.n	8004d30 <scalbn+0x50>
 8004d1c:	4602      	mov	r2, r0
 8004d1e:	f7fb fa1d 	bl	800015c <__adddf3>
 8004d22:	4683      	mov	fp, r0
 8004d24:	468c      	mov	ip, r1
 8004d26:	e022      	b.n	8004d6e <scalbn+0x8e>
 8004d28:	460b      	mov	r3, r1
 8004d2a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8004d2e:	3a36      	subs	r2, #54	@ 0x36
 8004d30:	f24c 3150 	movw	r1, #50000	@ 0xc350
 8004d34:	428e      	cmp	r6, r1
 8004d36:	dd0c      	ble.n	8004d52 <scalbn+0x72>
 8004d38:	a31d      	add	r3, pc, #116	@ (adr r3, 8004db0 <scalbn+0xd0>)
 8004d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d3e:	461c      	mov	r4, r3
 8004d40:	ea4f 71dc 	mov.w	r1, ip, lsr #31
 8004d44:	f361 74df 	bfi	r4, r1, #31, #1
 8004d48:	4621      	mov	r1, r4
 8004d4a:	481d      	ldr	r0, [pc, #116]	@ (8004dc0 <scalbn+0xe0>)
 8004d4c:	f7fb fbbc 	bl	80004c8 <__aeabi_dmul>
 8004d50:	e7e7      	b.n	8004d22 <scalbn+0x42>
 8004d52:	f240 71fe 	movw	r1, #2046	@ 0x7fe
 8004d56:	4432      	add	r2, r6
 8004d58:	428a      	cmp	r2, r1
 8004d5a:	dced      	bgt.n	8004d38 <scalbn+0x58>
 8004d5c:	2a00      	cmp	r2, #0
 8004d5e:	dd0a      	ble.n	8004d76 <scalbn+0x96>
 8004d60:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004d64:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d68:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d6c:	46ac      	mov	ip, r5
 8004d6e:	4658      	mov	r0, fp
 8004d70:	4661      	mov	r1, ip
 8004d72:	e8bd 88f0 	ldmia.w	sp!, {r4, r5, r6, r7, fp, pc}
 8004d76:	f112 0f35 	cmn.w	r2, #53	@ 0x35
 8004d7a:	da09      	bge.n	8004d90 <scalbn+0xb0>
 8004d7c:	f00c 4300 	and.w	r3, ip, #2147483648	@ 0x80000000
 8004d80:	f043 71d2 	orr.w	r1, r3, #27525120	@ 0x1a40000
 8004d84:	f441 31b7 	orr.w	r1, r1, #93696	@ 0x16e00
 8004d88:	480e      	ldr	r0, [pc, #56]	@ (8004dc4 <scalbn+0xe4>)
 8004d8a:	f041 011f 	orr.w	r1, r1, #31
 8004d8e:	e7bd      	b.n	8004d0c <scalbn+0x2c>
 8004d90:	f023 43ff 	bic.w	r3, r3, #2139095040	@ 0x7f800000
 8004d94:	3236      	adds	r2, #54	@ 0x36
 8004d96:	f423 03e0 	bic.w	r3, r3, #7340032	@ 0x700000
 8004d9a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8004d9e:	4658      	mov	r0, fp
 8004da0:	4629      	mov	r1, r5
 8004da2:	2200      	movs	r2, #0
 8004da4:	4b08      	ldr	r3, [pc, #32]	@ (8004dc8 <scalbn+0xe8>)
 8004da6:	e7d1      	b.n	8004d4c <scalbn+0x6c>
 8004da8:	c2f8f359 	.word	0xc2f8f359
 8004dac:	01a56e1f 	.word	0x01a56e1f
 8004db0:	8800759c 	.word	0x8800759c
 8004db4:	7e37e43c 	.word	0x7e37e43c
 8004db8:	43500000 	.word	0x43500000
 8004dbc:	ffff3cb0 	.word	0xffff3cb0
 8004dc0:	8800759c 	.word	0x8800759c
 8004dc4:	c2f8f359 	.word	0xc2f8f359
 8004dc8:	3c900000 	.word	0x3c900000
 8004dcc:	00000000 	.word	0x00000000

08004dd0 <floor>:
 8004dd0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004dd4:	f3c1 570a 	ubfx	r7, r1, #20, #11
 8004dd8:	f2a7 36ff 	subw	r6, r7, #1023	@ 0x3ff
 8004ddc:	2e13      	cmp	r6, #19
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	460c      	mov	r4, r1
 8004de4:	4605      	mov	r5, r0
 8004de6:	4680      	mov	r8, r0
 8004de8:	dc35      	bgt.n	8004e56 <floor+0x86>
 8004dea:	2e00      	cmp	r6, #0
 8004dec:	da17      	bge.n	8004e1e <floor+0x4e>
 8004dee:	a334      	add	r3, pc, #208	@ (adr r3, 8004ec0 <floor+0xf0>)
 8004df0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004df4:	f7fb f9b2 	bl	800015c <__adddf3>
 8004df8:	2200      	movs	r2, #0
 8004dfa:	2300      	movs	r3, #0
 8004dfc:	f7fb fdf4 	bl	80009e8 <__aeabi_dcmpgt>
 8004e00:	b150      	cbz	r0, 8004e18 <floor+0x48>
 8004e02:	2c00      	cmp	r4, #0
 8004e04:	da57      	bge.n	8004eb6 <floor+0xe6>
 8004e06:	f024 4400 	bic.w	r4, r4, #2147483648	@ 0x80000000
 8004e0a:	432c      	orrs	r4, r5
 8004e0c:	2500      	movs	r5, #0
 8004e0e:	42ac      	cmp	r4, r5
 8004e10:	4c2d      	ldr	r4, [pc, #180]	@ (8004ec8 <floor+0xf8>)
 8004e12:	bf08      	it	eq
 8004e14:	f04f 4400 	moveq.w	r4, #2147483648	@ 0x80000000
 8004e18:	4623      	mov	r3, r4
 8004e1a:	462a      	mov	r2, r5
 8004e1c:	e024      	b.n	8004e68 <floor+0x98>
 8004e1e:	4f2b      	ldr	r7, [pc, #172]	@ (8004ecc <floor+0xfc>)
 8004e20:	4137      	asrs	r7, r6
 8004e22:	ea01 0c07 	and.w	ip, r1, r7
 8004e26:	ea5c 0c00 	orrs.w	ip, ip, r0
 8004e2a:	d01d      	beq.n	8004e68 <floor+0x98>
 8004e2c:	a324      	add	r3, pc, #144	@ (adr r3, 8004ec0 <floor+0xf0>)
 8004e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e32:	f7fb f993 	bl	800015c <__adddf3>
 8004e36:	2200      	movs	r2, #0
 8004e38:	2300      	movs	r3, #0
 8004e3a:	f7fb fdd5 	bl	80009e8 <__aeabi_dcmpgt>
 8004e3e:	2800      	cmp	r0, #0
 8004e40:	d0ea      	beq.n	8004e18 <floor+0x48>
 8004e42:	2c00      	cmp	r4, #0
 8004e44:	bfbe      	ittt	lt
 8004e46:	f44f 1380 	movlt.w	r3, #1048576	@ 0x100000
 8004e4a:	4133      	asrlt	r3, r6
 8004e4c:	18e4      	addlt	r4, r4, r3
 8004e4e:	2500      	movs	r5, #0
 8004e50:	ea24 0407 	bic.w	r4, r4, r7
 8004e54:	e7e0      	b.n	8004e18 <floor+0x48>
 8004e56:	2e33      	cmp	r6, #51	@ 0x33
 8004e58:	dd0a      	ble.n	8004e70 <floor+0xa0>
 8004e5a:	f5b6 6f80 	cmp.w	r6, #1024	@ 0x400
 8004e5e:	d103      	bne.n	8004e68 <floor+0x98>
 8004e60:	f7fb f97c 	bl	800015c <__adddf3>
 8004e64:	4602      	mov	r2, r0
 8004e66:	460b      	mov	r3, r1
 8004e68:	4610      	mov	r0, r2
 8004e6a:	4619      	mov	r1, r3
 8004e6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8004e70:	f04f 3cff 	mov.w	ip, #4294967295	@ 0xffffffff
 8004e74:	f2a7 4713 	subw	r7, r7, #1043	@ 0x413
 8004e78:	fa2c f707 	lsr.w	r7, ip, r7
 8004e7c:	4207      	tst	r7, r0
 8004e7e:	d0f3      	beq.n	8004e68 <floor+0x98>
 8004e80:	a30f      	add	r3, pc, #60	@ (adr r3, 8004ec0 <floor+0xf0>)
 8004e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e86:	f7fb f969 	bl	800015c <__adddf3>
 8004e8a:	2200      	movs	r2, #0
 8004e8c:	2300      	movs	r3, #0
 8004e8e:	f7fb fdab 	bl	80009e8 <__aeabi_dcmpgt>
 8004e92:	2800      	cmp	r0, #0
 8004e94:	d0c0      	beq.n	8004e18 <floor+0x48>
 8004e96:	2c00      	cmp	r4, #0
 8004e98:	da0a      	bge.n	8004eb0 <floor+0xe0>
 8004e9a:	2e14      	cmp	r6, #20
 8004e9c:	d101      	bne.n	8004ea2 <floor+0xd2>
 8004e9e:	3401      	adds	r4, #1
 8004ea0:	e006      	b.n	8004eb0 <floor+0xe0>
 8004ea2:	2301      	movs	r3, #1
 8004ea4:	f1c6 0634 	rsb	r6, r6, #52	@ 0x34
 8004ea8:	40b3      	lsls	r3, r6
 8004eaa:	441d      	add	r5, r3
 8004eac:	4545      	cmp	r5, r8
 8004eae:	d3f6      	bcc.n	8004e9e <floor+0xce>
 8004eb0:	ea25 0507 	bic.w	r5, r5, r7
 8004eb4:	e7b0      	b.n	8004e18 <floor+0x48>
 8004eb6:	2500      	movs	r5, #0
 8004eb8:	462c      	mov	r4, r5
 8004eba:	e7ad      	b.n	8004e18 <floor+0x48>
 8004ebc:	f3af 8000 	nop.w
 8004ec0:	8800759c 	.word	0x8800759c
 8004ec4:	7e37e43c 	.word	0x7e37e43c
 8004ec8:	bff00000 	.word	0xbff00000
 8004ecc:	000fffff 	.word	0x000fffff

08004ed0 <_init>:
 8004ed0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ed2:	bf00      	nop
 8004ed4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ed6:	bc08      	pop	{r3}
 8004ed8:	469e      	mov	lr, r3
 8004eda:	4770      	bx	lr

08004edc <_fini>:
 8004edc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004ede:	bf00      	nop
 8004ee0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8004ee2:	bc08      	pop	{r3}
 8004ee4:	469e      	mov	lr, r3
 8004ee6:	4770      	bx	lr
