
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005558  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000025c  08005668  08005668  00006668  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080058c4  080058c4  00007090  2**0
                  CONTENTS
  4 .ARM          00000000  080058c4  080058c4  00007090  2**0
                  CONTENTS
  5 .preinit_array 00000000  080058c4  080058c4  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080058c4  080058c4  000068c4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  080058c8  080058c8  000068c8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  080058cc  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  20000090  0800595c  00007090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  0800595c  0000742c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b203  00000000  00000000  000070b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000216c  00000000  00000000  000122bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d60  00000000  00000000  00014428  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a5b  00000000  00000000  00015188  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000035cd  00000000  00000000  00015be3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e22e  00000000  00000000  000191b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c675  00000000  00000000  000273de  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b3a53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000421c  00000000  00000000  000b3a98  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000b7cb4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08005650 	.word	0x08005650

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08005650 	.word	0x08005650

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2iz>:
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e50:	d30f      	bcc.n	8000e72 <__aeabi_f2iz+0x2a>
 8000e52:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d90d      	bls.n	8000e78 <__aeabi_f2iz+0x30>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e64:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	bf18      	it	ne
 8000e6e:	4240      	negne	r0, r0
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2iz+0x3a>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d105      	bne.n	8000e8e <__aeabi_f2iz+0x46>
 8000e82:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e8c:	4770      	bx	lr
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	4770      	bx	lr

08000e94 <on_event>:
#include "event.h"


static uint8_t is_button_held = 0;

void on_event() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8000e98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9c:	480e      	ldr	r0, [pc, #56]	@ (8000ed8 <on_event+0x44>)
 8000e9e:	f001 ffef 	bl	8002e80 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10c      	bne.n	8000ec2 <on_event+0x2e>
		if (!is_button_held) {
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <on_event+0x48>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <on_event+0x28>
			is_button_held = 1;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <on_event+0x48>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8000eb6:	f000 fc0d 	bl	80016d4 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8000eba:	e00b      	b.n	8000ed4 <on_event+0x40>
			on_button_held();
 8000ebc:	f000 fc20 	bl	8001700 <on_button_held>
}
 8000ec0:	e008      	b.n	8000ed4 <on_event+0x40>
		if (is_button_held) {
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <on_event+0x48>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <on_event+0x40>
			is_button_held = 0;
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <on_event+0x48>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			on_button_released();
 8000ed0:	f000 fc4a 	bl	8001768 <on_button_released>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	200000ac 	.word	0x200000ac

08000ee0 <respawn_obstacle>:


Obstacle obstacles[OBSTACLES_MAX];


void respawn_obstacle(int i) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	int last = WIDTH - OBSTACLES_MIN_SPACING;
 8000ee8:	2334      	movs	r3, #52	@ 0x34
 8000eea:	617b      	str	r3, [r7, #20]
	for (int j = 0; j < OBSTACLES_MAX; ++j) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e016      	b.n	8000f20 <respawn_obstacle+0x40>
		if (obstacles[j].rect.x > last) {
 8000ef2:	4989      	ldr	r1, [pc, #548]	@ (8001118 <respawn_obstacle+0x238>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	da08      	bge.n	8000f1a <respawn_obstacle+0x3a>
			last = obstacles[j].rect.x;
 8000f08:	4983      	ldr	r1, [pc, #524]	@ (8001118 <respawn_obstacle+0x238>)
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	617b      	str	r3, [r7, #20]
	for (int j = 0; j < OBSTACLES_MAX; ++j) {
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b09      	cmp	r3, #9
 8000f24:	dde5      	ble.n	8000ef2 <respawn_obstacle+0x12>
		}
	}

	obstacles[i].rect.x = last + OBSTACLES_MIN_SPACING;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f103 010c 	add.w	r1, r3, #12
 8000f2c:	487a      	ldr	r0, [pc, #488]	@ (8001118 <respawn_obstacle+0x238>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4403      	add	r3, r0
 8000f3a:	6019      	str	r1, [r3, #0]
	int offset = (rand()%OBSTACLES_MAX_SPACING);
 8000f3c:	f003 fba0 	bl	8004680 <rand>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b76      	ldr	r3, [pc, #472]	@ (800111c <respawn_obstacle+0x23c>)
 8000f44:	fb83 1302 	smull	r1, r3, r3, r2
 8000f48:	1119      	asrs	r1, r3, #4
 8000f4a:	17d3      	asrs	r3, r2, #31
 8000f4c:	1ac9      	subs	r1, r1, r3
 8000f4e:	460b      	mov	r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	60bb      	str	r3, [r7, #8]
	if (offset > 0) {
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd11      	ble.n	8000f84 <respawn_obstacle+0xa4>
		obstacles[i].rect.x += offset;
 8000f60:	496d      	ldr	r1, [pc, #436]	@ (8001118 <respawn_obstacle+0x238>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	18d1      	adds	r1, r2, r3
 8000f74:	4868      	ldr	r0, [pc, #416]	@ (8001118 <respawn_obstacle+0x238>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4403      	add	r3, r0
 8000f82:	6019      	str	r1, [r3, #0]
	}
	if (obstacles[i].rect.x - last < OBSTACLES_MIN_SPACING) {
 8000f84:	4964      	ldr	r1, [pc, #400]	@ (8001118 <respawn_obstacle+0x238>)
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b0b      	cmp	r3, #11
 8000f9a:	dc01      	bgt.n	8000fa0 <respawn_obstacle+0xc0>
		buzzer();
 8000f9c:	f000 fc00 	bl	80017a0 <buzzer>
	}

	obstacles[i].velocity = OBSTACLES_VELOCITY + OBSTACLES_VELOCITY * (dino.score/100.0);
 8000fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <respawn_obstacle+0x240>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa25 	bl	80003f4 <__aeabi_i2d>
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <respawn_obstacle+0x244>)
 8000fb0:	f7ff fbb4 	bl	800071c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b59      	ldr	r3, [pc, #356]	@ (8001128 <respawn_obstacle+0x248>)
 8000fc2:	f7ff fa81 	bl	80004c8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b56      	ldr	r3, [pc, #344]	@ (800112c <respawn_obstacle+0x24c>)
 8000fd4:	f7ff f8c0 	bl	8000158 <__aeabi_dsub>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fc84 	bl	80008ec <__aeabi_d2f>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	484c      	ldr	r0, [pc, #304]	@ (8001118 <respawn_obstacle+0x238>)
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4403      	add	r3, r0
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	6019      	str	r1, [r3, #0]

	int y = GROUND_Y - 2;
 8000ff8:	2318      	movs	r3, #24
 8000ffa:	60fb      	str	r3, [r7, #12]
	if (rand()%100 < 20) {
 8000ffc:	f003 fb40 	bl	8004680 <rand>
 8001000:	4602      	mov	r2, r0
 8001002:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <respawn_obstacle+0x250>)
 8001004:	fb83 1302 	smull	r1, r3, r3, r2
 8001008:	1159      	asrs	r1, r3, #5
 800100a:	17d3      	asrs	r3, r2, #31
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	2164      	movs	r1, #100	@ 0x64
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b13      	cmp	r3, #19
 8001018:	dc3c      	bgt.n	8001094 <respawn_obstacle+0x1b4>
		y = GROUND_Y - 7;
 800101a:	2313      	movs	r3, #19
 800101c:	60fb      	str	r3, [r7, #12]

		if (rand()%100 < 20) {
 800101e:	f003 fb2f 	bl	8004680 <rand>
 8001022:	4602      	mov	r2, r0
 8001024:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <respawn_obstacle+0x250>)
 8001026:	fb83 1302 	smull	r1, r3, r3, r2
 800102a:	1159      	asrs	r1, r3, #5
 800102c:	17d3      	asrs	r3, r2, #31
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	2164      	movs	r1, #100	@ 0x64
 8001032:	fb01 f303 	mul.w	r3, r1, r3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b13      	cmp	r3, #19
 800103a:	dc2b      	bgt.n	8001094 <respawn_obstacle+0x1b4>
			obstacles[i].velocity = OBSTACLES_VELOCITY + OBSTACLES_VELOCITY * (dino.score/20.0);
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <respawn_obstacle+0x240>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f9d7 	bl	80003f4 <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b3a      	ldr	r3, [pc, #232]	@ (8001134 <respawn_obstacle+0x254>)
 800104c:	f7ff fb66 	bl	800071c <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <respawn_obstacle+0x248>)
 800105e:	f7ff fa33 	bl	80004c8 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <respawn_obstacle+0x24c>)
 8001070:	f7ff f872 	bl	8000158 <__aeabi_dsub>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fc36 	bl	80008ec <__aeabi_d2f>
 8001080:	4601      	mov	r1, r0
 8001082:	4825      	ldr	r0, [pc, #148]	@ (8001118 <respawn_obstacle+0x238>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4403      	add	r3, r0
 8001090:	3318      	adds	r3, #24
 8001092:	6019      	str	r1, [r3, #0]
		}
	}

	obstacles[i].real_x = obstacles[i].rect.x;
 8001094:	4920      	ldr	r1, [pc, #128]	@ (8001118 <respawn_obstacle+0x238>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fd2b 	bl	8000b00 <__aeabi_i2f>
 80010aa:	4601      	mov	r1, r0
 80010ac:	481a      	ldr	r0, [pc, #104]	@ (8001118 <respawn_obstacle+0x238>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4403      	add	r3, r0
 80010ba:	3314      	adds	r3, #20
 80010bc:	6019      	str	r1, [r3, #0]
	obstacles[i].rect.y = y;
 80010be:	4916      	ldr	r1, [pc, #88]	@ (8001118 <respawn_obstacle+0x238>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	3304      	adds	r3, #4
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]
	obstacles[i].rect.width = 2;
 80010d2:	4911      	ldr	r1, [pc, #68]	@ (8001118 <respawn_obstacle+0x238>)
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	3308      	adds	r3, #8
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
	obstacles[i].rect.height = 2;
 80010e6:	490c      	ldr	r1, [pc, #48]	@ (8001118 <respawn_obstacle+0x238>)
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	330c      	adds	r3, #12
 80010f6:	2202      	movs	r2, #2
 80010f8:	601a      	str	r2, [r3, #0]
	obstacles[i].active = true;
 80010fa:	4907      	ldr	r1, [pc, #28]	@ (8001118 <respawn_obstacle+0x238>)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	3310      	adds	r3, #16
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b8 	.word	0x200000b8
 800111c:	66666667 	.word	0x66666667
 8001120:	20000000 	.word	0x20000000
 8001124:	40590000 	.word	0x40590000
 8001128:	c0390000 	.word	0xc0390000
 800112c:	40390000 	.word	0x40390000
 8001130:	51eb851f 	.word	0x51eb851f
 8001134:	40340000 	.word	0x40340000

08001138 <init_obstacles>:

void init_obstacles() {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e034      	b.n	80011ae <init_obstacles+0x76>
		obstacles[i].rect.x = -10;
 8001144:	491e      	ldr	r1, [pc, #120]	@ (80011c0 <init_obstacles+0x88>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f06f 0209 	mvn.w	r2, #9
 8001156:	601a      	str	r2, [r3, #0]
		obstacles[i].rect.y = 10;
 8001158:	4919      	ldr	r1, [pc, #100]	@ (80011c0 <init_obstacles+0x88>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	220a      	movs	r2, #10
 800116a:	601a      	str	r2, [r3, #0]
		obstacles[i].real_x = -10.0;
 800116c:	4914      	ldr	r1, [pc, #80]	@ (80011c0 <init_obstacles+0x88>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3314      	adds	r3, #20
 800117c:	4a11      	ldr	r2, [pc, #68]	@ (80011c4 <init_obstacles+0x8c>)
 800117e:	601a      	str	r2, [r3, #0]
		obstacles[i].velocity = OBSTACLES_VELOCITY;
 8001180:	490f      	ldr	r1, [pc, #60]	@ (80011c0 <init_obstacles+0x88>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3318      	adds	r3, #24
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <init_obstacles+0x90>)
 8001192:	601a      	str	r2, [r3, #0]
		obstacles[i].active = false;
 8001194:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <init_obstacles+0x88>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3310      	adds	r3, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	ddc7      	ble.n	8001144 <init_obstacles+0xc>

	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	200000b8 	.word	0x200000b8
 80011c4:	c1200000 	.word	0xc1200000
 80011c8:	c1c80000 	.word	0xc1c80000

080011cc <move_obstacles>:

void move_obstacles() {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
	if (dino.is_dead) {
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <move_obstacles+0xe8>)
 80011d4:	7e5b      	ldrb	r3, [r3, #25]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d167      	bne.n	80012aa <move_obstacles+0xde>
		return;
	}

	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e060      	b.n	80012a2 <move_obstacles+0xd6>
		Obstacle* o = &obstacles[i];
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4a33      	ldr	r2, [pc, #204]	@ (80012b8 <move_obstacles+0xec>)
 80011ec:	4413      	add	r3, r2
 80011ee:	603b      	str	r3, [r7, #0]
		if (o->active || true) {
			o->real_x += o->velocity * DeltaTime;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f90f 	bl	8000418 <__aeabi_f2d>
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f908 	bl	8000418 <__aeabi_f2d>
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <move_obstacles+0xf0>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f95b 	bl	80004c8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7fe ff9f 	bl	800015c <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fb61 	bl	80008ec <__aeabi_d2f>
 800122a:	4602      	mov	r2, r0
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	615a      	str	r2, [r3, #20]
			o->rect.x = (o->real_x);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe07 	bl	8000e48 <__aeabi_f2iz>
 800123a:	4602      	mov	r2, r0
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]
			if (o->rect.x + o->rect.width < 0) {
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4413      	add	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	da0f      	bge.n	800126e <move_obstacles+0xa2>
				if (o->active) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	7c1b      	ldrb	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <move_obstacles+0x94>
					dino.score++;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <move_obstacles+0xe8>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	3301      	adds	r3, #1
 800125c:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <move_obstacles+0xe8>)
 800125e:	61d3      	str	r3, [r2, #28]
				}

				o->active = false;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	741a      	strb	r2, [r3, #16]
				respawn_obstacle(i);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fe3a 	bl	8000ee0 <respawn_obstacle>
				continue;
 800126c:	e016      	b.n	800129c <move_obstacles+0xd0>
			}

			if (!dino.is_dead && check_collision(dino.rect, o->rect)) {
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <move_obstacles+0xe8>)
 8001270:	7e5b      	ldrb	r3, [r3, #25]
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00f      	beq.n	800129c <move_obstacles+0xd0>
 800127c:	4d0d      	ldr	r5, [pc, #52]	@ (80012b4 <move_obstacles+0xe8>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	466c      	mov	r4, sp
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800128c:	f000 f950 	bl	8001530 <check_collision>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <move_obstacles+0xd0>
				dino_die();
 8001296:	f000 f975 	bl	8001584 <dino_die>
				return;
 800129a:	e007      	b.n	80012ac <move_obstacles+0xe0>
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dd9b      	ble.n	80011e0 <move_obstacles+0x14>
 80012a8:	e000      	b.n	80012ac <move_obstacles+0xe0>
		return;
 80012aa:	bf00      	nop
			}
		}
	}
}
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200000b8 	.word	0x200000b8
 80012bc:	200002c0 	.word	0x200002c0

080012c0 <move_dino>:


void move_dino() {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	if (!dino.is_jumping) {
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <move_dino+0xf0>)
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d16c      	bne.n	80013ac <move_dino+0xec>
		return;
	}

	dino.jump_velocity += dino_accel * DeltaTime;
 80012d2:	4b37      	ldr	r3, [pc, #220]	@ (80013b0 <move_dino+0xf0>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f89e 	bl	8000418 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <move_dino+0xf4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f897 	bl	8000418 <__aeabi_f2d>
 80012ea:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <move_dino+0xf8>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f8ea 	bl	80004c8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ff2e 	bl	800015c <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff faf0 	bl	80008ec <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a28      	ldr	r2, [pc, #160]	@ (80013b0 <move_dino+0xf0>)
 8001310:	6153      	str	r3, [r2, #20]
	dino.real_pos += dino.jump_velocity * DeltaTime;
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <move_dino+0xf0>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f87e 	bl	8000418 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <move_dino+0xf0>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f877 	bl	8000418 <__aeabi_f2d>
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <move_dino+0xf8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f8ca 	bl	80004c8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff0e 	bl	800015c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fad0 	bl	80008ec <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <move_dino+0xf0>)
 8001350:	6113      	str	r3, [r2, #16]
	dino.rect.y = (dino.real_pos);
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <move_dino+0xf0>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fd76 	bl	8000e48 <__aeabi_f2iz>
 800135c:	4603      	mov	r3, r0
 800135e:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <move_dino+0xf0>)
 8001360:	6053      	str	r3, [r2, #4]

	if (!dino.is_dead && dino.rect.y >= DINO_START_Y) {
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <move_dino+0xf0>)
 8001364:	7e5b      	ldrb	r3, [r3, #25]
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d011      	beq.n	8001394 <move_dino+0xd4>
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <move_dino+0xf0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b16      	cmp	r3, #22
 8001376:	dd0d      	ble.n	8001394 <move_dino+0xd4>
		dino.rect.y = DINO_START_Y;
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <move_dino+0xf0>)
 800137a:	2217      	movs	r2, #23
 800137c:	605a      	str	r2, [r3, #4]
		dino.real_pos = DINO_START_Y;
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <move_dino+0xf0>)
 8001380:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <move_dino+0xfc>)
 8001382:	611a      	str	r2, [r3, #16]
		dino.is_jumping = false;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <move_dino+0xf0>)
 8001386:	2200      	movs	r2, #0
 8001388:	761a      	strb	r2, [r3, #24]
		dino.jump_velocity = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <move_dino+0xf0>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	e00c      	b.n	80013ae <move_dino+0xee>
	}
	else if (dino.rect.y > HEIGHT) {
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <move_dino+0xf0>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b20      	cmp	r3, #32
 800139a:	dd08      	ble.n	80013ae <move_dino+0xee>
		dino.is_jumping = false;
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <move_dino+0xf0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	761a      	strb	r2, [r3, #24]
		dino.jump_velocity = 0;
 80013a2:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <move_dino+0xf0>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	e000      	b.n	80013ae <move_dino+0xee>
		return;
 80013ac:	bf00      	nop
	}
}
 80013ae:	bdb0      	pop	{r4, r5, r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	200000b0 	.word	0x200000b0
 80013b8:	200002c0 	.word	0x200002c0
 80013bc:	41b80000 	.word	0x41b80000

080013c0 <draw_ground>:



void draw_ground() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	draw_line(0, GROUND_Y, 63, GROUND_Y);
 80013c4:	231a      	movs	r3, #26
 80013c6:	223f      	movs	r2, #63	@ 0x3f
 80013c8:	211a      	movs	r1, #26
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 fe56 	bl	800207c <draw_line>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <draw_dino>:
void draw_dino() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
	if (!dino.is_dead) {
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <draw_dino+0x68>)
 80013dc:	7e5b      	ldrb	r3, [r3, #25]
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d012      	beq.n	800140e <draw_dino+0x3a>
		Draw_Rect(dino.rect, (Color){0, 1, 0});
 80013e8:	2300      	movs	r3, #0
 80013ea:	713b      	strb	r3, [r7, #4]
 80013ec:	2301      	movs	r3, #1
 80013ee:	717b      	strb	r3, [r7, #5]
 80013f0:	2300      	movs	r3, #0
 80013f2:	71bb      	strb	r3, [r7, #6]
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <draw_dino+0x68>)
 80013f6:	466b      	mov	r3, sp
 80013f8:	1d39      	adds	r1, r7, #4
 80013fa:	6809      	ldr	r1, [r1, #0]
 80013fc:	4608      	mov	r0, r1
 80013fe:	8018      	strh	r0, [r3, #0]
 8001400:	3302      	adds	r3, #2
 8001402:	0c09      	lsrs	r1, r1, #16
 8001404:	7019      	strb	r1, [r3, #0]
 8001406:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8001408:	f000 ff04 	bl	8002214 <Draw_Rect>
	} else {
		Draw_Rect(dino.rect, (Color){1, 0, 0});
	}
}
 800140c:	e011      	b.n	8001432 <draw_dino+0x5e>
		Draw_Rect(dino.rect, (Color){1, 0, 0});
 800140e:	2301      	movs	r3, #1
 8001410:	703b      	strb	r3, [r7, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	707b      	strb	r3, [r7, #1]
 8001416:	2300      	movs	r3, #0
 8001418:	70bb      	strb	r3, [r7, #2]
 800141a:	4a08      	ldr	r2, [pc, #32]	@ (800143c <draw_dino+0x68>)
 800141c:	466b      	mov	r3, sp
 800141e:	4639      	mov	r1, r7
 8001420:	6809      	ldr	r1, [r1, #0]
 8001422:	4608      	mov	r0, r1
 8001424:	8018      	strh	r0, [r3, #0]
 8001426:	3302      	adds	r3, #2
 8001428:	0c09      	lsrs	r1, r1, #16
 800142a:	7019      	strb	r1, [r3, #0]
 800142c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800142e:	f000 fef1 	bl	8002214 <Draw_Rect>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <draw_obstacles>:

void draw_obstacles() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e058      	b.n	80014fe <draw_obstacles+0xbe>
		if (!obstacles[i].active) {
 800144c:	4930      	ldr	r1, [pc, #192]	@ (8001510 <draw_obstacles+0xd0>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3310      	adds	r3, #16
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d142      	bne.n	80014ee <draw_obstacles+0xae>
			continue;
		}
		if (obstacles[i].rect.x < 0 || obstacles[i].rect.y < 0 ) {
 8001468:	4929      	ldr	r1, [pc, #164]	@ (8001510 <draw_obstacles+0xd0>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db3a      	blt.n	80014f2 <draw_obstacles+0xb2>
 800147c:	4924      	ldr	r1, [pc, #144]	@ (8001510 <draw_obstacles+0xd0>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3304      	adds	r3, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db2f      	blt.n	80014f2 <draw_obstacles+0xb2>
			continue;
		}
		if (obstacles[i].rect.x > WIDTH || obstacles[i].rect.y > HEIGHT ) {
 8001492:	491f      	ldr	r1, [pc, #124]	@ (8001510 <draw_obstacles+0xd0>)
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b40      	cmp	r3, #64	@ 0x40
 80014a4:	dc27      	bgt.n	80014f6 <draw_obstacles+0xb6>
 80014a6:	491a      	ldr	r1, [pc, #104]	@ (8001510 <draw_obstacles+0xd0>)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	dc1c      	bgt.n	80014f6 <draw_obstacles+0xb6>
			continue;
		}
		Draw_Rect(obstacles[i].rect, (Color){0, 0, 1});
 80014bc:	2300      	movs	r3, #0
 80014be:	703b      	strb	r3, [r7, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	707b      	strb	r3, [r7, #1]
 80014c4:	2301      	movs	r3, #1
 80014c6:	70bb      	strb	r3, [r7, #2]
 80014c8:	4911      	ldr	r1, [pc, #68]	@ (8001510 <draw_obstacles+0xd0>)
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	18ca      	adds	r2, r1, r3
 80014d6:	466b      	mov	r3, sp
 80014d8:	4639      	mov	r1, r7
 80014da:	6809      	ldr	r1, [r1, #0]
 80014dc:	4608      	mov	r0, r1
 80014de:	8018      	strh	r0, [r3, #0]
 80014e0:	3302      	adds	r3, #2
 80014e2:	0c09      	lsrs	r1, r1, #16
 80014e4:	7019      	strb	r1, [r3, #0]
 80014e6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80014e8:	f000 fe94 	bl	8002214 <Draw_Rect>
 80014ec:	e004      	b.n	80014f8 <draw_obstacles+0xb8>
			continue;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <draw_obstacles+0xb8>
			continue;
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <draw_obstacles+0xb8>
			continue;
 80014f6:	bf00      	nop
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b09      	cmp	r3, #9
 8001502:	dda3      	ble.n	800144c <draw_obstacles+0xc>
	}
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000b8 	.word	0x200000b8

08001514 <draw_score>:

void draw_score() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	draw_number(dino.score, 2, 2, false);
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <draw_score+0x18>)
 800151a:	69d8      	ldr	r0, [r3, #28]
 800151c:	2300      	movs	r3, #0
 800151e:	2202      	movs	r2, #2
 8001520:	2102      	movs	r1, #2
 8001522:	f000 ff25 	bl	8002370 <draw_number>
	return;
 8001526:	bf00      	nop

	for (uint8_t var = 0; var < 10; ++var) {
		draw_number(var, x, y, true);
		x += 8;
	}
}
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <check_collision>:



bool check_collision(Rect a, Rect b) {
 8001530:	b490      	push	{r4, r7}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	463c      	mov	r4, r7
 8001538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return (a.x < (b.x + b.width) &&
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	440b      	add	r3, r1
			(a.x + a.width) > b.x &&
			a.y < (b.y + b.height) &&
 8001544:	429a      	cmp	r2, r3
 8001546:	da13      	bge.n	8001570 <check_collision+0x40>
			(a.x + a.width) > b.x &&
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	441a      	add	r2, r3
 800154e:	69bb      	ldr	r3, [r7, #24]
	return (a.x < (b.x + b.width) &&
 8001550:	429a      	cmp	r2, r3
 8001552:	dd0d      	ble.n	8001570 <check_collision+0x40>
			a.y < (b.y + b.height) &&
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	69f9      	ldr	r1, [r7, #28]
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	440b      	add	r3, r1
			(a.x + a.width) > b.x &&
 800155c:	429a      	cmp	r2, r3
 800155e:	da07      	bge.n	8001570 <check_collision+0x40>
			(a.y + a.height) > b.y);
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	441a      	add	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
			a.y < (b.y + b.height) &&
 8001568:	429a      	cmp	r2, r3
 800156a:	dd01      	ble.n	8001570 <check_collision+0x40>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <check_collision+0x42>
 8001570:	2300      	movs	r3, #0
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bc90      	pop	{r4, r7}
 8001580:	4770      	bx	lr
	...

08001584 <dino_die>:


void dino_die() {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	dino.is_dead = true;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <dino_die+0x20>)
 800158a:	2201      	movs	r2, #1
 800158c:	765a      	strb	r2, [r3, #25]
	dino.is_jumping = false;
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <dino_die+0x20>)
 8001590:	2200      	movs	r2, #0
 8001592:	761a      	strb	r2, [r3, #24]
	dino_death_time = HAL_GetTick();
 8001594:	f001 f9d8 	bl	8002948 <HAL_GetTick>
 8001598:	4603      	mov	r3, r0
 800159a:	4a03      	ldr	r2, [pc, #12]	@ (80015a8 <dino_die+0x24>)
 800159c:	6013      	str	r3, [r2, #0]
	//buzzer();
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	200000b4 	.word	0x200000b4

080015ac <dino_respawn>:

bool dead_dino_jumped = false;
void dino_respawn() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	dino.score = 0;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <dino_respawn+0x38>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
	dino.is_dead = false;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <dino_respawn+0x38>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	765a      	strb	r2, [r3, #25]
	dino.is_jumping = false;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <dino_respawn+0x38>)
 80015be:	2200      	movs	r2, #0
 80015c0:	761a      	strb	r2, [r3, #24]
	dead_dino_jumped = false;
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <dino_respawn+0x3c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	dino.rect.y = DINO_START_Y;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <dino_respawn+0x38>)
 80015ca:	2217      	movs	r2, #23
 80015cc:	605a      	str	r2, [r3, #4]
	dino.real_pos = dino.rect.y;
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <dino_respawn+0x38>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fa94 	bl	8000b00 <__aeabi_i2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a02      	ldr	r2, [pc, #8]	@ (80015e4 <dino_respawn+0x38>)
 80015dc:	6113      	str	r3, [r2, #16]
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200001d0 	.word	0x200001d0

080015ec <dino_jump>:

void dino_jump() {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
	dino.is_jumping = true;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <dino_jump+0x4c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	761a      	strb	r2, [r3, #24]
	dino.jump_velocity = DINO_JUMP_VELOCITY;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <dino_jump+0x4c>)
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <dino_jump+0x50>)
 80015fc:	615a      	str	r2, [r3, #20]
	float v0 = DINO_JUMP_VELOCITY;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <dino_jump+0x50>)
 8001600:	607b      	str	r3, [r7, #4]
	float d = (DINO_START_Y - DINO_JUMP_TO_Y);
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <dino_jump+0x54>)
 8001604:	603b      	str	r3, [r7, #0]
	dino_accel = (v0*v0)/(2*d);
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff facd 	bl	8000ba8 <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	461c      	mov	r4, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9be 	bl	8000998 <__addsf3>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fb75 	bl	8000d10 <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <dino_jump+0x58>)
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	c2700000 	.word	0xc2700000
 8001640:	41200000 	.word	0x41200000
 8001644:	200000b0 	.word	0x200000b0

08001648 <on_ready>:

void on_ready() {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	//srand(time(NULL));
	init_obstacles();
 800164c:	f7ff fd74 	bl	8001138 <init_obstacles>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <on_update>:

void on_update() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	clear_back_buffer();
 800165a:	f000 fb65 	bl	8001d28 <clear_back_buffer>

	draw_ground();
 800165e:	f7ff feaf 	bl	80013c0 <draw_ground>
	draw_dino();
 8001662:	f7ff feb7 	bl	80013d4 <draw_dino>
	draw_obstacles();
 8001666:	f7ff feeb 	bl	8001440 <draw_obstacles>
	draw_score();
 800166a:	f7ff ff53 	bl	8001514 <draw_score>

	move_dino();
 800166e:	f7ff fe27 	bl	80012c0 <move_dino>
	move_obstacles();
 8001672:	f7ff fdab 	bl	80011cc <move_obstacles>

	// death animation & restart
	if (dino.is_dead) {
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <on_update+0x74>)
 8001678:	7e5b      	ldrb	r3, [r3, #25]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d020      	beq.n	80016c0 <on_update+0x6c>
		uint32_t time_passed = HAL_GetTick() - dino_death_time;
 800167e:	f001 f963 	bl	8002948 <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <on_update+0x78>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	607b      	str	r3, [r7, #4]
		if (time_passed > 1000 && !dead_dino_jumped) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001692:	d90c      	bls.n	80016ae <on_update+0x5a>
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <on_update+0x7c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <on_update+0x5a>
			dino_jump();
 80016a2:	f7ff ffa3 	bl	80015ec <dino_jump>
			dead_dino_jumped = true;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <on_update+0x7c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
		else if (time_passed > 3000) {
			init_obstacles();
			dino_respawn();
		}
	}
}
 80016ac:	e008      	b.n	80016c0 <on_update+0x6c>
		else if (time_passed > 3000) {
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d903      	bls.n	80016c0 <on_update+0x6c>
			init_obstacles();
 80016b8:	f7ff fd3e 	bl	8001138 <init_obstacles>
			dino_respawn();
 80016bc:	f7ff ff76 	bl	80015ac <dino_respawn>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	200000b4 	.word	0x200000b4
 80016d0:	200001d0 	.word	0x200001d0

080016d4 <on_button_pressed>:



void on_button_pressed() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	if (!dino.is_dead && !dino.is_jumping) {
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <on_button_pressed+0x28>)
 80016da:	7e5b      	ldrb	r3, [r3, #25]
 80016dc:	f083 0301 	eor.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <on_button_pressed+0x24>
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <on_button_pressed+0x28>)
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <on_button_pressed+0x24>
		dino_jump();
 80016f4:	f7ff ff7a 	bl	80015ec <dino_jump>
	}
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000

08001700 <on_button_held>:
void on_button_held() {
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	af00      	add	r7, sp, #0
	if (!dino.is_dead && dino.is_jumping) {
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <on_button_held+0x5c>)
 8001706:	7e5b      	ldrb	r3, [r3, #25]
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d021      	beq.n	8001756 <on_button_held+0x56>
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <on_button_held+0x5c>)
 8001714:	7e1b      	ldrb	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01d      	beq.n	8001756 <on_button_held+0x56>
		dino.jump_velocity -= 60 * DeltaTime;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <on_button_held+0x5c>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe7a 	bl	8000418 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <on_button_held+0x60>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <on_button_held+0x64>)
 8001734:	f7fe fec8 	bl	80004c8 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fd0a 	bl	8000158 <__aeabi_dsub>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f8ce 	bl	80008ec <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a02      	ldr	r2, [pc, #8]	@ (800175c <on_button_held+0x5c>)
 8001754:	6153      	str	r3, [r2, #20]
	}
}
 8001756:	bf00      	nop
 8001758:	bdb0      	pop	{r4, r5, r7, pc}
 800175a:	bf00      	nop
 800175c:	20000000 	.word	0x20000000
 8001760:	200002c0 	.word	0x200002c0
 8001764:	404e0000 	.word	0x404e0000

08001768 <on_button_released>:
void on_button_released() {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800177a:	f001 f8e5 	bl	8002948 <HAL_GetTick>
 800177e:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <get_tick_delta_time+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <get_tick_delta_time+0x28>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8001790:	683b      	ldr	r3, [r7, #0]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002c8 	.word	0x200002c8

080017a0 <buzzer>:

bool buzzer_request = false;
uint32_t buzzer_toggle_request_time = 0;
void buzzer() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	buzzer_request = true;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <buzzer+0x24>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
	buzzer_toggle_request_time = HAL_GetTick();
 80017aa:	f001 f8cd 	bl	8002948 <HAL_GetTick>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <buzzer+0x28>)
 80017b2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ba:	4804      	ldr	r0, [pc, #16]	@ (80017cc <buzzer+0x2c>)
 80017bc:	f001 fb77 	bl	8002eae <HAL_GPIO_WritePin>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200002cc 	.word	0x200002cc
 80017c8:	200002d0 	.word	0x200002d0
 80017cc:	40010800 	.word	0x40010800

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f001 f85f 	bl	8002898 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f861 	bl	80018a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f000 f9c3 	bl	8001b68 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017e2:	f000 f89f 	bl	8001924 <MX_SPI1_Init>
  MX_TIM2_Init();
 80017e6:	f000 f8d3 	bl	8001990 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017ea:	f000 f947 	bl	8001a7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 80017ee:	4824      	ldr	r0, [pc, #144]	@ (8001880 <main+0xb0>)
 80017f0:	f002 f828 	bl	8003844 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80017f4:	4823      	ldr	r0, [pc, #140]	@ (8001884 <main+0xb4>)
 80017f6:	f002 f825 	bl	8003844 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017fa:	2100      	movs	r1, #0
 80017fc:	4821      	ldr	r0, [pc, #132]	@ (8001884 <main+0xb4>)
 80017fe:	f002 f8cb 	bl	8003998 <HAL_TIM_PWM_Start>
	OE_H;
 8001802:	2201      	movs	r2, #1
 8001804:	2140      	movs	r1, #64	@ 0x40
 8001806:	4820      	ldr	r0, [pc, #128]	@ (8001888 <main+0xb8>)
 8001808:	f001 fb51 	bl	8002eae <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	on_ready();
 800180c:	f7ff ff1c 	bl	8001648 <on_ready>

#define FIXED_DELTA_TIME 15 /* frame time milliseconds */

	int accumulator = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
	while (1) {

		accumulator += get_tick_delta_time();
 8001814:	f7ff ffae 	bl	8001774 <get_tick_delta_time>
 8001818:	4602      	mov	r2, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	607b      	str	r3, [r7, #4]
		if (accumulator >= FIXED_DELTA_TIME) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b0e      	cmp	r3, #14
 8001824:	dd0f      	ble.n	8001846 <main+0x76>
			accumulator -= FIXED_DELTA_TIME;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3b0f      	subs	r3, #15
 800182a:	607b      	str	r3, [r7, #4]
			DeltaTime = FIXED_DELTA_TIME / 1000.0;
 800182c:	4917      	ldr	r1, [pc, #92]	@ (800188c <main+0xbc>)
 800182e:	a312      	add	r3, pc, #72	@ (adr r3, 8001878 <main+0xa8>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8001838:	f7ff fb2c 	bl	8000e94 <on_event>
			on_update();
 800183c:	f7ff ff0a 	bl	8001654 <on_update>
			is_back_buffer_new = true;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <main+0xc0>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
		}


		if (buzzer_request) {
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <main+0xc4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0e2      	beq.n	8001814 <main+0x44>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 800184e:	f001 f87b 	bl	8002948 <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <main+0xc8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b14      	cmp	r3, #20
 800185c:	d9da      	bls.n	8001814 <main+0x44>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001864:	480d      	ldr	r0, [pc, #52]	@ (800189c <main+0xcc>)
 8001866:	f001 fb22 	bl	8002eae <HAL_GPIO_WritePin>
				buzzer_request = false;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <main+0xc4>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
		accumulator += get_tick_delta_time();
 8001870:	e7d0      	b.n	8001814 <main+0x44>
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	eb851eb8 	.word	0xeb851eb8
 800187c:	3f8eb851 	.word	0x3f8eb851
 8001880:	2000022c 	.word	0x2000022c
 8001884:	20000274 	.word	0x20000274
 8001888:	40011000 	.word	0x40011000
 800188c:	200002c0 	.word	0x200002c0
 8001890:	200012d4 	.word	0x200012d4
 8001894:	200002cc 	.word	0x200002cc
 8001898:	200002d0 	.word	0x200002d0
 800189c:	40010800 	.word	0x40010800

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	@ 0x40
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	2228      	movs	r2, #40	@ 0x28
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f829 	bl	8004906 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c6:	2301      	movs	r3, #1
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ca:	2310      	movs	r3, #16
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018d6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80018da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fafd 	bl	8002ee0 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018ec:	f000 fa00 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f0:	230f      	movs	r3, #15
 80018f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2102      	movs	r1, #2
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fd6a 	bl	80033e4 <HAL_RCC_ClockConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001916:	f000 f9eb 	bl	8001cf0 <Error_Handler>
  }
}
 800191a:	bf00      	nop
 800191c:	3740      	adds	r7, #64	@ 0x40
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_SPI1_Init+0x64>)
 800192a:	4a18      	ldr	r2, [pc, #96]	@ (800198c <MX_SPI1_Init+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001958:	2210      	movs	r2, #16
 800195a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001970:	220a      	movs	r2, #10
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001976:	f001 fe91 	bl	800369c <HAL_SPI_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001980:	f000 f9b6 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001d4 	.word	0x200001d4
 800198c:	40013000 	.word	0x40013000

08001990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	@ 0x38
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019ca:	223f      	movs	r2, #63	@ 0x3f
 80019cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019d4:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019dc:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e2:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019e8:	4823      	ldr	r0, [pc, #140]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019ea:	f001 fedb 	bl	80037a4 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019f4:	f000 f97c 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a02:	4619      	mov	r1, r3
 8001a04:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a06:	f002 fa33 	bl	8003e70 <HAL_TIM_ConfigClockSource>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a10:	f000 f96e 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a14:	4818      	ldr	r0, [pc, #96]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a16:	f001 ff67 	bl	80038e8 <HAL_TIM_PWM_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a20:	f000 f966 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	4619      	mov	r1, r3
 8001a32:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a34:	f002 fdb4 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a3e:	f000 f957 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	@ 0x60
 8001a44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a5a:	f002 f947 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a64:	f000 f944 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a6a:	f000 fd89 	bl	8002580 <HAL_TIM_MspPostInit>

}
 8001a6e:	bf00      	nop
 8001a70:	3738      	adds	r7, #56	@ 0x38
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000022c 	.word	0x2000022c

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	@ 0x38
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001aae:	4a2d      	ldr	r2, [pc, #180]	@ (8001b64 <MX_TIM3_Init+0xe8>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ab4:	223f      	movs	r2, #63	@ 0x3f
 8001ab6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ac0:	2263      	movs	r2, #99	@ 0x63
 8001ac2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad0:	4823      	ldr	r0, [pc, #140]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ad2:	f001 fe67 	bl	80037a4 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001adc:	f000 f908 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aea:	4619      	mov	r1, r3
 8001aec:	481c      	ldr	r0, [pc, #112]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001aee:	f002 f9bf 	bl	8003e70 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001af8:	f000 f8fa 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afc:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001afe:	f001 fef3 	bl	80038e8 <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001b08:	f000 f8f2 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001b1c:	f002 fd40 	bl	80045a0 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001b26:	f000 f8e3 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	@ 0x60
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8001b2e:	230a      	movs	r3, #10
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b32:	2302      	movs	r3, #2
 8001b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001b42:	f002 f8d3 	bl	8003cec <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001b4c:	f000 f8d0 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001b52:	f000 fd15 	bl	8002580 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3738      	adds	r7, #56	@ 0x38
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000274 	.word	0x20000274
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	4b56      	ldr	r3, [pc, #344]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a55      	ldr	r2, [pc, #340]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc4:	4b44      	ldr	r3, [pc, #272]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a43      	ldr	r2, [pc, #268]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f24e 0138 	movw	r1, #57400	@ 0xe038
 8001be2:	483e      	ldr	r0, [pc, #248]	@ (8001cdc <MX_GPIO_Init+0x174>)
 8001be4:	f001 f963 	bl	8002eae <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8001bee:	483c      	ldr	r0, [pc, #240]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001bf0:	f001 f95d 	bl	8002eae <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001bfa:	483a      	ldr	r0, [pc, #232]	@ (8001ce4 <MX_GPIO_Init+0x17c>)
 8001bfc:	f001 f957 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2104      	movs	r1, #4
 8001c04:	4838      	ldr	r0, [pc, #224]	@ (8001ce8 <MX_GPIO_Init+0x180>)
 8001c06:	f001 f952 	bl	8002eae <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <MX_GPIO_Init+0x184>)
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4830      	ldr	r0, [pc, #192]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001c20:	f000 ffaa 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001c24:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8001c28:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4827      	ldr	r0, [pc, #156]	@ (8001cdc <MX_GPIO_Init+0x174>)
 8001c3e:	f000 ff9b 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001c42:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8001c46:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4821      	ldr	r0, [pc, #132]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001c5c:	f000 ff8c 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001c60:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	481a      	ldr	r0, [pc, #104]	@ (8001ce4 <MX_GPIO_Init+0x17c>)
 8001c7a:	f000 ff7d 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4619      	mov	r1, r3
 8001c92:	4813      	ldr	r0, [pc, #76]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001c94:	f000 ff70 	bl	8002b78 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <MX_GPIO_Init+0x180>)
 8001cb0:	f000 ff62 	bl	8002b78 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001cca:	f000 ff55 	bl	8002b78 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40011400 	.word	0x40011400
 8001cec:	10110000 	.word	0x10110000

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <Error_Handler+0x8>

08001cfc <swap_buffers>:
uint8_t buffer2[WIDTH][HEIGHT];
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;

void swap_buffers() {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <swap_buffers+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <swap_buffers+0x28>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <swap_buffers+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <swap_buffers+0x28>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000020 	.word	0x20000020
 8001d24:	20000024 	.word	0x20000024

08001d28 <clear_back_buffer>:


void clear_back_buffer(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <clear_back_buffer+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fde5 	bl	8004906 <memset>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000024 	.word	0x20000024

08001d44 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 8001d5a:	68fb      	ldr	r3, [r7, #12]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	db34      	blt.n	8001dca <set_pixel+0x86>
 8001d60:	68fb      	ldr	r3, [r7, #12]
 8001d62:	2b3f      	cmp	r3, #63	@ 0x3f
 8001d64:	dc31      	bgt.n	8001dca <set_pixel+0x86>
 8001d66:	68bb      	ldr	r3, [r7, #8]
 8001d68:	2b00      	cmp	r3, #0
 8001d6a:	db2e      	blt.n	8001dca <set_pixel+0x86>
 8001d6c:	68bb      	ldr	r3, [r7, #8]
 8001d6e:	2b1f      	cmp	r3, #31
 8001d70:	dc2b      	bgt.n	8001dca <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 8001d72:	79fb      	ldrb	r3, [r7, #7]
 8001d74:	2b00      	cmp	r3, #0
 8001d76:	bf14      	ite	ne
 8001d78:	2301      	movne	r3, #1
 8001d7a:	2300      	moveq	r3, #0
 8001d7c:	b2db      	uxtb	r3, r3
 8001d7e:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 8001d80:	79bb      	ldrb	r3, [r7, #6]
 8001d82:	2b00      	cmp	r3, #0
 8001d84:	bf14      	ite	ne
 8001d86:	2301      	movne	r3, #1
 8001d88:	2300      	moveq	r3, #0
 8001d8a:	b2db      	uxtb	r3, r3
 8001d8c:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 8001d8e:	7e3b      	ldrb	r3, [r7, #24]
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	bf14      	ite	ne
 8001d94:	2301      	movne	r3, #1
 8001d96:	2300      	moveq	r3, #0
 8001d98:	b2db      	uxtb	r3, r3
 8001d9a:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 8001d9c:	79fb      	ldrb	r3, [r7, #7]
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	b25a      	sxtb	r2, r3
 8001da2:	79bb      	ldrb	r3, [r7, #6]
 8001da4:	005b      	lsls	r3, r3, #1
 8001da6:	b25b      	sxtb	r3, r3
 8001da8:	4313      	orrs	r3, r2
 8001daa:	b25a      	sxtb	r2, r3
 8001dac:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001db0:	4313      	orrs	r3, r2
 8001db2:	b259      	sxtb	r1, r3
 8001db4:	4b07      	ldr	r3, [pc, #28]	@ (8001dd4 <set_pixel+0x90>)
 8001db6:	681a      	ldr	r2, [r3, #0]
 8001db8:	b2c9      	uxtb	r1, r1
 8001dba:	68fb      	ldr	r3, [r7, #12]
 8001dbc:	015b      	lsls	r3, r3, #5
 8001dbe:	441a      	add	r2, r3
 8001dc0:	68bb      	ldr	r3, [r7, #8]
 8001dc2:	4413      	add	r3, r2
 8001dc4:	460a      	mov	r2, r1
 8001dc6:	701a      	strb	r2, [r3, #0]
 8001dc8:	e000      	b.n	8001dcc <set_pixel+0x88>
		return;
 8001dca:	bf00      	nop
}
 8001dcc:	3714      	adds	r7, #20
 8001dce:	46bd      	mov	sp, r7
 8001dd0:	bc80      	pop	{r7}
 8001dd2:	4770      	bx	lr
 8001dd4:	20000024 	.word	0x20000024

08001dd8 <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	b086      	sub	sp, #24
 8001ddc:	af02      	add	r7, sp, #8
 8001dde:	60f8      	str	r0, [r7, #12]
 8001de0:	60b9      	str	r1, [r7, #8]
 8001de2:	4613      	mov	r3, r2
 8001de4:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 8001de6:	79f9      	ldrb	r1, [r7, #7]
 8001de8:	79fa      	ldrb	r2, [r7, #7]
 8001dea:	79fb      	ldrb	r3, [r7, #7]
 8001dec:	9300      	str	r3, [sp, #0]
 8001dee:	460b      	mov	r3, r1
 8001df0:	68b9      	ldr	r1, [r7, #8]
 8001df2:	68f8      	ldr	r0, [r7, #12]
 8001df4:	f7ff ffa6 	bl	8001d44 <set_pixel>
}
 8001df8:	bf00      	nop
 8001dfa:	3710      	adds	r7, #16
 8001dfc:	46bd      	mov	sp, r7
 8001dfe:	bd80      	pop	{r7, pc}

08001e00 <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8001e00:	b480      	push	{r7}
 8001e02:	b085      	sub	sp, #20
 8001e04:	af00      	add	r7, sp, #0
 8001e06:	60b9      	str	r1, [r7, #8]
 8001e08:	607a      	str	r2, [r7, #4]
 8001e0a:	603b      	str	r3, [r7, #0]
 8001e0c:	4603      	mov	r3, r0
 8001e0e:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8001e10:	7bfb      	ldrb	r3, [r7, #15]
 8001e12:	089b      	lsrs	r3, r3, #2
 8001e14:	b2db      	uxtb	r3, r3
 8001e16:	f003 0301 	and.w	r3, r3, #1
 8001e1a:	b2da      	uxtb	r2, r3
 8001e1c:	68bb      	ldr	r3, [r7, #8]
 8001e1e:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8001e20:	7bfb      	ldrb	r3, [r7, #15]
 8001e22:	085b      	lsrs	r3, r3, #1
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	f003 0301 	and.w	r3, r3, #1
 8001e2a:	b2da      	uxtb	r2, r3
 8001e2c:	687b      	ldr	r3, [r7, #4]
 8001e2e:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8001e30:	7bfb      	ldrb	r3, [r7, #15]
 8001e32:	f003 0301 	and.w	r3, r3, #1
 8001e36:	b2da      	uxtb	r2, r3
 8001e38:	683b      	ldr	r3, [r7, #0]
 8001e3a:	701a      	strb	r2, [r3, #0]
}
 8001e3c:	bf00      	nop
 8001e3e:	3714      	adds	r7, #20
 8001e40:	46bd      	mov	sp, r7
 8001e42:	bc80      	pop	{r7}
 8001e44:	4770      	bx	lr
	...

08001e48 <render_row>:

uint8_t current_row = 0;
void render_row() {
 8001e48:	b580      	push	{r7, lr}
 8001e4a:	b086      	sub	sp, #24
 8001e4c:	af00      	add	r7, sp, #0
	uint8_t row = current_row;
 8001e4e:	4b75      	ldr	r3, [pc, #468]	@ (8002024 <render_row+0x1dc>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	72fb      	strb	r3, [r7, #11]
	for (int segment = 0; segment < 16; ++segment) {
 8001e54:	2300      	movs	r3, #0
 8001e56:	617b      	str	r3, [r7, #20]
 8001e58:	e08e      	b.n	8001f78 <render_row+0x130>
		for (int block = 1; block >= 0; --block) {
 8001e5a:	2301      	movs	r3, #1
 8001e5c:	613b      	str	r3, [r7, #16]
 8001e5e:	e084      	b.n	8001f6a <render_row+0x122>
			for (int window = 0; window < 4; ++window) {
 8001e60:	2300      	movs	r3, #0
 8001e62:	60fb      	str	r3, [r7, #12]
 8001e64:	e07b      	b.n	8001f5e <render_row+0x116>
				uint8_t data_area_1 = (*front_buffer)[segment*4+window][row+block*8];
 8001e66:	4b70      	ldr	r3, [pc, #448]	@ (8002028 <render_row+0x1e0>)
 8001e68:	6819      	ldr	r1, [r3, #0]
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	009a      	lsls	r2, r3, #2
 8001e6e:	68fb      	ldr	r3, [r7, #12]
 8001e70:	441a      	add	r2, r3
 8001e72:	7af8      	ldrb	r0, [r7, #11]
 8001e74:	693b      	ldr	r3, [r7, #16]
 8001e76:	00db      	lsls	r3, r3, #3
 8001e78:	4403      	add	r3, r0
 8001e7a:	0152      	lsls	r2, r2, #5
 8001e7c:	440a      	add	r2, r1
 8001e7e:	4413      	add	r3, r2
 8001e80:	781b      	ldrb	r3, [r3, #0]
 8001e82:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[segment*4+window][row+block*8 + 16];
 8001e84:	4b68      	ldr	r3, [pc, #416]	@ (8002028 <render_row+0x1e0>)
 8001e86:	6819      	ldr	r1, [r3, #0]
 8001e88:	697b      	ldr	r3, [r7, #20]
 8001e8a:	009a      	lsls	r2, r3, #2
 8001e8c:	68fb      	ldr	r3, [r7, #12]
 8001e8e:	441a      	add	r2, r3
 8001e90:	7af8      	ldrb	r0, [r7, #11]
 8001e92:	693b      	ldr	r3, [r7, #16]
 8001e94:	00db      	lsls	r3, r3, #3
 8001e96:	4403      	add	r3, r0
 8001e98:	3310      	adds	r3, #16
 8001e9a:	0152      	lsls	r2, r2, #5
 8001e9c:	440a      	add	r2, r1
 8001e9e:	4413      	add	r3, r2
 8001ea0:	781b      	ldrb	r3, [r3, #0]
 8001ea2:	727b      	strb	r3, [r7, #9]

				uint8_t r, g, b;

				get_rgb(data_area_1, &r, &g, &b);
 8001ea4:	1dbb      	adds	r3, r7, #6
 8001ea6:	1dfa      	adds	r2, r7, #7
 8001ea8:	f107 0108 	add.w	r1, r7, #8
 8001eac:	7ab8      	ldrb	r0, [r7, #10]
 8001eae:	f7ff ffa7 	bl	8001e00 <get_rgb>
				R1(r);
 8001eb2:	7a3b      	ldrb	r3, [r7, #8]
 8001eb4:	2b00      	cmp	r3, #0
 8001eb6:	d003      	beq.n	8001ec0 <render_row+0x78>
 8001eb8:	4b5c      	ldr	r3, [pc, #368]	@ (800202c <render_row+0x1e4>)
 8001eba:	2220      	movs	r2, #32
 8001ebc:	611a      	str	r2, [r3, #16]
 8001ebe:	e002      	b.n	8001ec6 <render_row+0x7e>
 8001ec0:	4b5a      	ldr	r3, [pc, #360]	@ (800202c <render_row+0x1e4>)
 8001ec2:	2220      	movs	r2, #32
 8001ec4:	615a      	str	r2, [r3, #20]
				G1(g);
 8001ec6:	79fb      	ldrb	r3, [r7, #7]
 8001ec8:	2b00      	cmp	r3, #0
 8001eca:	d003      	beq.n	8001ed4 <render_row+0x8c>
 8001ecc:	4b57      	ldr	r3, [pc, #348]	@ (800202c <render_row+0x1e4>)
 8001ece:	2208      	movs	r2, #8
 8001ed0:	611a      	str	r2, [r3, #16]
 8001ed2:	e002      	b.n	8001eda <render_row+0x92>
 8001ed4:	4b55      	ldr	r3, [pc, #340]	@ (800202c <render_row+0x1e4>)
 8001ed6:	2208      	movs	r2, #8
 8001ed8:	615a      	str	r2, [r3, #20]
				B1(b);
 8001eda:	79bb      	ldrb	r3, [r7, #6]
 8001edc:	2b00      	cmp	r3, #0
 8001ede:	d004      	beq.n	8001eea <render_row+0xa2>
 8001ee0:	4b53      	ldr	r3, [pc, #332]	@ (8002030 <render_row+0x1e8>)
 8001ee2:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ee6:	611a      	str	r2, [r3, #16]
 8001ee8:	e003      	b.n	8001ef2 <render_row+0xaa>
 8001eea:	4b51      	ldr	r3, [pc, #324]	@ (8002030 <render_row+0x1e8>)
 8001eec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ef0:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 8001ef2:	1dbb      	adds	r3, r7, #6
 8001ef4:	1dfa      	adds	r2, r7, #7
 8001ef6:	f107 0108 	add.w	r1, r7, #8
 8001efa:	7a78      	ldrb	r0, [r7, #9]
 8001efc:	f7ff ff80 	bl	8001e00 <get_rgb>
				R2(r);
 8001f00:	7a3b      	ldrb	r3, [r7, #8]
 8001f02:	2b00      	cmp	r3, #0
 8001f04:	d003      	beq.n	8001f0e <render_row+0xc6>
 8001f06:	4b49      	ldr	r3, [pc, #292]	@ (800202c <render_row+0x1e4>)
 8001f08:	2210      	movs	r2, #16
 8001f0a:	611a      	str	r2, [r3, #16]
 8001f0c:	e002      	b.n	8001f14 <render_row+0xcc>
 8001f0e:	4b47      	ldr	r3, [pc, #284]	@ (800202c <render_row+0x1e4>)
 8001f10:	2210      	movs	r2, #16
 8001f12:	615a      	str	r2, [r3, #20]
				G2(g);
 8001f14:	79fb      	ldrb	r3, [r7, #7]
 8001f16:	2b00      	cmp	r3, #0
 8001f18:	d003      	beq.n	8001f22 <render_row+0xda>
 8001f1a:	4b46      	ldr	r3, [pc, #280]	@ (8002034 <render_row+0x1ec>)
 8001f1c:	2204      	movs	r2, #4
 8001f1e:	611a      	str	r2, [r3, #16]
 8001f20:	e002      	b.n	8001f28 <render_row+0xe0>
 8001f22:	4b44      	ldr	r3, [pc, #272]	@ (8002034 <render_row+0x1ec>)
 8001f24:	2204      	movs	r2, #4
 8001f26:	615a      	str	r2, [r3, #20]
				B2(b);
 8001f28:	79bb      	ldrb	r3, [r7, #6]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d004      	beq.n	8001f38 <render_row+0xf0>
 8001f2e:	4b40      	ldr	r3, [pc, #256]	@ (8002030 <render_row+0x1e8>)
 8001f30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f34:	611a      	str	r2, [r3, #16]
 8001f36:	e003      	b.n	8001f40 <render_row+0xf8>
 8001f38:	4b3d      	ldr	r3, [pc, #244]	@ (8002030 <render_row+0x1e8>)
 8001f3a:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f3e:	615a      	str	r2, [r3, #20]

				CLK_H;
 8001f40:	2201      	movs	r2, #1
 8001f42:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f46:	4839      	ldr	r0, [pc, #228]	@ (800202c <render_row+0x1e4>)
 8001f48:	f000 ffb1 	bl	8002eae <HAL_GPIO_WritePin>
				CLK_L;
 8001f4c:	2200      	movs	r2, #0
 8001f4e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f52:	4836      	ldr	r0, [pc, #216]	@ (800202c <render_row+0x1e4>)
 8001f54:	f000 ffab 	bl	8002eae <HAL_GPIO_WritePin>
			for (int window = 0; window < 4; ++window) {
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	3301      	adds	r3, #1
 8001f5c:	60fb      	str	r3, [r7, #12]
 8001f5e:	68fb      	ldr	r3, [r7, #12]
 8001f60:	2b03      	cmp	r3, #3
 8001f62:	dd80      	ble.n	8001e66 <render_row+0x1e>
		for (int block = 1; block >= 0; --block) {
 8001f64:	693b      	ldr	r3, [r7, #16]
 8001f66:	3b01      	subs	r3, #1
 8001f68:	613b      	str	r3, [r7, #16]
 8001f6a:	693b      	ldr	r3, [r7, #16]
 8001f6c:	2b00      	cmp	r3, #0
 8001f6e:	f6bf af77 	bge.w	8001e60 <render_row+0x18>
	for (int segment = 0; segment < 16; ++segment) {
 8001f72:	697b      	ldr	r3, [r7, #20]
 8001f74:	3301      	adds	r3, #1
 8001f76:	617b      	str	r3, [r7, #20]
 8001f78:	697b      	ldr	r3, [r7, #20]
 8001f7a:	2b0f      	cmp	r3, #15
 8001f7c:	f77f af6d 	ble.w	8001e5a <render_row+0x12>
			}
		}
	}

	OE_TIMER_DISABLE;
 8001f80:	4b2b      	ldr	r3, [pc, #172]	@ (8002030 <render_row+0x1e8>)
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a2a      	ldr	r2, [pc, #168]	@ (8002030 <render_row+0x1e8>)
 8001f86:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001f8a:	6013      	str	r3, [r2, #0]
	LAT_H;
 8001f8c:	2201      	movs	r2, #1
 8001f8e:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f92:	4826      	ldr	r0, [pc, #152]	@ (800202c <render_row+0x1e4>)
 8001f94:	f000 ff8b 	bl	8002eae <HAL_GPIO_WritePin>
	LAT_L;
 8001f98:	2200      	movs	r2, #0
 8001f9a:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f9e:	4823      	ldr	r0, [pc, #140]	@ (800202c <render_row+0x1e4>)
 8001fa0:	f000 ff85 	bl	8002eae <HAL_GPIO_WritePin>
	ROW(row);
 8001fa4:	7afb      	ldrb	r3, [r7, #11]
 8001fa6:	f003 0301 	and.w	r3, r3, #1
 8001faa:	2b00      	cmp	r3, #0
 8001fac:	d004      	beq.n	8001fb8 <render_row+0x170>
 8001fae:	4b22      	ldr	r3, [pc, #136]	@ (8002038 <render_row+0x1f0>)
 8001fb0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fb4:	611a      	str	r2, [r3, #16]
 8001fb6:	e003      	b.n	8001fc0 <render_row+0x178>
 8001fb8:	4b1f      	ldr	r3, [pc, #124]	@ (8002038 <render_row+0x1f0>)
 8001fba:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fbe:	615a      	str	r2, [r3, #20]
 8001fc0:	7afb      	ldrb	r3, [r7, #11]
 8001fc2:	f003 0302 	and.w	r3, r3, #2
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	d004      	beq.n	8001fd4 <render_row+0x18c>
 8001fca:	4b19      	ldr	r3, [pc, #100]	@ (8002030 <render_row+0x1e8>)
 8001fcc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fd0:	611a      	str	r2, [r3, #16]
 8001fd2:	e003      	b.n	8001fdc <render_row+0x194>
 8001fd4:	4b16      	ldr	r3, [pc, #88]	@ (8002030 <render_row+0x1e8>)
 8001fd6:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fda:	615a      	str	r2, [r3, #20]
 8001fdc:	7afb      	ldrb	r3, [r7, #11]
 8001fde:	f003 0304 	and.w	r3, r3, #4
 8001fe2:	2b00      	cmp	r3, #0
 8001fe4:	d004      	beq.n	8001ff0 <render_row+0x1a8>
 8001fe6:	4b12      	ldr	r3, [pc, #72]	@ (8002030 <render_row+0x1e8>)
 8001fe8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fec:	611a      	str	r2, [r3, #16]
 8001fee:	e003      	b.n	8001ff8 <render_row+0x1b0>
 8001ff0:	4b0f      	ldr	r3, [pc, #60]	@ (8002030 <render_row+0x1e8>)
 8001ff2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001ff6:	615a      	str	r2, [r3, #20]
 8001ff8:	7afb      	ldrb	r3, [r7, #11]
 8001ffa:	f003 0308 	and.w	r3, r3, #8
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d003      	beq.n	800200a <render_row+0x1c2>
 8002002:	4b0b      	ldr	r3, [pc, #44]	@ (8002030 <render_row+0x1e8>)
 8002004:	2280      	movs	r2, #128	@ 0x80
 8002006:	611a      	str	r2, [r3, #16]
 8002008:	e002      	b.n	8002010 <render_row+0x1c8>
 800200a:	4b09      	ldr	r3, [pc, #36]	@ (8002030 <render_row+0x1e8>)
 800200c:	2280      	movs	r2, #128	@ 0x80
 800200e:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 8002010:	4b07      	ldr	r3, [pc, #28]	@ (8002030 <render_row+0x1e8>)
 8002012:	681b      	ldr	r3, [r3, #0]
 8002014:	4a06      	ldr	r2, [pc, #24]	@ (8002030 <render_row+0x1e8>)
 8002016:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 800201a:	6013      	str	r3, [r2, #0]
}
 800201c:	bf00      	nop
 800201e:	3718      	adds	r7, #24
 8002020:	46bd      	mov	sp, r7
 8002022:	bd80      	pop	{r7, pc}
 8002024:	200012d5 	.word	0x200012d5
 8002028:	20000020 	.word	0x20000020
 800202c:	40010c00 	.word	0x40010c00
 8002030:	40011000 	.word	0x40011000
 8002034:	40011400 	.word	0x40011400
 8002038:	40010800 	.word	0x40010800

0800203c <render_buffer>:



void render_buffer() {
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
	render_row();
 8002040:	f7ff ff02 	bl	8001e48 <render_row>
	if (++current_row == 8) {
 8002044:	4b0b      	ldr	r3, [pc, #44]	@ (8002074 <render_buffer+0x38>)
 8002046:	781b      	ldrb	r3, [r3, #0]
 8002048:	3301      	adds	r3, #1
 800204a:	b2da      	uxtb	r2, r3
 800204c:	4b09      	ldr	r3, [pc, #36]	@ (8002074 <render_buffer+0x38>)
 800204e:	701a      	strb	r2, [r3, #0]
 8002050:	4b08      	ldr	r3, [pc, #32]	@ (8002074 <render_buffer+0x38>)
 8002052:	781b      	ldrb	r3, [r3, #0]
 8002054:	2b08      	cmp	r3, #8
 8002056:	d10b      	bne.n	8002070 <render_buffer+0x34>
		current_row = 0;
 8002058:	4b06      	ldr	r3, [pc, #24]	@ (8002074 <render_buffer+0x38>)
 800205a:	2200      	movs	r2, #0
 800205c:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 800205e:	4b06      	ldr	r3, [pc, #24]	@ (8002078 <render_buffer+0x3c>)
 8002060:	781b      	ldrb	r3, [r3, #0]
 8002062:	2b00      	cmp	r3, #0
 8002064:	d004      	beq.n	8002070 <render_buffer+0x34>
			swap_buffers();
 8002066:	f7ff fe49 	bl	8001cfc <swap_buffers>
			is_back_buffer_new = false;
 800206a:	4b03      	ldr	r3, [pc, #12]	@ (8002078 <render_buffer+0x3c>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002070:	bf00      	nop
 8002072:	bd80      	pop	{r7, pc}
 8002074:	200012d5 	.word	0x200012d5
 8002078:	200012d4 	.word	0x200012d4

0800207c <draw_line>:

// Bresenham's line algorithm
// (https://en.wikipedia.org/wiki/Bresenham's_line_algorithm)
void draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 800207c:	b590      	push	{r4, r7, lr}
 800207e:	b089      	sub	sp, #36	@ 0x24
 8002080:	af00      	add	r7, sp, #0
 8002082:	4604      	mov	r4, r0
 8002084:	4608      	mov	r0, r1
 8002086:	4611      	mov	r1, r2
 8002088:	461a      	mov	r2, r3
 800208a:	4623      	mov	r3, r4
 800208c:	71fb      	strb	r3, [r7, #7]
 800208e:	4603      	mov	r3, r0
 8002090:	71bb      	strb	r3, [r7, #6]
 8002092:	460b      	mov	r3, r1
 8002094:	717b      	strb	r3, [r7, #5]
 8002096:	4613      	mov	r3, r2
 8002098:	713b      	strb	r3, [r7, #4]
	int dx = abs(x1 - x0);
 800209a:	797a      	ldrb	r2, [r7, #5]
 800209c:	79fb      	ldrb	r3, [r7, #7]
 800209e:	1ad3      	subs	r3, r2, r3
 80020a0:	2b00      	cmp	r3, #0
 80020a2:	bfb8      	it	lt
 80020a4:	425b      	neglt	r3, r3
 80020a6:	61bb      	str	r3, [r7, #24]
	int sx = (x0 < x1) ? 1 : -1;
 80020a8:	79fa      	ldrb	r2, [r7, #7]
 80020aa:	797b      	ldrb	r3, [r7, #5]
 80020ac:	429a      	cmp	r2, r3
 80020ae:	d201      	bcs.n	80020b4 <draw_line+0x38>
 80020b0:	2301      	movs	r3, #1
 80020b2:	e001      	b.n	80020b8 <draw_line+0x3c>
 80020b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020b8:	617b      	str	r3, [r7, #20]
	int dy = -abs(y1 - y0);
 80020ba:	793a      	ldrb	r2, [r7, #4]
 80020bc:	79bb      	ldrb	r3, [r7, #6]
 80020be:	1ad3      	subs	r3, r2, r3
 80020c0:	2b00      	cmp	r3, #0
 80020c2:	bfb8      	it	lt
 80020c4:	425b      	neglt	r3, r3
 80020c6:	425b      	negs	r3, r3
 80020c8:	613b      	str	r3, [r7, #16]
	int sy = (y0 < y1) ? 1 : -1;
 80020ca:	79ba      	ldrb	r2, [r7, #6]
 80020cc:	793b      	ldrb	r3, [r7, #4]
 80020ce:	429a      	cmp	r2, r3
 80020d0:	d201      	bcs.n	80020d6 <draw_line+0x5a>
 80020d2:	2301      	movs	r3, #1
 80020d4:	e001      	b.n	80020da <draw_line+0x5e>
 80020d6:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020da:	60fb      	str	r3, [r7, #12]
	int error = dx + dy;
 80020dc:	69ba      	ldr	r2, [r7, #24]
 80020de:	693b      	ldr	r3, [r7, #16]
 80020e0:	4413      	add	r3, r2
 80020e2:	61fb      	str	r3, [r7, #28]

	while (1) {
		set_pixel_w(x0, y0, 1);
 80020e4:	79fb      	ldrb	r3, [r7, #7]
 80020e6:	79b9      	ldrb	r1, [r7, #6]
 80020e8:	2201      	movs	r2, #1
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7ff fe74 	bl	8001dd8 <set_pixel_w>

		if (x0 == x1 && y0 == y1) {
 80020f0:	79fa      	ldrb	r2, [r7, #7]
 80020f2:	797b      	ldrb	r3, [r7, #5]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d103      	bne.n	8002100 <draw_line+0x84>
 80020f8:	79ba      	ldrb	r2, [r7, #6]
 80020fa:	793b      	ldrb	r3, [r7, #4]
 80020fc:	429a      	cmp	r2, r3
 80020fe:	d025      	beq.n	800214c <draw_line+0xd0>
			break;
		}

		int e2 = 2 * error;
 8002100:	69fb      	ldr	r3, [r7, #28]
 8002102:	005b      	lsls	r3, r3, #1
 8002104:	60bb      	str	r3, [r7, #8]
		if (e2 >= dy) {
 8002106:	68ba      	ldr	r2, [r7, #8]
 8002108:	693b      	ldr	r3, [r7, #16]
 800210a:	429a      	cmp	r2, r3
 800210c:	db0c      	blt.n	8002128 <draw_line+0xac>
			if (x0 == x1) {
 800210e:	79fa      	ldrb	r2, [r7, #7]
 8002110:	797b      	ldrb	r3, [r7, #5]
 8002112:	429a      	cmp	r2, r3
 8002114:	d01c      	beq.n	8002150 <draw_line+0xd4>
				break;
			}
			error += dy;
 8002116:	69fa      	ldr	r2, [r7, #28]
 8002118:	693b      	ldr	r3, [r7, #16]
 800211a:	4413      	add	r3, r2
 800211c:	61fb      	str	r3, [r7, #28]
			x0 += sx;
 800211e:	697b      	ldr	r3, [r7, #20]
 8002120:	b2da      	uxtb	r2, r3
 8002122:	79fb      	ldrb	r3, [r7, #7]
 8002124:	4413      	add	r3, r2
 8002126:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 <= dx) {
 8002128:	68ba      	ldr	r2, [r7, #8]
 800212a:	69bb      	ldr	r3, [r7, #24]
 800212c:	429a      	cmp	r2, r3
 800212e:	dcd9      	bgt.n	80020e4 <draw_line+0x68>
			if (y0 == y1) {
 8002130:	79ba      	ldrb	r2, [r7, #6]
 8002132:	793b      	ldrb	r3, [r7, #4]
 8002134:	429a      	cmp	r2, r3
 8002136:	d00d      	beq.n	8002154 <draw_line+0xd8>
				break;
			}
			error += dx;
 8002138:	69fa      	ldr	r2, [r7, #28]
 800213a:	69bb      	ldr	r3, [r7, #24]
 800213c:	4413      	add	r3, r2
 800213e:	61fb      	str	r3, [r7, #28]
			y0 += sy;
 8002140:	68fb      	ldr	r3, [r7, #12]
 8002142:	b2da      	uxtb	r2, r3
 8002144:	79bb      	ldrb	r3, [r7, #6]
 8002146:	4413      	add	r3, r2
 8002148:	71bb      	strb	r3, [r7, #6]
	while (1) {
 800214a:	e7cb      	b.n	80020e4 <draw_line+0x68>
			break;
 800214c:	bf00      	nop
 800214e:	e002      	b.n	8002156 <draw_line+0xda>
				break;
 8002150:	bf00      	nop
 8002152:	e000      	b.n	8002156 <draw_line+0xda>
				break;
 8002154:	bf00      	nop
		}
	}
}
 8002156:	bf00      	nop
 8002158:	3724      	adds	r7, #36	@ 0x24
 800215a:	46bd      	mov	sp, r7
 800215c:	bd90      	pop	{r4, r7, pc}

0800215e <draw_rect>:

void draw_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t r, uint8_t g, uint8_t b) {
 800215e:	b590      	push	{r4, r7, lr}
 8002160:	b087      	sub	sp, #28
 8002162:	af02      	add	r7, sp, #8
 8002164:	4604      	mov	r4, r0
 8002166:	4608      	mov	r0, r1
 8002168:	4611      	mov	r1, r2
 800216a:	461a      	mov	r2, r3
 800216c:	4623      	mov	r3, r4
 800216e:	71fb      	strb	r3, [r7, #7]
 8002170:	4603      	mov	r3, r0
 8002172:	71bb      	strb	r3, [r7, #6]
 8002174:	460b      	mov	r3, r1
 8002176:	717b      	strb	r3, [r7, #5]
 8002178:	4613      	mov	r3, r2
 800217a:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = y; i < y + height && i < HEIGHT; ++i) {
 800217c:	79bb      	ldrb	r3, [r7, #6]
 800217e:	73fb      	strb	r3, [r7, #15]
 8002180:	e01d      	b.n	80021be <draw_rect+0x60>
		for (uint8_t j = x; j < x + width && j < WIDTH; ++j) {
 8002182:	79fb      	ldrb	r3, [r7, #7]
 8002184:	73bb      	strb	r3, [r7, #14]
 8002186:	e00e      	b.n	80021a6 <draw_rect+0x48>
			set_pixel(j, i, r, g, b);
 8002188:	7bb8      	ldrb	r0, [r7, #14]
 800218a:	7bf9      	ldrb	r1, [r7, #15]
 800218c:	f897 4024 	ldrb.w	r4, [r7, #36]	@ 0x24
 8002190:	f897 2020 	ldrb.w	r2, [r7, #32]
 8002194:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002198:	9300      	str	r3, [sp, #0]
 800219a:	4623      	mov	r3, r4
 800219c:	f7ff fdd2 	bl	8001d44 <set_pixel>
		for (uint8_t j = x; j < x + width && j < WIDTH; ++j) {
 80021a0:	7bbb      	ldrb	r3, [r7, #14]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73bb      	strb	r3, [r7, #14]
 80021a6:	7bba      	ldrb	r2, [r7, #14]
 80021a8:	79f9      	ldrb	r1, [r7, #7]
 80021aa:	797b      	ldrb	r3, [r7, #5]
 80021ac:	440b      	add	r3, r1
 80021ae:	429a      	cmp	r2, r3
 80021b0:	da02      	bge.n	80021b8 <draw_rect+0x5a>
 80021b2:	7bbb      	ldrb	r3, [r7, #14]
 80021b4:	2b3f      	cmp	r3, #63	@ 0x3f
 80021b6:	d9e7      	bls.n	8002188 <draw_rect+0x2a>
	for (uint8_t i = y; i < y + height && i < HEIGHT; ++i) {
 80021b8:	7bfb      	ldrb	r3, [r7, #15]
 80021ba:	3301      	adds	r3, #1
 80021bc:	73fb      	strb	r3, [r7, #15]
 80021be:	7bfa      	ldrb	r2, [r7, #15]
 80021c0:	79b9      	ldrb	r1, [r7, #6]
 80021c2:	793b      	ldrb	r3, [r7, #4]
 80021c4:	440b      	add	r3, r1
 80021c6:	429a      	cmp	r2, r3
 80021c8:	da02      	bge.n	80021d0 <draw_rect+0x72>
 80021ca:	7bfb      	ldrb	r3, [r7, #15]
 80021cc:	2b1f      	cmp	r3, #31
 80021ce:	d9d8      	bls.n	8002182 <draw_rect+0x24>
		}
	}
}
 80021d0:	bf00      	nop
 80021d2:	3714      	adds	r7, #20
 80021d4:	46bd      	mov	sp, r7
 80021d6:	bd90      	pop	{r4, r7, pc}

080021d8 <draw_Rect>:
void draw_Rect(Rect rect, uint8_t r, uint8_t g, uint8_t b) {
 80021d8:	b590      	push	{r4, r7, lr}
 80021da:	b089      	sub	sp, #36	@ 0x24
 80021dc:	af04      	add	r7, sp, #16
 80021de:	463c      	mov	r4, r7
 80021e0:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	draw_rect(rect.x, rect.y, rect.width, rect.height, r, g, b);
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	b2d8      	uxtb	r0, r3
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	b2d9      	uxtb	r1, r3
 80021ec:	68bb      	ldr	r3, [r7, #8]
 80021ee:	b2da      	uxtb	r2, r3
 80021f0:	68fb      	ldr	r3, [r7, #12]
 80021f2:	b2dc      	uxtb	r4, r3
 80021f4:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021f8:	9302      	str	r3, [sp, #8]
 80021fa:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021fe:	9301      	str	r3, [sp, #4]
 8002200:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002204:	9300      	str	r3, [sp, #0]
 8002206:	4623      	mov	r3, r4
 8002208:	f7ff ffa9 	bl	800215e <draw_rect>
}
 800220c:	bf00      	nop
 800220e:	3714      	adds	r7, #20
 8002210:	46bd      	mov	sp, r7
 8002212:	bd90      	pop	{r4, r7, pc}

08002214 <Draw_Rect>:
void Draw_Rect(Rect rect, Color color) {
 8002214:	b590      	push	{r4, r7, lr}
 8002216:	b089      	sub	sp, #36	@ 0x24
 8002218:	af04      	add	r7, sp, #16
 800221a:	463c      	mov	r4, r7
 800221c:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	draw_Rect(rect, color.r, color.g, color.b);
 8002220:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002224:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002228:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 800222c:	9102      	str	r1, [sp, #8]
 800222e:	9201      	str	r2, [sp, #4]
 8002230:	9300      	str	r3, [sp, #0]
 8002232:	463b      	mov	r3, r7
 8002234:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8002236:	f7ff ffcf 	bl	80021d8 <draw_Rect>
}
 800223a:	bf00      	nop
 800223c:	3714      	adds	r7, #20
 800223e:	46bd      	mov	sp, r7
 8002240:	bd90      	pop	{r4, r7, pc}

08002242 <set_pixel_w_bold>:
};
#define FONT_WIDTH 5
#define FONT_HEIGHT 7


void set_pixel_w_bold(int x, int y, uint8_t w) {
 8002242:	b580      	push	{r7, lr}
 8002244:	b084      	sub	sp, #16
 8002246:	af00      	add	r7, sp, #0
 8002248:	60f8      	str	r0, [r7, #12]
 800224a:	60b9      	str	r1, [r7, #8]
 800224c:	4613      	mov	r3, r2
 800224e:	71fb      	strb	r3, [r7, #7]
	set_pixel_w(x  , y  , w);
 8002250:	79fb      	ldrb	r3, [r7, #7]
 8002252:	461a      	mov	r2, r3
 8002254:	68b9      	ldr	r1, [r7, #8]
 8002256:	68f8      	ldr	r0, [r7, #12]
 8002258:	f7ff fdbe 	bl	8001dd8 <set_pixel_w>
	set_pixel_w(x+1, y  , w);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	3301      	adds	r3, #1
 8002260:	79fa      	ldrb	r2, [r7, #7]
 8002262:	68b9      	ldr	r1, [r7, #8]
 8002264:	4618      	mov	r0, r3
 8002266:	f7ff fdb7 	bl	8001dd8 <set_pixel_w>
	set_pixel_w(x  , y+1, w);
 800226a:	68bb      	ldr	r3, [r7, #8]
 800226c:	3301      	adds	r3, #1
 800226e:	79fa      	ldrb	r2, [r7, #7]
 8002270:	4619      	mov	r1, r3
 8002272:	68f8      	ldr	r0, [r7, #12]
 8002274:	f7ff fdb0 	bl	8001dd8 <set_pixel_w>
	set_pixel_w(x+1, y+1, w);
 8002278:	68fb      	ldr	r3, [r7, #12]
 800227a:	1c58      	adds	r0, r3, #1
 800227c:	68bb      	ldr	r3, [r7, #8]
 800227e:	3301      	adds	r3, #1
 8002280:	79fa      	ldrb	r2, [r7, #7]
 8002282:	4619      	mov	r1, r3
 8002284:	f7ff fda8 	bl	8001dd8 <set_pixel_w>
}
 8002288:	bf00      	nop
 800228a:	3710      	adds	r7, #16
 800228c:	46bd      	mov	sp, r7
 800228e:	bd80      	pop	{r7, pc}

08002290 <draw_digit>:

void draw_digit(uint8_t num, int x, int y, bool bold) {
 8002290:	b580      	push	{r7, lr}
 8002292:	b086      	sub	sp, #24
 8002294:	af00      	add	r7, sp, #0
 8002296:	60b9      	str	r1, [r7, #8]
 8002298:	607a      	str	r2, [r7, #4]
 800229a:	461a      	mov	r2, r3
 800229c:	4603      	mov	r3, r0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	4613      	mov	r3, r2
 80022a2:	73bb      	strb	r3, [r7, #14]
	if (num > 9) {
 80022a4:	7bfb      	ldrb	r3, [r7, #15]
 80022a6:	2b09      	cmp	r3, #9
 80022a8:	d858      	bhi.n	800235c <draw_digit+0xcc>
		return;
	}
	if (x > WIDTH || y > HEIGHT) {
 80022aa:	68bb      	ldr	r3, [r7, #8]
 80022ac:	2b40      	cmp	r3, #64	@ 0x40
 80022ae:	dc57      	bgt.n	8002360 <draw_digit+0xd0>
 80022b0:	687b      	ldr	r3, [r7, #4]
 80022b2:	2b20      	cmp	r3, #32
 80022b4:	dc54      	bgt.n	8002360 <draw_digit+0xd0>
		return;
	}
	if (x < -FONT_WIDTH - FONT_WIDTH*bold || y < -FONT_HEIGHT - FONT_HEIGHT*bold) {
 80022b6:	7bbb      	ldrb	r3, [r7, #14]
 80022b8:	1c5a      	adds	r2, r3, #1
 80022ba:	4613      	mov	r3, r2
 80022bc:	079b      	lsls	r3, r3, #30
 80022be:	1a9b      	subs	r3, r3, r2
 80022c0:	009b      	lsls	r3, r3, #2
 80022c2:	1a9b      	subs	r3, r3, r2
 80022c4:	68ba      	ldr	r2, [r7, #8]
 80022c6:	429a      	cmp	r2, r3
 80022c8:	db4c      	blt.n	8002364 <draw_digit+0xd4>
 80022ca:	7bbb      	ldrb	r3, [r7, #14]
 80022cc:	3301      	adds	r3, #1
 80022ce:	461a      	mov	r2, r3
 80022d0:	00db      	lsls	r3, r3, #3
 80022d2:	1ad3      	subs	r3, r2, r3
 80022d4:	687a      	ldr	r2, [r7, #4]
 80022d6:	429a      	cmp	r2, r3
 80022d8:	db44      	blt.n	8002364 <draw_digit+0xd4>
		return;
	}

	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 80022da:	2300      	movs	r3, #0
 80022dc:	75fb      	strb	r3, [r7, #23]
 80022de:	e039      	b.n	8002354 <draw_digit+0xc4>
		uint8_t col_bitmap = text_bitmaps[num+59][col];
 80022e0:	7bfb      	ldrb	r3, [r7, #15]
 80022e2:	f103 023b 	add.w	r2, r3, #59	@ 0x3b
 80022e6:	7df9      	ldrb	r1, [r7, #23]
 80022e8:	4820      	ldr	r0, [pc, #128]	@ (800236c <draw_digit+0xdc>)
 80022ea:	4613      	mov	r3, r2
 80022ec:	009b      	lsls	r3, r3, #2
 80022ee:	4413      	add	r3, r2
 80022f0:	4403      	add	r3, r0
 80022f2:	440b      	add	r3, r1
 80022f4:	781b      	ldrb	r3, [r3, #0]
 80022f6:	757b      	strb	r3, [r7, #21]

		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 80022f8:	2300      	movs	r3, #0
 80022fa:	75bb      	strb	r3, [r7, #22]
 80022fc:	e024      	b.n	8002348 <draw_digit+0xb8>
			if (col_bitmap & (1 << row)) {
 80022fe:	7d7a      	ldrb	r2, [r7, #21]
 8002300:	7dbb      	ldrb	r3, [r7, #22]
 8002302:	fa42 f303 	asr.w	r3, r2, r3
 8002306:	f003 0301 	and.w	r3, r3, #1
 800230a:	2b00      	cmp	r3, #0
 800230c:	d019      	beq.n	8002342 <draw_digit+0xb2>
				if (bold) {
 800230e:	7bbb      	ldrb	r3, [r7, #14]
 8002310:	2b00      	cmp	r3, #0
 8002312:	d00c      	beq.n	800232e <draw_digit+0x9e>
					set_pixel_w_bold(x + 2 * col, y + 2 * row, 1);
 8002314:	7dfb      	ldrb	r3, [r7, #23]
 8002316:	005a      	lsls	r2, r3, #1
 8002318:	68bb      	ldr	r3, [r7, #8]
 800231a:	18d0      	adds	r0, r2, r3
 800231c:	7dbb      	ldrb	r3, [r7, #22]
 800231e:	005a      	lsls	r2, r3, #1
 8002320:	687b      	ldr	r3, [r7, #4]
 8002322:	4413      	add	r3, r2
 8002324:	2201      	movs	r2, #1
 8002326:	4619      	mov	r1, r3
 8002328:	f7ff ff8b 	bl	8002242 <set_pixel_w_bold>
 800232c:	e009      	b.n	8002342 <draw_digit+0xb2>
				} else {
					set_pixel_w(x + col, y + row, 1);
 800232e:	7dfa      	ldrb	r2, [r7, #23]
 8002330:	68bb      	ldr	r3, [r7, #8]
 8002332:	18d0      	adds	r0, r2, r3
 8002334:	7dba      	ldrb	r2, [r7, #22]
 8002336:	687b      	ldr	r3, [r7, #4]
 8002338:	4413      	add	r3, r2
 800233a:	2201      	movs	r2, #1
 800233c:	4619      	mov	r1, r3
 800233e:	f7ff fd4b 	bl	8001dd8 <set_pixel_w>
		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 8002342:	7dbb      	ldrb	r3, [r7, #22]
 8002344:	3301      	adds	r3, #1
 8002346:	75bb      	strb	r3, [r7, #22]
 8002348:	7dbb      	ldrb	r3, [r7, #22]
 800234a:	2b06      	cmp	r3, #6
 800234c:	d9d7      	bls.n	80022fe <draw_digit+0x6e>
	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 800234e:	7dfb      	ldrb	r3, [r7, #23]
 8002350:	3301      	adds	r3, #1
 8002352:	75fb      	strb	r3, [r7, #23]
 8002354:	7dfb      	ldrb	r3, [r7, #23]
 8002356:	2b04      	cmp	r3, #4
 8002358:	d9c2      	bls.n	80022e0 <draw_digit+0x50>
 800235a:	e004      	b.n	8002366 <draw_digit+0xd6>
		return;
 800235c:	bf00      	nop
 800235e:	e002      	b.n	8002366 <draw_digit+0xd6>
		return;
 8002360:	bf00      	nop
 8002362:	e000      	b.n	8002366 <draw_digit+0xd6>
		return;
 8002364:	bf00      	nop
				}
			}
		}
	}
}
 8002366:	3718      	adds	r7, #24
 8002368:	46bd      	mov	sp, r7
 800236a:	bd80      	pop	{r7, pc}
 800236c:	08005668 	.word	0x08005668

08002370 <draw_number>:

void draw_number(int num, int x, int y, bool bold) {
 8002370:	b580      	push	{r7, lr}
 8002372:	b08a      	sub	sp, #40	@ 0x28
 8002374:	af00      	add	r7, sp, #0
 8002376:	60f8      	str	r0, [r7, #12]
 8002378:	60b9      	str	r1, [r7, #8]
 800237a:	607a      	str	r2, [r7, #4]
 800237c:	70fb      	strb	r3, [r7, #3]
	if (num == 0) {
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	2b00      	cmp	r3, #0
 8002382:	d106      	bne.n	8002392 <draw_number+0x22>
		draw_digit(0, x, y, bold);
 8002384:	78fb      	ldrb	r3, [r7, #3]
 8002386:	687a      	ldr	r2, [r7, #4]
 8002388:	68b9      	ldr	r1, [r7, #8]
 800238a:	2000      	movs	r0, #0
 800238c:	f7ff ff80 	bl	8002290 <draw_digit>
		return;
 8002390:	e049      	b.n	8002426 <draw_number+0xb6>
	}

	uint8_t digit_count = 0;
 8002392:	2300      	movs	r3, #0
 8002394:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	int tmp = num;
 8002398:	68fb      	ldr	r3, [r7, #12]
 800239a:	623b      	str	r3, [r7, #32]
	while (tmp > 0) {
 800239c:	e00c      	b.n	80023b8 <draw_number+0x48>
		tmp /= 10;
 800239e:	6a3b      	ldr	r3, [r7, #32]
 80023a0:	4a22      	ldr	r2, [pc, #136]	@ (800242c <draw_number+0xbc>)
 80023a2:	fb82 1203 	smull	r1, r2, r2, r3
 80023a6:	1092      	asrs	r2, r2, #2
 80023a8:	17db      	asrs	r3, r3, #31
 80023aa:	1ad3      	subs	r3, r2, r3
 80023ac:	623b      	str	r3, [r7, #32]
		digit_count++;
 80023ae:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023b2:	3301      	adds	r3, #1
 80023b4:	f887 3027 	strb.w	r3, [r7, #39]	@ 0x27
	while (tmp > 0) {
 80023b8:	6a3b      	ldr	r3, [r7, #32]
 80023ba:	2b00      	cmp	r3, #0
 80023bc:	dcef      	bgt.n	800239e <draw_number+0x2e>
	}

	uint8_t digit_width = bold ? (FONT_WIDTH * 2) : FONT_WIDTH;
 80023be:	78fb      	ldrb	r3, [r7, #3]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d001      	beq.n	80023c8 <draw_number+0x58>
 80023c4:	230a      	movs	r3, #10
 80023c6:	e000      	b.n	80023ca <draw_number+0x5a>
 80023c8:	2305      	movs	r3, #5
 80023ca:	76fb      	strb	r3, [r7, #27]
	for (int i = digit_count - 1; i >= 0; --i) {
 80023cc:	f897 3027 	ldrb.w	r3, [r7, #39]	@ 0x27
 80023d0:	3b01      	subs	r3, #1
 80023d2:	61fb      	str	r3, [r7, #28]
 80023d4:	e024      	b.n	8002420 <draw_number+0xb0>
		int digit = num % 10;
 80023d6:	68fa      	ldr	r2, [r7, #12]
 80023d8:	4b14      	ldr	r3, [pc, #80]	@ (800242c <draw_number+0xbc>)
 80023da:	fb83 1302 	smull	r1, r3, r3, r2
 80023de:	1099      	asrs	r1, r3, #2
 80023e0:	17d3      	asrs	r3, r2, #31
 80023e2:	1ac9      	subs	r1, r1, r3
 80023e4:	460b      	mov	r3, r1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	440b      	add	r3, r1
 80023ea:	005b      	lsls	r3, r3, #1
 80023ec:	1ad3      	subs	r3, r2, r3
 80023ee:	617b      	str	r3, [r7, #20]
		draw_digit(digit, x + i * (digit_width + 1), y, bold);
 80023f0:	697b      	ldr	r3, [r7, #20]
 80023f2:	b2d8      	uxtb	r0, r3
 80023f4:	7efb      	ldrb	r3, [r7, #27]
 80023f6:	3301      	adds	r3, #1
 80023f8:	69fa      	ldr	r2, [r7, #28]
 80023fa:	fb03 f202 	mul.w	r2, r3, r2
 80023fe:	68bb      	ldr	r3, [r7, #8]
 8002400:	18d1      	adds	r1, r2, r3
 8002402:	78fb      	ldrb	r3, [r7, #3]
 8002404:	687a      	ldr	r2, [r7, #4]
 8002406:	f7ff ff43 	bl	8002290 <draw_digit>
		num /= 10;
 800240a:	68fb      	ldr	r3, [r7, #12]
 800240c:	4a07      	ldr	r2, [pc, #28]	@ (800242c <draw_number+0xbc>)
 800240e:	fb82 1203 	smull	r1, r2, r2, r3
 8002412:	1092      	asrs	r2, r2, #2
 8002414:	17db      	asrs	r3, r3, #31
 8002416:	1ad3      	subs	r3, r2, r3
 8002418:	60fb      	str	r3, [r7, #12]
	for (int i = digit_count - 1; i >= 0; --i) {
 800241a:	69fb      	ldr	r3, [r7, #28]
 800241c:	3b01      	subs	r3, #1
 800241e:	61fb      	str	r3, [r7, #28]
 8002420:	69fb      	ldr	r3, [r7, #28]
 8002422:	2b00      	cmp	r3, #0
 8002424:	dad7      	bge.n	80023d6 <draw_number+0x66>
	}
}
 8002426:	3728      	adds	r7, #40	@ 0x28
 8002428:	46bd      	mov	sp, r7
 800242a:	bd80      	pop	{r7, pc}
 800242c:	66666667 	.word	0x66666667

08002430 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002430:	b480      	push	{r7}
 8002432:	b085      	sub	sp, #20
 8002434:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8002436:	4b15      	ldr	r3, [pc, #84]	@ (800248c <HAL_MspInit+0x5c>)
 8002438:	699b      	ldr	r3, [r3, #24]
 800243a:	4a14      	ldr	r2, [pc, #80]	@ (800248c <HAL_MspInit+0x5c>)
 800243c:	f043 0301 	orr.w	r3, r3, #1
 8002440:	6193      	str	r3, [r2, #24]
 8002442:	4b12      	ldr	r3, [pc, #72]	@ (800248c <HAL_MspInit+0x5c>)
 8002444:	699b      	ldr	r3, [r3, #24]
 8002446:	f003 0301 	and.w	r3, r3, #1
 800244a:	60bb      	str	r3, [r7, #8]
 800244c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <HAL_MspInit+0x5c>)
 8002450:	69db      	ldr	r3, [r3, #28]
 8002452:	4a0e      	ldr	r2, [pc, #56]	@ (800248c <HAL_MspInit+0x5c>)
 8002454:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002458:	61d3      	str	r3, [r2, #28]
 800245a:	4b0c      	ldr	r3, [pc, #48]	@ (800248c <HAL_MspInit+0x5c>)
 800245c:	69db      	ldr	r3, [r3, #28]
 800245e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002462:	607b      	str	r3, [r7, #4]
 8002464:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8002466:	4b0a      	ldr	r3, [pc, #40]	@ (8002490 <HAL_MspInit+0x60>)
 8002468:	685b      	ldr	r3, [r3, #4]
 800246a:	60fb      	str	r3, [r7, #12]
 800246c:	68fb      	ldr	r3, [r7, #12]
 800246e:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002472:	60fb      	str	r3, [r7, #12]
 8002474:	68fb      	ldr	r3, [r7, #12]
 8002476:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800247a:	60fb      	str	r3, [r7, #12]
 800247c:	4a04      	ldr	r2, [pc, #16]	@ (8002490 <HAL_MspInit+0x60>)
 800247e:	68fb      	ldr	r3, [r7, #12]
 8002480:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002482:	bf00      	nop
 8002484:	3714      	adds	r7, #20
 8002486:	46bd      	mov	sp, r7
 8002488:	bc80      	pop	{r7}
 800248a:	4770      	bx	lr
 800248c:	40021000 	.word	0x40021000
 8002490:	40010000 	.word	0x40010000

08002494 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002494:	b580      	push	{r7, lr}
 8002496:	b088      	sub	sp, #32
 8002498:	af00      	add	r7, sp, #0
 800249a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800249c:	f107 0310 	add.w	r3, r7, #16
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]
 80024a4:	605a      	str	r2, [r3, #4]
 80024a6:	609a      	str	r2, [r3, #8]
 80024a8:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	681b      	ldr	r3, [r3, #0]
 80024ae:	4a15      	ldr	r2, [pc, #84]	@ (8002504 <HAL_SPI_MspInit+0x70>)
 80024b0:	4293      	cmp	r3, r2
 80024b2:	d123      	bne.n	80024fc <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80024b4:	4b14      	ldr	r3, [pc, #80]	@ (8002508 <HAL_SPI_MspInit+0x74>)
 80024b6:	699b      	ldr	r3, [r3, #24]
 80024b8:	4a13      	ldr	r2, [pc, #76]	@ (8002508 <HAL_SPI_MspInit+0x74>)
 80024ba:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80024be:	6193      	str	r3, [r2, #24]
 80024c0:	4b11      	ldr	r3, [pc, #68]	@ (8002508 <HAL_SPI_MspInit+0x74>)
 80024c2:	699b      	ldr	r3, [r3, #24]
 80024c4:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80024c8:	60fb      	str	r3, [r7, #12]
 80024ca:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80024cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002508 <HAL_SPI_MspInit+0x74>)
 80024ce:	699b      	ldr	r3, [r3, #24]
 80024d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002508 <HAL_SPI_MspInit+0x74>)
 80024d2:	f043 0304 	orr.w	r3, r3, #4
 80024d6:	6193      	str	r3, [r2, #24]
 80024d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002508 <HAL_SPI_MspInit+0x74>)
 80024da:	699b      	ldr	r3, [r3, #24]
 80024dc:	f003 0304 	and.w	r3, r3, #4
 80024e0:	60bb      	str	r3, [r7, #8]
 80024e2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024e4:	23a0      	movs	r3, #160	@ 0xa0
 80024e6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024e8:	2302      	movs	r3, #2
 80024ea:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024ec:	2303      	movs	r3, #3
 80024ee:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024f0:	f107 0310 	add.w	r3, r7, #16
 80024f4:	4619      	mov	r1, r3
 80024f6:	4805      	ldr	r0, [pc, #20]	@ (800250c <HAL_SPI_MspInit+0x78>)
 80024f8:	f000 fb3e 	bl	8002b78 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80024fc:	bf00      	nop
 80024fe:	3720      	adds	r7, #32
 8002500:	46bd      	mov	sp, r7
 8002502:	bd80      	pop	{r7, pc}
 8002504:	40013000 	.word	0x40013000
 8002508:	40021000 	.word	0x40021000
 800250c:	40010800 	.word	0x40010800

08002510 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002510:	b580      	push	{r7, lr}
 8002512:	b084      	sub	sp, #16
 8002514:	af00      	add	r7, sp, #0
 8002516:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	681b      	ldr	r3, [r3, #0]
 800251c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002520:	d114      	bne.n	800254c <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002522:	4b15      	ldr	r3, [pc, #84]	@ (8002578 <HAL_TIM_Base_MspInit+0x68>)
 8002524:	69db      	ldr	r3, [r3, #28]
 8002526:	4a14      	ldr	r2, [pc, #80]	@ (8002578 <HAL_TIM_Base_MspInit+0x68>)
 8002528:	f043 0301 	orr.w	r3, r3, #1
 800252c:	61d3      	str	r3, [r2, #28]
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_TIM_Base_MspInit+0x68>)
 8002530:	69db      	ldr	r3, [r3, #28]
 8002532:	f003 0301 	and.w	r3, r3, #1
 8002536:	60fb      	str	r3, [r7, #12]
 8002538:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800253a:	2200      	movs	r2, #0
 800253c:	2100      	movs	r1, #0
 800253e:	201c      	movs	r0, #28
 8002540:	f000 fae3 	bl	8002b0a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002544:	201c      	movs	r0, #28
 8002546:	f000 fafc 	bl	8002b42 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800254a:	e010      	b.n	800256e <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	681b      	ldr	r3, [r3, #0]
 8002550:	4a0a      	ldr	r2, [pc, #40]	@ (800257c <HAL_TIM_Base_MspInit+0x6c>)
 8002552:	4293      	cmp	r3, r2
 8002554:	d10b      	bne.n	800256e <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002556:	4b08      	ldr	r3, [pc, #32]	@ (8002578 <HAL_TIM_Base_MspInit+0x68>)
 8002558:	69db      	ldr	r3, [r3, #28]
 800255a:	4a07      	ldr	r2, [pc, #28]	@ (8002578 <HAL_TIM_Base_MspInit+0x68>)
 800255c:	f043 0302 	orr.w	r3, r3, #2
 8002560:	61d3      	str	r3, [r2, #28]
 8002562:	4b05      	ldr	r3, [pc, #20]	@ (8002578 <HAL_TIM_Base_MspInit+0x68>)
 8002564:	69db      	ldr	r3, [r3, #28]
 8002566:	f003 0302 	and.w	r3, r3, #2
 800256a:	60bb      	str	r3, [r7, #8]
 800256c:	68bb      	ldr	r3, [r7, #8]
}
 800256e:	bf00      	nop
 8002570:	3710      	adds	r7, #16
 8002572:	46bd      	mov	sp, r7
 8002574:	bd80      	pop	{r7, pc}
 8002576:	bf00      	nop
 8002578:	40021000 	.word	0x40021000
 800257c:	40000400 	.word	0x40000400

08002580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002580:	b580      	push	{r7, lr}
 8002582:	b08a      	sub	sp, #40	@ 0x28
 8002584:	af00      	add	r7, sp, #0
 8002586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	2200      	movs	r2, #0
 800258e:	601a      	str	r2, [r3, #0]
 8002590:	605a      	str	r2, [r3, #4]
 8002592:	609a      	str	r2, [r3, #8]
 8002594:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800259e:	d118      	bne.n	80025d2 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80025a0:	4b25      	ldr	r3, [pc, #148]	@ (8002638 <HAL_TIM_MspPostInit+0xb8>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a24      	ldr	r2, [pc, #144]	@ (8002638 <HAL_TIM_MspPostInit+0xb8>)
 80025a6:	f043 0304 	orr.w	r3, r3, #4
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b22      	ldr	r3, [pc, #136]	@ (8002638 <HAL_TIM_MspPostInit+0xb8>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0304 	and.w	r3, r3, #4
 80025b4:	613b      	str	r3, [r7, #16]
 80025b6:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025b8:	2301      	movs	r3, #1
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	481c      	ldr	r0, [pc, #112]	@ (800263c <HAL_TIM_MspPostInit+0xbc>)
 80025cc:	f000 fad4 	bl	8002b78 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80025d0:	e02e      	b.n	8002630 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4a1a      	ldr	r2, [pc, #104]	@ (8002640 <HAL_TIM_MspPostInit+0xc0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d129      	bne.n	8002630 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025dc:	4b16      	ldr	r3, [pc, #88]	@ (8002638 <HAL_TIM_MspPostInit+0xb8>)
 80025de:	699b      	ldr	r3, [r3, #24]
 80025e0:	4a15      	ldr	r2, [pc, #84]	@ (8002638 <HAL_TIM_MspPostInit+0xb8>)
 80025e2:	f043 0310 	orr.w	r3, r3, #16
 80025e6:	6193      	str	r3, [r2, #24]
 80025e8:	4b13      	ldr	r3, [pc, #76]	@ (8002638 <HAL_TIM_MspPostInit+0xb8>)
 80025ea:	699b      	ldr	r3, [r3, #24]
 80025ec:	f003 0310 	and.w	r3, r3, #16
 80025f0:	60fb      	str	r3, [r7, #12]
 80025f2:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025f4:	2340      	movs	r3, #64	@ 0x40
 80025f6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f8:	2302      	movs	r3, #2
 80025fa:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025fc:	2302      	movs	r3, #2
 80025fe:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002600:	f107 0314 	add.w	r3, r7, #20
 8002604:	4619      	mov	r1, r3
 8002606:	480f      	ldr	r0, [pc, #60]	@ (8002644 <HAL_TIM_MspPostInit+0xc4>)
 8002608:	f000 fab6 	bl	8002b78 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 800260c:	4b0e      	ldr	r3, [pc, #56]	@ (8002648 <HAL_TIM_MspPostInit+0xc8>)
 800260e:	685b      	ldr	r3, [r3, #4]
 8002610:	627b      	str	r3, [r7, #36]	@ 0x24
 8002612:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002614:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8002618:	627b      	str	r3, [r7, #36]	@ 0x24
 800261a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800261c:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8002620:	627b      	str	r3, [r7, #36]	@ 0x24
 8002622:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002624:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8002628:	627b      	str	r3, [r7, #36]	@ 0x24
 800262a:	4a07      	ldr	r2, [pc, #28]	@ (8002648 <HAL_TIM_MspPostInit+0xc8>)
 800262c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800262e:	6053      	str	r3, [r2, #4]
}
 8002630:	bf00      	nop
 8002632:	3728      	adds	r7, #40	@ 0x28
 8002634:	46bd      	mov	sp, r7
 8002636:	bd80      	pop	{r7, pc}
 8002638:	40021000 	.word	0x40021000
 800263c:	40010800 	.word	0x40010800
 8002640:	40000400 	.word	0x40000400
 8002644:	40011000 	.word	0x40011000
 8002648:	40010000 	.word	0x40010000

0800264c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800264c:	b480      	push	{r7}
 800264e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002650:	bf00      	nop
 8002652:	e7fd      	b.n	8002650 <NMI_Handler+0x4>

08002654 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002654:	b480      	push	{r7}
 8002656:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002658:	bf00      	nop
 800265a:	e7fd      	b.n	8002658 <HardFault_Handler+0x4>

0800265c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800265c:	b480      	push	{r7}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002660:	bf00      	nop
 8002662:	e7fd      	b.n	8002660 <MemManage_Handler+0x4>

08002664 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002664:	b480      	push	{r7}
 8002666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002668:	bf00      	nop
 800266a:	e7fd      	b.n	8002668 <BusFault_Handler+0x4>

0800266c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800266c:	b480      	push	{r7}
 800266e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002670:	bf00      	nop
 8002672:	e7fd      	b.n	8002670 <UsageFault_Handler+0x4>

08002674 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002674:	b480      	push	{r7}
 8002676:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002678:	bf00      	nop
 800267a:	46bd      	mov	sp, r7
 800267c:	bc80      	pop	{r7}
 800267e:	4770      	bx	lr

08002680 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002684:	bf00      	nop
 8002686:	46bd      	mov	sp, r7
 8002688:	bc80      	pop	{r7}
 800268a:	4770      	bx	lr

0800268c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800268c:	b480      	push	{r7}
 800268e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002690:	bf00      	nop
 8002692:	46bd      	mov	sp, r7
 8002694:	bc80      	pop	{r7}
 8002696:	4770      	bx	lr

08002698 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002698:	b580      	push	{r7, lr}
 800269a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800269c:	f000 f942 	bl	8002924 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80026a0:	bf00      	nop
 80026a2:	bd80      	pop	{r7, pc}

080026a4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 80026a8:	f7ff fcc8 	bl	800203c <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80026ac:	4802      	ldr	r0, [pc, #8]	@ (80026b8 <TIM2_IRQHandler+0x14>)
 80026ae:	f001 fa15 	bl	8003adc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80026b2:	bf00      	nop
 80026b4:	bd80      	pop	{r7, pc}
 80026b6:	bf00      	nop
 80026b8:	2000022c 	.word	0x2000022c

080026bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80026bc:	b480      	push	{r7}
 80026be:	af00      	add	r7, sp, #0
  return 1;
 80026c0:	2301      	movs	r3, #1
}
 80026c2:	4618      	mov	r0, r3
 80026c4:	46bd      	mov	sp, r7
 80026c6:	bc80      	pop	{r7}
 80026c8:	4770      	bx	lr

080026ca <_kill>:

int _kill(int pid, int sig)
{
 80026ca:	b580      	push	{r7, lr}
 80026cc:	b082      	sub	sp, #8
 80026ce:	af00      	add	r7, sp, #0
 80026d0:	6078      	str	r0, [r7, #4]
 80026d2:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80026d4:	f002 f966 	bl	80049a4 <__errno>
 80026d8:	4603      	mov	r3, r0
 80026da:	2216      	movs	r2, #22
 80026dc:	601a      	str	r2, [r3, #0]
  return -1;
 80026de:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026e2:	4618      	mov	r0, r3
 80026e4:	3708      	adds	r7, #8
 80026e6:	46bd      	mov	sp, r7
 80026e8:	bd80      	pop	{r7, pc}

080026ea <_exit>:

void _exit (int status)
{
 80026ea:	b580      	push	{r7, lr}
 80026ec:	b082      	sub	sp, #8
 80026ee:	af00      	add	r7, sp, #0
 80026f0:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026f2:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026f6:	6878      	ldr	r0, [r7, #4]
 80026f8:	f7ff ffe7 	bl	80026ca <_kill>
  while (1) {}    /* Make sure we hang here */
 80026fc:	bf00      	nop
 80026fe:	e7fd      	b.n	80026fc <_exit+0x12>

08002700 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002700:	b580      	push	{r7, lr}
 8002702:	b086      	sub	sp, #24
 8002704:	af00      	add	r7, sp, #0
 8002706:	60f8      	str	r0, [r7, #12]
 8002708:	60b9      	str	r1, [r7, #8]
 800270a:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270c:	2300      	movs	r3, #0
 800270e:	617b      	str	r3, [r7, #20]
 8002710:	e00a      	b.n	8002728 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002712:	f3af 8000 	nop.w
 8002716:	4601      	mov	r1, r0
 8002718:	68bb      	ldr	r3, [r7, #8]
 800271a:	1c5a      	adds	r2, r3, #1
 800271c:	60ba      	str	r2, [r7, #8]
 800271e:	b2ca      	uxtb	r2, r1
 8002720:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002722:	697b      	ldr	r3, [r7, #20]
 8002724:	3301      	adds	r3, #1
 8002726:	617b      	str	r3, [r7, #20]
 8002728:	697a      	ldr	r2, [r7, #20]
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	429a      	cmp	r2, r3
 800272e:	dbf0      	blt.n	8002712 <_read+0x12>
  }

  return len;
 8002730:	687b      	ldr	r3, [r7, #4]
}
 8002732:	4618      	mov	r0, r3
 8002734:	3718      	adds	r7, #24
 8002736:	46bd      	mov	sp, r7
 8002738:	bd80      	pop	{r7, pc}

0800273a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800273a:	b580      	push	{r7, lr}
 800273c:	b086      	sub	sp, #24
 800273e:	af00      	add	r7, sp, #0
 8002740:	60f8      	str	r0, [r7, #12]
 8002742:	60b9      	str	r1, [r7, #8]
 8002744:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002746:	2300      	movs	r3, #0
 8002748:	617b      	str	r3, [r7, #20]
 800274a:	e009      	b.n	8002760 <_write+0x26>
  {
    __io_putchar(*ptr++);
 800274c:	68bb      	ldr	r3, [r7, #8]
 800274e:	1c5a      	adds	r2, r3, #1
 8002750:	60ba      	str	r2, [r7, #8]
 8002752:	781b      	ldrb	r3, [r3, #0]
 8002754:	4618      	mov	r0, r3
 8002756:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800275a:	697b      	ldr	r3, [r7, #20]
 800275c:	3301      	adds	r3, #1
 800275e:	617b      	str	r3, [r7, #20]
 8002760:	697a      	ldr	r2, [r7, #20]
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	429a      	cmp	r2, r3
 8002766:	dbf1      	blt.n	800274c <_write+0x12>
  }
  return len;
 8002768:	687b      	ldr	r3, [r7, #4]
}
 800276a:	4618      	mov	r0, r3
 800276c:	3718      	adds	r7, #24
 800276e:	46bd      	mov	sp, r7
 8002770:	bd80      	pop	{r7, pc}

08002772 <_close>:

int _close(int file)
{
 8002772:	b480      	push	{r7}
 8002774:	b083      	sub	sp, #12
 8002776:	af00      	add	r7, sp, #0
 8002778:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800277a:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 800277e:	4618      	mov	r0, r3
 8002780:	370c      	adds	r7, #12
 8002782:	46bd      	mov	sp, r7
 8002784:	bc80      	pop	{r7}
 8002786:	4770      	bx	lr

08002788 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002788:	b480      	push	{r7}
 800278a:	b083      	sub	sp, #12
 800278c:	af00      	add	r7, sp, #0
 800278e:	6078      	str	r0, [r7, #4]
 8002790:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002798:	605a      	str	r2, [r3, #4]
  return 0;
 800279a:	2300      	movs	r3, #0
}
 800279c:	4618      	mov	r0, r3
 800279e:	370c      	adds	r7, #12
 80027a0:	46bd      	mov	sp, r7
 80027a2:	bc80      	pop	{r7}
 80027a4:	4770      	bx	lr

080027a6 <_isatty>:

int _isatty(int file)
{
 80027a6:	b480      	push	{r7}
 80027a8:	b083      	sub	sp, #12
 80027aa:	af00      	add	r7, sp, #0
 80027ac:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80027ae:	2301      	movs	r3, #1
}
 80027b0:	4618      	mov	r0, r3
 80027b2:	370c      	adds	r7, #12
 80027b4:	46bd      	mov	sp, r7
 80027b6:	bc80      	pop	{r7}
 80027b8:	4770      	bx	lr

080027ba <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80027ba:	b480      	push	{r7}
 80027bc:	b085      	sub	sp, #20
 80027be:	af00      	add	r7, sp, #0
 80027c0:	60f8      	str	r0, [r7, #12]
 80027c2:	60b9      	str	r1, [r7, #8]
 80027c4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80027c6:	2300      	movs	r3, #0
}
 80027c8:	4618      	mov	r0, r3
 80027ca:	3714      	adds	r7, #20
 80027cc:	46bd      	mov	sp, r7
 80027ce:	bc80      	pop	{r7}
 80027d0:	4770      	bx	lr
	...

080027d4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80027d4:	b580      	push	{r7, lr}
 80027d6:	b086      	sub	sp, #24
 80027d8:	af00      	add	r7, sp, #0
 80027da:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027dc:	4a14      	ldr	r2, [pc, #80]	@ (8002830 <_sbrk+0x5c>)
 80027de:	4b15      	ldr	r3, [pc, #84]	@ (8002834 <_sbrk+0x60>)
 80027e0:	1ad3      	subs	r3, r2, r3
 80027e2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027e4:	697b      	ldr	r3, [r7, #20]
 80027e6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027e8:	4b13      	ldr	r3, [pc, #76]	@ (8002838 <_sbrk+0x64>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	2b00      	cmp	r3, #0
 80027ee:	d102      	bne.n	80027f6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027f0:	4b11      	ldr	r3, [pc, #68]	@ (8002838 <_sbrk+0x64>)
 80027f2:	4a12      	ldr	r2, [pc, #72]	@ (800283c <_sbrk+0x68>)
 80027f4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027f6:	4b10      	ldr	r3, [pc, #64]	@ (8002838 <_sbrk+0x64>)
 80027f8:	681a      	ldr	r2, [r3, #0]
 80027fa:	687b      	ldr	r3, [r7, #4]
 80027fc:	4413      	add	r3, r2
 80027fe:	693a      	ldr	r2, [r7, #16]
 8002800:	429a      	cmp	r2, r3
 8002802:	d207      	bcs.n	8002814 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002804:	f002 f8ce 	bl	80049a4 <__errno>
 8002808:	4603      	mov	r3, r0
 800280a:	220c      	movs	r2, #12
 800280c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800280e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 8002812:	e009      	b.n	8002828 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002814:	4b08      	ldr	r3, [pc, #32]	@ (8002838 <_sbrk+0x64>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800281a:	4b07      	ldr	r3, [pc, #28]	@ (8002838 <_sbrk+0x64>)
 800281c:	681a      	ldr	r2, [r3, #0]
 800281e:	687b      	ldr	r3, [r7, #4]
 8002820:	4413      	add	r3, r2
 8002822:	4a05      	ldr	r2, [pc, #20]	@ (8002838 <_sbrk+0x64>)
 8002824:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002826:	68fb      	ldr	r3, [r7, #12]
}
 8002828:	4618      	mov	r0, r3
 800282a:	3718      	adds	r7, #24
 800282c:	46bd      	mov	sp, r7
 800282e:	bd80      	pop	{r7, pc}
 8002830:	20005000 	.word	0x20005000
 8002834:	00000400 	.word	0x00000400
 8002838:	200012d8 	.word	0x200012d8
 800283c:	20001430 	.word	0x20001430

08002840 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002840:	b480      	push	{r7}
 8002842:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002844:	bf00      	nop
 8002846:	46bd      	mov	sp, r7
 8002848:	bc80      	pop	{r7}
 800284a:	4770      	bx	lr

0800284c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800284c:	f7ff fff8 	bl	8002840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002850:	480b      	ldr	r0, [pc, #44]	@ (8002880 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002852:	490c      	ldr	r1, [pc, #48]	@ (8002884 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002854:	4a0c      	ldr	r2, [pc, #48]	@ (8002888 <LoopFillZerobss+0x16>)
  movs r3, #0
 8002856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002858:	e002      	b.n	8002860 <LoopCopyDataInit>

0800285a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800285a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800285c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800285e:	3304      	adds	r3, #4

08002860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002864:	d3f9      	bcc.n	800285a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002866:	4a09      	ldr	r2, [pc, #36]	@ (800288c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8002868:	4c09      	ldr	r4, [pc, #36]	@ (8002890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800286a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800286c:	e001      	b.n	8002872 <LoopFillZerobss>

0800286e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800286e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002870:	3204      	adds	r2, #4

08002872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002874:	d3fb      	bcc.n	800286e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8002876:	f002 f89b 	bl	80049b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800287a:	f7fe ffa9 	bl	80017d0 <main>
  bx lr
 800287e:	4770      	bx	lr
  ldr r0, =_sdata
 8002880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002884:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 8002888:	080058cc 	.word	0x080058cc
  ldr r2, =_sbss
 800288c:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002890:	2000142c 	.word	0x2000142c

08002894 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002894:	e7fe      	b.n	8002894 <ADC1_2_IRQHandler>
	...

08002898 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800289c:	4b08      	ldr	r3, [pc, #32]	@ (80028c0 <HAL_Init+0x28>)
 800289e:	681b      	ldr	r3, [r3, #0]
 80028a0:	4a07      	ldr	r2, [pc, #28]	@ (80028c0 <HAL_Init+0x28>)
 80028a2:	f043 0310 	orr.w	r3, r3, #16
 80028a6:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80028a8:	2003      	movs	r0, #3
 80028aa:	f000 f923 	bl	8002af4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80028ae:	200f      	movs	r0, #15
 80028b0:	f000 f808 	bl	80028c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80028b4:	f7ff fdbc 	bl	8002430 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80028b8:	2300      	movs	r3, #0
}
 80028ba:	4618      	mov	r0, r3
 80028bc:	bd80      	pop	{r7, pc}
 80028be:	bf00      	nop
 80028c0:	40022000 	.word	0x40022000

080028c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80028c4:	b580      	push	{r7, lr}
 80028c6:	b082      	sub	sp, #8
 80028c8:	af00      	add	r7, sp, #0
 80028ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80028cc:	4b12      	ldr	r3, [pc, #72]	@ (8002918 <HAL_InitTick+0x54>)
 80028ce:	681a      	ldr	r2, [r3, #0]
 80028d0:	4b12      	ldr	r3, [pc, #72]	@ (800291c <HAL_InitTick+0x58>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4619      	mov	r1, r3
 80028d6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80028da:	fbb3 f3f1 	udiv	r3, r3, r1
 80028de:	fbb2 f3f3 	udiv	r3, r2, r3
 80028e2:	4618      	mov	r0, r3
 80028e4:	f000 f93b 	bl	8002b5e <HAL_SYSTICK_Config>
 80028e8:	4603      	mov	r3, r0
 80028ea:	2b00      	cmp	r3, #0
 80028ec:	d001      	beq.n	80028f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028ee:	2301      	movs	r3, #1
 80028f0:	e00e      	b.n	8002910 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	2b0f      	cmp	r3, #15
 80028f6:	d80a      	bhi.n	800290e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028f8:	2200      	movs	r2, #0
 80028fa:	6879      	ldr	r1, [r7, #4]
 80028fc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002900:	f000 f903 	bl	8002b0a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002904:	4a06      	ldr	r2, [pc, #24]	@ (8002920 <HAL_InitTick+0x5c>)
 8002906:	687b      	ldr	r3, [r7, #4]
 8002908:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800290a:	2300      	movs	r3, #0
 800290c:	e000      	b.n	8002910 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800290e:	2301      	movs	r3, #1
}
 8002910:	4618      	mov	r0, r3
 8002912:	3708      	adds	r7, #8
 8002914:	46bd      	mov	sp, r7
 8002916:	bd80      	pop	{r7, pc}
 8002918:	20000028 	.word	0x20000028
 800291c:	20000030 	.word	0x20000030
 8002920:	2000002c 	.word	0x2000002c

08002924 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002924:	b480      	push	{r7}
 8002926:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002928:	4b05      	ldr	r3, [pc, #20]	@ (8002940 <HAL_IncTick+0x1c>)
 800292a:	781b      	ldrb	r3, [r3, #0]
 800292c:	461a      	mov	r2, r3
 800292e:	4b05      	ldr	r3, [pc, #20]	@ (8002944 <HAL_IncTick+0x20>)
 8002930:	681b      	ldr	r3, [r3, #0]
 8002932:	4413      	add	r3, r2
 8002934:	4a03      	ldr	r2, [pc, #12]	@ (8002944 <HAL_IncTick+0x20>)
 8002936:	6013      	str	r3, [r2, #0]
}
 8002938:	bf00      	nop
 800293a:	46bd      	mov	sp, r7
 800293c:	bc80      	pop	{r7}
 800293e:	4770      	bx	lr
 8002940:	20000030 	.word	0x20000030
 8002944:	200012dc 	.word	0x200012dc

08002948 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002948:	b480      	push	{r7}
 800294a:	af00      	add	r7, sp, #0
  return uwTick;
 800294c:	4b02      	ldr	r3, [pc, #8]	@ (8002958 <HAL_GetTick+0x10>)
 800294e:	681b      	ldr	r3, [r3, #0]
}
 8002950:	4618      	mov	r0, r3
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	200012dc 	.word	0x200012dc

0800295c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800295c:	b480      	push	{r7}
 800295e:	b085      	sub	sp, #20
 8002960:	af00      	add	r7, sp, #0
 8002962:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002964:	687b      	ldr	r3, [r7, #4]
 8002966:	f003 0307 	and.w	r3, r3, #7
 800296a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800296c:	4b0c      	ldr	r3, [pc, #48]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002972:	68ba      	ldr	r2, [r7, #8]
 8002974:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002978:	4013      	ands	r3, r2
 800297a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800297c:	68fb      	ldr	r3, [r7, #12]
 800297e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002980:	68bb      	ldr	r3, [r7, #8]
 8002982:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002984:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002988:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800298c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800298e:	4a04      	ldr	r2, [pc, #16]	@ (80029a0 <__NVIC_SetPriorityGrouping+0x44>)
 8002990:	68bb      	ldr	r3, [r7, #8]
 8002992:	60d3      	str	r3, [r2, #12]
}
 8002994:	bf00      	nop
 8002996:	3714      	adds	r7, #20
 8002998:	46bd      	mov	sp, r7
 800299a:	bc80      	pop	{r7}
 800299c:	4770      	bx	lr
 800299e:	bf00      	nop
 80029a0:	e000ed00 	.word	0xe000ed00

080029a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80029a4:	b480      	push	{r7}
 80029a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80029a8:	4b04      	ldr	r3, [pc, #16]	@ (80029bc <__NVIC_GetPriorityGrouping+0x18>)
 80029aa:	68db      	ldr	r3, [r3, #12]
 80029ac:	0a1b      	lsrs	r3, r3, #8
 80029ae:	f003 0307 	and.w	r3, r3, #7
}
 80029b2:	4618      	mov	r0, r3
 80029b4:	46bd      	mov	sp, r7
 80029b6:	bc80      	pop	{r7}
 80029b8:	4770      	bx	lr
 80029ba:	bf00      	nop
 80029bc:	e000ed00 	.word	0xe000ed00

080029c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80029c0:	b480      	push	{r7}
 80029c2:	b083      	sub	sp, #12
 80029c4:	af00      	add	r7, sp, #0
 80029c6:	4603      	mov	r3, r0
 80029c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029ce:	2b00      	cmp	r3, #0
 80029d0:	db0b      	blt.n	80029ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80029d2:	79fb      	ldrb	r3, [r7, #7]
 80029d4:	f003 021f 	and.w	r2, r3, #31
 80029d8:	4906      	ldr	r1, [pc, #24]	@ (80029f4 <__NVIC_EnableIRQ+0x34>)
 80029da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029de:	095b      	lsrs	r3, r3, #5
 80029e0:	2001      	movs	r0, #1
 80029e2:	fa00 f202 	lsl.w	r2, r0, r2
 80029e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ea:	bf00      	nop
 80029ec:	370c      	adds	r7, #12
 80029ee:	46bd      	mov	sp, r7
 80029f0:	bc80      	pop	{r7}
 80029f2:	4770      	bx	lr
 80029f4:	e000e100 	.word	0xe000e100

080029f8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029f8:	b480      	push	{r7}
 80029fa:	b083      	sub	sp, #12
 80029fc:	af00      	add	r7, sp, #0
 80029fe:	4603      	mov	r3, r0
 8002a00:	6039      	str	r1, [r7, #0]
 8002a02:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a04:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	db0a      	blt.n	8002a22 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a0c:	683b      	ldr	r3, [r7, #0]
 8002a0e:	b2da      	uxtb	r2, r3
 8002a10:	490c      	ldr	r1, [pc, #48]	@ (8002a44 <__NVIC_SetPriority+0x4c>)
 8002a12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a16:	0112      	lsls	r2, r2, #4
 8002a18:	b2d2      	uxtb	r2, r2
 8002a1a:	440b      	add	r3, r1
 8002a1c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002a20:	e00a      	b.n	8002a38 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002a22:	683b      	ldr	r3, [r7, #0]
 8002a24:	b2da      	uxtb	r2, r3
 8002a26:	4908      	ldr	r1, [pc, #32]	@ (8002a48 <__NVIC_SetPriority+0x50>)
 8002a28:	79fb      	ldrb	r3, [r7, #7]
 8002a2a:	f003 030f 	and.w	r3, r3, #15
 8002a2e:	3b04      	subs	r3, #4
 8002a30:	0112      	lsls	r2, r2, #4
 8002a32:	b2d2      	uxtb	r2, r2
 8002a34:	440b      	add	r3, r1
 8002a36:	761a      	strb	r2, [r3, #24]
}
 8002a38:	bf00      	nop
 8002a3a:	370c      	adds	r7, #12
 8002a3c:	46bd      	mov	sp, r7
 8002a3e:	bc80      	pop	{r7}
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	e000e100 	.word	0xe000e100
 8002a48:	e000ed00 	.word	0xe000ed00

08002a4c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	b089      	sub	sp, #36	@ 0x24
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	60f8      	str	r0, [r7, #12]
 8002a54:	60b9      	str	r1, [r7, #8]
 8002a56:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	f003 0307 	and.w	r3, r3, #7
 8002a5e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a60:	69fb      	ldr	r3, [r7, #28]
 8002a62:	f1c3 0307 	rsb	r3, r3, #7
 8002a66:	2b04      	cmp	r3, #4
 8002a68:	bf28      	it	cs
 8002a6a:	2304      	movcs	r3, #4
 8002a6c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a6e:	69fb      	ldr	r3, [r7, #28]
 8002a70:	3304      	adds	r3, #4
 8002a72:	2b06      	cmp	r3, #6
 8002a74:	d902      	bls.n	8002a7c <NVIC_EncodePriority+0x30>
 8002a76:	69fb      	ldr	r3, [r7, #28]
 8002a78:	3b03      	subs	r3, #3
 8002a7a:	e000      	b.n	8002a7e <NVIC_EncodePriority+0x32>
 8002a7c:	2300      	movs	r3, #0
 8002a7e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a80:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a84:	69bb      	ldr	r3, [r7, #24]
 8002a86:	fa02 f303 	lsl.w	r3, r2, r3
 8002a8a:	43da      	mvns	r2, r3
 8002a8c:	68bb      	ldr	r3, [r7, #8]
 8002a8e:	401a      	ands	r2, r3
 8002a90:	697b      	ldr	r3, [r7, #20]
 8002a92:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a94:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a98:	697b      	ldr	r3, [r7, #20]
 8002a9a:	fa01 f303 	lsl.w	r3, r1, r3
 8002a9e:	43d9      	mvns	r1, r3
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002aa4:	4313      	orrs	r3, r2
         );
}
 8002aa6:	4618      	mov	r0, r3
 8002aa8:	3724      	adds	r7, #36	@ 0x24
 8002aaa:	46bd      	mov	sp, r7
 8002aac:	bc80      	pop	{r7}
 8002aae:	4770      	bx	lr

08002ab0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002ab0:	b580      	push	{r7, lr}
 8002ab2:	b082      	sub	sp, #8
 8002ab4:	af00      	add	r7, sp, #0
 8002ab6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002ab8:	687b      	ldr	r3, [r7, #4]
 8002aba:	3b01      	subs	r3, #1
 8002abc:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002ac0:	d301      	bcc.n	8002ac6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002ac2:	2301      	movs	r3, #1
 8002ac4:	e00f      	b.n	8002ae6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002ac6:	4a0a      	ldr	r2, [pc, #40]	@ (8002af0 <SysTick_Config+0x40>)
 8002ac8:	687b      	ldr	r3, [r7, #4]
 8002aca:	3b01      	subs	r3, #1
 8002acc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002ace:	210f      	movs	r1, #15
 8002ad0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002ad4:	f7ff ff90 	bl	80029f8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002ad8:	4b05      	ldr	r3, [pc, #20]	@ (8002af0 <SysTick_Config+0x40>)
 8002ada:	2200      	movs	r2, #0
 8002adc:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002ade:	4b04      	ldr	r3, [pc, #16]	@ (8002af0 <SysTick_Config+0x40>)
 8002ae0:	2207      	movs	r2, #7
 8002ae2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ae4:	2300      	movs	r3, #0
}
 8002ae6:	4618      	mov	r0, r3
 8002ae8:	3708      	adds	r7, #8
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	e000e010 	.word	0xe000e010

08002af4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002af4:	b580      	push	{r7, lr}
 8002af6:	b082      	sub	sp, #8
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f7ff ff2d 	bl	800295c <__NVIC_SetPriorityGrouping>
}
 8002b02:	bf00      	nop
 8002b04:	3708      	adds	r7, #8
 8002b06:	46bd      	mov	sp, r7
 8002b08:	bd80      	pop	{r7, pc}

08002b0a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002b0a:	b580      	push	{r7, lr}
 8002b0c:	b086      	sub	sp, #24
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	4603      	mov	r3, r0
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
 8002b16:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002b18:	2300      	movs	r3, #0
 8002b1a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002b1c:	f7ff ff42 	bl	80029a4 <__NVIC_GetPriorityGrouping>
 8002b20:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002b22:	687a      	ldr	r2, [r7, #4]
 8002b24:	68b9      	ldr	r1, [r7, #8]
 8002b26:	6978      	ldr	r0, [r7, #20]
 8002b28:	f7ff ff90 	bl	8002a4c <NVIC_EncodePriority>
 8002b2c:	4602      	mov	r2, r0
 8002b2e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002b32:	4611      	mov	r1, r2
 8002b34:	4618      	mov	r0, r3
 8002b36:	f7ff ff5f 	bl	80029f8 <__NVIC_SetPriority>
}
 8002b3a:	bf00      	nop
 8002b3c:	3718      	adds	r7, #24
 8002b3e:	46bd      	mov	sp, r7
 8002b40:	bd80      	pop	{r7, pc}

08002b42 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b42:	b580      	push	{r7, lr}
 8002b44:	b082      	sub	sp, #8
 8002b46:	af00      	add	r7, sp, #0
 8002b48:	4603      	mov	r3, r0
 8002b4a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b4c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b50:	4618      	mov	r0, r3
 8002b52:	f7ff ff35 	bl	80029c0 <__NVIC_EnableIRQ>
}
 8002b56:	bf00      	nop
 8002b58:	3708      	adds	r7, #8
 8002b5a:	46bd      	mov	sp, r7
 8002b5c:	bd80      	pop	{r7, pc}

08002b5e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b5e:	b580      	push	{r7, lr}
 8002b60:	b082      	sub	sp, #8
 8002b62:	af00      	add	r7, sp, #0
 8002b64:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b66:	6878      	ldr	r0, [r7, #4]
 8002b68:	f7ff ffa2 	bl	8002ab0 <SysTick_Config>
 8002b6c:	4603      	mov	r3, r0
}
 8002b6e:	4618      	mov	r0, r3
 8002b70:	3708      	adds	r7, #8
 8002b72:	46bd      	mov	sp, r7
 8002b74:	bd80      	pop	{r7, pc}
	...

08002b78 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b78:	b480      	push	{r7}
 8002b7a:	b08b      	sub	sp, #44	@ 0x2c
 8002b7c:	af00      	add	r7, sp, #0
 8002b7e:	6078      	str	r0, [r7, #4]
 8002b80:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b82:	2300      	movs	r3, #0
 8002b84:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b86:	2300      	movs	r3, #0
 8002b88:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b8a:	e169      	b.n	8002e60 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b8c:	2201      	movs	r2, #1
 8002b8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b90:	fa02 f303 	lsl.w	r3, r2, r3
 8002b94:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b96:	683b      	ldr	r3, [r7, #0]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	69fa      	ldr	r2, [r7, #28]
 8002b9c:	4013      	ands	r3, r2
 8002b9e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002ba0:	69ba      	ldr	r2, [r7, #24]
 8002ba2:	69fb      	ldr	r3, [r7, #28]
 8002ba4:	429a      	cmp	r2, r3
 8002ba6:	f040 8158 	bne.w	8002e5a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002baa:	683b      	ldr	r3, [r7, #0]
 8002bac:	685b      	ldr	r3, [r3, #4]
 8002bae:	4a9a      	ldr	r2, [pc, #616]	@ (8002e18 <HAL_GPIO_Init+0x2a0>)
 8002bb0:	4293      	cmp	r3, r2
 8002bb2:	d05e      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bb4:	4a98      	ldr	r2, [pc, #608]	@ (8002e18 <HAL_GPIO_Init+0x2a0>)
 8002bb6:	4293      	cmp	r3, r2
 8002bb8:	d875      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bba:	4a98      	ldr	r2, [pc, #608]	@ (8002e1c <HAL_GPIO_Init+0x2a4>)
 8002bbc:	4293      	cmp	r3, r2
 8002bbe:	d058      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bc0:	4a96      	ldr	r2, [pc, #600]	@ (8002e1c <HAL_GPIO_Init+0x2a4>)
 8002bc2:	4293      	cmp	r3, r2
 8002bc4:	d86f      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bc6:	4a96      	ldr	r2, [pc, #600]	@ (8002e20 <HAL_GPIO_Init+0x2a8>)
 8002bc8:	4293      	cmp	r3, r2
 8002bca:	d052      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bcc:	4a94      	ldr	r2, [pc, #592]	@ (8002e20 <HAL_GPIO_Init+0x2a8>)
 8002bce:	4293      	cmp	r3, r2
 8002bd0:	d869      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bd2:	4a94      	ldr	r2, [pc, #592]	@ (8002e24 <HAL_GPIO_Init+0x2ac>)
 8002bd4:	4293      	cmp	r3, r2
 8002bd6:	d04c      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002bd8:	4a92      	ldr	r2, [pc, #584]	@ (8002e24 <HAL_GPIO_Init+0x2ac>)
 8002bda:	4293      	cmp	r3, r2
 8002bdc:	d863      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bde:	4a92      	ldr	r2, [pc, #584]	@ (8002e28 <HAL_GPIO_Init+0x2b0>)
 8002be0:	4293      	cmp	r3, r2
 8002be2:	d046      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
 8002be4:	4a90      	ldr	r2, [pc, #576]	@ (8002e28 <HAL_GPIO_Init+0x2b0>)
 8002be6:	4293      	cmp	r3, r2
 8002be8:	d85d      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bea:	2b12      	cmp	r3, #18
 8002bec:	d82a      	bhi.n	8002c44 <HAL_GPIO_Init+0xcc>
 8002bee:	2b12      	cmp	r3, #18
 8002bf0:	d859      	bhi.n	8002ca6 <HAL_GPIO_Init+0x12e>
 8002bf2:	a201      	add	r2, pc, #4	@ (adr r2, 8002bf8 <HAL_GPIO_Init+0x80>)
 8002bf4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bf8:	08002c73 	.word	0x08002c73
 8002bfc:	08002c4d 	.word	0x08002c4d
 8002c00:	08002c5f 	.word	0x08002c5f
 8002c04:	08002ca1 	.word	0x08002ca1
 8002c08:	08002ca7 	.word	0x08002ca7
 8002c0c:	08002ca7 	.word	0x08002ca7
 8002c10:	08002ca7 	.word	0x08002ca7
 8002c14:	08002ca7 	.word	0x08002ca7
 8002c18:	08002ca7 	.word	0x08002ca7
 8002c1c:	08002ca7 	.word	0x08002ca7
 8002c20:	08002ca7 	.word	0x08002ca7
 8002c24:	08002ca7 	.word	0x08002ca7
 8002c28:	08002ca7 	.word	0x08002ca7
 8002c2c:	08002ca7 	.word	0x08002ca7
 8002c30:	08002ca7 	.word	0x08002ca7
 8002c34:	08002ca7 	.word	0x08002ca7
 8002c38:	08002ca7 	.word	0x08002ca7
 8002c3c:	08002c55 	.word	0x08002c55
 8002c40:	08002c69 	.word	0x08002c69
 8002c44:	4a79      	ldr	r2, [pc, #484]	@ (8002e2c <HAL_GPIO_Init+0x2b4>)
 8002c46:	4293      	cmp	r3, r2
 8002c48:	d013      	beq.n	8002c72 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c4a:	e02c      	b.n	8002ca6 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c4c:	683b      	ldr	r3, [r7, #0]
 8002c4e:	68db      	ldr	r3, [r3, #12]
 8002c50:	623b      	str	r3, [r7, #32]
          break;
 8002c52:	e029      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c54:	683b      	ldr	r3, [r7, #0]
 8002c56:	68db      	ldr	r3, [r3, #12]
 8002c58:	3304      	adds	r3, #4
 8002c5a:	623b      	str	r3, [r7, #32]
          break;
 8002c5c:	e024      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c5e:	683b      	ldr	r3, [r7, #0]
 8002c60:	68db      	ldr	r3, [r3, #12]
 8002c62:	3308      	adds	r3, #8
 8002c64:	623b      	str	r3, [r7, #32]
          break;
 8002c66:	e01f      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c68:	683b      	ldr	r3, [r7, #0]
 8002c6a:	68db      	ldr	r3, [r3, #12]
 8002c6c:	330c      	adds	r3, #12
 8002c6e:	623b      	str	r3, [r7, #32]
          break;
 8002c70:	e01a      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c72:	683b      	ldr	r3, [r7, #0]
 8002c74:	689b      	ldr	r3, [r3, #8]
 8002c76:	2b00      	cmp	r3, #0
 8002c78:	d102      	bne.n	8002c80 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c7a:	2304      	movs	r3, #4
 8002c7c:	623b      	str	r3, [r7, #32]
          break;
 8002c7e:	e013      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c80:	683b      	ldr	r3, [r7, #0]
 8002c82:	689b      	ldr	r3, [r3, #8]
 8002c84:	2b01      	cmp	r3, #1
 8002c86:	d105      	bne.n	8002c94 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c88:	2308      	movs	r3, #8
 8002c8a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c8c:	687b      	ldr	r3, [r7, #4]
 8002c8e:	69fa      	ldr	r2, [r7, #28]
 8002c90:	611a      	str	r2, [r3, #16]
          break;
 8002c92:	e009      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c94:	2308      	movs	r3, #8
 8002c96:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	69fa      	ldr	r2, [r7, #28]
 8002c9c:	615a      	str	r2, [r3, #20]
          break;
 8002c9e:	e003      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	623b      	str	r3, [r7, #32]
          break;
 8002ca4:	e000      	b.n	8002ca8 <HAL_GPIO_Init+0x130>
          break;
 8002ca6:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002ca8:	69bb      	ldr	r3, [r7, #24]
 8002caa:	2bff      	cmp	r3, #255	@ 0xff
 8002cac:	d801      	bhi.n	8002cb2 <HAL_GPIO_Init+0x13a>
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	e001      	b.n	8002cb6 <HAL_GPIO_Init+0x13e>
 8002cb2:	687b      	ldr	r3, [r7, #4]
 8002cb4:	3304      	adds	r3, #4
 8002cb6:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002cb8:	69bb      	ldr	r3, [r7, #24]
 8002cba:	2bff      	cmp	r3, #255	@ 0xff
 8002cbc:	d802      	bhi.n	8002cc4 <HAL_GPIO_Init+0x14c>
 8002cbe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc0:	009b      	lsls	r3, r3, #2
 8002cc2:	e002      	b.n	8002cca <HAL_GPIO_Init+0x152>
 8002cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cc6:	3b08      	subs	r3, #8
 8002cc8:	009b      	lsls	r3, r3, #2
 8002cca:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002ccc:	697b      	ldr	r3, [r7, #20]
 8002cce:	681a      	ldr	r2, [r3, #0]
 8002cd0:	210f      	movs	r1, #15
 8002cd2:	693b      	ldr	r3, [r7, #16]
 8002cd4:	fa01 f303 	lsl.w	r3, r1, r3
 8002cd8:	43db      	mvns	r3, r3
 8002cda:	401a      	ands	r2, r3
 8002cdc:	6a39      	ldr	r1, [r7, #32]
 8002cde:	693b      	ldr	r3, [r7, #16]
 8002ce0:	fa01 f303 	lsl.w	r3, r1, r3
 8002ce4:	431a      	orrs	r2, r3
 8002ce6:	697b      	ldr	r3, [r7, #20]
 8002ce8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cea:	683b      	ldr	r3, [r7, #0]
 8002cec:	685b      	ldr	r3, [r3, #4]
 8002cee:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cf2:	2b00      	cmp	r3, #0
 8002cf4:	f000 80b1 	beq.w	8002e5a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cf8:	4b4d      	ldr	r3, [pc, #308]	@ (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002cfa:	699b      	ldr	r3, [r3, #24]
 8002cfc:	4a4c      	ldr	r2, [pc, #304]	@ (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002cfe:	f043 0301 	orr.w	r3, r3, #1
 8002d02:	6193      	str	r3, [r2, #24]
 8002d04:	4b4a      	ldr	r3, [pc, #296]	@ (8002e30 <HAL_GPIO_Init+0x2b8>)
 8002d06:	699b      	ldr	r3, [r3, #24]
 8002d08:	f003 0301 	and.w	r3, r3, #1
 8002d0c:	60bb      	str	r3, [r7, #8]
 8002d0e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002d10:	4a48      	ldr	r2, [pc, #288]	@ (8002e34 <HAL_GPIO_Init+0x2bc>)
 8002d12:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d14:	089b      	lsrs	r3, r3, #2
 8002d16:	3302      	adds	r3, #2
 8002d18:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002d1c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002d1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d20:	f003 0303 	and.w	r3, r3, #3
 8002d24:	009b      	lsls	r3, r3, #2
 8002d26:	220f      	movs	r2, #15
 8002d28:	fa02 f303 	lsl.w	r3, r2, r3
 8002d2c:	43db      	mvns	r3, r3
 8002d2e:	68fa      	ldr	r2, [r7, #12]
 8002d30:	4013      	ands	r3, r2
 8002d32:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	4a40      	ldr	r2, [pc, #256]	@ (8002e38 <HAL_GPIO_Init+0x2c0>)
 8002d38:	4293      	cmp	r3, r2
 8002d3a:	d013      	beq.n	8002d64 <HAL_GPIO_Init+0x1ec>
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	4a3f      	ldr	r2, [pc, #252]	@ (8002e3c <HAL_GPIO_Init+0x2c4>)
 8002d40:	4293      	cmp	r3, r2
 8002d42:	d00d      	beq.n	8002d60 <HAL_GPIO_Init+0x1e8>
 8002d44:	687b      	ldr	r3, [r7, #4]
 8002d46:	4a3e      	ldr	r2, [pc, #248]	@ (8002e40 <HAL_GPIO_Init+0x2c8>)
 8002d48:	4293      	cmp	r3, r2
 8002d4a:	d007      	beq.n	8002d5c <HAL_GPIO_Init+0x1e4>
 8002d4c:	687b      	ldr	r3, [r7, #4]
 8002d4e:	4a3d      	ldr	r2, [pc, #244]	@ (8002e44 <HAL_GPIO_Init+0x2cc>)
 8002d50:	4293      	cmp	r3, r2
 8002d52:	d101      	bne.n	8002d58 <HAL_GPIO_Init+0x1e0>
 8002d54:	2303      	movs	r3, #3
 8002d56:	e006      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d58:	2304      	movs	r3, #4
 8002d5a:	e004      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d5c:	2302      	movs	r3, #2
 8002d5e:	e002      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d60:	2301      	movs	r3, #1
 8002d62:	e000      	b.n	8002d66 <HAL_GPIO_Init+0x1ee>
 8002d64:	2300      	movs	r3, #0
 8002d66:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d68:	f002 0203 	and.w	r2, r2, #3
 8002d6c:	0092      	lsls	r2, r2, #2
 8002d6e:	4093      	lsls	r3, r2
 8002d70:	68fa      	ldr	r2, [r7, #12]
 8002d72:	4313      	orrs	r3, r2
 8002d74:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d76:	492f      	ldr	r1, [pc, #188]	@ (8002e34 <HAL_GPIO_Init+0x2bc>)
 8002d78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d7a:	089b      	lsrs	r3, r3, #2
 8002d7c:	3302      	adds	r3, #2
 8002d7e:	68fa      	ldr	r2, [r7, #12]
 8002d80:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d84:	683b      	ldr	r3, [r7, #0]
 8002d86:	685b      	ldr	r3, [r3, #4]
 8002d88:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d8c:	2b00      	cmp	r3, #0
 8002d8e:	d006      	beq.n	8002d9e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d90:	4b2d      	ldr	r3, [pc, #180]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d92:	689a      	ldr	r2, [r3, #8]
 8002d94:	492c      	ldr	r1, [pc, #176]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002d96:	69bb      	ldr	r3, [r7, #24]
 8002d98:	4313      	orrs	r3, r2
 8002d9a:	608b      	str	r3, [r1, #8]
 8002d9c:	e006      	b.n	8002dac <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d9e:	4b2a      	ldr	r3, [pc, #168]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002da0:	689a      	ldr	r2, [r3, #8]
 8002da2:	69bb      	ldr	r3, [r7, #24]
 8002da4:	43db      	mvns	r3, r3
 8002da6:	4928      	ldr	r1, [pc, #160]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002da8:	4013      	ands	r3, r2
 8002daa:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	685b      	ldr	r3, [r3, #4]
 8002db0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002db4:	2b00      	cmp	r3, #0
 8002db6:	d006      	beq.n	8002dc6 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002db8:	4b23      	ldr	r3, [pc, #140]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dba:	68da      	ldr	r2, [r3, #12]
 8002dbc:	4922      	ldr	r1, [pc, #136]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dbe:	69bb      	ldr	r3, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	60cb      	str	r3, [r1, #12]
 8002dc4:	e006      	b.n	8002dd4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002dc6:	4b20      	ldr	r3, [pc, #128]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	69bb      	ldr	r3, [r7, #24]
 8002dcc:	43db      	mvns	r3, r3
 8002dce:	491e      	ldr	r1, [pc, #120]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002dd0:	4013      	ands	r3, r2
 8002dd2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002dd4:	683b      	ldr	r3, [r7, #0]
 8002dd6:	685b      	ldr	r3, [r3, #4]
 8002dd8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ddc:	2b00      	cmp	r3, #0
 8002dde:	d006      	beq.n	8002dee <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002de0:	4b19      	ldr	r3, [pc, #100]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002de2:	685a      	ldr	r2, [r3, #4]
 8002de4:	4918      	ldr	r1, [pc, #96]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002de6:	69bb      	ldr	r3, [r7, #24]
 8002de8:	4313      	orrs	r3, r2
 8002dea:	604b      	str	r3, [r1, #4]
 8002dec:	e006      	b.n	8002dfc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002dee:	4b16      	ldr	r3, [pc, #88]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002df0:	685a      	ldr	r2, [r3, #4]
 8002df2:	69bb      	ldr	r3, [r7, #24]
 8002df4:	43db      	mvns	r3, r3
 8002df6:	4914      	ldr	r1, [pc, #80]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002df8:	4013      	ands	r3, r2
 8002dfa:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002e04:	2b00      	cmp	r3, #0
 8002e06:	d021      	beq.n	8002e4c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002e08:	4b0f      	ldr	r3, [pc, #60]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002e0a:	681a      	ldr	r2, [r3, #0]
 8002e0c:	490e      	ldr	r1, [pc, #56]	@ (8002e48 <HAL_GPIO_Init+0x2d0>)
 8002e0e:	69bb      	ldr	r3, [r7, #24]
 8002e10:	4313      	orrs	r3, r2
 8002e12:	600b      	str	r3, [r1, #0]
 8002e14:	e021      	b.n	8002e5a <HAL_GPIO_Init+0x2e2>
 8002e16:	bf00      	nop
 8002e18:	10320000 	.word	0x10320000
 8002e1c:	10310000 	.word	0x10310000
 8002e20:	10220000 	.word	0x10220000
 8002e24:	10210000 	.word	0x10210000
 8002e28:	10120000 	.word	0x10120000
 8002e2c:	10110000 	.word	0x10110000
 8002e30:	40021000 	.word	0x40021000
 8002e34:	40010000 	.word	0x40010000
 8002e38:	40010800 	.word	0x40010800
 8002e3c:	40010c00 	.word	0x40010c00
 8002e40:	40011000 	.word	0x40011000
 8002e44:	40011400 	.word	0x40011400
 8002e48:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e4e:	681a      	ldr	r2, [r3, #0]
 8002e50:	69bb      	ldr	r3, [r7, #24]
 8002e52:	43db      	mvns	r3, r3
 8002e54:	4909      	ldr	r1, [pc, #36]	@ (8002e7c <HAL_GPIO_Init+0x304>)
 8002e56:	4013      	ands	r3, r2
 8002e58:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e5c:	3301      	adds	r3, #1
 8002e5e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e60:	683b      	ldr	r3, [r7, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e66:	fa22 f303 	lsr.w	r3, r2, r3
 8002e6a:	2b00      	cmp	r3, #0
 8002e6c:	f47f ae8e 	bne.w	8002b8c <HAL_GPIO_Init+0x14>
  }
}
 8002e70:	bf00      	nop
 8002e72:	bf00      	nop
 8002e74:	372c      	adds	r7, #44	@ 0x2c
 8002e76:	46bd      	mov	sp, r7
 8002e78:	bc80      	pop	{r7}
 8002e7a:	4770      	bx	lr
 8002e7c:	40010400 	.word	0x40010400

08002e80 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e80:	b480      	push	{r7}
 8002e82:	b085      	sub	sp, #20
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
 8002e88:	460b      	mov	r3, r1
 8002e8a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	689a      	ldr	r2, [r3, #8]
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	4013      	ands	r3, r2
 8002e94:	2b00      	cmp	r3, #0
 8002e96:	d002      	beq.n	8002e9e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e98:	2301      	movs	r3, #1
 8002e9a:	73fb      	strb	r3, [r7, #15]
 8002e9c:	e001      	b.n	8002ea2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e9e:	2300      	movs	r3, #0
 8002ea0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002ea2:	7bfb      	ldrb	r3, [r7, #15]
}
 8002ea4:	4618      	mov	r0, r3
 8002ea6:	3714      	adds	r7, #20
 8002ea8:	46bd      	mov	sp, r7
 8002eaa:	bc80      	pop	{r7}
 8002eac:	4770      	bx	lr

08002eae <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002eae:	b480      	push	{r7}
 8002eb0:	b083      	sub	sp, #12
 8002eb2:	af00      	add	r7, sp, #0
 8002eb4:	6078      	str	r0, [r7, #4]
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	807b      	strh	r3, [r7, #2]
 8002eba:	4613      	mov	r3, r2
 8002ebc:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002ebe:	787b      	ldrb	r3, [r7, #1]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d003      	beq.n	8002ecc <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002ec4:	887a      	ldrh	r2, [r7, #2]
 8002ec6:	687b      	ldr	r3, [r7, #4]
 8002ec8:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002eca:	e003      	b.n	8002ed4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002ecc:	887b      	ldrh	r3, [r7, #2]
 8002ece:	041a      	lsls	r2, r3, #16
 8002ed0:	687b      	ldr	r3, [r7, #4]
 8002ed2:	611a      	str	r2, [r3, #16]
}
 8002ed4:	bf00      	nop
 8002ed6:	370c      	adds	r7, #12
 8002ed8:	46bd      	mov	sp, r7
 8002eda:	bc80      	pop	{r7}
 8002edc:	4770      	bx	lr
	...

08002ee0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ee0:	b580      	push	{r7, lr}
 8002ee2:	b086      	sub	sp, #24
 8002ee4:	af00      	add	r7, sp, #0
 8002ee6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002ee8:	687b      	ldr	r3, [r7, #4]
 8002eea:	2b00      	cmp	r3, #0
 8002eec:	d101      	bne.n	8002ef2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eee:	2301      	movs	r3, #1
 8002ef0:	e272      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	681b      	ldr	r3, [r3, #0]
 8002ef6:	f003 0301 	and.w	r3, r3, #1
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	f000 8087 	beq.w	800300e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002f00:	4b92      	ldr	r3, [pc, #584]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f02:	685b      	ldr	r3, [r3, #4]
 8002f04:	f003 030c 	and.w	r3, r3, #12
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d00c      	beq.n	8002f26 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002f0c:	4b8f      	ldr	r3, [pc, #572]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	685b      	ldr	r3, [r3, #4]
 8002f10:	f003 030c 	and.w	r3, r3, #12
 8002f14:	2b08      	cmp	r3, #8
 8002f16:	d112      	bne.n	8002f3e <HAL_RCC_OscConfig+0x5e>
 8002f18:	4b8c      	ldr	r3, [pc, #560]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f1a:	685b      	ldr	r3, [r3, #4]
 8002f1c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002f20:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f24:	d10b      	bne.n	8002f3e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002f26:	4b89      	ldr	r3, [pc, #548]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f28:	681b      	ldr	r3, [r3, #0]
 8002f2a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002f2e:	2b00      	cmp	r3, #0
 8002f30:	d06c      	beq.n	800300c <HAL_RCC_OscConfig+0x12c>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	685b      	ldr	r3, [r3, #4]
 8002f36:	2b00      	cmp	r3, #0
 8002f38:	d168      	bne.n	800300c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002f3a:	2301      	movs	r3, #1
 8002f3c:	e24c      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	685b      	ldr	r3, [r3, #4]
 8002f42:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f46:	d106      	bne.n	8002f56 <HAL_RCC_OscConfig+0x76>
 8002f48:	4b80      	ldr	r3, [pc, #512]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f4a:	681b      	ldr	r3, [r3, #0]
 8002f4c:	4a7f      	ldr	r2, [pc, #508]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f4e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f52:	6013      	str	r3, [r2, #0]
 8002f54:	e02e      	b.n	8002fb4 <HAL_RCC_OscConfig+0xd4>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	685b      	ldr	r3, [r3, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d10c      	bne.n	8002f78 <HAL_RCC_OscConfig+0x98>
 8002f5e:	4b7b      	ldr	r3, [pc, #492]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4a7a      	ldr	r2, [pc, #488]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f64:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f68:	6013      	str	r3, [r2, #0]
 8002f6a:	4b78      	ldr	r3, [pc, #480]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f6c:	681b      	ldr	r3, [r3, #0]
 8002f6e:	4a77      	ldr	r2, [pc, #476]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f70:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f74:	6013      	str	r3, [r2, #0]
 8002f76:	e01d      	b.n	8002fb4 <HAL_RCC_OscConfig+0xd4>
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f80:	d10c      	bne.n	8002f9c <HAL_RCC_OscConfig+0xbc>
 8002f82:	4b72      	ldr	r3, [pc, #456]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a71      	ldr	r2, [pc, #452]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f88:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f8c:	6013      	str	r3, [r2, #0]
 8002f8e:	4b6f      	ldr	r3, [pc, #444]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f90:	681b      	ldr	r3, [r3, #0]
 8002f92:	4a6e      	ldr	r2, [pc, #440]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f94:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f98:	6013      	str	r3, [r2, #0]
 8002f9a:	e00b      	b.n	8002fb4 <HAL_RCC_OscConfig+0xd4>
 8002f9c:	4b6b      	ldr	r3, [pc, #428]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002f9e:	681b      	ldr	r3, [r3, #0]
 8002fa0:	4a6a      	ldr	r2, [pc, #424]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002fa2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002fa6:	6013      	str	r3, [r2, #0]
 8002fa8:	4b68      	ldr	r3, [pc, #416]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4a67      	ldr	r2, [pc, #412]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002fae:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002fb2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	685b      	ldr	r3, [r3, #4]
 8002fb8:	2b00      	cmp	r3, #0
 8002fba:	d013      	beq.n	8002fe4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fbc:	f7ff fcc4 	bl	8002948 <HAL_GetTick>
 8002fc0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fc2:	e008      	b.n	8002fd6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fc4:	f7ff fcc0 	bl	8002948 <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	693b      	ldr	r3, [r7, #16]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	2b64      	cmp	r3, #100	@ 0x64
 8002fd0:	d901      	bls.n	8002fd6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002fd2:	2303      	movs	r3, #3
 8002fd4:	e200      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002fd6:	4b5d      	ldr	r3, [pc, #372]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8002fd8:	681b      	ldr	r3, [r3, #0]
 8002fda:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fde:	2b00      	cmp	r3, #0
 8002fe0:	d0f0      	beq.n	8002fc4 <HAL_RCC_OscConfig+0xe4>
 8002fe2:	e014      	b.n	800300e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fe4:	f7ff fcb0 	bl	8002948 <HAL_GetTick>
 8002fe8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fea:	e008      	b.n	8002ffe <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fec:	f7ff fcac 	bl	8002948 <HAL_GetTick>
 8002ff0:	4602      	mov	r2, r0
 8002ff2:	693b      	ldr	r3, [r7, #16]
 8002ff4:	1ad3      	subs	r3, r2, r3
 8002ff6:	2b64      	cmp	r3, #100	@ 0x64
 8002ff8:	d901      	bls.n	8002ffe <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002ffa:	2303      	movs	r3, #3
 8002ffc:	e1ec      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002ffe:	4b53      	ldr	r3, [pc, #332]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003006:	2b00      	cmp	r3, #0
 8003008:	d1f0      	bne.n	8002fec <HAL_RCC_OscConfig+0x10c>
 800300a:	e000      	b.n	800300e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800300c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	f003 0302 	and.w	r3, r3, #2
 8003016:	2b00      	cmp	r3, #0
 8003018:	d063      	beq.n	80030e2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800301a:	4b4c      	ldr	r3, [pc, #304]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 800301c:	685b      	ldr	r3, [r3, #4]
 800301e:	f003 030c 	and.w	r3, r3, #12
 8003022:	2b00      	cmp	r3, #0
 8003024:	d00b      	beq.n	800303e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003026:	4b49      	ldr	r3, [pc, #292]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003028:	685b      	ldr	r3, [r3, #4]
 800302a:	f003 030c 	and.w	r3, r3, #12
 800302e:	2b08      	cmp	r3, #8
 8003030:	d11c      	bne.n	800306c <HAL_RCC_OscConfig+0x18c>
 8003032:	4b46      	ldr	r3, [pc, #280]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003034:	685b      	ldr	r3, [r3, #4]
 8003036:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800303a:	2b00      	cmp	r3, #0
 800303c:	d116      	bne.n	800306c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800303e:	4b43      	ldr	r3, [pc, #268]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003040:	681b      	ldr	r3, [r3, #0]
 8003042:	f003 0302 	and.w	r3, r3, #2
 8003046:	2b00      	cmp	r3, #0
 8003048:	d005      	beq.n	8003056 <HAL_RCC_OscConfig+0x176>
 800304a:	687b      	ldr	r3, [r7, #4]
 800304c:	691b      	ldr	r3, [r3, #16]
 800304e:	2b01      	cmp	r3, #1
 8003050:	d001      	beq.n	8003056 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003052:	2301      	movs	r3, #1
 8003054:	e1c0      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003056:	4b3d      	ldr	r3, [pc, #244]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003058:	681b      	ldr	r3, [r3, #0]
 800305a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800305e:	687b      	ldr	r3, [r7, #4]
 8003060:	695b      	ldr	r3, [r3, #20]
 8003062:	00db      	lsls	r3, r3, #3
 8003064:	4939      	ldr	r1, [pc, #228]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003066:	4313      	orrs	r3, r2
 8003068:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800306a:	e03a      	b.n	80030e2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	691b      	ldr	r3, [r3, #16]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d020      	beq.n	80030b6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003074:	4b36      	ldr	r3, [pc, #216]	@ (8003150 <HAL_RCC_OscConfig+0x270>)
 8003076:	2201      	movs	r2, #1
 8003078:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800307a:	f7ff fc65 	bl	8002948 <HAL_GetTick>
 800307e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003080:	e008      	b.n	8003094 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003082:	f7ff fc61 	bl	8002948 <HAL_GetTick>
 8003086:	4602      	mov	r2, r0
 8003088:	693b      	ldr	r3, [r7, #16]
 800308a:	1ad3      	subs	r3, r2, r3
 800308c:	2b02      	cmp	r3, #2
 800308e:	d901      	bls.n	8003094 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003090:	2303      	movs	r3, #3
 8003092:	e1a1      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003094:	4b2d      	ldr	r3, [pc, #180]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	f003 0302 	and.w	r3, r3, #2
 800309c:	2b00      	cmp	r3, #0
 800309e:	d0f0      	beq.n	8003082 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80030a0:	4b2a      	ldr	r3, [pc, #168]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 80030a2:	681b      	ldr	r3, [r3, #0]
 80030a4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	695b      	ldr	r3, [r3, #20]
 80030ac:	00db      	lsls	r3, r3, #3
 80030ae:	4927      	ldr	r1, [pc, #156]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 80030b0:	4313      	orrs	r3, r2
 80030b2:	600b      	str	r3, [r1, #0]
 80030b4:	e015      	b.n	80030e2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80030b6:	4b26      	ldr	r3, [pc, #152]	@ (8003150 <HAL_RCC_OscConfig+0x270>)
 80030b8:	2200      	movs	r2, #0
 80030ba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80030bc:	f7ff fc44 	bl	8002948 <HAL_GetTick>
 80030c0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030c2:	e008      	b.n	80030d6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80030c4:	f7ff fc40 	bl	8002948 <HAL_GetTick>
 80030c8:	4602      	mov	r2, r0
 80030ca:	693b      	ldr	r3, [r7, #16]
 80030cc:	1ad3      	subs	r3, r2, r3
 80030ce:	2b02      	cmp	r3, #2
 80030d0:	d901      	bls.n	80030d6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80030d2:	2303      	movs	r3, #3
 80030d4:	e180      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80030d6:	4b1d      	ldr	r3, [pc, #116]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	f003 0302 	and.w	r3, r3, #2
 80030de:	2b00      	cmp	r3, #0
 80030e0:	d1f0      	bne.n	80030c4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	f003 0308 	and.w	r3, r3, #8
 80030ea:	2b00      	cmp	r3, #0
 80030ec:	d03a      	beq.n	8003164 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030ee:	687b      	ldr	r3, [r7, #4]
 80030f0:	699b      	ldr	r3, [r3, #24]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d019      	beq.n	800312a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030f6:	4b17      	ldr	r3, [pc, #92]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 80030f8:	2201      	movs	r2, #1
 80030fa:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030fc:	f7ff fc24 	bl	8002948 <HAL_GetTick>
 8003100:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003102:	e008      	b.n	8003116 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003104:	f7ff fc20 	bl	8002948 <HAL_GetTick>
 8003108:	4602      	mov	r2, r0
 800310a:	693b      	ldr	r3, [r7, #16]
 800310c:	1ad3      	subs	r3, r2, r3
 800310e:	2b02      	cmp	r3, #2
 8003110:	d901      	bls.n	8003116 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003112:	2303      	movs	r3, #3
 8003114:	e160      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003116:	4b0d      	ldr	r3, [pc, #52]	@ (800314c <HAL_RCC_OscConfig+0x26c>)
 8003118:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800311a:	f003 0302 	and.w	r3, r3, #2
 800311e:	2b00      	cmp	r3, #0
 8003120:	d0f0      	beq.n	8003104 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003122:	2001      	movs	r0, #1
 8003124:	f000 fa9c 	bl	8003660 <RCC_Delay>
 8003128:	e01c      	b.n	8003164 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800312a:	4b0a      	ldr	r3, [pc, #40]	@ (8003154 <HAL_RCC_OscConfig+0x274>)
 800312c:	2200      	movs	r2, #0
 800312e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003130:	f7ff fc0a 	bl	8002948 <HAL_GetTick>
 8003134:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003136:	e00f      	b.n	8003158 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003138:	f7ff fc06 	bl	8002948 <HAL_GetTick>
 800313c:	4602      	mov	r2, r0
 800313e:	693b      	ldr	r3, [r7, #16]
 8003140:	1ad3      	subs	r3, r2, r3
 8003142:	2b02      	cmp	r3, #2
 8003144:	d908      	bls.n	8003158 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003146:	2303      	movs	r3, #3
 8003148:	e146      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
 800314a:	bf00      	nop
 800314c:	40021000 	.word	0x40021000
 8003150:	42420000 	.word	0x42420000
 8003154:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003158:	4b92      	ldr	r3, [pc, #584]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800315a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800315c:	f003 0302 	and.w	r3, r3, #2
 8003160:	2b00      	cmp	r3, #0
 8003162:	d1e9      	bne.n	8003138 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	681b      	ldr	r3, [r3, #0]
 8003168:	f003 0304 	and.w	r3, r3, #4
 800316c:	2b00      	cmp	r3, #0
 800316e:	f000 80a6 	beq.w	80032be <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003172:	2300      	movs	r3, #0
 8003174:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003176:	4b8b      	ldr	r3, [pc, #556]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003178:	69db      	ldr	r3, [r3, #28]
 800317a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800317e:	2b00      	cmp	r3, #0
 8003180:	d10d      	bne.n	800319e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003182:	4b88      	ldr	r3, [pc, #544]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003184:	69db      	ldr	r3, [r3, #28]
 8003186:	4a87      	ldr	r2, [pc, #540]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003188:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800318c:	61d3      	str	r3, [r2, #28]
 800318e:	4b85      	ldr	r3, [pc, #532]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003190:	69db      	ldr	r3, [r3, #28]
 8003192:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003196:	60bb      	str	r3, [r7, #8]
 8003198:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800319a:	2301      	movs	r3, #1
 800319c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800319e:	4b82      	ldr	r3, [pc, #520]	@ (80033a8 <HAL_RCC_OscConfig+0x4c8>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031a6:	2b00      	cmp	r3, #0
 80031a8:	d118      	bne.n	80031dc <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80031aa:	4b7f      	ldr	r3, [pc, #508]	@ (80033a8 <HAL_RCC_OscConfig+0x4c8>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	4a7e      	ldr	r2, [pc, #504]	@ (80033a8 <HAL_RCC_OscConfig+0x4c8>)
 80031b0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80031b4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80031b6:	f7ff fbc7 	bl	8002948 <HAL_GetTick>
 80031ba:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031bc:	e008      	b.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80031be:	f7ff fbc3 	bl	8002948 <HAL_GetTick>
 80031c2:	4602      	mov	r2, r0
 80031c4:	693b      	ldr	r3, [r7, #16]
 80031c6:	1ad3      	subs	r3, r2, r3
 80031c8:	2b64      	cmp	r3, #100	@ 0x64
 80031ca:	d901      	bls.n	80031d0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80031cc:	2303      	movs	r3, #3
 80031ce:	e103      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80031d0:	4b75      	ldr	r3, [pc, #468]	@ (80033a8 <HAL_RCC_OscConfig+0x4c8>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80031d8:	2b00      	cmp	r3, #0
 80031da:	d0f0      	beq.n	80031be <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	68db      	ldr	r3, [r3, #12]
 80031e0:	2b01      	cmp	r3, #1
 80031e2:	d106      	bne.n	80031f2 <HAL_RCC_OscConfig+0x312>
 80031e4:	4b6f      	ldr	r3, [pc, #444]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	6a1b      	ldr	r3, [r3, #32]
 80031e8:	4a6e      	ldr	r2, [pc, #440]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80031ea:	f043 0301 	orr.w	r3, r3, #1
 80031ee:	6213      	str	r3, [r2, #32]
 80031f0:	e02d      	b.n	800324e <HAL_RCC_OscConfig+0x36e>
 80031f2:	687b      	ldr	r3, [r7, #4]
 80031f4:	68db      	ldr	r3, [r3, #12]
 80031f6:	2b00      	cmp	r3, #0
 80031f8:	d10c      	bne.n	8003214 <HAL_RCC_OscConfig+0x334>
 80031fa:	4b6a      	ldr	r3, [pc, #424]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a69      	ldr	r2, [pc, #420]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	4b67      	ldr	r3, [pc, #412]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a66      	ldr	r2, [pc, #408]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6213      	str	r3, [r2, #32]
 8003212:	e01c      	b.n	800324e <HAL_RCC_OscConfig+0x36e>
 8003214:	687b      	ldr	r3, [r7, #4]
 8003216:	68db      	ldr	r3, [r3, #12]
 8003218:	2b05      	cmp	r3, #5
 800321a:	d10c      	bne.n	8003236 <HAL_RCC_OscConfig+0x356>
 800321c:	4b61      	ldr	r3, [pc, #388]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800321e:	6a1b      	ldr	r3, [r3, #32]
 8003220:	4a60      	ldr	r2, [pc, #384]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003222:	f043 0304 	orr.w	r3, r3, #4
 8003226:	6213      	str	r3, [r2, #32]
 8003228:	4b5e      	ldr	r3, [pc, #376]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800322a:	6a1b      	ldr	r3, [r3, #32]
 800322c:	4a5d      	ldr	r2, [pc, #372]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800322e:	f043 0301 	orr.w	r3, r3, #1
 8003232:	6213      	str	r3, [r2, #32]
 8003234:	e00b      	b.n	800324e <HAL_RCC_OscConfig+0x36e>
 8003236:	4b5b      	ldr	r3, [pc, #364]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003238:	6a1b      	ldr	r3, [r3, #32]
 800323a:	4a5a      	ldr	r2, [pc, #360]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800323c:	f023 0301 	bic.w	r3, r3, #1
 8003240:	6213      	str	r3, [r2, #32]
 8003242:	4b58      	ldr	r3, [pc, #352]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003244:	6a1b      	ldr	r3, [r3, #32]
 8003246:	4a57      	ldr	r2, [pc, #348]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003248:	f023 0304 	bic.w	r3, r3, #4
 800324c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800324e:	687b      	ldr	r3, [r7, #4]
 8003250:	68db      	ldr	r3, [r3, #12]
 8003252:	2b00      	cmp	r3, #0
 8003254:	d015      	beq.n	8003282 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003256:	f7ff fb77 	bl	8002948 <HAL_GetTick>
 800325a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800325c:	e00a      	b.n	8003274 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800325e:	f7ff fb73 	bl	8002948 <HAL_GetTick>
 8003262:	4602      	mov	r2, r0
 8003264:	693b      	ldr	r3, [r7, #16]
 8003266:	1ad3      	subs	r3, r2, r3
 8003268:	f241 3288 	movw	r2, #5000	@ 0x1388
 800326c:	4293      	cmp	r3, r2
 800326e:	d901      	bls.n	8003274 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003270:	2303      	movs	r3, #3
 8003272:	e0b1      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003274:	4b4b      	ldr	r3, [pc, #300]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003276:	6a1b      	ldr	r3, [r3, #32]
 8003278:	f003 0302 	and.w	r3, r3, #2
 800327c:	2b00      	cmp	r3, #0
 800327e:	d0ee      	beq.n	800325e <HAL_RCC_OscConfig+0x37e>
 8003280:	e014      	b.n	80032ac <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003282:	f7ff fb61 	bl	8002948 <HAL_GetTick>
 8003286:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003288:	e00a      	b.n	80032a0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800328a:	f7ff fb5d 	bl	8002948 <HAL_GetTick>
 800328e:	4602      	mov	r2, r0
 8003290:	693b      	ldr	r3, [r7, #16]
 8003292:	1ad3      	subs	r3, r2, r3
 8003294:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003298:	4293      	cmp	r3, r2
 800329a:	d901      	bls.n	80032a0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800329c:	2303      	movs	r3, #3
 800329e:	e09b      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80032a0:	4b40      	ldr	r3, [pc, #256]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80032a2:	6a1b      	ldr	r3, [r3, #32]
 80032a4:	f003 0302 	and.w	r3, r3, #2
 80032a8:	2b00      	cmp	r3, #0
 80032aa:	d1ee      	bne.n	800328a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80032ac:	7dfb      	ldrb	r3, [r7, #23]
 80032ae:	2b01      	cmp	r3, #1
 80032b0:	d105      	bne.n	80032be <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80032b2:	4b3c      	ldr	r3, [pc, #240]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80032b4:	69db      	ldr	r3, [r3, #28]
 80032b6:	4a3b      	ldr	r2, [pc, #236]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80032b8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80032bc:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	69db      	ldr	r3, [r3, #28]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	f000 8087 	beq.w	80033d6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80032c8:	4b36      	ldr	r3, [pc, #216]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80032ca:	685b      	ldr	r3, [r3, #4]
 80032cc:	f003 030c 	and.w	r3, r3, #12
 80032d0:	2b08      	cmp	r3, #8
 80032d2:	d061      	beq.n	8003398 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80032d4:	687b      	ldr	r3, [r7, #4]
 80032d6:	69db      	ldr	r3, [r3, #28]
 80032d8:	2b02      	cmp	r3, #2
 80032da:	d146      	bne.n	800336a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032dc:	4b33      	ldr	r3, [pc, #204]	@ (80033ac <HAL_RCC_OscConfig+0x4cc>)
 80032de:	2200      	movs	r2, #0
 80032e0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032e2:	f7ff fb31 	bl	8002948 <HAL_GetTick>
 80032e6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032e8:	e008      	b.n	80032fc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ea:	f7ff fb2d 	bl	8002948 <HAL_GetTick>
 80032ee:	4602      	mov	r2, r0
 80032f0:	693b      	ldr	r3, [r7, #16]
 80032f2:	1ad3      	subs	r3, r2, r3
 80032f4:	2b02      	cmp	r3, #2
 80032f6:	d901      	bls.n	80032fc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032f8:	2303      	movs	r3, #3
 80032fa:	e06d      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032fc:	4b29      	ldr	r3, [pc, #164]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003304:	2b00      	cmp	r3, #0
 8003306:	d1f0      	bne.n	80032ea <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	6a1b      	ldr	r3, [r3, #32]
 800330c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003310:	d108      	bne.n	8003324 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003312:	4b24      	ldr	r3, [pc, #144]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003314:	685b      	ldr	r3, [r3, #4]
 8003316:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	689b      	ldr	r3, [r3, #8]
 800331e:	4921      	ldr	r1, [pc, #132]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003320:	4313      	orrs	r3, r2
 8003322:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003324:	4b1f      	ldr	r3, [pc, #124]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003326:	685b      	ldr	r3, [r3, #4]
 8003328:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800332c:	687b      	ldr	r3, [r7, #4]
 800332e:	6a19      	ldr	r1, [r3, #32]
 8003330:	687b      	ldr	r3, [r7, #4]
 8003332:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003334:	430b      	orrs	r3, r1
 8003336:	491b      	ldr	r1, [pc, #108]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 8003338:	4313      	orrs	r3, r2
 800333a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800333c:	4b1b      	ldr	r3, [pc, #108]	@ (80033ac <HAL_RCC_OscConfig+0x4cc>)
 800333e:	2201      	movs	r2, #1
 8003340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003342:	f7ff fb01 	bl	8002948 <HAL_GetTick>
 8003346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003348:	e008      	b.n	800335c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800334a:	f7ff fafd 	bl	8002948 <HAL_GetTick>
 800334e:	4602      	mov	r2, r0
 8003350:	693b      	ldr	r3, [r7, #16]
 8003352:	1ad3      	subs	r3, r2, r3
 8003354:	2b02      	cmp	r3, #2
 8003356:	d901      	bls.n	800335c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e03d      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800335c:	4b11      	ldr	r3, [pc, #68]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800335e:	681b      	ldr	r3, [r3, #0]
 8003360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003364:	2b00      	cmp	r3, #0
 8003366:	d0f0      	beq.n	800334a <HAL_RCC_OscConfig+0x46a>
 8003368:	e035      	b.n	80033d6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800336a:	4b10      	ldr	r3, [pc, #64]	@ (80033ac <HAL_RCC_OscConfig+0x4cc>)
 800336c:	2200      	movs	r2, #0
 800336e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003370:	f7ff faea 	bl	8002948 <HAL_GetTick>
 8003374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003376:	e008      	b.n	800338a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003378:	f7ff fae6 	bl	8002948 <HAL_GetTick>
 800337c:	4602      	mov	r2, r0
 800337e:	693b      	ldr	r3, [r7, #16]
 8003380:	1ad3      	subs	r3, r2, r3
 8003382:	2b02      	cmp	r3, #2
 8003384:	d901      	bls.n	800338a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8003386:	2303      	movs	r3, #3
 8003388:	e026      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800338a:	4b06      	ldr	r3, [pc, #24]	@ (80033a4 <HAL_RCC_OscConfig+0x4c4>)
 800338c:	681b      	ldr	r3, [r3, #0]
 800338e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003392:	2b00      	cmp	r3, #0
 8003394:	d1f0      	bne.n	8003378 <HAL_RCC_OscConfig+0x498>
 8003396:	e01e      	b.n	80033d6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	69db      	ldr	r3, [r3, #28]
 800339c:	2b01      	cmp	r3, #1
 800339e:	d107      	bne.n	80033b0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80033a0:	2301      	movs	r3, #1
 80033a2:	e019      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
 80033a4:	40021000 	.word	0x40021000
 80033a8:	40007000 	.word	0x40007000
 80033ac:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80033b0:	4b0b      	ldr	r3, [pc, #44]	@ (80033e0 <HAL_RCC_OscConfig+0x500>)
 80033b2:	685b      	ldr	r3, [r3, #4]
 80033b4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033b6:	68fb      	ldr	r3, [r7, #12]
 80033b8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80033bc:	687b      	ldr	r3, [r7, #4]
 80033be:	6a1b      	ldr	r3, [r3, #32]
 80033c0:	429a      	cmp	r2, r3
 80033c2:	d106      	bne.n	80033d2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80033c4:	68fb      	ldr	r3, [r7, #12]
 80033c6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80033ce:	429a      	cmp	r2, r3
 80033d0:	d001      	beq.n	80033d6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80033d2:	2301      	movs	r3, #1
 80033d4:	e000      	b.n	80033d8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80033d6:	2300      	movs	r3, #0
}
 80033d8:	4618      	mov	r0, r3
 80033da:	3718      	adds	r7, #24
 80033dc:	46bd      	mov	sp, r7
 80033de:	bd80      	pop	{r7, pc}
 80033e0:	40021000 	.word	0x40021000

080033e4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b084      	sub	sp, #16
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
 80033ec:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033ee:	687b      	ldr	r3, [r7, #4]
 80033f0:	2b00      	cmp	r3, #0
 80033f2:	d101      	bne.n	80033f8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033f4:	2301      	movs	r3, #1
 80033f6:	e0d0      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033f8:	4b6a      	ldr	r3, [pc, #424]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0307 	and.w	r3, r3, #7
 8003400:	683a      	ldr	r2, [r7, #0]
 8003402:	429a      	cmp	r2, r3
 8003404:	d910      	bls.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003406:	4b67      	ldr	r3, [pc, #412]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f023 0207 	bic.w	r2, r3, #7
 800340e:	4965      	ldr	r1, [pc, #404]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003410:	683b      	ldr	r3, [r7, #0]
 8003412:	4313      	orrs	r3, r2
 8003414:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003416:	4b63      	ldr	r3, [pc, #396]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f003 0307 	and.w	r3, r3, #7
 800341e:	683a      	ldr	r2, [r7, #0]
 8003420:	429a      	cmp	r2, r3
 8003422:	d001      	beq.n	8003428 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003424:	2301      	movs	r3, #1
 8003426:	e0b8      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	f003 0302 	and.w	r3, r3, #2
 8003430:	2b00      	cmp	r3, #0
 8003432:	d020      	beq.n	8003476 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f003 0304 	and.w	r3, r3, #4
 800343c:	2b00      	cmp	r3, #0
 800343e:	d005      	beq.n	800344c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003440:	4b59      	ldr	r3, [pc, #356]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003442:	685b      	ldr	r3, [r3, #4]
 8003444:	4a58      	ldr	r2, [pc, #352]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003446:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800344a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	681b      	ldr	r3, [r3, #0]
 8003450:	f003 0308 	and.w	r3, r3, #8
 8003454:	2b00      	cmp	r3, #0
 8003456:	d005      	beq.n	8003464 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003458:	4b53      	ldr	r3, [pc, #332]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345a:	685b      	ldr	r3, [r3, #4]
 800345c:	4a52      	ldr	r2, [pc, #328]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800345e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003462:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003464:	4b50      	ldr	r3, [pc, #320]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003466:	685b      	ldr	r3, [r3, #4]
 8003468:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800346c:	687b      	ldr	r3, [r7, #4]
 800346e:	689b      	ldr	r3, [r3, #8]
 8003470:	494d      	ldr	r1, [pc, #308]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003472:	4313      	orrs	r3, r2
 8003474:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0301 	and.w	r3, r3, #1
 800347e:	2b00      	cmp	r3, #0
 8003480:	d040      	beq.n	8003504 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	685b      	ldr	r3, [r3, #4]
 8003486:	2b01      	cmp	r3, #1
 8003488:	d107      	bne.n	800349a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800348a:	4b47      	ldr	r3, [pc, #284]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800348c:	681b      	ldr	r3, [r3, #0]
 800348e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003492:	2b00      	cmp	r3, #0
 8003494:	d115      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003496:	2301      	movs	r3, #1
 8003498:	e07f      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800349a:	687b      	ldr	r3, [r7, #4]
 800349c:	685b      	ldr	r3, [r3, #4]
 800349e:	2b02      	cmp	r3, #2
 80034a0:	d107      	bne.n	80034b2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80034a2:	4b41      	ldr	r3, [pc, #260]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034a4:	681b      	ldr	r3, [r3, #0]
 80034a6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80034aa:	2b00      	cmp	r3, #0
 80034ac:	d109      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034ae:	2301      	movs	r3, #1
 80034b0:	e073      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80034b2:	4b3d      	ldr	r3, [pc, #244]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034b4:	681b      	ldr	r3, [r3, #0]
 80034b6:	f003 0302 	and.w	r3, r3, #2
 80034ba:	2b00      	cmp	r3, #0
 80034bc:	d101      	bne.n	80034c2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80034be:	2301      	movs	r3, #1
 80034c0:	e06b      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80034c2:	4b39      	ldr	r3, [pc, #228]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034c4:	685b      	ldr	r3, [r3, #4]
 80034c6:	f023 0203 	bic.w	r2, r3, #3
 80034ca:	687b      	ldr	r3, [r7, #4]
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	4936      	ldr	r1, [pc, #216]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034d0:	4313      	orrs	r3, r2
 80034d2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80034d4:	f7ff fa38 	bl	8002948 <HAL_GetTick>
 80034d8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034da:	e00a      	b.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034dc:	f7ff fa34 	bl	8002948 <HAL_GetTick>
 80034e0:	4602      	mov	r2, r0
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	1ad3      	subs	r3, r2, r3
 80034e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ea:	4293      	cmp	r3, r2
 80034ec:	d901      	bls.n	80034f2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034ee:	2303      	movs	r3, #3
 80034f0:	e053      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034f2:	4b2d      	ldr	r3, [pc, #180]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 80034f4:	685b      	ldr	r3, [r3, #4]
 80034f6:	f003 020c 	and.w	r2, r3, #12
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	685b      	ldr	r3, [r3, #4]
 80034fe:	009b      	lsls	r3, r3, #2
 8003500:	429a      	cmp	r2, r3
 8003502:	d1eb      	bne.n	80034dc <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003504:	4b27      	ldr	r3, [pc, #156]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003506:	681b      	ldr	r3, [r3, #0]
 8003508:	f003 0307 	and.w	r3, r3, #7
 800350c:	683a      	ldr	r2, [r7, #0]
 800350e:	429a      	cmp	r2, r3
 8003510:	d210      	bcs.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003512:	4b24      	ldr	r3, [pc, #144]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003514:	681b      	ldr	r3, [r3, #0]
 8003516:	f023 0207 	bic.w	r2, r3, #7
 800351a:	4922      	ldr	r1, [pc, #136]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 800351c:	683b      	ldr	r3, [r7, #0]
 800351e:	4313      	orrs	r3, r2
 8003520:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003522:	4b20      	ldr	r3, [pc, #128]	@ (80035a4 <HAL_RCC_ClockConfig+0x1c0>)
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	f003 0307 	and.w	r3, r3, #7
 800352a:	683a      	ldr	r2, [r7, #0]
 800352c:	429a      	cmp	r2, r3
 800352e:	d001      	beq.n	8003534 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003530:	2301      	movs	r3, #1
 8003532:	e032      	b.n	800359a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	f003 0304 	and.w	r3, r3, #4
 800353c:	2b00      	cmp	r3, #0
 800353e:	d008      	beq.n	8003552 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003540:	4b19      	ldr	r3, [pc, #100]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003542:	685b      	ldr	r3, [r3, #4]
 8003544:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	68db      	ldr	r3, [r3, #12]
 800354c:	4916      	ldr	r1, [pc, #88]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800354e:	4313      	orrs	r3, r2
 8003550:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	f003 0308 	and.w	r3, r3, #8
 800355a:	2b00      	cmp	r3, #0
 800355c:	d009      	beq.n	8003572 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800355e:	4b12      	ldr	r3, [pc, #72]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 8003560:	685b      	ldr	r3, [r3, #4]
 8003562:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	691b      	ldr	r3, [r3, #16]
 800356a:	00db      	lsls	r3, r3, #3
 800356c:	490e      	ldr	r1, [pc, #56]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800356e:	4313      	orrs	r3, r2
 8003570:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003572:	f000 f821 	bl	80035b8 <HAL_RCC_GetSysClockFreq>
 8003576:	4602      	mov	r2, r0
 8003578:	4b0b      	ldr	r3, [pc, #44]	@ (80035a8 <HAL_RCC_ClockConfig+0x1c4>)
 800357a:	685b      	ldr	r3, [r3, #4]
 800357c:	091b      	lsrs	r3, r3, #4
 800357e:	f003 030f 	and.w	r3, r3, #15
 8003582:	490a      	ldr	r1, [pc, #40]	@ (80035ac <HAL_RCC_ClockConfig+0x1c8>)
 8003584:	5ccb      	ldrb	r3, [r1, r3]
 8003586:	fa22 f303 	lsr.w	r3, r2, r3
 800358a:	4a09      	ldr	r2, [pc, #36]	@ (80035b0 <HAL_RCC_ClockConfig+0x1cc>)
 800358c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800358e:	4b09      	ldr	r3, [pc, #36]	@ (80035b4 <HAL_RCC_ClockConfig+0x1d0>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	4618      	mov	r0, r3
 8003594:	f7ff f996 	bl	80028c4 <HAL_InitTick>

  return HAL_OK;
 8003598:	2300      	movs	r3, #0
}
 800359a:	4618      	mov	r0, r3
 800359c:	3710      	adds	r7, #16
 800359e:	46bd      	mov	sp, r7
 80035a0:	bd80      	pop	{r7, pc}
 80035a2:	bf00      	nop
 80035a4:	40022000 	.word	0x40022000
 80035a8:	40021000 	.word	0x40021000
 80035ac:	080057c4 	.word	0x080057c4
 80035b0:	20000028 	.word	0x20000028
 80035b4:	2000002c 	.word	0x2000002c

080035b8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80035b8:	b480      	push	{r7}
 80035ba:	b087      	sub	sp, #28
 80035bc:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80035be:	2300      	movs	r3, #0
 80035c0:	60fb      	str	r3, [r7, #12]
 80035c2:	2300      	movs	r3, #0
 80035c4:	60bb      	str	r3, [r7, #8]
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
 80035ca:	2300      	movs	r3, #0
 80035cc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80035ce:	2300      	movs	r3, #0
 80035d0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80035d2:	4b1e      	ldr	r3, [pc, #120]	@ (800364c <HAL_RCC_GetSysClockFreq+0x94>)
 80035d4:	685b      	ldr	r3, [r3, #4]
 80035d6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80035d8:	68fb      	ldr	r3, [r7, #12]
 80035da:	f003 030c 	and.w	r3, r3, #12
 80035de:	2b04      	cmp	r3, #4
 80035e0:	d002      	beq.n	80035e8 <HAL_RCC_GetSysClockFreq+0x30>
 80035e2:	2b08      	cmp	r3, #8
 80035e4:	d003      	beq.n	80035ee <HAL_RCC_GetSysClockFreq+0x36>
 80035e6:	e027      	b.n	8003638 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035e8:	4b19      	ldr	r3, [pc, #100]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ea:	613b      	str	r3, [r7, #16]
      break;
 80035ec:	e027      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	0c9b      	lsrs	r3, r3, #18
 80035f2:	f003 030f 	and.w	r3, r3, #15
 80035f6:	4a17      	ldr	r2, [pc, #92]	@ (8003654 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035f8:	5cd3      	ldrb	r3, [r2, r3]
 80035fa:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003602:	2b00      	cmp	r3, #0
 8003604:	d010      	beq.n	8003628 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003606:	4b11      	ldr	r3, [pc, #68]	@ (800364c <HAL_RCC_GetSysClockFreq+0x94>)
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	0c5b      	lsrs	r3, r3, #17
 800360c:	f003 0301 	and.w	r3, r3, #1
 8003610:	4a11      	ldr	r2, [pc, #68]	@ (8003658 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003612:	5cd3      	ldrb	r3, [r2, r3]
 8003614:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	4a0d      	ldr	r2, [pc, #52]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x98>)
 800361a:	fb03 f202 	mul.w	r2, r3, r2
 800361e:	68bb      	ldr	r3, [r7, #8]
 8003620:	fbb2 f3f3 	udiv	r3, r2, r3
 8003624:	617b      	str	r3, [r7, #20]
 8003626:	e004      	b.n	8003632 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	4a0c      	ldr	r2, [pc, #48]	@ (800365c <HAL_RCC_GetSysClockFreq+0xa4>)
 800362c:	fb02 f303 	mul.w	r3, r2, r3
 8003630:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003632:	697b      	ldr	r3, [r7, #20]
 8003634:	613b      	str	r3, [r7, #16]
      break;
 8003636:	e002      	b.n	800363e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003638:	4b05      	ldr	r3, [pc, #20]	@ (8003650 <HAL_RCC_GetSysClockFreq+0x98>)
 800363a:	613b      	str	r3, [r7, #16]
      break;
 800363c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800363e:	693b      	ldr	r3, [r7, #16]
}
 8003640:	4618      	mov	r0, r3
 8003642:	371c      	adds	r7, #28
 8003644:	46bd      	mov	sp, r7
 8003646:	bc80      	pop	{r7}
 8003648:	4770      	bx	lr
 800364a:	bf00      	nop
 800364c:	40021000 	.word	0x40021000
 8003650:	007a1200 	.word	0x007a1200
 8003654:	080057d4 	.word	0x080057d4
 8003658:	080057e4 	.word	0x080057e4
 800365c:	003d0900 	.word	0x003d0900

08003660 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003660:	b480      	push	{r7}
 8003662:	b085      	sub	sp, #20
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8003668:	4b0a      	ldr	r3, [pc, #40]	@ (8003694 <RCC_Delay+0x34>)
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a0a      	ldr	r2, [pc, #40]	@ (8003698 <RCC_Delay+0x38>)
 800366e:	fba2 2303 	umull	r2, r3, r2, r3
 8003672:	0a5b      	lsrs	r3, r3, #9
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	fb02 f303 	mul.w	r3, r2, r3
 800367a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800367c:	bf00      	nop
  }
  while (Delay --);
 800367e:	68fb      	ldr	r3, [r7, #12]
 8003680:	1e5a      	subs	r2, r3, #1
 8003682:	60fa      	str	r2, [r7, #12]
 8003684:	2b00      	cmp	r3, #0
 8003686:	d1f9      	bne.n	800367c <RCC_Delay+0x1c>
}
 8003688:	bf00      	nop
 800368a:	bf00      	nop
 800368c:	3714      	adds	r7, #20
 800368e:	46bd      	mov	sp, r7
 8003690:	bc80      	pop	{r7}
 8003692:	4770      	bx	lr
 8003694:	20000028 	.word	0x20000028
 8003698:	10624dd3 	.word	0x10624dd3

0800369c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800369c:	b580      	push	{r7, lr}
 800369e:	b082      	sub	sp, #8
 80036a0:	af00      	add	r7, sp, #0
 80036a2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80036a4:	687b      	ldr	r3, [r7, #4]
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d101      	bne.n	80036ae <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80036aa:	2301      	movs	r3, #1
 80036ac:	e076      	b.n	800379c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d108      	bne.n	80036c8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	685b      	ldr	r3, [r3, #4]
 80036ba:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80036be:	d009      	beq.n	80036d4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	2200      	movs	r2, #0
 80036c4:	61da      	str	r2, [r3, #28]
 80036c6:	e005      	b.n	80036d4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	2200      	movs	r2, #0
 80036cc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	2200      	movs	r2, #0
 80036d2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	2200      	movs	r2, #0
 80036d8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80036da:	687b      	ldr	r3, [r7, #4]
 80036dc:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036e0:	b2db      	uxtb	r3, r3
 80036e2:	2b00      	cmp	r3, #0
 80036e4:	d106      	bne.n	80036f4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036e6:	687b      	ldr	r3, [r7, #4]
 80036e8:	2200      	movs	r2, #0
 80036ea:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036ee:	6878      	ldr	r0, [r7, #4]
 80036f0:	f7fe fed0 	bl	8002494 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	2202      	movs	r2, #2
 80036f8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	681a      	ldr	r2, [r3, #0]
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800370a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	685b      	ldr	r3, [r3, #4]
 8003710:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	689b      	ldr	r3, [r3, #8]
 8003718:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 800371c:	431a      	orrs	r2, r3
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	68db      	ldr	r3, [r3, #12]
 8003722:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8003726:	431a      	orrs	r2, r3
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	691b      	ldr	r3, [r3, #16]
 800372c:	f003 0302 	and.w	r3, r3, #2
 8003730:	431a      	orrs	r2, r3
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	695b      	ldr	r3, [r3, #20]
 8003736:	f003 0301 	and.w	r3, r3, #1
 800373a:	431a      	orrs	r2, r3
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	699b      	ldr	r3, [r3, #24]
 8003740:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003744:	431a      	orrs	r2, r3
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	69db      	ldr	r3, [r3, #28]
 800374a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800374e:	431a      	orrs	r2, r3
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	6a1b      	ldr	r3, [r3, #32]
 8003754:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003758:	ea42 0103 	orr.w	r1, r2, r3
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003760:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	430a      	orrs	r2, r1
 800376a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	699b      	ldr	r3, [r3, #24]
 8003770:	0c1a      	lsrs	r2, r3, #16
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f002 0204 	and.w	r2, r2, #4
 800377a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	69da      	ldr	r2, [r3, #28]
 8003782:	687b      	ldr	r3, [r7, #4]
 8003784:	681b      	ldr	r3, [r3, #0]
 8003786:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800378a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	2200      	movs	r2, #0
 8003790:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	2201      	movs	r2, #1
 8003796:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800379a:	2300      	movs	r3, #0
}
 800379c:	4618      	mov	r0, r3
 800379e:	3708      	adds	r7, #8
 80037a0:	46bd      	mov	sp, r7
 80037a2:	bd80      	pop	{r7, pc}

080037a4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80037a4:	b580      	push	{r7, lr}
 80037a6:	b082      	sub	sp, #8
 80037a8:	af00      	add	r7, sp, #0
 80037aa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d101      	bne.n	80037b6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80037b2:	2301      	movs	r3, #1
 80037b4:	e041      	b.n	800383a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80037bc:	b2db      	uxtb	r3, r3
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d106      	bne.n	80037d0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	2200      	movs	r2, #0
 80037c6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f7fe fea0 	bl	8002510 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	2202      	movs	r2, #2
 80037d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80037d8:	687b      	ldr	r3, [r7, #4]
 80037da:	681a      	ldr	r2, [r3, #0]
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	3304      	adds	r3, #4
 80037e0:	4619      	mov	r1, r3
 80037e2:	4610      	mov	r0, r2
 80037e4:	f000 fc38 	bl	8004058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	2201      	movs	r2, #1
 80037ec:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	2201      	movs	r2, #1
 80037f4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037f8:	687b      	ldr	r3, [r7, #4]
 80037fa:	2201      	movs	r2, #1
 80037fc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003800:	687b      	ldr	r3, [r7, #4]
 8003802:	2201      	movs	r2, #1
 8003804:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	2201      	movs	r2, #1
 800380c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	2201      	movs	r2, #1
 8003814:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	2201      	movs	r2, #1
 800381c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2201      	movs	r2, #1
 8003824:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	2201      	movs	r2, #1
 800382c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	2201      	movs	r2, #1
 8003834:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003838:	2300      	movs	r3, #0
}
 800383a:	4618      	mov	r0, r3
 800383c:	3708      	adds	r7, #8
 800383e:	46bd      	mov	sp, r7
 8003840:	bd80      	pop	{r7, pc}
	...

08003844 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003844:	b480      	push	{r7}
 8003846:	b085      	sub	sp, #20
 8003848:	af00      	add	r7, sp, #0
 800384a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003852:	b2db      	uxtb	r3, r3
 8003854:	2b01      	cmp	r3, #1
 8003856:	d001      	beq.n	800385c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003858:	2301      	movs	r3, #1
 800385a:	e03a      	b.n	80038d2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800385c:	687b      	ldr	r3, [r7, #4]
 800385e:	2202      	movs	r2, #2
 8003860:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	68da      	ldr	r2, [r3, #12]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f042 0201 	orr.w	r2, r2, #1
 8003872:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	681b      	ldr	r3, [r3, #0]
 8003878:	4a18      	ldr	r2, [pc, #96]	@ (80038dc <HAL_TIM_Base_Start_IT+0x98>)
 800387a:	4293      	cmp	r3, r2
 800387c:	d00e      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x58>
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003886:	d009      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x58>
 8003888:	687b      	ldr	r3, [r7, #4]
 800388a:	681b      	ldr	r3, [r3, #0]
 800388c:	4a14      	ldr	r2, [pc, #80]	@ (80038e0 <HAL_TIM_Base_Start_IT+0x9c>)
 800388e:	4293      	cmp	r3, r2
 8003890:	d004      	beq.n	800389c <HAL_TIM_Base_Start_IT+0x58>
 8003892:	687b      	ldr	r3, [r7, #4]
 8003894:	681b      	ldr	r3, [r3, #0]
 8003896:	4a13      	ldr	r2, [pc, #76]	@ (80038e4 <HAL_TIM_Base_Start_IT+0xa0>)
 8003898:	4293      	cmp	r3, r2
 800389a:	d111      	bne.n	80038c0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	689b      	ldr	r3, [r3, #8]
 80038a2:	f003 0307 	and.w	r3, r3, #7
 80038a6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	2b06      	cmp	r3, #6
 80038ac:	d010      	beq.n	80038d0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	681a      	ldr	r2, [r3, #0]
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	681b      	ldr	r3, [r3, #0]
 80038b8:	f042 0201 	orr.w	r2, r2, #1
 80038bc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80038be:	e007      	b.n	80038d0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80038c0:	687b      	ldr	r3, [r7, #4]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	681a      	ldr	r2, [r3, #0]
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	f042 0201 	orr.w	r2, r2, #1
 80038ce:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80038d0:	2300      	movs	r3, #0
}
 80038d2:	4618      	mov	r0, r3
 80038d4:	3714      	adds	r7, #20
 80038d6:	46bd      	mov	sp, r7
 80038d8:	bc80      	pop	{r7}
 80038da:	4770      	bx	lr
 80038dc:	40012c00 	.word	0x40012c00
 80038e0:	40000400 	.word	0x40000400
 80038e4:	40000800 	.word	0x40000800

080038e8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038e8:	b580      	push	{r7, lr}
 80038ea:	b082      	sub	sp, #8
 80038ec:	af00      	add	r7, sp, #0
 80038ee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d101      	bne.n	80038fa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038f6:	2301      	movs	r3, #1
 80038f8:	e041      	b.n	800397e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038fa:	687b      	ldr	r3, [r7, #4]
 80038fc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003900:	b2db      	uxtb	r3, r3
 8003902:	2b00      	cmp	r3, #0
 8003904:	d106      	bne.n	8003914 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	2200      	movs	r2, #0
 800390a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 800390e:	6878      	ldr	r0, [r7, #4]
 8003910:	f000 f839 	bl	8003986 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	2202      	movs	r2, #2
 8003918:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800391c:	687b      	ldr	r3, [r7, #4]
 800391e:	681a      	ldr	r2, [r3, #0]
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	3304      	adds	r3, #4
 8003924:	4619      	mov	r1, r3
 8003926:	4610      	mov	r0, r2
 8003928:	f000 fb96 	bl	8004058 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	2201      	movs	r2, #1
 8003930:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	2201      	movs	r2, #1
 8003938:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800393c:	687b      	ldr	r3, [r7, #4]
 800393e:	2201      	movs	r2, #1
 8003940:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	2201      	movs	r2, #1
 8003948:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800394c:	687b      	ldr	r3, [r7, #4]
 800394e:	2201      	movs	r2, #1
 8003950:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	2201      	movs	r2, #1
 8003958:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2201      	movs	r2, #1
 8003960:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	2201      	movs	r2, #1
 8003968:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	2201      	movs	r2, #1
 8003970:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b083      	sub	sp, #12
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800398e:	bf00      	nop
 8003990:	370c      	adds	r7, #12
 8003992:	46bd      	mov	sp, r7
 8003994:	bc80      	pop	{r7}
 8003996:	4770      	bx	lr

08003998 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003998:	b580      	push	{r7, lr}
 800399a:	b084      	sub	sp, #16
 800399c:	af00      	add	r7, sp, #0
 800399e:	6078      	str	r0, [r7, #4]
 80039a0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 80039a2:	683b      	ldr	r3, [r7, #0]
 80039a4:	2b00      	cmp	r3, #0
 80039a6:	d109      	bne.n	80039bc <HAL_TIM_PWM_Start+0x24>
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 80039ae:	b2db      	uxtb	r3, r3
 80039b0:	2b01      	cmp	r3, #1
 80039b2:	bf14      	ite	ne
 80039b4:	2301      	movne	r3, #1
 80039b6:	2300      	moveq	r3, #0
 80039b8:	b2db      	uxtb	r3, r3
 80039ba:	e022      	b.n	8003a02 <HAL_TIM_PWM_Start+0x6a>
 80039bc:	683b      	ldr	r3, [r7, #0]
 80039be:	2b04      	cmp	r3, #4
 80039c0:	d109      	bne.n	80039d6 <HAL_TIM_PWM_Start+0x3e>
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 80039c8:	b2db      	uxtb	r3, r3
 80039ca:	2b01      	cmp	r3, #1
 80039cc:	bf14      	ite	ne
 80039ce:	2301      	movne	r3, #1
 80039d0:	2300      	moveq	r3, #0
 80039d2:	b2db      	uxtb	r3, r3
 80039d4:	e015      	b.n	8003a02 <HAL_TIM_PWM_Start+0x6a>
 80039d6:	683b      	ldr	r3, [r7, #0]
 80039d8:	2b08      	cmp	r3, #8
 80039da:	d109      	bne.n	80039f0 <HAL_TIM_PWM_Start+0x58>
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039e2:	b2db      	uxtb	r3, r3
 80039e4:	2b01      	cmp	r3, #1
 80039e6:	bf14      	ite	ne
 80039e8:	2301      	movne	r3, #1
 80039ea:	2300      	moveq	r3, #0
 80039ec:	b2db      	uxtb	r3, r3
 80039ee:	e008      	b.n	8003a02 <HAL_TIM_PWM_Start+0x6a>
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039f6:	b2db      	uxtb	r3, r3
 80039f8:	2b01      	cmp	r3, #1
 80039fa:	bf14      	ite	ne
 80039fc:	2301      	movne	r3, #1
 80039fe:	2300      	moveq	r3, #0
 8003a00:	b2db      	uxtb	r3, r3
 8003a02:	2b00      	cmp	r3, #0
 8003a04:	d001      	beq.n	8003a0a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003a06:	2301      	movs	r3, #1
 8003a08:	e05e      	b.n	8003ac8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003a0a:	683b      	ldr	r3, [r7, #0]
 8003a0c:	2b00      	cmp	r3, #0
 8003a0e:	d104      	bne.n	8003a1a <HAL_TIM_PWM_Start+0x82>
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2202      	movs	r2, #2
 8003a14:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003a18:	e013      	b.n	8003a42 <HAL_TIM_PWM_Start+0xaa>
 8003a1a:	683b      	ldr	r3, [r7, #0]
 8003a1c:	2b04      	cmp	r3, #4
 8003a1e:	d104      	bne.n	8003a2a <HAL_TIM_PWM_Start+0x92>
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	2202      	movs	r2, #2
 8003a24:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003a28:	e00b      	b.n	8003a42 <HAL_TIM_PWM_Start+0xaa>
 8003a2a:	683b      	ldr	r3, [r7, #0]
 8003a2c:	2b08      	cmp	r3, #8
 8003a2e:	d104      	bne.n	8003a3a <HAL_TIM_PWM_Start+0xa2>
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	2202      	movs	r2, #2
 8003a34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003a38:	e003      	b.n	8003a42 <HAL_TIM_PWM_Start+0xaa>
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2202      	movs	r2, #2
 8003a3e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	2201      	movs	r2, #1
 8003a48:	6839      	ldr	r1, [r7, #0]
 8003a4a:	4618      	mov	r0, r3
 8003a4c:	f000 fd84 	bl	8004558 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	4a1e      	ldr	r2, [pc, #120]	@ (8003ad0 <HAL_TIM_PWM_Start+0x138>)
 8003a56:	4293      	cmp	r3, r2
 8003a58:	d107      	bne.n	8003a6a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	681b      	ldr	r3, [r3, #0]
 8003a5e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a68:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	4a18      	ldr	r2, [pc, #96]	@ (8003ad0 <HAL_TIM_PWM_Start+0x138>)
 8003a70:	4293      	cmp	r3, r2
 8003a72:	d00e      	beq.n	8003a92 <HAL_TIM_PWM_Start+0xfa>
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	681b      	ldr	r3, [r3, #0]
 8003a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a7c:	d009      	beq.n	8003a92 <HAL_TIM_PWM_Start+0xfa>
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	681b      	ldr	r3, [r3, #0]
 8003a82:	4a14      	ldr	r2, [pc, #80]	@ (8003ad4 <HAL_TIM_PWM_Start+0x13c>)
 8003a84:	4293      	cmp	r3, r2
 8003a86:	d004      	beq.n	8003a92 <HAL_TIM_PWM_Start+0xfa>
 8003a88:	687b      	ldr	r3, [r7, #4]
 8003a8a:	681b      	ldr	r3, [r3, #0]
 8003a8c:	4a12      	ldr	r2, [pc, #72]	@ (8003ad8 <HAL_TIM_PWM_Start+0x140>)
 8003a8e:	4293      	cmp	r3, r2
 8003a90:	d111      	bne.n	8003ab6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	681b      	ldr	r3, [r3, #0]
 8003a96:	689b      	ldr	r3, [r3, #8]
 8003a98:	f003 0307 	and.w	r3, r3, #7
 8003a9c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	2b06      	cmp	r3, #6
 8003aa2:	d010      	beq.n	8003ac6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	681a      	ldr	r2, [r3, #0]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f042 0201 	orr.w	r2, r2, #1
 8003ab2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ab4:	e007      	b.n	8003ac6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	681a      	ldr	r2, [r3, #0]
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	681b      	ldr	r3, [r3, #0]
 8003ac0:	f042 0201 	orr.w	r2, r2, #1
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ac6:	2300      	movs	r3, #0
}
 8003ac8:	4618      	mov	r0, r3
 8003aca:	3710      	adds	r7, #16
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	40012c00 	.word	0x40012c00
 8003ad4:	40000400 	.word	0x40000400
 8003ad8:	40000800 	.word	0x40000800

08003adc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003adc:	b580      	push	{r7, lr}
 8003ade:	b082      	sub	sp, #8
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	691b      	ldr	r3, [r3, #16]
 8003aea:	f003 0302 	and.w	r3, r3, #2
 8003aee:	2b02      	cmp	r3, #2
 8003af0:	d122      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	68db      	ldr	r3, [r3, #12]
 8003af8:	f003 0302 	and.w	r3, r3, #2
 8003afc:	2b02      	cmp	r3, #2
 8003afe:	d11b      	bne.n	8003b38 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003b00:	687b      	ldr	r3, [r7, #4]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f06f 0202 	mvn.w	r2, #2
 8003b08:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	2201      	movs	r2, #1
 8003b0e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	699b      	ldr	r3, [r3, #24]
 8003b16:	f003 0303 	and.w	r3, r3, #3
 8003b1a:	2b00      	cmp	r3, #0
 8003b1c:	d003      	beq.n	8003b26 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003b1e:	6878      	ldr	r0, [r7, #4]
 8003b20:	f000 fa7f 	bl	8004022 <HAL_TIM_IC_CaptureCallback>
 8003b24:	e005      	b.n	8003b32 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b26:	6878      	ldr	r0, [r7, #4]
 8003b28:	f000 fa72 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b2c:	6878      	ldr	r0, [r7, #4]
 8003b2e:	f000 fa81 	bl	8004034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	2200      	movs	r2, #0
 8003b36:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003b38:	687b      	ldr	r3, [r7, #4]
 8003b3a:	681b      	ldr	r3, [r3, #0]
 8003b3c:	691b      	ldr	r3, [r3, #16]
 8003b3e:	f003 0304 	and.w	r3, r3, #4
 8003b42:	2b04      	cmp	r3, #4
 8003b44:	d122      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	68db      	ldr	r3, [r3, #12]
 8003b4c:	f003 0304 	and.w	r3, r3, #4
 8003b50:	2b04      	cmp	r3, #4
 8003b52:	d11b      	bne.n	8003b8c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b54:	687b      	ldr	r3, [r7, #4]
 8003b56:	681b      	ldr	r3, [r3, #0]
 8003b58:	f06f 0204 	mvn.w	r2, #4
 8003b5c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	2202      	movs	r2, #2
 8003b62:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	681b      	ldr	r3, [r3, #0]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b6e:	2b00      	cmp	r3, #0
 8003b70:	d003      	beq.n	8003b7a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b72:	6878      	ldr	r0, [r7, #4]
 8003b74:	f000 fa55 	bl	8004022 <HAL_TIM_IC_CaptureCallback>
 8003b78:	e005      	b.n	8003b86 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b7a:	6878      	ldr	r0, [r7, #4]
 8003b7c:	f000 fa48 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b80:	6878      	ldr	r0, [r7, #4]
 8003b82:	f000 fa57 	bl	8004034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	2200      	movs	r2, #0
 8003b8a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	691b      	ldr	r3, [r3, #16]
 8003b92:	f003 0308 	and.w	r3, r3, #8
 8003b96:	2b08      	cmp	r3, #8
 8003b98:	d122      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	68db      	ldr	r3, [r3, #12]
 8003ba0:	f003 0308 	and.w	r3, r3, #8
 8003ba4:	2b08      	cmp	r3, #8
 8003ba6:	d11b      	bne.n	8003be0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	681b      	ldr	r3, [r3, #0]
 8003bac:	f06f 0208 	mvn.w	r2, #8
 8003bb0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	2204      	movs	r2, #4
 8003bb6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	69db      	ldr	r3, [r3, #28]
 8003bbe:	f003 0303 	and.w	r3, r3, #3
 8003bc2:	2b00      	cmp	r3, #0
 8003bc4:	d003      	beq.n	8003bce <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bc6:	6878      	ldr	r0, [r7, #4]
 8003bc8:	f000 fa2b 	bl	8004022 <HAL_TIM_IC_CaptureCallback>
 8003bcc:	e005      	b.n	8003bda <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003bce:	6878      	ldr	r0, [r7, #4]
 8003bd0:	f000 fa1e 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bd4:	6878      	ldr	r0, [r7, #4]
 8003bd6:	f000 fa2d 	bl	8004034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bda:	687b      	ldr	r3, [r7, #4]
 8003bdc:	2200      	movs	r2, #0
 8003bde:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003be0:	687b      	ldr	r3, [r7, #4]
 8003be2:	681b      	ldr	r3, [r3, #0]
 8003be4:	691b      	ldr	r3, [r3, #16]
 8003be6:	f003 0310 	and.w	r3, r3, #16
 8003bea:	2b10      	cmp	r3, #16
 8003bec:	d122      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68db      	ldr	r3, [r3, #12]
 8003bf4:	f003 0310 	and.w	r3, r3, #16
 8003bf8:	2b10      	cmp	r3, #16
 8003bfa:	d11b      	bne.n	8003c34 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bfc:	687b      	ldr	r3, [r7, #4]
 8003bfe:	681b      	ldr	r3, [r3, #0]
 8003c00:	f06f 0210 	mvn.w	r2, #16
 8003c04:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	2208      	movs	r2, #8
 8003c0a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003c0c:	687b      	ldr	r3, [r7, #4]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	69db      	ldr	r3, [r3, #28]
 8003c12:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d003      	beq.n	8003c22 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003c1a:	6878      	ldr	r0, [r7, #4]
 8003c1c:	f000 fa01 	bl	8004022 <HAL_TIM_IC_CaptureCallback>
 8003c20:	e005      	b.n	8003c2e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003c22:	6878      	ldr	r0, [r7, #4]
 8003c24:	f000 f9f4 	bl	8004010 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003c28:	6878      	ldr	r0, [r7, #4]
 8003c2a:	f000 fa03 	bl	8004034 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	2200      	movs	r2, #0
 8003c32:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003c34:	687b      	ldr	r3, [r7, #4]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	691b      	ldr	r3, [r3, #16]
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	2b01      	cmp	r3, #1
 8003c40:	d10e      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c42:	687b      	ldr	r3, [r7, #4]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	68db      	ldr	r3, [r3, #12]
 8003c48:	f003 0301 	and.w	r3, r3, #1
 8003c4c:	2b01      	cmp	r3, #1
 8003c4e:	d107      	bne.n	8003c60 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f06f 0201 	mvn.w	r2, #1
 8003c58:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c5a:	6878      	ldr	r0, [r7, #4]
 8003c5c:	f000 f9cf 	bl	8003ffe <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	691b      	ldr	r3, [r3, #16]
 8003c66:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c6a:	2b80      	cmp	r3, #128	@ 0x80
 8003c6c:	d10e      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	681b      	ldr	r3, [r3, #0]
 8003c72:	68db      	ldr	r3, [r3, #12]
 8003c74:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c78:	2b80      	cmp	r3, #128	@ 0x80
 8003c7a:	d107      	bne.n	8003c8c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c84:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c86:	6878      	ldr	r0, [r7, #4]
 8003c88:	f000 fcf1 	bl	800466e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	681b      	ldr	r3, [r3, #0]
 8003c90:	691b      	ldr	r3, [r3, #16]
 8003c92:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c96:	2b40      	cmp	r3, #64	@ 0x40
 8003c98:	d10e      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	681b      	ldr	r3, [r3, #0]
 8003c9e:	68db      	ldr	r3, [r3, #12]
 8003ca0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ca4:	2b40      	cmp	r3, #64	@ 0x40
 8003ca6:	d107      	bne.n	8003cb8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	681b      	ldr	r3, [r3, #0]
 8003cac:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003cb0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003cb2:	6878      	ldr	r0, [r7, #4]
 8003cb4:	f000 f9c7 	bl	8004046 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	691b      	ldr	r3, [r3, #16]
 8003cbe:	f003 0320 	and.w	r3, r3, #32
 8003cc2:	2b20      	cmp	r3, #32
 8003cc4:	d10e      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	68db      	ldr	r3, [r3, #12]
 8003ccc:	f003 0320 	and.w	r3, r3, #32
 8003cd0:	2b20      	cmp	r3, #32
 8003cd2:	d107      	bne.n	8003ce4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	f06f 0220 	mvn.w	r2, #32
 8003cdc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 fcbc 	bl	800465c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ce4:	bf00      	nop
 8003ce6:	3708      	adds	r7, #8
 8003ce8:	46bd      	mov	sp, r7
 8003cea:	bd80      	pop	{r7, pc}

08003cec <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cec:	b580      	push	{r7, lr}
 8003cee:	b086      	sub	sp, #24
 8003cf0:	af00      	add	r7, sp, #0
 8003cf2:	60f8      	str	r0, [r7, #12]
 8003cf4:	60b9      	str	r1, [r7, #8]
 8003cf6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003d02:	2b01      	cmp	r3, #1
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003d06:	2302      	movs	r3, #2
 8003d08:	e0ae      	b.n	8003e68 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003d0a:	68fb      	ldr	r3, [r7, #12]
 8003d0c:	2201      	movs	r2, #1
 8003d0e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003d12:	687b      	ldr	r3, [r7, #4]
 8003d14:	2b0c      	cmp	r3, #12
 8003d16:	f200 809f 	bhi.w	8003e58 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003d1a:	a201      	add	r2, pc, #4	@ (adr r2, 8003d20 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003d1c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003d20:	08003d55 	.word	0x08003d55
 8003d24:	08003e59 	.word	0x08003e59
 8003d28:	08003e59 	.word	0x08003e59
 8003d2c:	08003e59 	.word	0x08003e59
 8003d30:	08003d95 	.word	0x08003d95
 8003d34:	08003e59 	.word	0x08003e59
 8003d38:	08003e59 	.word	0x08003e59
 8003d3c:	08003e59 	.word	0x08003e59
 8003d40:	08003dd7 	.word	0x08003dd7
 8003d44:	08003e59 	.word	0x08003e59
 8003d48:	08003e59 	.word	0x08003e59
 8003d4c:	08003e59 	.word	0x08003e59
 8003d50:	08003e17 	.word	0x08003e17
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	68b9      	ldr	r1, [r7, #8]
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	f000 f9de 	bl	800411c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d60:	68fb      	ldr	r3, [r7, #12]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	699a      	ldr	r2, [r3, #24]
 8003d66:	68fb      	ldr	r3, [r7, #12]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	f042 0208 	orr.w	r2, r2, #8
 8003d6e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	699a      	ldr	r2, [r3, #24]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f022 0204 	bic.w	r2, r2, #4
 8003d7e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	6999      	ldr	r1, [r3, #24]
 8003d86:	68bb      	ldr	r3, [r7, #8]
 8003d88:	691a      	ldr	r2, [r3, #16]
 8003d8a:	68fb      	ldr	r3, [r7, #12]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	430a      	orrs	r2, r1
 8003d90:	619a      	str	r2, [r3, #24]
      break;
 8003d92:	e064      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	681b      	ldr	r3, [r3, #0]
 8003d98:	68b9      	ldr	r1, [r7, #8]
 8003d9a:	4618      	mov	r0, r3
 8003d9c:	f000 fa24 	bl	80041e8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	699a      	ldr	r2, [r3, #24]
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003dae:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003db0:	68fb      	ldr	r3, [r7, #12]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	699a      	ldr	r2, [r3, #24]
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003dbe:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	6999      	ldr	r1, [r3, #24]
 8003dc6:	68bb      	ldr	r3, [r7, #8]
 8003dc8:	691b      	ldr	r3, [r3, #16]
 8003dca:	021a      	lsls	r2, r3, #8
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	681b      	ldr	r3, [r3, #0]
 8003dd0:	430a      	orrs	r2, r1
 8003dd2:	619a      	str	r2, [r3, #24]
      break;
 8003dd4:	e043      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	68b9      	ldr	r1, [r7, #8]
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f000 fa6d 	bl	80042bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003de2:	68fb      	ldr	r3, [r7, #12]
 8003de4:	681b      	ldr	r3, [r3, #0]
 8003de6:	69da      	ldr	r2, [r3, #28]
 8003de8:	68fb      	ldr	r3, [r7, #12]
 8003dea:	681b      	ldr	r3, [r3, #0]
 8003dec:	f042 0208 	orr.w	r2, r2, #8
 8003df0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003df2:	68fb      	ldr	r3, [r7, #12]
 8003df4:	681b      	ldr	r3, [r3, #0]
 8003df6:	69da      	ldr	r2, [r3, #28]
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	f022 0204 	bic.w	r2, r2, #4
 8003e00:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	69d9      	ldr	r1, [r3, #28]
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	691a      	ldr	r2, [r3, #16]
 8003e0c:	68fb      	ldr	r3, [r7, #12]
 8003e0e:	681b      	ldr	r3, [r3, #0]
 8003e10:	430a      	orrs	r2, r1
 8003e12:	61da      	str	r2, [r3, #28]
      break;
 8003e14:	e023      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	681b      	ldr	r3, [r3, #0]
 8003e1a:	68b9      	ldr	r1, [r7, #8]
 8003e1c:	4618      	mov	r0, r3
 8003e1e:	f000 fab7 	bl	8004390 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	69da      	ldr	r2, [r3, #28]
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003e30:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003e32:	68fb      	ldr	r3, [r7, #12]
 8003e34:	681b      	ldr	r3, [r3, #0]
 8003e36:	69da      	ldr	r2, [r3, #28]
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e40:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	69d9      	ldr	r1, [r3, #28]
 8003e48:	68bb      	ldr	r3, [r7, #8]
 8003e4a:	691b      	ldr	r3, [r3, #16]
 8003e4c:	021a      	lsls	r2, r3, #8
 8003e4e:	68fb      	ldr	r3, [r7, #12]
 8003e50:	681b      	ldr	r3, [r3, #0]
 8003e52:	430a      	orrs	r2, r1
 8003e54:	61da      	str	r2, [r3, #28]
      break;
 8003e56:	e002      	b.n	8003e5e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	75fb      	strb	r3, [r7, #23]
      break;
 8003e5c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e5e:	68fb      	ldr	r3, [r7, #12]
 8003e60:	2200      	movs	r2, #0
 8003e62:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e68:	4618      	mov	r0, r3
 8003e6a:	3718      	adds	r7, #24
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	bd80      	pop	{r7, pc}

08003e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e70:	b580      	push	{r7, lr}
 8003e72:	b084      	sub	sp, #16
 8003e74:	af00      	add	r7, sp, #0
 8003e76:	6078      	str	r0, [r7, #4]
 8003e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e7a:	2300      	movs	r3, #0
 8003e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e84:	2b01      	cmp	r3, #1
 8003e86:	d101      	bne.n	8003e8c <HAL_TIM_ConfigClockSource+0x1c>
 8003e88:	2302      	movs	r3, #2
 8003e8a:	e0b4      	b.n	8003ff6 <HAL_TIM_ConfigClockSource+0x186>
 8003e8c:	687b      	ldr	r3, [r7, #4]
 8003e8e:	2201      	movs	r2, #1
 8003e90:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	2202      	movs	r2, #2
 8003e98:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	689b      	ldr	r3, [r3, #8]
 8003ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003ea4:	68bb      	ldr	r3, [r7, #8]
 8003ea6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003eac:	68bb      	ldr	r3, [r7, #8]
 8003eae:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003eb4:	687b      	ldr	r3, [r7, #4]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	68ba      	ldr	r2, [r7, #8]
 8003eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003ebc:	683b      	ldr	r3, [r7, #0]
 8003ebe:	681b      	ldr	r3, [r3, #0]
 8003ec0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003ec4:	d03e      	beq.n	8003f44 <HAL_TIM_ConfigClockSource+0xd4>
 8003ec6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003eca:	f200 8087 	bhi.w	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ece:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003ed2:	f000 8086 	beq.w	8003fe2 <HAL_TIM_ConfigClockSource+0x172>
 8003ed6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003eda:	d87f      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003edc:	2b70      	cmp	r3, #112	@ 0x70
 8003ede:	d01a      	beq.n	8003f16 <HAL_TIM_ConfigClockSource+0xa6>
 8003ee0:	2b70      	cmp	r3, #112	@ 0x70
 8003ee2:	d87b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ee4:	2b60      	cmp	r3, #96	@ 0x60
 8003ee6:	d050      	beq.n	8003f8a <HAL_TIM_ConfigClockSource+0x11a>
 8003ee8:	2b60      	cmp	r3, #96	@ 0x60
 8003eea:	d877      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003eec:	2b50      	cmp	r3, #80	@ 0x50
 8003eee:	d03c      	beq.n	8003f6a <HAL_TIM_ConfigClockSource+0xfa>
 8003ef0:	2b50      	cmp	r3, #80	@ 0x50
 8003ef2:	d873      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003ef4:	2b40      	cmp	r3, #64	@ 0x40
 8003ef6:	d058      	beq.n	8003faa <HAL_TIM_ConfigClockSource+0x13a>
 8003ef8:	2b40      	cmp	r3, #64	@ 0x40
 8003efa:	d86f      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003efc:	2b30      	cmp	r3, #48	@ 0x30
 8003efe:	d064      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f00:	2b30      	cmp	r3, #48	@ 0x30
 8003f02:	d86b      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003f04:	2b20      	cmp	r3, #32
 8003f06:	d060      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f08:	2b20      	cmp	r3, #32
 8003f0a:	d867      	bhi.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
 8003f0c:	2b00      	cmp	r3, #0
 8003f0e:	d05c      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f10:	2b10      	cmp	r3, #16
 8003f12:	d05a      	beq.n	8003fca <HAL_TIM_ConfigClockSource+0x15a>
 8003f14:	e062      	b.n	8003fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f1a:	683b      	ldr	r3, [r7, #0]
 8003f1c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f1e:	683b      	ldr	r3, [r7, #0]
 8003f20:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f22:	683b      	ldr	r3, [r7, #0]
 8003f24:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f26:	f000 faf8 	bl	800451a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003f2a:	687b      	ldr	r3, [r7, #4]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	689b      	ldr	r3, [r3, #8]
 8003f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003f32:	68bb      	ldr	r3, [r7, #8]
 8003f34:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	609a      	str	r2, [r3, #8]
      break;
 8003f42:	e04f      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f48:	683b      	ldr	r3, [r7, #0]
 8003f4a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f4c:	683b      	ldr	r3, [r7, #0]
 8003f4e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f50:	683b      	ldr	r3, [r7, #0]
 8003f52:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f54:	f000 fae1 	bl	800451a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	689a      	ldr	r2, [r3, #8]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f66:	609a      	str	r2, [r3, #8]
      break;
 8003f68:	e03c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f6e:	683b      	ldr	r3, [r7, #0]
 8003f70:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f76:	461a      	mov	r2, r3
 8003f78:	f000 fa58 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	2150      	movs	r1, #80	@ 0x50
 8003f82:	4618      	mov	r0, r3
 8003f84:	f000 faaf 	bl	80044e6 <TIM_ITRx_SetConfig>
      break;
 8003f88:	e02c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f8e:	683b      	ldr	r3, [r7, #0]
 8003f90:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f96:	461a      	mov	r2, r3
 8003f98:	f000 fa76 	bl	8004488 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	2160      	movs	r1, #96	@ 0x60
 8003fa2:	4618      	mov	r0, r3
 8003fa4:	f000 fa9f 	bl	80044e6 <TIM_ITRx_SetConfig>
      break;
 8003fa8:	e01c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003fae:	683b      	ldr	r3, [r7, #0]
 8003fb0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003fb2:	683b      	ldr	r3, [r7, #0]
 8003fb4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003fb6:	461a      	mov	r2, r3
 8003fb8:	f000 fa38 	bl	800442c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	2140      	movs	r1, #64	@ 0x40
 8003fc2:	4618      	mov	r0, r3
 8003fc4:	f000 fa8f 	bl	80044e6 <TIM_ITRx_SetConfig>
      break;
 8003fc8:	e00c      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	683b      	ldr	r3, [r7, #0]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	4610      	mov	r0, r2
 8003fd6:	f000 fa86 	bl	80044e6 <TIM_ITRx_SetConfig>
      break;
 8003fda:	e003      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fdc:	2301      	movs	r3, #1
 8003fde:	73fb      	strb	r3, [r7, #15]
      break;
 8003fe0:	e000      	b.n	8003fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2201      	movs	r2, #1
 8003fe8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003ff6:	4618      	mov	r0, r3
 8003ff8:	3710      	adds	r7, #16
 8003ffa:	46bd      	mov	sp, r7
 8003ffc:	bd80      	pop	{r7, pc}

08003ffe <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003ffe:	b480      	push	{r7}
 8004000:	b083      	sub	sp, #12
 8004002:	af00      	add	r7, sp, #0
 8004004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8004006:	bf00      	nop
 8004008:	370c      	adds	r7, #12
 800400a:	46bd      	mov	sp, r7
 800400c:	bc80      	pop	{r7}
 800400e:	4770      	bx	lr

08004010 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8004010:	b480      	push	{r7}
 8004012:	b083      	sub	sp, #12
 8004014:	af00      	add	r7, sp, #0
 8004016:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004018:	bf00      	nop
 800401a:	370c      	adds	r7, #12
 800401c:	46bd      	mov	sp, r7
 800401e:	bc80      	pop	{r7}
 8004020:	4770      	bx	lr

08004022 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004022:	b480      	push	{r7}
 8004024:	b083      	sub	sp, #12
 8004026:	af00      	add	r7, sp, #0
 8004028:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800402a:	bf00      	nop
 800402c:	370c      	adds	r7, #12
 800402e:	46bd      	mov	sp, r7
 8004030:	bc80      	pop	{r7}
 8004032:	4770      	bx	lr

08004034 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004034:	b480      	push	{r7}
 8004036:	b083      	sub	sp, #12
 8004038:	af00      	add	r7, sp, #0
 800403a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800403c:	bf00      	nop
 800403e:	370c      	adds	r7, #12
 8004040:	46bd      	mov	sp, r7
 8004042:	bc80      	pop	{r7}
 8004044:	4770      	bx	lr

08004046 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8004046:	b480      	push	{r7}
 8004048:	b083      	sub	sp, #12
 800404a:	af00      	add	r7, sp, #0
 800404c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800404e:	bf00      	nop
 8004050:	370c      	adds	r7, #12
 8004052:	46bd      	mov	sp, r7
 8004054:	bc80      	pop	{r7}
 8004056:	4770      	bx	lr

08004058 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8004058:	b480      	push	{r7}
 800405a:	b085      	sub	sp, #20
 800405c:	af00      	add	r7, sp, #0
 800405e:	6078      	str	r0, [r7, #4]
 8004060:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004062:	687b      	ldr	r3, [r7, #4]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8004068:	687b      	ldr	r3, [r7, #4]
 800406a:	4a29      	ldr	r2, [pc, #164]	@ (8004110 <TIM_Base_SetConfig+0xb8>)
 800406c:	4293      	cmp	r3, r2
 800406e:	d00b      	beq.n	8004088 <TIM_Base_SetConfig+0x30>
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004076:	d007      	beq.n	8004088 <TIM_Base_SetConfig+0x30>
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	4a26      	ldr	r2, [pc, #152]	@ (8004114 <TIM_Base_SetConfig+0xbc>)
 800407c:	4293      	cmp	r3, r2
 800407e:	d003      	beq.n	8004088 <TIM_Base_SetConfig+0x30>
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	4a25      	ldr	r2, [pc, #148]	@ (8004118 <TIM_Base_SetConfig+0xc0>)
 8004084:	4293      	cmp	r3, r2
 8004086:	d108      	bne.n	800409a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800408e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004090:	683b      	ldr	r3, [r7, #0]
 8004092:	685b      	ldr	r3, [r3, #4]
 8004094:	68fa      	ldr	r2, [r7, #12]
 8004096:	4313      	orrs	r3, r2
 8004098:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	4a1c      	ldr	r2, [pc, #112]	@ (8004110 <TIM_Base_SetConfig+0xb8>)
 800409e:	4293      	cmp	r3, r2
 80040a0:	d00b      	beq.n	80040ba <TIM_Base_SetConfig+0x62>
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80040a8:	d007      	beq.n	80040ba <TIM_Base_SetConfig+0x62>
 80040aa:	687b      	ldr	r3, [r7, #4]
 80040ac:	4a19      	ldr	r2, [pc, #100]	@ (8004114 <TIM_Base_SetConfig+0xbc>)
 80040ae:	4293      	cmp	r3, r2
 80040b0:	d003      	beq.n	80040ba <TIM_Base_SetConfig+0x62>
 80040b2:	687b      	ldr	r3, [r7, #4]
 80040b4:	4a18      	ldr	r2, [pc, #96]	@ (8004118 <TIM_Base_SetConfig+0xc0>)
 80040b6:	4293      	cmp	r3, r2
 80040b8:	d108      	bne.n	80040cc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80040ba:	68fb      	ldr	r3, [r7, #12]
 80040bc:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80040c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	68fa      	ldr	r2, [r7, #12]
 80040c8:	4313      	orrs	r3, r2
 80040ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80040cc:	68fb      	ldr	r3, [r7, #12]
 80040ce:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80040d2:	683b      	ldr	r3, [r7, #0]
 80040d4:	695b      	ldr	r3, [r3, #20]
 80040d6:	4313      	orrs	r3, r2
 80040d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	68fa      	ldr	r2, [r7, #12]
 80040de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	689a      	ldr	r2, [r3, #8]
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	681a      	ldr	r2, [r3, #0]
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	4a07      	ldr	r2, [pc, #28]	@ (8004110 <TIM_Base_SetConfig+0xb8>)
 80040f4:	4293      	cmp	r3, r2
 80040f6:	d103      	bne.n	8004100 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040f8:	683b      	ldr	r3, [r7, #0]
 80040fa:	691a      	ldr	r2, [r3, #16]
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	2201      	movs	r2, #1
 8004104:	615a      	str	r2, [r3, #20]
}
 8004106:	bf00      	nop
 8004108:	3714      	adds	r7, #20
 800410a:	46bd      	mov	sp, r7
 800410c:	bc80      	pop	{r7}
 800410e:	4770      	bx	lr
 8004110:	40012c00 	.word	0x40012c00
 8004114:	40000400 	.word	0x40000400
 8004118:	40000800 	.word	0x40000800

0800411c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800411c:	b480      	push	{r7}
 800411e:	b087      	sub	sp, #28
 8004120:	af00      	add	r7, sp, #0
 8004122:	6078      	str	r0, [r7, #4]
 8004124:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a1b      	ldr	r3, [r3, #32]
 800412a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6a1b      	ldr	r3, [r3, #32]
 8004130:	f023 0201 	bic.w	r2, r3, #1
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004138:	687b      	ldr	r3, [r7, #4]
 800413a:	685b      	ldr	r3, [r3, #4]
 800413c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800413e:	687b      	ldr	r3, [r7, #4]
 8004140:	699b      	ldr	r3, [r3, #24]
 8004142:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004144:	68fb      	ldr	r3, [r7, #12]
 8004146:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800414a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800414c:	68fb      	ldr	r3, [r7, #12]
 800414e:	f023 0303 	bic.w	r3, r3, #3
 8004152:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004154:	683b      	ldr	r3, [r7, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68fa      	ldr	r2, [r7, #12]
 800415a:	4313      	orrs	r3, r2
 800415c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800415e:	697b      	ldr	r3, [r7, #20]
 8004160:	f023 0302 	bic.w	r3, r3, #2
 8004164:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004166:	683b      	ldr	r3, [r7, #0]
 8004168:	689b      	ldr	r3, [r3, #8]
 800416a:	697a      	ldr	r2, [r7, #20]
 800416c:	4313      	orrs	r3, r2
 800416e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	4a1c      	ldr	r2, [pc, #112]	@ (80041e4 <TIM_OC1_SetConfig+0xc8>)
 8004174:	4293      	cmp	r3, r2
 8004176:	d10c      	bne.n	8004192 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004178:	697b      	ldr	r3, [r7, #20]
 800417a:	f023 0308 	bic.w	r3, r3, #8
 800417e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004180:	683b      	ldr	r3, [r7, #0]
 8004182:	68db      	ldr	r3, [r3, #12]
 8004184:	697a      	ldr	r2, [r7, #20]
 8004186:	4313      	orrs	r3, r2
 8004188:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800418a:	697b      	ldr	r3, [r7, #20]
 800418c:	f023 0304 	bic.w	r3, r3, #4
 8004190:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	4a13      	ldr	r2, [pc, #76]	@ (80041e4 <TIM_OC1_SetConfig+0xc8>)
 8004196:	4293      	cmp	r3, r2
 8004198:	d111      	bne.n	80041be <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800419a:	693b      	ldr	r3, [r7, #16]
 800419c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80041a0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80041a2:	693b      	ldr	r3, [r7, #16]
 80041a4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80041a8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80041aa:	683b      	ldr	r3, [r7, #0]
 80041ac:	695b      	ldr	r3, [r3, #20]
 80041ae:	693a      	ldr	r2, [r7, #16]
 80041b0:	4313      	orrs	r3, r2
 80041b2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80041b4:	683b      	ldr	r3, [r7, #0]
 80041b6:	699b      	ldr	r3, [r3, #24]
 80041b8:	693a      	ldr	r2, [r7, #16]
 80041ba:	4313      	orrs	r3, r2
 80041bc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80041be:	687b      	ldr	r3, [r7, #4]
 80041c0:	693a      	ldr	r2, [r7, #16]
 80041c2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	68fa      	ldr	r2, [r7, #12]
 80041c8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80041ca:	683b      	ldr	r3, [r7, #0]
 80041cc:	685a      	ldr	r2, [r3, #4]
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	697a      	ldr	r2, [r7, #20]
 80041d6:	621a      	str	r2, [r3, #32]
}
 80041d8:	bf00      	nop
 80041da:	371c      	adds	r7, #28
 80041dc:	46bd      	mov	sp, r7
 80041de:	bc80      	pop	{r7}
 80041e0:	4770      	bx	lr
 80041e2:	bf00      	nop
 80041e4:	40012c00 	.word	0x40012c00

080041e8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041e8:	b480      	push	{r7}
 80041ea:	b087      	sub	sp, #28
 80041ec:	af00      	add	r7, sp, #0
 80041ee:	6078      	str	r0, [r7, #4]
 80041f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	6a1b      	ldr	r3, [r3, #32]
 80041f6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	6a1b      	ldr	r3, [r3, #32]
 80041fc:	f023 0210 	bic.w	r2, r3, #16
 8004200:	687b      	ldr	r3, [r7, #4]
 8004202:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	685b      	ldr	r3, [r3, #4]
 8004208:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	699b      	ldr	r3, [r3, #24]
 800420e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004216:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004218:	68fb      	ldr	r3, [r7, #12]
 800421a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800421e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004220:	683b      	ldr	r3, [r7, #0]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	021b      	lsls	r3, r3, #8
 8004226:	68fa      	ldr	r2, [r7, #12]
 8004228:	4313      	orrs	r3, r2
 800422a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800422c:	697b      	ldr	r3, [r7, #20]
 800422e:	f023 0320 	bic.w	r3, r3, #32
 8004232:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004234:	683b      	ldr	r3, [r7, #0]
 8004236:	689b      	ldr	r3, [r3, #8]
 8004238:	011b      	lsls	r3, r3, #4
 800423a:	697a      	ldr	r2, [r7, #20]
 800423c:	4313      	orrs	r3, r2
 800423e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	4a1d      	ldr	r2, [pc, #116]	@ (80042b8 <TIM_OC2_SetConfig+0xd0>)
 8004244:	4293      	cmp	r3, r2
 8004246:	d10d      	bne.n	8004264 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004248:	697b      	ldr	r3, [r7, #20]
 800424a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800424e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004250:	683b      	ldr	r3, [r7, #0]
 8004252:	68db      	ldr	r3, [r3, #12]
 8004254:	011b      	lsls	r3, r3, #4
 8004256:	697a      	ldr	r2, [r7, #20]
 8004258:	4313      	orrs	r3, r2
 800425a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800425c:	697b      	ldr	r3, [r7, #20]
 800425e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004262:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	4a14      	ldr	r2, [pc, #80]	@ (80042b8 <TIM_OC2_SetConfig+0xd0>)
 8004268:	4293      	cmp	r3, r2
 800426a:	d113      	bne.n	8004294 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800426c:	693b      	ldr	r3, [r7, #16]
 800426e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004272:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004274:	693b      	ldr	r3, [r7, #16]
 8004276:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800427a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800427c:	683b      	ldr	r3, [r7, #0]
 800427e:	695b      	ldr	r3, [r3, #20]
 8004280:	009b      	lsls	r3, r3, #2
 8004282:	693a      	ldr	r2, [r7, #16]
 8004284:	4313      	orrs	r3, r2
 8004286:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004288:	683b      	ldr	r3, [r7, #0]
 800428a:	699b      	ldr	r3, [r3, #24]
 800428c:	009b      	lsls	r3, r3, #2
 800428e:	693a      	ldr	r2, [r7, #16]
 8004290:	4313      	orrs	r3, r2
 8004292:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004294:	687b      	ldr	r3, [r7, #4]
 8004296:	693a      	ldr	r2, [r7, #16]
 8004298:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	68fa      	ldr	r2, [r7, #12]
 800429e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80042a0:	683b      	ldr	r3, [r7, #0]
 80042a2:	685a      	ldr	r2, [r3, #4]
 80042a4:	687b      	ldr	r3, [r7, #4]
 80042a6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	697a      	ldr	r2, [r7, #20]
 80042ac:	621a      	str	r2, [r3, #32]
}
 80042ae:	bf00      	nop
 80042b0:	371c      	adds	r7, #28
 80042b2:	46bd      	mov	sp, r7
 80042b4:	bc80      	pop	{r7}
 80042b6:	4770      	bx	lr
 80042b8:	40012c00 	.word	0x40012c00

080042bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80042bc:	b480      	push	{r7}
 80042be:	b087      	sub	sp, #28
 80042c0:	af00      	add	r7, sp, #0
 80042c2:	6078      	str	r0, [r7, #4]
 80042c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	6a1b      	ldr	r3, [r3, #32]
 80042ca:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6a1b      	ldr	r3, [r3, #32]
 80042d0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	685b      	ldr	r3, [r3, #4]
 80042dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	69db      	ldr	r3, [r3, #28]
 80042e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042e4:	68fb      	ldr	r3, [r7, #12]
 80042e6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f023 0303 	bic.w	r3, r3, #3
 80042f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042f4:	683b      	ldr	r3, [r7, #0]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	68fa      	ldr	r2, [r7, #12]
 80042fa:	4313      	orrs	r3, r2
 80042fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042fe:	697b      	ldr	r3, [r7, #20]
 8004300:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8004304:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004306:	683b      	ldr	r3, [r7, #0]
 8004308:	689b      	ldr	r3, [r3, #8]
 800430a:	021b      	lsls	r3, r3, #8
 800430c:	697a      	ldr	r2, [r7, #20]
 800430e:	4313      	orrs	r3, r2
 8004310:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	4a1d      	ldr	r2, [pc, #116]	@ (800438c <TIM_OC3_SetConfig+0xd0>)
 8004316:	4293      	cmp	r3, r2
 8004318:	d10d      	bne.n	8004336 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800431a:	697b      	ldr	r3, [r7, #20]
 800431c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8004320:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8004322:	683b      	ldr	r3, [r7, #0]
 8004324:	68db      	ldr	r3, [r3, #12]
 8004326:	021b      	lsls	r3, r3, #8
 8004328:	697a      	ldr	r2, [r7, #20]
 800432a:	4313      	orrs	r3, r2
 800432c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004334:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004336:	687b      	ldr	r3, [r7, #4]
 8004338:	4a14      	ldr	r2, [pc, #80]	@ (800438c <TIM_OC3_SetConfig+0xd0>)
 800433a:	4293      	cmp	r3, r2
 800433c:	d113      	bne.n	8004366 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800433e:	693b      	ldr	r3, [r7, #16]
 8004340:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004344:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004346:	693b      	ldr	r3, [r7, #16]
 8004348:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800434c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800434e:	683b      	ldr	r3, [r7, #0]
 8004350:	695b      	ldr	r3, [r3, #20]
 8004352:	011b      	lsls	r3, r3, #4
 8004354:	693a      	ldr	r2, [r7, #16]
 8004356:	4313      	orrs	r3, r2
 8004358:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800435a:	683b      	ldr	r3, [r7, #0]
 800435c:	699b      	ldr	r3, [r3, #24]
 800435e:	011b      	lsls	r3, r3, #4
 8004360:	693a      	ldr	r2, [r7, #16]
 8004362:	4313      	orrs	r3, r2
 8004364:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	693a      	ldr	r2, [r7, #16]
 800436a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	68fa      	ldr	r2, [r7, #12]
 8004370:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004372:	683b      	ldr	r3, [r7, #0]
 8004374:	685a      	ldr	r2, [r3, #4]
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800437a:	687b      	ldr	r3, [r7, #4]
 800437c:	697a      	ldr	r2, [r7, #20]
 800437e:	621a      	str	r2, [r3, #32]
}
 8004380:	bf00      	nop
 8004382:	371c      	adds	r7, #28
 8004384:	46bd      	mov	sp, r7
 8004386:	bc80      	pop	{r7}
 8004388:	4770      	bx	lr
 800438a:	bf00      	nop
 800438c:	40012c00 	.word	0x40012c00

08004390 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004390:	b480      	push	{r7}
 8004392:	b087      	sub	sp, #28
 8004394:	af00      	add	r7, sp, #0
 8004396:	6078      	str	r0, [r7, #4]
 8004398:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	6a1b      	ldr	r3, [r3, #32]
 800439e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	6a1b      	ldr	r3, [r3, #32]
 80043a4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80043a8:	687b      	ldr	r3, [r7, #4]
 80043aa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	685b      	ldr	r3, [r3, #4]
 80043b0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80043b2:	687b      	ldr	r3, [r7, #4]
 80043b4:	69db      	ldr	r3, [r3, #28]
 80043b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80043b8:	68fb      	ldr	r3, [r7, #12]
 80043ba:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80043be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80043c6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043c8:	683b      	ldr	r3, [r7, #0]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	021b      	lsls	r3, r3, #8
 80043ce:	68fa      	ldr	r2, [r7, #12]
 80043d0:	4313      	orrs	r3, r2
 80043d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80043d4:	693b      	ldr	r3, [r7, #16]
 80043d6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80043da:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043dc:	683b      	ldr	r3, [r7, #0]
 80043de:	689b      	ldr	r3, [r3, #8]
 80043e0:	031b      	lsls	r3, r3, #12
 80043e2:	693a      	ldr	r2, [r7, #16]
 80043e4:	4313      	orrs	r3, r2
 80043e6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043e8:	687b      	ldr	r3, [r7, #4]
 80043ea:	4a0f      	ldr	r2, [pc, #60]	@ (8004428 <TIM_OC4_SetConfig+0x98>)
 80043ec:	4293      	cmp	r3, r2
 80043ee:	d109      	bne.n	8004404 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043f0:	697b      	ldr	r3, [r7, #20]
 80043f2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043f6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043f8:	683b      	ldr	r3, [r7, #0]
 80043fa:	695b      	ldr	r3, [r3, #20]
 80043fc:	019b      	lsls	r3, r3, #6
 80043fe:	697a      	ldr	r2, [r7, #20]
 8004400:	4313      	orrs	r3, r2
 8004402:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004404:	687b      	ldr	r3, [r7, #4]
 8004406:	697a      	ldr	r2, [r7, #20]
 8004408:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	68fa      	ldr	r2, [r7, #12]
 800440e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8004410:	683b      	ldr	r3, [r7, #0]
 8004412:	685a      	ldr	r2, [r3, #4]
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004418:	687b      	ldr	r3, [r7, #4]
 800441a:	693a      	ldr	r2, [r7, #16]
 800441c:	621a      	str	r2, [r3, #32]
}
 800441e:	bf00      	nop
 8004420:	371c      	adds	r7, #28
 8004422:	46bd      	mov	sp, r7
 8004424:	bc80      	pop	{r7}
 8004426:	4770      	bx	lr
 8004428:	40012c00 	.word	0x40012c00

0800442c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800442c:	b480      	push	{r7}
 800442e:	b087      	sub	sp, #28
 8004430:	af00      	add	r7, sp, #0
 8004432:	60f8      	str	r0, [r7, #12]
 8004434:	60b9      	str	r1, [r7, #8]
 8004436:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	6a1b      	ldr	r3, [r3, #32]
 800443c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	6a1b      	ldr	r3, [r3, #32]
 8004442:	f023 0201 	bic.w	r2, r3, #1
 8004446:	68fb      	ldr	r3, [r7, #12]
 8004448:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800444a:	68fb      	ldr	r3, [r7, #12]
 800444c:	699b      	ldr	r3, [r3, #24]
 800444e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004450:	693b      	ldr	r3, [r7, #16]
 8004452:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8004456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004458:	687b      	ldr	r3, [r7, #4]
 800445a:	011b      	lsls	r3, r3, #4
 800445c:	693a      	ldr	r2, [r7, #16]
 800445e:	4313      	orrs	r3, r2
 8004460:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004462:	697b      	ldr	r3, [r7, #20]
 8004464:	f023 030a 	bic.w	r3, r3, #10
 8004468:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800446a:	697a      	ldr	r2, [r7, #20]
 800446c:	68bb      	ldr	r3, [r7, #8]
 800446e:	4313      	orrs	r3, r2
 8004470:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004472:	68fb      	ldr	r3, [r7, #12]
 8004474:	693a      	ldr	r2, [r7, #16]
 8004476:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004478:	68fb      	ldr	r3, [r7, #12]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	bc80      	pop	{r7}
 8004486:	4770      	bx	lr

08004488 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004488:	b480      	push	{r7}
 800448a:	b087      	sub	sp, #28
 800448c:	af00      	add	r7, sp, #0
 800448e:	60f8      	str	r0, [r7, #12]
 8004490:	60b9      	str	r1, [r7, #8]
 8004492:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	6a1b      	ldr	r3, [r3, #32]
 8004498:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f023 0210 	bic.w	r2, r3, #16
 80044a2:	68fb      	ldr	r3, [r7, #12]
 80044a4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80044a6:	68fb      	ldr	r3, [r7, #12]
 80044a8:	699b      	ldr	r3, [r3, #24]
 80044aa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80044ac:	693b      	ldr	r3, [r7, #16]
 80044ae:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80044b2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	031b      	lsls	r3, r3, #12
 80044b8:	693a      	ldr	r2, [r7, #16]
 80044ba:	4313      	orrs	r3, r2
 80044bc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80044be:	697b      	ldr	r3, [r7, #20]
 80044c0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80044c4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80044c6:	68bb      	ldr	r3, [r7, #8]
 80044c8:	011b      	lsls	r3, r3, #4
 80044ca:	697a      	ldr	r2, [r7, #20]
 80044cc:	4313      	orrs	r3, r2
 80044ce:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	693a      	ldr	r2, [r7, #16]
 80044d4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80044d6:	68fb      	ldr	r3, [r7, #12]
 80044d8:	697a      	ldr	r2, [r7, #20]
 80044da:	621a      	str	r2, [r3, #32]
}
 80044dc:	bf00      	nop
 80044de:	371c      	adds	r7, #28
 80044e0:	46bd      	mov	sp, r7
 80044e2:	bc80      	pop	{r7}
 80044e4:	4770      	bx	lr

080044e6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044e6:	b480      	push	{r7}
 80044e8:	b085      	sub	sp, #20
 80044ea:	af00      	add	r7, sp, #0
 80044ec:	6078      	str	r0, [r7, #4]
 80044ee:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	689b      	ldr	r3, [r3, #8]
 80044f4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044f6:	68fb      	ldr	r3, [r7, #12]
 80044f8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044fc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044fe:	683a      	ldr	r2, [r7, #0]
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	4313      	orrs	r3, r2
 8004504:	f043 0307 	orr.w	r3, r3, #7
 8004508:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	68fa      	ldr	r2, [r7, #12]
 800450e:	609a      	str	r2, [r3, #8]
}
 8004510:	bf00      	nop
 8004512:	3714      	adds	r7, #20
 8004514:	46bd      	mov	sp, r7
 8004516:	bc80      	pop	{r7}
 8004518:	4770      	bx	lr

0800451a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800451a:	b480      	push	{r7}
 800451c:	b087      	sub	sp, #28
 800451e:	af00      	add	r7, sp, #0
 8004520:	60f8      	str	r0, [r7, #12]
 8004522:	60b9      	str	r1, [r7, #8]
 8004524:	607a      	str	r2, [r7, #4]
 8004526:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	689b      	ldr	r3, [r3, #8]
 800452c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800452e:	697b      	ldr	r3, [r7, #20]
 8004530:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8004534:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004536:	683b      	ldr	r3, [r7, #0]
 8004538:	021a      	lsls	r2, r3, #8
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	431a      	orrs	r2, r3
 800453e:	68bb      	ldr	r3, [r7, #8]
 8004540:	4313      	orrs	r3, r2
 8004542:	697a      	ldr	r2, [r7, #20]
 8004544:	4313      	orrs	r3, r2
 8004546:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	697a      	ldr	r2, [r7, #20]
 800454c:	609a      	str	r2, [r3, #8]
}
 800454e:	bf00      	nop
 8004550:	371c      	adds	r7, #28
 8004552:	46bd      	mov	sp, r7
 8004554:	bc80      	pop	{r7}
 8004556:	4770      	bx	lr

08004558 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004558:	b480      	push	{r7}
 800455a:	b087      	sub	sp, #28
 800455c:	af00      	add	r7, sp, #0
 800455e:	60f8      	str	r0, [r7, #12]
 8004560:	60b9      	str	r1, [r7, #8]
 8004562:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	f003 031f 	and.w	r3, r3, #31
 800456a:	2201      	movs	r2, #1
 800456c:	fa02 f303 	lsl.w	r3, r2, r3
 8004570:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	6a1a      	ldr	r2, [r3, #32]
 8004576:	697b      	ldr	r3, [r7, #20]
 8004578:	43db      	mvns	r3, r3
 800457a:	401a      	ands	r2, r3
 800457c:	68fb      	ldr	r3, [r7, #12]
 800457e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	6a1a      	ldr	r2, [r3, #32]
 8004584:	68bb      	ldr	r3, [r7, #8]
 8004586:	f003 031f 	and.w	r3, r3, #31
 800458a:	6879      	ldr	r1, [r7, #4]
 800458c:	fa01 f303 	lsl.w	r3, r1, r3
 8004590:	431a      	orrs	r2, r3
 8004592:	68fb      	ldr	r3, [r7, #12]
 8004594:	621a      	str	r2, [r3, #32]
}
 8004596:	bf00      	nop
 8004598:	371c      	adds	r7, #28
 800459a:	46bd      	mov	sp, r7
 800459c:	bc80      	pop	{r7}
 800459e:	4770      	bx	lr

080045a0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 80045a0:	b480      	push	{r7}
 80045a2:	b085      	sub	sp, #20
 80045a4:	af00      	add	r7, sp, #0
 80045a6:	6078      	str	r0, [r7, #4]
 80045a8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80045b0:	2b01      	cmp	r3, #1
 80045b2:	d101      	bne.n	80045b8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80045b4:	2302      	movs	r3, #2
 80045b6:	e046      	b.n	8004646 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 80045b8:	687b      	ldr	r3, [r7, #4]
 80045ba:	2201      	movs	r2, #1
 80045bc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	2202      	movs	r2, #2
 80045c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	681b      	ldr	r3, [r3, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	689b      	ldr	r3, [r3, #8]
 80045d6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045de:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045e0:	683b      	ldr	r3, [r7, #0]
 80045e2:	681b      	ldr	r3, [r3, #0]
 80045e4:	68fa      	ldr	r2, [r7, #12]
 80045e6:	4313      	orrs	r3, r2
 80045e8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	68fa      	ldr	r2, [r7, #12]
 80045f0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a16      	ldr	r2, [pc, #88]	@ (8004650 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045f8:	4293      	cmp	r3, r2
 80045fa:	d00e      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045fc:	687b      	ldr	r3, [r7, #4]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8004604:	d009      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	4a12      	ldr	r2, [pc, #72]	@ (8004654 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 800460c:	4293      	cmp	r3, r2
 800460e:	d004      	beq.n	800461a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	681b      	ldr	r3, [r3, #0]
 8004614:	4a10      	ldr	r2, [pc, #64]	@ (8004658 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8004616:	4293      	cmp	r3, r2
 8004618:	d10c      	bne.n	8004634 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800461a:	68bb      	ldr	r3, [r7, #8]
 800461c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004620:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004622:	683b      	ldr	r3, [r7, #0]
 8004624:	685b      	ldr	r3, [r3, #4]
 8004626:	68ba      	ldr	r2, [r7, #8]
 8004628:	4313      	orrs	r3, r2
 800462a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	68ba      	ldr	r2, [r7, #8]
 8004632:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	2201      	movs	r2, #1
 8004638:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800463c:	687b      	ldr	r3, [r7, #4]
 800463e:	2200      	movs	r2, #0
 8004640:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004644:	2300      	movs	r3, #0
}
 8004646:	4618      	mov	r0, r3
 8004648:	3714      	adds	r7, #20
 800464a:	46bd      	mov	sp, r7
 800464c:	bc80      	pop	{r7}
 800464e:	4770      	bx	lr
 8004650:	40012c00 	.word	0x40012c00
 8004654:	40000400 	.word	0x40000400
 8004658:	40000800 	.word	0x40000800

0800465c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800465c:	b480      	push	{r7}
 800465e:	b083      	sub	sp, #12
 8004660:	af00      	add	r7, sp, #0
 8004662:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004664:	bf00      	nop
 8004666:	370c      	adds	r7, #12
 8004668:	46bd      	mov	sp, r7
 800466a:	bc80      	pop	{r7}
 800466c:	4770      	bx	lr

0800466e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800466e:	b480      	push	{r7}
 8004670:	b083      	sub	sp, #12
 8004672:	af00      	add	r7, sp, #0
 8004674:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004676:	bf00      	nop
 8004678:	370c      	adds	r7, #12
 800467a:	46bd      	mov	sp, r7
 800467c:	bc80      	pop	{r7}
 800467e:	4770      	bx	lr

08004680 <rand>:
 8004680:	4b16      	ldr	r3, [pc, #88]	@ (80046dc <rand+0x5c>)
 8004682:	b510      	push	{r4, lr}
 8004684:	681c      	ldr	r4, [r3, #0]
 8004686:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 8004688:	b9b3      	cbnz	r3, 80046b8 <rand+0x38>
 800468a:	2018      	movs	r0, #24
 800468c:	f000 fa1e 	bl	8004acc <malloc>
 8004690:	4602      	mov	r2, r0
 8004692:	6320      	str	r0, [r4, #48]	@ 0x30
 8004694:	b920      	cbnz	r0, 80046a0 <rand+0x20>
 8004696:	2152      	movs	r1, #82	@ 0x52
 8004698:	4b11      	ldr	r3, [pc, #68]	@ (80046e0 <rand+0x60>)
 800469a:	4812      	ldr	r0, [pc, #72]	@ (80046e4 <rand+0x64>)
 800469c:	f000 f9b0 	bl	8004a00 <__assert_func>
 80046a0:	4911      	ldr	r1, [pc, #68]	@ (80046e8 <rand+0x68>)
 80046a2:	4b12      	ldr	r3, [pc, #72]	@ (80046ec <rand+0x6c>)
 80046a4:	e9c0 1300 	strd	r1, r3, [r0]
 80046a8:	4b11      	ldr	r3, [pc, #68]	@ (80046f0 <rand+0x70>)
 80046aa:	2100      	movs	r1, #0
 80046ac:	6083      	str	r3, [r0, #8]
 80046ae:	230b      	movs	r3, #11
 80046b0:	8183      	strh	r3, [r0, #12]
 80046b2:	2001      	movs	r0, #1
 80046b4:	e9c2 0104 	strd	r0, r1, [r2, #16]
 80046b8:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 80046ba:	480e      	ldr	r0, [pc, #56]	@ (80046f4 <rand+0x74>)
 80046bc:	690b      	ldr	r3, [r1, #16]
 80046be:	694c      	ldr	r4, [r1, #20]
 80046c0:	4358      	muls	r0, r3
 80046c2:	4a0d      	ldr	r2, [pc, #52]	@ (80046f8 <rand+0x78>)
 80046c4:	fb02 0004 	mla	r0, r2, r4, r0
 80046c8:	fba3 3202 	umull	r3, r2, r3, r2
 80046cc:	3301      	adds	r3, #1
 80046ce:	eb40 0002 	adc.w	r0, r0, r2
 80046d2:	e9c1 3004 	strd	r3, r0, [r1, #16]
 80046d6:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 80046da:	bd10      	pop	{r4, pc}
 80046dc:	20000040 	.word	0x20000040
 80046e0:	080057e6 	.word	0x080057e6
 80046e4:	080057fd 	.word	0x080057fd
 80046e8:	abcd330e 	.word	0xabcd330e
 80046ec:	e66d1234 	.word	0xe66d1234
 80046f0:	0005deec 	.word	0x0005deec
 80046f4:	5851f42d 	.word	0x5851f42d
 80046f8:	4c957f2d 	.word	0x4c957f2d

080046fc <std>:
 80046fc:	2300      	movs	r3, #0
 80046fe:	b510      	push	{r4, lr}
 8004700:	4604      	mov	r4, r0
 8004702:	e9c0 3300 	strd	r3, r3, [r0]
 8004706:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800470a:	6083      	str	r3, [r0, #8]
 800470c:	8181      	strh	r1, [r0, #12]
 800470e:	6643      	str	r3, [r0, #100]	@ 0x64
 8004710:	81c2      	strh	r2, [r0, #14]
 8004712:	6183      	str	r3, [r0, #24]
 8004714:	4619      	mov	r1, r3
 8004716:	2208      	movs	r2, #8
 8004718:	305c      	adds	r0, #92	@ 0x5c
 800471a:	f000 f8f4 	bl	8004906 <memset>
 800471e:	4b0d      	ldr	r3, [pc, #52]	@ (8004754 <std+0x58>)
 8004720:	6224      	str	r4, [r4, #32]
 8004722:	6263      	str	r3, [r4, #36]	@ 0x24
 8004724:	4b0c      	ldr	r3, [pc, #48]	@ (8004758 <std+0x5c>)
 8004726:	62a3      	str	r3, [r4, #40]	@ 0x28
 8004728:	4b0c      	ldr	r3, [pc, #48]	@ (800475c <std+0x60>)
 800472a:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800472c:	4b0c      	ldr	r3, [pc, #48]	@ (8004760 <std+0x64>)
 800472e:	6323      	str	r3, [r4, #48]	@ 0x30
 8004730:	4b0c      	ldr	r3, [pc, #48]	@ (8004764 <std+0x68>)
 8004732:	429c      	cmp	r4, r3
 8004734:	d006      	beq.n	8004744 <std+0x48>
 8004736:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800473a:	4294      	cmp	r4, r2
 800473c:	d002      	beq.n	8004744 <std+0x48>
 800473e:	33d0      	adds	r3, #208	@ 0xd0
 8004740:	429c      	cmp	r4, r3
 8004742:	d105      	bne.n	8004750 <std+0x54>
 8004744:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8004748:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800474c:	f000 b954 	b.w	80049f8 <__retarget_lock_init_recursive>
 8004750:	bd10      	pop	{r4, pc}
 8004752:	bf00      	nop
 8004754:	08004881 	.word	0x08004881
 8004758:	080048a3 	.word	0x080048a3
 800475c:	080048db 	.word	0x080048db
 8004760:	080048ff 	.word	0x080048ff
 8004764:	200012e0 	.word	0x200012e0

08004768 <stdio_exit_handler>:
 8004768:	4a02      	ldr	r2, [pc, #8]	@ (8004774 <stdio_exit_handler+0xc>)
 800476a:	4903      	ldr	r1, [pc, #12]	@ (8004778 <stdio_exit_handler+0x10>)
 800476c:	4803      	ldr	r0, [pc, #12]	@ (800477c <stdio_exit_handler+0x14>)
 800476e:	f000 b869 	b.w	8004844 <_fwalk_sglue>
 8004772:	bf00      	nop
 8004774:	20000034 	.word	0x20000034
 8004778:	08004d39 	.word	0x08004d39
 800477c:	20000044 	.word	0x20000044

08004780 <cleanup_stdio>:
 8004780:	6841      	ldr	r1, [r0, #4]
 8004782:	4b0c      	ldr	r3, [pc, #48]	@ (80047b4 <cleanup_stdio+0x34>)
 8004784:	b510      	push	{r4, lr}
 8004786:	4299      	cmp	r1, r3
 8004788:	4604      	mov	r4, r0
 800478a:	d001      	beq.n	8004790 <cleanup_stdio+0x10>
 800478c:	f000 fad4 	bl	8004d38 <_fflush_r>
 8004790:	68a1      	ldr	r1, [r4, #8]
 8004792:	4b09      	ldr	r3, [pc, #36]	@ (80047b8 <cleanup_stdio+0x38>)
 8004794:	4299      	cmp	r1, r3
 8004796:	d002      	beq.n	800479e <cleanup_stdio+0x1e>
 8004798:	4620      	mov	r0, r4
 800479a:	f000 facd 	bl	8004d38 <_fflush_r>
 800479e:	68e1      	ldr	r1, [r4, #12]
 80047a0:	4b06      	ldr	r3, [pc, #24]	@ (80047bc <cleanup_stdio+0x3c>)
 80047a2:	4299      	cmp	r1, r3
 80047a4:	d004      	beq.n	80047b0 <cleanup_stdio+0x30>
 80047a6:	4620      	mov	r0, r4
 80047a8:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ac:	f000 bac4 	b.w	8004d38 <_fflush_r>
 80047b0:	bd10      	pop	{r4, pc}
 80047b2:	bf00      	nop
 80047b4:	200012e0 	.word	0x200012e0
 80047b8:	20001348 	.word	0x20001348
 80047bc:	200013b0 	.word	0x200013b0

080047c0 <global_stdio_init.part.0>:
 80047c0:	b510      	push	{r4, lr}
 80047c2:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <global_stdio_init.part.0+0x30>)
 80047c4:	4c0b      	ldr	r4, [pc, #44]	@ (80047f4 <global_stdio_init.part.0+0x34>)
 80047c6:	4a0c      	ldr	r2, [pc, #48]	@ (80047f8 <global_stdio_init.part.0+0x38>)
 80047c8:	4620      	mov	r0, r4
 80047ca:	601a      	str	r2, [r3, #0]
 80047cc:	2104      	movs	r1, #4
 80047ce:	2200      	movs	r2, #0
 80047d0:	f7ff ff94 	bl	80046fc <std>
 80047d4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80047d8:	2201      	movs	r2, #1
 80047da:	2109      	movs	r1, #9
 80047dc:	f7ff ff8e 	bl	80046fc <std>
 80047e0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047e4:	2202      	movs	r2, #2
 80047e6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ea:	2112      	movs	r1, #18
 80047ec:	f7ff bf86 	b.w	80046fc <std>
 80047f0:	20001418 	.word	0x20001418
 80047f4:	200012e0 	.word	0x200012e0
 80047f8:	08004769 	.word	0x08004769

080047fc <__sfp_lock_acquire>:
 80047fc:	4801      	ldr	r0, [pc, #4]	@ (8004804 <__sfp_lock_acquire+0x8>)
 80047fe:	f000 b8fc 	b.w	80049fa <__retarget_lock_acquire_recursive>
 8004802:	bf00      	nop
 8004804:	20001421 	.word	0x20001421

08004808 <__sfp_lock_release>:
 8004808:	4801      	ldr	r0, [pc, #4]	@ (8004810 <__sfp_lock_release+0x8>)
 800480a:	f000 b8f7 	b.w	80049fc <__retarget_lock_release_recursive>
 800480e:	bf00      	nop
 8004810:	20001421 	.word	0x20001421

08004814 <__sinit>:
 8004814:	b510      	push	{r4, lr}
 8004816:	4604      	mov	r4, r0
 8004818:	f7ff fff0 	bl	80047fc <__sfp_lock_acquire>
 800481c:	6a23      	ldr	r3, [r4, #32]
 800481e:	b11b      	cbz	r3, 8004828 <__sinit+0x14>
 8004820:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004824:	f7ff bff0 	b.w	8004808 <__sfp_lock_release>
 8004828:	4b04      	ldr	r3, [pc, #16]	@ (800483c <__sinit+0x28>)
 800482a:	6223      	str	r3, [r4, #32]
 800482c:	4b04      	ldr	r3, [pc, #16]	@ (8004840 <__sinit+0x2c>)
 800482e:	681b      	ldr	r3, [r3, #0]
 8004830:	2b00      	cmp	r3, #0
 8004832:	d1f5      	bne.n	8004820 <__sinit+0xc>
 8004834:	f7ff ffc4 	bl	80047c0 <global_stdio_init.part.0>
 8004838:	e7f2      	b.n	8004820 <__sinit+0xc>
 800483a:	bf00      	nop
 800483c:	08004781 	.word	0x08004781
 8004840:	20001418 	.word	0x20001418

08004844 <_fwalk_sglue>:
 8004844:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004848:	4607      	mov	r7, r0
 800484a:	4688      	mov	r8, r1
 800484c:	4614      	mov	r4, r2
 800484e:	2600      	movs	r6, #0
 8004850:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004854:	f1b9 0901 	subs.w	r9, r9, #1
 8004858:	d505      	bpl.n	8004866 <_fwalk_sglue+0x22>
 800485a:	6824      	ldr	r4, [r4, #0]
 800485c:	2c00      	cmp	r4, #0
 800485e:	d1f7      	bne.n	8004850 <_fwalk_sglue+0xc>
 8004860:	4630      	mov	r0, r6
 8004862:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004866:	89ab      	ldrh	r3, [r5, #12]
 8004868:	2b01      	cmp	r3, #1
 800486a:	d907      	bls.n	800487c <_fwalk_sglue+0x38>
 800486c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004870:	3301      	adds	r3, #1
 8004872:	d003      	beq.n	800487c <_fwalk_sglue+0x38>
 8004874:	4629      	mov	r1, r5
 8004876:	4638      	mov	r0, r7
 8004878:	47c0      	blx	r8
 800487a:	4306      	orrs	r6, r0
 800487c:	3568      	adds	r5, #104	@ 0x68
 800487e:	e7e9      	b.n	8004854 <_fwalk_sglue+0x10>

08004880 <__sread>:
 8004880:	b510      	push	{r4, lr}
 8004882:	460c      	mov	r4, r1
 8004884:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004888:	f000 f868 	bl	800495c <_read_r>
 800488c:	2800      	cmp	r0, #0
 800488e:	bfab      	itete	ge
 8004890:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004892:	89a3      	ldrhlt	r3, [r4, #12]
 8004894:	181b      	addge	r3, r3, r0
 8004896:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800489a:	bfac      	ite	ge
 800489c:	6563      	strge	r3, [r4, #84]	@ 0x54
 800489e:	81a3      	strhlt	r3, [r4, #12]
 80048a0:	bd10      	pop	{r4, pc}

080048a2 <__swrite>:
 80048a2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80048a6:	461f      	mov	r7, r3
 80048a8:	898b      	ldrh	r3, [r1, #12]
 80048aa:	4605      	mov	r5, r0
 80048ac:	05db      	lsls	r3, r3, #23
 80048ae:	460c      	mov	r4, r1
 80048b0:	4616      	mov	r6, r2
 80048b2:	d505      	bpl.n	80048c0 <__swrite+0x1e>
 80048b4:	2302      	movs	r3, #2
 80048b6:	2200      	movs	r2, #0
 80048b8:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048bc:	f000 f83c 	bl	8004938 <_lseek_r>
 80048c0:	89a3      	ldrh	r3, [r4, #12]
 80048c2:	4632      	mov	r2, r6
 80048c4:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80048c8:	81a3      	strh	r3, [r4, #12]
 80048ca:	4628      	mov	r0, r5
 80048cc:	463b      	mov	r3, r7
 80048ce:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80048d2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80048d6:	f000 b853 	b.w	8004980 <_write_r>

080048da <__sseek>:
 80048da:	b510      	push	{r4, lr}
 80048dc:	460c      	mov	r4, r1
 80048de:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048e2:	f000 f829 	bl	8004938 <_lseek_r>
 80048e6:	1c43      	adds	r3, r0, #1
 80048e8:	89a3      	ldrh	r3, [r4, #12]
 80048ea:	bf15      	itete	ne
 80048ec:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048ee:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048f2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048f6:	81a3      	strheq	r3, [r4, #12]
 80048f8:	bf18      	it	ne
 80048fa:	81a3      	strhne	r3, [r4, #12]
 80048fc:	bd10      	pop	{r4, pc}

080048fe <__sclose>:
 80048fe:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004902:	f000 b809 	b.w	8004918 <_close_r>

08004906 <memset>:
 8004906:	4603      	mov	r3, r0
 8004908:	4402      	add	r2, r0
 800490a:	4293      	cmp	r3, r2
 800490c:	d100      	bne.n	8004910 <memset+0xa>
 800490e:	4770      	bx	lr
 8004910:	f803 1b01 	strb.w	r1, [r3], #1
 8004914:	e7f9      	b.n	800490a <memset+0x4>
	...

08004918 <_close_r>:
 8004918:	b538      	push	{r3, r4, r5, lr}
 800491a:	2300      	movs	r3, #0
 800491c:	4d05      	ldr	r5, [pc, #20]	@ (8004934 <_close_r+0x1c>)
 800491e:	4604      	mov	r4, r0
 8004920:	4608      	mov	r0, r1
 8004922:	602b      	str	r3, [r5, #0]
 8004924:	f7fd ff25 	bl	8002772 <_close>
 8004928:	1c43      	adds	r3, r0, #1
 800492a:	d102      	bne.n	8004932 <_close_r+0x1a>
 800492c:	682b      	ldr	r3, [r5, #0]
 800492e:	b103      	cbz	r3, 8004932 <_close_r+0x1a>
 8004930:	6023      	str	r3, [r4, #0]
 8004932:	bd38      	pop	{r3, r4, r5, pc}
 8004934:	2000141c 	.word	0x2000141c

08004938 <_lseek_r>:
 8004938:	b538      	push	{r3, r4, r5, lr}
 800493a:	4604      	mov	r4, r0
 800493c:	4608      	mov	r0, r1
 800493e:	4611      	mov	r1, r2
 8004940:	2200      	movs	r2, #0
 8004942:	4d05      	ldr	r5, [pc, #20]	@ (8004958 <_lseek_r+0x20>)
 8004944:	602a      	str	r2, [r5, #0]
 8004946:	461a      	mov	r2, r3
 8004948:	f7fd ff37 	bl	80027ba <_lseek>
 800494c:	1c43      	adds	r3, r0, #1
 800494e:	d102      	bne.n	8004956 <_lseek_r+0x1e>
 8004950:	682b      	ldr	r3, [r5, #0]
 8004952:	b103      	cbz	r3, 8004956 <_lseek_r+0x1e>
 8004954:	6023      	str	r3, [r4, #0]
 8004956:	bd38      	pop	{r3, r4, r5, pc}
 8004958:	2000141c 	.word	0x2000141c

0800495c <_read_r>:
 800495c:	b538      	push	{r3, r4, r5, lr}
 800495e:	4604      	mov	r4, r0
 8004960:	4608      	mov	r0, r1
 8004962:	4611      	mov	r1, r2
 8004964:	2200      	movs	r2, #0
 8004966:	4d05      	ldr	r5, [pc, #20]	@ (800497c <_read_r+0x20>)
 8004968:	602a      	str	r2, [r5, #0]
 800496a:	461a      	mov	r2, r3
 800496c:	f7fd fec8 	bl	8002700 <_read>
 8004970:	1c43      	adds	r3, r0, #1
 8004972:	d102      	bne.n	800497a <_read_r+0x1e>
 8004974:	682b      	ldr	r3, [r5, #0]
 8004976:	b103      	cbz	r3, 800497a <_read_r+0x1e>
 8004978:	6023      	str	r3, [r4, #0]
 800497a:	bd38      	pop	{r3, r4, r5, pc}
 800497c:	2000141c 	.word	0x2000141c

08004980 <_write_r>:
 8004980:	b538      	push	{r3, r4, r5, lr}
 8004982:	4604      	mov	r4, r0
 8004984:	4608      	mov	r0, r1
 8004986:	4611      	mov	r1, r2
 8004988:	2200      	movs	r2, #0
 800498a:	4d05      	ldr	r5, [pc, #20]	@ (80049a0 <_write_r+0x20>)
 800498c:	602a      	str	r2, [r5, #0]
 800498e:	461a      	mov	r2, r3
 8004990:	f7fd fed3 	bl	800273a <_write>
 8004994:	1c43      	adds	r3, r0, #1
 8004996:	d102      	bne.n	800499e <_write_r+0x1e>
 8004998:	682b      	ldr	r3, [r5, #0]
 800499a:	b103      	cbz	r3, 800499e <_write_r+0x1e>
 800499c:	6023      	str	r3, [r4, #0]
 800499e:	bd38      	pop	{r3, r4, r5, pc}
 80049a0:	2000141c 	.word	0x2000141c

080049a4 <__errno>:
 80049a4:	4b01      	ldr	r3, [pc, #4]	@ (80049ac <__errno+0x8>)
 80049a6:	6818      	ldr	r0, [r3, #0]
 80049a8:	4770      	bx	lr
 80049aa:	bf00      	nop
 80049ac:	20000040 	.word	0x20000040

080049b0 <__libc_init_array>:
 80049b0:	b570      	push	{r4, r5, r6, lr}
 80049b2:	2600      	movs	r6, #0
 80049b4:	4d0c      	ldr	r5, [pc, #48]	@ (80049e8 <__libc_init_array+0x38>)
 80049b6:	4c0d      	ldr	r4, [pc, #52]	@ (80049ec <__libc_init_array+0x3c>)
 80049b8:	1b64      	subs	r4, r4, r5
 80049ba:	10a4      	asrs	r4, r4, #2
 80049bc:	42a6      	cmp	r6, r4
 80049be:	d109      	bne.n	80049d4 <__libc_init_array+0x24>
 80049c0:	f000 fe46 	bl	8005650 <_init>
 80049c4:	2600      	movs	r6, #0
 80049c6:	4d0a      	ldr	r5, [pc, #40]	@ (80049f0 <__libc_init_array+0x40>)
 80049c8:	4c0a      	ldr	r4, [pc, #40]	@ (80049f4 <__libc_init_array+0x44>)
 80049ca:	1b64      	subs	r4, r4, r5
 80049cc:	10a4      	asrs	r4, r4, #2
 80049ce:	42a6      	cmp	r6, r4
 80049d0:	d105      	bne.n	80049de <__libc_init_array+0x2e>
 80049d2:	bd70      	pop	{r4, r5, r6, pc}
 80049d4:	f855 3b04 	ldr.w	r3, [r5], #4
 80049d8:	4798      	blx	r3
 80049da:	3601      	adds	r6, #1
 80049dc:	e7ee      	b.n	80049bc <__libc_init_array+0xc>
 80049de:	f855 3b04 	ldr.w	r3, [r5], #4
 80049e2:	4798      	blx	r3
 80049e4:	3601      	adds	r6, #1
 80049e6:	e7f2      	b.n	80049ce <__libc_init_array+0x1e>
 80049e8:	080058c4 	.word	0x080058c4
 80049ec:	080058c4 	.word	0x080058c4
 80049f0:	080058c4 	.word	0x080058c4
 80049f4:	080058c8 	.word	0x080058c8

080049f8 <__retarget_lock_init_recursive>:
 80049f8:	4770      	bx	lr

080049fa <__retarget_lock_acquire_recursive>:
 80049fa:	4770      	bx	lr

080049fc <__retarget_lock_release_recursive>:
 80049fc:	4770      	bx	lr
	...

08004a00 <__assert_func>:
 8004a00:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8004a02:	4614      	mov	r4, r2
 8004a04:	461a      	mov	r2, r3
 8004a06:	4b09      	ldr	r3, [pc, #36]	@ (8004a2c <__assert_func+0x2c>)
 8004a08:	4605      	mov	r5, r0
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	68d8      	ldr	r0, [r3, #12]
 8004a0e:	b954      	cbnz	r4, 8004a26 <__assert_func+0x26>
 8004a10:	4b07      	ldr	r3, [pc, #28]	@ (8004a30 <__assert_func+0x30>)
 8004a12:	461c      	mov	r4, r3
 8004a14:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8004a18:	9100      	str	r1, [sp, #0]
 8004a1a:	462b      	mov	r3, r5
 8004a1c:	4905      	ldr	r1, [pc, #20]	@ (8004a34 <__assert_func+0x34>)
 8004a1e:	f000 f9b3 	bl	8004d88 <fiprintf>
 8004a22:	f000 f9d3 	bl	8004dcc <abort>
 8004a26:	4b04      	ldr	r3, [pc, #16]	@ (8004a38 <__assert_func+0x38>)
 8004a28:	e7f4      	b.n	8004a14 <__assert_func+0x14>
 8004a2a:	bf00      	nop
 8004a2c:	20000040 	.word	0x20000040
 8004a30:	08005890 	.word	0x08005890
 8004a34:	08005862 	.word	0x08005862
 8004a38:	08005855 	.word	0x08005855

08004a3c <_free_r>:
 8004a3c:	b538      	push	{r3, r4, r5, lr}
 8004a3e:	4605      	mov	r5, r0
 8004a40:	2900      	cmp	r1, #0
 8004a42:	d040      	beq.n	8004ac6 <_free_r+0x8a>
 8004a44:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a48:	1f0c      	subs	r4, r1, #4
 8004a4a:	2b00      	cmp	r3, #0
 8004a4c:	bfb8      	it	lt
 8004a4e:	18e4      	addlt	r4, r4, r3
 8004a50:	f000 f8e6 	bl	8004c20 <__malloc_lock>
 8004a54:	4a1c      	ldr	r2, [pc, #112]	@ (8004ac8 <_free_r+0x8c>)
 8004a56:	6813      	ldr	r3, [r2, #0]
 8004a58:	b933      	cbnz	r3, 8004a68 <_free_r+0x2c>
 8004a5a:	6063      	str	r3, [r4, #4]
 8004a5c:	6014      	str	r4, [r2, #0]
 8004a5e:	4628      	mov	r0, r5
 8004a60:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a64:	f000 b8e2 	b.w	8004c2c <__malloc_unlock>
 8004a68:	42a3      	cmp	r3, r4
 8004a6a:	d908      	bls.n	8004a7e <_free_r+0x42>
 8004a6c:	6820      	ldr	r0, [r4, #0]
 8004a6e:	1821      	adds	r1, r4, r0
 8004a70:	428b      	cmp	r3, r1
 8004a72:	bf01      	itttt	eq
 8004a74:	6819      	ldreq	r1, [r3, #0]
 8004a76:	685b      	ldreq	r3, [r3, #4]
 8004a78:	1809      	addeq	r1, r1, r0
 8004a7a:	6021      	streq	r1, [r4, #0]
 8004a7c:	e7ed      	b.n	8004a5a <_free_r+0x1e>
 8004a7e:	461a      	mov	r2, r3
 8004a80:	685b      	ldr	r3, [r3, #4]
 8004a82:	b10b      	cbz	r3, 8004a88 <_free_r+0x4c>
 8004a84:	42a3      	cmp	r3, r4
 8004a86:	d9fa      	bls.n	8004a7e <_free_r+0x42>
 8004a88:	6811      	ldr	r1, [r2, #0]
 8004a8a:	1850      	adds	r0, r2, r1
 8004a8c:	42a0      	cmp	r0, r4
 8004a8e:	d10b      	bne.n	8004aa8 <_free_r+0x6c>
 8004a90:	6820      	ldr	r0, [r4, #0]
 8004a92:	4401      	add	r1, r0
 8004a94:	1850      	adds	r0, r2, r1
 8004a96:	4283      	cmp	r3, r0
 8004a98:	6011      	str	r1, [r2, #0]
 8004a9a:	d1e0      	bne.n	8004a5e <_free_r+0x22>
 8004a9c:	6818      	ldr	r0, [r3, #0]
 8004a9e:	685b      	ldr	r3, [r3, #4]
 8004aa0:	4408      	add	r0, r1
 8004aa2:	6010      	str	r0, [r2, #0]
 8004aa4:	6053      	str	r3, [r2, #4]
 8004aa6:	e7da      	b.n	8004a5e <_free_r+0x22>
 8004aa8:	d902      	bls.n	8004ab0 <_free_r+0x74>
 8004aaa:	230c      	movs	r3, #12
 8004aac:	602b      	str	r3, [r5, #0]
 8004aae:	e7d6      	b.n	8004a5e <_free_r+0x22>
 8004ab0:	6820      	ldr	r0, [r4, #0]
 8004ab2:	1821      	adds	r1, r4, r0
 8004ab4:	428b      	cmp	r3, r1
 8004ab6:	bf01      	itttt	eq
 8004ab8:	6819      	ldreq	r1, [r3, #0]
 8004aba:	685b      	ldreq	r3, [r3, #4]
 8004abc:	1809      	addeq	r1, r1, r0
 8004abe:	6021      	streq	r1, [r4, #0]
 8004ac0:	6063      	str	r3, [r4, #4]
 8004ac2:	6054      	str	r4, [r2, #4]
 8004ac4:	e7cb      	b.n	8004a5e <_free_r+0x22>
 8004ac6:	bd38      	pop	{r3, r4, r5, pc}
 8004ac8:	20001428 	.word	0x20001428

08004acc <malloc>:
 8004acc:	4b02      	ldr	r3, [pc, #8]	@ (8004ad8 <malloc+0xc>)
 8004ace:	4601      	mov	r1, r0
 8004ad0:	6818      	ldr	r0, [r3, #0]
 8004ad2:	f000 b825 	b.w	8004b20 <_malloc_r>
 8004ad6:	bf00      	nop
 8004ad8:	20000040 	.word	0x20000040

08004adc <sbrk_aligned>:
 8004adc:	b570      	push	{r4, r5, r6, lr}
 8004ade:	4e0f      	ldr	r6, [pc, #60]	@ (8004b1c <sbrk_aligned+0x40>)
 8004ae0:	460c      	mov	r4, r1
 8004ae2:	6831      	ldr	r1, [r6, #0]
 8004ae4:	4605      	mov	r5, r0
 8004ae6:	b911      	cbnz	r1, 8004aee <sbrk_aligned+0x12>
 8004ae8:	f000 f960 	bl	8004dac <_sbrk_r>
 8004aec:	6030      	str	r0, [r6, #0]
 8004aee:	4621      	mov	r1, r4
 8004af0:	4628      	mov	r0, r5
 8004af2:	f000 f95b 	bl	8004dac <_sbrk_r>
 8004af6:	1c43      	adds	r3, r0, #1
 8004af8:	d103      	bne.n	8004b02 <sbrk_aligned+0x26>
 8004afa:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004afe:	4620      	mov	r0, r4
 8004b00:	bd70      	pop	{r4, r5, r6, pc}
 8004b02:	1cc4      	adds	r4, r0, #3
 8004b04:	f024 0403 	bic.w	r4, r4, #3
 8004b08:	42a0      	cmp	r0, r4
 8004b0a:	d0f8      	beq.n	8004afe <sbrk_aligned+0x22>
 8004b0c:	1a21      	subs	r1, r4, r0
 8004b0e:	4628      	mov	r0, r5
 8004b10:	f000 f94c 	bl	8004dac <_sbrk_r>
 8004b14:	3001      	adds	r0, #1
 8004b16:	d1f2      	bne.n	8004afe <sbrk_aligned+0x22>
 8004b18:	e7ef      	b.n	8004afa <sbrk_aligned+0x1e>
 8004b1a:	bf00      	nop
 8004b1c:	20001424 	.word	0x20001424

08004b20 <_malloc_r>:
 8004b20:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004b24:	1ccd      	adds	r5, r1, #3
 8004b26:	f025 0503 	bic.w	r5, r5, #3
 8004b2a:	3508      	adds	r5, #8
 8004b2c:	2d0c      	cmp	r5, #12
 8004b2e:	bf38      	it	cc
 8004b30:	250c      	movcc	r5, #12
 8004b32:	2d00      	cmp	r5, #0
 8004b34:	4606      	mov	r6, r0
 8004b36:	db01      	blt.n	8004b3c <_malloc_r+0x1c>
 8004b38:	42a9      	cmp	r1, r5
 8004b3a:	d904      	bls.n	8004b46 <_malloc_r+0x26>
 8004b3c:	230c      	movs	r3, #12
 8004b3e:	6033      	str	r3, [r6, #0]
 8004b40:	2000      	movs	r0, #0
 8004b42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b46:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004c1c <_malloc_r+0xfc>
 8004b4a:	f000 f869 	bl	8004c20 <__malloc_lock>
 8004b4e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b52:	461c      	mov	r4, r3
 8004b54:	bb44      	cbnz	r4, 8004ba8 <_malloc_r+0x88>
 8004b56:	4629      	mov	r1, r5
 8004b58:	4630      	mov	r0, r6
 8004b5a:	f7ff ffbf 	bl	8004adc <sbrk_aligned>
 8004b5e:	1c43      	adds	r3, r0, #1
 8004b60:	4604      	mov	r4, r0
 8004b62:	d158      	bne.n	8004c16 <_malloc_r+0xf6>
 8004b64:	f8d8 4000 	ldr.w	r4, [r8]
 8004b68:	4627      	mov	r7, r4
 8004b6a:	2f00      	cmp	r7, #0
 8004b6c:	d143      	bne.n	8004bf6 <_malloc_r+0xd6>
 8004b6e:	2c00      	cmp	r4, #0
 8004b70:	d04b      	beq.n	8004c0a <_malloc_r+0xea>
 8004b72:	6823      	ldr	r3, [r4, #0]
 8004b74:	4639      	mov	r1, r7
 8004b76:	4630      	mov	r0, r6
 8004b78:	eb04 0903 	add.w	r9, r4, r3
 8004b7c:	f000 f916 	bl	8004dac <_sbrk_r>
 8004b80:	4581      	cmp	r9, r0
 8004b82:	d142      	bne.n	8004c0a <_malloc_r+0xea>
 8004b84:	6821      	ldr	r1, [r4, #0]
 8004b86:	4630      	mov	r0, r6
 8004b88:	1a6d      	subs	r5, r5, r1
 8004b8a:	4629      	mov	r1, r5
 8004b8c:	f7ff ffa6 	bl	8004adc <sbrk_aligned>
 8004b90:	3001      	adds	r0, #1
 8004b92:	d03a      	beq.n	8004c0a <_malloc_r+0xea>
 8004b94:	6823      	ldr	r3, [r4, #0]
 8004b96:	442b      	add	r3, r5
 8004b98:	6023      	str	r3, [r4, #0]
 8004b9a:	f8d8 3000 	ldr.w	r3, [r8]
 8004b9e:	685a      	ldr	r2, [r3, #4]
 8004ba0:	bb62      	cbnz	r2, 8004bfc <_malloc_r+0xdc>
 8004ba2:	f8c8 7000 	str.w	r7, [r8]
 8004ba6:	e00f      	b.n	8004bc8 <_malloc_r+0xa8>
 8004ba8:	6822      	ldr	r2, [r4, #0]
 8004baa:	1b52      	subs	r2, r2, r5
 8004bac:	d420      	bmi.n	8004bf0 <_malloc_r+0xd0>
 8004bae:	2a0b      	cmp	r2, #11
 8004bb0:	d917      	bls.n	8004be2 <_malloc_r+0xc2>
 8004bb2:	1961      	adds	r1, r4, r5
 8004bb4:	42a3      	cmp	r3, r4
 8004bb6:	6025      	str	r5, [r4, #0]
 8004bb8:	bf18      	it	ne
 8004bba:	6059      	strne	r1, [r3, #4]
 8004bbc:	6863      	ldr	r3, [r4, #4]
 8004bbe:	bf08      	it	eq
 8004bc0:	f8c8 1000 	streq.w	r1, [r8]
 8004bc4:	5162      	str	r2, [r4, r5]
 8004bc6:	604b      	str	r3, [r1, #4]
 8004bc8:	4630      	mov	r0, r6
 8004bca:	f000 f82f 	bl	8004c2c <__malloc_unlock>
 8004bce:	f104 000b 	add.w	r0, r4, #11
 8004bd2:	1d23      	adds	r3, r4, #4
 8004bd4:	f020 0007 	bic.w	r0, r0, #7
 8004bd8:	1ac2      	subs	r2, r0, r3
 8004bda:	bf1c      	itt	ne
 8004bdc:	1a1b      	subne	r3, r3, r0
 8004bde:	50a3      	strne	r3, [r4, r2]
 8004be0:	e7af      	b.n	8004b42 <_malloc_r+0x22>
 8004be2:	6862      	ldr	r2, [r4, #4]
 8004be4:	42a3      	cmp	r3, r4
 8004be6:	bf0c      	ite	eq
 8004be8:	f8c8 2000 	streq.w	r2, [r8]
 8004bec:	605a      	strne	r2, [r3, #4]
 8004bee:	e7eb      	b.n	8004bc8 <_malloc_r+0xa8>
 8004bf0:	4623      	mov	r3, r4
 8004bf2:	6864      	ldr	r4, [r4, #4]
 8004bf4:	e7ae      	b.n	8004b54 <_malloc_r+0x34>
 8004bf6:	463c      	mov	r4, r7
 8004bf8:	687f      	ldr	r7, [r7, #4]
 8004bfa:	e7b6      	b.n	8004b6a <_malloc_r+0x4a>
 8004bfc:	461a      	mov	r2, r3
 8004bfe:	685b      	ldr	r3, [r3, #4]
 8004c00:	42a3      	cmp	r3, r4
 8004c02:	d1fb      	bne.n	8004bfc <_malloc_r+0xdc>
 8004c04:	2300      	movs	r3, #0
 8004c06:	6053      	str	r3, [r2, #4]
 8004c08:	e7de      	b.n	8004bc8 <_malloc_r+0xa8>
 8004c0a:	230c      	movs	r3, #12
 8004c0c:	4630      	mov	r0, r6
 8004c0e:	6033      	str	r3, [r6, #0]
 8004c10:	f000 f80c 	bl	8004c2c <__malloc_unlock>
 8004c14:	e794      	b.n	8004b40 <_malloc_r+0x20>
 8004c16:	6005      	str	r5, [r0, #0]
 8004c18:	e7d6      	b.n	8004bc8 <_malloc_r+0xa8>
 8004c1a:	bf00      	nop
 8004c1c:	20001428 	.word	0x20001428

08004c20 <__malloc_lock>:
 8004c20:	4801      	ldr	r0, [pc, #4]	@ (8004c28 <__malloc_lock+0x8>)
 8004c22:	f7ff beea 	b.w	80049fa <__retarget_lock_acquire_recursive>
 8004c26:	bf00      	nop
 8004c28:	20001420 	.word	0x20001420

08004c2c <__malloc_unlock>:
 8004c2c:	4801      	ldr	r0, [pc, #4]	@ (8004c34 <__malloc_unlock+0x8>)
 8004c2e:	f7ff bee5 	b.w	80049fc <__retarget_lock_release_recursive>
 8004c32:	bf00      	nop
 8004c34:	20001420 	.word	0x20001420

08004c38 <__sflush_r>:
 8004c38:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c3e:	0716      	lsls	r6, r2, #28
 8004c40:	4605      	mov	r5, r0
 8004c42:	460c      	mov	r4, r1
 8004c44:	d454      	bmi.n	8004cf0 <__sflush_r+0xb8>
 8004c46:	684b      	ldr	r3, [r1, #4]
 8004c48:	2b00      	cmp	r3, #0
 8004c4a:	dc02      	bgt.n	8004c52 <__sflush_r+0x1a>
 8004c4c:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	dd48      	ble.n	8004ce4 <__sflush_r+0xac>
 8004c52:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c54:	2e00      	cmp	r6, #0
 8004c56:	d045      	beq.n	8004ce4 <__sflush_r+0xac>
 8004c58:	2300      	movs	r3, #0
 8004c5a:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c5e:	682f      	ldr	r7, [r5, #0]
 8004c60:	6a21      	ldr	r1, [r4, #32]
 8004c62:	602b      	str	r3, [r5, #0]
 8004c64:	d030      	beq.n	8004cc8 <__sflush_r+0x90>
 8004c66:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c68:	89a3      	ldrh	r3, [r4, #12]
 8004c6a:	0759      	lsls	r1, r3, #29
 8004c6c:	d505      	bpl.n	8004c7a <__sflush_r+0x42>
 8004c6e:	6863      	ldr	r3, [r4, #4]
 8004c70:	1ad2      	subs	r2, r2, r3
 8004c72:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c74:	b10b      	cbz	r3, 8004c7a <__sflush_r+0x42>
 8004c76:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c78:	1ad2      	subs	r2, r2, r3
 8004c7a:	2300      	movs	r3, #0
 8004c7c:	4628      	mov	r0, r5
 8004c7e:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c80:	6a21      	ldr	r1, [r4, #32]
 8004c82:	47b0      	blx	r6
 8004c84:	1c43      	adds	r3, r0, #1
 8004c86:	89a3      	ldrh	r3, [r4, #12]
 8004c88:	d106      	bne.n	8004c98 <__sflush_r+0x60>
 8004c8a:	6829      	ldr	r1, [r5, #0]
 8004c8c:	291d      	cmp	r1, #29
 8004c8e:	d82b      	bhi.n	8004ce8 <__sflush_r+0xb0>
 8004c90:	4a28      	ldr	r2, [pc, #160]	@ (8004d34 <__sflush_r+0xfc>)
 8004c92:	410a      	asrs	r2, r1
 8004c94:	07d6      	lsls	r6, r2, #31
 8004c96:	d427      	bmi.n	8004ce8 <__sflush_r+0xb0>
 8004c98:	2200      	movs	r2, #0
 8004c9a:	6062      	str	r2, [r4, #4]
 8004c9c:	6922      	ldr	r2, [r4, #16]
 8004c9e:	04d9      	lsls	r1, r3, #19
 8004ca0:	6022      	str	r2, [r4, #0]
 8004ca2:	d504      	bpl.n	8004cae <__sflush_r+0x76>
 8004ca4:	1c42      	adds	r2, r0, #1
 8004ca6:	d101      	bne.n	8004cac <__sflush_r+0x74>
 8004ca8:	682b      	ldr	r3, [r5, #0]
 8004caa:	b903      	cbnz	r3, 8004cae <__sflush_r+0x76>
 8004cac:	6560      	str	r0, [r4, #84]	@ 0x54
 8004cae:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004cb0:	602f      	str	r7, [r5, #0]
 8004cb2:	b1b9      	cbz	r1, 8004ce4 <__sflush_r+0xac>
 8004cb4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004cb8:	4299      	cmp	r1, r3
 8004cba:	d002      	beq.n	8004cc2 <__sflush_r+0x8a>
 8004cbc:	4628      	mov	r0, r5
 8004cbe:	f7ff febd 	bl	8004a3c <_free_r>
 8004cc2:	2300      	movs	r3, #0
 8004cc4:	6363      	str	r3, [r4, #52]	@ 0x34
 8004cc6:	e00d      	b.n	8004ce4 <__sflush_r+0xac>
 8004cc8:	2301      	movs	r3, #1
 8004cca:	4628      	mov	r0, r5
 8004ccc:	47b0      	blx	r6
 8004cce:	4602      	mov	r2, r0
 8004cd0:	1c50      	adds	r0, r2, #1
 8004cd2:	d1c9      	bne.n	8004c68 <__sflush_r+0x30>
 8004cd4:	682b      	ldr	r3, [r5, #0]
 8004cd6:	2b00      	cmp	r3, #0
 8004cd8:	d0c6      	beq.n	8004c68 <__sflush_r+0x30>
 8004cda:	2b1d      	cmp	r3, #29
 8004cdc:	d001      	beq.n	8004ce2 <__sflush_r+0xaa>
 8004cde:	2b16      	cmp	r3, #22
 8004ce0:	d11d      	bne.n	8004d1e <__sflush_r+0xe6>
 8004ce2:	602f      	str	r7, [r5, #0]
 8004ce4:	2000      	movs	r0, #0
 8004ce6:	e021      	b.n	8004d2c <__sflush_r+0xf4>
 8004ce8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cec:	b21b      	sxth	r3, r3
 8004cee:	e01a      	b.n	8004d26 <__sflush_r+0xee>
 8004cf0:	690f      	ldr	r7, [r1, #16]
 8004cf2:	2f00      	cmp	r7, #0
 8004cf4:	d0f6      	beq.n	8004ce4 <__sflush_r+0xac>
 8004cf6:	0793      	lsls	r3, r2, #30
 8004cf8:	bf18      	it	ne
 8004cfa:	2300      	movne	r3, #0
 8004cfc:	680e      	ldr	r6, [r1, #0]
 8004cfe:	bf08      	it	eq
 8004d00:	694b      	ldreq	r3, [r1, #20]
 8004d02:	1bf6      	subs	r6, r6, r7
 8004d04:	600f      	str	r7, [r1, #0]
 8004d06:	608b      	str	r3, [r1, #8]
 8004d08:	2e00      	cmp	r6, #0
 8004d0a:	ddeb      	ble.n	8004ce4 <__sflush_r+0xac>
 8004d0c:	4633      	mov	r3, r6
 8004d0e:	463a      	mov	r2, r7
 8004d10:	4628      	mov	r0, r5
 8004d12:	6a21      	ldr	r1, [r4, #32]
 8004d14:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004d18:	47e0      	blx	ip
 8004d1a:	2800      	cmp	r0, #0
 8004d1c:	dc07      	bgt.n	8004d2e <__sflush_r+0xf6>
 8004d1e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d22:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004d26:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004d2a:	81a3      	strh	r3, [r4, #12]
 8004d2c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004d2e:	4407      	add	r7, r0
 8004d30:	1a36      	subs	r6, r6, r0
 8004d32:	e7e9      	b.n	8004d08 <__sflush_r+0xd0>
 8004d34:	dfbffffe 	.word	0xdfbffffe

08004d38 <_fflush_r>:
 8004d38:	b538      	push	{r3, r4, r5, lr}
 8004d3a:	690b      	ldr	r3, [r1, #16]
 8004d3c:	4605      	mov	r5, r0
 8004d3e:	460c      	mov	r4, r1
 8004d40:	b913      	cbnz	r3, 8004d48 <_fflush_r+0x10>
 8004d42:	2500      	movs	r5, #0
 8004d44:	4628      	mov	r0, r5
 8004d46:	bd38      	pop	{r3, r4, r5, pc}
 8004d48:	b118      	cbz	r0, 8004d52 <_fflush_r+0x1a>
 8004d4a:	6a03      	ldr	r3, [r0, #32]
 8004d4c:	b90b      	cbnz	r3, 8004d52 <_fflush_r+0x1a>
 8004d4e:	f7ff fd61 	bl	8004814 <__sinit>
 8004d52:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d0f3      	beq.n	8004d42 <_fflush_r+0xa>
 8004d5a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d5c:	07d0      	lsls	r0, r2, #31
 8004d5e:	d404      	bmi.n	8004d6a <_fflush_r+0x32>
 8004d60:	0599      	lsls	r1, r3, #22
 8004d62:	d402      	bmi.n	8004d6a <_fflush_r+0x32>
 8004d64:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d66:	f7ff fe48 	bl	80049fa <__retarget_lock_acquire_recursive>
 8004d6a:	4628      	mov	r0, r5
 8004d6c:	4621      	mov	r1, r4
 8004d6e:	f7ff ff63 	bl	8004c38 <__sflush_r>
 8004d72:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d74:	4605      	mov	r5, r0
 8004d76:	07da      	lsls	r2, r3, #31
 8004d78:	d4e4      	bmi.n	8004d44 <_fflush_r+0xc>
 8004d7a:	89a3      	ldrh	r3, [r4, #12]
 8004d7c:	059b      	lsls	r3, r3, #22
 8004d7e:	d4e1      	bmi.n	8004d44 <_fflush_r+0xc>
 8004d80:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d82:	f7ff fe3b 	bl	80049fc <__retarget_lock_release_recursive>
 8004d86:	e7dd      	b.n	8004d44 <_fflush_r+0xc>

08004d88 <fiprintf>:
 8004d88:	b40e      	push	{r1, r2, r3}
 8004d8a:	b503      	push	{r0, r1, lr}
 8004d8c:	4601      	mov	r1, r0
 8004d8e:	ab03      	add	r3, sp, #12
 8004d90:	4805      	ldr	r0, [pc, #20]	@ (8004da8 <fiprintf+0x20>)
 8004d92:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d96:	6800      	ldr	r0, [r0, #0]
 8004d98:	9301      	str	r3, [sp, #4]
 8004d9a:	f000 f845 	bl	8004e28 <_vfiprintf_r>
 8004d9e:	b002      	add	sp, #8
 8004da0:	f85d eb04 	ldr.w	lr, [sp], #4
 8004da4:	b003      	add	sp, #12
 8004da6:	4770      	bx	lr
 8004da8:	20000040 	.word	0x20000040

08004dac <_sbrk_r>:
 8004dac:	b538      	push	{r3, r4, r5, lr}
 8004dae:	2300      	movs	r3, #0
 8004db0:	4d05      	ldr	r5, [pc, #20]	@ (8004dc8 <_sbrk_r+0x1c>)
 8004db2:	4604      	mov	r4, r0
 8004db4:	4608      	mov	r0, r1
 8004db6:	602b      	str	r3, [r5, #0]
 8004db8:	f7fd fd0c 	bl	80027d4 <_sbrk>
 8004dbc:	1c43      	adds	r3, r0, #1
 8004dbe:	d102      	bne.n	8004dc6 <_sbrk_r+0x1a>
 8004dc0:	682b      	ldr	r3, [r5, #0]
 8004dc2:	b103      	cbz	r3, 8004dc6 <_sbrk_r+0x1a>
 8004dc4:	6023      	str	r3, [r4, #0]
 8004dc6:	bd38      	pop	{r3, r4, r5, pc}
 8004dc8:	2000141c 	.word	0x2000141c

08004dcc <abort>:
 8004dcc:	2006      	movs	r0, #6
 8004dce:	b508      	push	{r3, lr}
 8004dd0:	f000 fb90 	bl	80054f4 <raise>
 8004dd4:	2001      	movs	r0, #1
 8004dd6:	f7fd fc88 	bl	80026ea <_exit>

08004dda <__sfputc_r>:
 8004dda:	6893      	ldr	r3, [r2, #8]
 8004ddc:	b410      	push	{r4}
 8004dde:	3b01      	subs	r3, #1
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	6093      	str	r3, [r2, #8]
 8004de4:	da07      	bge.n	8004df6 <__sfputc_r+0x1c>
 8004de6:	6994      	ldr	r4, [r2, #24]
 8004de8:	42a3      	cmp	r3, r4
 8004dea:	db01      	blt.n	8004df0 <__sfputc_r+0x16>
 8004dec:	290a      	cmp	r1, #10
 8004dee:	d102      	bne.n	8004df6 <__sfputc_r+0x1c>
 8004df0:	bc10      	pop	{r4}
 8004df2:	f000 bac3 	b.w	800537c <__swbuf_r>
 8004df6:	6813      	ldr	r3, [r2, #0]
 8004df8:	1c58      	adds	r0, r3, #1
 8004dfa:	6010      	str	r0, [r2, #0]
 8004dfc:	7019      	strb	r1, [r3, #0]
 8004dfe:	4608      	mov	r0, r1
 8004e00:	bc10      	pop	{r4}
 8004e02:	4770      	bx	lr

08004e04 <__sfputs_r>:
 8004e04:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004e06:	4606      	mov	r6, r0
 8004e08:	460f      	mov	r7, r1
 8004e0a:	4614      	mov	r4, r2
 8004e0c:	18d5      	adds	r5, r2, r3
 8004e0e:	42ac      	cmp	r4, r5
 8004e10:	d101      	bne.n	8004e16 <__sfputs_r+0x12>
 8004e12:	2000      	movs	r0, #0
 8004e14:	e007      	b.n	8004e26 <__sfputs_r+0x22>
 8004e16:	463a      	mov	r2, r7
 8004e18:	4630      	mov	r0, r6
 8004e1a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004e1e:	f7ff ffdc 	bl	8004dda <__sfputc_r>
 8004e22:	1c43      	adds	r3, r0, #1
 8004e24:	d1f3      	bne.n	8004e0e <__sfputs_r+0xa>
 8004e26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004e28 <_vfiprintf_r>:
 8004e28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004e2c:	460d      	mov	r5, r1
 8004e2e:	4614      	mov	r4, r2
 8004e30:	4698      	mov	r8, r3
 8004e32:	4606      	mov	r6, r0
 8004e34:	b09d      	sub	sp, #116	@ 0x74
 8004e36:	b118      	cbz	r0, 8004e40 <_vfiprintf_r+0x18>
 8004e38:	6a03      	ldr	r3, [r0, #32]
 8004e3a:	b90b      	cbnz	r3, 8004e40 <_vfiprintf_r+0x18>
 8004e3c:	f7ff fcea 	bl	8004814 <__sinit>
 8004e40:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e42:	07d9      	lsls	r1, r3, #31
 8004e44:	d405      	bmi.n	8004e52 <_vfiprintf_r+0x2a>
 8004e46:	89ab      	ldrh	r3, [r5, #12]
 8004e48:	059a      	lsls	r2, r3, #22
 8004e4a:	d402      	bmi.n	8004e52 <_vfiprintf_r+0x2a>
 8004e4c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e4e:	f7ff fdd4 	bl	80049fa <__retarget_lock_acquire_recursive>
 8004e52:	89ab      	ldrh	r3, [r5, #12]
 8004e54:	071b      	lsls	r3, r3, #28
 8004e56:	d501      	bpl.n	8004e5c <_vfiprintf_r+0x34>
 8004e58:	692b      	ldr	r3, [r5, #16]
 8004e5a:	b99b      	cbnz	r3, 8004e84 <_vfiprintf_r+0x5c>
 8004e5c:	4629      	mov	r1, r5
 8004e5e:	4630      	mov	r0, r6
 8004e60:	f000 faca 	bl	80053f8 <__swsetup_r>
 8004e64:	b170      	cbz	r0, 8004e84 <_vfiprintf_r+0x5c>
 8004e66:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e68:	07dc      	lsls	r4, r3, #31
 8004e6a:	d504      	bpl.n	8004e76 <_vfiprintf_r+0x4e>
 8004e6c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e70:	b01d      	add	sp, #116	@ 0x74
 8004e72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e76:	89ab      	ldrh	r3, [r5, #12]
 8004e78:	0598      	lsls	r0, r3, #22
 8004e7a:	d4f7      	bmi.n	8004e6c <_vfiprintf_r+0x44>
 8004e7c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e7e:	f7ff fdbd 	bl	80049fc <__retarget_lock_release_recursive>
 8004e82:	e7f3      	b.n	8004e6c <_vfiprintf_r+0x44>
 8004e84:	2300      	movs	r3, #0
 8004e86:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e88:	2320      	movs	r3, #32
 8004e8a:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e8e:	2330      	movs	r3, #48	@ 0x30
 8004e90:	f04f 0901 	mov.w	r9, #1
 8004e94:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e98:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005044 <_vfiprintf_r+0x21c>
 8004e9c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004ea0:	4623      	mov	r3, r4
 8004ea2:	469a      	mov	sl, r3
 8004ea4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004ea8:	b10a      	cbz	r2, 8004eae <_vfiprintf_r+0x86>
 8004eaa:	2a25      	cmp	r2, #37	@ 0x25
 8004eac:	d1f9      	bne.n	8004ea2 <_vfiprintf_r+0x7a>
 8004eae:	ebba 0b04 	subs.w	fp, sl, r4
 8004eb2:	d00b      	beq.n	8004ecc <_vfiprintf_r+0xa4>
 8004eb4:	465b      	mov	r3, fp
 8004eb6:	4622      	mov	r2, r4
 8004eb8:	4629      	mov	r1, r5
 8004eba:	4630      	mov	r0, r6
 8004ebc:	f7ff ffa2 	bl	8004e04 <__sfputs_r>
 8004ec0:	3001      	adds	r0, #1
 8004ec2:	f000 80a7 	beq.w	8005014 <_vfiprintf_r+0x1ec>
 8004ec6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004ec8:	445a      	add	r2, fp
 8004eca:	9209      	str	r2, [sp, #36]	@ 0x24
 8004ecc:	f89a 3000 	ldrb.w	r3, [sl]
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	f000 809f 	beq.w	8005014 <_vfiprintf_r+0x1ec>
 8004ed6:	2300      	movs	r3, #0
 8004ed8:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004edc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ee0:	f10a 0a01 	add.w	sl, sl, #1
 8004ee4:	9304      	str	r3, [sp, #16]
 8004ee6:	9307      	str	r3, [sp, #28]
 8004ee8:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eec:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eee:	4654      	mov	r4, sl
 8004ef0:	2205      	movs	r2, #5
 8004ef2:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004ef6:	4853      	ldr	r0, [pc, #332]	@ (8005044 <_vfiprintf_r+0x21c>)
 8004ef8:	f000 fb18 	bl	800552c <memchr>
 8004efc:	9a04      	ldr	r2, [sp, #16]
 8004efe:	b9d8      	cbnz	r0, 8004f38 <_vfiprintf_r+0x110>
 8004f00:	06d1      	lsls	r1, r2, #27
 8004f02:	bf44      	itt	mi
 8004f04:	2320      	movmi	r3, #32
 8004f06:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f0a:	0713      	lsls	r3, r2, #28
 8004f0c:	bf44      	itt	mi
 8004f0e:	232b      	movmi	r3, #43	@ 0x2b
 8004f10:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004f14:	f89a 3000 	ldrb.w	r3, [sl]
 8004f18:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f1a:	d015      	beq.n	8004f48 <_vfiprintf_r+0x120>
 8004f1c:	4654      	mov	r4, sl
 8004f1e:	2000      	movs	r0, #0
 8004f20:	f04f 0c0a 	mov.w	ip, #10
 8004f24:	9a07      	ldr	r2, [sp, #28]
 8004f26:	4621      	mov	r1, r4
 8004f28:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004f2c:	3b30      	subs	r3, #48	@ 0x30
 8004f2e:	2b09      	cmp	r3, #9
 8004f30:	d94b      	bls.n	8004fca <_vfiprintf_r+0x1a2>
 8004f32:	b1b0      	cbz	r0, 8004f62 <_vfiprintf_r+0x13a>
 8004f34:	9207      	str	r2, [sp, #28]
 8004f36:	e014      	b.n	8004f62 <_vfiprintf_r+0x13a>
 8004f38:	eba0 0308 	sub.w	r3, r0, r8
 8004f3c:	fa09 f303 	lsl.w	r3, r9, r3
 8004f40:	4313      	orrs	r3, r2
 8004f42:	46a2      	mov	sl, r4
 8004f44:	9304      	str	r3, [sp, #16]
 8004f46:	e7d2      	b.n	8004eee <_vfiprintf_r+0xc6>
 8004f48:	9b03      	ldr	r3, [sp, #12]
 8004f4a:	1d19      	adds	r1, r3, #4
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	9103      	str	r1, [sp, #12]
 8004f50:	2b00      	cmp	r3, #0
 8004f52:	bfbb      	ittet	lt
 8004f54:	425b      	neglt	r3, r3
 8004f56:	f042 0202 	orrlt.w	r2, r2, #2
 8004f5a:	9307      	strge	r3, [sp, #28]
 8004f5c:	9307      	strlt	r3, [sp, #28]
 8004f5e:	bfb8      	it	lt
 8004f60:	9204      	strlt	r2, [sp, #16]
 8004f62:	7823      	ldrb	r3, [r4, #0]
 8004f64:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f66:	d10a      	bne.n	8004f7e <_vfiprintf_r+0x156>
 8004f68:	7863      	ldrb	r3, [r4, #1]
 8004f6a:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f6c:	d132      	bne.n	8004fd4 <_vfiprintf_r+0x1ac>
 8004f6e:	9b03      	ldr	r3, [sp, #12]
 8004f70:	3402      	adds	r4, #2
 8004f72:	1d1a      	adds	r2, r3, #4
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	9203      	str	r2, [sp, #12]
 8004f78:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f7c:	9305      	str	r3, [sp, #20]
 8004f7e:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 8005048 <_vfiprintf_r+0x220>
 8004f82:	2203      	movs	r2, #3
 8004f84:	4650      	mov	r0, sl
 8004f86:	7821      	ldrb	r1, [r4, #0]
 8004f88:	f000 fad0 	bl	800552c <memchr>
 8004f8c:	b138      	cbz	r0, 8004f9e <_vfiprintf_r+0x176>
 8004f8e:	2240      	movs	r2, #64	@ 0x40
 8004f90:	9b04      	ldr	r3, [sp, #16]
 8004f92:	eba0 000a 	sub.w	r0, r0, sl
 8004f96:	4082      	lsls	r2, r0
 8004f98:	4313      	orrs	r3, r2
 8004f9a:	3401      	adds	r4, #1
 8004f9c:	9304      	str	r3, [sp, #16]
 8004f9e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004fa2:	2206      	movs	r2, #6
 8004fa4:	4829      	ldr	r0, [pc, #164]	@ (800504c <_vfiprintf_r+0x224>)
 8004fa6:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004faa:	f000 fabf 	bl	800552c <memchr>
 8004fae:	2800      	cmp	r0, #0
 8004fb0:	d03f      	beq.n	8005032 <_vfiprintf_r+0x20a>
 8004fb2:	4b27      	ldr	r3, [pc, #156]	@ (8005050 <_vfiprintf_r+0x228>)
 8004fb4:	bb1b      	cbnz	r3, 8004ffe <_vfiprintf_r+0x1d6>
 8004fb6:	9b03      	ldr	r3, [sp, #12]
 8004fb8:	3307      	adds	r3, #7
 8004fba:	f023 0307 	bic.w	r3, r3, #7
 8004fbe:	3308      	adds	r3, #8
 8004fc0:	9303      	str	r3, [sp, #12]
 8004fc2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004fc4:	443b      	add	r3, r7
 8004fc6:	9309      	str	r3, [sp, #36]	@ 0x24
 8004fc8:	e76a      	b.n	8004ea0 <_vfiprintf_r+0x78>
 8004fca:	460c      	mov	r4, r1
 8004fcc:	2001      	movs	r0, #1
 8004fce:	fb0c 3202 	mla	r2, ip, r2, r3
 8004fd2:	e7a8      	b.n	8004f26 <_vfiprintf_r+0xfe>
 8004fd4:	2300      	movs	r3, #0
 8004fd6:	f04f 0c0a 	mov.w	ip, #10
 8004fda:	4619      	mov	r1, r3
 8004fdc:	3401      	adds	r4, #1
 8004fde:	9305      	str	r3, [sp, #20]
 8004fe0:	4620      	mov	r0, r4
 8004fe2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004fe6:	3a30      	subs	r2, #48	@ 0x30
 8004fe8:	2a09      	cmp	r2, #9
 8004fea:	d903      	bls.n	8004ff4 <_vfiprintf_r+0x1cc>
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d0c6      	beq.n	8004f7e <_vfiprintf_r+0x156>
 8004ff0:	9105      	str	r1, [sp, #20]
 8004ff2:	e7c4      	b.n	8004f7e <_vfiprintf_r+0x156>
 8004ff4:	4604      	mov	r4, r0
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	fb0c 2101 	mla	r1, ip, r1, r2
 8004ffc:	e7f0      	b.n	8004fe0 <_vfiprintf_r+0x1b8>
 8004ffe:	ab03      	add	r3, sp, #12
 8005000:	9300      	str	r3, [sp, #0]
 8005002:	462a      	mov	r2, r5
 8005004:	4630      	mov	r0, r6
 8005006:	4b13      	ldr	r3, [pc, #76]	@ (8005054 <_vfiprintf_r+0x22c>)
 8005008:	a904      	add	r1, sp, #16
 800500a:	f3af 8000 	nop.w
 800500e:	4607      	mov	r7, r0
 8005010:	1c78      	adds	r0, r7, #1
 8005012:	d1d6      	bne.n	8004fc2 <_vfiprintf_r+0x19a>
 8005014:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8005016:	07d9      	lsls	r1, r3, #31
 8005018:	d405      	bmi.n	8005026 <_vfiprintf_r+0x1fe>
 800501a:	89ab      	ldrh	r3, [r5, #12]
 800501c:	059a      	lsls	r2, r3, #22
 800501e:	d402      	bmi.n	8005026 <_vfiprintf_r+0x1fe>
 8005020:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8005022:	f7ff fceb 	bl	80049fc <__retarget_lock_release_recursive>
 8005026:	89ab      	ldrh	r3, [r5, #12]
 8005028:	065b      	lsls	r3, r3, #25
 800502a:	f53f af1f 	bmi.w	8004e6c <_vfiprintf_r+0x44>
 800502e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8005030:	e71e      	b.n	8004e70 <_vfiprintf_r+0x48>
 8005032:	ab03      	add	r3, sp, #12
 8005034:	9300      	str	r3, [sp, #0]
 8005036:	462a      	mov	r2, r5
 8005038:	4630      	mov	r0, r6
 800503a:	4b06      	ldr	r3, [pc, #24]	@ (8005054 <_vfiprintf_r+0x22c>)
 800503c:	a904      	add	r1, sp, #16
 800503e:	f000 f87d 	bl	800513c <_printf_i>
 8005042:	e7e4      	b.n	800500e <_vfiprintf_r+0x1e6>
 8005044:	08005891 	.word	0x08005891
 8005048:	08005897 	.word	0x08005897
 800504c:	0800589b 	.word	0x0800589b
 8005050:	00000000 	.word	0x00000000
 8005054:	08004e05 	.word	0x08004e05

08005058 <_printf_common>:
 8005058:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800505c:	4616      	mov	r6, r2
 800505e:	4698      	mov	r8, r3
 8005060:	688a      	ldr	r2, [r1, #8]
 8005062:	690b      	ldr	r3, [r1, #16]
 8005064:	4607      	mov	r7, r0
 8005066:	4293      	cmp	r3, r2
 8005068:	bfb8      	it	lt
 800506a:	4613      	movlt	r3, r2
 800506c:	6033      	str	r3, [r6, #0]
 800506e:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005072:	460c      	mov	r4, r1
 8005074:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005078:	b10a      	cbz	r2, 800507e <_printf_common+0x26>
 800507a:	3301      	adds	r3, #1
 800507c:	6033      	str	r3, [r6, #0]
 800507e:	6823      	ldr	r3, [r4, #0]
 8005080:	0699      	lsls	r1, r3, #26
 8005082:	bf42      	ittt	mi
 8005084:	6833      	ldrmi	r3, [r6, #0]
 8005086:	3302      	addmi	r3, #2
 8005088:	6033      	strmi	r3, [r6, #0]
 800508a:	6825      	ldr	r5, [r4, #0]
 800508c:	f015 0506 	ands.w	r5, r5, #6
 8005090:	d106      	bne.n	80050a0 <_printf_common+0x48>
 8005092:	f104 0a19 	add.w	sl, r4, #25
 8005096:	68e3      	ldr	r3, [r4, #12]
 8005098:	6832      	ldr	r2, [r6, #0]
 800509a:	1a9b      	subs	r3, r3, r2
 800509c:	42ab      	cmp	r3, r5
 800509e:	dc2b      	bgt.n	80050f8 <_printf_common+0xa0>
 80050a0:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 80050a4:	6822      	ldr	r2, [r4, #0]
 80050a6:	3b00      	subs	r3, #0
 80050a8:	bf18      	it	ne
 80050aa:	2301      	movne	r3, #1
 80050ac:	0692      	lsls	r2, r2, #26
 80050ae:	d430      	bmi.n	8005112 <_printf_common+0xba>
 80050b0:	4641      	mov	r1, r8
 80050b2:	4638      	mov	r0, r7
 80050b4:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 80050b8:	47c8      	blx	r9
 80050ba:	3001      	adds	r0, #1
 80050bc:	d023      	beq.n	8005106 <_printf_common+0xae>
 80050be:	6823      	ldr	r3, [r4, #0]
 80050c0:	6922      	ldr	r2, [r4, #16]
 80050c2:	f003 0306 	and.w	r3, r3, #6
 80050c6:	2b04      	cmp	r3, #4
 80050c8:	bf14      	ite	ne
 80050ca:	2500      	movne	r5, #0
 80050cc:	6833      	ldreq	r3, [r6, #0]
 80050ce:	f04f 0600 	mov.w	r6, #0
 80050d2:	bf08      	it	eq
 80050d4:	68e5      	ldreq	r5, [r4, #12]
 80050d6:	f104 041a 	add.w	r4, r4, #26
 80050da:	bf08      	it	eq
 80050dc:	1aed      	subeq	r5, r5, r3
 80050de:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050e2:	bf08      	it	eq
 80050e4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050e8:	4293      	cmp	r3, r2
 80050ea:	bfc4      	itt	gt
 80050ec:	1a9b      	subgt	r3, r3, r2
 80050ee:	18ed      	addgt	r5, r5, r3
 80050f0:	42b5      	cmp	r5, r6
 80050f2:	d11a      	bne.n	800512a <_printf_common+0xd2>
 80050f4:	2000      	movs	r0, #0
 80050f6:	e008      	b.n	800510a <_printf_common+0xb2>
 80050f8:	2301      	movs	r3, #1
 80050fa:	4652      	mov	r2, sl
 80050fc:	4641      	mov	r1, r8
 80050fe:	4638      	mov	r0, r7
 8005100:	47c8      	blx	r9
 8005102:	3001      	adds	r0, #1
 8005104:	d103      	bne.n	800510e <_printf_common+0xb6>
 8005106:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800510a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800510e:	3501      	adds	r5, #1
 8005110:	e7c1      	b.n	8005096 <_printf_common+0x3e>
 8005112:	2030      	movs	r0, #48	@ 0x30
 8005114:	18e1      	adds	r1, r4, r3
 8005116:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800511a:	1c5a      	adds	r2, r3, #1
 800511c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005120:	4422      	add	r2, r4
 8005122:	3302      	adds	r3, #2
 8005124:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005128:	e7c2      	b.n	80050b0 <_printf_common+0x58>
 800512a:	2301      	movs	r3, #1
 800512c:	4622      	mov	r2, r4
 800512e:	4641      	mov	r1, r8
 8005130:	4638      	mov	r0, r7
 8005132:	47c8      	blx	r9
 8005134:	3001      	adds	r0, #1
 8005136:	d0e6      	beq.n	8005106 <_printf_common+0xae>
 8005138:	3601      	adds	r6, #1
 800513a:	e7d9      	b.n	80050f0 <_printf_common+0x98>

0800513c <_printf_i>:
 800513c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005140:	7e0f      	ldrb	r7, [r1, #24]
 8005142:	4691      	mov	r9, r2
 8005144:	2f78      	cmp	r7, #120	@ 0x78
 8005146:	4680      	mov	r8, r0
 8005148:	460c      	mov	r4, r1
 800514a:	469a      	mov	sl, r3
 800514c:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800514e:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005152:	d807      	bhi.n	8005164 <_printf_i+0x28>
 8005154:	2f62      	cmp	r7, #98	@ 0x62
 8005156:	d80a      	bhi.n	800516e <_printf_i+0x32>
 8005158:	2f00      	cmp	r7, #0
 800515a:	f000 80d3 	beq.w	8005304 <_printf_i+0x1c8>
 800515e:	2f58      	cmp	r7, #88	@ 0x58
 8005160:	f000 80ba 	beq.w	80052d8 <_printf_i+0x19c>
 8005164:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005168:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 800516c:	e03a      	b.n	80051e4 <_printf_i+0xa8>
 800516e:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005172:	2b15      	cmp	r3, #21
 8005174:	d8f6      	bhi.n	8005164 <_printf_i+0x28>
 8005176:	a101      	add	r1, pc, #4	@ (adr r1, 800517c <_printf_i+0x40>)
 8005178:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800517c:	080051d5 	.word	0x080051d5
 8005180:	080051e9 	.word	0x080051e9
 8005184:	08005165 	.word	0x08005165
 8005188:	08005165 	.word	0x08005165
 800518c:	08005165 	.word	0x08005165
 8005190:	08005165 	.word	0x08005165
 8005194:	080051e9 	.word	0x080051e9
 8005198:	08005165 	.word	0x08005165
 800519c:	08005165 	.word	0x08005165
 80051a0:	08005165 	.word	0x08005165
 80051a4:	08005165 	.word	0x08005165
 80051a8:	080052eb 	.word	0x080052eb
 80051ac:	08005213 	.word	0x08005213
 80051b0:	080052a5 	.word	0x080052a5
 80051b4:	08005165 	.word	0x08005165
 80051b8:	08005165 	.word	0x08005165
 80051bc:	0800530d 	.word	0x0800530d
 80051c0:	08005165 	.word	0x08005165
 80051c4:	08005213 	.word	0x08005213
 80051c8:	08005165 	.word	0x08005165
 80051cc:	08005165 	.word	0x08005165
 80051d0:	080052ad 	.word	0x080052ad
 80051d4:	6833      	ldr	r3, [r6, #0]
 80051d6:	1d1a      	adds	r2, r3, #4
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	6032      	str	r2, [r6, #0]
 80051dc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051e0:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051e4:	2301      	movs	r3, #1
 80051e6:	e09e      	b.n	8005326 <_printf_i+0x1ea>
 80051e8:	6833      	ldr	r3, [r6, #0]
 80051ea:	6820      	ldr	r0, [r4, #0]
 80051ec:	1d19      	adds	r1, r3, #4
 80051ee:	6031      	str	r1, [r6, #0]
 80051f0:	0606      	lsls	r6, r0, #24
 80051f2:	d501      	bpl.n	80051f8 <_printf_i+0xbc>
 80051f4:	681d      	ldr	r5, [r3, #0]
 80051f6:	e003      	b.n	8005200 <_printf_i+0xc4>
 80051f8:	0645      	lsls	r5, r0, #25
 80051fa:	d5fb      	bpl.n	80051f4 <_printf_i+0xb8>
 80051fc:	f9b3 5000 	ldrsh.w	r5, [r3]
 8005200:	2d00      	cmp	r5, #0
 8005202:	da03      	bge.n	800520c <_printf_i+0xd0>
 8005204:	232d      	movs	r3, #45	@ 0x2d
 8005206:	426d      	negs	r5, r5
 8005208:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800520c:	230a      	movs	r3, #10
 800520e:	4859      	ldr	r0, [pc, #356]	@ (8005374 <_printf_i+0x238>)
 8005210:	e011      	b.n	8005236 <_printf_i+0xfa>
 8005212:	6821      	ldr	r1, [r4, #0]
 8005214:	6833      	ldr	r3, [r6, #0]
 8005216:	0608      	lsls	r0, r1, #24
 8005218:	f853 5b04 	ldr.w	r5, [r3], #4
 800521c:	d402      	bmi.n	8005224 <_printf_i+0xe8>
 800521e:	0649      	lsls	r1, r1, #25
 8005220:	bf48      	it	mi
 8005222:	b2ad      	uxthmi	r5, r5
 8005224:	2f6f      	cmp	r7, #111	@ 0x6f
 8005226:	6033      	str	r3, [r6, #0]
 8005228:	bf14      	ite	ne
 800522a:	230a      	movne	r3, #10
 800522c:	2308      	moveq	r3, #8
 800522e:	4851      	ldr	r0, [pc, #324]	@ (8005374 <_printf_i+0x238>)
 8005230:	2100      	movs	r1, #0
 8005232:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8005236:	6866      	ldr	r6, [r4, #4]
 8005238:	2e00      	cmp	r6, #0
 800523a:	bfa8      	it	ge
 800523c:	6821      	ldrge	r1, [r4, #0]
 800523e:	60a6      	str	r6, [r4, #8]
 8005240:	bfa4      	itt	ge
 8005242:	f021 0104 	bicge.w	r1, r1, #4
 8005246:	6021      	strge	r1, [r4, #0]
 8005248:	b90d      	cbnz	r5, 800524e <_printf_i+0x112>
 800524a:	2e00      	cmp	r6, #0
 800524c:	d04b      	beq.n	80052e6 <_printf_i+0x1aa>
 800524e:	4616      	mov	r6, r2
 8005250:	fbb5 f1f3 	udiv	r1, r5, r3
 8005254:	fb03 5711 	mls	r7, r3, r1, r5
 8005258:	5dc7      	ldrb	r7, [r0, r7]
 800525a:	f806 7d01 	strb.w	r7, [r6, #-1]!
 800525e:	462f      	mov	r7, r5
 8005260:	42bb      	cmp	r3, r7
 8005262:	460d      	mov	r5, r1
 8005264:	d9f4      	bls.n	8005250 <_printf_i+0x114>
 8005266:	2b08      	cmp	r3, #8
 8005268:	d10b      	bne.n	8005282 <_printf_i+0x146>
 800526a:	6823      	ldr	r3, [r4, #0]
 800526c:	07df      	lsls	r7, r3, #31
 800526e:	d508      	bpl.n	8005282 <_printf_i+0x146>
 8005270:	6923      	ldr	r3, [r4, #16]
 8005272:	6861      	ldr	r1, [r4, #4]
 8005274:	4299      	cmp	r1, r3
 8005276:	bfde      	ittt	le
 8005278:	2330      	movle	r3, #48	@ 0x30
 800527a:	f806 3c01 	strble.w	r3, [r6, #-1]
 800527e:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005282:	1b92      	subs	r2, r2, r6
 8005284:	6122      	str	r2, [r4, #16]
 8005286:	464b      	mov	r3, r9
 8005288:	4621      	mov	r1, r4
 800528a:	4640      	mov	r0, r8
 800528c:	f8cd a000 	str.w	sl, [sp]
 8005290:	aa03      	add	r2, sp, #12
 8005292:	f7ff fee1 	bl	8005058 <_printf_common>
 8005296:	3001      	adds	r0, #1
 8005298:	d14a      	bne.n	8005330 <_printf_i+0x1f4>
 800529a:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800529e:	b004      	add	sp, #16
 80052a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80052a4:	6823      	ldr	r3, [r4, #0]
 80052a6:	f043 0320 	orr.w	r3, r3, #32
 80052aa:	6023      	str	r3, [r4, #0]
 80052ac:	2778      	movs	r7, #120	@ 0x78
 80052ae:	4832      	ldr	r0, [pc, #200]	@ (8005378 <_printf_i+0x23c>)
 80052b0:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80052b4:	6823      	ldr	r3, [r4, #0]
 80052b6:	6831      	ldr	r1, [r6, #0]
 80052b8:	061f      	lsls	r7, r3, #24
 80052ba:	f851 5b04 	ldr.w	r5, [r1], #4
 80052be:	d402      	bmi.n	80052c6 <_printf_i+0x18a>
 80052c0:	065f      	lsls	r7, r3, #25
 80052c2:	bf48      	it	mi
 80052c4:	b2ad      	uxthmi	r5, r5
 80052c6:	6031      	str	r1, [r6, #0]
 80052c8:	07d9      	lsls	r1, r3, #31
 80052ca:	bf44      	itt	mi
 80052cc:	f043 0320 	orrmi.w	r3, r3, #32
 80052d0:	6023      	strmi	r3, [r4, #0]
 80052d2:	b11d      	cbz	r5, 80052dc <_printf_i+0x1a0>
 80052d4:	2310      	movs	r3, #16
 80052d6:	e7ab      	b.n	8005230 <_printf_i+0xf4>
 80052d8:	4826      	ldr	r0, [pc, #152]	@ (8005374 <_printf_i+0x238>)
 80052da:	e7e9      	b.n	80052b0 <_printf_i+0x174>
 80052dc:	6823      	ldr	r3, [r4, #0]
 80052de:	f023 0320 	bic.w	r3, r3, #32
 80052e2:	6023      	str	r3, [r4, #0]
 80052e4:	e7f6      	b.n	80052d4 <_printf_i+0x198>
 80052e6:	4616      	mov	r6, r2
 80052e8:	e7bd      	b.n	8005266 <_printf_i+0x12a>
 80052ea:	6833      	ldr	r3, [r6, #0]
 80052ec:	6825      	ldr	r5, [r4, #0]
 80052ee:	1d18      	adds	r0, r3, #4
 80052f0:	6961      	ldr	r1, [r4, #20]
 80052f2:	6030      	str	r0, [r6, #0]
 80052f4:	062e      	lsls	r6, r5, #24
 80052f6:	681b      	ldr	r3, [r3, #0]
 80052f8:	d501      	bpl.n	80052fe <_printf_i+0x1c2>
 80052fa:	6019      	str	r1, [r3, #0]
 80052fc:	e002      	b.n	8005304 <_printf_i+0x1c8>
 80052fe:	0668      	lsls	r0, r5, #25
 8005300:	d5fb      	bpl.n	80052fa <_printf_i+0x1be>
 8005302:	8019      	strh	r1, [r3, #0]
 8005304:	2300      	movs	r3, #0
 8005306:	4616      	mov	r6, r2
 8005308:	6123      	str	r3, [r4, #16]
 800530a:	e7bc      	b.n	8005286 <_printf_i+0x14a>
 800530c:	6833      	ldr	r3, [r6, #0]
 800530e:	2100      	movs	r1, #0
 8005310:	1d1a      	adds	r2, r3, #4
 8005312:	6032      	str	r2, [r6, #0]
 8005314:	681e      	ldr	r6, [r3, #0]
 8005316:	6862      	ldr	r2, [r4, #4]
 8005318:	4630      	mov	r0, r6
 800531a:	f000 f907 	bl	800552c <memchr>
 800531e:	b108      	cbz	r0, 8005324 <_printf_i+0x1e8>
 8005320:	1b80      	subs	r0, r0, r6
 8005322:	6060      	str	r0, [r4, #4]
 8005324:	6863      	ldr	r3, [r4, #4]
 8005326:	6123      	str	r3, [r4, #16]
 8005328:	2300      	movs	r3, #0
 800532a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800532e:	e7aa      	b.n	8005286 <_printf_i+0x14a>
 8005330:	4632      	mov	r2, r6
 8005332:	4649      	mov	r1, r9
 8005334:	4640      	mov	r0, r8
 8005336:	6923      	ldr	r3, [r4, #16]
 8005338:	47d0      	blx	sl
 800533a:	3001      	adds	r0, #1
 800533c:	d0ad      	beq.n	800529a <_printf_i+0x15e>
 800533e:	6823      	ldr	r3, [r4, #0]
 8005340:	079b      	lsls	r3, r3, #30
 8005342:	d413      	bmi.n	800536c <_printf_i+0x230>
 8005344:	68e0      	ldr	r0, [r4, #12]
 8005346:	9b03      	ldr	r3, [sp, #12]
 8005348:	4298      	cmp	r0, r3
 800534a:	bfb8      	it	lt
 800534c:	4618      	movlt	r0, r3
 800534e:	e7a6      	b.n	800529e <_printf_i+0x162>
 8005350:	2301      	movs	r3, #1
 8005352:	4632      	mov	r2, r6
 8005354:	4649      	mov	r1, r9
 8005356:	4640      	mov	r0, r8
 8005358:	47d0      	blx	sl
 800535a:	3001      	adds	r0, #1
 800535c:	d09d      	beq.n	800529a <_printf_i+0x15e>
 800535e:	3501      	adds	r5, #1
 8005360:	68e3      	ldr	r3, [r4, #12]
 8005362:	9903      	ldr	r1, [sp, #12]
 8005364:	1a5b      	subs	r3, r3, r1
 8005366:	42ab      	cmp	r3, r5
 8005368:	dcf2      	bgt.n	8005350 <_printf_i+0x214>
 800536a:	e7eb      	b.n	8005344 <_printf_i+0x208>
 800536c:	2500      	movs	r5, #0
 800536e:	f104 0619 	add.w	r6, r4, #25
 8005372:	e7f5      	b.n	8005360 <_printf_i+0x224>
 8005374:	080058a2 	.word	0x080058a2
 8005378:	080058b3 	.word	0x080058b3

0800537c <__swbuf_r>:
 800537c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800537e:	460e      	mov	r6, r1
 8005380:	4614      	mov	r4, r2
 8005382:	4605      	mov	r5, r0
 8005384:	b118      	cbz	r0, 800538e <__swbuf_r+0x12>
 8005386:	6a03      	ldr	r3, [r0, #32]
 8005388:	b90b      	cbnz	r3, 800538e <__swbuf_r+0x12>
 800538a:	f7ff fa43 	bl	8004814 <__sinit>
 800538e:	69a3      	ldr	r3, [r4, #24]
 8005390:	60a3      	str	r3, [r4, #8]
 8005392:	89a3      	ldrh	r3, [r4, #12]
 8005394:	071a      	lsls	r2, r3, #28
 8005396:	d501      	bpl.n	800539c <__swbuf_r+0x20>
 8005398:	6923      	ldr	r3, [r4, #16]
 800539a:	b943      	cbnz	r3, 80053ae <__swbuf_r+0x32>
 800539c:	4621      	mov	r1, r4
 800539e:	4628      	mov	r0, r5
 80053a0:	f000 f82a 	bl	80053f8 <__swsetup_r>
 80053a4:	b118      	cbz	r0, 80053ae <__swbuf_r+0x32>
 80053a6:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 80053aa:	4638      	mov	r0, r7
 80053ac:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80053ae:	6823      	ldr	r3, [r4, #0]
 80053b0:	6922      	ldr	r2, [r4, #16]
 80053b2:	b2f6      	uxtb	r6, r6
 80053b4:	1a98      	subs	r0, r3, r2
 80053b6:	6963      	ldr	r3, [r4, #20]
 80053b8:	4637      	mov	r7, r6
 80053ba:	4283      	cmp	r3, r0
 80053bc:	dc05      	bgt.n	80053ca <__swbuf_r+0x4e>
 80053be:	4621      	mov	r1, r4
 80053c0:	4628      	mov	r0, r5
 80053c2:	f7ff fcb9 	bl	8004d38 <_fflush_r>
 80053c6:	2800      	cmp	r0, #0
 80053c8:	d1ed      	bne.n	80053a6 <__swbuf_r+0x2a>
 80053ca:	68a3      	ldr	r3, [r4, #8]
 80053cc:	3b01      	subs	r3, #1
 80053ce:	60a3      	str	r3, [r4, #8]
 80053d0:	6823      	ldr	r3, [r4, #0]
 80053d2:	1c5a      	adds	r2, r3, #1
 80053d4:	6022      	str	r2, [r4, #0]
 80053d6:	701e      	strb	r6, [r3, #0]
 80053d8:	6962      	ldr	r2, [r4, #20]
 80053da:	1c43      	adds	r3, r0, #1
 80053dc:	429a      	cmp	r2, r3
 80053de:	d004      	beq.n	80053ea <__swbuf_r+0x6e>
 80053e0:	89a3      	ldrh	r3, [r4, #12]
 80053e2:	07db      	lsls	r3, r3, #31
 80053e4:	d5e1      	bpl.n	80053aa <__swbuf_r+0x2e>
 80053e6:	2e0a      	cmp	r6, #10
 80053e8:	d1df      	bne.n	80053aa <__swbuf_r+0x2e>
 80053ea:	4621      	mov	r1, r4
 80053ec:	4628      	mov	r0, r5
 80053ee:	f7ff fca3 	bl	8004d38 <_fflush_r>
 80053f2:	2800      	cmp	r0, #0
 80053f4:	d0d9      	beq.n	80053aa <__swbuf_r+0x2e>
 80053f6:	e7d6      	b.n	80053a6 <__swbuf_r+0x2a>

080053f8 <__swsetup_r>:
 80053f8:	b538      	push	{r3, r4, r5, lr}
 80053fa:	4b29      	ldr	r3, [pc, #164]	@ (80054a0 <__swsetup_r+0xa8>)
 80053fc:	4605      	mov	r5, r0
 80053fe:	6818      	ldr	r0, [r3, #0]
 8005400:	460c      	mov	r4, r1
 8005402:	b118      	cbz	r0, 800540c <__swsetup_r+0x14>
 8005404:	6a03      	ldr	r3, [r0, #32]
 8005406:	b90b      	cbnz	r3, 800540c <__swsetup_r+0x14>
 8005408:	f7ff fa04 	bl	8004814 <__sinit>
 800540c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005410:	0719      	lsls	r1, r3, #28
 8005412:	d422      	bmi.n	800545a <__swsetup_r+0x62>
 8005414:	06da      	lsls	r2, r3, #27
 8005416:	d407      	bmi.n	8005428 <__swsetup_r+0x30>
 8005418:	2209      	movs	r2, #9
 800541a:	602a      	str	r2, [r5, #0]
 800541c:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8005420:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005424:	81a3      	strh	r3, [r4, #12]
 8005426:	e033      	b.n	8005490 <__swsetup_r+0x98>
 8005428:	0758      	lsls	r0, r3, #29
 800542a:	d512      	bpl.n	8005452 <__swsetup_r+0x5a>
 800542c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800542e:	b141      	cbz	r1, 8005442 <__swsetup_r+0x4a>
 8005430:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8005434:	4299      	cmp	r1, r3
 8005436:	d002      	beq.n	800543e <__swsetup_r+0x46>
 8005438:	4628      	mov	r0, r5
 800543a:	f7ff faff 	bl	8004a3c <_free_r>
 800543e:	2300      	movs	r3, #0
 8005440:	6363      	str	r3, [r4, #52]	@ 0x34
 8005442:	89a3      	ldrh	r3, [r4, #12]
 8005444:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8005448:	81a3      	strh	r3, [r4, #12]
 800544a:	2300      	movs	r3, #0
 800544c:	6063      	str	r3, [r4, #4]
 800544e:	6923      	ldr	r3, [r4, #16]
 8005450:	6023      	str	r3, [r4, #0]
 8005452:	89a3      	ldrh	r3, [r4, #12]
 8005454:	f043 0308 	orr.w	r3, r3, #8
 8005458:	81a3      	strh	r3, [r4, #12]
 800545a:	6923      	ldr	r3, [r4, #16]
 800545c:	b94b      	cbnz	r3, 8005472 <__swsetup_r+0x7a>
 800545e:	89a3      	ldrh	r3, [r4, #12]
 8005460:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005464:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8005468:	d003      	beq.n	8005472 <__swsetup_r+0x7a>
 800546a:	4621      	mov	r1, r4
 800546c:	4628      	mov	r0, r5
 800546e:	f000 f890 	bl	8005592 <__smakebuf_r>
 8005472:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8005476:	f013 0201 	ands.w	r2, r3, #1
 800547a:	d00a      	beq.n	8005492 <__swsetup_r+0x9a>
 800547c:	2200      	movs	r2, #0
 800547e:	60a2      	str	r2, [r4, #8]
 8005480:	6962      	ldr	r2, [r4, #20]
 8005482:	4252      	negs	r2, r2
 8005484:	61a2      	str	r2, [r4, #24]
 8005486:	6922      	ldr	r2, [r4, #16]
 8005488:	b942      	cbnz	r2, 800549c <__swsetup_r+0xa4>
 800548a:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800548e:	d1c5      	bne.n	800541c <__swsetup_r+0x24>
 8005490:	bd38      	pop	{r3, r4, r5, pc}
 8005492:	0799      	lsls	r1, r3, #30
 8005494:	bf58      	it	pl
 8005496:	6962      	ldrpl	r2, [r4, #20]
 8005498:	60a2      	str	r2, [r4, #8]
 800549a:	e7f4      	b.n	8005486 <__swsetup_r+0x8e>
 800549c:	2000      	movs	r0, #0
 800549e:	e7f7      	b.n	8005490 <__swsetup_r+0x98>
 80054a0:	20000040 	.word	0x20000040

080054a4 <_raise_r>:
 80054a4:	291f      	cmp	r1, #31
 80054a6:	b538      	push	{r3, r4, r5, lr}
 80054a8:	4605      	mov	r5, r0
 80054aa:	460c      	mov	r4, r1
 80054ac:	d904      	bls.n	80054b8 <_raise_r+0x14>
 80054ae:	2316      	movs	r3, #22
 80054b0:	6003      	str	r3, [r0, #0]
 80054b2:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80054b6:	bd38      	pop	{r3, r4, r5, pc}
 80054b8:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 80054ba:	b112      	cbz	r2, 80054c2 <_raise_r+0x1e>
 80054bc:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 80054c0:	b94b      	cbnz	r3, 80054d6 <_raise_r+0x32>
 80054c2:	4628      	mov	r0, r5
 80054c4:	f000 f830 	bl	8005528 <_getpid_r>
 80054c8:	4622      	mov	r2, r4
 80054ca:	4601      	mov	r1, r0
 80054cc:	4628      	mov	r0, r5
 80054ce:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80054d2:	f000 b817 	b.w	8005504 <_kill_r>
 80054d6:	2b01      	cmp	r3, #1
 80054d8:	d00a      	beq.n	80054f0 <_raise_r+0x4c>
 80054da:	1c59      	adds	r1, r3, #1
 80054dc:	d103      	bne.n	80054e6 <_raise_r+0x42>
 80054de:	2316      	movs	r3, #22
 80054e0:	6003      	str	r3, [r0, #0]
 80054e2:	2001      	movs	r0, #1
 80054e4:	e7e7      	b.n	80054b6 <_raise_r+0x12>
 80054e6:	2100      	movs	r1, #0
 80054e8:	4620      	mov	r0, r4
 80054ea:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054ee:	4798      	blx	r3
 80054f0:	2000      	movs	r0, #0
 80054f2:	e7e0      	b.n	80054b6 <_raise_r+0x12>

080054f4 <raise>:
 80054f4:	4b02      	ldr	r3, [pc, #8]	@ (8005500 <raise+0xc>)
 80054f6:	4601      	mov	r1, r0
 80054f8:	6818      	ldr	r0, [r3, #0]
 80054fa:	f7ff bfd3 	b.w	80054a4 <_raise_r>
 80054fe:	bf00      	nop
 8005500:	20000040 	.word	0x20000040

08005504 <_kill_r>:
 8005504:	b538      	push	{r3, r4, r5, lr}
 8005506:	2300      	movs	r3, #0
 8005508:	4d06      	ldr	r5, [pc, #24]	@ (8005524 <_kill_r+0x20>)
 800550a:	4604      	mov	r4, r0
 800550c:	4608      	mov	r0, r1
 800550e:	4611      	mov	r1, r2
 8005510:	602b      	str	r3, [r5, #0]
 8005512:	f7fd f8da 	bl	80026ca <_kill>
 8005516:	1c43      	adds	r3, r0, #1
 8005518:	d102      	bne.n	8005520 <_kill_r+0x1c>
 800551a:	682b      	ldr	r3, [r5, #0]
 800551c:	b103      	cbz	r3, 8005520 <_kill_r+0x1c>
 800551e:	6023      	str	r3, [r4, #0]
 8005520:	bd38      	pop	{r3, r4, r5, pc}
 8005522:	bf00      	nop
 8005524:	2000141c 	.word	0x2000141c

08005528 <_getpid_r>:
 8005528:	f7fd b8c8 	b.w	80026bc <_getpid>

0800552c <memchr>:
 800552c:	4603      	mov	r3, r0
 800552e:	b510      	push	{r4, lr}
 8005530:	b2c9      	uxtb	r1, r1
 8005532:	4402      	add	r2, r0
 8005534:	4293      	cmp	r3, r2
 8005536:	4618      	mov	r0, r3
 8005538:	d101      	bne.n	800553e <memchr+0x12>
 800553a:	2000      	movs	r0, #0
 800553c:	e003      	b.n	8005546 <memchr+0x1a>
 800553e:	7804      	ldrb	r4, [r0, #0]
 8005540:	3301      	adds	r3, #1
 8005542:	428c      	cmp	r4, r1
 8005544:	d1f6      	bne.n	8005534 <memchr+0x8>
 8005546:	bd10      	pop	{r4, pc}

08005548 <__swhatbuf_r>:
 8005548:	b570      	push	{r4, r5, r6, lr}
 800554a:	460c      	mov	r4, r1
 800554c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005550:	4615      	mov	r5, r2
 8005552:	2900      	cmp	r1, #0
 8005554:	461e      	mov	r6, r3
 8005556:	b096      	sub	sp, #88	@ 0x58
 8005558:	da0c      	bge.n	8005574 <__swhatbuf_r+0x2c>
 800555a:	89a3      	ldrh	r3, [r4, #12]
 800555c:	2100      	movs	r1, #0
 800555e:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005562:	bf14      	ite	ne
 8005564:	2340      	movne	r3, #64	@ 0x40
 8005566:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800556a:	2000      	movs	r0, #0
 800556c:	6031      	str	r1, [r6, #0]
 800556e:	602b      	str	r3, [r5, #0]
 8005570:	b016      	add	sp, #88	@ 0x58
 8005572:	bd70      	pop	{r4, r5, r6, pc}
 8005574:	466a      	mov	r2, sp
 8005576:	f000 f849 	bl	800560c <_fstat_r>
 800557a:	2800      	cmp	r0, #0
 800557c:	dbed      	blt.n	800555a <__swhatbuf_r+0x12>
 800557e:	9901      	ldr	r1, [sp, #4]
 8005580:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005584:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8005588:	4259      	negs	r1, r3
 800558a:	4159      	adcs	r1, r3
 800558c:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005590:	e7eb      	b.n	800556a <__swhatbuf_r+0x22>

08005592 <__smakebuf_r>:
 8005592:	898b      	ldrh	r3, [r1, #12]
 8005594:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005596:	079d      	lsls	r5, r3, #30
 8005598:	4606      	mov	r6, r0
 800559a:	460c      	mov	r4, r1
 800559c:	d507      	bpl.n	80055ae <__smakebuf_r+0x1c>
 800559e:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 80055a2:	6023      	str	r3, [r4, #0]
 80055a4:	6123      	str	r3, [r4, #16]
 80055a6:	2301      	movs	r3, #1
 80055a8:	6163      	str	r3, [r4, #20]
 80055aa:	b003      	add	sp, #12
 80055ac:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80055ae:	466a      	mov	r2, sp
 80055b0:	ab01      	add	r3, sp, #4
 80055b2:	f7ff ffc9 	bl	8005548 <__swhatbuf_r>
 80055b6:	9f00      	ldr	r7, [sp, #0]
 80055b8:	4605      	mov	r5, r0
 80055ba:	4639      	mov	r1, r7
 80055bc:	4630      	mov	r0, r6
 80055be:	f7ff faaf 	bl	8004b20 <_malloc_r>
 80055c2:	b948      	cbnz	r0, 80055d8 <__smakebuf_r+0x46>
 80055c4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80055c8:	059a      	lsls	r2, r3, #22
 80055ca:	d4ee      	bmi.n	80055aa <__smakebuf_r+0x18>
 80055cc:	f023 0303 	bic.w	r3, r3, #3
 80055d0:	f043 0302 	orr.w	r3, r3, #2
 80055d4:	81a3      	strh	r3, [r4, #12]
 80055d6:	e7e2      	b.n	800559e <__smakebuf_r+0xc>
 80055d8:	89a3      	ldrh	r3, [r4, #12]
 80055da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055de:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055e2:	81a3      	strh	r3, [r4, #12]
 80055e4:	9b01      	ldr	r3, [sp, #4]
 80055e6:	6020      	str	r0, [r4, #0]
 80055e8:	b15b      	cbz	r3, 8005602 <__smakebuf_r+0x70>
 80055ea:	4630      	mov	r0, r6
 80055ec:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055f0:	f000 f81e 	bl	8005630 <_isatty_r>
 80055f4:	b128      	cbz	r0, 8005602 <__smakebuf_r+0x70>
 80055f6:	89a3      	ldrh	r3, [r4, #12]
 80055f8:	f023 0303 	bic.w	r3, r3, #3
 80055fc:	f043 0301 	orr.w	r3, r3, #1
 8005600:	81a3      	strh	r3, [r4, #12]
 8005602:	89a3      	ldrh	r3, [r4, #12]
 8005604:	431d      	orrs	r5, r3
 8005606:	81a5      	strh	r5, [r4, #12]
 8005608:	e7cf      	b.n	80055aa <__smakebuf_r+0x18>
	...

0800560c <_fstat_r>:
 800560c:	b538      	push	{r3, r4, r5, lr}
 800560e:	2300      	movs	r3, #0
 8005610:	4d06      	ldr	r5, [pc, #24]	@ (800562c <_fstat_r+0x20>)
 8005612:	4604      	mov	r4, r0
 8005614:	4608      	mov	r0, r1
 8005616:	4611      	mov	r1, r2
 8005618:	602b      	str	r3, [r5, #0]
 800561a:	f7fd f8b5 	bl	8002788 <_fstat>
 800561e:	1c43      	adds	r3, r0, #1
 8005620:	d102      	bne.n	8005628 <_fstat_r+0x1c>
 8005622:	682b      	ldr	r3, [r5, #0]
 8005624:	b103      	cbz	r3, 8005628 <_fstat_r+0x1c>
 8005626:	6023      	str	r3, [r4, #0]
 8005628:	bd38      	pop	{r3, r4, r5, pc}
 800562a:	bf00      	nop
 800562c:	2000141c 	.word	0x2000141c

08005630 <_isatty_r>:
 8005630:	b538      	push	{r3, r4, r5, lr}
 8005632:	2300      	movs	r3, #0
 8005634:	4d05      	ldr	r5, [pc, #20]	@ (800564c <_isatty_r+0x1c>)
 8005636:	4604      	mov	r4, r0
 8005638:	4608      	mov	r0, r1
 800563a:	602b      	str	r3, [r5, #0]
 800563c:	f7fd f8b3 	bl	80027a6 <_isatty>
 8005640:	1c43      	adds	r3, r0, #1
 8005642:	d102      	bne.n	800564a <_isatty_r+0x1a>
 8005644:	682b      	ldr	r3, [r5, #0]
 8005646:	b103      	cbz	r3, 800564a <_isatty_r+0x1a>
 8005648:	6023      	str	r3, [r4, #0]
 800564a:	bd38      	pop	{r3, r4, r5, pc}
 800564c:	2000141c 	.word	0x2000141c

08005650 <_init>:
 8005650:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005652:	bf00      	nop
 8005654:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005656:	bc08      	pop	{r3}
 8005658:	469e      	mov	lr, r3
 800565a:	4770      	bx	lr

0800565c <_fini>:
 800565c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800565e:	bf00      	nop
 8005660:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005662:	bc08      	pop	{r3}
 8005664:	469e      	mov	lr, r3
 8005666:	4770      	bx	lr
