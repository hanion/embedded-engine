
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000551c  08000110  08000110  00001110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000150  0800562c  0800562c  0000662c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800577c  0800577c  00007090  2**0
                  CONTENTS
  4 .ARM          00000000  0800577c  0800577c  00007090  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800577c  0800577c  00007090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800577c  0800577c  0000677c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08005780  08005780  00006780  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000090  20000000  08005784  00007000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000139c  20000090  08005814  00007090  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000142c  08005814  0000742c  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00007090  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b04f  00000000  00000000  000070b9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020e8  00000000  00000000  00012108  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000d40  00000000  00000000  000141f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000a41  00000000  00000000  00014f30  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018f38  00000000  00000000  00015971  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000e05b  00000000  00000000  0002e8a9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c609  00000000  00000000  0003c904  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000c8f0d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004188  00000000  00000000  000c8f50  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000cd0d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	@ (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	@ (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	20000090 	.word	0x20000090
 800012c:	00000000 	.word	0x00000000
 8000130:	08005614 	.word	0x08005614

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	@ (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	@ (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	@ (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	20000094 	.word	0x20000094
 800014c:	08005614 	.word	0x08005614

08000150 <__aeabi_drsub>:
 8000150:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000154:	e002      	b.n	800015c <__adddf3>
 8000156:	bf00      	nop

08000158 <__aeabi_dsub>:
 8000158:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800015c <__adddf3>:
 800015c:	b530      	push	{r4, r5, lr}
 800015e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000162:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000166:	ea94 0f05 	teq	r4, r5
 800016a:	bf08      	it	eq
 800016c:	ea90 0f02 	teqeq	r0, r2
 8000170:	bf1f      	itttt	ne
 8000172:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000176:	ea55 0c02 	orrsne.w	ip, r5, r2
 800017a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000182:	f000 80e2 	beq.w	800034a <__adddf3+0x1ee>
 8000186:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800018a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018e:	bfb8      	it	lt
 8000190:	426d      	neglt	r5, r5
 8000192:	dd0c      	ble.n	80001ae <__adddf3+0x52>
 8000194:	442c      	add	r4, r5
 8000196:	ea80 0202 	eor.w	r2, r0, r2
 800019a:	ea81 0303 	eor.w	r3, r1, r3
 800019e:	ea82 0000 	eor.w	r0, r2, r0
 80001a2:	ea83 0101 	eor.w	r1, r3, r1
 80001a6:	ea80 0202 	eor.w	r2, r0, r2
 80001aa:	ea81 0303 	eor.w	r3, r1, r3
 80001ae:	2d36      	cmp	r5, #54	@ 0x36
 80001b0:	bf88      	it	hi
 80001b2:	bd30      	pophi	{r4, r5, pc}
 80001b4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001bc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001c0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c4:	d002      	beq.n	80001cc <__adddf3+0x70>
 80001c6:	4240      	negs	r0, r0
 80001c8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001cc:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001d0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d8:	d002      	beq.n	80001e0 <__adddf3+0x84>
 80001da:	4252      	negs	r2, r2
 80001dc:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001e0:	ea94 0f05 	teq	r4, r5
 80001e4:	f000 80a7 	beq.w	8000336 <__adddf3+0x1da>
 80001e8:	f1a4 0401 	sub.w	r4, r4, #1
 80001ec:	f1d5 0e20 	rsbs	lr, r5, #32
 80001f0:	db0d      	blt.n	800020e <__adddf3+0xb2>
 80001f2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f6:	fa22 f205 	lsr.w	r2, r2, r5
 80001fa:	1880      	adds	r0, r0, r2
 80001fc:	f141 0100 	adc.w	r1, r1, #0
 8000200:	fa03 f20e 	lsl.w	r2, r3, lr
 8000204:	1880      	adds	r0, r0, r2
 8000206:	fa43 f305 	asr.w	r3, r3, r5
 800020a:	4159      	adcs	r1, r3
 800020c:	e00e      	b.n	800022c <__adddf3+0xd0>
 800020e:	f1a5 0520 	sub.w	r5, r5, #32
 8000212:	f10e 0e20 	add.w	lr, lr, #32
 8000216:	2a01      	cmp	r2, #1
 8000218:	fa03 fc0e 	lsl.w	ip, r3, lr
 800021c:	bf28      	it	cs
 800021e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000222:	fa43 f305 	asr.w	r3, r3, r5
 8000226:	18c0      	adds	r0, r0, r3
 8000228:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800022c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000230:	d507      	bpl.n	8000242 <__adddf3+0xe6>
 8000232:	f04f 0e00 	mov.w	lr, #0
 8000236:	f1dc 0c00 	rsbs	ip, ip, #0
 800023a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000242:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000246:	d31b      	bcc.n	8000280 <__adddf3+0x124>
 8000248:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800024c:	d30c      	bcc.n	8000268 <__adddf3+0x10c>
 800024e:	0849      	lsrs	r1, r1, #1
 8000250:	ea5f 0030 	movs.w	r0, r0, rrx
 8000254:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000258:	f104 0401 	add.w	r4, r4, #1
 800025c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000260:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000264:	f080 809a 	bcs.w	800039c <__adddf3+0x240>
 8000268:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 800026c:	bf08      	it	eq
 800026e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000272:	f150 0000 	adcs.w	r0, r0, #0
 8000276:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800027a:	ea41 0105 	orr.w	r1, r1, r5
 800027e:	bd30      	pop	{r4, r5, pc}
 8000280:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000284:	4140      	adcs	r0, r0
 8000286:	eb41 0101 	adc.w	r1, r1, r1
 800028a:	3c01      	subs	r4, #1
 800028c:	bf28      	it	cs
 800028e:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 8000292:	d2e9      	bcs.n	8000268 <__adddf3+0x10c>
 8000294:	f091 0f00 	teq	r1, #0
 8000298:	bf04      	itt	eq
 800029a:	4601      	moveq	r1, r0
 800029c:	2000      	moveq	r0, #0
 800029e:	fab1 f381 	clz	r3, r1
 80002a2:	bf08      	it	eq
 80002a4:	3320      	addeq	r3, #32
 80002a6:	f1a3 030b 	sub.w	r3, r3, #11
 80002aa:	f1b3 0220 	subs.w	r2, r3, #32
 80002ae:	da0c      	bge.n	80002ca <__adddf3+0x16e>
 80002b0:	320c      	adds	r2, #12
 80002b2:	dd08      	ble.n	80002c6 <__adddf3+0x16a>
 80002b4:	f102 0c14 	add.w	ip, r2, #20
 80002b8:	f1c2 020c 	rsb	r2, r2, #12
 80002bc:	fa01 f00c 	lsl.w	r0, r1, ip
 80002c0:	fa21 f102 	lsr.w	r1, r1, r2
 80002c4:	e00c      	b.n	80002e0 <__adddf3+0x184>
 80002c6:	f102 0214 	add.w	r2, r2, #20
 80002ca:	bfd8      	it	le
 80002cc:	f1c2 0c20 	rsble	ip, r2, #32
 80002d0:	fa01 f102 	lsl.w	r1, r1, r2
 80002d4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d8:	bfdc      	itt	le
 80002da:	ea41 010c 	orrle.w	r1, r1, ip
 80002de:	4090      	lslle	r0, r2
 80002e0:	1ae4      	subs	r4, r4, r3
 80002e2:	bfa2      	ittt	ge
 80002e4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e8:	4329      	orrge	r1, r5
 80002ea:	bd30      	popge	{r4, r5, pc}
 80002ec:	ea6f 0404 	mvn.w	r4, r4
 80002f0:	3c1f      	subs	r4, #31
 80002f2:	da1c      	bge.n	800032e <__adddf3+0x1d2>
 80002f4:	340c      	adds	r4, #12
 80002f6:	dc0e      	bgt.n	8000316 <__adddf3+0x1ba>
 80002f8:	f104 0414 	add.w	r4, r4, #20
 80002fc:	f1c4 0220 	rsb	r2, r4, #32
 8000300:	fa20 f004 	lsr.w	r0, r0, r4
 8000304:	fa01 f302 	lsl.w	r3, r1, r2
 8000308:	ea40 0003 	orr.w	r0, r0, r3
 800030c:	fa21 f304 	lsr.w	r3, r1, r4
 8000310:	ea45 0103 	orr.w	r1, r5, r3
 8000314:	bd30      	pop	{r4, r5, pc}
 8000316:	f1c4 040c 	rsb	r4, r4, #12
 800031a:	f1c4 0220 	rsb	r2, r4, #32
 800031e:	fa20 f002 	lsr.w	r0, r0, r2
 8000322:	fa01 f304 	lsl.w	r3, r1, r4
 8000326:	ea40 0003 	orr.w	r0, r0, r3
 800032a:	4629      	mov	r1, r5
 800032c:	bd30      	pop	{r4, r5, pc}
 800032e:	fa21 f004 	lsr.w	r0, r1, r4
 8000332:	4629      	mov	r1, r5
 8000334:	bd30      	pop	{r4, r5, pc}
 8000336:	f094 0f00 	teq	r4, #0
 800033a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033e:	bf06      	itte	eq
 8000340:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000344:	3401      	addeq	r4, #1
 8000346:	3d01      	subne	r5, #1
 8000348:	e74e      	b.n	80001e8 <__adddf3+0x8c>
 800034a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034e:	bf18      	it	ne
 8000350:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000354:	d029      	beq.n	80003aa <__adddf3+0x24e>
 8000356:	ea94 0f05 	teq	r4, r5
 800035a:	bf08      	it	eq
 800035c:	ea90 0f02 	teqeq	r0, r2
 8000360:	d005      	beq.n	800036e <__adddf3+0x212>
 8000362:	ea54 0c00 	orrs.w	ip, r4, r0
 8000366:	bf04      	itt	eq
 8000368:	4619      	moveq	r1, r3
 800036a:	4610      	moveq	r0, r2
 800036c:	bd30      	pop	{r4, r5, pc}
 800036e:	ea91 0f03 	teq	r1, r3
 8000372:	bf1e      	ittt	ne
 8000374:	2100      	movne	r1, #0
 8000376:	2000      	movne	r0, #0
 8000378:	bd30      	popne	{r4, r5, pc}
 800037a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037e:	d105      	bne.n	800038c <__adddf3+0x230>
 8000380:	0040      	lsls	r0, r0, #1
 8000382:	4149      	adcs	r1, r1
 8000384:	bf28      	it	cs
 8000386:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 800038a:	bd30      	pop	{r4, r5, pc}
 800038c:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 8000390:	bf3c      	itt	cc
 8000392:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000396:	bd30      	popcc	{r4, r5, pc}
 8000398:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800039c:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80003a0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a4:	f04f 0000 	mov.w	r0, #0
 80003a8:	bd30      	pop	{r4, r5, pc}
 80003aa:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ae:	bf1a      	itte	ne
 80003b0:	4619      	movne	r1, r3
 80003b2:	4610      	movne	r0, r2
 80003b4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b8:	bf1c      	itt	ne
 80003ba:	460b      	movne	r3, r1
 80003bc:	4602      	movne	r2, r0
 80003be:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003c2:	bf06      	itte	eq
 80003c4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c8:	ea91 0f03 	teqeq	r1, r3
 80003cc:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003d0:	bd30      	pop	{r4, r5, pc}
 80003d2:	bf00      	nop

080003d4 <__aeabi_ui2d>:
 80003d4:	f090 0f00 	teq	r0, #0
 80003d8:	bf04      	itt	eq
 80003da:	2100      	moveq	r1, #0
 80003dc:	4770      	bxeq	lr
 80003de:	b530      	push	{r4, r5, lr}
 80003e0:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e4:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e8:	f04f 0500 	mov.w	r5, #0
 80003ec:	f04f 0100 	mov.w	r1, #0
 80003f0:	e750      	b.n	8000294 <__adddf3+0x138>
 80003f2:	bf00      	nop

080003f4 <__aeabi_i2d>:
 80003f4:	f090 0f00 	teq	r0, #0
 80003f8:	bf04      	itt	eq
 80003fa:	2100      	moveq	r1, #0
 80003fc:	4770      	bxeq	lr
 80003fe:	b530      	push	{r4, r5, lr}
 8000400:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000404:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000408:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800040c:	bf48      	it	mi
 800040e:	4240      	negmi	r0, r0
 8000410:	f04f 0100 	mov.w	r1, #0
 8000414:	e73e      	b.n	8000294 <__adddf3+0x138>
 8000416:	bf00      	nop

08000418 <__aeabi_f2d>:
 8000418:	0042      	lsls	r2, r0, #1
 800041a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000422:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000426:	bf1f      	itttt	ne
 8000428:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800042c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000430:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000434:	4770      	bxne	lr
 8000436:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800043a:	bf08      	it	eq
 800043c:	4770      	bxeq	lr
 800043e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000442:	bf04      	itt	eq
 8000444:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000448:	4770      	bxeq	lr
 800044a:	b530      	push	{r4, r5, lr}
 800044c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000450:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000454:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000458:	e71c      	b.n	8000294 <__adddf3+0x138>
 800045a:	bf00      	nop

0800045c <__aeabi_ul2d>:
 800045c:	ea50 0201 	orrs.w	r2, r0, r1
 8000460:	bf08      	it	eq
 8000462:	4770      	bxeq	lr
 8000464:	b530      	push	{r4, r5, lr}
 8000466:	f04f 0500 	mov.w	r5, #0
 800046a:	e00a      	b.n	8000482 <__aeabi_l2d+0x16>

0800046c <__aeabi_l2d>:
 800046c:	ea50 0201 	orrs.w	r2, r0, r1
 8000470:	bf08      	it	eq
 8000472:	4770      	bxeq	lr
 8000474:	b530      	push	{r4, r5, lr}
 8000476:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 800047a:	d502      	bpl.n	8000482 <__aeabi_l2d+0x16>
 800047c:	4240      	negs	r0, r0
 800047e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000482:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000486:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 800048a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048e:	f43f aed8 	beq.w	8000242 <__adddf3+0xe6>
 8000492:	f04f 0203 	mov.w	r2, #3
 8000496:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049a:	bf18      	it	ne
 800049c:	3203      	addne	r2, #3
 800049e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80004a2:	bf18      	it	ne
 80004a4:	3203      	addne	r2, #3
 80004a6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004aa:	f1c2 0320 	rsb	r3, r2, #32
 80004ae:	fa00 fc03 	lsl.w	ip, r0, r3
 80004b2:	fa20 f002 	lsr.w	r0, r0, r2
 80004b6:	fa01 fe03 	lsl.w	lr, r1, r3
 80004ba:	ea40 000e 	orr.w	r0, r0, lr
 80004be:	fa21 f102 	lsr.w	r1, r1, r2
 80004c2:	4414      	add	r4, r2
 80004c4:	e6bd      	b.n	8000242 <__adddf3+0xe6>
 80004c6:	bf00      	nop

080004c8 <__aeabi_dmul>:
 80004c8:	b570      	push	{r4, r5, r6, lr}
 80004ca:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ce:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004d2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d6:	bf1d      	ittte	ne
 80004d8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004dc:	ea94 0f0c 	teqne	r4, ip
 80004e0:	ea95 0f0c 	teqne	r5, ip
 80004e4:	f000 f8de 	bleq	80006a4 <__aeabi_dmul+0x1dc>
 80004e8:	442c      	add	r4, r5
 80004ea:	ea81 0603 	eor.w	r6, r1, r3
 80004ee:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004f2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004fa:	bf18      	it	ne
 80004fc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000500:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000504:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000508:	d038      	beq.n	800057c <__aeabi_dmul+0xb4>
 800050a:	fba0 ce02 	umull	ip, lr, r0, r2
 800050e:	f04f 0500 	mov.w	r5, #0
 8000512:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000516:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800051a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051e:	f04f 0600 	mov.w	r6, #0
 8000522:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000526:	f09c 0f00 	teq	ip, #0
 800052a:	bf18      	it	ne
 800052c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000530:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000534:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000538:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800053c:	d204      	bcs.n	8000548 <__aeabi_dmul+0x80>
 800053e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000542:	416d      	adcs	r5, r5
 8000544:	eb46 0606 	adc.w	r6, r6, r6
 8000548:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800054c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000550:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000554:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000558:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800055c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 8000560:	bf88      	it	hi
 8000562:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000566:	d81e      	bhi.n	80005a6 <__aeabi_dmul+0xde>
 8000568:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 800056c:	bf08      	it	eq
 800056e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000572:	f150 0000 	adcs.w	r0, r0, #0
 8000576:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800057a:	bd70      	pop	{r4, r5, r6, pc}
 800057c:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 8000580:	ea46 0101 	orr.w	r1, r6, r1
 8000584:	ea40 0002 	orr.w	r0, r0, r2
 8000588:	ea81 0103 	eor.w	r1, r1, r3
 800058c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000590:	bfc2      	ittt	gt
 8000592:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000596:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800059a:	bd70      	popgt	{r4, r5, r6, pc}
 800059c:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80005a0:	f04f 0e00 	mov.w	lr, #0
 80005a4:	3c01      	subs	r4, #1
 80005a6:	f300 80ab 	bgt.w	8000700 <__aeabi_dmul+0x238>
 80005aa:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005ae:	bfde      	ittt	le
 80005b0:	2000      	movle	r0, #0
 80005b2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b6:	bd70      	pople	{r4, r5, r6, pc}
 80005b8:	f1c4 0400 	rsb	r4, r4, #0
 80005bc:	3c20      	subs	r4, #32
 80005be:	da35      	bge.n	800062c <__aeabi_dmul+0x164>
 80005c0:	340c      	adds	r4, #12
 80005c2:	dc1b      	bgt.n	80005fc <__aeabi_dmul+0x134>
 80005c4:	f104 0414 	add.w	r4, r4, #20
 80005c8:	f1c4 0520 	rsb	r5, r4, #32
 80005cc:	fa00 f305 	lsl.w	r3, r0, r5
 80005d0:	fa20 f004 	lsr.w	r0, r0, r4
 80005d4:	fa01 f205 	lsl.w	r2, r1, r5
 80005d8:	ea40 0002 	orr.w	r0, r0, r2
 80005dc:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005e0:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e8:	fa21 f604 	lsr.w	r6, r1, r4
 80005ec:	eb42 0106 	adc.w	r1, r2, r6
 80005f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f4:	bf08      	it	eq
 80005f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005fa:	bd70      	pop	{r4, r5, r6, pc}
 80005fc:	f1c4 040c 	rsb	r4, r4, #12
 8000600:	f1c4 0520 	rsb	r5, r4, #32
 8000604:	fa00 f304 	lsl.w	r3, r0, r4
 8000608:	fa20 f005 	lsr.w	r0, r0, r5
 800060c:	fa01 f204 	lsl.w	r2, r1, r4
 8000610:	ea40 0002 	orr.w	r0, r0, r2
 8000614:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000618:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800061c:	f141 0100 	adc.w	r1, r1, #0
 8000620:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000624:	bf08      	it	eq
 8000626:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800062a:	bd70      	pop	{r4, r5, r6, pc}
 800062c:	f1c4 0520 	rsb	r5, r4, #32
 8000630:	fa00 f205 	lsl.w	r2, r0, r5
 8000634:	ea4e 0e02 	orr.w	lr, lr, r2
 8000638:	fa20 f304 	lsr.w	r3, r0, r4
 800063c:	fa01 f205 	lsl.w	r2, r1, r5
 8000640:	ea43 0302 	orr.w	r3, r3, r2
 8000644:	fa21 f004 	lsr.w	r0, r1, r4
 8000648:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800064c:	fa21 f204 	lsr.w	r2, r1, r4
 8000650:	ea20 0002 	bic.w	r0, r0, r2
 8000654:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000658:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800065c:	bf08      	it	eq
 800065e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000662:	bd70      	pop	{r4, r5, r6, pc}
 8000664:	f094 0f00 	teq	r4, #0
 8000668:	d10f      	bne.n	800068a <__aeabi_dmul+0x1c2>
 800066a:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066e:	0040      	lsls	r0, r0, #1
 8000670:	eb41 0101 	adc.w	r1, r1, r1
 8000674:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000678:	bf08      	it	eq
 800067a:	3c01      	subeq	r4, #1
 800067c:	d0f7      	beq.n	800066e <__aeabi_dmul+0x1a6>
 800067e:	ea41 0106 	orr.w	r1, r1, r6
 8000682:	f095 0f00 	teq	r5, #0
 8000686:	bf18      	it	ne
 8000688:	4770      	bxne	lr
 800068a:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068e:	0052      	lsls	r2, r2, #1
 8000690:	eb43 0303 	adc.w	r3, r3, r3
 8000694:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000698:	bf08      	it	eq
 800069a:	3d01      	subeq	r5, #1
 800069c:	d0f7      	beq.n	800068e <__aeabi_dmul+0x1c6>
 800069e:	ea43 0306 	orr.w	r3, r3, r6
 80006a2:	4770      	bx	lr
 80006a4:	ea94 0f0c 	teq	r4, ip
 80006a8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006ac:	bf18      	it	ne
 80006ae:	ea95 0f0c 	teqne	r5, ip
 80006b2:	d00c      	beq.n	80006ce <__aeabi_dmul+0x206>
 80006b4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b8:	bf18      	it	ne
 80006ba:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006be:	d1d1      	bne.n	8000664 <__aeabi_dmul+0x19c>
 80006c0:	ea81 0103 	eor.w	r1, r1, r3
 80006c4:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c8:	f04f 0000 	mov.w	r0, #0
 80006cc:	bd70      	pop	{r4, r5, r6, pc}
 80006ce:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006d2:	bf06      	itte	eq
 80006d4:	4610      	moveq	r0, r2
 80006d6:	4619      	moveq	r1, r3
 80006d8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006dc:	d019      	beq.n	8000712 <__aeabi_dmul+0x24a>
 80006de:	ea94 0f0c 	teq	r4, ip
 80006e2:	d102      	bne.n	80006ea <__aeabi_dmul+0x222>
 80006e4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e8:	d113      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006ea:	ea95 0f0c 	teq	r5, ip
 80006ee:	d105      	bne.n	80006fc <__aeabi_dmul+0x234>
 80006f0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f4:	bf1c      	itt	ne
 80006f6:	4610      	movne	r0, r2
 80006f8:	4619      	movne	r1, r3
 80006fa:	d10a      	bne.n	8000712 <__aeabi_dmul+0x24a>
 80006fc:	ea81 0103 	eor.w	r1, r1, r3
 8000700:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000704:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000708:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800070c:	f04f 0000 	mov.w	r0, #0
 8000710:	bd70      	pop	{r4, r5, r6, pc}
 8000712:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000716:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800071a:	bd70      	pop	{r4, r5, r6, pc}

0800071c <__aeabi_ddiv>:
 800071c:	b570      	push	{r4, r5, r6, lr}
 800071e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000722:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000726:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800072a:	bf1d      	ittte	ne
 800072c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000730:	ea94 0f0c 	teqne	r4, ip
 8000734:	ea95 0f0c 	teqne	r5, ip
 8000738:	f000 f8a7 	bleq	800088a <__aeabi_ddiv+0x16e>
 800073c:	eba4 0405 	sub.w	r4, r4, r5
 8000740:	ea81 0e03 	eor.w	lr, r1, r3
 8000744:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000748:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800074c:	f000 8088 	beq.w	8000860 <__aeabi_ddiv+0x144>
 8000750:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000754:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000758:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800075c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000760:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000764:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000768:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800076c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000770:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000774:	429d      	cmp	r5, r3
 8000776:	bf08      	it	eq
 8000778:	4296      	cmpeq	r6, r2
 800077a:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077e:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 8000782:	d202      	bcs.n	800078a <__aeabi_ddiv+0x6e>
 8000784:	085b      	lsrs	r3, r3, #1
 8000786:	ea4f 0232 	mov.w	r2, r2, rrx
 800078a:	1ab6      	subs	r6, r6, r2
 800078c:	eb65 0503 	sbc.w	r5, r5, r3
 8000790:	085b      	lsrs	r3, r3, #1
 8000792:	ea4f 0232 	mov.w	r2, r2, rrx
 8000796:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 800079a:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079e:	ebb6 0e02 	subs.w	lr, r6, r2
 80007a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a6:	bf22      	ittt	cs
 80007a8:	1ab6      	subcs	r6, r6, r2
 80007aa:	4675      	movcs	r5, lr
 80007ac:	ea40 000c 	orrcs.w	r0, r0, ip
 80007b0:	085b      	lsrs	r3, r3, #1
 80007b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007be:	bf22      	ittt	cs
 80007c0:	1ab6      	subcs	r6, r6, r2
 80007c2:	4675      	movcs	r5, lr
 80007c4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c8:	085b      	lsrs	r3, r3, #1
 80007ca:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80007d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d6:	bf22      	ittt	cs
 80007d8:	1ab6      	subcs	r6, r6, r2
 80007da:	4675      	movcs	r5, lr
 80007dc:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007e0:	085b      	lsrs	r3, r3, #1
 80007e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ee:	bf22      	ittt	cs
 80007f0:	1ab6      	subcs	r6, r6, r2
 80007f2:	4675      	movcs	r5, lr
 80007f4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f8:	ea55 0e06 	orrs.w	lr, r5, r6
 80007fc:	d018      	beq.n	8000830 <__aeabi_ddiv+0x114>
 80007fe:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000802:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000806:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800080a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000812:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000816:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800081a:	d1c0      	bne.n	800079e <__aeabi_ddiv+0x82>
 800081c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000820:	d10b      	bne.n	800083a <__aeabi_ddiv+0x11e>
 8000822:	ea41 0100 	orr.w	r1, r1, r0
 8000826:	f04f 0000 	mov.w	r0, #0
 800082a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082e:	e7b6      	b.n	800079e <__aeabi_ddiv+0x82>
 8000830:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000834:	bf04      	itt	eq
 8000836:	4301      	orreq	r1, r0
 8000838:	2000      	moveq	r0, #0
 800083a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083e:	bf88      	it	hi
 8000840:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000844:	f63f aeaf 	bhi.w	80005a6 <__aeabi_dmul+0xde>
 8000848:	ebb5 0c03 	subs.w	ip, r5, r3
 800084c:	bf04      	itt	eq
 800084e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000852:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000856:	f150 0000 	adcs.w	r0, r0, #0
 800085a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085e:	bd70      	pop	{r4, r5, r6, pc}
 8000860:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000864:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000868:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800086c:	bfc2      	ittt	gt
 800086e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000872:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000876:	bd70      	popgt	{r4, r5, r6, pc}
 8000878:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800087c:	f04f 0e00 	mov.w	lr, #0
 8000880:	3c01      	subs	r4, #1
 8000882:	e690      	b.n	80005a6 <__aeabi_dmul+0xde>
 8000884:	ea45 0e06 	orr.w	lr, r5, r6
 8000888:	e68d      	b.n	80005a6 <__aeabi_dmul+0xde>
 800088a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088e:	ea94 0f0c 	teq	r4, ip
 8000892:	bf08      	it	eq
 8000894:	ea95 0f0c 	teqeq	r5, ip
 8000898:	f43f af3b 	beq.w	8000712 <__aeabi_dmul+0x24a>
 800089c:	ea94 0f0c 	teq	r4, ip
 80008a0:	d10a      	bne.n	80008b8 <__aeabi_ddiv+0x19c>
 80008a2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a6:	f47f af34 	bne.w	8000712 <__aeabi_dmul+0x24a>
 80008aa:	ea95 0f0c 	teq	r5, ip
 80008ae:	f47f af25 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008b2:	4610      	mov	r0, r2
 80008b4:	4619      	mov	r1, r3
 80008b6:	e72c      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008b8:	ea95 0f0c 	teq	r5, ip
 80008bc:	d106      	bne.n	80008cc <__aeabi_ddiv+0x1b0>
 80008be:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c2:	f43f aefd 	beq.w	80006c0 <__aeabi_dmul+0x1f8>
 80008c6:	4610      	mov	r0, r2
 80008c8:	4619      	mov	r1, r3
 80008ca:	e722      	b.n	8000712 <__aeabi_dmul+0x24a>
 80008cc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008d0:	bf18      	it	ne
 80008d2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d6:	f47f aec5 	bne.w	8000664 <__aeabi_dmul+0x19c>
 80008da:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008de:	f47f af0d 	bne.w	80006fc <__aeabi_dmul+0x234>
 80008e2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e6:	f47f aeeb 	bne.w	80006c0 <__aeabi_dmul+0x1f8>
 80008ea:	e712      	b.n	8000712 <__aeabi_dmul+0x24a>

080008ec <__aeabi_d2f>:
 80008ec:	ea4f 0241 	mov.w	r2, r1, lsl #1
 80008f0:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 80008f4:	bf24      	itt	cs
 80008f6:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 80008fa:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 80008fe:	d90d      	bls.n	800091c <__aeabi_d2f+0x30>
 8000900:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000904:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000908:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 800090c:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000910:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000914:	bf08      	it	eq
 8000916:	f020 0001 	biceq.w	r0, r0, #1
 800091a:	4770      	bx	lr
 800091c:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000920:	d121      	bne.n	8000966 <__aeabi_d2f+0x7a>
 8000922:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000926:	bfbc      	itt	lt
 8000928:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 800092c:	4770      	bxlt	lr
 800092e:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000932:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000936:	f1c2 0218 	rsb	r2, r2, #24
 800093a:	f1c2 0c20 	rsb	ip, r2, #32
 800093e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000942:	fa20 f002 	lsr.w	r0, r0, r2
 8000946:	bf18      	it	ne
 8000948:	f040 0001 	orrne.w	r0, r0, #1
 800094c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000950:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000954:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000958:	ea40 000c 	orr.w	r0, r0, ip
 800095c:	fa23 f302 	lsr.w	r3, r3, r2
 8000960:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000964:	e7cc      	b.n	8000900 <__aeabi_d2f+0x14>
 8000966:	ea7f 5362 	mvns.w	r3, r2, asr #21
 800096a:	d107      	bne.n	800097c <__aeabi_d2f+0x90>
 800096c:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000970:	bf1e      	ittt	ne
 8000972:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000976:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 800097a:	4770      	bxne	lr
 800097c:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000980:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000984:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000988:	4770      	bx	lr
 800098a:	bf00      	nop

0800098c <__aeabi_frsub>:
 800098c:	f080 4000 	eor.w	r0, r0, #2147483648	@ 0x80000000
 8000990:	e002      	b.n	8000998 <__addsf3>
 8000992:	bf00      	nop

08000994 <__aeabi_fsub>:
 8000994:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000

08000998 <__addsf3>:
 8000998:	0042      	lsls	r2, r0, #1
 800099a:	bf1f      	itttt	ne
 800099c:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 80009a0:	ea92 0f03 	teqne	r2, r3
 80009a4:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 80009a8:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 80009ac:	d06a      	beq.n	8000a84 <__addsf3+0xec>
 80009ae:	ea4f 6212 	mov.w	r2, r2, lsr #24
 80009b2:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 80009b6:	bfc1      	itttt	gt
 80009b8:	18d2      	addgt	r2, r2, r3
 80009ba:	4041      	eorgt	r1, r0
 80009bc:	4048      	eorgt	r0, r1
 80009be:	4041      	eorgt	r1, r0
 80009c0:	bfb8      	it	lt
 80009c2:	425b      	neglt	r3, r3
 80009c4:	2b19      	cmp	r3, #25
 80009c6:	bf88      	it	hi
 80009c8:	4770      	bxhi	lr
 80009ca:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 80009ce:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 80009d2:	f020 407f 	bic.w	r0, r0, #4278190080	@ 0xff000000
 80009d6:	bf18      	it	ne
 80009d8:	4240      	negne	r0, r0
 80009da:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80009de:	f441 0100 	orr.w	r1, r1, #8388608	@ 0x800000
 80009e2:	f021 417f 	bic.w	r1, r1, #4278190080	@ 0xff000000
 80009e6:	bf18      	it	ne
 80009e8:	4249      	negne	r1, r1
 80009ea:	ea92 0f03 	teq	r2, r3
 80009ee:	d03f      	beq.n	8000a70 <__addsf3+0xd8>
 80009f0:	f1a2 0201 	sub.w	r2, r2, #1
 80009f4:	fa41 fc03 	asr.w	ip, r1, r3
 80009f8:	eb10 000c 	adds.w	r0, r0, ip
 80009fc:	f1c3 0320 	rsb	r3, r3, #32
 8000a00:	fa01 f103 	lsl.w	r1, r1, r3
 8000a04:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000a08:	d502      	bpl.n	8000a10 <__addsf3+0x78>
 8000a0a:	4249      	negs	r1, r1
 8000a0c:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000a10:	f5b0 0f00 	cmp.w	r0, #8388608	@ 0x800000
 8000a14:	d313      	bcc.n	8000a3e <__addsf3+0xa6>
 8000a16:	f1b0 7f80 	cmp.w	r0, #16777216	@ 0x1000000
 8000a1a:	d306      	bcc.n	8000a2a <__addsf3+0x92>
 8000a1c:	0840      	lsrs	r0, r0, #1
 8000a1e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000a22:	f102 0201 	add.w	r2, r2, #1
 8000a26:	2afe      	cmp	r2, #254	@ 0xfe
 8000a28:	d251      	bcs.n	8000ace <__addsf3+0x136>
 8000a2a:	f1b1 4f00 	cmp.w	r1, #2147483648	@ 0x80000000
 8000a2e:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000a32:	bf08      	it	eq
 8000a34:	f020 0001 	biceq.w	r0, r0, #1
 8000a38:	ea40 0003 	orr.w	r0, r0, r3
 8000a3c:	4770      	bx	lr
 8000a3e:	0049      	lsls	r1, r1, #1
 8000a40:	eb40 0000 	adc.w	r0, r0, r0
 8000a44:	3a01      	subs	r2, #1
 8000a46:	bf28      	it	cs
 8000a48:	f5b0 0f00 	cmpcs.w	r0, #8388608	@ 0x800000
 8000a4c:	d2ed      	bcs.n	8000a2a <__addsf3+0x92>
 8000a4e:	fab0 fc80 	clz	ip, r0
 8000a52:	f1ac 0c08 	sub.w	ip, ip, #8
 8000a56:	ebb2 020c 	subs.w	r2, r2, ip
 8000a5a:	fa00 f00c 	lsl.w	r0, r0, ip
 8000a5e:	bfaa      	itet	ge
 8000a60:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000a64:	4252      	neglt	r2, r2
 8000a66:	4318      	orrge	r0, r3
 8000a68:	bfbc      	itt	lt
 8000a6a:	40d0      	lsrlt	r0, r2
 8000a6c:	4318      	orrlt	r0, r3
 8000a6e:	4770      	bx	lr
 8000a70:	f092 0f00 	teq	r2, #0
 8000a74:	f481 0100 	eor.w	r1, r1, #8388608	@ 0x800000
 8000a78:	bf06      	itte	eq
 8000a7a:	f480 0000 	eoreq.w	r0, r0, #8388608	@ 0x800000
 8000a7e:	3201      	addeq	r2, #1
 8000a80:	3b01      	subne	r3, #1
 8000a82:	e7b5      	b.n	80009f0 <__addsf3+0x58>
 8000a84:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000a88:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000a8c:	bf18      	it	ne
 8000a8e:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000a92:	d021      	beq.n	8000ad8 <__addsf3+0x140>
 8000a94:	ea92 0f03 	teq	r2, r3
 8000a98:	d004      	beq.n	8000aa4 <__addsf3+0x10c>
 8000a9a:	f092 0f00 	teq	r2, #0
 8000a9e:	bf08      	it	eq
 8000aa0:	4608      	moveq	r0, r1
 8000aa2:	4770      	bx	lr
 8000aa4:	ea90 0f01 	teq	r0, r1
 8000aa8:	bf1c      	itt	ne
 8000aaa:	2000      	movne	r0, #0
 8000aac:	4770      	bxne	lr
 8000aae:	f012 4f7f 	tst.w	r2, #4278190080	@ 0xff000000
 8000ab2:	d104      	bne.n	8000abe <__addsf3+0x126>
 8000ab4:	0040      	lsls	r0, r0, #1
 8000ab6:	bf28      	it	cs
 8000ab8:	f040 4000 	orrcs.w	r0, r0, #2147483648	@ 0x80000000
 8000abc:	4770      	bx	lr
 8000abe:	f112 7200 	adds.w	r2, r2, #33554432	@ 0x2000000
 8000ac2:	bf3c      	itt	cc
 8000ac4:	f500 0000 	addcc.w	r0, r0, #8388608	@ 0x800000
 8000ac8:	4770      	bxcc	lr
 8000aca:	f000 4300 	and.w	r3, r0, #2147483648	@ 0x80000000
 8000ace:	f043 40fe 	orr.w	r0, r3, #2130706432	@ 0x7f000000
 8000ad2:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000ad6:	4770      	bx	lr
 8000ad8:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000adc:	bf16      	itet	ne
 8000ade:	4608      	movne	r0, r1
 8000ae0:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ae4:	4601      	movne	r1, r0
 8000ae6:	0242      	lsls	r2, r0, #9
 8000ae8:	bf06      	itte	eq
 8000aea:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000aee:	ea90 0f01 	teqeq	r0, r1
 8000af2:	f440 0080 	orrne.w	r0, r0, #4194304	@ 0x400000
 8000af6:	4770      	bx	lr

08000af8 <__aeabi_ui2f>:
 8000af8:	f04f 0300 	mov.w	r3, #0
 8000afc:	e004      	b.n	8000b08 <__aeabi_i2f+0x8>
 8000afe:	bf00      	nop

08000b00 <__aeabi_i2f>:
 8000b00:	f010 4300 	ands.w	r3, r0, #2147483648	@ 0x80000000
 8000b04:	bf48      	it	mi
 8000b06:	4240      	negmi	r0, r0
 8000b08:	ea5f 0c00 	movs.w	ip, r0
 8000b0c:	bf08      	it	eq
 8000b0e:	4770      	bxeq	lr
 8000b10:	f043 4396 	orr.w	r3, r3, #1258291200	@ 0x4b000000
 8000b14:	4601      	mov	r1, r0
 8000b16:	f04f 0000 	mov.w	r0, #0
 8000b1a:	e01c      	b.n	8000b56 <__aeabi_l2f+0x2a>

08000b1c <__aeabi_ul2f>:
 8000b1c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b20:	bf08      	it	eq
 8000b22:	4770      	bxeq	lr
 8000b24:	f04f 0300 	mov.w	r3, #0
 8000b28:	e00a      	b.n	8000b40 <__aeabi_l2f+0x14>
 8000b2a:	bf00      	nop

08000b2c <__aeabi_l2f>:
 8000b2c:	ea50 0201 	orrs.w	r2, r0, r1
 8000b30:	bf08      	it	eq
 8000b32:	4770      	bxeq	lr
 8000b34:	f011 4300 	ands.w	r3, r1, #2147483648	@ 0x80000000
 8000b38:	d502      	bpl.n	8000b40 <__aeabi_l2f+0x14>
 8000b3a:	4240      	negs	r0, r0
 8000b3c:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000b40:	ea5f 0c01 	movs.w	ip, r1
 8000b44:	bf02      	ittt	eq
 8000b46:	4684      	moveq	ip, r0
 8000b48:	4601      	moveq	r1, r0
 8000b4a:	2000      	moveq	r0, #0
 8000b4c:	f043 43b6 	orr.w	r3, r3, #1526726656	@ 0x5b000000
 8000b50:	bf08      	it	eq
 8000b52:	f1a3 5380 	subeq.w	r3, r3, #268435456	@ 0x10000000
 8000b56:	f5a3 0300 	sub.w	r3, r3, #8388608	@ 0x800000
 8000b5a:	fabc f28c 	clz	r2, ip
 8000b5e:	3a08      	subs	r2, #8
 8000b60:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000b64:	db10      	blt.n	8000b88 <__aeabi_l2f+0x5c>
 8000b66:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b6a:	4463      	add	r3, ip
 8000b6c:	fa00 fc02 	lsl.w	ip, r0, r2
 8000b70:	f1c2 0220 	rsb	r2, r2, #32
 8000b74:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000b78:	fa20 f202 	lsr.w	r2, r0, r2
 8000b7c:	eb43 0002 	adc.w	r0, r3, r2
 8000b80:	bf08      	it	eq
 8000b82:	f020 0001 	biceq.w	r0, r0, #1
 8000b86:	4770      	bx	lr
 8000b88:	f102 0220 	add.w	r2, r2, #32
 8000b8c:	fa01 fc02 	lsl.w	ip, r1, r2
 8000b90:	f1c2 0220 	rsb	r2, r2, #32
 8000b94:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000b98:	fa21 f202 	lsr.w	r2, r1, r2
 8000b9c:	eb43 0002 	adc.w	r0, r3, r2
 8000ba0:	bf08      	it	eq
 8000ba2:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000ba6:	4770      	bx	lr

08000ba8 <__aeabi_fmul>:
 8000ba8:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000bac:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000bb6:	ea92 0f0c 	teqne	r2, ip
 8000bba:	ea93 0f0c 	teqne	r3, ip
 8000bbe:	d06f      	beq.n	8000ca0 <__aeabi_fmul+0xf8>
 8000bc0:	441a      	add	r2, r3
 8000bc2:	ea80 0c01 	eor.w	ip, r0, r1
 8000bc6:	0240      	lsls	r0, r0, #9
 8000bc8:	bf18      	it	ne
 8000bca:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000bce:	d01e      	beq.n	8000c0e <__aeabi_fmul+0x66>
 8000bd0:	f04f 6300 	mov.w	r3, #134217728	@ 0x8000000
 8000bd4:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000bd8:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000bdc:	fba0 3101 	umull	r3, r1, r0, r1
 8000be0:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000be4:	f5b1 0f00 	cmp.w	r1, #8388608	@ 0x800000
 8000be8:	bf3e      	ittt	cc
 8000bea:	0049      	lslcc	r1, r1, #1
 8000bec:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 8000bf0:	005b      	lslcc	r3, r3, #1
 8000bf2:	ea40 0001 	orr.w	r0, r0, r1
 8000bf6:	f162 027f 	sbc.w	r2, r2, #127	@ 0x7f
 8000bfa:	2afd      	cmp	r2, #253	@ 0xfd
 8000bfc:	d81d      	bhi.n	8000c3a <__aeabi_fmul+0x92>
 8000bfe:	f1b3 4f00 	cmp.w	r3, #2147483648	@ 0x80000000
 8000c02:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c06:	bf08      	it	eq
 8000c08:	f020 0001 	biceq.w	r0, r0, #1
 8000c0c:	4770      	bx	lr
 8000c0e:	f090 0f00 	teq	r0, #0
 8000c12:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000c16:	bf08      	it	eq
 8000c18:	0249      	lsleq	r1, r1, #9
 8000c1a:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000c1e:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 8000c22:	3a7f      	subs	r2, #127	@ 0x7f
 8000c24:	bfc2      	ittt	gt
 8000c26:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000c2a:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000c2e:	4770      	bxgt	lr
 8000c30:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c34:	f04f 0300 	mov.w	r3, #0
 8000c38:	3a01      	subs	r2, #1
 8000c3a:	dc5d      	bgt.n	8000cf8 <__aeabi_fmul+0x150>
 8000c3c:	f112 0f19 	cmn.w	r2, #25
 8000c40:	bfdc      	itt	le
 8000c42:	f000 4000 	andle.w	r0, r0, #2147483648	@ 0x80000000
 8000c46:	4770      	bxle	lr
 8000c48:	f1c2 0200 	rsb	r2, r2, #0
 8000c4c:	0041      	lsls	r1, r0, #1
 8000c4e:	fa21 f102 	lsr.w	r1, r1, r2
 8000c52:	f1c2 0220 	rsb	r2, r2, #32
 8000c56:	fa00 fc02 	lsl.w	ip, r0, r2
 8000c5a:	ea5f 0031 	movs.w	r0, r1, rrx
 8000c5e:	f140 0000 	adc.w	r0, r0, #0
 8000c62:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 8000c66:	bf08      	it	eq
 8000c68:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000c6c:	4770      	bx	lr
 8000c6e:	f092 0f00 	teq	r2, #0
 8000c72:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000c76:	bf02      	ittt	eq
 8000c78:	0040      	lsleq	r0, r0, #1
 8000c7a:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000c7e:	3a01      	subeq	r2, #1
 8000c80:	d0f9      	beq.n	8000c76 <__aeabi_fmul+0xce>
 8000c82:	ea40 000c 	orr.w	r0, r0, ip
 8000c86:	f093 0f00 	teq	r3, #0
 8000c8a:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c8e:	bf02      	ittt	eq
 8000c90:	0049      	lsleq	r1, r1, #1
 8000c92:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000c96:	3b01      	subeq	r3, #1
 8000c98:	d0f9      	beq.n	8000c8e <__aeabi_fmul+0xe6>
 8000c9a:	ea41 010c 	orr.w	r1, r1, ip
 8000c9e:	e78f      	b.n	8000bc0 <__aeabi_fmul+0x18>
 8000ca0:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000ca4:	ea92 0f0c 	teq	r2, ip
 8000ca8:	bf18      	it	ne
 8000caa:	ea93 0f0c 	teqne	r3, ip
 8000cae:	d00a      	beq.n	8000cc6 <__aeabi_fmul+0x11e>
 8000cb0:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000cb4:	bf18      	it	ne
 8000cb6:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000cba:	d1d8      	bne.n	8000c6e <__aeabi_fmul+0xc6>
 8000cbc:	ea80 0001 	eor.w	r0, r0, r1
 8000cc0:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cc4:	4770      	bx	lr
 8000cc6:	f090 0f00 	teq	r0, #0
 8000cca:	bf17      	itett	ne
 8000ccc:	f090 4f00 	teqne	r0, #2147483648	@ 0x80000000
 8000cd0:	4608      	moveq	r0, r1
 8000cd2:	f091 0f00 	teqne	r1, #0
 8000cd6:	f091 4f00 	teqne	r1, #2147483648	@ 0x80000000
 8000cda:	d014      	beq.n	8000d06 <__aeabi_fmul+0x15e>
 8000cdc:	ea92 0f0c 	teq	r2, ip
 8000ce0:	d101      	bne.n	8000ce6 <__aeabi_fmul+0x13e>
 8000ce2:	0242      	lsls	r2, r0, #9
 8000ce4:	d10f      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000ce6:	ea93 0f0c 	teq	r3, ip
 8000cea:	d103      	bne.n	8000cf4 <__aeabi_fmul+0x14c>
 8000cec:	024b      	lsls	r3, r1, #9
 8000cee:	bf18      	it	ne
 8000cf0:	4608      	movne	r0, r1
 8000cf2:	d108      	bne.n	8000d06 <__aeabi_fmul+0x15e>
 8000cf4:	ea80 0001 	eor.w	r0, r0, r1
 8000cf8:	f000 4000 	and.w	r0, r0, #2147483648	@ 0x80000000
 8000cfc:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d00:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000d04:	4770      	bx	lr
 8000d06:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000d0a:	f440 0040 	orr.w	r0, r0, #12582912	@ 0xc00000
 8000d0e:	4770      	bx	lr

08000d10 <__aeabi_fdiv>:
 8000d10:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000d14:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000d18:	bf1e      	ittt	ne
 8000d1a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 8000d1e:	ea92 0f0c 	teqne	r2, ip
 8000d22:	ea93 0f0c 	teqne	r3, ip
 8000d26:	d069      	beq.n	8000dfc <__aeabi_fdiv+0xec>
 8000d28:	eba2 0203 	sub.w	r2, r2, r3
 8000d2c:	ea80 0c01 	eor.w	ip, r0, r1
 8000d30:	0249      	lsls	r1, r1, #9
 8000d32:	ea4f 2040 	mov.w	r0, r0, lsl #9
 8000d36:	d037      	beq.n	8000da8 <__aeabi_fdiv+0x98>
 8000d38:	f04f 5380 	mov.w	r3, #268435456	@ 0x10000000
 8000d3c:	ea43 1111 	orr.w	r1, r3, r1, lsr #4
 8000d40:	ea43 1310 	orr.w	r3, r3, r0, lsr #4
 8000d44:	f00c 4000 	and.w	r0, ip, #2147483648	@ 0x80000000
 8000d48:	428b      	cmp	r3, r1
 8000d4a:	bf38      	it	cc
 8000d4c:	005b      	lslcc	r3, r3, #1
 8000d4e:	f142 027d 	adc.w	r2, r2, #125	@ 0x7d
 8000d52:	f44f 0c00 	mov.w	ip, #8388608	@ 0x800000
 8000d56:	428b      	cmp	r3, r1
 8000d58:	bf24      	itt	cs
 8000d5a:	1a5b      	subcs	r3, r3, r1
 8000d5c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000d60:	ebb3 0f51 	cmp.w	r3, r1, lsr #1
 8000d64:	bf24      	itt	cs
 8000d66:	eba3 0351 	subcs.w	r3, r3, r1, lsr #1
 8000d6a:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000d6e:	ebb3 0f91 	cmp.w	r3, r1, lsr #2
 8000d72:	bf24      	itt	cs
 8000d74:	eba3 0391 	subcs.w	r3, r3, r1, lsr #2
 8000d78:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000d7c:	ebb3 0fd1 	cmp.w	r3, r1, lsr #3
 8000d80:	bf24      	itt	cs
 8000d82:	eba3 03d1 	subcs.w	r3, r3, r1, lsr #3
 8000d86:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000d8a:	011b      	lsls	r3, r3, #4
 8000d8c:	bf18      	it	ne
 8000d8e:	ea5f 1c1c 	movsne.w	ip, ip, lsr #4
 8000d92:	d1e0      	bne.n	8000d56 <__aeabi_fdiv+0x46>
 8000d94:	2afd      	cmp	r2, #253	@ 0xfd
 8000d96:	f63f af50 	bhi.w	8000c3a <__aeabi_fmul+0x92>
 8000d9a:	428b      	cmp	r3, r1
 8000d9c:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000da0:	bf08      	it	eq
 8000da2:	f020 0001 	biceq.w	r0, r0, #1
 8000da6:	4770      	bx	lr
 8000da8:	f00c 4c00 	and.w	ip, ip, #2147483648	@ 0x80000000
 8000dac:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 8000db0:	327f      	adds	r2, #127	@ 0x7f
 8000db2:	bfc2      	ittt	gt
 8000db4:	f1d2 03ff 	rsbsgt	r3, r2, #255	@ 0xff
 8000db8:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 8000dbc:	4770      	bxgt	lr
 8000dbe:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000dc2:	f04f 0300 	mov.w	r3, #0
 8000dc6:	3a01      	subs	r2, #1
 8000dc8:	e737      	b.n	8000c3a <__aeabi_fmul+0x92>
 8000dca:	f092 0f00 	teq	r2, #0
 8000dce:	f000 4c00 	and.w	ip, r0, #2147483648	@ 0x80000000
 8000dd2:	bf02      	ittt	eq
 8000dd4:	0040      	lsleq	r0, r0, #1
 8000dd6:	f410 0f00 	tsteq.w	r0, #8388608	@ 0x800000
 8000dda:	3a01      	subeq	r2, #1
 8000ddc:	d0f9      	beq.n	8000dd2 <__aeabi_fdiv+0xc2>
 8000dde:	ea40 000c 	orr.w	r0, r0, ip
 8000de2:	f093 0f00 	teq	r3, #0
 8000de6:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000dea:	bf02      	ittt	eq
 8000dec:	0049      	lsleq	r1, r1, #1
 8000dee:	f411 0f00 	tsteq.w	r1, #8388608	@ 0x800000
 8000df2:	3b01      	subeq	r3, #1
 8000df4:	d0f9      	beq.n	8000dea <__aeabi_fdiv+0xda>
 8000df6:	ea41 010c 	orr.w	r1, r1, ip
 8000dfa:	e795      	b.n	8000d28 <__aeabi_fdiv+0x18>
 8000dfc:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 8000e00:	ea92 0f0c 	teq	r2, ip
 8000e04:	d108      	bne.n	8000e18 <__aeabi_fdiv+0x108>
 8000e06:	0242      	lsls	r2, r0, #9
 8000e08:	f47f af7d 	bne.w	8000d06 <__aeabi_fmul+0x15e>
 8000e0c:	ea93 0f0c 	teq	r3, ip
 8000e10:	f47f af70 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e14:	4608      	mov	r0, r1
 8000e16:	e776      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e18:	ea93 0f0c 	teq	r3, ip
 8000e1c:	d104      	bne.n	8000e28 <__aeabi_fdiv+0x118>
 8000e1e:	024b      	lsls	r3, r1, #9
 8000e20:	f43f af4c 	beq.w	8000cbc <__aeabi_fmul+0x114>
 8000e24:	4608      	mov	r0, r1
 8000e26:	e76e      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e28:	f030 4c00 	bics.w	ip, r0, #2147483648	@ 0x80000000
 8000e2c:	bf18      	it	ne
 8000e2e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	@ 0x80000000
 8000e32:	d1ca      	bne.n	8000dca <__aeabi_fdiv+0xba>
 8000e34:	f030 4200 	bics.w	r2, r0, #2147483648	@ 0x80000000
 8000e38:	f47f af5c 	bne.w	8000cf4 <__aeabi_fmul+0x14c>
 8000e3c:	f031 4300 	bics.w	r3, r1, #2147483648	@ 0x80000000
 8000e40:	f47f af3c 	bne.w	8000cbc <__aeabi_fmul+0x114>
 8000e44:	e75f      	b.n	8000d06 <__aeabi_fmul+0x15e>
 8000e46:	bf00      	nop

08000e48 <__aeabi_f2iz>:
 8000e48:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e4c:	f1b2 4ffe 	cmp.w	r2, #2130706432	@ 0x7f000000
 8000e50:	d30f      	bcc.n	8000e72 <__aeabi_f2iz+0x2a>
 8000e52:	f04f 039e 	mov.w	r3, #158	@ 0x9e
 8000e56:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e5a:	d90d      	bls.n	8000e78 <__aeabi_f2iz+0x30>
 8000e5c:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e60:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000e64:	f010 4f00 	tst.w	r0, #2147483648	@ 0x80000000
 8000e68:	fa23 f002 	lsr.w	r0, r3, r2
 8000e6c:	bf18      	it	ne
 8000e6e:	4240      	negne	r0, r0
 8000e70:	4770      	bx	lr
 8000e72:	f04f 0000 	mov.w	r0, #0
 8000e76:	4770      	bx	lr
 8000e78:	f112 0f61 	cmn.w	r2, #97	@ 0x61
 8000e7c:	d101      	bne.n	8000e82 <__aeabi_f2iz+0x3a>
 8000e7e:	0242      	lsls	r2, r0, #9
 8000e80:	d105      	bne.n	8000e8e <__aeabi_f2iz+0x46>
 8000e82:	f010 4000 	ands.w	r0, r0, #2147483648	@ 0x80000000
 8000e86:	bf08      	it	eq
 8000e88:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000e8c:	4770      	bx	lr
 8000e8e:	f04f 0000 	mov.w	r0, #0
 8000e92:	4770      	bx	lr

08000e94 <on_event>:
#include "event.h"


static uint8_t is_button_held = 0;

void on_event() {
 8000e94:	b580      	push	{r7, lr}
 8000e96:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 8000e98:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 8000e9c:	480e      	ldr	r0, [pc, #56]	@ (8000ed8 <on_event+0x44>)
 8000e9e:	f001 ffd1 	bl	8002e44 <HAL_GPIO_ReadPin>
 8000ea2:	4603      	mov	r3, r0
 8000ea4:	2b00      	cmp	r3, #0
 8000ea6:	d10c      	bne.n	8000ec2 <on_event+0x2e>
		if (!is_button_held) {
 8000ea8:	4b0c      	ldr	r3, [pc, #48]	@ (8000edc <on_event+0x48>)
 8000eaa:	781b      	ldrb	r3, [r3, #0]
 8000eac:	2b00      	cmp	r3, #0
 8000eae:	d105      	bne.n	8000ebc <on_event+0x28>
			is_button_held = 1;
 8000eb0:	4b0a      	ldr	r3, [pc, #40]	@ (8000edc <on_event+0x48>)
 8000eb2:	2201      	movs	r2, #1
 8000eb4:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 8000eb6:	f000 fc0d 	bl	80016d4 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 8000eba:	e00b      	b.n	8000ed4 <on_event+0x40>
			on_button_held();
 8000ebc:	f000 fc20 	bl	8001700 <on_button_held>
}
 8000ec0:	e008      	b.n	8000ed4 <on_event+0x40>
		if (is_button_held) {
 8000ec2:	4b06      	ldr	r3, [pc, #24]	@ (8000edc <on_event+0x48>)
 8000ec4:	781b      	ldrb	r3, [r3, #0]
 8000ec6:	2b00      	cmp	r3, #0
 8000ec8:	d004      	beq.n	8000ed4 <on_event+0x40>
			is_button_held = 0;
 8000eca:	4b04      	ldr	r3, [pc, #16]	@ (8000edc <on_event+0x48>)
 8000ecc:	2200      	movs	r2, #0
 8000ece:	701a      	strb	r2, [r3, #0]
			on_button_released();
 8000ed0:	f000 fc4a 	bl	8001768 <on_button_released>
}
 8000ed4:	bf00      	nop
 8000ed6:	bd80      	pop	{r7, pc}
 8000ed8:	40011000 	.word	0x40011000
 8000edc:	200000ac 	.word	0x200000ac

08000ee0 <respawn_obstacle>:


Obstacle obstacles[OBSTACLES_MAX];


void respawn_obstacle(int i) {
 8000ee0:	b580      	push	{r7, lr}
 8000ee2:	b086      	sub	sp, #24
 8000ee4:	af00      	add	r7, sp, #0
 8000ee6:	6078      	str	r0, [r7, #4]
	int last = WIDTH - OBSTACLES_MIN_SPACING;
 8000ee8:	2334      	movs	r3, #52	@ 0x34
 8000eea:	617b      	str	r3, [r7, #20]
	for (int j = 0; j < OBSTACLES_MAX; ++j) {
 8000eec:	2300      	movs	r3, #0
 8000eee:	613b      	str	r3, [r7, #16]
 8000ef0:	e016      	b.n	8000f20 <respawn_obstacle+0x40>
		if (obstacles[j].rect.x > last) {
 8000ef2:	4989      	ldr	r1, [pc, #548]	@ (8001118 <respawn_obstacle+0x238>)
 8000ef4:	693a      	ldr	r2, [r7, #16]
 8000ef6:	4613      	mov	r3, r2
 8000ef8:	00db      	lsls	r3, r3, #3
 8000efa:	1a9b      	subs	r3, r3, r2
 8000efc:	009b      	lsls	r3, r3, #2
 8000efe:	440b      	add	r3, r1
 8000f00:	681b      	ldr	r3, [r3, #0]
 8000f02:	697a      	ldr	r2, [r7, #20]
 8000f04:	429a      	cmp	r2, r3
 8000f06:	da08      	bge.n	8000f1a <respawn_obstacle+0x3a>
			last = obstacles[j].rect.x;
 8000f08:	4983      	ldr	r1, [pc, #524]	@ (8001118 <respawn_obstacle+0x238>)
 8000f0a:	693a      	ldr	r2, [r7, #16]
 8000f0c:	4613      	mov	r3, r2
 8000f0e:	00db      	lsls	r3, r3, #3
 8000f10:	1a9b      	subs	r3, r3, r2
 8000f12:	009b      	lsls	r3, r3, #2
 8000f14:	440b      	add	r3, r1
 8000f16:	681b      	ldr	r3, [r3, #0]
 8000f18:	617b      	str	r3, [r7, #20]
	for (int j = 0; j < OBSTACLES_MAX; ++j) {
 8000f1a:	693b      	ldr	r3, [r7, #16]
 8000f1c:	3301      	adds	r3, #1
 8000f1e:	613b      	str	r3, [r7, #16]
 8000f20:	693b      	ldr	r3, [r7, #16]
 8000f22:	2b09      	cmp	r3, #9
 8000f24:	dde5      	ble.n	8000ef2 <respawn_obstacle+0x12>
		}
	}

	obstacles[i].rect.x = last + OBSTACLES_MIN_SPACING;
 8000f26:	697b      	ldr	r3, [r7, #20]
 8000f28:	f103 010c 	add.w	r1, r3, #12
 8000f2c:	487a      	ldr	r0, [pc, #488]	@ (8001118 <respawn_obstacle+0x238>)
 8000f2e:	687a      	ldr	r2, [r7, #4]
 8000f30:	4613      	mov	r3, r2
 8000f32:	00db      	lsls	r3, r3, #3
 8000f34:	1a9b      	subs	r3, r3, r2
 8000f36:	009b      	lsls	r3, r3, #2
 8000f38:	4403      	add	r3, r0
 8000f3a:	6019      	str	r1, [r3, #0]
	int offset = (rand()%OBSTACLES_MAX_SPACING);
 8000f3c:	f003 fb82 	bl	8004644 <rand>
 8000f40:	4602      	mov	r2, r0
 8000f42:	4b76      	ldr	r3, [pc, #472]	@ (800111c <respawn_obstacle+0x23c>)
 8000f44:	fb83 1302 	smull	r1, r3, r3, r2
 8000f48:	1119      	asrs	r1, r3, #4
 8000f4a:	17d3      	asrs	r3, r2, #31
 8000f4c:	1ac9      	subs	r1, r1, r3
 8000f4e:	460b      	mov	r3, r1
 8000f50:	009b      	lsls	r3, r3, #2
 8000f52:	440b      	add	r3, r1
 8000f54:	00db      	lsls	r3, r3, #3
 8000f56:	1ad3      	subs	r3, r2, r3
 8000f58:	60bb      	str	r3, [r7, #8]
	if (offset > 0) {
 8000f5a:	68bb      	ldr	r3, [r7, #8]
 8000f5c:	2b00      	cmp	r3, #0
 8000f5e:	dd11      	ble.n	8000f84 <respawn_obstacle+0xa4>
		obstacles[i].rect.x += offset;
 8000f60:	496d      	ldr	r1, [pc, #436]	@ (8001118 <respawn_obstacle+0x238>)
 8000f62:	687a      	ldr	r2, [r7, #4]
 8000f64:	4613      	mov	r3, r2
 8000f66:	00db      	lsls	r3, r3, #3
 8000f68:	1a9b      	subs	r3, r3, r2
 8000f6a:	009b      	lsls	r3, r3, #2
 8000f6c:	440b      	add	r3, r1
 8000f6e:	681a      	ldr	r2, [r3, #0]
 8000f70:	68bb      	ldr	r3, [r7, #8]
 8000f72:	18d1      	adds	r1, r2, r3
 8000f74:	4868      	ldr	r0, [pc, #416]	@ (8001118 <respawn_obstacle+0x238>)
 8000f76:	687a      	ldr	r2, [r7, #4]
 8000f78:	4613      	mov	r3, r2
 8000f7a:	00db      	lsls	r3, r3, #3
 8000f7c:	1a9b      	subs	r3, r3, r2
 8000f7e:	009b      	lsls	r3, r3, #2
 8000f80:	4403      	add	r3, r0
 8000f82:	6019      	str	r1, [r3, #0]
	}
	if (obstacles[i].rect.x - last < OBSTACLES_MIN_SPACING) {
 8000f84:	4964      	ldr	r1, [pc, #400]	@ (8001118 <respawn_obstacle+0x238>)
 8000f86:	687a      	ldr	r2, [r7, #4]
 8000f88:	4613      	mov	r3, r2
 8000f8a:	00db      	lsls	r3, r3, #3
 8000f8c:	1a9b      	subs	r3, r3, r2
 8000f8e:	009b      	lsls	r3, r3, #2
 8000f90:	440b      	add	r3, r1
 8000f92:	681a      	ldr	r2, [r3, #0]
 8000f94:	697b      	ldr	r3, [r7, #20]
 8000f96:	1ad3      	subs	r3, r2, r3
 8000f98:	2b0b      	cmp	r3, #11
 8000f9a:	dc01      	bgt.n	8000fa0 <respawn_obstacle+0xc0>
		buzzer();
 8000f9c:	f000 fc00 	bl	80017a0 <buzzer>
	}

	obstacles[i].velocity = OBSTACLES_VELOCITY + OBSTACLES_VELOCITY * (dino.score/100.0);
 8000fa0:	4b5f      	ldr	r3, [pc, #380]	@ (8001120 <respawn_obstacle+0x240>)
 8000fa2:	69db      	ldr	r3, [r3, #28]
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f7ff fa25 	bl	80003f4 <__aeabi_i2d>
 8000faa:	f04f 0200 	mov.w	r2, #0
 8000fae:	4b5d      	ldr	r3, [pc, #372]	@ (8001124 <respawn_obstacle+0x244>)
 8000fb0:	f7ff fbb4 	bl	800071c <__aeabi_ddiv>
 8000fb4:	4602      	mov	r2, r0
 8000fb6:	460b      	mov	r3, r1
 8000fb8:	4610      	mov	r0, r2
 8000fba:	4619      	mov	r1, r3
 8000fbc:	f04f 0200 	mov.w	r2, #0
 8000fc0:	4b59      	ldr	r3, [pc, #356]	@ (8001128 <respawn_obstacle+0x248>)
 8000fc2:	f7ff fa81 	bl	80004c8 <__aeabi_dmul>
 8000fc6:	4602      	mov	r2, r0
 8000fc8:	460b      	mov	r3, r1
 8000fca:	4610      	mov	r0, r2
 8000fcc:	4619      	mov	r1, r3
 8000fce:	f04f 0200 	mov.w	r2, #0
 8000fd2:	4b56      	ldr	r3, [pc, #344]	@ (800112c <respawn_obstacle+0x24c>)
 8000fd4:	f7ff f8c0 	bl	8000158 <__aeabi_dsub>
 8000fd8:	4602      	mov	r2, r0
 8000fda:	460b      	mov	r3, r1
 8000fdc:	4610      	mov	r0, r2
 8000fde:	4619      	mov	r1, r3
 8000fe0:	f7ff fc84 	bl	80008ec <__aeabi_d2f>
 8000fe4:	4601      	mov	r1, r0
 8000fe6:	484c      	ldr	r0, [pc, #304]	@ (8001118 <respawn_obstacle+0x238>)
 8000fe8:	687a      	ldr	r2, [r7, #4]
 8000fea:	4613      	mov	r3, r2
 8000fec:	00db      	lsls	r3, r3, #3
 8000fee:	1a9b      	subs	r3, r3, r2
 8000ff0:	009b      	lsls	r3, r3, #2
 8000ff2:	4403      	add	r3, r0
 8000ff4:	3318      	adds	r3, #24
 8000ff6:	6019      	str	r1, [r3, #0]

	int y = GROUND_Y - 2;
 8000ff8:	2318      	movs	r3, #24
 8000ffa:	60fb      	str	r3, [r7, #12]
	if (rand()%100 < 20) {
 8000ffc:	f003 fb22 	bl	8004644 <rand>
 8001000:	4602      	mov	r2, r0
 8001002:	4b4b      	ldr	r3, [pc, #300]	@ (8001130 <respawn_obstacle+0x250>)
 8001004:	fb83 1302 	smull	r1, r3, r3, r2
 8001008:	1159      	asrs	r1, r3, #5
 800100a:	17d3      	asrs	r3, r2, #31
 800100c:	1acb      	subs	r3, r1, r3
 800100e:	2164      	movs	r1, #100	@ 0x64
 8001010:	fb01 f303 	mul.w	r3, r1, r3
 8001014:	1ad3      	subs	r3, r2, r3
 8001016:	2b13      	cmp	r3, #19
 8001018:	dc3c      	bgt.n	8001094 <respawn_obstacle+0x1b4>
		y = GROUND_Y - 7;
 800101a:	2313      	movs	r3, #19
 800101c:	60fb      	str	r3, [r7, #12]

		if (rand()%100 < 20) {
 800101e:	f003 fb11 	bl	8004644 <rand>
 8001022:	4602      	mov	r2, r0
 8001024:	4b42      	ldr	r3, [pc, #264]	@ (8001130 <respawn_obstacle+0x250>)
 8001026:	fb83 1302 	smull	r1, r3, r3, r2
 800102a:	1159      	asrs	r1, r3, #5
 800102c:	17d3      	asrs	r3, r2, #31
 800102e:	1acb      	subs	r3, r1, r3
 8001030:	2164      	movs	r1, #100	@ 0x64
 8001032:	fb01 f303 	mul.w	r3, r1, r3
 8001036:	1ad3      	subs	r3, r2, r3
 8001038:	2b13      	cmp	r3, #19
 800103a:	dc2b      	bgt.n	8001094 <respawn_obstacle+0x1b4>
			obstacles[i].velocity = OBSTACLES_VELOCITY + OBSTACLES_VELOCITY * (dino.score/20.0);
 800103c:	4b38      	ldr	r3, [pc, #224]	@ (8001120 <respawn_obstacle+0x240>)
 800103e:	69db      	ldr	r3, [r3, #28]
 8001040:	4618      	mov	r0, r3
 8001042:	f7ff f9d7 	bl	80003f4 <__aeabi_i2d>
 8001046:	f04f 0200 	mov.w	r2, #0
 800104a:	4b3a      	ldr	r3, [pc, #232]	@ (8001134 <respawn_obstacle+0x254>)
 800104c:	f7ff fb66 	bl	800071c <__aeabi_ddiv>
 8001050:	4602      	mov	r2, r0
 8001052:	460b      	mov	r3, r1
 8001054:	4610      	mov	r0, r2
 8001056:	4619      	mov	r1, r3
 8001058:	f04f 0200 	mov.w	r2, #0
 800105c:	4b32      	ldr	r3, [pc, #200]	@ (8001128 <respawn_obstacle+0x248>)
 800105e:	f7ff fa33 	bl	80004c8 <__aeabi_dmul>
 8001062:	4602      	mov	r2, r0
 8001064:	460b      	mov	r3, r1
 8001066:	4610      	mov	r0, r2
 8001068:	4619      	mov	r1, r3
 800106a:	f04f 0200 	mov.w	r2, #0
 800106e:	4b2f      	ldr	r3, [pc, #188]	@ (800112c <respawn_obstacle+0x24c>)
 8001070:	f7ff f872 	bl	8000158 <__aeabi_dsub>
 8001074:	4602      	mov	r2, r0
 8001076:	460b      	mov	r3, r1
 8001078:	4610      	mov	r0, r2
 800107a:	4619      	mov	r1, r3
 800107c:	f7ff fc36 	bl	80008ec <__aeabi_d2f>
 8001080:	4601      	mov	r1, r0
 8001082:	4825      	ldr	r0, [pc, #148]	@ (8001118 <respawn_obstacle+0x238>)
 8001084:	687a      	ldr	r2, [r7, #4]
 8001086:	4613      	mov	r3, r2
 8001088:	00db      	lsls	r3, r3, #3
 800108a:	1a9b      	subs	r3, r3, r2
 800108c:	009b      	lsls	r3, r3, #2
 800108e:	4403      	add	r3, r0
 8001090:	3318      	adds	r3, #24
 8001092:	6019      	str	r1, [r3, #0]
		}
	}

	obstacles[i].real_x = obstacles[i].rect.x;
 8001094:	4920      	ldr	r1, [pc, #128]	@ (8001118 <respawn_obstacle+0x238>)
 8001096:	687a      	ldr	r2, [r7, #4]
 8001098:	4613      	mov	r3, r2
 800109a:	00db      	lsls	r3, r3, #3
 800109c:	1a9b      	subs	r3, r3, r2
 800109e:	009b      	lsls	r3, r3, #2
 80010a0:	440b      	add	r3, r1
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	4618      	mov	r0, r3
 80010a6:	f7ff fd2b 	bl	8000b00 <__aeabi_i2f>
 80010aa:	4601      	mov	r1, r0
 80010ac:	481a      	ldr	r0, [pc, #104]	@ (8001118 <respawn_obstacle+0x238>)
 80010ae:	687a      	ldr	r2, [r7, #4]
 80010b0:	4613      	mov	r3, r2
 80010b2:	00db      	lsls	r3, r3, #3
 80010b4:	1a9b      	subs	r3, r3, r2
 80010b6:	009b      	lsls	r3, r3, #2
 80010b8:	4403      	add	r3, r0
 80010ba:	3314      	adds	r3, #20
 80010bc:	6019      	str	r1, [r3, #0]
	obstacles[i].rect.y = y;
 80010be:	4916      	ldr	r1, [pc, #88]	@ (8001118 <respawn_obstacle+0x238>)
 80010c0:	687a      	ldr	r2, [r7, #4]
 80010c2:	4613      	mov	r3, r2
 80010c4:	00db      	lsls	r3, r3, #3
 80010c6:	1a9b      	subs	r3, r3, r2
 80010c8:	009b      	lsls	r3, r3, #2
 80010ca:	440b      	add	r3, r1
 80010cc:	3304      	adds	r3, #4
 80010ce:	68fa      	ldr	r2, [r7, #12]
 80010d0:	601a      	str	r2, [r3, #0]
	obstacles[i].rect.width = 2;
 80010d2:	4911      	ldr	r1, [pc, #68]	@ (8001118 <respawn_obstacle+0x238>)
 80010d4:	687a      	ldr	r2, [r7, #4]
 80010d6:	4613      	mov	r3, r2
 80010d8:	00db      	lsls	r3, r3, #3
 80010da:	1a9b      	subs	r3, r3, r2
 80010dc:	009b      	lsls	r3, r3, #2
 80010de:	440b      	add	r3, r1
 80010e0:	3308      	adds	r3, #8
 80010e2:	2202      	movs	r2, #2
 80010e4:	601a      	str	r2, [r3, #0]
	obstacles[i].rect.height = 2;
 80010e6:	490c      	ldr	r1, [pc, #48]	@ (8001118 <respawn_obstacle+0x238>)
 80010e8:	687a      	ldr	r2, [r7, #4]
 80010ea:	4613      	mov	r3, r2
 80010ec:	00db      	lsls	r3, r3, #3
 80010ee:	1a9b      	subs	r3, r3, r2
 80010f0:	009b      	lsls	r3, r3, #2
 80010f2:	440b      	add	r3, r1
 80010f4:	330c      	adds	r3, #12
 80010f6:	2202      	movs	r2, #2
 80010f8:	601a      	str	r2, [r3, #0]
	obstacles[i].active = true;
 80010fa:	4907      	ldr	r1, [pc, #28]	@ (8001118 <respawn_obstacle+0x238>)
 80010fc:	687a      	ldr	r2, [r7, #4]
 80010fe:	4613      	mov	r3, r2
 8001100:	00db      	lsls	r3, r3, #3
 8001102:	1a9b      	subs	r3, r3, r2
 8001104:	009b      	lsls	r3, r3, #2
 8001106:	440b      	add	r3, r1
 8001108:	3310      	adds	r3, #16
 800110a:	2201      	movs	r2, #1
 800110c:	701a      	strb	r2, [r3, #0]
}
 800110e:	bf00      	nop
 8001110:	3718      	adds	r7, #24
 8001112:	46bd      	mov	sp, r7
 8001114:	bd80      	pop	{r7, pc}
 8001116:	bf00      	nop
 8001118:	200000b8 	.word	0x200000b8
 800111c:	66666667 	.word	0x66666667
 8001120:	20000000 	.word	0x20000000
 8001124:	40590000 	.word	0x40590000
 8001128:	c0390000 	.word	0xc0390000
 800112c:	40390000 	.word	0x40390000
 8001130:	51eb851f 	.word	0x51eb851f
 8001134:	40340000 	.word	0x40340000

08001138 <init_obstacles>:

void init_obstacles() {
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 800113e:	2300      	movs	r3, #0
 8001140:	607b      	str	r3, [r7, #4]
 8001142:	e034      	b.n	80011ae <init_obstacles+0x76>
		obstacles[i].rect.x = -10;
 8001144:	491e      	ldr	r1, [pc, #120]	@ (80011c0 <init_obstacles+0x88>)
 8001146:	687a      	ldr	r2, [r7, #4]
 8001148:	4613      	mov	r3, r2
 800114a:	00db      	lsls	r3, r3, #3
 800114c:	1a9b      	subs	r3, r3, r2
 800114e:	009b      	lsls	r3, r3, #2
 8001150:	440b      	add	r3, r1
 8001152:	f06f 0209 	mvn.w	r2, #9
 8001156:	601a      	str	r2, [r3, #0]
		obstacles[i].rect.y = 10;
 8001158:	4919      	ldr	r1, [pc, #100]	@ (80011c0 <init_obstacles+0x88>)
 800115a:	687a      	ldr	r2, [r7, #4]
 800115c:	4613      	mov	r3, r2
 800115e:	00db      	lsls	r3, r3, #3
 8001160:	1a9b      	subs	r3, r3, r2
 8001162:	009b      	lsls	r3, r3, #2
 8001164:	440b      	add	r3, r1
 8001166:	3304      	adds	r3, #4
 8001168:	220a      	movs	r2, #10
 800116a:	601a      	str	r2, [r3, #0]
		obstacles[i].real_x = -10.0;
 800116c:	4914      	ldr	r1, [pc, #80]	@ (80011c0 <init_obstacles+0x88>)
 800116e:	687a      	ldr	r2, [r7, #4]
 8001170:	4613      	mov	r3, r2
 8001172:	00db      	lsls	r3, r3, #3
 8001174:	1a9b      	subs	r3, r3, r2
 8001176:	009b      	lsls	r3, r3, #2
 8001178:	440b      	add	r3, r1
 800117a:	3314      	adds	r3, #20
 800117c:	4a11      	ldr	r2, [pc, #68]	@ (80011c4 <init_obstacles+0x8c>)
 800117e:	601a      	str	r2, [r3, #0]
		obstacles[i].velocity = OBSTACLES_VELOCITY;
 8001180:	490f      	ldr	r1, [pc, #60]	@ (80011c0 <init_obstacles+0x88>)
 8001182:	687a      	ldr	r2, [r7, #4]
 8001184:	4613      	mov	r3, r2
 8001186:	00db      	lsls	r3, r3, #3
 8001188:	1a9b      	subs	r3, r3, r2
 800118a:	009b      	lsls	r3, r3, #2
 800118c:	440b      	add	r3, r1
 800118e:	3318      	adds	r3, #24
 8001190:	4a0d      	ldr	r2, [pc, #52]	@ (80011c8 <init_obstacles+0x90>)
 8001192:	601a      	str	r2, [r3, #0]
		obstacles[i].active = false;
 8001194:	490a      	ldr	r1, [pc, #40]	@ (80011c0 <init_obstacles+0x88>)
 8001196:	687a      	ldr	r2, [r7, #4]
 8001198:	4613      	mov	r3, r2
 800119a:	00db      	lsls	r3, r3, #3
 800119c:	1a9b      	subs	r3, r3, r2
 800119e:	009b      	lsls	r3, r3, #2
 80011a0:	440b      	add	r3, r1
 80011a2:	3310      	adds	r3, #16
 80011a4:	2200      	movs	r2, #0
 80011a6:	701a      	strb	r2, [r3, #0]
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 80011a8:	687b      	ldr	r3, [r7, #4]
 80011aa:	3301      	adds	r3, #1
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
 80011b0:	2b09      	cmp	r3, #9
 80011b2:	ddc7      	ble.n	8001144 <init_obstacles+0xc>

	}
}
 80011b4:	bf00      	nop
 80011b6:	bf00      	nop
 80011b8:	370c      	adds	r7, #12
 80011ba:	46bd      	mov	sp, r7
 80011bc:	bc80      	pop	{r7}
 80011be:	4770      	bx	lr
 80011c0:	200000b8 	.word	0x200000b8
 80011c4:	c1200000 	.word	0xc1200000
 80011c8:	c1c80000 	.word	0xc1c80000

080011cc <move_obstacles>:

void move_obstacles() {
 80011cc:	b5b0      	push	{r4, r5, r7, lr}
 80011ce:	b086      	sub	sp, #24
 80011d0:	af04      	add	r7, sp, #16
	if (dino.is_dead) {
 80011d2:	4b38      	ldr	r3, [pc, #224]	@ (80012b4 <move_obstacles+0xe8>)
 80011d4:	7e5b      	ldrb	r3, [r3, #25]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d167      	bne.n	80012aa <move_obstacles+0xde>
		return;
	}

	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 80011da:	2300      	movs	r3, #0
 80011dc:	607b      	str	r3, [r7, #4]
 80011de:	e060      	b.n	80012a2 <move_obstacles+0xd6>
		Obstacle* o = &obstacles[i];
 80011e0:	687a      	ldr	r2, [r7, #4]
 80011e2:	4613      	mov	r3, r2
 80011e4:	00db      	lsls	r3, r3, #3
 80011e6:	1a9b      	subs	r3, r3, r2
 80011e8:	009b      	lsls	r3, r3, #2
 80011ea:	4a33      	ldr	r2, [pc, #204]	@ (80012b8 <move_obstacles+0xec>)
 80011ec:	4413      	add	r3, r2
 80011ee:	603b      	str	r3, [r7, #0]
		if (o->active || true) {
			o->real_x += o->velocity * DeltaTime;
 80011f0:	683b      	ldr	r3, [r7, #0]
 80011f2:	695b      	ldr	r3, [r3, #20]
 80011f4:	4618      	mov	r0, r3
 80011f6:	f7ff f90f 	bl	8000418 <__aeabi_f2d>
 80011fa:	4604      	mov	r4, r0
 80011fc:	460d      	mov	r5, r1
 80011fe:	683b      	ldr	r3, [r7, #0]
 8001200:	699b      	ldr	r3, [r3, #24]
 8001202:	4618      	mov	r0, r3
 8001204:	f7ff f908 	bl	8000418 <__aeabi_f2d>
 8001208:	4b2c      	ldr	r3, [pc, #176]	@ (80012bc <move_obstacles+0xf0>)
 800120a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800120e:	f7ff f95b 	bl	80004c8 <__aeabi_dmul>
 8001212:	4602      	mov	r2, r0
 8001214:	460b      	mov	r3, r1
 8001216:	4620      	mov	r0, r4
 8001218:	4629      	mov	r1, r5
 800121a:	f7fe ff9f 	bl	800015c <__adddf3>
 800121e:	4602      	mov	r2, r0
 8001220:	460b      	mov	r3, r1
 8001222:	4610      	mov	r0, r2
 8001224:	4619      	mov	r1, r3
 8001226:	f7ff fb61 	bl	80008ec <__aeabi_d2f>
 800122a:	4602      	mov	r2, r0
 800122c:	683b      	ldr	r3, [r7, #0]
 800122e:	615a      	str	r2, [r3, #20]
			o->rect.x = (o->real_x);
 8001230:	683b      	ldr	r3, [r7, #0]
 8001232:	695b      	ldr	r3, [r3, #20]
 8001234:	4618      	mov	r0, r3
 8001236:	f7ff fe07 	bl	8000e48 <__aeabi_f2iz>
 800123a:	4602      	mov	r2, r0
 800123c:	683b      	ldr	r3, [r7, #0]
 800123e:	601a      	str	r2, [r3, #0]
			if (o->rect.x + o->rect.width < 0) {
 8001240:	683b      	ldr	r3, [r7, #0]
 8001242:	681a      	ldr	r2, [r3, #0]
 8001244:	683b      	ldr	r3, [r7, #0]
 8001246:	689b      	ldr	r3, [r3, #8]
 8001248:	4413      	add	r3, r2
 800124a:	2b00      	cmp	r3, #0
 800124c:	da0f      	bge.n	800126e <move_obstacles+0xa2>
				if (o->active) {
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	7c1b      	ldrb	r3, [r3, #16]
 8001252:	2b00      	cmp	r3, #0
 8001254:	d004      	beq.n	8001260 <move_obstacles+0x94>
					dino.score++;
 8001256:	4b17      	ldr	r3, [pc, #92]	@ (80012b4 <move_obstacles+0xe8>)
 8001258:	69db      	ldr	r3, [r3, #28]
 800125a:	3301      	adds	r3, #1
 800125c:	4a15      	ldr	r2, [pc, #84]	@ (80012b4 <move_obstacles+0xe8>)
 800125e:	61d3      	str	r3, [r2, #28]
				}

				o->active = false;
 8001260:	683b      	ldr	r3, [r7, #0]
 8001262:	2200      	movs	r2, #0
 8001264:	741a      	strb	r2, [r3, #16]
				respawn_obstacle(i);
 8001266:	6878      	ldr	r0, [r7, #4]
 8001268:	f7ff fe3a 	bl	8000ee0 <respawn_obstacle>
				continue;
 800126c:	e016      	b.n	800129c <move_obstacles+0xd0>
			}

			if (!dino.is_dead && check_collision(dino.rect, o->rect)) {
 800126e:	4b11      	ldr	r3, [pc, #68]	@ (80012b4 <move_obstacles+0xe8>)
 8001270:	7e5b      	ldrb	r3, [r3, #25]
 8001272:	f083 0301 	eor.w	r3, r3, #1
 8001276:	b2db      	uxtb	r3, r3
 8001278:	2b00      	cmp	r3, #0
 800127a:	d00f      	beq.n	800129c <move_obstacles+0xd0>
 800127c:	4d0d      	ldr	r5, [pc, #52]	@ (80012b4 <move_obstacles+0xe8>)
 800127e:	683b      	ldr	r3, [r7, #0]
 8001280:	466c      	mov	r4, sp
 8001282:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 8001284:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
 8001288:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 800128c:	f000 f950 	bl	8001530 <check_collision>
 8001290:	4603      	mov	r3, r0
 8001292:	2b00      	cmp	r3, #0
 8001294:	d002      	beq.n	800129c <move_obstacles+0xd0>
				dino_die();
 8001296:	f000 f975 	bl	8001584 <dino_die>
				return;
 800129a:	e007      	b.n	80012ac <move_obstacles+0xe0>
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	2b09      	cmp	r3, #9
 80012a6:	dd9b      	ble.n	80011e0 <move_obstacles+0x14>
 80012a8:	e000      	b.n	80012ac <move_obstacles+0xe0>
		return;
 80012aa:	bf00      	nop
			}
		}
	}
}
 80012ac:	3708      	adds	r7, #8
 80012ae:	46bd      	mov	sp, r7
 80012b0:	bdb0      	pop	{r4, r5, r7, pc}
 80012b2:	bf00      	nop
 80012b4:	20000000 	.word	0x20000000
 80012b8:	200000b8 	.word	0x200000b8
 80012bc:	200002c0 	.word	0x200002c0

080012c0 <move_dino>:


void move_dino() {
 80012c0:	b5b0      	push	{r4, r5, r7, lr}
 80012c2:	af00      	add	r7, sp, #0
	if (!dino.is_jumping) {
 80012c4:	4b3a      	ldr	r3, [pc, #232]	@ (80013b0 <move_dino+0xf0>)
 80012c6:	7e1b      	ldrb	r3, [r3, #24]
 80012c8:	f083 0301 	eor.w	r3, r3, #1
 80012cc:	b2db      	uxtb	r3, r3
 80012ce:	2b00      	cmp	r3, #0
 80012d0:	d16c      	bne.n	80013ac <move_dino+0xec>
		return;
	}

	dino.jump_velocity += dino_accel * DeltaTime;
 80012d2:	4b37      	ldr	r3, [pc, #220]	@ (80013b0 <move_dino+0xf0>)
 80012d4:	695b      	ldr	r3, [r3, #20]
 80012d6:	4618      	mov	r0, r3
 80012d8:	f7ff f89e 	bl	8000418 <__aeabi_f2d>
 80012dc:	4604      	mov	r4, r0
 80012de:	460d      	mov	r5, r1
 80012e0:	4b34      	ldr	r3, [pc, #208]	@ (80013b4 <move_dino+0xf4>)
 80012e2:	681b      	ldr	r3, [r3, #0]
 80012e4:	4618      	mov	r0, r3
 80012e6:	f7ff f897 	bl	8000418 <__aeabi_f2d>
 80012ea:	4b33      	ldr	r3, [pc, #204]	@ (80013b8 <move_dino+0xf8>)
 80012ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80012f0:	f7ff f8ea 	bl	80004c8 <__aeabi_dmul>
 80012f4:	4602      	mov	r2, r0
 80012f6:	460b      	mov	r3, r1
 80012f8:	4620      	mov	r0, r4
 80012fa:	4629      	mov	r1, r5
 80012fc:	f7fe ff2e 	bl	800015c <__adddf3>
 8001300:	4602      	mov	r2, r0
 8001302:	460b      	mov	r3, r1
 8001304:	4610      	mov	r0, r2
 8001306:	4619      	mov	r1, r3
 8001308:	f7ff faf0 	bl	80008ec <__aeabi_d2f>
 800130c:	4603      	mov	r3, r0
 800130e:	4a28      	ldr	r2, [pc, #160]	@ (80013b0 <move_dino+0xf0>)
 8001310:	6153      	str	r3, [r2, #20]
	dino.real_pos += dino.jump_velocity * DeltaTime;
 8001312:	4b27      	ldr	r3, [pc, #156]	@ (80013b0 <move_dino+0xf0>)
 8001314:	691b      	ldr	r3, [r3, #16]
 8001316:	4618      	mov	r0, r3
 8001318:	f7ff f87e 	bl	8000418 <__aeabi_f2d>
 800131c:	4604      	mov	r4, r0
 800131e:	460d      	mov	r5, r1
 8001320:	4b23      	ldr	r3, [pc, #140]	@ (80013b0 <move_dino+0xf0>)
 8001322:	695b      	ldr	r3, [r3, #20]
 8001324:	4618      	mov	r0, r3
 8001326:	f7ff f877 	bl	8000418 <__aeabi_f2d>
 800132a:	4b23      	ldr	r3, [pc, #140]	@ (80013b8 <move_dino+0xf8>)
 800132c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001330:	f7ff f8ca 	bl	80004c8 <__aeabi_dmul>
 8001334:	4602      	mov	r2, r0
 8001336:	460b      	mov	r3, r1
 8001338:	4620      	mov	r0, r4
 800133a:	4629      	mov	r1, r5
 800133c:	f7fe ff0e 	bl	800015c <__adddf3>
 8001340:	4602      	mov	r2, r0
 8001342:	460b      	mov	r3, r1
 8001344:	4610      	mov	r0, r2
 8001346:	4619      	mov	r1, r3
 8001348:	f7ff fad0 	bl	80008ec <__aeabi_d2f>
 800134c:	4603      	mov	r3, r0
 800134e:	4a18      	ldr	r2, [pc, #96]	@ (80013b0 <move_dino+0xf0>)
 8001350:	6113      	str	r3, [r2, #16]
	dino.rect.y = (dino.real_pos);
 8001352:	4b17      	ldr	r3, [pc, #92]	@ (80013b0 <move_dino+0xf0>)
 8001354:	691b      	ldr	r3, [r3, #16]
 8001356:	4618      	mov	r0, r3
 8001358:	f7ff fd76 	bl	8000e48 <__aeabi_f2iz>
 800135c:	4603      	mov	r3, r0
 800135e:	4a14      	ldr	r2, [pc, #80]	@ (80013b0 <move_dino+0xf0>)
 8001360:	6053      	str	r3, [r2, #4]

	if (!dino.is_dead && dino.rect.y >= DINO_START_Y) {
 8001362:	4b13      	ldr	r3, [pc, #76]	@ (80013b0 <move_dino+0xf0>)
 8001364:	7e5b      	ldrb	r3, [r3, #25]
 8001366:	f083 0301 	eor.w	r3, r3, #1
 800136a:	b2db      	uxtb	r3, r3
 800136c:	2b00      	cmp	r3, #0
 800136e:	d011      	beq.n	8001394 <move_dino+0xd4>
 8001370:	4b0f      	ldr	r3, [pc, #60]	@ (80013b0 <move_dino+0xf0>)
 8001372:	685b      	ldr	r3, [r3, #4]
 8001374:	2b16      	cmp	r3, #22
 8001376:	dd0d      	ble.n	8001394 <move_dino+0xd4>
		dino.rect.y = DINO_START_Y;
 8001378:	4b0d      	ldr	r3, [pc, #52]	@ (80013b0 <move_dino+0xf0>)
 800137a:	2217      	movs	r2, #23
 800137c:	605a      	str	r2, [r3, #4]
		dino.real_pos = DINO_START_Y;
 800137e:	4b0c      	ldr	r3, [pc, #48]	@ (80013b0 <move_dino+0xf0>)
 8001380:	4a0e      	ldr	r2, [pc, #56]	@ (80013bc <move_dino+0xfc>)
 8001382:	611a      	str	r2, [r3, #16]
		dino.is_jumping = false;
 8001384:	4b0a      	ldr	r3, [pc, #40]	@ (80013b0 <move_dino+0xf0>)
 8001386:	2200      	movs	r2, #0
 8001388:	761a      	strb	r2, [r3, #24]
		dino.jump_velocity = 0;
 800138a:	4b09      	ldr	r3, [pc, #36]	@ (80013b0 <move_dino+0xf0>)
 800138c:	f04f 0200 	mov.w	r2, #0
 8001390:	615a      	str	r2, [r3, #20]
 8001392:	e00c      	b.n	80013ae <move_dino+0xee>
	}
	else if (dino.rect.y > HEIGHT) {
 8001394:	4b06      	ldr	r3, [pc, #24]	@ (80013b0 <move_dino+0xf0>)
 8001396:	685b      	ldr	r3, [r3, #4]
 8001398:	2b20      	cmp	r3, #32
 800139a:	dd08      	ble.n	80013ae <move_dino+0xee>
		dino.is_jumping = false;
 800139c:	4b04      	ldr	r3, [pc, #16]	@ (80013b0 <move_dino+0xf0>)
 800139e:	2200      	movs	r2, #0
 80013a0:	761a      	strb	r2, [r3, #24]
		dino.jump_velocity = 0;
 80013a2:	4b03      	ldr	r3, [pc, #12]	@ (80013b0 <move_dino+0xf0>)
 80013a4:	f04f 0200 	mov.w	r2, #0
 80013a8:	615a      	str	r2, [r3, #20]
 80013aa:	e000      	b.n	80013ae <move_dino+0xee>
		return;
 80013ac:	bf00      	nop
	}
}
 80013ae:	bdb0      	pop	{r4, r5, r7, pc}
 80013b0:	20000000 	.word	0x20000000
 80013b4:	200000b0 	.word	0x200000b0
 80013b8:	200002c0 	.word	0x200002c0
 80013bc:	41b80000 	.word	0x41b80000

080013c0 <draw_ground>:



void draw_ground() {
 80013c0:	b580      	push	{r7, lr}
 80013c2:	af00      	add	r7, sp, #0
	draw_line(0, GROUND_Y, 63, GROUND_Y);
 80013c4:	231a      	movs	r3, #26
 80013c6:	223f      	movs	r2, #63	@ 0x3f
 80013c8:	211a      	movs	r1, #26
 80013ca:	2000      	movs	r0, #0
 80013cc:	f000 fe4a 	bl	8002064 <draw_line>
}
 80013d0:	bf00      	nop
 80013d2:	bd80      	pop	{r7, pc}

080013d4 <draw_dino>:
void draw_dino() {
 80013d4:	b580      	push	{r7, lr}
 80013d6:	b084      	sub	sp, #16
 80013d8:	af02      	add	r7, sp, #8
	if (!dino.is_dead) {
 80013da:	4b18      	ldr	r3, [pc, #96]	@ (800143c <draw_dino+0x68>)
 80013dc:	7e5b      	ldrb	r3, [r3, #25]
 80013de:	f083 0301 	eor.w	r3, r3, #1
 80013e2:	b2db      	uxtb	r3, r3
 80013e4:	2b00      	cmp	r3, #0
 80013e6:	d012      	beq.n	800140e <draw_dino+0x3a>
		Draw_Rect(dino.rect, (Color){0, 1, 0});
 80013e8:	2300      	movs	r3, #0
 80013ea:	713b      	strb	r3, [r7, #4]
 80013ec:	2301      	movs	r3, #1
 80013ee:	717b      	strb	r3, [r7, #5]
 80013f0:	2300      	movs	r3, #0
 80013f2:	71bb      	strb	r3, [r7, #6]
 80013f4:	4a11      	ldr	r2, [pc, #68]	@ (800143c <draw_dino+0x68>)
 80013f6:	466b      	mov	r3, sp
 80013f8:	1d39      	adds	r1, r7, #4
 80013fa:	6809      	ldr	r1, [r1, #0]
 80013fc:	4608      	mov	r0, r1
 80013fe:	8018      	strh	r0, [r3, #0]
 8001400:	3302      	adds	r3, #2
 8001402:	0c09      	lsrs	r1, r1, #16
 8001404:	7019      	strb	r1, [r3, #0]
 8001406:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 8001408:	f000 fef8 	bl	80021fc <Draw_Rect>
	} else {
		Draw_Rect(dino.rect, (Color){1, 0, 0});
	}
}
 800140c:	e011      	b.n	8001432 <draw_dino+0x5e>
		Draw_Rect(dino.rect, (Color){1, 0, 0});
 800140e:	2301      	movs	r3, #1
 8001410:	703b      	strb	r3, [r7, #0]
 8001412:	2300      	movs	r3, #0
 8001414:	707b      	strb	r3, [r7, #1]
 8001416:	2300      	movs	r3, #0
 8001418:	70bb      	strb	r3, [r7, #2]
 800141a:	4a08      	ldr	r2, [pc, #32]	@ (800143c <draw_dino+0x68>)
 800141c:	466b      	mov	r3, sp
 800141e:	4639      	mov	r1, r7
 8001420:	6809      	ldr	r1, [r1, #0]
 8001422:	4608      	mov	r0, r1
 8001424:	8018      	strh	r0, [r3, #0]
 8001426:	3302      	adds	r3, #2
 8001428:	0c09      	lsrs	r1, r1, #16
 800142a:	7019      	strb	r1, [r3, #0]
 800142c:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 800142e:	f000 fee5 	bl	80021fc <Draw_Rect>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	20000000 	.word	0x20000000

08001440 <draw_obstacles>:

void draw_obstacles() {
 8001440:	b580      	push	{r7, lr}
 8001442:	b084      	sub	sp, #16
 8001444:	af02      	add	r7, sp, #8
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 8001446:	2300      	movs	r3, #0
 8001448:	607b      	str	r3, [r7, #4]
 800144a:	e058      	b.n	80014fe <draw_obstacles+0xbe>
		if (!obstacles[i].active) {
 800144c:	4930      	ldr	r1, [pc, #192]	@ (8001510 <draw_obstacles+0xd0>)
 800144e:	687a      	ldr	r2, [r7, #4]
 8001450:	4613      	mov	r3, r2
 8001452:	00db      	lsls	r3, r3, #3
 8001454:	1a9b      	subs	r3, r3, r2
 8001456:	009b      	lsls	r3, r3, #2
 8001458:	440b      	add	r3, r1
 800145a:	3310      	adds	r3, #16
 800145c:	781b      	ldrb	r3, [r3, #0]
 800145e:	f083 0301 	eor.w	r3, r3, #1
 8001462:	b2db      	uxtb	r3, r3
 8001464:	2b00      	cmp	r3, #0
 8001466:	d142      	bne.n	80014ee <draw_obstacles+0xae>
			continue;
		}
		if (obstacles[i].rect.x < 0 || obstacles[i].rect.y < 0 ) {
 8001468:	4929      	ldr	r1, [pc, #164]	@ (8001510 <draw_obstacles+0xd0>)
 800146a:	687a      	ldr	r2, [r7, #4]
 800146c:	4613      	mov	r3, r2
 800146e:	00db      	lsls	r3, r3, #3
 8001470:	1a9b      	subs	r3, r3, r2
 8001472:	009b      	lsls	r3, r3, #2
 8001474:	440b      	add	r3, r1
 8001476:	681b      	ldr	r3, [r3, #0]
 8001478:	2b00      	cmp	r3, #0
 800147a:	db3a      	blt.n	80014f2 <draw_obstacles+0xb2>
 800147c:	4924      	ldr	r1, [pc, #144]	@ (8001510 <draw_obstacles+0xd0>)
 800147e:	687a      	ldr	r2, [r7, #4]
 8001480:	4613      	mov	r3, r2
 8001482:	00db      	lsls	r3, r3, #3
 8001484:	1a9b      	subs	r3, r3, r2
 8001486:	009b      	lsls	r3, r3, #2
 8001488:	440b      	add	r3, r1
 800148a:	3304      	adds	r3, #4
 800148c:	681b      	ldr	r3, [r3, #0]
 800148e:	2b00      	cmp	r3, #0
 8001490:	db2f      	blt.n	80014f2 <draw_obstacles+0xb2>
			continue;
		}
		if (obstacles[i].rect.x > WIDTH || obstacles[i].rect.y > HEIGHT ) {
 8001492:	491f      	ldr	r1, [pc, #124]	@ (8001510 <draw_obstacles+0xd0>)
 8001494:	687a      	ldr	r2, [r7, #4]
 8001496:	4613      	mov	r3, r2
 8001498:	00db      	lsls	r3, r3, #3
 800149a:	1a9b      	subs	r3, r3, r2
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	440b      	add	r3, r1
 80014a0:	681b      	ldr	r3, [r3, #0]
 80014a2:	2b40      	cmp	r3, #64	@ 0x40
 80014a4:	dc27      	bgt.n	80014f6 <draw_obstacles+0xb6>
 80014a6:	491a      	ldr	r1, [pc, #104]	@ (8001510 <draw_obstacles+0xd0>)
 80014a8:	687a      	ldr	r2, [r7, #4]
 80014aa:	4613      	mov	r3, r2
 80014ac:	00db      	lsls	r3, r3, #3
 80014ae:	1a9b      	subs	r3, r3, r2
 80014b0:	009b      	lsls	r3, r3, #2
 80014b2:	440b      	add	r3, r1
 80014b4:	3304      	adds	r3, #4
 80014b6:	681b      	ldr	r3, [r3, #0]
 80014b8:	2b20      	cmp	r3, #32
 80014ba:	dc1c      	bgt.n	80014f6 <draw_obstacles+0xb6>
			continue;
		}
		Draw_Rect(obstacles[i].rect, (Color){0, 0, 1});
 80014bc:	2300      	movs	r3, #0
 80014be:	703b      	strb	r3, [r7, #0]
 80014c0:	2300      	movs	r3, #0
 80014c2:	707b      	strb	r3, [r7, #1]
 80014c4:	2301      	movs	r3, #1
 80014c6:	70bb      	strb	r3, [r7, #2]
 80014c8:	4911      	ldr	r1, [pc, #68]	@ (8001510 <draw_obstacles+0xd0>)
 80014ca:	687a      	ldr	r2, [r7, #4]
 80014cc:	4613      	mov	r3, r2
 80014ce:	00db      	lsls	r3, r3, #3
 80014d0:	1a9b      	subs	r3, r3, r2
 80014d2:	009b      	lsls	r3, r3, #2
 80014d4:	18ca      	adds	r2, r1, r3
 80014d6:	466b      	mov	r3, sp
 80014d8:	4639      	mov	r1, r7
 80014da:	6809      	ldr	r1, [r1, #0]
 80014dc:	4608      	mov	r0, r1
 80014de:	8018      	strh	r0, [r3, #0]
 80014e0:	3302      	adds	r3, #2
 80014e2:	0c09      	lsrs	r1, r1, #16
 80014e4:	7019      	strb	r1, [r3, #0]
 80014e6:	ca0f      	ldmia	r2, {r0, r1, r2, r3}
 80014e8:	f000 fe88 	bl	80021fc <Draw_Rect>
 80014ec:	e004      	b.n	80014f8 <draw_obstacles+0xb8>
			continue;
 80014ee:	bf00      	nop
 80014f0:	e002      	b.n	80014f8 <draw_obstacles+0xb8>
			continue;
 80014f2:	bf00      	nop
 80014f4:	e000      	b.n	80014f8 <draw_obstacles+0xb8>
			continue;
 80014f6:	bf00      	nop
	for (int i = 0; i < OBSTACLES_MAX; ++i) {
 80014f8:	687b      	ldr	r3, [r7, #4]
 80014fa:	3301      	adds	r3, #1
 80014fc:	607b      	str	r3, [r7, #4]
 80014fe:	687b      	ldr	r3, [r7, #4]
 8001500:	2b09      	cmp	r3, #9
 8001502:	dda3      	ble.n	800144c <draw_obstacles+0xc>
	}
}
 8001504:	bf00      	nop
 8001506:	bf00      	nop
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	200000b8 	.word	0x200000b8

08001514 <draw_score>:

void draw_score() {
 8001514:	b580      	push	{r7, lr}
 8001516:	af00      	add	r7, sp, #0
	draw_number(dino.score, 2, 2, false);
 8001518:	4b04      	ldr	r3, [pc, #16]	@ (800152c <draw_score+0x18>)
 800151a:	69d8      	ldr	r0, [r3, #28]
 800151c:	2300      	movs	r3, #0
 800151e:	2202      	movs	r2, #2
 8001520:	2102      	movs	r1, #2
 8001522:	f000 ff01 	bl	8002328 <draw_number>
	return;
 8001526:	bf00      	nop

	for (uint8_t var = 0; var < 10; ++var) {
		draw_number(var, x, y, true);
		x += 8;
	}
}
 8001528:	bd80      	pop	{r7, pc}
 800152a:	bf00      	nop
 800152c:	20000000 	.word	0x20000000

08001530 <check_collision>:



bool check_collision(Rect a, Rect b) {
 8001530:	b490      	push	{r4, r7}
 8001532:	b084      	sub	sp, #16
 8001534:	af00      	add	r7, sp, #0
 8001536:	463c      	mov	r4, r7
 8001538:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	return (a.x < (b.x + b.width) &&
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	69b9      	ldr	r1, [r7, #24]
 8001540:	6a3b      	ldr	r3, [r7, #32]
 8001542:	440b      	add	r3, r1
			(a.x + a.width) > b.x &&
			a.y < (b.y + b.height) &&
 8001544:	429a      	cmp	r2, r3
 8001546:	da13      	bge.n	8001570 <check_collision+0x40>
			(a.x + a.width) > b.x &&
 8001548:	683a      	ldr	r2, [r7, #0]
 800154a:	68bb      	ldr	r3, [r7, #8]
 800154c:	441a      	add	r2, r3
 800154e:	69bb      	ldr	r3, [r7, #24]
	return (a.x < (b.x + b.width) &&
 8001550:	429a      	cmp	r2, r3
 8001552:	dd0d      	ble.n	8001570 <check_collision+0x40>
			a.y < (b.y + b.height) &&
 8001554:	687a      	ldr	r2, [r7, #4]
 8001556:	69f9      	ldr	r1, [r7, #28]
 8001558:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800155a:	440b      	add	r3, r1
			(a.x + a.width) > b.x &&
 800155c:	429a      	cmp	r2, r3
 800155e:	da07      	bge.n	8001570 <check_collision+0x40>
			(a.y + a.height) > b.y);
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	68fb      	ldr	r3, [r7, #12]
 8001564:	441a      	add	r2, r3
 8001566:	69fb      	ldr	r3, [r7, #28]
			a.y < (b.y + b.height) &&
 8001568:	429a      	cmp	r2, r3
 800156a:	dd01      	ble.n	8001570 <check_collision+0x40>
 800156c:	2301      	movs	r3, #1
 800156e:	e000      	b.n	8001572 <check_collision+0x42>
 8001570:	2300      	movs	r3, #0
 8001572:	f003 0301 	and.w	r3, r3, #1
 8001576:	b2db      	uxtb	r3, r3
}
 8001578:	4618      	mov	r0, r3
 800157a:	3710      	adds	r7, #16
 800157c:	46bd      	mov	sp, r7
 800157e:	bc90      	pop	{r4, r7}
 8001580:	4770      	bx	lr
	...

08001584 <dino_die>:


void dino_die() {
 8001584:	b580      	push	{r7, lr}
 8001586:	af00      	add	r7, sp, #0
	dino.is_dead = true;
 8001588:	4b06      	ldr	r3, [pc, #24]	@ (80015a4 <dino_die+0x20>)
 800158a:	2201      	movs	r2, #1
 800158c:	765a      	strb	r2, [r3, #25]
	dino.is_jumping = false;
 800158e:	4b05      	ldr	r3, [pc, #20]	@ (80015a4 <dino_die+0x20>)
 8001590:	2200      	movs	r2, #0
 8001592:	761a      	strb	r2, [r3, #24]
	dino_death_time = HAL_GetTick();
 8001594:	f001 f9ba 	bl	800290c <HAL_GetTick>
 8001598:	4603      	mov	r3, r0
 800159a:	4a03      	ldr	r2, [pc, #12]	@ (80015a8 <dino_die+0x24>)
 800159c:	6013      	str	r3, [r2, #0]
	//buzzer();
}
 800159e:	bf00      	nop
 80015a0:	bd80      	pop	{r7, pc}
 80015a2:	bf00      	nop
 80015a4:	20000000 	.word	0x20000000
 80015a8:	200000b4 	.word	0x200000b4

080015ac <dino_respawn>:

bool dead_dino_jumped = false;
void dino_respawn() {
 80015ac:	b580      	push	{r7, lr}
 80015ae:	af00      	add	r7, sp, #0
	dino.score = 0;
 80015b0:	4b0c      	ldr	r3, [pc, #48]	@ (80015e4 <dino_respawn+0x38>)
 80015b2:	2200      	movs	r2, #0
 80015b4:	61da      	str	r2, [r3, #28]
	dino.is_dead = false;
 80015b6:	4b0b      	ldr	r3, [pc, #44]	@ (80015e4 <dino_respawn+0x38>)
 80015b8:	2200      	movs	r2, #0
 80015ba:	765a      	strb	r2, [r3, #25]
	dino.is_jumping = false;
 80015bc:	4b09      	ldr	r3, [pc, #36]	@ (80015e4 <dino_respawn+0x38>)
 80015be:	2200      	movs	r2, #0
 80015c0:	761a      	strb	r2, [r3, #24]
	dead_dino_jumped = false;
 80015c2:	4b09      	ldr	r3, [pc, #36]	@ (80015e8 <dino_respawn+0x3c>)
 80015c4:	2200      	movs	r2, #0
 80015c6:	701a      	strb	r2, [r3, #0]
	dino.rect.y = DINO_START_Y;
 80015c8:	4b06      	ldr	r3, [pc, #24]	@ (80015e4 <dino_respawn+0x38>)
 80015ca:	2217      	movs	r2, #23
 80015cc:	605a      	str	r2, [r3, #4]
	dino.real_pos = dino.rect.y;
 80015ce:	4b05      	ldr	r3, [pc, #20]	@ (80015e4 <dino_respawn+0x38>)
 80015d0:	685b      	ldr	r3, [r3, #4]
 80015d2:	4618      	mov	r0, r3
 80015d4:	f7ff fa94 	bl	8000b00 <__aeabi_i2f>
 80015d8:	4603      	mov	r3, r0
 80015da:	4a02      	ldr	r2, [pc, #8]	@ (80015e4 <dino_respawn+0x38>)
 80015dc:	6113      	str	r3, [r2, #16]
}
 80015de:	bf00      	nop
 80015e0:	bd80      	pop	{r7, pc}
 80015e2:	bf00      	nop
 80015e4:	20000000 	.word	0x20000000
 80015e8:	200001d0 	.word	0x200001d0

080015ec <dino_jump>:

void dino_jump() {
 80015ec:	b590      	push	{r4, r7, lr}
 80015ee:	b083      	sub	sp, #12
 80015f0:	af00      	add	r7, sp, #0
	dino.is_jumping = true;
 80015f2:	4b11      	ldr	r3, [pc, #68]	@ (8001638 <dino_jump+0x4c>)
 80015f4:	2201      	movs	r2, #1
 80015f6:	761a      	strb	r2, [r3, #24]
	dino.jump_velocity = DINO_JUMP_VELOCITY;
 80015f8:	4b0f      	ldr	r3, [pc, #60]	@ (8001638 <dino_jump+0x4c>)
 80015fa:	4a10      	ldr	r2, [pc, #64]	@ (800163c <dino_jump+0x50>)
 80015fc:	615a      	str	r2, [r3, #20]
	float v0 = DINO_JUMP_VELOCITY;
 80015fe:	4b0f      	ldr	r3, [pc, #60]	@ (800163c <dino_jump+0x50>)
 8001600:	607b      	str	r3, [r7, #4]
	float d = (DINO_START_Y - DINO_JUMP_TO_Y);
 8001602:	4b0f      	ldr	r3, [pc, #60]	@ (8001640 <dino_jump+0x54>)
 8001604:	603b      	str	r3, [r7, #0]
	dino_accel = (v0*v0)/(2*d);
 8001606:	6879      	ldr	r1, [r7, #4]
 8001608:	6878      	ldr	r0, [r7, #4]
 800160a:	f7ff facd 	bl	8000ba8 <__aeabi_fmul>
 800160e:	4603      	mov	r3, r0
 8001610:	461c      	mov	r4, r3
 8001612:	683b      	ldr	r3, [r7, #0]
 8001614:	4619      	mov	r1, r3
 8001616:	4618      	mov	r0, r3
 8001618:	f7ff f9be 	bl	8000998 <__addsf3>
 800161c:	4603      	mov	r3, r0
 800161e:	4619      	mov	r1, r3
 8001620:	4620      	mov	r0, r4
 8001622:	f7ff fb75 	bl	8000d10 <__aeabi_fdiv>
 8001626:	4603      	mov	r3, r0
 8001628:	461a      	mov	r2, r3
 800162a:	4b06      	ldr	r3, [pc, #24]	@ (8001644 <dino_jump+0x58>)
 800162c:	601a      	str	r2, [r3, #0]
}
 800162e:	bf00      	nop
 8001630:	370c      	adds	r7, #12
 8001632:	46bd      	mov	sp, r7
 8001634:	bd90      	pop	{r4, r7, pc}
 8001636:	bf00      	nop
 8001638:	20000000 	.word	0x20000000
 800163c:	c2700000 	.word	0xc2700000
 8001640:	41200000 	.word	0x41200000
 8001644:	200000b0 	.word	0x200000b0

08001648 <on_ready>:

void on_ready() {
 8001648:	b580      	push	{r7, lr}
 800164a:	af00      	add	r7, sp, #0
	//srand(time(NULL));
	init_obstacles();
 800164c:	f7ff fd74 	bl	8001138 <init_obstacles>
}
 8001650:	bf00      	nop
 8001652:	bd80      	pop	{r7, pc}

08001654 <on_update>:

void on_update() {
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
	clear_back_buffer();
 800165a:	f000 fb65 	bl	8001d28 <clear_back_buffer>

	draw_ground();
 800165e:	f7ff feaf 	bl	80013c0 <draw_ground>
	draw_dino();
 8001662:	f7ff feb7 	bl	80013d4 <draw_dino>
	draw_obstacles();
 8001666:	f7ff feeb 	bl	8001440 <draw_obstacles>
	draw_score();
 800166a:	f7ff ff53 	bl	8001514 <draw_score>

	move_dino();
 800166e:	f7ff fe27 	bl	80012c0 <move_dino>
	move_obstacles();
 8001672:	f7ff fdab 	bl	80011cc <move_obstacles>

	// death animation & restart
	if (dino.is_dead) {
 8001676:	4b14      	ldr	r3, [pc, #80]	@ (80016c8 <on_update+0x74>)
 8001678:	7e5b      	ldrb	r3, [r3, #25]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d020      	beq.n	80016c0 <on_update+0x6c>
		uint32_t time_passed = HAL_GetTick() - dino_death_time;
 800167e:	f001 f945 	bl	800290c <HAL_GetTick>
 8001682:	4602      	mov	r2, r0
 8001684:	4b11      	ldr	r3, [pc, #68]	@ (80016cc <on_update+0x78>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	1ad3      	subs	r3, r2, r3
 800168a:	607b      	str	r3, [r7, #4]
		if (time_passed > 1000 && !dead_dino_jumped) {
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001692:	d90c      	bls.n	80016ae <on_update+0x5a>
 8001694:	4b0e      	ldr	r3, [pc, #56]	@ (80016d0 <on_update+0x7c>)
 8001696:	781b      	ldrb	r3, [r3, #0]
 8001698:	f083 0301 	eor.w	r3, r3, #1
 800169c:	b2db      	uxtb	r3, r3
 800169e:	2b00      	cmp	r3, #0
 80016a0:	d005      	beq.n	80016ae <on_update+0x5a>
			dino_jump();
 80016a2:	f7ff ffa3 	bl	80015ec <dino_jump>
			dead_dino_jumped = true;
 80016a6:	4b0a      	ldr	r3, [pc, #40]	@ (80016d0 <on_update+0x7c>)
 80016a8:	2201      	movs	r2, #1
 80016aa:	701a      	strb	r2, [r3, #0]
		else if (time_passed > 3000) {
			init_obstacles();
			dino_respawn();
		}
	}
}
 80016ac:	e008      	b.n	80016c0 <on_update+0x6c>
		else if (time_passed > 3000) {
 80016ae:	687b      	ldr	r3, [r7, #4]
 80016b0:	f640 32b8 	movw	r2, #3000	@ 0xbb8
 80016b4:	4293      	cmp	r3, r2
 80016b6:	d903      	bls.n	80016c0 <on_update+0x6c>
			init_obstacles();
 80016b8:	f7ff fd3e 	bl	8001138 <init_obstacles>
			dino_respawn();
 80016bc:	f7ff ff76 	bl	80015ac <dino_respawn>
}
 80016c0:	bf00      	nop
 80016c2:	3708      	adds	r7, #8
 80016c4:	46bd      	mov	sp, r7
 80016c6:	bd80      	pop	{r7, pc}
 80016c8:	20000000 	.word	0x20000000
 80016cc:	200000b4 	.word	0x200000b4
 80016d0:	200001d0 	.word	0x200001d0

080016d4 <on_button_pressed>:



void on_button_pressed() {
 80016d4:	b580      	push	{r7, lr}
 80016d6:	af00      	add	r7, sp, #0
	if (!dino.is_dead && !dino.is_jumping) {
 80016d8:	4b08      	ldr	r3, [pc, #32]	@ (80016fc <on_button_pressed+0x28>)
 80016da:	7e5b      	ldrb	r3, [r3, #25]
 80016dc:	f083 0301 	eor.w	r3, r3, #1
 80016e0:	b2db      	uxtb	r3, r3
 80016e2:	2b00      	cmp	r3, #0
 80016e4:	d008      	beq.n	80016f8 <on_button_pressed+0x24>
 80016e6:	4b05      	ldr	r3, [pc, #20]	@ (80016fc <on_button_pressed+0x28>)
 80016e8:	7e1b      	ldrb	r3, [r3, #24]
 80016ea:	f083 0301 	eor.w	r3, r3, #1
 80016ee:	b2db      	uxtb	r3, r3
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d001      	beq.n	80016f8 <on_button_pressed+0x24>
		dino_jump();
 80016f4:	f7ff ff7a 	bl	80015ec <dino_jump>
	}
}
 80016f8:	bf00      	nop
 80016fa:	bd80      	pop	{r7, pc}
 80016fc:	20000000 	.word	0x20000000

08001700 <on_button_held>:
void on_button_held() {
 8001700:	b5b0      	push	{r4, r5, r7, lr}
 8001702:	af00      	add	r7, sp, #0
	if (!dino.is_dead && dino.is_jumping) {
 8001704:	4b15      	ldr	r3, [pc, #84]	@ (800175c <on_button_held+0x5c>)
 8001706:	7e5b      	ldrb	r3, [r3, #25]
 8001708:	f083 0301 	eor.w	r3, r3, #1
 800170c:	b2db      	uxtb	r3, r3
 800170e:	2b00      	cmp	r3, #0
 8001710:	d021      	beq.n	8001756 <on_button_held+0x56>
 8001712:	4b12      	ldr	r3, [pc, #72]	@ (800175c <on_button_held+0x5c>)
 8001714:	7e1b      	ldrb	r3, [r3, #24]
 8001716:	2b00      	cmp	r3, #0
 8001718:	d01d      	beq.n	8001756 <on_button_held+0x56>
		dino.jump_velocity -= 60 * DeltaTime;
 800171a:	4b10      	ldr	r3, [pc, #64]	@ (800175c <on_button_held+0x5c>)
 800171c:	695b      	ldr	r3, [r3, #20]
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe fe7a 	bl	8000418 <__aeabi_f2d>
 8001724:	4604      	mov	r4, r0
 8001726:	460d      	mov	r5, r1
 8001728:	4b0d      	ldr	r3, [pc, #52]	@ (8001760 <on_button_held+0x60>)
 800172a:	e9d3 0100 	ldrd	r0, r1, [r3]
 800172e:	f04f 0200 	mov.w	r2, #0
 8001732:	4b0c      	ldr	r3, [pc, #48]	@ (8001764 <on_button_held+0x64>)
 8001734:	f7fe fec8 	bl	80004c8 <__aeabi_dmul>
 8001738:	4602      	mov	r2, r0
 800173a:	460b      	mov	r3, r1
 800173c:	4620      	mov	r0, r4
 800173e:	4629      	mov	r1, r5
 8001740:	f7fe fd0a 	bl	8000158 <__aeabi_dsub>
 8001744:	4602      	mov	r2, r0
 8001746:	460b      	mov	r3, r1
 8001748:	4610      	mov	r0, r2
 800174a:	4619      	mov	r1, r3
 800174c:	f7ff f8ce 	bl	80008ec <__aeabi_d2f>
 8001750:	4603      	mov	r3, r0
 8001752:	4a02      	ldr	r2, [pc, #8]	@ (800175c <on_button_held+0x5c>)
 8001754:	6153      	str	r3, [r2, #20]
	}
}
 8001756:	bf00      	nop
 8001758:	bdb0      	pop	{r4, r5, r7, pc}
 800175a:	bf00      	nop
 800175c:	20000000 	.word	0x20000000
 8001760:	200002c0 	.word	0x200002c0
 8001764:	404e0000 	.word	0x404e0000

08001768 <on_button_released>:
void on_button_released() {
 8001768:	b480      	push	{r7}
 800176a:	af00      	add	r7, sp, #0
}
 800176c:	bf00      	nop
 800176e:	46bd      	mov	sp, r7
 8001770:	bc80      	pop	{r7}
 8001772:	4770      	bx	lr

08001774 <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8001774:	b580      	push	{r7, lr}
 8001776:	b082      	sub	sp, #8
 8001778:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 800177a:	f001 f8c7 	bl	800290c <HAL_GetTick>
 800177e:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8001780:	4b06      	ldr	r3, [pc, #24]	@ (800179c <get_tick_delta_time+0x28>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	687a      	ldr	r2, [r7, #4]
 8001786:	1ad3      	subs	r3, r2, r3
 8001788:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 800178a:	4a04      	ldr	r2, [pc, #16]	@ (800179c <get_tick_delta_time+0x28>)
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8001790:	683b      	ldr	r3, [r7, #0]
}
 8001792:	4618      	mov	r0, r3
 8001794:	3708      	adds	r7, #8
 8001796:	46bd      	mov	sp, r7
 8001798:	bd80      	pop	{r7, pc}
 800179a:	bf00      	nop
 800179c:	200002c8 	.word	0x200002c8

080017a0 <buzzer>:

bool buzzer_request = false;
uint32_t buzzer_toggle_request_time = 0;
void buzzer() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	af00      	add	r7, sp, #0
	buzzer_request = true;
 80017a4:	4b07      	ldr	r3, [pc, #28]	@ (80017c4 <buzzer+0x24>)
 80017a6:	2201      	movs	r2, #1
 80017a8:	701a      	strb	r2, [r3, #0]
	buzzer_toggle_request_time = HAL_GetTick();
 80017aa:	f001 f8af 	bl	800290c <HAL_GetTick>
 80017ae:	4603      	mov	r3, r0
 80017b0:	4a05      	ldr	r2, [pc, #20]	@ (80017c8 <buzzer+0x28>)
 80017b2:	6013      	str	r3, [r2, #0]
	HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_SET);
 80017b4:	2201      	movs	r2, #1
 80017b6:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 80017ba:	4804      	ldr	r0, [pc, #16]	@ (80017cc <buzzer+0x2c>)
 80017bc:	f001 fb59 	bl	8002e72 <HAL_GPIO_WritePin>
}
 80017c0:	bf00      	nop
 80017c2:	bd80      	pop	{r7, pc}
 80017c4:	200002cc 	.word	0x200002cc
 80017c8:	200002d0 	.word	0x200002d0
 80017cc:	40010800 	.word	0x40010800

080017d0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80017d0:	b580      	push	{r7, lr}
 80017d2:	b082      	sub	sp, #8
 80017d4:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80017d6:	f001 f841 	bl	800285c <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80017da:	f000 f861 	bl	80018a0 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80017de:	f000 f9c3 	bl	8001b68 <MX_GPIO_Init>
  MX_SPI1_Init();
 80017e2:	f000 f89f 	bl	8001924 <MX_SPI1_Init>
  MX_TIM2_Init();
 80017e6:	f000 f8d3 	bl	8001990 <MX_TIM2_Init>
  MX_TIM3_Init();
 80017ea:	f000 f947 	bl	8001a7c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 80017ee:	4824      	ldr	r0, [pc, #144]	@ (8001880 <main+0xb0>)
 80017f0:	f002 f80a 	bl	8003808 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 80017f4:	4823      	ldr	r0, [pc, #140]	@ (8001884 <main+0xb4>)
 80017f6:	f002 f807 	bl	8003808 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 80017fa:	2100      	movs	r1, #0
 80017fc:	4821      	ldr	r0, [pc, #132]	@ (8001884 <main+0xb4>)
 80017fe:	f002 f8ad 	bl	800395c <HAL_TIM_PWM_Start>
	OE_H;
 8001802:	2201      	movs	r2, #1
 8001804:	2140      	movs	r1, #64	@ 0x40
 8001806:	4820      	ldr	r0, [pc, #128]	@ (8001888 <main+0xb8>)
 8001808:	f001 fb33 	bl	8002e72 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	on_ready();
 800180c:	f7ff ff1c 	bl	8001648 <on_ready>

#define FIXED_DELTA_TIME 15 /* frame time milliseconds */

	int accumulator = 0;
 8001810:	2300      	movs	r3, #0
 8001812:	607b      	str	r3, [r7, #4]
	while (1) {

		accumulator += get_tick_delta_time();
 8001814:	f7ff ffae 	bl	8001774 <get_tick_delta_time>
 8001818:	4602      	mov	r2, r0
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	4413      	add	r3, r2
 800181e:	607b      	str	r3, [r7, #4]
		if (accumulator >= FIXED_DELTA_TIME) {
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	2b0e      	cmp	r3, #14
 8001824:	dd0f      	ble.n	8001846 <main+0x76>
			accumulator -= FIXED_DELTA_TIME;
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	3b0f      	subs	r3, #15
 800182a:	607b      	str	r3, [r7, #4]
			DeltaTime = FIXED_DELTA_TIME / 1000.0;
 800182c:	4917      	ldr	r1, [pc, #92]	@ (800188c <main+0xbc>)
 800182e:	a312      	add	r3, pc, #72	@ (adr r3, 8001878 <main+0xa8>)
 8001830:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001834:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8001838:	f7ff fb2c 	bl	8000e94 <on_event>
			on_update();
 800183c:	f7ff ff0a 	bl	8001654 <on_update>
			is_back_buffer_new = true;
 8001840:	4b13      	ldr	r3, [pc, #76]	@ (8001890 <main+0xc0>)
 8001842:	2201      	movs	r2, #1
 8001844:	701a      	strb	r2, [r3, #0]
		}


		if (buzzer_request) {
 8001846:	4b13      	ldr	r3, [pc, #76]	@ (8001894 <main+0xc4>)
 8001848:	781b      	ldrb	r3, [r3, #0]
 800184a:	2b00      	cmp	r3, #0
 800184c:	d0e2      	beq.n	8001814 <main+0x44>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 800184e:	f001 f85d 	bl	800290c <HAL_GetTick>
 8001852:	4602      	mov	r2, r0
 8001854:	4b10      	ldr	r3, [pc, #64]	@ (8001898 <main+0xc8>)
 8001856:	681b      	ldr	r3, [r3, #0]
 8001858:	1ad3      	subs	r3, r2, r3
 800185a:	2b14      	cmp	r3, #20
 800185c:	d9da      	bls.n	8001814 <main+0x44>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 800185e:	2200      	movs	r2, #0
 8001860:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8001864:	480d      	ldr	r0, [pc, #52]	@ (800189c <main+0xcc>)
 8001866:	f001 fb04 	bl	8002e72 <HAL_GPIO_WritePin>
				buzzer_request = false;
 800186a:	4b0a      	ldr	r3, [pc, #40]	@ (8001894 <main+0xc4>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
		accumulator += get_tick_delta_time();
 8001870:	e7d0      	b.n	8001814 <main+0x44>
 8001872:	bf00      	nop
 8001874:	f3af 8000 	nop.w
 8001878:	eb851eb8 	.word	0xeb851eb8
 800187c:	3f8eb851 	.word	0x3f8eb851
 8001880:	2000022c 	.word	0x2000022c
 8001884:	20000274 	.word	0x20000274
 8001888:	40011000 	.word	0x40011000
 800188c:	200002c0 	.word	0x200002c0
 8001890:	200012d4 	.word	0x200012d4
 8001894:	200002cc 	.word	0x200002cc
 8001898:	200002d0 	.word	0x200002d0
 800189c:	40010800 	.word	0x40010800

080018a0 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a0:	b580      	push	{r7, lr}
 80018a2:	b090      	sub	sp, #64	@ 0x40
 80018a4:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018a6:	f107 0318 	add.w	r3, r7, #24
 80018aa:	2228      	movs	r2, #40	@ 0x28
 80018ac:	2100      	movs	r1, #0
 80018ae:	4618      	mov	r0, r3
 80018b0:	f003 f80b 	bl	80048ca <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b4:	1d3b      	adds	r3, r7, #4
 80018b6:	2200      	movs	r2, #0
 80018b8:	601a      	str	r2, [r3, #0]
 80018ba:	605a      	str	r2, [r3, #4]
 80018bc:	609a      	str	r2, [r3, #8]
 80018be:	60da      	str	r2, [r3, #12]
 80018c0:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c2:	2302      	movs	r3, #2
 80018c4:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c6:	2301      	movs	r3, #1
 80018c8:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018ca:	2310      	movs	r3, #16
 80018cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018ce:	2302      	movs	r3, #2
 80018d0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80018d2:	2300      	movs	r3, #0
 80018d4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80018d6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80018da:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018dc:	f107 0318 	add.w	r3, r7, #24
 80018e0:	4618      	mov	r0, r3
 80018e2:	f001 fadf 	bl	8002ea4 <HAL_RCC_OscConfig>
 80018e6:	4603      	mov	r3, r0
 80018e8:	2b00      	cmp	r3, #0
 80018ea:	d001      	beq.n	80018f0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80018ec:	f000 fa00 	bl	8001cf0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f0:	230f      	movs	r3, #15
 80018f2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018f4:	2302      	movs	r3, #2
 80018f6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80018f8:	2300      	movs	r3, #0
 80018fa:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80018fc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001900:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001902:	2300      	movs	r3, #0
 8001904:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001906:	1d3b      	adds	r3, r7, #4
 8001908:	2102      	movs	r1, #2
 800190a:	4618      	mov	r0, r3
 800190c:	f001 fd4c 	bl	80033a8 <HAL_RCC_ClockConfig>
 8001910:	4603      	mov	r3, r0
 8001912:	2b00      	cmp	r3, #0
 8001914:	d001      	beq.n	800191a <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8001916:	f000 f9eb 	bl	8001cf0 <Error_Handler>
  }
}
 800191a:	bf00      	nop
 800191c:	3740      	adds	r7, #64	@ 0x40
 800191e:	46bd      	mov	sp, r7
 8001920:	bd80      	pop	{r7, pc}
	...

08001924 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001924:	b580      	push	{r7, lr}
 8001926:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001928:	4b17      	ldr	r3, [pc, #92]	@ (8001988 <MX_SPI1_Init+0x64>)
 800192a:	4a18      	ldr	r2, [pc, #96]	@ (800198c <MX_SPI1_Init+0x68>)
 800192c:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 800192e:	4b16      	ldr	r3, [pc, #88]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001930:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001934:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001936:	4b14      	ldr	r3, [pc, #80]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001938:	2200      	movs	r2, #0
 800193a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 800193c:	4b12      	ldr	r3, [pc, #72]	@ (8001988 <MX_SPI1_Init+0x64>)
 800193e:	2200      	movs	r2, #0
 8001940:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001942:	4b11      	ldr	r3, [pc, #68]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001944:	2200      	movs	r2, #0
 8001946:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001948:	4b0f      	ldr	r3, [pc, #60]	@ (8001988 <MX_SPI1_Init+0x64>)
 800194a:	2200      	movs	r2, #0
 800194c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800194e:	4b0e      	ldr	r3, [pc, #56]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001950:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001954:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001956:	4b0c      	ldr	r3, [pc, #48]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001958:	2210      	movs	r2, #16
 800195a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800195c:	4b0a      	ldr	r3, [pc, #40]	@ (8001988 <MX_SPI1_Init+0x64>)
 800195e:	2200      	movs	r2, #0
 8001960:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001962:	4b09      	ldr	r3, [pc, #36]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001964:	2200      	movs	r2, #0
 8001966:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001968:	4b07      	ldr	r3, [pc, #28]	@ (8001988 <MX_SPI1_Init+0x64>)
 800196a:	2200      	movs	r2, #0
 800196c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800196e:	4b06      	ldr	r3, [pc, #24]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001970:	220a      	movs	r2, #10
 8001972:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001974:	4804      	ldr	r0, [pc, #16]	@ (8001988 <MX_SPI1_Init+0x64>)
 8001976:	f001 fe73 	bl	8003660 <HAL_SPI_Init>
 800197a:	4603      	mov	r3, r0
 800197c:	2b00      	cmp	r3, #0
 800197e:	d001      	beq.n	8001984 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001980:	f000 f9b6 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001984:	bf00      	nop
 8001986:	bd80      	pop	{r7, pc}
 8001988:	200001d4 	.word	0x200001d4
 800198c:	40013000 	.word	0x40013000

08001990 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b08e      	sub	sp, #56	@ 0x38
 8001994:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001996:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800199a:	2200      	movs	r2, #0
 800199c:	601a      	str	r2, [r3, #0]
 800199e:	605a      	str	r2, [r3, #4]
 80019a0:	609a      	str	r2, [r3, #8]
 80019a2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80019a4:	f107 0320 	add.w	r3, r7, #32
 80019a8:	2200      	movs	r2, #0
 80019aa:	601a      	str	r2, [r3, #0]
 80019ac:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80019ae:	1d3b      	adds	r3, r7, #4
 80019b0:	2200      	movs	r2, #0
 80019b2:	601a      	str	r2, [r3, #0]
 80019b4:	605a      	str	r2, [r3, #4]
 80019b6:	609a      	str	r2, [r3, #8]
 80019b8:	60da      	str	r2, [r3, #12]
 80019ba:	611a      	str	r2, [r3, #16]
 80019bc:	615a      	str	r2, [r3, #20]
 80019be:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80019c0:	4b2d      	ldr	r3, [pc, #180]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019c2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 80019c6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 63;
 80019c8:	4b2b      	ldr	r3, [pc, #172]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019ca:	223f      	movs	r2, #63	@ 0x3f
 80019cc:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80019ce:	4b2a      	ldr	r3, [pc, #168]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80019d4:	4b28      	ldr	r3, [pc, #160]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019d6:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80019da:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80019dc:	4b26      	ldr	r3, [pc, #152]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019de:	2200      	movs	r2, #0
 80019e0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80019e2:	4b25      	ldr	r3, [pc, #148]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80019e8:	4823      	ldr	r0, [pc, #140]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 80019ea:	f001 febd 	bl	8003768 <HAL_TIM_Base_Init>
 80019ee:	4603      	mov	r3, r0
 80019f0:	2b00      	cmp	r3, #0
 80019f2:	d001      	beq.n	80019f8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 80019f4:	f000 f97c 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80019f8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80019fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80019fe:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a02:	4619      	mov	r1, r3
 8001a04:	481c      	ldr	r0, [pc, #112]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a06:	f002 fa15 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8001a0a:	4603      	mov	r3, r0
 8001a0c:	2b00      	cmp	r3, #0
 8001a0e:	d001      	beq.n	8001a14 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8001a10:	f000 f96e 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8001a14:	4818      	ldr	r0, [pc, #96]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a16:	f001 ff49 	bl	80038ac <HAL_TIM_PWM_Init>
 8001a1a:	4603      	mov	r3, r0
 8001a1c:	2b00      	cmp	r3, #0
 8001a1e:	d001      	beq.n	8001a24 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8001a20:	f000 f966 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001a24:	2300      	movs	r3, #0
 8001a26:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001a2c:	f107 0320 	add.w	r3, r7, #32
 8001a30:	4619      	mov	r1, r3
 8001a32:	4811      	ldr	r0, [pc, #68]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a34:	f002 fd96 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001a38:	4603      	mov	r3, r0
 8001a3a:	2b00      	cmp	r3, #0
 8001a3c:	d001      	beq.n	8001a42 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8001a3e:	f000 f957 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001a42:	2360      	movs	r3, #96	@ 0x60
 8001a44:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001a46:	2300      	movs	r3, #0
 8001a48:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001a4a:	2300      	movs	r3, #0
 8001a4c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001a4e:	2300      	movs	r3, #0
 8001a50:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001a52:	1d3b      	adds	r3, r7, #4
 8001a54:	2200      	movs	r2, #0
 8001a56:	4619      	mov	r1, r3
 8001a58:	4807      	ldr	r0, [pc, #28]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a5a:	f002 f929 	bl	8003cb0 <HAL_TIM_PWM_ConfigChannel>
 8001a5e:	4603      	mov	r3, r0
 8001a60:	2b00      	cmp	r3, #0
 8001a62:	d001      	beq.n	8001a68 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8001a64:	f000 f944 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8001a68:	4803      	ldr	r0, [pc, #12]	@ (8001a78 <MX_TIM2_Init+0xe8>)
 8001a6a:	f000 fd6b 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8001a6e:	bf00      	nop
 8001a70:	3738      	adds	r7, #56	@ 0x38
 8001a72:	46bd      	mov	sp, r7
 8001a74:	bd80      	pop	{r7, pc}
 8001a76:	bf00      	nop
 8001a78:	2000022c 	.word	0x2000022c

08001a7c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001a7c:	b580      	push	{r7, lr}
 8001a7e:	b08e      	sub	sp, #56	@ 0x38
 8001a80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001a82:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001a86:	2200      	movs	r2, #0
 8001a88:	601a      	str	r2, [r3, #0]
 8001a8a:	605a      	str	r2, [r3, #4]
 8001a8c:	609a      	str	r2, [r3, #8]
 8001a8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001a90:	f107 0320 	add.w	r3, r7, #32
 8001a94:	2200      	movs	r2, #0
 8001a96:	601a      	str	r2, [r3, #0]
 8001a98:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001a9a:	1d3b      	adds	r3, r7, #4
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	601a      	str	r2, [r3, #0]
 8001aa0:	605a      	str	r2, [r3, #4]
 8001aa2:	609a      	str	r2, [r3, #8]
 8001aa4:	60da      	str	r2, [r3, #12]
 8001aa6:	611a      	str	r2, [r3, #16]
 8001aa8:	615a      	str	r2, [r3, #20]
 8001aaa:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001aac:	4b2c      	ldr	r3, [pc, #176]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001aae:	4a2d      	ldr	r2, [pc, #180]	@ (8001b64 <MX_TIM3_Init+0xe8>)
 8001ab0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8001ab2:	4b2b      	ldr	r3, [pc, #172]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ab4:	223f      	movs	r2, #63	@ 0x3f
 8001ab6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001ab8:	4b29      	ldr	r3, [pc, #164]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001aba:	2200      	movs	r2, #0
 8001abc:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8001abe:	4b28      	ldr	r3, [pc, #160]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ac0:	2263      	movs	r2, #99	@ 0x63
 8001ac2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001ac4:	4b26      	ldr	r3, [pc, #152]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ac6:	2200      	movs	r2, #0
 8001ac8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001aca:	4b25      	ldr	r3, [pc, #148]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001acc:	2200      	movs	r2, #0
 8001ace:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001ad0:	4823      	ldr	r0, [pc, #140]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001ad2:	f001 fe49 	bl	8003768 <HAL_TIM_Base_Init>
 8001ad6:	4603      	mov	r3, r0
 8001ad8:	2b00      	cmp	r3, #0
 8001ada:	d001      	beq.n	8001ae0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8001adc:	f000 f908 	bl	8001cf0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001ae0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001ae4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001ae6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8001aea:	4619      	mov	r1, r3
 8001aec:	481c      	ldr	r0, [pc, #112]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001aee:	f002 f9a1 	bl	8003e34 <HAL_TIM_ConfigClockSource>
 8001af2:	4603      	mov	r3, r0
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d001      	beq.n	8001afc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8001af8:	f000 f8fa 	bl	8001cf0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001afc:	4818      	ldr	r0, [pc, #96]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001afe:	f001 fed5 	bl	80038ac <HAL_TIM_PWM_Init>
 8001b02:	4603      	mov	r3, r0
 8001b04:	2b00      	cmp	r3, #0
 8001b06:	d001      	beq.n	8001b0c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8001b08:	f000 f8f2 	bl	8001cf0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b0c:	2300      	movs	r3, #0
 8001b0e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b10:	2300      	movs	r3, #0
 8001b12:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001b14:	f107 0320 	add.w	r3, r7, #32
 8001b18:	4619      	mov	r1, r3
 8001b1a:	4811      	ldr	r0, [pc, #68]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001b1c:	f002 fd22 	bl	8004564 <HAL_TIMEx_MasterConfigSynchronization>
 8001b20:	4603      	mov	r3, r0
 8001b22:	2b00      	cmp	r3, #0
 8001b24:	d001      	beq.n	8001b2a <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8001b26:	f000 f8e3 	bl	8001cf0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001b2a:	2360      	movs	r3, #96	@ 0x60
 8001b2c:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 5;
 8001b2e:	2305      	movs	r3, #5
 8001b30:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001b32:	2302      	movs	r3, #2
 8001b34:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001b36:	2300      	movs	r3, #0
 8001b38:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001b3a:	1d3b      	adds	r3, r7, #4
 8001b3c:	2200      	movs	r2, #0
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4807      	ldr	r0, [pc, #28]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001b42:	f002 f8b5 	bl	8003cb0 <HAL_TIM_PWM_ConfigChannel>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 8001b4c:	f000 f8d0 	bl	8001cf0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001b50:	4803      	ldr	r0, [pc, #12]	@ (8001b60 <MX_TIM3_Init+0xe4>)
 8001b52:	f000 fcf7 	bl	8002544 <HAL_TIM_MspPostInit>

}
 8001b56:	bf00      	nop
 8001b58:	3738      	adds	r7, #56	@ 0x38
 8001b5a:	46bd      	mov	sp, r7
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	20000274 	.word	0x20000274
 8001b64:	40000400 	.word	0x40000400

08001b68 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b68:	b580      	push	{r7, lr}
 8001b6a:	b088      	sub	sp, #32
 8001b6c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b6e:	f107 0310 	add.w	r3, r7, #16
 8001b72:	2200      	movs	r2, #0
 8001b74:	601a      	str	r2, [r3, #0]
 8001b76:	605a      	str	r2, [r3, #4]
 8001b78:	609a      	str	r2, [r3, #8]
 8001b7a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b7c:	4b56      	ldr	r3, [pc, #344]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b7e:	699b      	ldr	r3, [r3, #24]
 8001b80:	4a55      	ldr	r2, [pc, #340]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b82:	f043 0310 	orr.w	r3, r3, #16
 8001b86:	6193      	str	r3, [r2, #24]
 8001b88:	4b53      	ldr	r3, [pc, #332]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b8a:	699b      	ldr	r3, [r3, #24]
 8001b8c:	f003 0310 	and.w	r3, r3, #16
 8001b90:	60fb      	str	r3, [r7, #12]
 8001b92:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b94:	4b50      	ldr	r3, [pc, #320]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b96:	699b      	ldr	r3, [r3, #24]
 8001b98:	4a4f      	ldr	r2, [pc, #316]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001b9a:	f043 0304 	orr.w	r3, r3, #4
 8001b9e:	6193      	str	r3, [r2, #24]
 8001ba0:	4b4d      	ldr	r3, [pc, #308]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001ba2:	699b      	ldr	r3, [r3, #24]
 8001ba4:	f003 0304 	and.w	r3, r3, #4
 8001ba8:	60bb      	str	r3, [r7, #8]
 8001baa:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bac:	4b4a      	ldr	r3, [pc, #296]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bae:	699b      	ldr	r3, [r3, #24]
 8001bb0:	4a49      	ldr	r2, [pc, #292]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bb2:	f043 0308 	orr.w	r3, r3, #8
 8001bb6:	6193      	str	r3, [r2, #24]
 8001bb8:	4b47      	ldr	r3, [pc, #284]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bba:	699b      	ldr	r3, [r3, #24]
 8001bbc:	f003 0308 	and.w	r3, r3, #8
 8001bc0:	607b      	str	r3, [r7, #4]
 8001bc2:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001bc4:	4b44      	ldr	r3, [pc, #272]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bc6:	699b      	ldr	r3, [r3, #24]
 8001bc8:	4a43      	ldr	r2, [pc, #268]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bca:	f043 0320 	orr.w	r3, r3, #32
 8001bce:	6193      	str	r3, [r2, #24]
 8001bd0:	4b41      	ldr	r3, [pc, #260]	@ (8001cd8 <MX_GPIO_Init+0x170>)
 8001bd2:	699b      	ldr	r3, [r3, #24]
 8001bd4:	f003 0320 	and.w	r3, r3, #32
 8001bd8:	603b      	str	r3, [r7, #0]
 8001bda:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001bdc:	2200      	movs	r2, #0
 8001bde:	f24e 0138 	movw	r1, #57400	@ 0xe038
 8001be2:	483e      	ldr	r0, [pc, #248]	@ (8001cdc <MX_GPIO_Init+0x174>)
 8001be4:	f001 f945 	bl	8002e72 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001be8:	2200      	movs	r2, #0
 8001bea:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8001bee:	483c      	ldr	r0, [pc, #240]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001bf0:	f001 f93f 	bl	8002e72 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 8001bf4:	2200      	movs	r2, #0
 8001bf6:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8001bfa:	483a      	ldr	r0, [pc, #232]	@ (8001ce4 <MX_GPIO_Init+0x17c>)
 8001bfc:	f001 f939 	bl	8002e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8001c00:	2200      	movs	r2, #0
 8001c02:	2104      	movs	r1, #4
 8001c04:	4838      	ldr	r0, [pc, #224]	@ (8001ce8 <MX_GPIO_Init+0x180>)
 8001c06:	f001 f934 	bl	8002e72 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8001c0a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001c0e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001c10:	4b36      	ldr	r3, [pc, #216]	@ (8001cec <MX_GPIO_Init+0x184>)
 8001c12:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c14:	2300      	movs	r3, #0
 8001c16:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c18:	f107 0310 	add.w	r3, r7, #16
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	4830      	ldr	r0, [pc, #192]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001c20:	f000 ff8c 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8001c24:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8001c28:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c2a:	2301      	movs	r3, #1
 8001c2c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c2e:	2300      	movs	r3, #0
 8001c30:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c32:	2302      	movs	r3, #2
 8001c34:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c36:	f107 0310 	add.w	r3, r7, #16
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	4827      	ldr	r0, [pc, #156]	@ (8001cdc <MX_GPIO_Init+0x174>)
 8001c3e:	f000 ff7d 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001c42:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8001c46:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c48:	2301      	movs	r3, #1
 8001c4a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c50:	2302      	movs	r3, #2
 8001c52:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c54:	f107 0310 	add.w	r3, r7, #16
 8001c58:	4619      	mov	r1, r3
 8001c5a:	4821      	ldr	r0, [pc, #132]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001c5c:	f000 ff6e 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001c60:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001c64:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c66:	2301      	movs	r3, #1
 8001c68:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c6a:	2300      	movs	r3, #0
 8001c6c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c6e:	2302      	movs	r3, #2
 8001c70:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c72:	f107 0310 	add.w	r3, r7, #16
 8001c76:	4619      	mov	r1, r3
 8001c78:	481a      	ldr	r0, [pc, #104]	@ (8001ce4 <MX_GPIO_Init+0x17c>)
 8001c7a:	f000 ff5f 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c7e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001c82:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001c84:	2300      	movs	r3, #0
 8001c86:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c88:	2300      	movs	r3, #0
 8001c8a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c8c:	f107 0310 	add.w	r3, r7, #16
 8001c90:	4619      	mov	r1, r3
 8001c92:	4813      	ldr	r0, [pc, #76]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001c94:	f000 ff52 	bl	8002b3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c98:	2304      	movs	r3, #4
 8001c9a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c9c:	2301      	movs	r3, #1
 8001c9e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001ca0:	2300      	movs	r3, #0
 8001ca2:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ca4:	2302      	movs	r3, #2
 8001ca6:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ca8:	f107 0310 	add.w	r3, r7, #16
 8001cac:	4619      	mov	r1, r3
 8001cae:	480e      	ldr	r0, [pc, #56]	@ (8001ce8 <MX_GPIO_Init+0x180>)
 8001cb0:	f000 ff44 	bl	8002b3c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001cb8:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001cbe:	2301      	movs	r3, #1
 8001cc0:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001cc2:	f107 0310 	add.w	r3, r7, #16
 8001cc6:	4619      	mov	r1, r3
 8001cc8:	4805      	ldr	r0, [pc, #20]	@ (8001ce0 <MX_GPIO_Init+0x178>)
 8001cca:	f000 ff37 	bl	8002b3c <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 8001cce:	bf00      	nop
 8001cd0:	3720      	adds	r7, #32
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	bd80      	pop	{r7, pc}
 8001cd6:	bf00      	nop
 8001cd8:	40021000 	.word	0x40021000
 8001cdc:	40010c00 	.word	0x40010c00
 8001ce0:	40011000 	.word	0x40011000
 8001ce4:	40010800 	.word	0x40010800
 8001ce8:	40011400 	.word	0x40011400
 8001cec:	10110000 	.word	0x10110000

08001cf0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001cf0:	b480      	push	{r7}
 8001cf2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001cf4:	b672      	cpsid	i
}
 8001cf6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001cf8:	bf00      	nop
 8001cfa:	e7fd      	b.n	8001cf8 <Error_Handler+0x8>

08001cfc <swap_buffers>:
uint8_t buffer2[WIDTH][HEIGHT];
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;

void swap_buffers() {
 8001cfc:	b480      	push	{r7}
 8001cfe:	b083      	sub	sp, #12
 8001d00:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 8001d02:	4b07      	ldr	r3, [pc, #28]	@ (8001d20 <swap_buffers+0x24>)
 8001d04:	681b      	ldr	r3, [r3, #0]
 8001d06:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 8001d08:	4b06      	ldr	r3, [pc, #24]	@ (8001d24 <swap_buffers+0x28>)
 8001d0a:	681b      	ldr	r3, [r3, #0]
 8001d0c:	4a04      	ldr	r2, [pc, #16]	@ (8001d20 <swap_buffers+0x24>)
 8001d0e:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 8001d10:	4a04      	ldr	r2, [pc, #16]	@ (8001d24 <swap_buffers+0x28>)
 8001d12:	687b      	ldr	r3, [r7, #4]
 8001d14:	6013      	str	r3, [r2, #0]
}
 8001d16:	bf00      	nop
 8001d18:	370c      	adds	r7, #12
 8001d1a:	46bd      	mov	sp, r7
 8001d1c:	bc80      	pop	{r7}
 8001d1e:	4770      	bx	lr
 8001d20:	20000020 	.word	0x20000020
 8001d24:	20000024 	.word	0x20000024

08001d28 <clear_back_buffer>:


void clear_back_buffer(void) {
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 8001d2c:	4b04      	ldr	r3, [pc, #16]	@ (8001d40 <clear_back_buffer+0x18>)
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001d34:	2100      	movs	r1, #0
 8001d36:	4618      	mov	r0, r3
 8001d38:	f002 fdc7 	bl	80048ca <memset>
}
 8001d3c:	bf00      	nop
 8001d3e:	bd80      	pop	{r7, pc}
 8001d40:	20000024 	.word	0x20000024

08001d44 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 8001d44:	b480      	push	{r7}
 8001d46:	b085      	sub	sp, #20
 8001d48:	af00      	add	r7, sp, #0
 8001d4a:	60f8      	str	r0, [r7, #12]
 8001d4c:	60b9      	str	r1, [r7, #8]
 8001d4e:	4611      	mov	r1, r2
 8001d50:	461a      	mov	r2, r3
 8001d52:	460b      	mov	r3, r1
 8001d54:	71fb      	strb	r3, [r7, #7]
 8001d56:	4613      	mov	r3, r2
 8001d58:	71bb      	strb	r3, [r7, #6]
	r = r ? 1 : 0;
 8001d5a:	79fb      	ldrb	r3, [r7, #7]
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	bf14      	ite	ne
 8001d60:	2301      	movne	r3, #1
 8001d62:	2300      	moveq	r3, #0
 8001d64:	b2db      	uxtb	r3, r3
 8001d66:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 8001d68:	79bb      	ldrb	r3, [r7, #6]
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	bf14      	ite	ne
 8001d6e:	2301      	movne	r3, #1
 8001d70:	2300      	moveq	r3, #0
 8001d72:	b2db      	uxtb	r3, r3
 8001d74:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 8001d76:	7e3b      	ldrb	r3, [r7, #24]
 8001d78:	2b00      	cmp	r3, #0
 8001d7a:	bf14      	ite	ne
 8001d7c:	2301      	movne	r3, #1
 8001d7e:	2300      	moveq	r3, #0
 8001d80:	b2db      	uxtb	r3, r3
 8001d82:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	009b      	lsls	r3, r3, #2
 8001d88:	b25a      	sxtb	r2, r3
 8001d8a:	79bb      	ldrb	r3, [r7, #6]
 8001d8c:	005b      	lsls	r3, r3, #1
 8001d8e:	b25b      	sxtb	r3, r3
 8001d90:	4313      	orrs	r3, r2
 8001d92:	b25a      	sxtb	r2, r3
 8001d94:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001d98:	4313      	orrs	r3, r2
 8001d9a:	b259      	sxtb	r1, r3
 8001d9c:	4b07      	ldr	r3, [pc, #28]	@ (8001dbc <set_pixel+0x78>)
 8001d9e:	681a      	ldr	r2, [r3, #0]
 8001da0:	b2c9      	uxtb	r1, r1
 8001da2:	68fb      	ldr	r3, [r7, #12]
 8001da4:	015b      	lsls	r3, r3, #5
 8001da6:	441a      	add	r2, r3
 8001da8:	68bb      	ldr	r3, [r7, #8]
 8001daa:	4413      	add	r3, r2
 8001dac:	460a      	mov	r2, r1
 8001dae:	701a      	strb	r2, [r3, #0]
}
 8001db0:	bf00      	nop
 8001db2:	3714      	adds	r7, #20
 8001db4:	46bd      	mov	sp, r7
 8001db6:	bc80      	pop	{r7}
 8001db8:	4770      	bx	lr
 8001dba:	bf00      	nop
 8001dbc:	20000024 	.word	0x20000024

08001dc0 <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 8001dc0:	b580      	push	{r7, lr}
 8001dc2:	b086      	sub	sp, #24
 8001dc4:	af02      	add	r7, sp, #8
 8001dc6:	60f8      	str	r0, [r7, #12]
 8001dc8:	60b9      	str	r1, [r7, #8]
 8001dca:	4613      	mov	r3, r2
 8001dcc:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 8001dce:	79f9      	ldrb	r1, [r7, #7]
 8001dd0:	79fa      	ldrb	r2, [r7, #7]
 8001dd2:	79fb      	ldrb	r3, [r7, #7]
 8001dd4:	9300      	str	r3, [sp, #0]
 8001dd6:	460b      	mov	r3, r1
 8001dd8:	68b9      	ldr	r1, [r7, #8]
 8001dda:	68f8      	ldr	r0, [r7, #12]
 8001ddc:	f7ff ffb2 	bl	8001d44 <set_pixel>
}
 8001de0:	bf00      	nop
 8001de2:	3710      	adds	r7, #16
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}

08001de8 <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8001de8:	b480      	push	{r7}
 8001dea:	b085      	sub	sp, #20
 8001dec:	af00      	add	r7, sp, #0
 8001dee:	60b9      	str	r1, [r7, #8]
 8001df0:	607a      	str	r2, [r7, #4]
 8001df2:	603b      	str	r3, [r7, #0]
 8001df4:	4603      	mov	r3, r0
 8001df6:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8001df8:	7bfb      	ldrb	r3, [r7, #15]
 8001dfa:	089b      	lsrs	r3, r3, #2
 8001dfc:	b2db      	uxtb	r3, r3
 8001dfe:	f003 0301 	and.w	r3, r3, #1
 8001e02:	b2da      	uxtb	r2, r3
 8001e04:	68bb      	ldr	r3, [r7, #8]
 8001e06:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8001e08:	7bfb      	ldrb	r3, [r7, #15]
 8001e0a:	085b      	lsrs	r3, r3, #1
 8001e0c:	b2db      	uxtb	r3, r3
 8001e0e:	f003 0301 	and.w	r3, r3, #1
 8001e12:	b2da      	uxtb	r2, r3
 8001e14:	687b      	ldr	r3, [r7, #4]
 8001e16:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8001e18:	7bfb      	ldrb	r3, [r7, #15]
 8001e1a:	f003 0301 	and.w	r3, r3, #1
 8001e1e:	b2da      	uxtb	r2, r3
 8001e20:	683b      	ldr	r3, [r7, #0]
 8001e22:	701a      	strb	r2, [r3, #0]
}
 8001e24:	bf00      	nop
 8001e26:	3714      	adds	r7, #20
 8001e28:	46bd      	mov	sp, r7
 8001e2a:	bc80      	pop	{r7}
 8001e2c:	4770      	bx	lr
	...

08001e30 <render_row>:

uint8_t current_row = 0;
void render_row() {
 8001e30:	b580      	push	{r7, lr}
 8001e32:	b086      	sub	sp, #24
 8001e34:	af00      	add	r7, sp, #0
	uint8_t row = current_row;
 8001e36:	4b75      	ldr	r3, [pc, #468]	@ (800200c <render_row+0x1dc>)
 8001e38:	781b      	ldrb	r3, [r3, #0]
 8001e3a:	72fb      	strb	r3, [r7, #11]
	for (int segment = 0; segment < 16; ++segment) {
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	617b      	str	r3, [r7, #20]
 8001e40:	e08e      	b.n	8001f60 <render_row+0x130>
		for (int block = 1; block >= 0; --block) {
 8001e42:	2301      	movs	r3, #1
 8001e44:	613b      	str	r3, [r7, #16]
 8001e46:	e084      	b.n	8001f52 <render_row+0x122>
			for (int window = 0; window < 4; ++window) {
 8001e48:	2300      	movs	r3, #0
 8001e4a:	60fb      	str	r3, [r7, #12]
 8001e4c:	e07b      	b.n	8001f46 <render_row+0x116>
				uint8_t data_area_1 = (*front_buffer)[segment*4+window][row+block*8];
 8001e4e:	4b70      	ldr	r3, [pc, #448]	@ (8002010 <render_row+0x1e0>)
 8001e50:	6819      	ldr	r1, [r3, #0]
 8001e52:	697b      	ldr	r3, [r7, #20]
 8001e54:	009a      	lsls	r2, r3, #2
 8001e56:	68fb      	ldr	r3, [r7, #12]
 8001e58:	441a      	add	r2, r3
 8001e5a:	7af8      	ldrb	r0, [r7, #11]
 8001e5c:	693b      	ldr	r3, [r7, #16]
 8001e5e:	00db      	lsls	r3, r3, #3
 8001e60:	4403      	add	r3, r0
 8001e62:	0152      	lsls	r2, r2, #5
 8001e64:	440a      	add	r2, r1
 8001e66:	4413      	add	r3, r2
 8001e68:	781b      	ldrb	r3, [r3, #0]
 8001e6a:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[segment*4+window][row+block*8 + 16];
 8001e6c:	4b68      	ldr	r3, [pc, #416]	@ (8002010 <render_row+0x1e0>)
 8001e6e:	6819      	ldr	r1, [r3, #0]
 8001e70:	697b      	ldr	r3, [r7, #20]
 8001e72:	009a      	lsls	r2, r3, #2
 8001e74:	68fb      	ldr	r3, [r7, #12]
 8001e76:	441a      	add	r2, r3
 8001e78:	7af8      	ldrb	r0, [r7, #11]
 8001e7a:	693b      	ldr	r3, [r7, #16]
 8001e7c:	00db      	lsls	r3, r3, #3
 8001e7e:	4403      	add	r3, r0
 8001e80:	3310      	adds	r3, #16
 8001e82:	0152      	lsls	r2, r2, #5
 8001e84:	440a      	add	r2, r1
 8001e86:	4413      	add	r3, r2
 8001e88:	781b      	ldrb	r3, [r3, #0]
 8001e8a:	727b      	strb	r3, [r7, #9]

				uint8_t r, g, b;

				get_rgb(data_area_1, &r, &g, &b);
 8001e8c:	1dbb      	adds	r3, r7, #6
 8001e8e:	1dfa      	adds	r2, r7, #7
 8001e90:	f107 0108 	add.w	r1, r7, #8
 8001e94:	7ab8      	ldrb	r0, [r7, #10]
 8001e96:	f7ff ffa7 	bl	8001de8 <get_rgb>
				R1(r);
 8001e9a:	7a3b      	ldrb	r3, [r7, #8]
 8001e9c:	2b00      	cmp	r3, #0
 8001e9e:	d003      	beq.n	8001ea8 <render_row+0x78>
 8001ea0:	4b5c      	ldr	r3, [pc, #368]	@ (8002014 <render_row+0x1e4>)
 8001ea2:	2220      	movs	r2, #32
 8001ea4:	611a      	str	r2, [r3, #16]
 8001ea6:	e002      	b.n	8001eae <render_row+0x7e>
 8001ea8:	4b5a      	ldr	r3, [pc, #360]	@ (8002014 <render_row+0x1e4>)
 8001eaa:	2220      	movs	r2, #32
 8001eac:	615a      	str	r2, [r3, #20]
				G1(g);
 8001eae:	79fb      	ldrb	r3, [r7, #7]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d003      	beq.n	8001ebc <render_row+0x8c>
 8001eb4:	4b57      	ldr	r3, [pc, #348]	@ (8002014 <render_row+0x1e4>)
 8001eb6:	2208      	movs	r2, #8
 8001eb8:	611a      	str	r2, [r3, #16]
 8001eba:	e002      	b.n	8001ec2 <render_row+0x92>
 8001ebc:	4b55      	ldr	r3, [pc, #340]	@ (8002014 <render_row+0x1e4>)
 8001ebe:	2208      	movs	r2, #8
 8001ec0:	615a      	str	r2, [r3, #20]
				B1(b);
 8001ec2:	79bb      	ldrb	r3, [r7, #6]
 8001ec4:	2b00      	cmp	r3, #0
 8001ec6:	d004      	beq.n	8001ed2 <render_row+0xa2>
 8001ec8:	4b53      	ldr	r3, [pc, #332]	@ (8002018 <render_row+0x1e8>)
 8001eca:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ece:	611a      	str	r2, [r3, #16]
 8001ed0:	e003      	b.n	8001eda <render_row+0xaa>
 8001ed2:	4b51      	ldr	r3, [pc, #324]	@ (8002018 <render_row+0x1e8>)
 8001ed4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 8001ed8:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 8001eda:	1dbb      	adds	r3, r7, #6
 8001edc:	1dfa      	adds	r2, r7, #7
 8001ede:	f107 0108 	add.w	r1, r7, #8
 8001ee2:	7a78      	ldrb	r0, [r7, #9]
 8001ee4:	f7ff ff80 	bl	8001de8 <get_rgb>
				R2(r);
 8001ee8:	7a3b      	ldrb	r3, [r7, #8]
 8001eea:	2b00      	cmp	r3, #0
 8001eec:	d003      	beq.n	8001ef6 <render_row+0xc6>
 8001eee:	4b49      	ldr	r3, [pc, #292]	@ (8002014 <render_row+0x1e4>)
 8001ef0:	2210      	movs	r2, #16
 8001ef2:	611a      	str	r2, [r3, #16]
 8001ef4:	e002      	b.n	8001efc <render_row+0xcc>
 8001ef6:	4b47      	ldr	r3, [pc, #284]	@ (8002014 <render_row+0x1e4>)
 8001ef8:	2210      	movs	r2, #16
 8001efa:	615a      	str	r2, [r3, #20]
				G2(g);
 8001efc:	79fb      	ldrb	r3, [r7, #7]
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d003      	beq.n	8001f0a <render_row+0xda>
 8001f02:	4b46      	ldr	r3, [pc, #280]	@ (800201c <render_row+0x1ec>)
 8001f04:	2204      	movs	r2, #4
 8001f06:	611a      	str	r2, [r3, #16]
 8001f08:	e002      	b.n	8001f10 <render_row+0xe0>
 8001f0a:	4b44      	ldr	r3, [pc, #272]	@ (800201c <render_row+0x1ec>)
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	615a      	str	r2, [r3, #20]
				B2(b);
 8001f10:	79bb      	ldrb	r3, [r7, #6]
 8001f12:	2b00      	cmp	r3, #0
 8001f14:	d004      	beq.n	8001f20 <render_row+0xf0>
 8001f16:	4b40      	ldr	r3, [pc, #256]	@ (8002018 <render_row+0x1e8>)
 8001f18:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f1c:	611a      	str	r2, [r3, #16]
 8001f1e:	e003      	b.n	8001f28 <render_row+0xf8>
 8001f20:	4b3d      	ldr	r3, [pc, #244]	@ (8002018 <render_row+0x1e8>)
 8001f22:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001f26:	615a      	str	r2, [r3, #20]

				CLK_H;
 8001f28:	2201      	movs	r2, #1
 8001f2a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f2e:	4839      	ldr	r0, [pc, #228]	@ (8002014 <render_row+0x1e4>)
 8001f30:	f000 ff9f 	bl	8002e72 <HAL_GPIO_WritePin>
				CLK_L;
 8001f34:	2200      	movs	r2, #0
 8001f36:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001f3a:	4836      	ldr	r0, [pc, #216]	@ (8002014 <render_row+0x1e4>)
 8001f3c:	f000 ff99 	bl	8002e72 <HAL_GPIO_WritePin>
			for (int window = 0; window < 4; ++window) {
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	3301      	adds	r3, #1
 8001f44:	60fb      	str	r3, [r7, #12]
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	2b03      	cmp	r3, #3
 8001f4a:	dd80      	ble.n	8001e4e <render_row+0x1e>
		for (int block = 1; block >= 0; --block) {
 8001f4c:	693b      	ldr	r3, [r7, #16]
 8001f4e:	3b01      	subs	r3, #1
 8001f50:	613b      	str	r3, [r7, #16]
 8001f52:	693b      	ldr	r3, [r7, #16]
 8001f54:	2b00      	cmp	r3, #0
 8001f56:	f6bf af77 	bge.w	8001e48 <render_row+0x18>
	for (int segment = 0; segment < 16; ++segment) {
 8001f5a:	697b      	ldr	r3, [r7, #20]
 8001f5c:	3301      	adds	r3, #1
 8001f5e:	617b      	str	r3, [r7, #20]
 8001f60:	697b      	ldr	r3, [r7, #20]
 8001f62:	2b0f      	cmp	r3, #15
 8001f64:	f77f af6d 	ble.w	8001e42 <render_row+0x12>
			}
		}
	}

	OE_TIMER_DISABLE;
 8001f68:	4b2b      	ldr	r3, [pc, #172]	@ (8002018 <render_row+0x1e8>)
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	4a2a      	ldr	r2, [pc, #168]	@ (8002018 <render_row+0x1e8>)
 8001f6e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8001f72:	6013      	str	r3, [r2, #0]
	LAT_H;
 8001f74:	2201      	movs	r2, #1
 8001f76:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f7a:	4826      	ldr	r0, [pc, #152]	@ (8002014 <render_row+0x1e4>)
 8001f7c:	f000 ff79 	bl	8002e72 <HAL_GPIO_WritePin>
	LAT_L;
 8001f80:	2200      	movs	r2, #0
 8001f82:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001f86:	4823      	ldr	r0, [pc, #140]	@ (8002014 <render_row+0x1e4>)
 8001f88:	f000 ff73 	bl	8002e72 <HAL_GPIO_WritePin>
	ROW(row);
 8001f8c:	7afb      	ldrb	r3, [r7, #11]
 8001f8e:	f003 0301 	and.w	r3, r3, #1
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d004      	beq.n	8001fa0 <render_row+0x170>
 8001f96:	4b22      	ldr	r3, [pc, #136]	@ (8002020 <render_row+0x1f0>)
 8001f98:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001f9c:	611a      	str	r2, [r3, #16]
 8001f9e:	e003      	b.n	8001fa8 <render_row+0x178>
 8001fa0:	4b1f      	ldr	r3, [pc, #124]	@ (8002020 <render_row+0x1f0>)
 8001fa2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fa6:	615a      	str	r2, [r3, #20]
 8001fa8:	7afb      	ldrb	r3, [r7, #11]
 8001faa:	f003 0302 	and.w	r3, r3, #2
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d004      	beq.n	8001fbc <render_row+0x18c>
 8001fb2:	4b19      	ldr	r3, [pc, #100]	@ (8002018 <render_row+0x1e8>)
 8001fb4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fb8:	611a      	str	r2, [r3, #16]
 8001fba:	e003      	b.n	8001fc4 <render_row+0x194>
 8001fbc:	4b16      	ldr	r3, [pc, #88]	@ (8002018 <render_row+0x1e8>)
 8001fbe:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001fc2:	615a      	str	r2, [r3, #20]
 8001fc4:	7afb      	ldrb	r3, [r7, #11]
 8001fc6:	f003 0304 	and.w	r3, r3, #4
 8001fca:	2b00      	cmp	r3, #0
 8001fcc:	d004      	beq.n	8001fd8 <render_row+0x1a8>
 8001fce:	4b12      	ldr	r3, [pc, #72]	@ (8002018 <render_row+0x1e8>)
 8001fd0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fd4:	611a      	str	r2, [r3, #16]
 8001fd6:	e003      	b.n	8001fe0 <render_row+0x1b0>
 8001fd8:	4b0f      	ldr	r3, [pc, #60]	@ (8002018 <render_row+0x1e8>)
 8001fda:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001fde:	615a      	str	r2, [r3, #20]
 8001fe0:	7afb      	ldrb	r3, [r7, #11]
 8001fe2:	f003 0308 	and.w	r3, r3, #8
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d003      	beq.n	8001ff2 <render_row+0x1c2>
 8001fea:	4b0b      	ldr	r3, [pc, #44]	@ (8002018 <render_row+0x1e8>)
 8001fec:	2280      	movs	r2, #128	@ 0x80
 8001fee:	611a      	str	r2, [r3, #16]
 8001ff0:	e002      	b.n	8001ff8 <render_row+0x1c8>
 8001ff2:	4b09      	ldr	r3, [pc, #36]	@ (8002018 <render_row+0x1e8>)
 8001ff4:	2280      	movs	r2, #128	@ 0x80
 8001ff6:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 8001ff8:	4b07      	ldr	r3, [pc, #28]	@ (8002018 <render_row+0x1e8>)
 8001ffa:	681b      	ldr	r3, [r3, #0]
 8001ffc:	4a06      	ldr	r2, [pc, #24]	@ (8002018 <render_row+0x1e8>)
 8001ffe:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8002002:	6013      	str	r3, [r2, #0]
}
 8002004:	bf00      	nop
 8002006:	3718      	adds	r7, #24
 8002008:	46bd      	mov	sp, r7
 800200a:	bd80      	pop	{r7, pc}
 800200c:	200012d5 	.word	0x200012d5
 8002010:	20000020 	.word	0x20000020
 8002014:	40010c00 	.word	0x40010c00
 8002018:	40011000 	.word	0x40011000
 800201c:	40011400 	.word	0x40011400
 8002020:	40010800 	.word	0x40010800

08002024 <render_buffer>:



void render_buffer() {
 8002024:	b580      	push	{r7, lr}
 8002026:	af00      	add	r7, sp, #0
	render_row();
 8002028:	f7ff ff02 	bl	8001e30 <render_row>
	if (++current_row == 8) {
 800202c:	4b0b      	ldr	r3, [pc, #44]	@ (800205c <render_buffer+0x38>)
 800202e:	781b      	ldrb	r3, [r3, #0]
 8002030:	3301      	adds	r3, #1
 8002032:	b2da      	uxtb	r2, r3
 8002034:	4b09      	ldr	r3, [pc, #36]	@ (800205c <render_buffer+0x38>)
 8002036:	701a      	strb	r2, [r3, #0]
 8002038:	4b08      	ldr	r3, [pc, #32]	@ (800205c <render_buffer+0x38>)
 800203a:	781b      	ldrb	r3, [r3, #0]
 800203c:	2b08      	cmp	r3, #8
 800203e:	d10b      	bne.n	8002058 <render_buffer+0x34>
		current_row = 0;
 8002040:	4b06      	ldr	r3, [pc, #24]	@ (800205c <render_buffer+0x38>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 8002046:	4b06      	ldr	r3, [pc, #24]	@ (8002060 <render_buffer+0x3c>)
 8002048:	781b      	ldrb	r3, [r3, #0]
 800204a:	2b00      	cmp	r3, #0
 800204c:	d004      	beq.n	8002058 <render_buffer+0x34>
			swap_buffers();
 800204e:	f7ff fe55 	bl	8001cfc <swap_buffers>
			is_back_buffer_new = false;
 8002052:	4b03      	ldr	r3, [pc, #12]	@ (8002060 <render_buffer+0x3c>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
		}
	}
}
 8002058:	bf00      	nop
 800205a:	bd80      	pop	{r7, pc}
 800205c:	200012d5 	.word	0x200012d5
 8002060:	200012d4 	.word	0x200012d4

08002064 <draw_line>:

// Bresenham's line algorithm
// (https://en.wikipedia.org/wiki/Bresenham's_line_algorithm)
void draw_line(uint8_t x0, uint8_t y0, uint8_t x1, uint8_t y1) {
 8002064:	b590      	push	{r4, r7, lr}
 8002066:	b089      	sub	sp, #36	@ 0x24
 8002068:	af00      	add	r7, sp, #0
 800206a:	4604      	mov	r4, r0
 800206c:	4608      	mov	r0, r1
 800206e:	4611      	mov	r1, r2
 8002070:	461a      	mov	r2, r3
 8002072:	4623      	mov	r3, r4
 8002074:	71fb      	strb	r3, [r7, #7]
 8002076:	4603      	mov	r3, r0
 8002078:	71bb      	strb	r3, [r7, #6]
 800207a:	460b      	mov	r3, r1
 800207c:	717b      	strb	r3, [r7, #5]
 800207e:	4613      	mov	r3, r2
 8002080:	713b      	strb	r3, [r7, #4]
	int dx = abs(x1 - x0);
 8002082:	797a      	ldrb	r2, [r7, #5]
 8002084:	79fb      	ldrb	r3, [r7, #7]
 8002086:	1ad3      	subs	r3, r2, r3
 8002088:	2b00      	cmp	r3, #0
 800208a:	bfb8      	it	lt
 800208c:	425b      	neglt	r3, r3
 800208e:	61bb      	str	r3, [r7, #24]
	int sx = (x0 < x1) ? 1 : -1;
 8002090:	79fa      	ldrb	r2, [r7, #7]
 8002092:	797b      	ldrb	r3, [r7, #5]
 8002094:	429a      	cmp	r2, r3
 8002096:	d201      	bcs.n	800209c <draw_line+0x38>
 8002098:	2301      	movs	r3, #1
 800209a:	e001      	b.n	80020a0 <draw_line+0x3c>
 800209c:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020a0:	617b      	str	r3, [r7, #20]
	int dy = -abs(y1 - y0);
 80020a2:	793a      	ldrb	r2, [r7, #4]
 80020a4:	79bb      	ldrb	r3, [r7, #6]
 80020a6:	1ad3      	subs	r3, r2, r3
 80020a8:	2b00      	cmp	r3, #0
 80020aa:	bfb8      	it	lt
 80020ac:	425b      	neglt	r3, r3
 80020ae:	425b      	negs	r3, r3
 80020b0:	613b      	str	r3, [r7, #16]
	int sy = (y0 < y1) ? 1 : -1;
 80020b2:	79ba      	ldrb	r2, [r7, #6]
 80020b4:	793b      	ldrb	r3, [r7, #4]
 80020b6:	429a      	cmp	r2, r3
 80020b8:	d201      	bcs.n	80020be <draw_line+0x5a>
 80020ba:	2301      	movs	r3, #1
 80020bc:	e001      	b.n	80020c2 <draw_line+0x5e>
 80020be:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80020c2:	60fb      	str	r3, [r7, #12]
	int error = dx + dy;
 80020c4:	69ba      	ldr	r2, [r7, #24]
 80020c6:	693b      	ldr	r3, [r7, #16]
 80020c8:	4413      	add	r3, r2
 80020ca:	61fb      	str	r3, [r7, #28]

	while (1) {
		set_pixel_w(x0, y0, 1);
 80020cc:	79fb      	ldrb	r3, [r7, #7]
 80020ce:	79b9      	ldrb	r1, [r7, #6]
 80020d0:	2201      	movs	r2, #1
 80020d2:	4618      	mov	r0, r3
 80020d4:	f7ff fe74 	bl	8001dc0 <set_pixel_w>

		if (x0 == x1 && y0 == y1) {
 80020d8:	79fa      	ldrb	r2, [r7, #7]
 80020da:	797b      	ldrb	r3, [r7, #5]
 80020dc:	429a      	cmp	r2, r3
 80020de:	d103      	bne.n	80020e8 <draw_line+0x84>
 80020e0:	79ba      	ldrb	r2, [r7, #6]
 80020e2:	793b      	ldrb	r3, [r7, #4]
 80020e4:	429a      	cmp	r2, r3
 80020e6:	d025      	beq.n	8002134 <draw_line+0xd0>
			break;
		}

		int e2 = 2 * error;
 80020e8:	69fb      	ldr	r3, [r7, #28]
 80020ea:	005b      	lsls	r3, r3, #1
 80020ec:	60bb      	str	r3, [r7, #8]
		if (e2 >= dy) {
 80020ee:	68ba      	ldr	r2, [r7, #8]
 80020f0:	693b      	ldr	r3, [r7, #16]
 80020f2:	429a      	cmp	r2, r3
 80020f4:	db0c      	blt.n	8002110 <draw_line+0xac>
			if (x0 == x1) {
 80020f6:	79fa      	ldrb	r2, [r7, #7]
 80020f8:	797b      	ldrb	r3, [r7, #5]
 80020fa:	429a      	cmp	r2, r3
 80020fc:	d01c      	beq.n	8002138 <draw_line+0xd4>
				break;
			}
			error += dy;
 80020fe:	69fa      	ldr	r2, [r7, #28]
 8002100:	693b      	ldr	r3, [r7, #16]
 8002102:	4413      	add	r3, r2
 8002104:	61fb      	str	r3, [r7, #28]
			x0 += sx;
 8002106:	697b      	ldr	r3, [r7, #20]
 8002108:	b2da      	uxtb	r2, r3
 800210a:	79fb      	ldrb	r3, [r7, #7]
 800210c:	4413      	add	r3, r2
 800210e:	71fb      	strb	r3, [r7, #7]
		}
		if (e2 <= dx) {
 8002110:	68ba      	ldr	r2, [r7, #8]
 8002112:	69bb      	ldr	r3, [r7, #24]
 8002114:	429a      	cmp	r2, r3
 8002116:	dcd9      	bgt.n	80020cc <draw_line+0x68>
			if (y0 == y1) {
 8002118:	79ba      	ldrb	r2, [r7, #6]
 800211a:	793b      	ldrb	r3, [r7, #4]
 800211c:	429a      	cmp	r2, r3
 800211e:	d00d      	beq.n	800213c <draw_line+0xd8>
				break;
			}
			error += dx;
 8002120:	69fa      	ldr	r2, [r7, #28]
 8002122:	69bb      	ldr	r3, [r7, #24]
 8002124:	4413      	add	r3, r2
 8002126:	61fb      	str	r3, [r7, #28]
			y0 += sy;
 8002128:	68fb      	ldr	r3, [r7, #12]
 800212a:	b2da      	uxtb	r2, r3
 800212c:	79bb      	ldrb	r3, [r7, #6]
 800212e:	4413      	add	r3, r2
 8002130:	71bb      	strb	r3, [r7, #6]
	while (1) {
 8002132:	e7cb      	b.n	80020cc <draw_line+0x68>
			break;
 8002134:	bf00      	nop
 8002136:	e002      	b.n	800213e <draw_line+0xda>
				break;
 8002138:	bf00      	nop
 800213a:	e000      	b.n	800213e <draw_line+0xda>
				break;
 800213c:	bf00      	nop
		}
	}
}
 800213e:	bf00      	nop
 8002140:	3724      	adds	r7, #36	@ 0x24
 8002142:	46bd      	mov	sp, r7
 8002144:	bd90      	pop	{r4, r7, pc}

08002146 <draw_rect>:

void draw_rect(uint8_t x, uint8_t y, uint8_t width, uint8_t height, uint8_t r, uint8_t g, uint8_t b) {
 8002146:	b590      	push	{r4, r7, lr}
 8002148:	b087      	sub	sp, #28
 800214a:	af02      	add	r7, sp, #8
 800214c:	4604      	mov	r4, r0
 800214e:	4608      	mov	r0, r1
 8002150:	4611      	mov	r1, r2
 8002152:	461a      	mov	r2, r3
 8002154:	4623      	mov	r3, r4
 8002156:	71fb      	strb	r3, [r7, #7]
 8002158:	4603      	mov	r3, r0
 800215a:	71bb      	strb	r3, [r7, #6]
 800215c:	460b      	mov	r3, r1
 800215e:	717b      	strb	r3, [r7, #5]
 8002160:	4613      	mov	r3, r2
 8002162:	713b      	strb	r3, [r7, #4]
	for (uint8_t i = y; i < y + height && i < HEIGHT; ++i) {
 8002164:	79bb      	ldrb	r3, [r7, #6]
 8002166:	73fb      	strb	r3, [r7, #15]
 8002168:	e01d      	b.n	80021a6 <draw_rect+0x60>
		for (uint8_t j = x; j < x + width && j < WIDTH; ++j) {
 800216a:	79fb      	ldrb	r3, [r7, #7]
 800216c:	73bb      	strb	r3, [r7, #14]
 800216e:	e00e      	b.n	800218e <draw_rect+0x48>
			set_pixel(j, i, r, g, b);
 8002170:	7bb8      	ldrb	r0, [r7, #14]
 8002172:	7bf9      	ldrb	r1, [r7, #15]
 8002174:	f897 4024 	ldrb.w	r4, [r7, #36]	@ 0x24
 8002178:	f897 2020 	ldrb.w	r2, [r7, #32]
 800217c:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8002180:	9300      	str	r3, [sp, #0]
 8002182:	4623      	mov	r3, r4
 8002184:	f7ff fdde 	bl	8001d44 <set_pixel>
		for (uint8_t j = x; j < x + width && j < WIDTH; ++j) {
 8002188:	7bbb      	ldrb	r3, [r7, #14]
 800218a:	3301      	adds	r3, #1
 800218c:	73bb      	strb	r3, [r7, #14]
 800218e:	7bba      	ldrb	r2, [r7, #14]
 8002190:	79f9      	ldrb	r1, [r7, #7]
 8002192:	797b      	ldrb	r3, [r7, #5]
 8002194:	440b      	add	r3, r1
 8002196:	429a      	cmp	r2, r3
 8002198:	da02      	bge.n	80021a0 <draw_rect+0x5a>
 800219a:	7bbb      	ldrb	r3, [r7, #14]
 800219c:	2b3f      	cmp	r3, #63	@ 0x3f
 800219e:	d9e7      	bls.n	8002170 <draw_rect+0x2a>
	for (uint8_t i = y; i < y + height && i < HEIGHT; ++i) {
 80021a0:	7bfb      	ldrb	r3, [r7, #15]
 80021a2:	3301      	adds	r3, #1
 80021a4:	73fb      	strb	r3, [r7, #15]
 80021a6:	7bfa      	ldrb	r2, [r7, #15]
 80021a8:	79b9      	ldrb	r1, [r7, #6]
 80021aa:	793b      	ldrb	r3, [r7, #4]
 80021ac:	440b      	add	r3, r1
 80021ae:	429a      	cmp	r2, r3
 80021b0:	da02      	bge.n	80021b8 <draw_rect+0x72>
 80021b2:	7bfb      	ldrb	r3, [r7, #15]
 80021b4:	2b1f      	cmp	r3, #31
 80021b6:	d9d8      	bls.n	800216a <draw_rect+0x24>
		}
	}
}
 80021b8:	bf00      	nop
 80021ba:	3714      	adds	r7, #20
 80021bc:	46bd      	mov	sp, r7
 80021be:	bd90      	pop	{r4, r7, pc}

080021c0 <draw_Rect>:
void draw_Rect(Rect rect, uint8_t r, uint8_t g, uint8_t b) {
 80021c0:	b590      	push	{r4, r7, lr}
 80021c2:	b089      	sub	sp, #36	@ 0x24
 80021c4:	af04      	add	r7, sp, #16
 80021c6:	463c      	mov	r4, r7
 80021c8:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	draw_rect(rect.x, rect.y, rect.width, rect.height, r, g, b);
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	b2d8      	uxtb	r0, r3
 80021d0:	687b      	ldr	r3, [r7, #4]
 80021d2:	b2d9      	uxtb	r1, r3
 80021d4:	68bb      	ldr	r3, [r7, #8]
 80021d6:	b2da      	uxtb	r2, r3
 80021d8:	68fb      	ldr	r3, [r7, #12]
 80021da:	b2dc      	uxtb	r4, r3
 80021dc:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80021e0:	9302      	str	r3, [sp, #8]
 80021e2:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 80021e6:	9301      	str	r3, [sp, #4]
 80021e8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80021ec:	9300      	str	r3, [sp, #0]
 80021ee:	4623      	mov	r3, r4
 80021f0:	f7ff ffa9 	bl	8002146 <draw_rect>
}
 80021f4:	bf00      	nop
 80021f6:	3714      	adds	r7, #20
 80021f8:	46bd      	mov	sp, r7
 80021fa:	bd90      	pop	{r4, r7, pc}

080021fc <Draw_Rect>:
void Draw_Rect(Rect rect, Color color) {
 80021fc:	b590      	push	{r4, r7, lr}
 80021fe:	b089      	sub	sp, #36	@ 0x24
 8002200:	af04      	add	r7, sp, #16
 8002202:	463c      	mov	r4, r7
 8002204:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
	draw_Rect(rect, color.r, color.g, color.b);
 8002208:	f897 3020 	ldrb.w	r3, [r7, #32]
 800220c:	f897 2021 	ldrb.w	r2, [r7, #33]	@ 0x21
 8002210:	f897 1022 	ldrb.w	r1, [r7, #34]	@ 0x22
 8002214:	9102      	str	r1, [sp, #8]
 8002216:	9201      	str	r2, [sp, #4]
 8002218:	9300      	str	r3, [sp, #0]
 800221a:	463b      	mov	r3, r7
 800221c:	cb0f      	ldmia	r3, {r0, r1, r2, r3}
 800221e:	f7ff ffcf 	bl	80021c0 <draw_Rect>
}
 8002222:	bf00      	nop
 8002224:	3714      	adds	r7, #20
 8002226:	46bd      	mov	sp, r7
 8002228:	bd90      	pop	{r4, r7, pc}

0800222a <set_pixel_w_bold>:
};
#define FONT_WIDTH 5
#define FONT_HEIGHT 7


void set_pixel_w_bold(int x, int y, uint8_t w) {
 800222a:	b580      	push	{r7, lr}
 800222c:	b084      	sub	sp, #16
 800222e:	af00      	add	r7, sp, #0
 8002230:	60f8      	str	r0, [r7, #12]
 8002232:	60b9      	str	r1, [r7, #8]
 8002234:	4613      	mov	r3, r2
 8002236:	71fb      	strb	r3, [r7, #7]
	set_pixel_w(x  , y  , w);
 8002238:	79fb      	ldrb	r3, [r7, #7]
 800223a:	461a      	mov	r2, r3
 800223c:	68b9      	ldr	r1, [r7, #8]
 800223e:	68f8      	ldr	r0, [r7, #12]
 8002240:	f7ff fdbe 	bl	8001dc0 <set_pixel_w>
	set_pixel_w(x+1, y  , w);
 8002244:	68fb      	ldr	r3, [r7, #12]
 8002246:	3301      	adds	r3, #1
 8002248:	79fa      	ldrb	r2, [r7, #7]
 800224a:	68b9      	ldr	r1, [r7, #8]
 800224c:	4618      	mov	r0, r3
 800224e:	f7ff fdb7 	bl	8001dc0 <set_pixel_w>
	set_pixel_w(x  , y+1, w);
 8002252:	68bb      	ldr	r3, [r7, #8]
 8002254:	3301      	adds	r3, #1
 8002256:	79fa      	ldrb	r2, [r7, #7]
 8002258:	4619      	mov	r1, r3
 800225a:	68f8      	ldr	r0, [r7, #12]
 800225c:	f7ff fdb0 	bl	8001dc0 <set_pixel_w>
	set_pixel_w(x+1, y+1, w);
 8002260:	68fb      	ldr	r3, [r7, #12]
 8002262:	1c58      	adds	r0, r3, #1
 8002264:	68bb      	ldr	r3, [r7, #8]
 8002266:	3301      	adds	r3, #1
 8002268:	79fa      	ldrb	r2, [r7, #7]
 800226a:	4619      	mov	r1, r3
 800226c:	f7ff fda8 	bl	8001dc0 <set_pixel_w>
}
 8002270:	bf00      	nop
 8002272:	3710      	adds	r7, #16
 8002274:	46bd      	mov	sp, r7
 8002276:	bd80      	pop	{r7, pc}

08002278 <draw_digit>:

void draw_digit(uint8_t num, uint8_t x, uint8_t y, bool bold) {
 8002278:	b590      	push	{r4, r7, lr}
 800227a:	b085      	sub	sp, #20
 800227c:	af00      	add	r7, sp, #0
 800227e:	4604      	mov	r4, r0
 8002280:	4608      	mov	r0, r1
 8002282:	4611      	mov	r1, r2
 8002284:	461a      	mov	r2, r3
 8002286:	4623      	mov	r3, r4
 8002288:	71fb      	strb	r3, [r7, #7]
 800228a:	4603      	mov	r3, r0
 800228c:	71bb      	strb	r3, [r7, #6]
 800228e:	460b      	mov	r3, r1
 8002290:	717b      	strb	r3, [r7, #5]
 8002292:	4613      	mov	r3, r2
 8002294:	713b      	strb	r3, [r7, #4]
	if (num > 9) {
 8002296:	79fb      	ldrb	r3, [r7, #7]
 8002298:	2b09      	cmp	r3, #9
 800229a:	d83e      	bhi.n	800231a <draw_digit+0xa2>
		return;
	}

	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 800229c:	2300      	movs	r3, #0
 800229e:	73fb      	strb	r3, [r7, #15]
 80022a0:	e037      	b.n	8002312 <draw_digit+0x9a>
		uint8_t col_bitmap = number_bitmaps[num][col];
 80022a2:	79fa      	ldrb	r2, [r7, #7]
 80022a4:	7bf9      	ldrb	r1, [r7, #15]
 80022a6:	481f      	ldr	r0, [pc, #124]	@ (8002324 <draw_digit+0xac>)
 80022a8:	4613      	mov	r3, r2
 80022aa:	00db      	lsls	r3, r3, #3
 80022ac:	1a9b      	subs	r3, r3, r2
 80022ae:	4403      	add	r3, r0
 80022b0:	440b      	add	r3, r1
 80022b2:	781b      	ldrb	r3, [r3, #0]
 80022b4:	737b      	strb	r3, [r7, #13]

		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 80022b6:	2300      	movs	r3, #0
 80022b8:	73bb      	strb	r3, [r7, #14]
 80022ba:	e024      	b.n	8002306 <draw_digit+0x8e>
			if (col_bitmap & (1 << row)) {
 80022bc:	7b7a      	ldrb	r2, [r7, #13]
 80022be:	7bbb      	ldrb	r3, [r7, #14]
 80022c0:	fa42 f303 	asr.w	r3, r2, r3
 80022c4:	f003 0301 	and.w	r3, r3, #1
 80022c8:	2b00      	cmp	r3, #0
 80022ca:	d019      	beq.n	8002300 <draw_digit+0x88>
				if (bold) {
 80022cc:	793b      	ldrb	r3, [r7, #4]
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d00c      	beq.n	80022ec <draw_digit+0x74>
					set_pixel_w_bold(x + 2 * col, y + 2 * row, 1);
 80022d2:	79ba      	ldrb	r2, [r7, #6]
 80022d4:	7bfb      	ldrb	r3, [r7, #15]
 80022d6:	005b      	lsls	r3, r3, #1
 80022d8:	18d0      	adds	r0, r2, r3
 80022da:	797a      	ldrb	r2, [r7, #5]
 80022dc:	7bbb      	ldrb	r3, [r7, #14]
 80022de:	005b      	lsls	r3, r3, #1
 80022e0:	4413      	add	r3, r2
 80022e2:	2201      	movs	r2, #1
 80022e4:	4619      	mov	r1, r3
 80022e6:	f7ff ffa0 	bl	800222a <set_pixel_w_bold>
 80022ea:	e009      	b.n	8002300 <draw_digit+0x88>
				} else {
					set_pixel_w(x + col, y + row, 1);
 80022ec:	79ba      	ldrb	r2, [r7, #6]
 80022ee:	7bfb      	ldrb	r3, [r7, #15]
 80022f0:	18d0      	adds	r0, r2, r3
 80022f2:	797a      	ldrb	r2, [r7, #5]
 80022f4:	7bbb      	ldrb	r3, [r7, #14]
 80022f6:	4413      	add	r3, r2
 80022f8:	2201      	movs	r2, #1
 80022fa:	4619      	mov	r1, r3
 80022fc:	f7ff fd60 	bl	8001dc0 <set_pixel_w>
		for (uint8_t row = 0; row < FONT_HEIGHT; ++row) {
 8002300:	7bbb      	ldrb	r3, [r7, #14]
 8002302:	3301      	adds	r3, #1
 8002304:	73bb      	strb	r3, [r7, #14]
 8002306:	7bbb      	ldrb	r3, [r7, #14]
 8002308:	2b06      	cmp	r3, #6
 800230a:	d9d7      	bls.n	80022bc <draw_digit+0x44>
	for (uint8_t col = 0; col < FONT_WIDTH; ++col) {
 800230c:	7bfb      	ldrb	r3, [r7, #15]
 800230e:	3301      	adds	r3, #1
 8002310:	73fb      	strb	r3, [r7, #15]
 8002312:	7bfb      	ldrb	r3, [r7, #15]
 8002314:	2b04      	cmp	r3, #4
 8002316:	d9c4      	bls.n	80022a2 <draw_digit+0x2a>
 8002318:	e000      	b.n	800231c <draw_digit+0xa4>
		return;
 800231a:	bf00      	nop
				}
			}
		}
	}
}
 800231c:	3714      	adds	r7, #20
 800231e:	46bd      	mov	sp, r7
 8002320:	bd90      	pop	{r4, r7, pc}
 8002322:	bf00      	nop
 8002324:	0800562c 	.word	0x0800562c

08002328 <draw_number>:

void draw_number(int num, uint8_t x, uint8_t y, bool bold) {
 8002328:	b580      	push	{r7, lr}
 800232a:	b088      	sub	sp, #32
 800232c:	af00      	add	r7, sp, #0
 800232e:	6078      	str	r0, [r7, #4]
 8002330:	4608      	mov	r0, r1
 8002332:	4611      	mov	r1, r2
 8002334:	461a      	mov	r2, r3
 8002336:	4603      	mov	r3, r0
 8002338:	70fb      	strb	r3, [r7, #3]
 800233a:	460b      	mov	r3, r1
 800233c:	70bb      	strb	r3, [r7, #2]
 800233e:	4613      	mov	r3, r2
 8002340:	707b      	strb	r3, [r7, #1]
	if (num == 0) {
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d106      	bne.n	8002356 <draw_number+0x2e>
		draw_digit(0, x, y, bold);
 8002348:	787b      	ldrb	r3, [r7, #1]
 800234a:	78ba      	ldrb	r2, [r7, #2]
 800234c:	78f9      	ldrb	r1, [r7, #3]
 800234e:	2000      	movs	r0, #0
 8002350:	f7ff ff92 	bl	8002278 <draw_digit>
		return;
 8002354:	e049      	b.n	80023ea <draw_number+0xc2>
	}

	uint8_t digit_count = 0;
 8002356:	2300      	movs	r3, #0
 8002358:	77fb      	strb	r3, [r7, #31]
	int tmp = num;
 800235a:	687b      	ldr	r3, [r7, #4]
 800235c:	61bb      	str	r3, [r7, #24]
	while (tmp > 0) {
 800235e:	e00a      	b.n	8002376 <draw_number+0x4e>
		tmp /= 10;
 8002360:	69bb      	ldr	r3, [r7, #24]
 8002362:	4a23      	ldr	r2, [pc, #140]	@ (80023f0 <draw_number+0xc8>)
 8002364:	fb82 1203 	smull	r1, r2, r2, r3
 8002368:	1092      	asrs	r2, r2, #2
 800236a:	17db      	asrs	r3, r3, #31
 800236c:	1ad3      	subs	r3, r2, r3
 800236e:	61bb      	str	r3, [r7, #24]
		digit_count++;
 8002370:	7ffb      	ldrb	r3, [r7, #31]
 8002372:	3301      	adds	r3, #1
 8002374:	77fb      	strb	r3, [r7, #31]
	while (tmp > 0) {
 8002376:	69bb      	ldr	r3, [r7, #24]
 8002378:	2b00      	cmp	r3, #0
 800237a:	dcf1      	bgt.n	8002360 <draw_number+0x38>
	}

	uint8_t digit_width = bold ? (FONT_WIDTH * 2) : FONT_WIDTH;
 800237c:	787b      	ldrb	r3, [r7, #1]
 800237e:	2b00      	cmp	r3, #0
 8002380:	d001      	beq.n	8002386 <draw_number+0x5e>
 8002382:	230a      	movs	r3, #10
 8002384:	e000      	b.n	8002388 <draw_number+0x60>
 8002386:	2305      	movs	r3, #5
 8002388:	74fb      	strb	r3, [r7, #19]
	for (int i = digit_count - 1; i >= 0; --i) {
 800238a:	7ffb      	ldrb	r3, [r7, #31]
 800238c:	3b01      	subs	r3, #1
 800238e:	617b      	str	r3, [r7, #20]
 8002390:	e028      	b.n	80023e4 <draw_number+0xbc>
		int digit = num % 10;
 8002392:	687a      	ldr	r2, [r7, #4]
 8002394:	4b16      	ldr	r3, [pc, #88]	@ (80023f0 <draw_number+0xc8>)
 8002396:	fb83 1302 	smull	r1, r3, r3, r2
 800239a:	1099      	asrs	r1, r3, #2
 800239c:	17d3      	asrs	r3, r2, #31
 800239e:	1ac9      	subs	r1, r1, r3
 80023a0:	460b      	mov	r3, r1
 80023a2:	009b      	lsls	r3, r3, #2
 80023a4:	440b      	add	r3, r1
 80023a6:	005b      	lsls	r3, r3, #1
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	60fb      	str	r3, [r7, #12]
		draw_digit(digit, x + i * (digit_width + 1), y, bold);
 80023ac:	68fb      	ldr	r3, [r7, #12]
 80023ae:	b2d8      	uxtb	r0, r3
 80023b0:	7cfb      	ldrb	r3, [r7, #19]
 80023b2:	3301      	adds	r3, #1
 80023b4:	b2db      	uxtb	r3, r3
 80023b6:	697a      	ldr	r2, [r7, #20]
 80023b8:	b2d2      	uxtb	r2, r2
 80023ba:	fb02 f303 	mul.w	r3, r2, r3
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	78fb      	ldrb	r3, [r7, #3]
 80023c2:	4413      	add	r3, r2
 80023c4:	b2d9      	uxtb	r1, r3
 80023c6:	787b      	ldrb	r3, [r7, #1]
 80023c8:	78ba      	ldrb	r2, [r7, #2]
 80023ca:	f7ff ff55 	bl	8002278 <draw_digit>
		num /= 10;
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	4a07      	ldr	r2, [pc, #28]	@ (80023f0 <draw_number+0xc8>)
 80023d2:	fb82 1203 	smull	r1, r2, r2, r3
 80023d6:	1092      	asrs	r2, r2, #2
 80023d8:	17db      	asrs	r3, r3, #31
 80023da:	1ad3      	subs	r3, r2, r3
 80023dc:	607b      	str	r3, [r7, #4]
	for (int i = digit_count - 1; i >= 0; --i) {
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	3b01      	subs	r3, #1
 80023e2:	617b      	str	r3, [r7, #20]
 80023e4:	697b      	ldr	r3, [r7, #20]
 80023e6:	2b00      	cmp	r3, #0
 80023e8:	dad3      	bge.n	8002392 <draw_number+0x6a>
	}
}
 80023ea:	3720      	adds	r7, #32
 80023ec:	46bd      	mov	sp, r7
 80023ee:	bd80      	pop	{r7, pc}
 80023f0:	66666667 	.word	0x66666667

080023f4 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80023f4:	b480      	push	{r7}
 80023f6:	b085      	sub	sp, #20
 80023f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 80023fa:	4b15      	ldr	r3, [pc, #84]	@ (8002450 <HAL_MspInit+0x5c>)
 80023fc:	699b      	ldr	r3, [r3, #24]
 80023fe:	4a14      	ldr	r2, [pc, #80]	@ (8002450 <HAL_MspInit+0x5c>)
 8002400:	f043 0301 	orr.w	r3, r3, #1
 8002404:	6193      	str	r3, [r2, #24]
 8002406:	4b12      	ldr	r3, [pc, #72]	@ (8002450 <HAL_MspInit+0x5c>)
 8002408:	699b      	ldr	r3, [r3, #24]
 800240a:	f003 0301 	and.w	r3, r3, #1
 800240e:	60bb      	str	r3, [r7, #8]
 8002410:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002412:	4b0f      	ldr	r3, [pc, #60]	@ (8002450 <HAL_MspInit+0x5c>)
 8002414:	69db      	ldr	r3, [r3, #28]
 8002416:	4a0e      	ldr	r2, [pc, #56]	@ (8002450 <HAL_MspInit+0x5c>)
 8002418:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800241c:	61d3      	str	r3, [r2, #28]
 800241e:	4b0c      	ldr	r3, [pc, #48]	@ (8002450 <HAL_MspInit+0x5c>)
 8002420:	69db      	ldr	r3, [r3, #28]
 8002422:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002426:	607b      	str	r3, [r7, #4]
 8002428:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 800242a:	4b0a      	ldr	r3, [pc, #40]	@ (8002454 <HAL_MspInit+0x60>)
 800242c:	685b      	ldr	r3, [r3, #4]
 800242e:	60fb      	str	r3, [r7, #12]
 8002430:	68fb      	ldr	r3, [r7, #12]
 8002432:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8002436:	60fb      	str	r3, [r7, #12]
 8002438:	68fb      	ldr	r3, [r7, #12]
 800243a:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 800243e:	60fb      	str	r3, [r7, #12]
 8002440:	4a04      	ldr	r2, [pc, #16]	@ (8002454 <HAL_MspInit+0x60>)
 8002442:	68fb      	ldr	r3, [r7, #12]
 8002444:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002446:	bf00      	nop
 8002448:	3714      	adds	r7, #20
 800244a:	46bd      	mov	sp, r7
 800244c:	bc80      	pop	{r7}
 800244e:	4770      	bx	lr
 8002450:	40021000 	.word	0x40021000
 8002454:	40010000 	.word	0x40010000

08002458 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002458:	b580      	push	{r7, lr}
 800245a:	b088      	sub	sp, #32
 800245c:	af00      	add	r7, sp, #0
 800245e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002460:	f107 0310 	add.w	r3, r7, #16
 8002464:	2200      	movs	r2, #0
 8002466:	601a      	str	r2, [r3, #0]
 8002468:	605a      	str	r2, [r3, #4]
 800246a:	609a      	str	r2, [r3, #8]
 800246c:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	681b      	ldr	r3, [r3, #0]
 8002472:	4a15      	ldr	r2, [pc, #84]	@ (80024c8 <HAL_SPI_MspInit+0x70>)
 8002474:	4293      	cmp	r3, r2
 8002476:	d123      	bne.n	80024c0 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8002478:	4b14      	ldr	r3, [pc, #80]	@ (80024cc <HAL_SPI_MspInit+0x74>)
 800247a:	699b      	ldr	r3, [r3, #24]
 800247c:	4a13      	ldr	r2, [pc, #76]	@ (80024cc <HAL_SPI_MspInit+0x74>)
 800247e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8002482:	6193      	str	r3, [r2, #24]
 8002484:	4b11      	ldr	r3, [pc, #68]	@ (80024cc <HAL_SPI_MspInit+0x74>)
 8002486:	699b      	ldr	r3, [r3, #24]
 8002488:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800248c:	60fb      	str	r3, [r7, #12]
 800248e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002490:	4b0e      	ldr	r3, [pc, #56]	@ (80024cc <HAL_SPI_MspInit+0x74>)
 8002492:	699b      	ldr	r3, [r3, #24]
 8002494:	4a0d      	ldr	r2, [pc, #52]	@ (80024cc <HAL_SPI_MspInit+0x74>)
 8002496:	f043 0304 	orr.w	r3, r3, #4
 800249a:	6193      	str	r3, [r2, #24]
 800249c:	4b0b      	ldr	r3, [pc, #44]	@ (80024cc <HAL_SPI_MspInit+0x74>)
 800249e:	699b      	ldr	r3, [r3, #24]
 80024a0:	f003 0304 	and.w	r3, r3, #4
 80024a4:	60bb      	str	r3, [r7, #8]
 80024a6:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 80024a8:	23a0      	movs	r3, #160	@ 0xa0
 80024aa:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80024ac:	2302      	movs	r3, #2
 80024ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80024b0:	2303      	movs	r3, #3
 80024b2:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80024b4:	f107 0310 	add.w	r3, r7, #16
 80024b8:	4619      	mov	r1, r3
 80024ba:	4805      	ldr	r0, [pc, #20]	@ (80024d0 <HAL_SPI_MspInit+0x78>)
 80024bc:	f000 fb3e 	bl	8002b3c <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 80024c0:	bf00      	nop
 80024c2:	3720      	adds	r7, #32
 80024c4:	46bd      	mov	sp, r7
 80024c6:	bd80      	pop	{r7, pc}
 80024c8:	40013000 	.word	0x40013000
 80024cc:	40021000 	.word	0x40021000
 80024d0:	40010800 	.word	0x40010800

080024d4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80024d4:	b580      	push	{r7, lr}
 80024d6:	b084      	sub	sp, #16
 80024d8:	af00      	add	r7, sp, #0
 80024da:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80024dc:	687b      	ldr	r3, [r7, #4]
 80024de:	681b      	ldr	r3, [r3, #0]
 80024e0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80024e4:	d114      	bne.n	8002510 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80024e6:	4b15      	ldr	r3, [pc, #84]	@ (800253c <HAL_TIM_Base_MspInit+0x68>)
 80024e8:	69db      	ldr	r3, [r3, #28]
 80024ea:	4a14      	ldr	r2, [pc, #80]	@ (800253c <HAL_TIM_Base_MspInit+0x68>)
 80024ec:	f043 0301 	orr.w	r3, r3, #1
 80024f0:	61d3      	str	r3, [r2, #28]
 80024f2:	4b12      	ldr	r3, [pc, #72]	@ (800253c <HAL_TIM_Base_MspInit+0x68>)
 80024f4:	69db      	ldr	r3, [r3, #28]
 80024f6:	f003 0301 	and.w	r3, r3, #1
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80024fe:	2200      	movs	r2, #0
 8002500:	2100      	movs	r1, #0
 8002502:	201c      	movs	r0, #28
 8002504:	f000 fae3 	bl	8002ace <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002508:	201c      	movs	r0, #28
 800250a:	f000 fafc 	bl	8002b06 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800250e:	e010      	b.n	8002532 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	681b      	ldr	r3, [r3, #0]
 8002514:	4a0a      	ldr	r2, [pc, #40]	@ (8002540 <HAL_TIM_Base_MspInit+0x6c>)
 8002516:	4293      	cmp	r3, r2
 8002518:	d10b      	bne.n	8002532 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800251a:	4b08      	ldr	r3, [pc, #32]	@ (800253c <HAL_TIM_Base_MspInit+0x68>)
 800251c:	69db      	ldr	r3, [r3, #28]
 800251e:	4a07      	ldr	r2, [pc, #28]	@ (800253c <HAL_TIM_Base_MspInit+0x68>)
 8002520:	f043 0302 	orr.w	r3, r3, #2
 8002524:	61d3      	str	r3, [r2, #28]
 8002526:	4b05      	ldr	r3, [pc, #20]	@ (800253c <HAL_TIM_Base_MspInit+0x68>)
 8002528:	69db      	ldr	r3, [r3, #28]
 800252a:	f003 0302 	and.w	r3, r3, #2
 800252e:	60bb      	str	r3, [r7, #8]
 8002530:	68bb      	ldr	r3, [r7, #8]
}
 8002532:	bf00      	nop
 8002534:	3710      	adds	r7, #16
 8002536:	46bd      	mov	sp, r7
 8002538:	bd80      	pop	{r7, pc}
 800253a:	bf00      	nop
 800253c:	40021000 	.word	0x40021000
 8002540:	40000400 	.word	0x40000400

08002544 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002544:	b580      	push	{r7, lr}
 8002546:	b08a      	sub	sp, #40	@ 0x28
 8002548:	af00      	add	r7, sp, #0
 800254a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800254c:	f107 0314 	add.w	r3, r7, #20
 8002550:	2200      	movs	r2, #0
 8002552:	601a      	str	r2, [r3, #0]
 8002554:	605a      	str	r2, [r3, #4]
 8002556:	609a      	str	r2, [r3, #8]
 8002558:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 800255a:	687b      	ldr	r3, [r7, #4]
 800255c:	681b      	ldr	r3, [r3, #0]
 800255e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002562:	d118      	bne.n	8002596 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002564:	4b25      	ldr	r3, [pc, #148]	@ (80025fc <HAL_TIM_MspPostInit+0xb8>)
 8002566:	699b      	ldr	r3, [r3, #24]
 8002568:	4a24      	ldr	r2, [pc, #144]	@ (80025fc <HAL_TIM_MspPostInit+0xb8>)
 800256a:	f043 0304 	orr.w	r3, r3, #4
 800256e:	6193      	str	r3, [r2, #24]
 8002570:	4b22      	ldr	r3, [pc, #136]	@ (80025fc <HAL_TIM_MspPostInit+0xb8>)
 8002572:	699b      	ldr	r3, [r3, #24]
 8002574:	f003 0304 	and.w	r3, r3, #4
 8002578:	613b      	str	r3, [r7, #16]
 800257a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800257c:	2301      	movs	r3, #1
 800257e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002580:	2302      	movs	r3, #2
 8002582:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002584:	2302      	movs	r3, #2
 8002586:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002588:	f107 0314 	add.w	r3, r7, #20
 800258c:	4619      	mov	r1, r3
 800258e:	481c      	ldr	r0, [pc, #112]	@ (8002600 <HAL_TIM_MspPostInit+0xbc>)
 8002590:	f000 fad4 	bl	8002b3c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002594:	e02e      	b.n	80025f4 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8002596:	687b      	ldr	r3, [r7, #4]
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4a1a      	ldr	r2, [pc, #104]	@ (8002604 <HAL_TIM_MspPostInit+0xc0>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d129      	bne.n	80025f4 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a0:	4b16      	ldr	r3, [pc, #88]	@ (80025fc <HAL_TIM_MspPostInit+0xb8>)
 80025a2:	699b      	ldr	r3, [r3, #24]
 80025a4:	4a15      	ldr	r2, [pc, #84]	@ (80025fc <HAL_TIM_MspPostInit+0xb8>)
 80025a6:	f043 0310 	orr.w	r3, r3, #16
 80025aa:	6193      	str	r3, [r2, #24]
 80025ac:	4b13      	ldr	r3, [pc, #76]	@ (80025fc <HAL_TIM_MspPostInit+0xb8>)
 80025ae:	699b      	ldr	r3, [r3, #24]
 80025b0:	f003 0310 	and.w	r3, r3, #16
 80025b4:	60fb      	str	r3, [r7, #12]
 80025b6:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80025b8:	2340      	movs	r3, #64	@ 0x40
 80025ba:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025bc:	2302      	movs	r3, #2
 80025be:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80025c0:	2302      	movs	r3, #2
 80025c2:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80025c4:	f107 0314 	add.w	r3, r7, #20
 80025c8:	4619      	mov	r1, r3
 80025ca:	480f      	ldr	r0, [pc, #60]	@ (8002608 <HAL_TIM_MspPostInit+0xc4>)
 80025cc:	f000 fab6 	bl	8002b3c <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 80025d0:	4b0e      	ldr	r3, [pc, #56]	@ (800260c <HAL_TIM_MspPostInit+0xc8>)
 80025d2:	685b      	ldr	r3, [r3, #4]
 80025d4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025d6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025d8:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 80025dc:	627b      	str	r3, [r7, #36]	@ 0x24
 80025de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e0:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 80025e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80025e6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025e8:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 80025ec:	627b      	str	r3, [r7, #36]	@ 0x24
 80025ee:	4a07      	ldr	r2, [pc, #28]	@ (800260c <HAL_TIM_MspPostInit+0xc8>)
 80025f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80025f2:	6053      	str	r3, [r2, #4]
}
 80025f4:	bf00      	nop
 80025f6:	3728      	adds	r7, #40	@ 0x28
 80025f8:	46bd      	mov	sp, r7
 80025fa:	bd80      	pop	{r7, pc}
 80025fc:	40021000 	.word	0x40021000
 8002600:	40010800 	.word	0x40010800
 8002604:	40000400 	.word	0x40000400
 8002608:	40011000 	.word	0x40011000
 800260c:	40010000 	.word	0x40010000

08002610 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002610:	b480      	push	{r7}
 8002612:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002614:	bf00      	nop
 8002616:	e7fd      	b.n	8002614 <NMI_Handler+0x4>

08002618 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002618:	b480      	push	{r7}
 800261a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800261c:	bf00      	nop
 800261e:	e7fd      	b.n	800261c <HardFault_Handler+0x4>

08002620 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002620:	b480      	push	{r7}
 8002622:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002624:	bf00      	nop
 8002626:	e7fd      	b.n	8002624 <MemManage_Handler+0x4>

08002628 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002628:	b480      	push	{r7}
 800262a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800262c:	bf00      	nop
 800262e:	e7fd      	b.n	800262c <BusFault_Handler+0x4>

08002630 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002630:	b480      	push	{r7}
 8002632:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002634:	bf00      	nop
 8002636:	e7fd      	b.n	8002634 <UsageFault_Handler+0x4>

08002638 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002638:	b480      	push	{r7}
 800263a:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800263c:	bf00      	nop
 800263e:	46bd      	mov	sp, r7
 8002640:	bc80      	pop	{r7}
 8002642:	4770      	bx	lr

08002644 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002644:	b480      	push	{r7}
 8002646:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002648:	bf00      	nop
 800264a:	46bd      	mov	sp, r7
 800264c:	bc80      	pop	{r7}
 800264e:	4770      	bx	lr

08002650 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002650:	b480      	push	{r7}
 8002652:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002654:	bf00      	nop
 8002656:	46bd      	mov	sp, r7
 8002658:	bc80      	pop	{r7}
 800265a:	4770      	bx	lr

0800265c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800265c:	b580      	push	{r7, lr}
 800265e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002660:	f000 f942 	bl	80028e8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002664:	bf00      	nop
 8002666:	bd80      	pop	{r7, pc}

08002668 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002668:	b580      	push	{r7, lr}
 800266a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 800266c:	f7ff fcda 	bl	8002024 <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002670:	4802      	ldr	r0, [pc, #8]	@ (800267c <TIM2_IRQHandler+0x14>)
 8002672:	f001 fa15 	bl	8003aa0 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002676:	bf00      	nop
 8002678:	bd80      	pop	{r7, pc}
 800267a:	bf00      	nop
 800267c:	2000022c 	.word	0x2000022c

08002680 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002680:	b480      	push	{r7}
 8002682:	af00      	add	r7, sp, #0
  return 1;
 8002684:	2301      	movs	r3, #1
}
 8002686:	4618      	mov	r0, r3
 8002688:	46bd      	mov	sp, r7
 800268a:	bc80      	pop	{r7}
 800268c:	4770      	bx	lr

0800268e <_kill>:

int _kill(int pid, int sig)
{
 800268e:	b580      	push	{r7, lr}
 8002690:	b082      	sub	sp, #8
 8002692:	af00      	add	r7, sp, #0
 8002694:	6078      	str	r0, [r7, #4]
 8002696:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002698:	f002 f966 	bl	8004968 <__errno>
 800269c:	4603      	mov	r3, r0
 800269e:	2216      	movs	r2, #22
 80026a0:	601a      	str	r2, [r3, #0]
  return -1;
 80026a2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 80026a6:	4618      	mov	r0, r3
 80026a8:	3708      	adds	r7, #8
 80026aa:	46bd      	mov	sp, r7
 80026ac:	bd80      	pop	{r7, pc}

080026ae <_exit>:

void _exit (int status)
{
 80026ae:	b580      	push	{r7, lr}
 80026b0:	b082      	sub	sp, #8
 80026b2:	af00      	add	r7, sp, #0
 80026b4:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80026b6:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 80026ba:	6878      	ldr	r0, [r7, #4]
 80026bc:	f7ff ffe7 	bl	800268e <_kill>
  while (1) {}    /* Make sure we hang here */
 80026c0:	bf00      	nop
 80026c2:	e7fd      	b.n	80026c0 <_exit+0x12>

080026c4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80026c4:	b580      	push	{r7, lr}
 80026c6:	b086      	sub	sp, #24
 80026c8:	af00      	add	r7, sp, #0
 80026ca:	60f8      	str	r0, [r7, #12]
 80026cc:	60b9      	str	r1, [r7, #8]
 80026ce:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026d0:	2300      	movs	r3, #0
 80026d2:	617b      	str	r3, [r7, #20]
 80026d4:	e00a      	b.n	80026ec <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80026d6:	f3af 8000 	nop.w
 80026da:	4601      	mov	r1, r0
 80026dc:	68bb      	ldr	r3, [r7, #8]
 80026de:	1c5a      	adds	r2, r3, #1
 80026e0:	60ba      	str	r2, [r7, #8]
 80026e2:	b2ca      	uxtb	r2, r1
 80026e4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80026e6:	697b      	ldr	r3, [r7, #20]
 80026e8:	3301      	adds	r3, #1
 80026ea:	617b      	str	r3, [r7, #20]
 80026ec:	697a      	ldr	r2, [r7, #20]
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dbf0      	blt.n	80026d6 <_read+0x12>
  }

  return len;
 80026f4:	687b      	ldr	r3, [r7, #4]
}
 80026f6:	4618      	mov	r0, r3
 80026f8:	3718      	adds	r7, #24
 80026fa:	46bd      	mov	sp, r7
 80026fc:	bd80      	pop	{r7, pc}

080026fe <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80026fe:	b580      	push	{r7, lr}
 8002700:	b086      	sub	sp, #24
 8002702:	af00      	add	r7, sp, #0
 8002704:	60f8      	str	r0, [r7, #12]
 8002706:	60b9      	str	r1, [r7, #8]
 8002708:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800270a:	2300      	movs	r3, #0
 800270c:	617b      	str	r3, [r7, #20]
 800270e:	e009      	b.n	8002724 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002710:	68bb      	ldr	r3, [r7, #8]
 8002712:	1c5a      	adds	r2, r3, #1
 8002714:	60ba      	str	r2, [r7, #8]
 8002716:	781b      	ldrb	r3, [r3, #0]
 8002718:	4618      	mov	r0, r3
 800271a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800271e:	697b      	ldr	r3, [r7, #20]
 8002720:	3301      	adds	r3, #1
 8002722:	617b      	str	r3, [r7, #20]
 8002724:	697a      	ldr	r2, [r7, #20]
 8002726:	687b      	ldr	r3, [r7, #4]
 8002728:	429a      	cmp	r2, r3
 800272a:	dbf1      	blt.n	8002710 <_write+0x12>
  }
  return len;
 800272c:	687b      	ldr	r3, [r7, #4]
}
 800272e:	4618      	mov	r0, r3
 8002730:	3718      	adds	r7, #24
 8002732:	46bd      	mov	sp, r7
 8002734:	bd80      	pop	{r7, pc}

08002736 <_close>:

int _close(int file)
{
 8002736:	b480      	push	{r7}
 8002738:	b083      	sub	sp, #12
 800273a:	af00      	add	r7, sp, #0
 800273c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800273e:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
}
 8002742:	4618      	mov	r0, r3
 8002744:	370c      	adds	r7, #12
 8002746:	46bd      	mov	sp, r7
 8002748:	bc80      	pop	{r7}
 800274a:	4770      	bx	lr

0800274c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800274c:	b480      	push	{r7}
 800274e:	b083      	sub	sp, #12
 8002750:	af00      	add	r7, sp, #0
 8002752:	6078      	str	r0, [r7, #4]
 8002754:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002756:	683b      	ldr	r3, [r7, #0]
 8002758:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 800275c:	605a      	str	r2, [r3, #4]
  return 0;
 800275e:	2300      	movs	r3, #0
}
 8002760:	4618      	mov	r0, r3
 8002762:	370c      	adds	r7, #12
 8002764:	46bd      	mov	sp, r7
 8002766:	bc80      	pop	{r7}
 8002768:	4770      	bx	lr

0800276a <_isatty>:

int _isatty(int file)
{
 800276a:	b480      	push	{r7}
 800276c:	b083      	sub	sp, #12
 800276e:	af00      	add	r7, sp, #0
 8002770:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002772:	2301      	movs	r3, #1
}
 8002774:	4618      	mov	r0, r3
 8002776:	370c      	adds	r7, #12
 8002778:	46bd      	mov	sp, r7
 800277a:	bc80      	pop	{r7}
 800277c:	4770      	bx	lr

0800277e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800277e:	b480      	push	{r7}
 8002780:	b085      	sub	sp, #20
 8002782:	af00      	add	r7, sp, #0
 8002784:	60f8      	str	r0, [r7, #12]
 8002786:	60b9      	str	r1, [r7, #8]
 8002788:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800278a:	2300      	movs	r3, #0
}
 800278c:	4618      	mov	r0, r3
 800278e:	3714      	adds	r7, #20
 8002790:	46bd      	mov	sp, r7
 8002792:	bc80      	pop	{r7}
 8002794:	4770      	bx	lr
	...

08002798 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002798:	b580      	push	{r7, lr}
 800279a:	b086      	sub	sp, #24
 800279c:	af00      	add	r7, sp, #0
 800279e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80027a0:	4a14      	ldr	r2, [pc, #80]	@ (80027f4 <_sbrk+0x5c>)
 80027a2:	4b15      	ldr	r3, [pc, #84]	@ (80027f8 <_sbrk+0x60>)
 80027a4:	1ad3      	subs	r3, r2, r3
 80027a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80027a8:	697b      	ldr	r3, [r7, #20]
 80027aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80027ac:	4b13      	ldr	r3, [pc, #76]	@ (80027fc <_sbrk+0x64>)
 80027ae:	681b      	ldr	r3, [r3, #0]
 80027b0:	2b00      	cmp	r3, #0
 80027b2:	d102      	bne.n	80027ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80027b4:	4b11      	ldr	r3, [pc, #68]	@ (80027fc <_sbrk+0x64>)
 80027b6:	4a12      	ldr	r2, [pc, #72]	@ (8002800 <_sbrk+0x68>)
 80027b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80027ba:	4b10      	ldr	r3, [pc, #64]	@ (80027fc <_sbrk+0x64>)
 80027bc:	681a      	ldr	r2, [r3, #0]
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	4413      	add	r3, r2
 80027c2:	693a      	ldr	r2, [r7, #16]
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d207      	bcs.n	80027d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80027c8:	f002 f8ce 	bl	8004968 <__errno>
 80027cc:	4603      	mov	r3, r0
 80027ce:	220c      	movs	r2, #12
 80027d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80027d2:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80027d6:	e009      	b.n	80027ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80027d8:	4b08      	ldr	r3, [pc, #32]	@ (80027fc <_sbrk+0x64>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80027de:	4b07      	ldr	r3, [pc, #28]	@ (80027fc <_sbrk+0x64>)
 80027e0:	681a      	ldr	r2, [r3, #0]
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	4413      	add	r3, r2
 80027e6:	4a05      	ldr	r2, [pc, #20]	@ (80027fc <_sbrk+0x64>)
 80027e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80027ea:	68fb      	ldr	r3, [r7, #12]
}
 80027ec:	4618      	mov	r0, r3
 80027ee:	3718      	adds	r7, #24
 80027f0:	46bd      	mov	sp, r7
 80027f2:	bd80      	pop	{r7, pc}
 80027f4:	20005000 	.word	0x20005000
 80027f8:	00000400 	.word	0x00000400
 80027fc:	200012d8 	.word	0x200012d8
 8002800:	20001430 	.word	0x20001430

08002804 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8002804:	b480      	push	{r7}
 8002806:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002808:	bf00      	nop
 800280a:	46bd      	mov	sp, r7
 800280c:	bc80      	pop	{r7}
 800280e:	4770      	bx	lr

08002810 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002810:	f7ff fff8 	bl	8002804 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002814:	480b      	ldr	r0, [pc, #44]	@ (8002844 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002816:	490c      	ldr	r1, [pc, #48]	@ (8002848 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002818:	4a0c      	ldr	r2, [pc, #48]	@ (800284c <LoopFillZerobss+0x16>)
  movs r3, #0
 800281a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800281c:	e002      	b.n	8002824 <LoopCopyDataInit>

0800281e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800281e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002820:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002822:	3304      	adds	r3, #4

08002824 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002824:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002826:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002828:	d3f9      	bcc.n	800281e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800282a:	4a09      	ldr	r2, [pc, #36]	@ (8002850 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800282c:	4c09      	ldr	r4, [pc, #36]	@ (8002854 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800282e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002830:	e001      	b.n	8002836 <LoopFillZerobss>

08002832 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002832:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002834:	3204      	adds	r2, #4

08002836 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002836:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002838:	d3fb      	bcc.n	8002832 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800283a:	f002 f89b 	bl	8004974 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800283e:	f7fe ffc7 	bl	80017d0 <main>
  bx lr
 8002842:	4770      	bx	lr
  ldr r0, =_sdata
 8002844:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002848:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 800284c:	08005784 	.word	0x08005784
  ldr r2, =_sbss
 8002850:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 8002854:	2000142c 	.word	0x2000142c

08002858 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8002858:	e7fe      	b.n	8002858 <ADC1_2_IRQHandler>
	...

0800285c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800285c:	b580      	push	{r7, lr}
 800285e:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002860:	4b08      	ldr	r3, [pc, #32]	@ (8002884 <HAL_Init+0x28>)
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	4a07      	ldr	r2, [pc, #28]	@ (8002884 <HAL_Init+0x28>)
 8002866:	f043 0310 	orr.w	r3, r3, #16
 800286a:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800286c:	2003      	movs	r0, #3
 800286e:	f000 f923 	bl	8002ab8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002872:	200f      	movs	r0, #15
 8002874:	f000 f808 	bl	8002888 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002878:	f7ff fdbc 	bl	80023f4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800287c:	2300      	movs	r3, #0
}
 800287e:	4618      	mov	r0, r3
 8002880:	bd80      	pop	{r7, pc}
 8002882:	bf00      	nop
 8002884:	40022000 	.word	0x40022000

08002888 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002888:	b580      	push	{r7, lr}
 800288a:	b082      	sub	sp, #8
 800288c:	af00      	add	r7, sp, #0
 800288e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002890:	4b12      	ldr	r3, [pc, #72]	@ (80028dc <HAL_InitTick+0x54>)
 8002892:	681a      	ldr	r2, [r3, #0]
 8002894:	4b12      	ldr	r3, [pc, #72]	@ (80028e0 <HAL_InitTick+0x58>)
 8002896:	781b      	ldrb	r3, [r3, #0]
 8002898:	4619      	mov	r1, r3
 800289a:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 800289e:	fbb3 f3f1 	udiv	r3, r3, r1
 80028a2:	fbb2 f3f3 	udiv	r3, r2, r3
 80028a6:	4618      	mov	r0, r3
 80028a8:	f000 f93b 	bl	8002b22 <HAL_SYSTICK_Config>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80028b2:	2301      	movs	r3, #1
 80028b4:	e00e      	b.n	80028d4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80028b6:	687b      	ldr	r3, [r7, #4]
 80028b8:	2b0f      	cmp	r3, #15
 80028ba:	d80a      	bhi.n	80028d2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80028bc:	2200      	movs	r2, #0
 80028be:	6879      	ldr	r1, [r7, #4]
 80028c0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80028c4:	f000 f903 	bl	8002ace <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80028c8:	4a06      	ldr	r2, [pc, #24]	@ (80028e4 <HAL_InitTick+0x5c>)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80028ce:	2300      	movs	r3, #0
 80028d0:	e000      	b.n	80028d4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80028d2:	2301      	movs	r3, #1
}
 80028d4:	4618      	mov	r0, r3
 80028d6:	3708      	adds	r7, #8
 80028d8:	46bd      	mov	sp, r7
 80028da:	bd80      	pop	{r7, pc}
 80028dc:	20000028 	.word	0x20000028
 80028e0:	20000030 	.word	0x20000030
 80028e4:	2000002c 	.word	0x2000002c

080028e8 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80028e8:	b480      	push	{r7}
 80028ea:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80028ec:	4b05      	ldr	r3, [pc, #20]	@ (8002904 <HAL_IncTick+0x1c>)
 80028ee:	781b      	ldrb	r3, [r3, #0]
 80028f0:	461a      	mov	r2, r3
 80028f2:	4b05      	ldr	r3, [pc, #20]	@ (8002908 <HAL_IncTick+0x20>)
 80028f4:	681b      	ldr	r3, [r3, #0]
 80028f6:	4413      	add	r3, r2
 80028f8:	4a03      	ldr	r2, [pc, #12]	@ (8002908 <HAL_IncTick+0x20>)
 80028fa:	6013      	str	r3, [r2, #0]
}
 80028fc:	bf00      	nop
 80028fe:	46bd      	mov	sp, r7
 8002900:	bc80      	pop	{r7}
 8002902:	4770      	bx	lr
 8002904:	20000030 	.word	0x20000030
 8002908:	200012dc 	.word	0x200012dc

0800290c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800290c:	b480      	push	{r7}
 800290e:	af00      	add	r7, sp, #0
  return uwTick;
 8002910:	4b02      	ldr	r3, [pc, #8]	@ (800291c <HAL_GetTick+0x10>)
 8002912:	681b      	ldr	r3, [r3, #0]
}
 8002914:	4618      	mov	r0, r3
 8002916:	46bd      	mov	sp, r7
 8002918:	bc80      	pop	{r7}
 800291a:	4770      	bx	lr
 800291c:	200012dc 	.word	0x200012dc

08002920 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002920:	b480      	push	{r7}
 8002922:	b085      	sub	sp, #20
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	f003 0307 	and.w	r3, r3, #7
 800292e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002930:	4b0c      	ldr	r3, [pc, #48]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002932:	68db      	ldr	r3, [r3, #12]
 8002934:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002936:	68ba      	ldr	r2, [r7, #8]
 8002938:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 800293c:	4013      	ands	r3, r2
 800293e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8002940:	68fb      	ldr	r3, [r7, #12]
 8002942:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002944:	68bb      	ldr	r3, [r7, #8]
 8002946:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002948:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 800294c:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002950:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002952:	4a04      	ldr	r2, [pc, #16]	@ (8002964 <__NVIC_SetPriorityGrouping+0x44>)
 8002954:	68bb      	ldr	r3, [r7, #8]
 8002956:	60d3      	str	r3, [r2, #12]
}
 8002958:	bf00      	nop
 800295a:	3714      	adds	r7, #20
 800295c:	46bd      	mov	sp, r7
 800295e:	bc80      	pop	{r7}
 8002960:	4770      	bx	lr
 8002962:	bf00      	nop
 8002964:	e000ed00 	.word	0xe000ed00

08002968 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002968:	b480      	push	{r7}
 800296a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800296c:	4b04      	ldr	r3, [pc, #16]	@ (8002980 <__NVIC_GetPriorityGrouping+0x18>)
 800296e:	68db      	ldr	r3, [r3, #12]
 8002970:	0a1b      	lsrs	r3, r3, #8
 8002972:	f003 0307 	and.w	r3, r3, #7
}
 8002976:	4618      	mov	r0, r3
 8002978:	46bd      	mov	sp, r7
 800297a:	bc80      	pop	{r7}
 800297c:	4770      	bx	lr
 800297e:	bf00      	nop
 8002980:	e000ed00 	.word	0xe000ed00

08002984 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002984:	b480      	push	{r7}
 8002986:	b083      	sub	sp, #12
 8002988:	af00      	add	r7, sp, #0
 800298a:	4603      	mov	r3, r0
 800298c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800298e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002992:	2b00      	cmp	r3, #0
 8002994:	db0b      	blt.n	80029ae <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002996:	79fb      	ldrb	r3, [r7, #7]
 8002998:	f003 021f 	and.w	r2, r3, #31
 800299c:	4906      	ldr	r1, [pc, #24]	@ (80029b8 <__NVIC_EnableIRQ+0x34>)
 800299e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a2:	095b      	lsrs	r3, r3, #5
 80029a4:	2001      	movs	r0, #1
 80029a6:	fa00 f202 	lsl.w	r2, r0, r2
 80029aa:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80029ae:	bf00      	nop
 80029b0:	370c      	adds	r7, #12
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr
 80029b8:	e000e100 	.word	0xe000e100

080029bc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80029bc:	b480      	push	{r7}
 80029be:	b083      	sub	sp, #12
 80029c0:	af00      	add	r7, sp, #0
 80029c2:	4603      	mov	r3, r0
 80029c4:	6039      	str	r1, [r7, #0]
 80029c6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029c8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029cc:	2b00      	cmp	r3, #0
 80029ce:	db0a      	blt.n	80029e6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029d0:	683b      	ldr	r3, [r7, #0]
 80029d2:	b2da      	uxtb	r2, r3
 80029d4:	490c      	ldr	r1, [pc, #48]	@ (8002a08 <__NVIC_SetPriority+0x4c>)
 80029d6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029da:	0112      	lsls	r2, r2, #4
 80029dc:	b2d2      	uxtb	r2, r2
 80029de:	440b      	add	r3, r1
 80029e0:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80029e4:	e00a      	b.n	80029fc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029e6:	683b      	ldr	r3, [r7, #0]
 80029e8:	b2da      	uxtb	r2, r3
 80029ea:	4908      	ldr	r1, [pc, #32]	@ (8002a0c <__NVIC_SetPriority+0x50>)
 80029ec:	79fb      	ldrb	r3, [r7, #7]
 80029ee:	f003 030f 	and.w	r3, r3, #15
 80029f2:	3b04      	subs	r3, #4
 80029f4:	0112      	lsls	r2, r2, #4
 80029f6:	b2d2      	uxtb	r2, r2
 80029f8:	440b      	add	r3, r1
 80029fa:	761a      	strb	r2, [r3, #24]
}
 80029fc:	bf00      	nop
 80029fe:	370c      	adds	r7, #12
 8002a00:	46bd      	mov	sp, r7
 8002a02:	bc80      	pop	{r7}
 8002a04:	4770      	bx	lr
 8002a06:	bf00      	nop
 8002a08:	e000e100 	.word	0xe000e100
 8002a0c:	e000ed00 	.word	0xe000ed00

08002a10 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002a10:	b480      	push	{r7}
 8002a12:	b089      	sub	sp, #36	@ 0x24
 8002a14:	af00      	add	r7, sp, #0
 8002a16:	60f8      	str	r0, [r7, #12]
 8002a18:	60b9      	str	r1, [r7, #8]
 8002a1a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002a24:	69fb      	ldr	r3, [r7, #28]
 8002a26:	f1c3 0307 	rsb	r3, r3, #7
 8002a2a:	2b04      	cmp	r3, #4
 8002a2c:	bf28      	it	cs
 8002a2e:	2304      	movcs	r3, #4
 8002a30:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a32:	69fb      	ldr	r3, [r7, #28]
 8002a34:	3304      	adds	r3, #4
 8002a36:	2b06      	cmp	r3, #6
 8002a38:	d902      	bls.n	8002a40 <NVIC_EncodePriority+0x30>
 8002a3a:	69fb      	ldr	r3, [r7, #28]
 8002a3c:	3b03      	subs	r3, #3
 8002a3e:	e000      	b.n	8002a42 <NVIC_EncodePriority+0x32>
 8002a40:	2300      	movs	r3, #0
 8002a42:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a44:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8002a48:	69bb      	ldr	r3, [r7, #24]
 8002a4a:	fa02 f303 	lsl.w	r3, r2, r3
 8002a4e:	43da      	mvns	r2, r3
 8002a50:	68bb      	ldr	r3, [r7, #8]
 8002a52:	401a      	ands	r2, r3
 8002a54:	697b      	ldr	r3, [r7, #20]
 8002a56:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a58:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8002a5c:	697b      	ldr	r3, [r7, #20]
 8002a5e:	fa01 f303 	lsl.w	r3, r1, r3
 8002a62:	43d9      	mvns	r1, r3
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a68:	4313      	orrs	r3, r2
         );
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	3724      	adds	r7, #36	@ 0x24
 8002a6e:	46bd      	mov	sp, r7
 8002a70:	bc80      	pop	{r7}
 8002a72:	4770      	bx	lr

08002a74 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002a74:	b580      	push	{r7, lr}
 8002a76:	b082      	sub	sp, #8
 8002a78:	af00      	add	r7, sp, #0
 8002a7a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a7c:	687b      	ldr	r3, [r7, #4]
 8002a7e:	3b01      	subs	r3, #1
 8002a80:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a84:	d301      	bcc.n	8002a8a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002a86:	2301      	movs	r3, #1
 8002a88:	e00f      	b.n	8002aaa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a8a:	4a0a      	ldr	r2, [pc, #40]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	3b01      	subs	r3, #1
 8002a90:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a92:	210f      	movs	r1, #15
 8002a94:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8002a98:	f7ff ff90 	bl	80029bc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a9c:	4b05      	ldr	r3, [pc, #20]	@ (8002ab4 <SysTick_Config+0x40>)
 8002a9e:	2200      	movs	r2, #0
 8002aa0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002aa2:	4b04      	ldr	r3, [pc, #16]	@ (8002ab4 <SysTick_Config+0x40>)
 8002aa4:	2207      	movs	r2, #7
 8002aa6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002aa8:	2300      	movs	r3, #0
}
 8002aaa:	4618      	mov	r0, r3
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	e000e010 	.word	0xe000e010

08002ab8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ac0:	6878      	ldr	r0, [r7, #4]
 8002ac2:	f7ff ff2d 	bl	8002920 <__NVIC_SetPriorityGrouping>
}
 8002ac6:	bf00      	nop
 8002ac8:	3708      	adds	r7, #8
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bd80      	pop	{r7, pc}

08002ace <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002ace:	b580      	push	{r7, lr}
 8002ad0:	b086      	sub	sp, #24
 8002ad2:	af00      	add	r7, sp, #0
 8002ad4:	4603      	mov	r3, r0
 8002ad6:	60b9      	str	r1, [r7, #8]
 8002ad8:	607a      	str	r2, [r7, #4]
 8002ada:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002adc:	2300      	movs	r3, #0
 8002ade:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002ae0:	f7ff ff42 	bl	8002968 <__NVIC_GetPriorityGrouping>
 8002ae4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	68b9      	ldr	r1, [r7, #8]
 8002aea:	6978      	ldr	r0, [r7, #20]
 8002aec:	f7ff ff90 	bl	8002a10 <NVIC_EncodePriority>
 8002af0:	4602      	mov	r2, r0
 8002af2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002af6:	4611      	mov	r1, r2
 8002af8:	4618      	mov	r0, r3
 8002afa:	f7ff ff5f 	bl	80029bc <__NVIC_SetPriority>
}
 8002afe:	bf00      	nop
 8002b00:	3718      	adds	r7, #24
 8002b02:	46bd      	mov	sp, r7
 8002b04:	bd80      	pop	{r7, pc}

08002b06 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b06:	b580      	push	{r7, lr}
 8002b08:	b082      	sub	sp, #8
 8002b0a:	af00      	add	r7, sp, #0
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002b10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b14:	4618      	mov	r0, r3
 8002b16:	f7ff ff35 	bl	8002984 <__NVIC_EnableIRQ>
}
 8002b1a:	bf00      	nop
 8002b1c:	3708      	adds	r7, #8
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	bd80      	pop	{r7, pc}

08002b22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002b22:	b580      	push	{r7, lr}
 8002b24:	b082      	sub	sp, #8
 8002b26:	af00      	add	r7, sp, #0
 8002b28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b2a:	6878      	ldr	r0, [r7, #4]
 8002b2c:	f7ff ffa2 	bl	8002a74 <SysTick_Config>
 8002b30:	4603      	mov	r3, r0
}
 8002b32:	4618      	mov	r0, r3
 8002b34:	3708      	adds	r7, #8
 8002b36:	46bd      	mov	sp, r7
 8002b38:	bd80      	pop	{r7, pc}
	...

08002b3c <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002b3c:	b480      	push	{r7}
 8002b3e:	b08b      	sub	sp, #44	@ 0x2c
 8002b40:	af00      	add	r7, sp, #0
 8002b42:	6078      	str	r0, [r7, #4]
 8002b44:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8002b46:	2300      	movs	r3, #0
 8002b48:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8002b4a:	2300      	movs	r3, #0
 8002b4c:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002b4e:	e169      	b.n	8002e24 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8002b50:	2201      	movs	r2, #1
 8002b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b54:	fa02 f303 	lsl.w	r3, r2, r3
 8002b58:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002b5a:	683b      	ldr	r3, [r7, #0]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	69fa      	ldr	r2, [r7, #28]
 8002b60:	4013      	ands	r3, r2
 8002b62:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8002b64:	69ba      	ldr	r2, [r7, #24]
 8002b66:	69fb      	ldr	r3, [r7, #28]
 8002b68:	429a      	cmp	r2, r3
 8002b6a:	f040 8158 	bne.w	8002e1e <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8002b6e:	683b      	ldr	r3, [r7, #0]
 8002b70:	685b      	ldr	r3, [r3, #4]
 8002b72:	4a9a      	ldr	r2, [pc, #616]	@ (8002ddc <HAL_GPIO_Init+0x2a0>)
 8002b74:	4293      	cmp	r3, r2
 8002b76:	d05e      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b78:	4a98      	ldr	r2, [pc, #608]	@ (8002ddc <HAL_GPIO_Init+0x2a0>)
 8002b7a:	4293      	cmp	r3, r2
 8002b7c:	d875      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002b7e:	4a98      	ldr	r2, [pc, #608]	@ (8002de0 <HAL_GPIO_Init+0x2a4>)
 8002b80:	4293      	cmp	r3, r2
 8002b82:	d058      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b84:	4a96      	ldr	r2, [pc, #600]	@ (8002de0 <HAL_GPIO_Init+0x2a4>)
 8002b86:	4293      	cmp	r3, r2
 8002b88:	d86f      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002b8a:	4a96      	ldr	r2, [pc, #600]	@ (8002de4 <HAL_GPIO_Init+0x2a8>)
 8002b8c:	4293      	cmp	r3, r2
 8002b8e:	d052      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b90:	4a94      	ldr	r2, [pc, #592]	@ (8002de4 <HAL_GPIO_Init+0x2a8>)
 8002b92:	4293      	cmp	r3, r2
 8002b94:	d869      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002b96:	4a94      	ldr	r2, [pc, #592]	@ (8002de8 <HAL_GPIO_Init+0x2ac>)
 8002b98:	4293      	cmp	r3, r2
 8002b9a:	d04c      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002b9c:	4a92      	ldr	r2, [pc, #584]	@ (8002de8 <HAL_GPIO_Init+0x2ac>)
 8002b9e:	4293      	cmp	r3, r2
 8002ba0:	d863      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002ba2:	4a92      	ldr	r2, [pc, #584]	@ (8002dec <HAL_GPIO_Init+0x2b0>)
 8002ba4:	4293      	cmp	r3, r2
 8002ba6:	d046      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
 8002ba8:	4a90      	ldr	r2, [pc, #576]	@ (8002dec <HAL_GPIO_Init+0x2b0>)
 8002baa:	4293      	cmp	r3, r2
 8002bac:	d85d      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002bae:	2b12      	cmp	r3, #18
 8002bb0:	d82a      	bhi.n	8002c08 <HAL_GPIO_Init+0xcc>
 8002bb2:	2b12      	cmp	r3, #18
 8002bb4:	d859      	bhi.n	8002c6a <HAL_GPIO_Init+0x12e>
 8002bb6:	a201      	add	r2, pc, #4	@ (adr r2, 8002bbc <HAL_GPIO_Init+0x80>)
 8002bb8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002bbc:	08002c37 	.word	0x08002c37
 8002bc0:	08002c11 	.word	0x08002c11
 8002bc4:	08002c23 	.word	0x08002c23
 8002bc8:	08002c65 	.word	0x08002c65
 8002bcc:	08002c6b 	.word	0x08002c6b
 8002bd0:	08002c6b 	.word	0x08002c6b
 8002bd4:	08002c6b 	.word	0x08002c6b
 8002bd8:	08002c6b 	.word	0x08002c6b
 8002bdc:	08002c6b 	.word	0x08002c6b
 8002be0:	08002c6b 	.word	0x08002c6b
 8002be4:	08002c6b 	.word	0x08002c6b
 8002be8:	08002c6b 	.word	0x08002c6b
 8002bec:	08002c6b 	.word	0x08002c6b
 8002bf0:	08002c6b 	.word	0x08002c6b
 8002bf4:	08002c6b 	.word	0x08002c6b
 8002bf8:	08002c6b 	.word	0x08002c6b
 8002bfc:	08002c6b 	.word	0x08002c6b
 8002c00:	08002c19 	.word	0x08002c19
 8002c04:	08002c2d 	.word	0x08002c2d
 8002c08:	4a79      	ldr	r2, [pc, #484]	@ (8002df0 <HAL_GPIO_Init+0x2b4>)
 8002c0a:	4293      	cmp	r3, r2
 8002c0c:	d013      	beq.n	8002c36 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002c0e:	e02c      	b.n	8002c6a <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002c10:	683b      	ldr	r3, [r7, #0]
 8002c12:	68db      	ldr	r3, [r3, #12]
 8002c14:	623b      	str	r3, [r7, #32]
          break;
 8002c16:	e029      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8002c18:	683b      	ldr	r3, [r7, #0]
 8002c1a:	68db      	ldr	r3, [r3, #12]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	623b      	str	r3, [r7, #32]
          break;
 8002c20:	e024      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002c22:	683b      	ldr	r3, [r7, #0]
 8002c24:	68db      	ldr	r3, [r3, #12]
 8002c26:	3308      	adds	r3, #8
 8002c28:	623b      	str	r3, [r7, #32]
          break;
 8002c2a:	e01f      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002c2c:	683b      	ldr	r3, [r7, #0]
 8002c2e:	68db      	ldr	r3, [r3, #12]
 8002c30:	330c      	adds	r3, #12
 8002c32:	623b      	str	r3, [r7, #32]
          break;
 8002c34:	e01a      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8002c36:	683b      	ldr	r3, [r7, #0]
 8002c38:	689b      	ldr	r3, [r3, #8]
 8002c3a:	2b00      	cmp	r3, #0
 8002c3c:	d102      	bne.n	8002c44 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8002c3e:	2304      	movs	r3, #4
 8002c40:	623b      	str	r3, [r7, #32]
          break;
 8002c42:	e013      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8002c44:	683b      	ldr	r3, [r7, #0]
 8002c46:	689b      	ldr	r3, [r3, #8]
 8002c48:	2b01      	cmp	r3, #1
 8002c4a:	d105      	bne.n	8002c58 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c4c:	2308      	movs	r3, #8
 8002c4e:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8002c50:	687b      	ldr	r3, [r7, #4]
 8002c52:	69fa      	ldr	r2, [r7, #28]
 8002c54:	611a      	str	r2, [r3, #16]
          break;
 8002c56:	e009      	b.n	8002c6c <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8002c58:	2308      	movs	r3, #8
 8002c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	69fa      	ldr	r2, [r7, #28]
 8002c60:	615a      	str	r2, [r3, #20]
          break;
 8002c62:	e003      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8002c64:	2300      	movs	r3, #0
 8002c66:	623b      	str	r3, [r7, #32]
          break;
 8002c68:	e000      	b.n	8002c6c <HAL_GPIO_Init+0x130>
          break;
 8002c6a:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8002c6c:	69bb      	ldr	r3, [r7, #24]
 8002c6e:	2bff      	cmp	r3, #255	@ 0xff
 8002c70:	d801      	bhi.n	8002c76 <HAL_GPIO_Init+0x13a>
 8002c72:	687b      	ldr	r3, [r7, #4]
 8002c74:	e001      	b.n	8002c7a <HAL_GPIO_Init+0x13e>
 8002c76:	687b      	ldr	r3, [r7, #4]
 8002c78:	3304      	adds	r3, #4
 8002c7a:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8002c7c:	69bb      	ldr	r3, [r7, #24]
 8002c7e:	2bff      	cmp	r3, #255	@ 0xff
 8002c80:	d802      	bhi.n	8002c88 <HAL_GPIO_Init+0x14c>
 8002c82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c84:	009b      	lsls	r3, r3, #2
 8002c86:	e002      	b.n	8002c8e <HAL_GPIO_Init+0x152>
 8002c88:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c8a:	3b08      	subs	r3, #8
 8002c8c:	009b      	lsls	r3, r3, #2
 8002c8e:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8002c90:	697b      	ldr	r3, [r7, #20]
 8002c92:	681a      	ldr	r2, [r3, #0]
 8002c94:	210f      	movs	r1, #15
 8002c96:	693b      	ldr	r3, [r7, #16]
 8002c98:	fa01 f303 	lsl.w	r3, r1, r3
 8002c9c:	43db      	mvns	r3, r3
 8002c9e:	401a      	ands	r2, r3
 8002ca0:	6a39      	ldr	r1, [r7, #32]
 8002ca2:	693b      	ldr	r3, [r7, #16]
 8002ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8002ca8:	431a      	orrs	r2, r3
 8002caa:	697b      	ldr	r3, [r7, #20]
 8002cac:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002cae:	683b      	ldr	r3, [r7, #0]
 8002cb0:	685b      	ldr	r3, [r3, #4]
 8002cb2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002cb6:	2b00      	cmp	r3, #0
 8002cb8:	f000 80b1 	beq.w	8002e1e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002cbc:	4b4d      	ldr	r3, [pc, #308]	@ (8002df4 <HAL_GPIO_Init+0x2b8>)
 8002cbe:	699b      	ldr	r3, [r3, #24]
 8002cc0:	4a4c      	ldr	r2, [pc, #304]	@ (8002df4 <HAL_GPIO_Init+0x2b8>)
 8002cc2:	f043 0301 	orr.w	r3, r3, #1
 8002cc6:	6193      	str	r3, [r2, #24]
 8002cc8:	4b4a      	ldr	r3, [pc, #296]	@ (8002df4 <HAL_GPIO_Init+0x2b8>)
 8002cca:	699b      	ldr	r3, [r3, #24]
 8002ccc:	f003 0301 	and.w	r3, r3, #1
 8002cd0:	60bb      	str	r3, [r7, #8]
 8002cd2:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002cd4:	4a48      	ldr	r2, [pc, #288]	@ (8002df8 <HAL_GPIO_Init+0x2bc>)
 8002cd6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002cd8:	089b      	lsrs	r3, r3, #2
 8002cda:	3302      	adds	r3, #2
 8002cdc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ce0:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002ce4:	f003 0303 	and.w	r3, r3, #3
 8002ce8:	009b      	lsls	r3, r3, #2
 8002cea:	220f      	movs	r2, #15
 8002cec:	fa02 f303 	lsl.w	r3, r2, r3
 8002cf0:	43db      	mvns	r3, r3
 8002cf2:	68fa      	ldr	r2, [r7, #12]
 8002cf4:	4013      	ands	r3, r2
 8002cf6:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	4a40      	ldr	r2, [pc, #256]	@ (8002dfc <HAL_GPIO_Init+0x2c0>)
 8002cfc:	4293      	cmp	r3, r2
 8002cfe:	d013      	beq.n	8002d28 <HAL_GPIO_Init+0x1ec>
 8002d00:	687b      	ldr	r3, [r7, #4]
 8002d02:	4a3f      	ldr	r2, [pc, #252]	@ (8002e00 <HAL_GPIO_Init+0x2c4>)
 8002d04:	4293      	cmp	r3, r2
 8002d06:	d00d      	beq.n	8002d24 <HAL_GPIO_Init+0x1e8>
 8002d08:	687b      	ldr	r3, [r7, #4]
 8002d0a:	4a3e      	ldr	r2, [pc, #248]	@ (8002e04 <HAL_GPIO_Init+0x2c8>)
 8002d0c:	4293      	cmp	r3, r2
 8002d0e:	d007      	beq.n	8002d20 <HAL_GPIO_Init+0x1e4>
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a3d      	ldr	r2, [pc, #244]	@ (8002e08 <HAL_GPIO_Init+0x2cc>)
 8002d14:	4293      	cmp	r3, r2
 8002d16:	d101      	bne.n	8002d1c <HAL_GPIO_Init+0x1e0>
 8002d18:	2303      	movs	r3, #3
 8002d1a:	e006      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d1c:	2304      	movs	r3, #4
 8002d1e:	e004      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d20:	2302      	movs	r3, #2
 8002d22:	e002      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d24:	2301      	movs	r3, #1
 8002d26:	e000      	b.n	8002d2a <HAL_GPIO_Init+0x1ee>
 8002d28:	2300      	movs	r3, #0
 8002d2a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002d2c:	f002 0203 	and.w	r2, r2, #3
 8002d30:	0092      	lsls	r2, r2, #2
 8002d32:	4093      	lsls	r3, r2
 8002d34:	68fa      	ldr	r2, [r7, #12]
 8002d36:	4313      	orrs	r3, r2
 8002d38:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8002d3a:	492f      	ldr	r1, [pc, #188]	@ (8002df8 <HAL_GPIO_Init+0x2bc>)
 8002d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d3e:	089b      	lsrs	r3, r3, #2
 8002d40:	3302      	adds	r3, #2
 8002d42:	68fa      	ldr	r2, [r7, #12]
 8002d44:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002d48:	683b      	ldr	r3, [r7, #0]
 8002d4a:	685b      	ldr	r3, [r3, #4]
 8002d4c:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d006      	beq.n	8002d62 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8002d54:	4b2d      	ldr	r3, [pc, #180]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d56:	689a      	ldr	r2, [r3, #8]
 8002d58:	492c      	ldr	r1, [pc, #176]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d5a:	69bb      	ldr	r3, [r7, #24]
 8002d5c:	4313      	orrs	r3, r2
 8002d5e:	608b      	str	r3, [r1, #8]
 8002d60:	e006      	b.n	8002d70 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8002d62:	4b2a      	ldr	r3, [pc, #168]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d64:	689a      	ldr	r2, [r3, #8]
 8002d66:	69bb      	ldr	r3, [r7, #24]
 8002d68:	43db      	mvns	r3, r3
 8002d6a:	4928      	ldr	r1, [pc, #160]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d6c:	4013      	ands	r3, r2
 8002d6e:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002d70:	683b      	ldr	r3, [r7, #0]
 8002d72:	685b      	ldr	r3, [r3, #4]
 8002d74:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002d78:	2b00      	cmp	r3, #0
 8002d7a:	d006      	beq.n	8002d8a <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8002d7c:	4b23      	ldr	r3, [pc, #140]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d7e:	68da      	ldr	r2, [r3, #12]
 8002d80:	4922      	ldr	r1, [pc, #136]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d82:	69bb      	ldr	r3, [r7, #24]
 8002d84:	4313      	orrs	r3, r2
 8002d86:	60cb      	str	r3, [r1, #12]
 8002d88:	e006      	b.n	8002d98 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8002d8a:	4b20      	ldr	r3, [pc, #128]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d8c:	68da      	ldr	r2, [r3, #12]
 8002d8e:	69bb      	ldr	r3, [r7, #24]
 8002d90:	43db      	mvns	r3, r3
 8002d92:	491e      	ldr	r1, [pc, #120]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002d94:	4013      	ands	r3, r2
 8002d96:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002da0:	2b00      	cmp	r3, #0
 8002da2:	d006      	beq.n	8002db2 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002da4:	4b19      	ldr	r3, [pc, #100]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002da6:	685a      	ldr	r2, [r3, #4]
 8002da8:	4918      	ldr	r1, [pc, #96]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002daa:	69bb      	ldr	r3, [r7, #24]
 8002dac:	4313      	orrs	r3, r2
 8002dae:	604b      	str	r3, [r1, #4]
 8002db0:	e006      	b.n	8002dc0 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002db2:	4b16      	ldr	r3, [pc, #88]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002db4:	685a      	ldr	r2, [r3, #4]
 8002db6:	69bb      	ldr	r3, [r7, #24]
 8002db8:	43db      	mvns	r3, r3
 8002dba:	4914      	ldr	r1, [pc, #80]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	685b      	ldr	r3, [r3, #4]
 8002dc4:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002dc8:	2b00      	cmp	r3, #0
 8002dca:	d021      	beq.n	8002e10 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002dcc:	4b0f      	ldr	r3, [pc, #60]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002dce:	681a      	ldr	r2, [r3, #0]
 8002dd0:	490e      	ldr	r1, [pc, #56]	@ (8002e0c <HAL_GPIO_Init+0x2d0>)
 8002dd2:	69bb      	ldr	r3, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	600b      	str	r3, [r1, #0]
 8002dd8:	e021      	b.n	8002e1e <HAL_GPIO_Init+0x2e2>
 8002dda:	bf00      	nop
 8002ddc:	10320000 	.word	0x10320000
 8002de0:	10310000 	.word	0x10310000
 8002de4:	10220000 	.word	0x10220000
 8002de8:	10210000 	.word	0x10210000
 8002dec:	10120000 	.word	0x10120000
 8002df0:	10110000 	.word	0x10110000
 8002df4:	40021000 	.word	0x40021000
 8002df8:	40010000 	.word	0x40010000
 8002dfc:	40010800 	.word	0x40010800
 8002e00:	40010c00 	.word	0x40010c00
 8002e04:	40011000 	.word	0x40011000
 8002e08:	40011400 	.word	0x40011400
 8002e0c:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002e10:	4b0b      	ldr	r3, [pc, #44]	@ (8002e40 <HAL_GPIO_Init+0x304>)
 8002e12:	681a      	ldr	r2, [r3, #0]
 8002e14:	69bb      	ldr	r3, [r7, #24]
 8002e16:	43db      	mvns	r3, r3
 8002e18:	4909      	ldr	r1, [pc, #36]	@ (8002e40 <HAL_GPIO_Init+0x304>)
 8002e1a:	4013      	ands	r3, r2
 8002e1c:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002e1e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e20:	3301      	adds	r3, #1
 8002e22:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002e24:	683b      	ldr	r3, [r7, #0]
 8002e26:	681a      	ldr	r2, [r3, #0]
 8002e28:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002e2a:	fa22 f303 	lsr.w	r3, r2, r3
 8002e2e:	2b00      	cmp	r3, #0
 8002e30:	f47f ae8e 	bne.w	8002b50 <HAL_GPIO_Init+0x14>
  }
}
 8002e34:	bf00      	nop
 8002e36:	bf00      	nop
 8002e38:	372c      	adds	r7, #44	@ 0x2c
 8002e3a:	46bd      	mov	sp, r7
 8002e3c:	bc80      	pop	{r7}
 8002e3e:	4770      	bx	lr
 8002e40:	40010400 	.word	0x40010400

08002e44 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8002e44:	b480      	push	{r7}
 8002e46:	b085      	sub	sp, #20
 8002e48:	af00      	add	r7, sp, #0
 8002e4a:	6078      	str	r0, [r7, #4]
 8002e4c:	460b      	mov	r3, r1
 8002e4e:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	689a      	ldr	r2, [r3, #8]
 8002e54:	887b      	ldrh	r3, [r7, #2]
 8002e56:	4013      	ands	r3, r2
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d002      	beq.n	8002e62 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8002e5c:	2301      	movs	r3, #1
 8002e5e:	73fb      	strb	r3, [r7, #15]
 8002e60:	e001      	b.n	8002e66 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8002e62:	2300      	movs	r3, #0
 8002e64:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8002e66:	7bfb      	ldrb	r3, [r7, #15]
}
 8002e68:	4618      	mov	r0, r3
 8002e6a:	3714      	adds	r7, #20
 8002e6c:	46bd      	mov	sp, r7
 8002e6e:	bc80      	pop	{r7}
 8002e70:	4770      	bx	lr

08002e72 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002e72:	b480      	push	{r7}
 8002e74:	b083      	sub	sp, #12
 8002e76:	af00      	add	r7, sp, #0
 8002e78:	6078      	str	r0, [r7, #4]
 8002e7a:	460b      	mov	r3, r1
 8002e7c:	807b      	strh	r3, [r7, #2]
 8002e7e:	4613      	mov	r3, r2
 8002e80:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8002e82:	787b      	ldrb	r3, [r7, #1]
 8002e84:	2b00      	cmp	r3, #0
 8002e86:	d003      	beq.n	8002e90 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002e88:	887a      	ldrh	r2, [r7, #2]
 8002e8a:	687b      	ldr	r3, [r7, #4]
 8002e8c:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8002e8e:	e003      	b.n	8002e98 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8002e90:	887b      	ldrh	r3, [r7, #2]
 8002e92:	041a      	lsls	r2, r3, #16
 8002e94:	687b      	ldr	r3, [r7, #4]
 8002e96:	611a      	str	r2, [r3, #16]
}
 8002e98:	bf00      	nop
 8002e9a:	370c      	adds	r7, #12
 8002e9c:	46bd      	mov	sp, r7
 8002e9e:	bc80      	pop	{r7}
 8002ea0:	4770      	bx	lr
	...

08002ea4 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8002ea4:	b580      	push	{r7, lr}
 8002ea6:	b086      	sub	sp, #24
 8002ea8:	af00      	add	r7, sp, #0
 8002eaa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	2b00      	cmp	r3, #0
 8002eb0:	d101      	bne.n	8002eb6 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8002eb2:	2301      	movs	r3, #1
 8002eb4:	e272      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8002eb6:	687b      	ldr	r3, [r7, #4]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	f003 0301 	and.w	r3, r3, #1
 8002ebe:	2b00      	cmp	r3, #0
 8002ec0:	f000 8087 	beq.w	8002fd2 <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8002ec4:	4b92      	ldr	r3, [pc, #584]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ec6:	685b      	ldr	r3, [r3, #4]
 8002ec8:	f003 030c 	and.w	r3, r3, #12
 8002ecc:	2b04      	cmp	r3, #4
 8002ece:	d00c      	beq.n	8002eea <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8002ed0:	4b8f      	ldr	r3, [pc, #572]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ed2:	685b      	ldr	r3, [r3, #4]
 8002ed4:	f003 030c 	and.w	r3, r3, #12
 8002ed8:	2b08      	cmp	r3, #8
 8002eda:	d112      	bne.n	8002f02 <HAL_RCC_OscConfig+0x5e>
 8002edc:	4b8c      	ldr	r3, [pc, #560]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ede:	685b      	ldr	r3, [r3, #4]
 8002ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ee4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002ee8:	d10b      	bne.n	8002f02 <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002eea:	4b89      	ldr	r3, [pc, #548]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002ef2:	2b00      	cmp	r3, #0
 8002ef4:	d06c      	beq.n	8002fd0 <HAL_RCC_OscConfig+0x12c>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	685b      	ldr	r3, [r3, #4]
 8002efa:	2b00      	cmp	r3, #0
 8002efc:	d168      	bne.n	8002fd0 <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8002efe:	2301      	movs	r3, #1
 8002f00:	e24c      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002f02:	687b      	ldr	r3, [r7, #4]
 8002f04:	685b      	ldr	r3, [r3, #4]
 8002f06:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002f0a:	d106      	bne.n	8002f1a <HAL_RCC_OscConfig+0x76>
 8002f0c:	4b80      	ldr	r3, [pc, #512]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a7f      	ldr	r2, [pc, #508]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f12:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f16:	6013      	str	r3, [r2, #0]
 8002f18:	e02e      	b.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002f1a:	687b      	ldr	r3, [r7, #4]
 8002f1c:	685b      	ldr	r3, [r3, #4]
 8002f1e:	2b00      	cmp	r3, #0
 8002f20:	d10c      	bne.n	8002f3c <HAL_RCC_OscConfig+0x98>
 8002f22:	4b7b      	ldr	r3, [pc, #492]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f24:	681b      	ldr	r3, [r3, #0]
 8002f26:	4a7a      	ldr	r2, [pc, #488]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f28:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f2c:	6013      	str	r3, [r2, #0]
 8002f2e:	4b78      	ldr	r3, [pc, #480]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4a77      	ldr	r2, [pc, #476]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f34:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f38:	6013      	str	r3, [r2, #0]
 8002f3a:	e01d      	b.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002f3c:	687b      	ldr	r3, [r7, #4]
 8002f3e:	685b      	ldr	r3, [r3, #4]
 8002f40:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002f44:	d10c      	bne.n	8002f60 <HAL_RCC_OscConfig+0xbc>
 8002f46:	4b72      	ldr	r3, [pc, #456]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	4a71      	ldr	r2, [pc, #452]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f4c:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002f50:	6013      	str	r3, [r2, #0]
 8002f52:	4b6f      	ldr	r3, [pc, #444]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f54:	681b      	ldr	r3, [r3, #0]
 8002f56:	4a6e      	ldr	r2, [pc, #440]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f58:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002f5c:	6013      	str	r3, [r2, #0]
 8002f5e:	e00b      	b.n	8002f78 <HAL_RCC_OscConfig+0xd4>
 8002f60:	4b6b      	ldr	r3, [pc, #428]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f62:	681b      	ldr	r3, [r3, #0]
 8002f64:	4a6a      	ldr	r2, [pc, #424]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f66:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8002f6a:	6013      	str	r3, [r2, #0]
 8002f6c:	4b68      	ldr	r3, [pc, #416]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	4a67      	ldr	r2, [pc, #412]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f72:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8002f76:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8002f78:	687b      	ldr	r3, [r7, #4]
 8002f7a:	685b      	ldr	r3, [r3, #4]
 8002f7c:	2b00      	cmp	r3, #0
 8002f7e:	d013      	beq.n	8002fa8 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002f80:	f7ff fcc4 	bl	800290c <HAL_GetTick>
 8002f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f86:	e008      	b.n	8002f9a <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002f88:	f7ff fcc0 	bl	800290c <HAL_GetTick>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	693b      	ldr	r3, [r7, #16]
 8002f90:	1ad3      	subs	r3, r2, r3
 8002f92:	2b64      	cmp	r3, #100	@ 0x64
 8002f94:	d901      	bls.n	8002f9a <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8002f96:	2303      	movs	r3, #3
 8002f98:	e200      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8002f9a:	4b5d      	ldr	r3, [pc, #372]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002f9c:	681b      	ldr	r3, [r3, #0]
 8002f9e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d0f0      	beq.n	8002f88 <HAL_RCC_OscConfig+0xe4>
 8002fa6:	e014      	b.n	8002fd2 <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002fa8:	f7ff fcb0 	bl	800290c <HAL_GetTick>
 8002fac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fae:	e008      	b.n	8002fc2 <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8002fb0:	f7ff fcac 	bl	800290c <HAL_GetTick>
 8002fb4:	4602      	mov	r2, r0
 8002fb6:	693b      	ldr	r3, [r7, #16]
 8002fb8:	1ad3      	subs	r3, r2, r3
 8002fba:	2b64      	cmp	r3, #100	@ 0x64
 8002fbc:	d901      	bls.n	8002fc2 <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8002fbe:	2303      	movs	r3, #3
 8002fc0:	e1ec      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8002fc2:	4b53      	ldr	r3, [pc, #332]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d1f0      	bne.n	8002fb0 <HAL_RCC_OscConfig+0x10c>
 8002fce:	e000      	b.n	8002fd2 <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002fd0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f003 0302 	and.w	r3, r3, #2
 8002fda:	2b00      	cmp	r3, #0
 8002fdc:	d063      	beq.n	80030a6 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8002fde:	4b4c      	ldr	r3, [pc, #304]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002fe0:	685b      	ldr	r3, [r3, #4]
 8002fe2:	f003 030c 	and.w	r3, r3, #12
 8002fe6:	2b00      	cmp	r3, #0
 8002fe8:	d00b      	beq.n	8003002 <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8002fea:	4b49      	ldr	r3, [pc, #292]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002fec:	685b      	ldr	r3, [r3, #4]
 8002fee:	f003 030c 	and.w	r3, r3, #12
 8002ff2:	2b08      	cmp	r3, #8
 8002ff4:	d11c      	bne.n	8003030 <HAL_RCC_OscConfig+0x18c>
 8002ff6:	4b46      	ldr	r3, [pc, #280]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8002ff8:	685b      	ldr	r3, [r3, #4]
 8002ffa:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ffe:	2b00      	cmp	r3, #0
 8003000:	d116      	bne.n	8003030 <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003002:	4b43      	ldr	r3, [pc, #268]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	f003 0302 	and.w	r3, r3, #2
 800300a:	2b00      	cmp	r3, #0
 800300c:	d005      	beq.n	800301a <HAL_RCC_OscConfig+0x176>
 800300e:	687b      	ldr	r3, [r7, #4]
 8003010:	691b      	ldr	r3, [r3, #16]
 8003012:	2b01      	cmp	r3, #1
 8003014:	d001      	beq.n	800301a <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003016:	2301      	movs	r3, #1
 8003018:	e1c0      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800301a:	4b3d      	ldr	r3, [pc, #244]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8003022:	687b      	ldr	r3, [r7, #4]
 8003024:	695b      	ldr	r3, [r3, #20]
 8003026:	00db      	lsls	r3, r3, #3
 8003028:	4939      	ldr	r1, [pc, #228]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 800302a:	4313      	orrs	r3, r2
 800302c:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800302e:	e03a      	b.n	80030a6 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8003030:	687b      	ldr	r3, [r7, #4]
 8003032:	691b      	ldr	r3, [r3, #16]
 8003034:	2b00      	cmp	r3, #0
 8003036:	d020      	beq.n	800307a <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8003038:	4b36      	ldr	r3, [pc, #216]	@ (8003114 <HAL_RCC_OscConfig+0x270>)
 800303a:	2201      	movs	r2, #1
 800303c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800303e:	f7ff fc65 	bl	800290c <HAL_GetTick>
 8003042:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003044:	e008      	b.n	8003058 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003046:	f7ff fc61 	bl	800290c <HAL_GetTick>
 800304a:	4602      	mov	r2, r0
 800304c:	693b      	ldr	r3, [r7, #16]
 800304e:	1ad3      	subs	r3, r2, r3
 8003050:	2b02      	cmp	r3, #2
 8003052:	d901      	bls.n	8003058 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8003054:	2303      	movs	r3, #3
 8003056:	e1a1      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003058:	4b2d      	ldr	r3, [pc, #180]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 800305a:	681b      	ldr	r3, [r3, #0]
 800305c:	f003 0302 	and.w	r3, r3, #2
 8003060:	2b00      	cmp	r3, #0
 8003062:	d0f0      	beq.n	8003046 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003064:	4b2a      	ldr	r3, [pc, #168]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8003066:	681b      	ldr	r3, [r3, #0]
 8003068:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	695b      	ldr	r3, [r3, #20]
 8003070:	00db      	lsls	r3, r3, #3
 8003072:	4927      	ldr	r1, [pc, #156]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 8003074:	4313      	orrs	r3, r2
 8003076:	600b      	str	r3, [r1, #0]
 8003078:	e015      	b.n	80030a6 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800307a:	4b26      	ldr	r3, [pc, #152]	@ (8003114 <HAL_RCC_OscConfig+0x270>)
 800307c:	2200      	movs	r2, #0
 800307e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003080:	f7ff fc44 	bl	800290c <HAL_GetTick>
 8003084:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003086:	e008      	b.n	800309a <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8003088:	f7ff fc40 	bl	800290c <HAL_GetTick>
 800308c:	4602      	mov	r2, r0
 800308e:	693b      	ldr	r3, [r7, #16]
 8003090:	1ad3      	subs	r3, r2, r3
 8003092:	2b02      	cmp	r3, #2
 8003094:	d901      	bls.n	800309a <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003096:	2303      	movs	r3, #3
 8003098:	e180      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800309a:	4b1d      	ldr	r3, [pc, #116]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 800309c:	681b      	ldr	r3, [r3, #0]
 800309e:	f003 0302 	and.w	r3, r3, #2
 80030a2:	2b00      	cmp	r3, #0
 80030a4:	d1f0      	bne.n	8003088 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80030a6:	687b      	ldr	r3, [r7, #4]
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	f003 0308 	and.w	r3, r3, #8
 80030ae:	2b00      	cmp	r3, #0
 80030b0:	d03a      	beq.n	8003128 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80030b2:	687b      	ldr	r3, [r7, #4]
 80030b4:	699b      	ldr	r3, [r3, #24]
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d019      	beq.n	80030ee <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80030ba:	4b17      	ldr	r3, [pc, #92]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 80030bc:	2201      	movs	r2, #1
 80030be:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030c0:	f7ff fc24 	bl	800290c <HAL_GetTick>
 80030c4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030c6:	e008      	b.n	80030da <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030c8:	f7ff fc20 	bl	800290c <HAL_GetTick>
 80030cc:	4602      	mov	r2, r0
 80030ce:	693b      	ldr	r3, [r7, #16]
 80030d0:	1ad3      	subs	r3, r2, r3
 80030d2:	2b02      	cmp	r3, #2
 80030d4:	d901      	bls.n	80030da <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80030d6:	2303      	movs	r3, #3
 80030d8:	e160      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80030da:	4b0d      	ldr	r3, [pc, #52]	@ (8003110 <HAL_RCC_OscConfig+0x26c>)
 80030dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80030de:	f003 0302 	and.w	r3, r3, #2
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d0f0      	beq.n	80030c8 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80030e6:	2001      	movs	r0, #1
 80030e8:	f000 fa9c 	bl	8003624 <RCC_Delay>
 80030ec:	e01c      	b.n	8003128 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80030ee:	4b0a      	ldr	r3, [pc, #40]	@ (8003118 <HAL_RCC_OscConfig+0x274>)
 80030f0:	2200      	movs	r2, #0
 80030f2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80030f4:	f7ff fc0a 	bl	800290c <HAL_GetTick>
 80030f8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80030fa:	e00f      	b.n	800311c <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80030fc:	f7ff fc06 	bl	800290c <HAL_GetTick>
 8003100:	4602      	mov	r2, r0
 8003102:	693b      	ldr	r3, [r7, #16]
 8003104:	1ad3      	subs	r3, r2, r3
 8003106:	2b02      	cmp	r3, #2
 8003108:	d908      	bls.n	800311c <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 800310a:	2303      	movs	r3, #3
 800310c:	e146      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
 800310e:	bf00      	nop
 8003110:	40021000 	.word	0x40021000
 8003114:	42420000 	.word	0x42420000
 8003118:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800311c:	4b92      	ldr	r3, [pc, #584]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800311e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003120:	f003 0302 	and.w	r3, r3, #2
 8003124:	2b00      	cmp	r3, #0
 8003126:	d1e9      	bne.n	80030fc <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0304 	and.w	r3, r3, #4
 8003130:	2b00      	cmp	r3, #0
 8003132:	f000 80a6 	beq.w	8003282 <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003136:	2300      	movs	r3, #0
 8003138:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800313a:	4b8b      	ldr	r3, [pc, #556]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800313c:	69db      	ldr	r3, [r3, #28]
 800313e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8003142:	2b00      	cmp	r3, #0
 8003144:	d10d      	bne.n	8003162 <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003146:	4b88      	ldr	r3, [pc, #544]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003148:	69db      	ldr	r3, [r3, #28]
 800314a:	4a87      	ldr	r2, [pc, #540]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800314c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8003150:	61d3      	str	r3, [r2, #28]
 8003152:	4b85      	ldr	r3, [pc, #532]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003154:	69db      	ldr	r3, [r3, #28]
 8003156:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800315a:	60bb      	str	r3, [r7, #8]
 800315c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800315e:	2301      	movs	r3, #1
 8003160:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003162:	4b82      	ldr	r3, [pc, #520]	@ (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800316a:	2b00      	cmp	r3, #0
 800316c:	d118      	bne.n	80031a0 <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800316e:	4b7f      	ldr	r3, [pc, #508]	@ (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	4a7e      	ldr	r2, [pc, #504]	@ (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003174:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003178:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800317a:	f7ff fbc7 	bl	800290c <HAL_GetTick>
 800317e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003180:	e008      	b.n	8003194 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003182:	f7ff fbc3 	bl	800290c <HAL_GetTick>
 8003186:	4602      	mov	r2, r0
 8003188:	693b      	ldr	r3, [r7, #16]
 800318a:	1ad3      	subs	r3, r2, r3
 800318c:	2b64      	cmp	r3, #100	@ 0x64
 800318e:	d901      	bls.n	8003194 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e103      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003194:	4b75      	ldr	r3, [pc, #468]	@ (800336c <HAL_RCC_OscConfig+0x4c8>)
 8003196:	681b      	ldr	r3, [r3, #0]
 8003198:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800319c:	2b00      	cmp	r3, #0
 800319e:	d0f0      	beq.n	8003182 <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	68db      	ldr	r3, [r3, #12]
 80031a4:	2b01      	cmp	r3, #1
 80031a6:	d106      	bne.n	80031b6 <HAL_RCC_OscConfig+0x312>
 80031a8:	4b6f      	ldr	r3, [pc, #444]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031aa:	6a1b      	ldr	r3, [r3, #32]
 80031ac:	4a6e      	ldr	r2, [pc, #440]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031ae:	f043 0301 	orr.w	r3, r3, #1
 80031b2:	6213      	str	r3, [r2, #32]
 80031b4:	e02d      	b.n	8003212 <HAL_RCC_OscConfig+0x36e>
 80031b6:	687b      	ldr	r3, [r7, #4]
 80031b8:	68db      	ldr	r3, [r3, #12]
 80031ba:	2b00      	cmp	r3, #0
 80031bc:	d10c      	bne.n	80031d8 <HAL_RCC_OscConfig+0x334>
 80031be:	4b6a      	ldr	r3, [pc, #424]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031c0:	6a1b      	ldr	r3, [r3, #32]
 80031c2:	4a69      	ldr	r2, [pc, #420]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031c4:	f023 0301 	bic.w	r3, r3, #1
 80031c8:	6213      	str	r3, [r2, #32]
 80031ca:	4b67      	ldr	r3, [pc, #412]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031cc:	6a1b      	ldr	r3, [r3, #32]
 80031ce:	4a66      	ldr	r2, [pc, #408]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031d0:	f023 0304 	bic.w	r3, r3, #4
 80031d4:	6213      	str	r3, [r2, #32]
 80031d6:	e01c      	b.n	8003212 <HAL_RCC_OscConfig+0x36e>
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	68db      	ldr	r3, [r3, #12]
 80031dc:	2b05      	cmp	r3, #5
 80031de:	d10c      	bne.n	80031fa <HAL_RCC_OscConfig+0x356>
 80031e0:	4b61      	ldr	r3, [pc, #388]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031e2:	6a1b      	ldr	r3, [r3, #32]
 80031e4:	4a60      	ldr	r2, [pc, #384]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031e6:	f043 0304 	orr.w	r3, r3, #4
 80031ea:	6213      	str	r3, [r2, #32]
 80031ec:	4b5e      	ldr	r3, [pc, #376]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031ee:	6a1b      	ldr	r3, [r3, #32]
 80031f0:	4a5d      	ldr	r2, [pc, #372]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031f2:	f043 0301 	orr.w	r3, r3, #1
 80031f6:	6213      	str	r3, [r2, #32]
 80031f8:	e00b      	b.n	8003212 <HAL_RCC_OscConfig+0x36e>
 80031fa:	4b5b      	ldr	r3, [pc, #364]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80031fc:	6a1b      	ldr	r3, [r3, #32]
 80031fe:	4a5a      	ldr	r2, [pc, #360]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003200:	f023 0301 	bic.w	r3, r3, #1
 8003204:	6213      	str	r3, [r2, #32]
 8003206:	4b58      	ldr	r3, [pc, #352]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003208:	6a1b      	ldr	r3, [r3, #32]
 800320a:	4a57      	ldr	r2, [pc, #348]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800320c:	f023 0304 	bic.w	r3, r3, #4
 8003210:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8003212:	687b      	ldr	r3, [r7, #4]
 8003214:	68db      	ldr	r3, [r3, #12]
 8003216:	2b00      	cmp	r3, #0
 8003218:	d015      	beq.n	8003246 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800321a:	f7ff fb77 	bl	800290c <HAL_GetTick>
 800321e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003220:	e00a      	b.n	8003238 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003222:	f7ff fb73 	bl	800290c <HAL_GetTick>
 8003226:	4602      	mov	r2, r0
 8003228:	693b      	ldr	r3, [r7, #16]
 800322a:	1ad3      	subs	r3, r2, r3
 800322c:	f241 3288 	movw	r2, #5000	@ 0x1388
 8003230:	4293      	cmp	r3, r2
 8003232:	d901      	bls.n	8003238 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8003234:	2303      	movs	r3, #3
 8003236:	e0b1      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003238:	4b4b      	ldr	r3, [pc, #300]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800323a:	6a1b      	ldr	r3, [r3, #32]
 800323c:	f003 0302 	and.w	r3, r3, #2
 8003240:	2b00      	cmp	r3, #0
 8003242:	d0ee      	beq.n	8003222 <HAL_RCC_OscConfig+0x37e>
 8003244:	e014      	b.n	8003270 <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003246:	f7ff fb61 	bl	800290c <HAL_GetTick>
 800324a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800324c:	e00a      	b.n	8003264 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800324e:	f7ff fb5d 	bl	800290c <HAL_GetTick>
 8003252:	4602      	mov	r2, r0
 8003254:	693b      	ldr	r3, [r7, #16]
 8003256:	1ad3      	subs	r3, r2, r3
 8003258:	f241 3288 	movw	r2, #5000	@ 0x1388
 800325c:	4293      	cmp	r3, r2
 800325e:	d901      	bls.n	8003264 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 8003260:	2303      	movs	r3, #3
 8003262:	e09b      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003264:	4b40      	ldr	r3, [pc, #256]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003266:	6a1b      	ldr	r3, [r3, #32]
 8003268:	f003 0302 	and.w	r3, r3, #2
 800326c:	2b00      	cmp	r3, #0
 800326e:	d1ee      	bne.n	800324e <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 8003270:	7dfb      	ldrb	r3, [r7, #23]
 8003272:	2b01      	cmp	r3, #1
 8003274:	d105      	bne.n	8003282 <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003276:	4b3c      	ldr	r3, [pc, #240]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003278:	69db      	ldr	r3, [r3, #28]
 800327a:	4a3b      	ldr	r2, [pc, #236]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800327c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8003280:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003282:	687b      	ldr	r3, [r7, #4]
 8003284:	69db      	ldr	r3, [r3, #28]
 8003286:	2b00      	cmp	r3, #0
 8003288:	f000 8087 	beq.w	800339a <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 800328c:	4b36      	ldr	r3, [pc, #216]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 800328e:	685b      	ldr	r3, [r3, #4]
 8003290:	f003 030c 	and.w	r3, r3, #12
 8003294:	2b08      	cmp	r3, #8
 8003296:	d061      	beq.n	800335c <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	69db      	ldr	r3, [r3, #28]
 800329c:	2b02      	cmp	r3, #2
 800329e:	d146      	bne.n	800332e <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80032a0:	4b33      	ldr	r3, [pc, #204]	@ (8003370 <HAL_RCC_OscConfig+0x4cc>)
 80032a2:	2200      	movs	r2, #0
 80032a4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032a6:	f7ff fb31 	bl	800290c <HAL_GetTick>
 80032aa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032ac:	e008      	b.n	80032c0 <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80032ae:	f7ff fb2d 	bl	800290c <HAL_GetTick>
 80032b2:	4602      	mov	r2, r0
 80032b4:	693b      	ldr	r3, [r7, #16]
 80032b6:	1ad3      	subs	r3, r2, r3
 80032b8:	2b02      	cmp	r3, #2
 80032ba:	d901      	bls.n	80032c0 <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80032bc:	2303      	movs	r3, #3
 80032be:	e06d      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80032c0:	4b29      	ldr	r3, [pc, #164]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032c2:	681b      	ldr	r3, [r3, #0]
 80032c4:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80032c8:	2b00      	cmp	r3, #0
 80032ca:	d1f0      	bne.n	80032ae <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	6a1b      	ldr	r3, [r3, #32]
 80032d0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80032d4:	d108      	bne.n	80032e8 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80032d6:	4b24      	ldr	r3, [pc, #144]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032d8:	685b      	ldr	r3, [r3, #4]
 80032da:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80032de:	687b      	ldr	r3, [r7, #4]
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	4921      	ldr	r1, [pc, #132]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032e4:	4313      	orrs	r3, r2
 80032e6:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80032e8:	4b1f      	ldr	r3, [pc, #124]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032ea:	685b      	ldr	r3, [r3, #4]
 80032ec:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	6a19      	ldr	r1, [r3, #32]
 80032f4:	687b      	ldr	r3, [r7, #4]
 80032f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032f8:	430b      	orrs	r3, r1
 80032fa:	491b      	ldr	r1, [pc, #108]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 80032fc:	4313      	orrs	r3, r2
 80032fe:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003300:	4b1b      	ldr	r3, [pc, #108]	@ (8003370 <HAL_RCC_OscConfig+0x4cc>)
 8003302:	2201      	movs	r2, #1
 8003304:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003306:	f7ff fb01 	bl	800290c <HAL_GetTick>
 800330a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800330c:	e008      	b.n	8003320 <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800330e:	f7ff fafd 	bl	800290c <HAL_GetTick>
 8003312:	4602      	mov	r2, r0
 8003314:	693b      	ldr	r3, [r7, #16]
 8003316:	1ad3      	subs	r3, r2, r3
 8003318:	2b02      	cmp	r3, #2
 800331a:	d901      	bls.n	8003320 <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 800331c:	2303      	movs	r3, #3
 800331e:	e03d      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003320:	4b11      	ldr	r3, [pc, #68]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003322:	681b      	ldr	r3, [r3, #0]
 8003324:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003328:	2b00      	cmp	r3, #0
 800332a:	d0f0      	beq.n	800330e <HAL_RCC_OscConfig+0x46a>
 800332c:	e035      	b.n	800339a <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800332e:	4b10      	ldr	r3, [pc, #64]	@ (8003370 <HAL_RCC_OscConfig+0x4cc>)
 8003330:	2200      	movs	r2, #0
 8003332:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003334:	f7ff faea 	bl	800290c <HAL_GetTick>
 8003338:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800333a:	e008      	b.n	800334e <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800333c:	f7ff fae6 	bl	800290c <HAL_GetTick>
 8003340:	4602      	mov	r2, r0
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	1ad3      	subs	r3, r2, r3
 8003346:	2b02      	cmp	r3, #2
 8003348:	d901      	bls.n	800334e <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 800334a:	2303      	movs	r3, #3
 800334c:	e026      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800334e:	4b06      	ldr	r3, [pc, #24]	@ (8003368 <HAL_RCC_OscConfig+0x4c4>)
 8003350:	681b      	ldr	r3, [r3, #0]
 8003352:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8003356:	2b00      	cmp	r3, #0
 8003358:	d1f0      	bne.n	800333c <HAL_RCC_OscConfig+0x498>
 800335a:	e01e      	b.n	800339a <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	69db      	ldr	r3, [r3, #28]
 8003360:	2b01      	cmp	r3, #1
 8003362:	d107      	bne.n	8003374 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8003364:	2301      	movs	r3, #1
 8003366:	e019      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
 8003368:	40021000 	.word	0x40021000
 800336c:	40007000 	.word	0x40007000
 8003370:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8003374:	4b0b      	ldr	r3, [pc, #44]	@ (80033a4 <HAL_RCC_OscConfig+0x500>)
 8003376:	685b      	ldr	r3, [r3, #4]
 8003378:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 8003380:	687b      	ldr	r3, [r7, #4]
 8003382:	6a1b      	ldr	r3, [r3, #32]
 8003384:	429a      	cmp	r2, r3
 8003386:	d106      	bne.n	8003396 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003392:	429a      	cmp	r2, r3
 8003394:	d001      	beq.n	800339a <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003396:	2301      	movs	r3, #1
 8003398:	e000      	b.n	800339c <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 800339a:	2300      	movs	r3, #0
}
 800339c:	4618      	mov	r0, r3
 800339e:	3718      	adds	r7, #24
 80033a0:	46bd      	mov	sp, r7
 80033a2:	bd80      	pop	{r7, pc}
 80033a4:	40021000 	.word	0x40021000

080033a8 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80033a8:	b580      	push	{r7, lr}
 80033aa:	b084      	sub	sp, #16
 80033ac:	af00      	add	r7, sp, #0
 80033ae:	6078      	str	r0, [r7, #4]
 80033b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	2b00      	cmp	r3, #0
 80033b6:	d101      	bne.n	80033bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80033b8:	2301      	movs	r3, #1
 80033ba:	e0d0      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80033bc:	4b6a      	ldr	r3, [pc, #424]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	f003 0307 	and.w	r3, r3, #7
 80033c4:	683a      	ldr	r2, [r7, #0]
 80033c6:	429a      	cmp	r2, r3
 80033c8:	d910      	bls.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80033ca:	4b67      	ldr	r3, [pc, #412]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033cc:	681b      	ldr	r3, [r3, #0]
 80033ce:	f023 0207 	bic.w	r2, r3, #7
 80033d2:	4965      	ldr	r1, [pc, #404]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033d4:	683b      	ldr	r3, [r7, #0]
 80033d6:	4313      	orrs	r3, r2
 80033d8:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80033da:	4b63      	ldr	r3, [pc, #396]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80033dc:	681b      	ldr	r3, [r3, #0]
 80033de:	f003 0307 	and.w	r3, r3, #7
 80033e2:	683a      	ldr	r2, [r7, #0]
 80033e4:	429a      	cmp	r2, r3
 80033e6:	d001      	beq.n	80033ec <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80033e8:	2301      	movs	r3, #1
 80033ea:	e0b8      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	f003 0302 	and.w	r3, r3, #2
 80033f4:	2b00      	cmp	r3, #0
 80033f6:	d020      	beq.n	800343a <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80033f8:	687b      	ldr	r3, [r7, #4]
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	f003 0304 	and.w	r3, r3, #4
 8003400:	2b00      	cmp	r3, #0
 8003402:	d005      	beq.n	8003410 <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003404:	4b59      	ldr	r3, [pc, #356]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003406:	685b      	ldr	r3, [r3, #4]
 8003408:	4a58      	ldr	r2, [pc, #352]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800340a:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800340e:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	f003 0308 	and.w	r3, r3, #8
 8003418:	2b00      	cmp	r3, #0
 800341a:	d005      	beq.n	8003428 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800341c:	4b53      	ldr	r3, [pc, #332]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800341e:	685b      	ldr	r3, [r3, #4]
 8003420:	4a52      	ldr	r2, [pc, #328]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003422:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8003426:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003428:	4b50      	ldr	r3, [pc, #320]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800342a:	685b      	ldr	r3, [r3, #4]
 800342c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	689b      	ldr	r3, [r3, #8]
 8003434:	494d      	ldr	r1, [pc, #308]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003436:	4313      	orrs	r3, r2
 8003438:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800343a:	687b      	ldr	r3, [r7, #4]
 800343c:	681b      	ldr	r3, [r3, #0]
 800343e:	f003 0301 	and.w	r3, r3, #1
 8003442:	2b00      	cmp	r3, #0
 8003444:	d040      	beq.n	80034c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	685b      	ldr	r3, [r3, #4]
 800344a:	2b01      	cmp	r3, #1
 800344c:	d107      	bne.n	800345e <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800344e:	4b47      	ldr	r3, [pc, #284]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003450:	681b      	ldr	r3, [r3, #0]
 8003452:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003456:	2b00      	cmp	r3, #0
 8003458:	d115      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800345a:	2301      	movs	r3, #1
 800345c:	e07f      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800345e:	687b      	ldr	r3, [r7, #4]
 8003460:	685b      	ldr	r3, [r3, #4]
 8003462:	2b02      	cmp	r3, #2
 8003464:	d107      	bne.n	8003476 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003466:	4b41      	ldr	r3, [pc, #260]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003468:	681b      	ldr	r3, [r3, #0]
 800346a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800346e:	2b00      	cmp	r3, #0
 8003470:	d109      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003472:	2301      	movs	r3, #1
 8003474:	e073      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003476:	4b3d      	ldr	r3, [pc, #244]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	f003 0302 	and.w	r3, r3, #2
 800347e:	2b00      	cmp	r3, #0
 8003480:	d101      	bne.n	8003486 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003482:	2301      	movs	r3, #1
 8003484:	e06b      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003486:	4b39      	ldr	r3, [pc, #228]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003488:	685b      	ldr	r3, [r3, #4]
 800348a:	f023 0203 	bic.w	r2, r3, #3
 800348e:	687b      	ldr	r3, [r7, #4]
 8003490:	685b      	ldr	r3, [r3, #4]
 8003492:	4936      	ldr	r1, [pc, #216]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003494:	4313      	orrs	r3, r2
 8003496:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003498:	f7ff fa38 	bl	800290c <HAL_GetTick>
 800349c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800349e:	e00a      	b.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80034a0:	f7ff fa34 	bl	800290c <HAL_GetTick>
 80034a4:	4602      	mov	r2, r0
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	1ad3      	subs	r3, r2, r3
 80034aa:	f241 3288 	movw	r2, #5000	@ 0x1388
 80034ae:	4293      	cmp	r3, r2
 80034b0:	d901      	bls.n	80034b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80034b2:	2303      	movs	r3, #3
 80034b4:	e053      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80034b6:	4b2d      	ldr	r3, [pc, #180]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 80034b8:	685b      	ldr	r3, [r3, #4]
 80034ba:	f003 020c 	and.w	r2, r3, #12
 80034be:	687b      	ldr	r3, [r7, #4]
 80034c0:	685b      	ldr	r3, [r3, #4]
 80034c2:	009b      	lsls	r3, r3, #2
 80034c4:	429a      	cmp	r2, r3
 80034c6:	d1eb      	bne.n	80034a0 <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80034c8:	4b27      	ldr	r3, [pc, #156]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f003 0307 	and.w	r3, r3, #7
 80034d0:	683a      	ldr	r2, [r7, #0]
 80034d2:	429a      	cmp	r2, r3
 80034d4:	d210      	bcs.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80034d6:	4b24      	ldr	r3, [pc, #144]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	f023 0207 	bic.w	r2, r3, #7
 80034de:	4922      	ldr	r1, [pc, #136]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e0:	683b      	ldr	r3, [r7, #0]
 80034e2:	4313      	orrs	r3, r2
 80034e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80034e6:	4b20      	ldr	r3, [pc, #128]	@ (8003568 <HAL_RCC_ClockConfig+0x1c0>)
 80034e8:	681b      	ldr	r3, [r3, #0]
 80034ea:	f003 0307 	and.w	r3, r3, #7
 80034ee:	683a      	ldr	r2, [r7, #0]
 80034f0:	429a      	cmp	r2, r3
 80034f2:	d001      	beq.n	80034f8 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 80034f4:	2301      	movs	r3, #1
 80034f6:	e032      	b.n	800355e <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80034f8:	687b      	ldr	r3, [r7, #4]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	f003 0304 	and.w	r3, r3, #4
 8003500:	2b00      	cmp	r3, #0
 8003502:	d008      	beq.n	8003516 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003504:	4b19      	ldr	r3, [pc, #100]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	4916      	ldr	r1, [pc, #88]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003512:	4313      	orrs	r3, r2
 8003514:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	f003 0308 	and.w	r3, r3, #8
 800351e:	2b00      	cmp	r3, #0
 8003520:	d009      	beq.n	8003536 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8003522:	4b12      	ldr	r3, [pc, #72]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003524:	685b      	ldr	r3, [r3, #4]
 8003526:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	691b      	ldr	r3, [r3, #16]
 800352e:	00db      	lsls	r3, r3, #3
 8003530:	490e      	ldr	r1, [pc, #56]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 8003532:	4313      	orrs	r3, r2
 8003534:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8003536:	f000 f821 	bl	800357c <HAL_RCC_GetSysClockFreq>
 800353a:	4602      	mov	r2, r0
 800353c:	4b0b      	ldr	r3, [pc, #44]	@ (800356c <HAL_RCC_ClockConfig+0x1c4>)
 800353e:	685b      	ldr	r3, [r3, #4]
 8003540:	091b      	lsrs	r3, r3, #4
 8003542:	f003 030f 	and.w	r3, r3, #15
 8003546:	490a      	ldr	r1, [pc, #40]	@ (8003570 <HAL_RCC_ClockConfig+0x1c8>)
 8003548:	5ccb      	ldrb	r3, [r1, r3]
 800354a:	fa22 f303 	lsr.w	r3, r2, r3
 800354e:	4a09      	ldr	r2, [pc, #36]	@ (8003574 <HAL_RCC_ClockConfig+0x1cc>)
 8003550:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8003552:	4b09      	ldr	r3, [pc, #36]	@ (8003578 <HAL_RCC_ClockConfig+0x1d0>)
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	4618      	mov	r0, r3
 8003558:	f7ff f996 	bl	8002888 <HAL_InitTick>

  return HAL_OK;
 800355c:	2300      	movs	r3, #0
}
 800355e:	4618      	mov	r0, r3
 8003560:	3710      	adds	r7, #16
 8003562:	46bd      	mov	sp, r7
 8003564:	bd80      	pop	{r7, pc}
 8003566:	bf00      	nop
 8003568:	40022000 	.word	0x40022000
 800356c:	40021000 	.word	0x40021000
 8003570:	0800567c 	.word	0x0800567c
 8003574:	20000028 	.word	0x20000028
 8003578:	2000002c 	.word	0x2000002c

0800357c <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800357c:	b480      	push	{r7}
 800357e:	b087      	sub	sp, #28
 8003580:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8003582:	2300      	movs	r3, #0
 8003584:	60fb      	str	r3, [r7, #12]
 8003586:	2300      	movs	r3, #0
 8003588:	60bb      	str	r3, [r7, #8]
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	2300      	movs	r3, #0
 8003590:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8003592:	2300      	movs	r3, #0
 8003594:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003596:	4b1e      	ldr	r3, [pc, #120]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x94>)
 8003598:	685b      	ldr	r3, [r3, #4]
 800359a:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 800359c:	68fb      	ldr	r3, [r7, #12]
 800359e:	f003 030c 	and.w	r3, r3, #12
 80035a2:	2b04      	cmp	r3, #4
 80035a4:	d002      	beq.n	80035ac <HAL_RCC_GetSysClockFreq+0x30>
 80035a6:	2b08      	cmp	r3, #8
 80035a8:	d003      	beq.n	80035b2 <HAL_RCC_GetSysClockFreq+0x36>
 80035aa:	e027      	b.n	80035fc <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80035ac:	4b19      	ldr	r3, [pc, #100]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x98>)
 80035ae:	613b      	str	r3, [r7, #16]
      break;
 80035b0:	e027      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80035b2:	68fb      	ldr	r3, [r7, #12]
 80035b4:	0c9b      	lsrs	r3, r3, #18
 80035b6:	f003 030f 	and.w	r3, r3, #15
 80035ba:	4a17      	ldr	r2, [pc, #92]	@ (8003618 <HAL_RCC_GetSysClockFreq+0x9c>)
 80035bc:	5cd3      	ldrb	r3, [r2, r3]
 80035be:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80035c0:	68fb      	ldr	r3, [r7, #12]
 80035c2:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80035c6:	2b00      	cmp	r3, #0
 80035c8:	d010      	beq.n	80035ec <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80035ca:	4b11      	ldr	r3, [pc, #68]	@ (8003610 <HAL_RCC_GetSysClockFreq+0x94>)
 80035cc:	685b      	ldr	r3, [r3, #4]
 80035ce:	0c5b      	lsrs	r3, r3, #17
 80035d0:	f003 0301 	and.w	r3, r3, #1
 80035d4:	4a11      	ldr	r2, [pc, #68]	@ (800361c <HAL_RCC_GetSysClockFreq+0xa0>)
 80035d6:	5cd3      	ldrb	r3, [r2, r3]
 80035d8:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	4a0d      	ldr	r2, [pc, #52]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x98>)
 80035de:	fb03 f202 	mul.w	r2, r3, r2
 80035e2:	68bb      	ldr	r3, [r7, #8]
 80035e4:	fbb2 f3f3 	udiv	r3, r2, r3
 80035e8:	617b      	str	r3, [r7, #20]
 80035ea:	e004      	b.n	80035f6 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80035ec:	687b      	ldr	r3, [r7, #4]
 80035ee:	4a0c      	ldr	r2, [pc, #48]	@ (8003620 <HAL_RCC_GetSysClockFreq+0xa4>)
 80035f0:	fb02 f303 	mul.w	r3, r2, r3
 80035f4:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 80035f6:	697b      	ldr	r3, [r7, #20]
 80035f8:	613b      	str	r3, [r7, #16]
      break;
 80035fa:	e002      	b.n	8003602 <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 80035fc:	4b05      	ldr	r3, [pc, #20]	@ (8003614 <HAL_RCC_GetSysClockFreq+0x98>)
 80035fe:	613b      	str	r3, [r7, #16]
      break;
 8003600:	bf00      	nop
    }
  }
  return sysclockfreq;
 8003602:	693b      	ldr	r3, [r7, #16]
}
 8003604:	4618      	mov	r0, r3
 8003606:	371c      	adds	r7, #28
 8003608:	46bd      	mov	sp, r7
 800360a:	bc80      	pop	{r7}
 800360c:	4770      	bx	lr
 800360e:	bf00      	nop
 8003610:	40021000 	.word	0x40021000
 8003614:	007a1200 	.word	0x007a1200
 8003618:	0800568c 	.word	0x0800568c
 800361c:	0800569c 	.word	0x0800569c
 8003620:	003d0900 	.word	0x003d0900

08003624 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8003624:	b480      	push	{r7}
 8003626:	b085      	sub	sp, #20
 8003628:	af00      	add	r7, sp, #0
 800362a:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 800362c:	4b0a      	ldr	r3, [pc, #40]	@ (8003658 <RCC_Delay+0x34>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	4a0a      	ldr	r2, [pc, #40]	@ (800365c <RCC_Delay+0x38>)
 8003632:	fba2 2303 	umull	r2, r3, r2, r3
 8003636:	0a5b      	lsrs	r3, r3, #9
 8003638:	687a      	ldr	r2, [r7, #4]
 800363a:	fb02 f303 	mul.w	r3, r2, r3
 800363e:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8003640:	bf00      	nop
  }
  while (Delay --);
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	1e5a      	subs	r2, r3, #1
 8003646:	60fa      	str	r2, [r7, #12]
 8003648:	2b00      	cmp	r3, #0
 800364a:	d1f9      	bne.n	8003640 <RCC_Delay+0x1c>
}
 800364c:	bf00      	nop
 800364e:	bf00      	nop
 8003650:	3714      	adds	r7, #20
 8003652:	46bd      	mov	sp, r7
 8003654:	bc80      	pop	{r7}
 8003656:	4770      	bx	lr
 8003658:	20000028 	.word	0x20000028
 800365c:	10624dd3 	.word	0x10624dd3

08003660 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003660:	b580      	push	{r7, lr}
 8003662:	b082      	sub	sp, #8
 8003664:	af00      	add	r7, sp, #0
 8003666:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	2b00      	cmp	r3, #0
 800366c:	d101      	bne.n	8003672 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800366e:	2301      	movs	r3, #1
 8003670:	e076      	b.n	8003760 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003672:	687b      	ldr	r3, [r7, #4]
 8003674:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003676:	2b00      	cmp	r3, #0
 8003678:	d108      	bne.n	800368c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	685b      	ldr	r3, [r3, #4]
 800367e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003682:	d009      	beq.n	8003698 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003684:	687b      	ldr	r3, [r7, #4]
 8003686:	2200      	movs	r2, #0
 8003688:	61da      	str	r2, [r3, #28]
 800368a:	e005      	b.n	8003698 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	2200      	movs	r2, #0
 8003690:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003692:	687b      	ldr	r3, [r7, #4]
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80036a4:	b2db      	uxtb	r3, r3
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d106      	bne.n	80036b8 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	2200      	movs	r2, #0
 80036ae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80036b2:	6878      	ldr	r0, [r7, #4]
 80036b4:	f7fe fed0 	bl	8002458 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	2202      	movs	r2, #2
 80036bc:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	681a      	ldr	r2, [r3, #0]
 80036c6:	687b      	ldr	r3, [r7, #4]
 80036c8:	681b      	ldr	r3, [r3, #0]
 80036ca:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80036ce:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80036d0:	687b      	ldr	r3, [r7, #4]
 80036d2:	685b      	ldr	r3, [r3, #4]
 80036d4:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	689b      	ldr	r3, [r3, #8]
 80036dc:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80036e0:	431a      	orrs	r2, r3
 80036e2:	687b      	ldr	r3, [r7, #4]
 80036e4:	68db      	ldr	r3, [r3, #12]
 80036e6:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80036ea:	431a      	orrs	r2, r3
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	691b      	ldr	r3, [r3, #16]
 80036f0:	f003 0302 	and.w	r3, r3, #2
 80036f4:	431a      	orrs	r2, r3
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	695b      	ldr	r3, [r3, #20]
 80036fa:	f003 0301 	and.w	r3, r3, #1
 80036fe:	431a      	orrs	r2, r3
 8003700:	687b      	ldr	r3, [r7, #4]
 8003702:	699b      	ldr	r3, [r3, #24]
 8003704:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8003708:	431a      	orrs	r2, r3
 800370a:	687b      	ldr	r3, [r7, #4]
 800370c:	69db      	ldr	r3, [r3, #28]
 800370e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8003712:	431a      	orrs	r2, r3
 8003714:	687b      	ldr	r3, [r7, #4]
 8003716:	6a1b      	ldr	r3, [r3, #32]
 8003718:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800371c:	ea42 0103 	orr.w	r1, r2, r3
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003724:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	430a      	orrs	r2, r1
 800372e:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	699b      	ldr	r3, [r3, #24]
 8003734:	0c1a      	lsrs	r2, r3, #16
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f002 0204 	and.w	r2, r2, #4
 800373e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69da      	ldr	r2, [r3, #28]
 8003746:	687b      	ldr	r3, [r7, #4]
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800374e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003750:	687b      	ldr	r3, [r7, #4]
 8003752:	2200      	movs	r2, #0
 8003754:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003756:	687b      	ldr	r3, [r7, #4]
 8003758:	2201      	movs	r2, #1
 800375a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800375e:	2300      	movs	r3, #0
}
 8003760:	4618      	mov	r0, r3
 8003762:	3708      	adds	r7, #8
 8003764:	46bd      	mov	sp, r7
 8003766:	bd80      	pop	{r7, pc}

08003768 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b082      	sub	sp, #8
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d101      	bne.n	800377a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e041      	b.n	80037fe <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003780:	b2db      	uxtb	r3, r3
 8003782:	2b00      	cmp	r3, #0
 8003784:	d106      	bne.n	8003794 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2200      	movs	r2, #0
 800378a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f7fe fea0 	bl	80024d4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	2202      	movs	r2, #2
 8003798:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	681a      	ldr	r2, [r3, #0]
 80037a0:	687b      	ldr	r3, [r7, #4]
 80037a2:	3304      	adds	r3, #4
 80037a4:	4619      	mov	r1, r3
 80037a6:	4610      	mov	r0, r2
 80037a8:	f000 fc38 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80037ac:	687b      	ldr	r3, [r7, #4]
 80037ae:	2201      	movs	r2, #1
 80037b0:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037b4:	687b      	ldr	r3, [r7, #4]
 80037b6:	2201      	movs	r2, #1
 80037b8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80037bc:	687b      	ldr	r3, [r7, #4]
 80037be:	2201      	movs	r2, #1
 80037c0:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	2201      	movs	r2, #1
 80037c8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80037cc:	687b      	ldr	r3, [r7, #4]
 80037ce:	2201      	movs	r2, #1
 80037d0:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	2201      	movs	r2, #1
 80037d8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	2201      	movs	r2, #1
 80037e0:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80037e4:	687b      	ldr	r3, [r7, #4]
 80037e6:	2201      	movs	r2, #1
 80037e8:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	2201      	movs	r2, #1
 80037f0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	2201      	movs	r2, #1
 80037f8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 80037fc:	2300      	movs	r3, #0
}
 80037fe:	4618      	mov	r0, r3
 8003800:	3708      	adds	r7, #8
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
	...

08003808 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003808:	b480      	push	{r7}
 800380a:	b085      	sub	sp, #20
 800380c:	af00      	add	r7, sp, #0
 800380e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003816:	b2db      	uxtb	r3, r3
 8003818:	2b01      	cmp	r3, #1
 800381a:	d001      	beq.n	8003820 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800381c:	2301      	movs	r3, #1
 800381e:	e03a      	b.n	8003896 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003820:	687b      	ldr	r3, [r7, #4]
 8003822:	2202      	movs	r2, #2
 8003824:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	68da      	ldr	r2, [r3, #12]
 800382e:	687b      	ldr	r3, [r7, #4]
 8003830:	681b      	ldr	r3, [r3, #0]
 8003832:	f042 0201 	orr.w	r2, r2, #1
 8003836:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	4a18      	ldr	r2, [pc, #96]	@ (80038a0 <HAL_TIM_Base_Start_IT+0x98>)
 800383e:	4293      	cmp	r3, r2
 8003840:	d00e      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x58>
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800384a:	d009      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x58>
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	681b      	ldr	r3, [r3, #0]
 8003850:	4a14      	ldr	r2, [pc, #80]	@ (80038a4 <HAL_TIM_Base_Start_IT+0x9c>)
 8003852:	4293      	cmp	r3, r2
 8003854:	d004      	beq.n	8003860 <HAL_TIM_Base_Start_IT+0x58>
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	4a13      	ldr	r2, [pc, #76]	@ (80038a8 <HAL_TIM_Base_Start_IT+0xa0>)
 800385c:	4293      	cmp	r3, r2
 800385e:	d111      	bne.n	8003884 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	689b      	ldr	r3, [r3, #8]
 8003866:	f003 0307 	and.w	r3, r3, #7
 800386a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800386c:	68fb      	ldr	r3, [r7, #12]
 800386e:	2b06      	cmp	r3, #6
 8003870:	d010      	beq.n	8003894 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	681a      	ldr	r2, [r3, #0]
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	f042 0201 	orr.w	r2, r2, #1
 8003880:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003882:	e007      	b.n	8003894 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	681a      	ldr	r2, [r3, #0]
 800388a:	687b      	ldr	r3, [r7, #4]
 800388c:	681b      	ldr	r3, [r3, #0]
 800388e:	f042 0201 	orr.w	r2, r2, #1
 8003892:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003894:	2300      	movs	r3, #0
}
 8003896:	4618      	mov	r0, r3
 8003898:	3714      	adds	r7, #20
 800389a:	46bd      	mov	sp, r7
 800389c:	bc80      	pop	{r7}
 800389e:	4770      	bx	lr
 80038a0:	40012c00 	.word	0x40012c00
 80038a4:	40000400 	.word	0x40000400
 80038a8:	40000800 	.word	0x40000800

080038ac <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80038ac:	b580      	push	{r7, lr}
 80038ae:	b082      	sub	sp, #8
 80038b0:	af00      	add	r7, sp, #0
 80038b2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80038b4:	687b      	ldr	r3, [r7, #4]
 80038b6:	2b00      	cmp	r3, #0
 80038b8:	d101      	bne.n	80038be <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80038ba:	2301      	movs	r3, #1
 80038bc:	e041      	b.n	8003942 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80038c4:	b2db      	uxtb	r3, r3
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d106      	bne.n	80038d8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80038ca:	687b      	ldr	r3, [r7, #4]
 80038cc:	2200      	movs	r2, #0
 80038ce:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80038d2:	6878      	ldr	r0, [r7, #4]
 80038d4:	f000 f839 	bl	800394a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	2202      	movs	r2, #2
 80038dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80038e0:	687b      	ldr	r3, [r7, #4]
 80038e2:	681a      	ldr	r2, [r3, #0]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	3304      	adds	r3, #4
 80038e8:	4619      	mov	r1, r3
 80038ea:	4610      	mov	r0, r2
 80038ec:	f000 fb96 	bl	800401c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	2201      	movs	r2, #1
 80038f4:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80038f8:	687b      	ldr	r3, [r7, #4]
 80038fa:	2201      	movs	r2, #1
 80038fc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003900:	687b      	ldr	r3, [r7, #4]
 8003902:	2201      	movs	r2, #1
 8003904:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	2201      	movs	r2, #1
 800390c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	2201      	movs	r2, #1
 8003914:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	2201      	movs	r2, #1
 800391c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	2201      	movs	r2, #1
 8003924:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003928:	687b      	ldr	r3, [r7, #4]
 800392a:	2201      	movs	r2, #1
 800392c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	2201      	movs	r2, #1
 8003934:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2201      	movs	r2, #1
 800393c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003940:	2300      	movs	r3, #0
}
 8003942:	4618      	mov	r0, r3
 8003944:	3708      	adds	r7, #8
 8003946:	46bd      	mov	sp, r7
 8003948:	bd80      	pop	{r7, pc}

0800394a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800394a:	b480      	push	{r7}
 800394c:	b083      	sub	sp, #12
 800394e:	af00      	add	r7, sp, #0
 8003950:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003952:	bf00      	nop
 8003954:	370c      	adds	r7, #12
 8003956:	46bd      	mov	sp, r7
 8003958:	bc80      	pop	{r7}
 800395a:	4770      	bx	lr

0800395c <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800395c:	b580      	push	{r7, lr}
 800395e:	b084      	sub	sp, #16
 8003960:	af00      	add	r7, sp, #0
 8003962:	6078      	str	r0, [r7, #4]
 8003964:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003966:	683b      	ldr	r3, [r7, #0]
 8003968:	2b00      	cmp	r3, #0
 800396a:	d109      	bne.n	8003980 <HAL_TIM_PWM_Start+0x24>
 800396c:	687b      	ldr	r3, [r7, #4]
 800396e:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b01      	cmp	r3, #1
 8003976:	bf14      	ite	ne
 8003978:	2301      	movne	r3, #1
 800397a:	2300      	moveq	r3, #0
 800397c:	b2db      	uxtb	r3, r3
 800397e:	e022      	b.n	80039c6 <HAL_TIM_PWM_Start+0x6a>
 8003980:	683b      	ldr	r3, [r7, #0]
 8003982:	2b04      	cmp	r3, #4
 8003984:	d109      	bne.n	800399a <HAL_TIM_PWM_Start+0x3e>
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 800398c:	b2db      	uxtb	r3, r3
 800398e:	2b01      	cmp	r3, #1
 8003990:	bf14      	ite	ne
 8003992:	2301      	movne	r3, #1
 8003994:	2300      	moveq	r3, #0
 8003996:	b2db      	uxtb	r3, r3
 8003998:	e015      	b.n	80039c6 <HAL_TIM_PWM_Start+0x6a>
 800399a:	683b      	ldr	r3, [r7, #0]
 800399c:	2b08      	cmp	r3, #8
 800399e:	d109      	bne.n	80039b4 <HAL_TIM_PWM_Start+0x58>
 80039a0:	687b      	ldr	r3, [r7, #4]
 80039a2:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80039a6:	b2db      	uxtb	r3, r3
 80039a8:	2b01      	cmp	r3, #1
 80039aa:	bf14      	ite	ne
 80039ac:	2301      	movne	r3, #1
 80039ae:	2300      	moveq	r3, #0
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	e008      	b.n	80039c6 <HAL_TIM_PWM_Start+0x6a>
 80039b4:	687b      	ldr	r3, [r7, #4]
 80039b6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80039ba:	b2db      	uxtb	r3, r3
 80039bc:	2b01      	cmp	r3, #1
 80039be:	bf14      	ite	ne
 80039c0:	2301      	movne	r3, #1
 80039c2:	2300      	moveq	r3, #0
 80039c4:	b2db      	uxtb	r3, r3
 80039c6:	2b00      	cmp	r3, #0
 80039c8:	d001      	beq.n	80039ce <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e05e      	b.n	8003a8c <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80039ce:	683b      	ldr	r3, [r7, #0]
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d104      	bne.n	80039de <HAL_TIM_PWM_Start+0x82>
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	2202      	movs	r2, #2
 80039d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80039dc:	e013      	b.n	8003a06 <HAL_TIM_PWM_Start+0xaa>
 80039de:	683b      	ldr	r3, [r7, #0]
 80039e0:	2b04      	cmp	r3, #4
 80039e2:	d104      	bne.n	80039ee <HAL_TIM_PWM_Start+0x92>
 80039e4:	687b      	ldr	r3, [r7, #4]
 80039e6:	2202      	movs	r2, #2
 80039e8:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80039ec:	e00b      	b.n	8003a06 <HAL_TIM_PWM_Start+0xaa>
 80039ee:	683b      	ldr	r3, [r7, #0]
 80039f0:	2b08      	cmp	r3, #8
 80039f2:	d104      	bne.n	80039fe <HAL_TIM_PWM_Start+0xa2>
 80039f4:	687b      	ldr	r3, [r7, #4]
 80039f6:	2202      	movs	r2, #2
 80039f8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80039fc:	e003      	b.n	8003a06 <HAL_TIM_PWM_Start+0xaa>
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	2202      	movs	r2, #2
 8003a02:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	2201      	movs	r2, #1
 8003a0c:	6839      	ldr	r1, [r7, #0]
 8003a0e:	4618      	mov	r0, r3
 8003a10:	f000 fd84 	bl	800451c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4a1e      	ldr	r2, [pc, #120]	@ (8003a94 <HAL_TIM_PWM_Start+0x138>)
 8003a1a:	4293      	cmp	r3, r2
 8003a1c:	d107      	bne.n	8003a2e <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8003a24:	687b      	ldr	r3, [r7, #4]
 8003a26:	681b      	ldr	r3, [r3, #0]
 8003a28:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8003a2c:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	4a18      	ldr	r2, [pc, #96]	@ (8003a94 <HAL_TIM_PWM_Start+0x138>)
 8003a34:	4293      	cmp	r3, r2
 8003a36:	d00e      	beq.n	8003a56 <HAL_TIM_PWM_Start+0xfa>
 8003a38:	687b      	ldr	r3, [r7, #4]
 8003a3a:	681b      	ldr	r3, [r3, #0]
 8003a3c:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a40:	d009      	beq.n	8003a56 <HAL_TIM_PWM_Start+0xfa>
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	4a14      	ldr	r2, [pc, #80]	@ (8003a98 <HAL_TIM_PWM_Start+0x13c>)
 8003a48:	4293      	cmp	r3, r2
 8003a4a:	d004      	beq.n	8003a56 <HAL_TIM_PWM_Start+0xfa>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	681b      	ldr	r3, [r3, #0]
 8003a50:	4a12      	ldr	r2, [pc, #72]	@ (8003a9c <HAL_TIM_PWM_Start+0x140>)
 8003a52:	4293      	cmp	r3, r2
 8003a54:	d111      	bne.n	8003a7a <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	689b      	ldr	r3, [r3, #8]
 8003a5c:	f003 0307 	and.w	r3, r3, #7
 8003a60:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	2b06      	cmp	r3, #6
 8003a66:	d010      	beq.n	8003a8a <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f042 0201 	orr.w	r2, r2, #1
 8003a76:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003a78:	e007      	b.n	8003a8a <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003a7a:	687b      	ldr	r3, [r7, #4]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	681a      	ldr	r2, [r3, #0]
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	681b      	ldr	r3, [r3, #0]
 8003a84:	f042 0201 	orr.w	r2, r2, #1
 8003a88:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a8a:	2300      	movs	r3, #0
}
 8003a8c:	4618      	mov	r0, r3
 8003a8e:	3710      	adds	r7, #16
 8003a90:	46bd      	mov	sp, r7
 8003a92:	bd80      	pop	{r7, pc}
 8003a94:	40012c00 	.word	0x40012c00
 8003a98:	40000400 	.word	0x40000400
 8003a9c:	40000800 	.word	0x40000800

08003aa0 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003aa0:	b580      	push	{r7, lr}
 8003aa2:	b082      	sub	sp, #8
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	691b      	ldr	r3, [r3, #16]
 8003aae:	f003 0302 	and.w	r3, r3, #2
 8003ab2:	2b02      	cmp	r3, #2
 8003ab4:	d122      	bne.n	8003afc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	681b      	ldr	r3, [r3, #0]
 8003aba:	68db      	ldr	r3, [r3, #12]
 8003abc:	f003 0302 	and.w	r3, r3, #2
 8003ac0:	2b02      	cmp	r3, #2
 8003ac2:	d11b      	bne.n	8003afc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	f06f 0202 	mvn.w	r2, #2
 8003acc:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	2201      	movs	r2, #1
 8003ad2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	681b      	ldr	r3, [r3, #0]
 8003ad8:	699b      	ldr	r3, [r3, #24]
 8003ada:	f003 0303 	and.w	r3, r3, #3
 8003ade:	2b00      	cmp	r3, #0
 8003ae0:	d003      	beq.n	8003aea <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003ae2:	6878      	ldr	r0, [r7, #4]
 8003ae4:	f000 fa7f 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003ae8:	e005      	b.n	8003af6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003aea:	6878      	ldr	r0, [r7, #4]
 8003aec:	f000 fa72 	bl	8003fd4 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003af0:	6878      	ldr	r0, [r7, #4]
 8003af2:	f000 fa81 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003af6:	687b      	ldr	r3, [r7, #4]
 8003af8:	2200      	movs	r2, #0
 8003afa:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	681b      	ldr	r3, [r3, #0]
 8003b00:	691b      	ldr	r3, [r3, #16]
 8003b02:	f003 0304 	and.w	r3, r3, #4
 8003b06:	2b04      	cmp	r3, #4
 8003b08:	d122      	bne.n	8003b50 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	68db      	ldr	r3, [r3, #12]
 8003b10:	f003 0304 	and.w	r3, r3, #4
 8003b14:	2b04      	cmp	r3, #4
 8003b16:	d11b      	bne.n	8003b50 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	681b      	ldr	r3, [r3, #0]
 8003b1c:	f06f 0204 	mvn.w	r2, #4
 8003b20:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	2202      	movs	r2, #2
 8003b26:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	681b      	ldr	r3, [r3, #0]
 8003b2c:	699b      	ldr	r3, [r3, #24]
 8003b2e:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003b32:	2b00      	cmp	r3, #0
 8003b34:	d003      	beq.n	8003b3e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b36:	6878      	ldr	r0, [r7, #4]
 8003b38:	f000 fa55 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003b3c:	e005      	b.n	8003b4a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b3e:	6878      	ldr	r0, [r7, #4]
 8003b40:	f000 fa48 	bl	8003fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b44:	6878      	ldr	r0, [r7, #4]
 8003b46:	f000 fa57 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b4a:	687b      	ldr	r3, [r7, #4]
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	691b      	ldr	r3, [r3, #16]
 8003b56:	f003 0308 	and.w	r3, r3, #8
 8003b5a:	2b08      	cmp	r3, #8
 8003b5c:	d122      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	68db      	ldr	r3, [r3, #12]
 8003b64:	f003 0308 	and.w	r3, r3, #8
 8003b68:	2b08      	cmp	r3, #8
 8003b6a:	d11b      	bne.n	8003ba4 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003b6c:	687b      	ldr	r3, [r7, #4]
 8003b6e:	681b      	ldr	r3, [r3, #0]
 8003b70:	f06f 0208 	mvn.w	r2, #8
 8003b74:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	2204      	movs	r2, #4
 8003b7a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	69db      	ldr	r3, [r3, #28]
 8003b82:	f003 0303 	and.w	r3, r3, #3
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d003      	beq.n	8003b92 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003b8a:	6878      	ldr	r0, [r7, #4]
 8003b8c:	f000 fa2b 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003b90:	e005      	b.n	8003b9e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003b92:	6878      	ldr	r0, [r7, #4]
 8003b94:	f000 fa1e 	bl	8003fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003b98:	6878      	ldr	r0, [r7, #4]
 8003b9a:	f000 fa2d 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	2200      	movs	r2, #0
 8003ba2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	691b      	ldr	r3, [r3, #16]
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	2b10      	cmp	r3, #16
 8003bb0:	d122      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	68db      	ldr	r3, [r3, #12]
 8003bb8:	f003 0310 	and.w	r3, r3, #16
 8003bbc:	2b10      	cmp	r3, #16
 8003bbe:	d11b      	bne.n	8003bf8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f06f 0210 	mvn.w	r2, #16
 8003bc8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	2208      	movs	r2, #8
 8003bce:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	69db      	ldr	r3, [r3, #28]
 8003bd6:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003bda:	2b00      	cmp	r3, #0
 8003bdc:	d003      	beq.n	8003be6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003bde:	6878      	ldr	r0, [r7, #4]
 8003be0:	f000 fa01 	bl	8003fe6 <HAL_TIM_IC_CaptureCallback>
 8003be4:	e005      	b.n	8003bf2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003be6:	6878      	ldr	r0, [r7, #4]
 8003be8:	f000 f9f4 	bl	8003fd4 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003bec:	6878      	ldr	r0, [r7, #4]
 8003bee:	f000 fa03 	bl	8003ff8 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003bf2:	687b      	ldr	r3, [r7, #4]
 8003bf4:	2200      	movs	r2, #0
 8003bf6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	681b      	ldr	r3, [r3, #0]
 8003bfc:	691b      	ldr	r3, [r3, #16]
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d10e      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	68db      	ldr	r3, [r3, #12]
 8003c0c:	f003 0301 	and.w	r3, r3, #1
 8003c10:	2b01      	cmp	r3, #1
 8003c12:	d107      	bne.n	8003c24 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003c14:	687b      	ldr	r3, [r7, #4]
 8003c16:	681b      	ldr	r3, [r3, #0]
 8003c18:	f06f 0201 	mvn.w	r2, #1
 8003c1c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003c1e:	6878      	ldr	r0, [r7, #4]
 8003c20:	f000 f9cf 	bl	8003fc2 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	681b      	ldr	r3, [r3, #0]
 8003c28:	691b      	ldr	r3, [r3, #16]
 8003c2a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c2e:	2b80      	cmp	r3, #128	@ 0x80
 8003c30:	d10e      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	68db      	ldr	r3, [r3, #12]
 8003c38:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003c3c:	2b80      	cmp	r3, #128	@ 0x80
 8003c3e:	d107      	bne.n	8003c50 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8003c48:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003c4a:	6878      	ldr	r0, [r7, #4]
 8003c4c:	f000 fcf1 	bl	8004632 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	691b      	ldr	r3, [r3, #16]
 8003c56:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c5a:	2b40      	cmp	r3, #64	@ 0x40
 8003c5c:	d10e      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	68db      	ldr	r3, [r3, #12]
 8003c64:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003c68:	2b40      	cmp	r3, #64	@ 0x40
 8003c6a:	d107      	bne.n	8003c7c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	681b      	ldr	r3, [r3, #0]
 8003c70:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003c74:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003c76:	6878      	ldr	r0, [r7, #4]
 8003c78:	f000 f9c7 	bl	800400a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003c7c:	687b      	ldr	r3, [r7, #4]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	691b      	ldr	r3, [r3, #16]
 8003c82:	f003 0320 	and.w	r3, r3, #32
 8003c86:	2b20      	cmp	r3, #32
 8003c88:	d10e      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	68db      	ldr	r3, [r3, #12]
 8003c90:	f003 0320 	and.w	r3, r3, #32
 8003c94:	2b20      	cmp	r3, #32
 8003c96:	d107      	bne.n	8003ca8 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	f06f 0220 	mvn.w	r2, #32
 8003ca0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003ca2:	6878      	ldr	r0, [r7, #4]
 8003ca4:	f000 fcbc 	bl	8004620 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003ca8:	bf00      	nop
 8003caa:	3708      	adds	r7, #8
 8003cac:	46bd      	mov	sp, r7
 8003cae:	bd80      	pop	{r7, pc}

08003cb0 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003cb0:	b580      	push	{r7, lr}
 8003cb2:	b086      	sub	sp, #24
 8003cb4:	af00      	add	r7, sp, #0
 8003cb6:	60f8      	str	r0, [r7, #12]
 8003cb8:	60b9      	str	r1, [r7, #8]
 8003cba:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003cbc:	2300      	movs	r3, #0
 8003cbe:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003cc0:	68fb      	ldr	r3, [r7, #12]
 8003cc2:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d101      	bne.n	8003cce <HAL_TIM_PWM_ConfigChannel+0x1e>
 8003cca:	2302      	movs	r3, #2
 8003ccc:	e0ae      	b.n	8003e2c <HAL_TIM_PWM_ConfigChannel+0x17c>
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	2201      	movs	r2, #1
 8003cd2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8003cd6:	687b      	ldr	r3, [r7, #4]
 8003cd8:	2b0c      	cmp	r3, #12
 8003cda:	f200 809f 	bhi.w	8003e1c <HAL_TIM_PWM_ConfigChannel+0x16c>
 8003cde:	a201      	add	r2, pc, #4	@ (adr r2, 8003ce4 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8003ce0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ce4:	08003d19 	.word	0x08003d19
 8003ce8:	08003e1d 	.word	0x08003e1d
 8003cec:	08003e1d 	.word	0x08003e1d
 8003cf0:	08003e1d 	.word	0x08003e1d
 8003cf4:	08003d59 	.word	0x08003d59
 8003cf8:	08003e1d 	.word	0x08003e1d
 8003cfc:	08003e1d 	.word	0x08003e1d
 8003d00:	08003e1d 	.word	0x08003e1d
 8003d04:	08003d9b 	.word	0x08003d9b
 8003d08:	08003e1d 	.word	0x08003e1d
 8003d0c:	08003e1d 	.word	0x08003e1d
 8003d10:	08003e1d 	.word	0x08003e1d
 8003d14:	08003ddb 	.word	0x08003ddb
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003d18:	68fb      	ldr	r3, [r7, #12]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	68b9      	ldr	r1, [r7, #8]
 8003d1e:	4618      	mov	r0, r3
 8003d20:	f000 f9de 	bl	80040e0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	699a      	ldr	r2, [r3, #24]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f042 0208 	orr.w	r2, r2, #8
 8003d32:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003d34:	68fb      	ldr	r3, [r7, #12]
 8003d36:	681b      	ldr	r3, [r3, #0]
 8003d38:	699a      	ldr	r2, [r3, #24]
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	681b      	ldr	r3, [r3, #0]
 8003d3e:	f022 0204 	bic.w	r2, r2, #4
 8003d42:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	6999      	ldr	r1, [r3, #24]
 8003d4a:	68bb      	ldr	r3, [r7, #8]
 8003d4c:	691a      	ldr	r2, [r3, #16]
 8003d4e:	68fb      	ldr	r3, [r7, #12]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	430a      	orrs	r2, r1
 8003d54:	619a      	str	r2, [r3, #24]
      break;
 8003d56:	e064      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003d58:	68fb      	ldr	r3, [r7, #12]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	68b9      	ldr	r1, [r7, #8]
 8003d5e:	4618      	mov	r0, r3
 8003d60:	f000 fa24 	bl	80041ac <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	699a      	ldr	r2, [r3, #24]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003d72:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	699a      	ldr	r2, [r3, #24]
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d82:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	6999      	ldr	r1, [r3, #24]
 8003d8a:	68bb      	ldr	r3, [r7, #8]
 8003d8c:	691b      	ldr	r3, [r3, #16]
 8003d8e:	021a      	lsls	r2, r3, #8
 8003d90:	68fb      	ldr	r3, [r7, #12]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	430a      	orrs	r2, r1
 8003d96:	619a      	str	r2, [r3, #24]
      break;
 8003d98:	e043      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003d9a:	68fb      	ldr	r3, [r7, #12]
 8003d9c:	681b      	ldr	r3, [r3, #0]
 8003d9e:	68b9      	ldr	r1, [r7, #8]
 8003da0:	4618      	mov	r0, r3
 8003da2:	f000 fa6d 	bl	8004280 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003da6:	68fb      	ldr	r3, [r7, #12]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	69da      	ldr	r2, [r3, #28]
 8003dac:	68fb      	ldr	r3, [r7, #12]
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	f042 0208 	orr.w	r2, r2, #8
 8003db4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003db6:	68fb      	ldr	r3, [r7, #12]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	69da      	ldr	r2, [r3, #28]
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	f022 0204 	bic.w	r2, r2, #4
 8003dc4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	681b      	ldr	r3, [r3, #0]
 8003dca:	69d9      	ldr	r1, [r3, #28]
 8003dcc:	68bb      	ldr	r3, [r7, #8]
 8003dce:	691a      	ldr	r2, [r3, #16]
 8003dd0:	68fb      	ldr	r3, [r7, #12]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	430a      	orrs	r2, r1
 8003dd6:	61da      	str	r2, [r3, #28]
      break;
 8003dd8:	e023      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003dda:	68fb      	ldr	r3, [r7, #12]
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	68b9      	ldr	r1, [r7, #8]
 8003de0:	4618      	mov	r0, r3
 8003de2:	f000 fab7 	bl	8004354 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	69da      	ldr	r2, [r3, #28]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003df4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003df6:	68fb      	ldr	r3, [r7, #12]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	69da      	ldr	r2, [r3, #28]
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e04:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	69d9      	ldr	r1, [r3, #28]
 8003e0c:	68bb      	ldr	r3, [r7, #8]
 8003e0e:	691b      	ldr	r3, [r3, #16]
 8003e10:	021a      	lsls	r2, r3, #8
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	681b      	ldr	r3, [r3, #0]
 8003e16:	430a      	orrs	r2, r1
 8003e18:	61da      	str	r2, [r3, #28]
      break;
 8003e1a:	e002      	b.n	8003e22 <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8003e1c:	2301      	movs	r3, #1
 8003e1e:	75fb      	strb	r3, [r7, #23]
      break;
 8003e20:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003e2a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003e2c:	4618      	mov	r0, r3
 8003e2e:	3718      	adds	r7, #24
 8003e30:	46bd      	mov	sp, r7
 8003e32:	bd80      	pop	{r7, pc}

08003e34 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8003e34:	b580      	push	{r7, lr}
 8003e36:	b084      	sub	sp, #16
 8003e38:	af00      	add	r7, sp, #0
 8003e3a:	6078      	str	r0, [r7, #4]
 8003e3c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e3e:	2300      	movs	r3, #0
 8003e40:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e42:	687b      	ldr	r3, [r7, #4]
 8003e44:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003e48:	2b01      	cmp	r3, #1
 8003e4a:	d101      	bne.n	8003e50 <HAL_TIM_ConfigClockSource+0x1c>
 8003e4c:	2302      	movs	r3, #2
 8003e4e:	e0b4      	b.n	8003fba <HAL_TIM_ConfigClockSource+0x186>
 8003e50:	687b      	ldr	r3, [r7, #4]
 8003e52:	2201      	movs	r2, #1
 8003e54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	2202      	movs	r2, #2
 8003e5c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	681b      	ldr	r3, [r3, #0]
 8003e64:	689b      	ldr	r3, [r3, #8]
 8003e66:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003e68:	68bb      	ldr	r3, [r7, #8]
 8003e6a:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003e6e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003e70:	68bb      	ldr	r3, [r7, #8]
 8003e72:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003e76:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	68ba      	ldr	r2, [r7, #8]
 8003e7e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003e80:	683b      	ldr	r3, [r7, #0]
 8003e82:	681b      	ldr	r3, [r3, #0]
 8003e84:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e88:	d03e      	beq.n	8003f08 <HAL_TIM_ConfigClockSource+0xd4>
 8003e8a:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003e8e:	f200 8087 	bhi.w	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003e92:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e96:	f000 8086 	beq.w	8003fa6 <HAL_TIM_ConfigClockSource+0x172>
 8003e9a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8003e9e:	d87f      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea0:	2b70      	cmp	r3, #112	@ 0x70
 8003ea2:	d01a      	beq.n	8003eda <HAL_TIM_ConfigClockSource+0xa6>
 8003ea4:	2b70      	cmp	r3, #112	@ 0x70
 8003ea6:	d87b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ea8:	2b60      	cmp	r3, #96	@ 0x60
 8003eaa:	d050      	beq.n	8003f4e <HAL_TIM_ConfigClockSource+0x11a>
 8003eac:	2b60      	cmp	r3, #96	@ 0x60
 8003eae:	d877      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb0:	2b50      	cmp	r3, #80	@ 0x50
 8003eb2:	d03c      	beq.n	8003f2e <HAL_TIM_ConfigClockSource+0xfa>
 8003eb4:	2b50      	cmp	r3, #80	@ 0x50
 8003eb6:	d873      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003eb8:	2b40      	cmp	r3, #64	@ 0x40
 8003eba:	d058      	beq.n	8003f6e <HAL_TIM_ConfigClockSource+0x13a>
 8003ebc:	2b40      	cmp	r3, #64	@ 0x40
 8003ebe:	d86f      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec0:	2b30      	cmp	r3, #48	@ 0x30
 8003ec2:	d064      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ec4:	2b30      	cmp	r3, #48	@ 0x30
 8003ec6:	d86b      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ec8:	2b20      	cmp	r3, #32
 8003eca:	d060      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ecc:	2b20      	cmp	r3, #32
 8003ece:	d867      	bhi.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d05c      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed4:	2b10      	cmp	r3, #16
 8003ed6:	d05a      	beq.n	8003f8e <HAL_TIM_ConfigClockSource+0x15a>
 8003ed8:	e062      	b.n	8003fa0 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003eda:	687b      	ldr	r3, [r7, #4]
 8003edc:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003ede:	683b      	ldr	r3, [r7, #0]
 8003ee0:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003ee2:	683b      	ldr	r3, [r7, #0]
 8003ee4:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003ee6:	683b      	ldr	r3, [r7, #0]
 8003ee8:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003eea:	f000 faf8 	bl	80044de <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	689b      	ldr	r3, [r3, #8]
 8003ef4:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003efc:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	681b      	ldr	r3, [r3, #0]
 8003f02:	68ba      	ldr	r2, [r7, #8]
 8003f04:	609a      	str	r2, [r3, #8]
      break;
 8003f06:	e04f      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003f10:	683b      	ldr	r3, [r7, #0]
 8003f12:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8003f14:	683b      	ldr	r3, [r7, #0]
 8003f16:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003f18:	f000 fae1 	bl	80044de <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689a      	ldr	r2, [r3, #8]
 8003f22:	687b      	ldr	r3, [r7, #4]
 8003f24:	681b      	ldr	r3, [r3, #0]
 8003f26:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003f2a:	609a      	str	r2, [r3, #8]
      break;
 8003f2c:	e03c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f32:	683b      	ldr	r3, [r7, #0]
 8003f34:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f36:	683b      	ldr	r3, [r7, #0]
 8003f38:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f3a:	461a      	mov	r2, r3
 8003f3c:	f000 fa58 	bl	80043f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003f40:	687b      	ldr	r3, [r7, #4]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	2150      	movs	r1, #80	@ 0x50
 8003f46:	4618      	mov	r0, r3
 8003f48:	f000 faaf 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8003f4c:	e02c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f52:	683b      	ldr	r3, [r7, #0]
 8003f54:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f56:	683b      	ldr	r3, [r7, #0]
 8003f58:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003f5a:	461a      	mov	r2, r3
 8003f5c:	f000 fa76 	bl	800444c <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	2160      	movs	r1, #96	@ 0x60
 8003f66:	4618      	mov	r0, r3
 8003f68:	f000 fa9f 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8003f6c:	e01c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8003f72:	683b      	ldr	r3, [r7, #0]
 8003f74:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8003f76:	683b      	ldr	r3, [r7, #0]
 8003f78:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003f7a:	461a      	mov	r2, r3
 8003f7c:	f000 fa38 	bl	80043f0 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003f80:	687b      	ldr	r3, [r7, #4]
 8003f82:	681b      	ldr	r3, [r3, #0]
 8003f84:	2140      	movs	r1, #64	@ 0x40
 8003f86:	4618      	mov	r0, r3
 8003f88:	f000 fa8f 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8003f8c:	e00c      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	681a      	ldr	r2, [r3, #0]
 8003f92:	683b      	ldr	r3, [r7, #0]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	4619      	mov	r1, r3
 8003f98:	4610      	mov	r0, r2
 8003f9a:	f000 fa86 	bl	80044aa <TIM_ITRx_SetConfig>
      break;
 8003f9e:	e003      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8003fa0:	2301      	movs	r3, #1
 8003fa2:	73fb      	strb	r3, [r7, #15]
      break;
 8003fa4:	e000      	b.n	8003fa8 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8003fa6:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	2201      	movs	r2, #1
 8003fac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8003fb8:	7bfb      	ldrb	r3, [r7, #15]
}
 8003fba:	4618      	mov	r0, r3
 8003fbc:	3710      	adds	r7, #16
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}

08003fc2 <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fc2:	b480      	push	{r7}
 8003fc4:	b083      	sub	sp, #12
 8003fc6:	af00      	add	r7, sp, #0
 8003fc8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8003fca:	bf00      	nop
 8003fcc:	370c      	adds	r7, #12
 8003fce:	46bd      	mov	sp, r7
 8003fd0:	bc80      	pop	{r7}
 8003fd2:	4770      	bx	lr

08003fd4 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003fd4:	b480      	push	{r7}
 8003fd6:	b083      	sub	sp, #12
 8003fd8:	af00      	add	r7, sp, #0
 8003fda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8003fdc:	bf00      	nop
 8003fde:	370c      	adds	r7, #12
 8003fe0:	46bd      	mov	sp, r7
 8003fe2:	bc80      	pop	{r7}
 8003fe4:	4770      	bx	lr

08003fe6 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8003fe6:	b480      	push	{r7}
 8003fe8:	b083      	sub	sp, #12
 8003fea:	af00      	add	r7, sp, #0
 8003fec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8003fee:	bf00      	nop
 8003ff0:	370c      	adds	r7, #12
 8003ff2:	46bd      	mov	sp, r7
 8003ff4:	bc80      	pop	{r7}
 8003ff6:	4770      	bx	lr

08003ff8 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003ff8:	b480      	push	{r7}
 8003ffa:	b083      	sub	sp, #12
 8003ffc:	af00      	add	r7, sp, #0
 8003ffe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8004000:	bf00      	nop
 8004002:	370c      	adds	r7, #12
 8004004:	46bd      	mov	sp, r7
 8004006:	bc80      	pop	{r7}
 8004008:	4770      	bx	lr

0800400a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800400a:	b480      	push	{r7}
 800400c:	b083      	sub	sp, #12
 800400e:	af00      	add	r7, sp, #0
 8004010:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8004012:	bf00      	nop
 8004014:	370c      	adds	r7, #12
 8004016:	46bd      	mov	sp, r7
 8004018:	bc80      	pop	{r7}
 800401a:	4770      	bx	lr

0800401c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800401c:	b480      	push	{r7}
 800401e:	b085      	sub	sp, #20
 8004020:	af00      	add	r7, sp, #0
 8004022:	6078      	str	r0, [r7, #4]
 8004024:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	4a29      	ldr	r2, [pc, #164]	@ (80040d4 <TIM_Base_SetConfig+0xb8>)
 8004030:	4293      	cmp	r3, r2
 8004032:	d00b      	beq.n	800404c <TIM_Base_SetConfig+0x30>
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800403a:	d007      	beq.n	800404c <TIM_Base_SetConfig+0x30>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	4a26      	ldr	r2, [pc, #152]	@ (80040d8 <TIM_Base_SetConfig+0xbc>)
 8004040:	4293      	cmp	r3, r2
 8004042:	d003      	beq.n	800404c <TIM_Base_SetConfig+0x30>
 8004044:	687b      	ldr	r3, [r7, #4]
 8004046:	4a25      	ldr	r2, [pc, #148]	@ (80040dc <TIM_Base_SetConfig+0xc0>)
 8004048:	4293      	cmp	r3, r2
 800404a:	d108      	bne.n	800405e <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8004052:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8004054:	683b      	ldr	r3, [r7, #0]
 8004056:	685b      	ldr	r3, [r3, #4]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	4313      	orrs	r3, r2
 800405c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	4a1c      	ldr	r2, [pc, #112]	@ (80040d4 <TIM_Base_SetConfig+0xb8>)
 8004062:	4293      	cmp	r3, r2
 8004064:	d00b      	beq.n	800407e <TIM_Base_SetConfig+0x62>
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800406c:	d007      	beq.n	800407e <TIM_Base_SetConfig+0x62>
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	4a19      	ldr	r2, [pc, #100]	@ (80040d8 <TIM_Base_SetConfig+0xbc>)
 8004072:	4293      	cmp	r3, r2
 8004074:	d003      	beq.n	800407e <TIM_Base_SetConfig+0x62>
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	4a18      	ldr	r2, [pc, #96]	@ (80040dc <TIM_Base_SetConfig+0xc0>)
 800407a:	4293      	cmp	r3, r2
 800407c:	d108      	bne.n	8004090 <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8004084:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8004086:	683b      	ldr	r3, [r7, #0]
 8004088:	68db      	ldr	r3, [r3, #12]
 800408a:	68fa      	ldr	r2, [r7, #12]
 800408c:	4313      	orrs	r3, r2
 800408e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8004096:	683b      	ldr	r3, [r7, #0]
 8004098:	695b      	ldr	r3, [r3, #20]
 800409a:	4313      	orrs	r3, r2
 800409c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800409e:	687b      	ldr	r3, [r7, #4]
 80040a0:	68fa      	ldr	r2, [r7, #12]
 80040a2:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80040a4:	683b      	ldr	r3, [r7, #0]
 80040a6:	689a      	ldr	r2, [r3, #8]
 80040a8:	687b      	ldr	r3, [r7, #4]
 80040aa:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80040ac:	683b      	ldr	r3, [r7, #0]
 80040ae:	681a      	ldr	r2, [r3, #0]
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	4a07      	ldr	r2, [pc, #28]	@ (80040d4 <TIM_Base_SetConfig+0xb8>)
 80040b8:	4293      	cmp	r3, r2
 80040ba:	d103      	bne.n	80040c4 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80040bc:	683b      	ldr	r3, [r7, #0]
 80040be:	691a      	ldr	r2, [r3, #16]
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	2201      	movs	r2, #1
 80040c8:	615a      	str	r2, [r3, #20]
}
 80040ca:	bf00      	nop
 80040cc:	3714      	adds	r7, #20
 80040ce:	46bd      	mov	sp, r7
 80040d0:	bc80      	pop	{r7}
 80040d2:	4770      	bx	lr
 80040d4:	40012c00 	.word	0x40012c00
 80040d8:	40000400 	.word	0x40000400
 80040dc:	40000800 	.word	0x40000800

080040e0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80040e0:	b480      	push	{r7}
 80040e2:	b087      	sub	sp, #28
 80040e4:	af00      	add	r7, sp, #0
 80040e6:	6078      	str	r0, [r7, #4]
 80040e8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	6a1b      	ldr	r3, [r3, #32]
 80040ee:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a1b      	ldr	r3, [r3, #32]
 80040f4:	f023 0201 	bic.w	r2, r3, #1
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	685b      	ldr	r3, [r3, #4]
 8004100:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800410e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	f023 0303 	bic.w	r3, r3, #3
 8004116:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004118:	683b      	ldr	r3, [r7, #0]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	68fa      	ldr	r2, [r7, #12]
 800411e:	4313      	orrs	r3, r2
 8004120:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	f023 0302 	bic.w	r3, r3, #2
 8004128:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800412a:	683b      	ldr	r3, [r7, #0]
 800412c:	689b      	ldr	r3, [r3, #8]
 800412e:	697a      	ldr	r2, [r7, #20]
 8004130:	4313      	orrs	r3, r2
 8004132:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	4a1c      	ldr	r2, [pc, #112]	@ (80041a8 <TIM_OC1_SetConfig+0xc8>)
 8004138:	4293      	cmp	r3, r2
 800413a:	d10c      	bne.n	8004156 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800413c:	697b      	ldr	r3, [r7, #20]
 800413e:	f023 0308 	bic.w	r3, r3, #8
 8004142:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004144:	683b      	ldr	r3, [r7, #0]
 8004146:	68db      	ldr	r3, [r3, #12]
 8004148:	697a      	ldr	r2, [r7, #20]
 800414a:	4313      	orrs	r3, r2
 800414c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800414e:	697b      	ldr	r3, [r7, #20]
 8004150:	f023 0304 	bic.w	r3, r3, #4
 8004154:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	4a13      	ldr	r2, [pc, #76]	@ (80041a8 <TIM_OC1_SetConfig+0xc8>)
 800415a:	4293      	cmp	r3, r2
 800415c:	d111      	bne.n	8004182 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800415e:	693b      	ldr	r3, [r7, #16]
 8004160:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004164:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004166:	693b      	ldr	r3, [r7, #16]
 8004168:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 800416c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	695b      	ldr	r3, [r3, #20]
 8004172:	693a      	ldr	r2, [r7, #16]
 8004174:	4313      	orrs	r3, r2
 8004176:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004178:	683b      	ldr	r3, [r7, #0]
 800417a:	699b      	ldr	r3, [r3, #24]
 800417c:	693a      	ldr	r2, [r7, #16]
 800417e:	4313      	orrs	r3, r2
 8004180:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	693a      	ldr	r2, [r7, #16]
 8004186:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	68fa      	ldr	r2, [r7, #12]
 800418c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800418e:	683b      	ldr	r3, [r7, #0]
 8004190:	685a      	ldr	r2, [r3, #4]
 8004192:	687b      	ldr	r3, [r7, #4]
 8004194:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	697a      	ldr	r2, [r7, #20]
 800419a:	621a      	str	r2, [r3, #32]
}
 800419c:	bf00      	nop
 800419e:	371c      	adds	r7, #28
 80041a0:	46bd      	mov	sp, r7
 80041a2:	bc80      	pop	{r7}
 80041a4:	4770      	bx	lr
 80041a6:	bf00      	nop
 80041a8:	40012c00 	.word	0x40012c00

080041ac <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80041ac:	b480      	push	{r7}
 80041ae:	b087      	sub	sp, #28
 80041b0:	af00      	add	r7, sp, #0
 80041b2:	6078      	str	r0, [r7, #4]
 80041b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	6a1b      	ldr	r3, [r3, #32]
 80041ba:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	6a1b      	ldr	r3, [r3, #32]
 80041c0:	f023 0210 	bic.w	r2, r3, #16
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80041c8:	687b      	ldr	r3, [r7, #4]
 80041ca:	685b      	ldr	r3, [r3, #4]
 80041cc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80041ce:	687b      	ldr	r3, [r7, #4]
 80041d0:	699b      	ldr	r3, [r3, #24]
 80041d2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80041d4:	68fb      	ldr	r3, [r7, #12]
 80041d6:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80041da:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80041dc:	68fb      	ldr	r3, [r7, #12]
 80041de:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80041e2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80041e4:	683b      	ldr	r3, [r7, #0]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	021b      	lsls	r3, r3, #8
 80041ea:	68fa      	ldr	r2, [r7, #12]
 80041ec:	4313      	orrs	r3, r2
 80041ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80041f0:	697b      	ldr	r3, [r7, #20]
 80041f2:	f023 0320 	bic.w	r3, r3, #32
 80041f6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80041f8:	683b      	ldr	r3, [r7, #0]
 80041fa:	689b      	ldr	r3, [r3, #8]
 80041fc:	011b      	lsls	r3, r3, #4
 80041fe:	697a      	ldr	r2, [r7, #20]
 8004200:	4313      	orrs	r3, r2
 8004202:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	4a1d      	ldr	r2, [pc, #116]	@ (800427c <TIM_OC2_SetConfig+0xd0>)
 8004208:	4293      	cmp	r3, r2
 800420a:	d10d      	bne.n	8004228 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800420c:	697b      	ldr	r3, [r7, #20]
 800420e:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8004212:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004214:	683b      	ldr	r3, [r7, #0]
 8004216:	68db      	ldr	r3, [r3, #12]
 8004218:	011b      	lsls	r3, r3, #4
 800421a:	697a      	ldr	r2, [r7, #20]
 800421c:	4313      	orrs	r3, r2
 800421e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8004220:	697b      	ldr	r3, [r7, #20]
 8004222:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004226:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004228:	687b      	ldr	r3, [r7, #4]
 800422a:	4a14      	ldr	r2, [pc, #80]	@ (800427c <TIM_OC2_SetConfig+0xd0>)
 800422c:	4293      	cmp	r3, r2
 800422e:	d113      	bne.n	8004258 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004230:	693b      	ldr	r3, [r7, #16]
 8004232:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8004236:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004238:	693b      	ldr	r3, [r7, #16]
 800423a:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800423e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004240:	683b      	ldr	r3, [r7, #0]
 8004242:	695b      	ldr	r3, [r3, #20]
 8004244:	009b      	lsls	r3, r3, #2
 8004246:	693a      	ldr	r2, [r7, #16]
 8004248:	4313      	orrs	r3, r2
 800424a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800424c:	683b      	ldr	r3, [r7, #0]
 800424e:	699b      	ldr	r3, [r3, #24]
 8004250:	009b      	lsls	r3, r3, #2
 8004252:	693a      	ldr	r2, [r7, #16]
 8004254:	4313      	orrs	r3, r2
 8004256:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	693a      	ldr	r2, [r7, #16]
 800425c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	68fa      	ldr	r2, [r7, #12]
 8004262:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004264:	683b      	ldr	r3, [r7, #0]
 8004266:	685a      	ldr	r2, [r3, #4]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	697a      	ldr	r2, [r7, #20]
 8004270:	621a      	str	r2, [r3, #32]
}
 8004272:	bf00      	nop
 8004274:	371c      	adds	r7, #28
 8004276:	46bd      	mov	sp, r7
 8004278:	bc80      	pop	{r7}
 800427a:	4770      	bx	lr
 800427c:	40012c00 	.word	0x40012c00

08004280 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004280:	b480      	push	{r7}
 8004282:	b087      	sub	sp, #28
 8004284:	af00      	add	r7, sp, #0
 8004286:	6078      	str	r0, [r7, #4]
 8004288:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	6a1b      	ldr	r3, [r3, #32]
 800428e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6a1b      	ldr	r3, [r3, #32]
 8004294:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800429c:	687b      	ldr	r3, [r7, #4]
 800429e:	685b      	ldr	r3, [r3, #4]
 80042a0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	69db      	ldr	r3, [r3, #28]
 80042a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80042ae:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80042b0:	68fb      	ldr	r3, [r7, #12]
 80042b2:	f023 0303 	bic.w	r3, r3, #3
 80042b6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80042b8:	683b      	ldr	r3, [r7, #0]
 80042ba:	681b      	ldr	r3, [r3, #0]
 80042bc:	68fa      	ldr	r2, [r7, #12]
 80042be:	4313      	orrs	r3, r2
 80042c0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80042c2:	697b      	ldr	r3, [r7, #20]
 80042c4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80042c8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80042ca:	683b      	ldr	r3, [r7, #0]
 80042cc:	689b      	ldr	r3, [r3, #8]
 80042ce:	021b      	lsls	r3, r3, #8
 80042d0:	697a      	ldr	r2, [r7, #20]
 80042d2:	4313      	orrs	r3, r2
 80042d4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	4a1d      	ldr	r2, [pc, #116]	@ (8004350 <TIM_OC3_SetConfig+0xd0>)
 80042da:	4293      	cmp	r3, r2
 80042dc:	d10d      	bne.n	80042fa <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80042de:	697b      	ldr	r3, [r7, #20]
 80042e0:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80042e4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80042e6:	683b      	ldr	r3, [r7, #0]
 80042e8:	68db      	ldr	r3, [r3, #12]
 80042ea:	021b      	lsls	r3, r3, #8
 80042ec:	697a      	ldr	r2, [r7, #20]
 80042ee:	4313      	orrs	r3, r2
 80042f0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80042f2:	697b      	ldr	r3, [r7, #20]
 80042f4:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80042f8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	4a14      	ldr	r2, [pc, #80]	@ (8004350 <TIM_OC3_SetConfig+0xd0>)
 80042fe:	4293      	cmp	r3, r2
 8004300:	d113      	bne.n	800432a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004302:	693b      	ldr	r3, [r7, #16]
 8004304:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8004308:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800430a:	693b      	ldr	r3, [r7, #16]
 800430c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8004310:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004312:	683b      	ldr	r3, [r7, #0]
 8004314:	695b      	ldr	r3, [r3, #20]
 8004316:	011b      	lsls	r3, r3, #4
 8004318:	693a      	ldr	r2, [r7, #16]
 800431a:	4313      	orrs	r3, r2
 800431c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800431e:	683b      	ldr	r3, [r7, #0]
 8004320:	699b      	ldr	r3, [r3, #24]
 8004322:	011b      	lsls	r3, r3, #4
 8004324:	693a      	ldr	r2, [r7, #16]
 8004326:	4313      	orrs	r3, r2
 8004328:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	693a      	ldr	r2, [r7, #16]
 800432e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	68fa      	ldr	r2, [r7, #12]
 8004334:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	685a      	ldr	r2, [r3, #4]
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	697a      	ldr	r2, [r7, #20]
 8004342:	621a      	str	r2, [r3, #32]
}
 8004344:	bf00      	nop
 8004346:	371c      	adds	r7, #28
 8004348:	46bd      	mov	sp, r7
 800434a:	bc80      	pop	{r7}
 800434c:	4770      	bx	lr
 800434e:	bf00      	nop
 8004350:	40012c00 	.word	0x40012c00

08004354 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8004354:	b480      	push	{r7}
 8004356:	b087      	sub	sp, #28
 8004358:	af00      	add	r7, sp, #0
 800435a:	6078      	str	r0, [r7, #4]
 800435c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	6a1b      	ldr	r3, [r3, #32]
 8004362:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8004364:	687b      	ldr	r3, [r7, #4]
 8004366:	6a1b      	ldr	r3, [r3, #32]
 8004368:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800436c:	687b      	ldr	r3, [r7, #4]
 800436e:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	685b      	ldr	r3, [r3, #4]
 8004374:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	69db      	ldr	r3, [r3, #28]
 800437a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8004382:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800438a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800438c:	683b      	ldr	r3, [r7, #0]
 800438e:	681b      	ldr	r3, [r3, #0]
 8004390:	021b      	lsls	r3, r3, #8
 8004392:	68fa      	ldr	r2, [r7, #12]
 8004394:	4313      	orrs	r3, r2
 8004396:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8004398:	693b      	ldr	r3, [r7, #16]
 800439a:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800439e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80043a0:	683b      	ldr	r3, [r7, #0]
 80043a2:	689b      	ldr	r3, [r3, #8]
 80043a4:	031b      	lsls	r3, r3, #12
 80043a6:	693a      	ldr	r2, [r7, #16]
 80043a8:	4313      	orrs	r3, r2
 80043aa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80043ac:	687b      	ldr	r3, [r7, #4]
 80043ae:	4a0f      	ldr	r2, [pc, #60]	@ (80043ec <TIM_OC4_SetConfig+0x98>)
 80043b0:	4293      	cmp	r3, r2
 80043b2:	d109      	bne.n	80043c8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80043b4:	697b      	ldr	r3, [r7, #20]
 80043b6:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80043ba:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80043bc:	683b      	ldr	r3, [r7, #0]
 80043be:	695b      	ldr	r3, [r3, #20]
 80043c0:	019b      	lsls	r3, r3, #6
 80043c2:	697a      	ldr	r2, [r7, #20]
 80043c4:	4313      	orrs	r3, r2
 80043c6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80043c8:	687b      	ldr	r3, [r7, #4]
 80043ca:	697a      	ldr	r2, [r7, #20]
 80043cc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	68fa      	ldr	r2, [r7, #12]
 80043d2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80043d4:	683b      	ldr	r3, [r7, #0]
 80043d6:	685a      	ldr	r2, [r3, #4]
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	693a      	ldr	r2, [r7, #16]
 80043e0:	621a      	str	r2, [r3, #32]
}
 80043e2:	bf00      	nop
 80043e4:	371c      	adds	r7, #28
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bc80      	pop	{r7}
 80043ea:	4770      	bx	lr
 80043ec:	40012c00 	.word	0x40012c00

080043f0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80043f0:	b480      	push	{r7}
 80043f2:	b087      	sub	sp, #28
 80043f4:	af00      	add	r7, sp, #0
 80043f6:	60f8      	str	r0, [r7, #12]
 80043f8:	60b9      	str	r1, [r7, #8]
 80043fa:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80043fc:	68fb      	ldr	r3, [r7, #12]
 80043fe:	6a1b      	ldr	r3, [r3, #32]
 8004400:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004402:	68fb      	ldr	r3, [r7, #12]
 8004404:	6a1b      	ldr	r3, [r3, #32]
 8004406:	f023 0201 	bic.w	r2, r3, #1
 800440a:	68fb      	ldr	r3, [r7, #12]
 800440c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800440e:	68fb      	ldr	r3, [r7, #12]
 8004410:	699b      	ldr	r3, [r3, #24]
 8004412:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004414:	693b      	ldr	r3, [r7, #16]
 8004416:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 800441a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	011b      	lsls	r3, r3, #4
 8004420:	693a      	ldr	r2, [r7, #16]
 8004422:	4313      	orrs	r3, r2
 8004424:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004426:	697b      	ldr	r3, [r7, #20]
 8004428:	f023 030a 	bic.w	r3, r3, #10
 800442c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800442e:	697a      	ldr	r2, [r7, #20]
 8004430:	68bb      	ldr	r3, [r7, #8]
 8004432:	4313      	orrs	r3, r2
 8004434:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	693a      	ldr	r2, [r7, #16]
 800443a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	697a      	ldr	r2, [r7, #20]
 8004440:	621a      	str	r2, [r3, #32]
}
 8004442:	bf00      	nop
 8004444:	371c      	adds	r7, #28
 8004446:	46bd      	mov	sp, r7
 8004448:	bc80      	pop	{r7}
 800444a:	4770      	bx	lr

0800444c <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800444c:	b480      	push	{r7}
 800444e:	b087      	sub	sp, #28
 8004450:	af00      	add	r7, sp, #0
 8004452:	60f8      	str	r0, [r7, #12]
 8004454:	60b9      	str	r1, [r7, #8]
 8004456:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8004458:	68fb      	ldr	r3, [r7, #12]
 800445a:	6a1b      	ldr	r3, [r3, #32]
 800445c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800445e:	68fb      	ldr	r3, [r7, #12]
 8004460:	6a1b      	ldr	r3, [r3, #32]
 8004462:	f023 0210 	bic.w	r2, r3, #16
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	699b      	ldr	r3, [r3, #24]
 800446e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004470:	693b      	ldr	r3, [r7, #16]
 8004472:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8004476:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	031b      	lsls	r3, r3, #12
 800447c:	693a      	ldr	r2, [r7, #16]
 800447e:	4313      	orrs	r3, r2
 8004480:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004482:	697b      	ldr	r3, [r7, #20]
 8004484:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8004488:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800448a:	68bb      	ldr	r3, [r7, #8]
 800448c:	011b      	lsls	r3, r3, #4
 800448e:	697a      	ldr	r2, [r7, #20]
 8004490:	4313      	orrs	r3, r2
 8004492:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	693a      	ldr	r2, [r7, #16]
 8004498:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800449a:	68fb      	ldr	r3, [r7, #12]
 800449c:	697a      	ldr	r2, [r7, #20]
 800449e:	621a      	str	r2, [r3, #32]
}
 80044a0:	bf00      	nop
 80044a2:	371c      	adds	r7, #28
 80044a4:	46bd      	mov	sp, r7
 80044a6:	bc80      	pop	{r7}
 80044a8:	4770      	bx	lr

080044aa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80044aa:	b480      	push	{r7}
 80044ac:	b085      	sub	sp, #20
 80044ae:	af00      	add	r7, sp, #0
 80044b0:	6078      	str	r0, [r7, #4]
 80044b2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80044b4:	687b      	ldr	r3, [r7, #4]
 80044b6:	689b      	ldr	r3, [r3, #8]
 80044b8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80044c0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80044c2:	683a      	ldr	r2, [r7, #0]
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4313      	orrs	r3, r2
 80044c8:	f043 0307 	orr.w	r3, r3, #7
 80044cc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	68fa      	ldr	r2, [r7, #12]
 80044d2:	609a      	str	r2, [r3, #8]
}
 80044d4:	bf00      	nop
 80044d6:	3714      	adds	r7, #20
 80044d8:	46bd      	mov	sp, r7
 80044da:	bc80      	pop	{r7}
 80044dc:	4770      	bx	lr

080044de <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80044de:	b480      	push	{r7}
 80044e0:	b087      	sub	sp, #28
 80044e2:	af00      	add	r7, sp, #0
 80044e4:	60f8      	str	r0, [r7, #12]
 80044e6:	60b9      	str	r1, [r7, #8]
 80044e8:	607a      	str	r2, [r7, #4]
 80044ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	689b      	ldr	r3, [r3, #8]
 80044f0:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80044f2:	697b      	ldr	r3, [r7, #20]
 80044f4:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80044f8:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80044fa:	683b      	ldr	r3, [r7, #0]
 80044fc:	021a      	lsls	r2, r3, #8
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	431a      	orrs	r2, r3
 8004502:	68bb      	ldr	r3, [r7, #8]
 8004504:	4313      	orrs	r3, r2
 8004506:	697a      	ldr	r2, [r7, #20]
 8004508:	4313      	orrs	r3, r2
 800450a:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	697a      	ldr	r2, [r7, #20]
 8004510:	609a      	str	r2, [r3, #8]
}
 8004512:	bf00      	nop
 8004514:	371c      	adds	r7, #28
 8004516:	46bd      	mov	sp, r7
 8004518:	bc80      	pop	{r7}
 800451a:	4770      	bx	lr

0800451c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800451c:	b480      	push	{r7}
 800451e:	b087      	sub	sp, #28
 8004520:	af00      	add	r7, sp, #0
 8004522:	60f8      	str	r0, [r7, #12]
 8004524:	60b9      	str	r1, [r7, #8]
 8004526:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004528:	68bb      	ldr	r3, [r7, #8]
 800452a:	f003 031f 	and.w	r3, r3, #31
 800452e:	2201      	movs	r2, #1
 8004530:	fa02 f303 	lsl.w	r3, r2, r3
 8004534:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a1a      	ldr	r2, [r3, #32]
 800453a:	697b      	ldr	r3, [r7, #20]
 800453c:	43db      	mvns	r3, r3
 800453e:	401a      	ands	r2, r3
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004544:	68fb      	ldr	r3, [r7, #12]
 8004546:	6a1a      	ldr	r2, [r3, #32]
 8004548:	68bb      	ldr	r3, [r7, #8]
 800454a:	f003 031f 	and.w	r3, r3, #31
 800454e:	6879      	ldr	r1, [r7, #4]
 8004550:	fa01 f303 	lsl.w	r3, r1, r3
 8004554:	431a      	orrs	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	621a      	str	r2, [r3, #32]
}
 800455a:	bf00      	nop
 800455c:	371c      	adds	r7, #28
 800455e:	46bd      	mov	sp, r7
 8004560:	bc80      	pop	{r7}
 8004562:	4770      	bx	lr

08004564 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004564:	b480      	push	{r7}
 8004566:	b085      	sub	sp, #20
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004574:	2b01      	cmp	r3, #1
 8004576:	d101      	bne.n	800457c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004578:	2302      	movs	r3, #2
 800457a:	e046      	b.n	800460a <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 800457c:	687b      	ldr	r3, [r7, #4]
 800457e:	2201      	movs	r2, #1
 8004580:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	2202      	movs	r2, #2
 8004588:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	681b      	ldr	r3, [r3, #0]
 8004590:	685b      	ldr	r3, [r3, #4]
 8004592:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	681b      	ldr	r3, [r3, #0]
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800459c:	68fb      	ldr	r3, [r7, #12]
 800459e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80045a2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80045a4:	683b      	ldr	r3, [r7, #0]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	68fa      	ldr	r2, [r7, #12]
 80045aa:	4313      	orrs	r3, r2
 80045ac:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	68fa      	ldr	r2, [r7, #12]
 80045b4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	681b      	ldr	r3, [r3, #0]
 80045ba:	4a16      	ldr	r2, [pc, #88]	@ (8004614 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80045bc:	4293      	cmp	r3, r2
 80045be:	d00e      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80045c8:	d009      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	4a12      	ldr	r2, [pc, #72]	@ (8004618 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80045d0:	4293      	cmp	r3, r2
 80045d2:	d004      	beq.n	80045de <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80045d4:	687b      	ldr	r3, [r7, #4]
 80045d6:	681b      	ldr	r3, [r3, #0]
 80045d8:	4a10      	ldr	r2, [pc, #64]	@ (800461c <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80045da:	4293      	cmp	r3, r2
 80045dc:	d10c      	bne.n	80045f8 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80045de:	68bb      	ldr	r3, [r7, #8]
 80045e0:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80045e4:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80045e6:	683b      	ldr	r3, [r7, #0]
 80045e8:	685b      	ldr	r3, [r3, #4]
 80045ea:	68ba      	ldr	r2, [r7, #8]
 80045ec:	4313      	orrs	r3, r2
 80045ee:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	68ba      	ldr	r2, [r7, #8]
 80045f6:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	2201      	movs	r2, #1
 80045fc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	2200      	movs	r2, #0
 8004604:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8004608:	2300      	movs	r3, #0
}
 800460a:	4618      	mov	r0, r3
 800460c:	3714      	adds	r7, #20
 800460e:	46bd      	mov	sp, r7
 8004610:	bc80      	pop	{r7}
 8004612:	4770      	bx	lr
 8004614:	40012c00 	.word	0x40012c00
 8004618:	40000400 	.word	0x40000400
 800461c:	40000800 	.word	0x40000800

08004620 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004620:	b480      	push	{r7}
 8004622:	b083      	sub	sp, #12
 8004624:	af00      	add	r7, sp, #0
 8004626:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004628:	bf00      	nop
 800462a:	370c      	adds	r7, #12
 800462c:	46bd      	mov	sp, r7
 800462e:	bc80      	pop	{r7}
 8004630:	4770      	bx	lr

08004632 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004632:	b480      	push	{r7}
 8004634:	b083      	sub	sp, #12
 8004636:	af00      	add	r7, sp, #0
 8004638:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800463a:	bf00      	nop
 800463c:	370c      	adds	r7, #12
 800463e:	46bd      	mov	sp, r7
 8004640:	bc80      	pop	{r7}
 8004642:	4770      	bx	lr

08004644 <rand>:
 8004644:	4b16      	ldr	r3, [pc, #88]	@ (80046a0 <rand+0x5c>)
 8004646:	b510      	push	{r4, lr}
 8004648:	681c      	ldr	r4, [r3, #0]
 800464a:	6b23      	ldr	r3, [r4, #48]	@ 0x30
 800464c:	b9b3      	cbnz	r3, 800467c <rand+0x38>
 800464e:	2018      	movs	r0, #24
 8004650:	f000 fa1e 	bl	8004a90 <malloc>
 8004654:	4602      	mov	r2, r0
 8004656:	6320      	str	r0, [r4, #48]	@ 0x30
 8004658:	b920      	cbnz	r0, 8004664 <rand+0x20>
 800465a:	2152      	movs	r1, #82	@ 0x52
 800465c:	4b11      	ldr	r3, [pc, #68]	@ (80046a4 <rand+0x60>)
 800465e:	4812      	ldr	r0, [pc, #72]	@ (80046a8 <rand+0x64>)
 8004660:	f000 f9b0 	bl	80049c4 <__assert_func>
 8004664:	4911      	ldr	r1, [pc, #68]	@ (80046ac <rand+0x68>)
 8004666:	4b12      	ldr	r3, [pc, #72]	@ (80046b0 <rand+0x6c>)
 8004668:	e9c0 1300 	strd	r1, r3, [r0]
 800466c:	4b11      	ldr	r3, [pc, #68]	@ (80046b4 <rand+0x70>)
 800466e:	2100      	movs	r1, #0
 8004670:	6083      	str	r3, [r0, #8]
 8004672:	230b      	movs	r3, #11
 8004674:	8183      	strh	r3, [r0, #12]
 8004676:	2001      	movs	r0, #1
 8004678:	e9c2 0104 	strd	r0, r1, [r2, #16]
 800467c:	6b21      	ldr	r1, [r4, #48]	@ 0x30
 800467e:	480e      	ldr	r0, [pc, #56]	@ (80046b8 <rand+0x74>)
 8004680:	690b      	ldr	r3, [r1, #16]
 8004682:	694c      	ldr	r4, [r1, #20]
 8004684:	4358      	muls	r0, r3
 8004686:	4a0d      	ldr	r2, [pc, #52]	@ (80046bc <rand+0x78>)
 8004688:	fb02 0004 	mla	r0, r2, r4, r0
 800468c:	fba3 3202 	umull	r3, r2, r3, r2
 8004690:	3301      	adds	r3, #1
 8004692:	eb40 0002 	adc.w	r0, r0, r2
 8004696:	e9c1 3004 	strd	r3, r0, [r1, #16]
 800469a:	f020 4000 	bic.w	r0, r0, #2147483648	@ 0x80000000
 800469e:	bd10      	pop	{r4, pc}
 80046a0:	20000040 	.word	0x20000040
 80046a4:	0800569e 	.word	0x0800569e
 80046a8:	080056b5 	.word	0x080056b5
 80046ac:	abcd330e 	.word	0xabcd330e
 80046b0:	e66d1234 	.word	0xe66d1234
 80046b4:	0005deec 	.word	0x0005deec
 80046b8:	5851f42d 	.word	0x5851f42d
 80046bc:	4c957f2d 	.word	0x4c957f2d

080046c0 <std>:
 80046c0:	2300      	movs	r3, #0
 80046c2:	b510      	push	{r4, lr}
 80046c4:	4604      	mov	r4, r0
 80046c6:	e9c0 3300 	strd	r3, r3, [r0]
 80046ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80046ce:	6083      	str	r3, [r0, #8]
 80046d0:	8181      	strh	r1, [r0, #12]
 80046d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80046d4:	81c2      	strh	r2, [r0, #14]
 80046d6:	6183      	str	r3, [r0, #24]
 80046d8:	4619      	mov	r1, r3
 80046da:	2208      	movs	r2, #8
 80046dc:	305c      	adds	r0, #92	@ 0x5c
 80046de:	f000 f8f4 	bl	80048ca <memset>
 80046e2:	4b0d      	ldr	r3, [pc, #52]	@ (8004718 <std+0x58>)
 80046e4:	6224      	str	r4, [r4, #32]
 80046e6:	6263      	str	r3, [r4, #36]	@ 0x24
 80046e8:	4b0c      	ldr	r3, [pc, #48]	@ (800471c <std+0x5c>)
 80046ea:	62a3      	str	r3, [r4, #40]	@ 0x28
 80046ec:	4b0c      	ldr	r3, [pc, #48]	@ (8004720 <std+0x60>)
 80046ee:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80046f0:	4b0c      	ldr	r3, [pc, #48]	@ (8004724 <std+0x64>)
 80046f2:	6323      	str	r3, [r4, #48]	@ 0x30
 80046f4:	4b0c      	ldr	r3, [pc, #48]	@ (8004728 <std+0x68>)
 80046f6:	429c      	cmp	r4, r3
 80046f8:	d006      	beq.n	8004708 <std+0x48>
 80046fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80046fe:	4294      	cmp	r4, r2
 8004700:	d002      	beq.n	8004708 <std+0x48>
 8004702:	33d0      	adds	r3, #208	@ 0xd0
 8004704:	429c      	cmp	r4, r3
 8004706:	d105      	bne.n	8004714 <std+0x54>
 8004708:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800470c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004710:	f000 b954 	b.w	80049bc <__retarget_lock_init_recursive>
 8004714:	bd10      	pop	{r4, pc}
 8004716:	bf00      	nop
 8004718:	08004845 	.word	0x08004845
 800471c:	08004867 	.word	0x08004867
 8004720:	0800489f 	.word	0x0800489f
 8004724:	080048c3 	.word	0x080048c3
 8004728:	200012e0 	.word	0x200012e0

0800472c <stdio_exit_handler>:
 800472c:	4a02      	ldr	r2, [pc, #8]	@ (8004738 <stdio_exit_handler+0xc>)
 800472e:	4903      	ldr	r1, [pc, #12]	@ (800473c <stdio_exit_handler+0x10>)
 8004730:	4803      	ldr	r0, [pc, #12]	@ (8004740 <stdio_exit_handler+0x14>)
 8004732:	f000 b869 	b.w	8004808 <_fwalk_sglue>
 8004736:	bf00      	nop
 8004738:	20000034 	.word	0x20000034
 800473c:	08004cfd 	.word	0x08004cfd
 8004740:	20000044 	.word	0x20000044

08004744 <cleanup_stdio>:
 8004744:	6841      	ldr	r1, [r0, #4]
 8004746:	4b0c      	ldr	r3, [pc, #48]	@ (8004778 <cleanup_stdio+0x34>)
 8004748:	b510      	push	{r4, lr}
 800474a:	4299      	cmp	r1, r3
 800474c:	4604      	mov	r4, r0
 800474e:	d001      	beq.n	8004754 <cleanup_stdio+0x10>
 8004750:	f000 fad4 	bl	8004cfc <_fflush_r>
 8004754:	68a1      	ldr	r1, [r4, #8]
 8004756:	4b09      	ldr	r3, [pc, #36]	@ (800477c <cleanup_stdio+0x38>)
 8004758:	4299      	cmp	r1, r3
 800475a:	d002      	beq.n	8004762 <cleanup_stdio+0x1e>
 800475c:	4620      	mov	r0, r4
 800475e:	f000 facd 	bl	8004cfc <_fflush_r>
 8004762:	68e1      	ldr	r1, [r4, #12]
 8004764:	4b06      	ldr	r3, [pc, #24]	@ (8004780 <cleanup_stdio+0x3c>)
 8004766:	4299      	cmp	r1, r3
 8004768:	d004      	beq.n	8004774 <cleanup_stdio+0x30>
 800476a:	4620      	mov	r0, r4
 800476c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004770:	f000 bac4 	b.w	8004cfc <_fflush_r>
 8004774:	bd10      	pop	{r4, pc}
 8004776:	bf00      	nop
 8004778:	200012e0 	.word	0x200012e0
 800477c:	20001348 	.word	0x20001348
 8004780:	200013b0 	.word	0x200013b0

08004784 <global_stdio_init.part.0>:
 8004784:	b510      	push	{r4, lr}
 8004786:	4b0b      	ldr	r3, [pc, #44]	@ (80047b4 <global_stdio_init.part.0+0x30>)
 8004788:	4c0b      	ldr	r4, [pc, #44]	@ (80047b8 <global_stdio_init.part.0+0x34>)
 800478a:	4a0c      	ldr	r2, [pc, #48]	@ (80047bc <global_stdio_init.part.0+0x38>)
 800478c:	4620      	mov	r0, r4
 800478e:	601a      	str	r2, [r3, #0]
 8004790:	2104      	movs	r1, #4
 8004792:	2200      	movs	r2, #0
 8004794:	f7ff ff94 	bl	80046c0 <std>
 8004798:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800479c:	2201      	movs	r2, #1
 800479e:	2109      	movs	r1, #9
 80047a0:	f7ff ff8e 	bl	80046c0 <std>
 80047a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80047a8:	2202      	movs	r2, #2
 80047aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047ae:	2112      	movs	r1, #18
 80047b0:	f7ff bf86 	b.w	80046c0 <std>
 80047b4:	20001418 	.word	0x20001418
 80047b8:	200012e0 	.word	0x200012e0
 80047bc:	0800472d 	.word	0x0800472d

080047c0 <__sfp_lock_acquire>:
 80047c0:	4801      	ldr	r0, [pc, #4]	@ (80047c8 <__sfp_lock_acquire+0x8>)
 80047c2:	f000 b8fc 	b.w	80049be <__retarget_lock_acquire_recursive>
 80047c6:	bf00      	nop
 80047c8:	20001421 	.word	0x20001421

080047cc <__sfp_lock_release>:
 80047cc:	4801      	ldr	r0, [pc, #4]	@ (80047d4 <__sfp_lock_release+0x8>)
 80047ce:	f000 b8f7 	b.w	80049c0 <__retarget_lock_release_recursive>
 80047d2:	bf00      	nop
 80047d4:	20001421 	.word	0x20001421

080047d8 <__sinit>:
 80047d8:	b510      	push	{r4, lr}
 80047da:	4604      	mov	r4, r0
 80047dc:	f7ff fff0 	bl	80047c0 <__sfp_lock_acquire>
 80047e0:	6a23      	ldr	r3, [r4, #32]
 80047e2:	b11b      	cbz	r3, 80047ec <__sinit+0x14>
 80047e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80047e8:	f7ff bff0 	b.w	80047cc <__sfp_lock_release>
 80047ec:	4b04      	ldr	r3, [pc, #16]	@ (8004800 <__sinit+0x28>)
 80047ee:	6223      	str	r3, [r4, #32]
 80047f0:	4b04      	ldr	r3, [pc, #16]	@ (8004804 <__sinit+0x2c>)
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d1f5      	bne.n	80047e4 <__sinit+0xc>
 80047f8:	f7ff ffc4 	bl	8004784 <global_stdio_init.part.0>
 80047fc:	e7f2      	b.n	80047e4 <__sinit+0xc>
 80047fe:	bf00      	nop
 8004800:	08004745 	.word	0x08004745
 8004804:	20001418 	.word	0x20001418

08004808 <_fwalk_sglue>:
 8004808:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800480c:	4607      	mov	r7, r0
 800480e:	4688      	mov	r8, r1
 8004810:	4614      	mov	r4, r2
 8004812:	2600      	movs	r6, #0
 8004814:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004818:	f1b9 0901 	subs.w	r9, r9, #1
 800481c:	d505      	bpl.n	800482a <_fwalk_sglue+0x22>
 800481e:	6824      	ldr	r4, [r4, #0]
 8004820:	2c00      	cmp	r4, #0
 8004822:	d1f7      	bne.n	8004814 <_fwalk_sglue+0xc>
 8004824:	4630      	mov	r0, r6
 8004826:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800482a:	89ab      	ldrh	r3, [r5, #12]
 800482c:	2b01      	cmp	r3, #1
 800482e:	d907      	bls.n	8004840 <_fwalk_sglue+0x38>
 8004830:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004834:	3301      	adds	r3, #1
 8004836:	d003      	beq.n	8004840 <_fwalk_sglue+0x38>
 8004838:	4629      	mov	r1, r5
 800483a:	4638      	mov	r0, r7
 800483c:	47c0      	blx	r8
 800483e:	4306      	orrs	r6, r0
 8004840:	3568      	adds	r5, #104	@ 0x68
 8004842:	e7e9      	b.n	8004818 <_fwalk_sglue+0x10>

08004844 <__sread>:
 8004844:	b510      	push	{r4, lr}
 8004846:	460c      	mov	r4, r1
 8004848:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800484c:	f000 f868 	bl	8004920 <_read_r>
 8004850:	2800      	cmp	r0, #0
 8004852:	bfab      	itete	ge
 8004854:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8004856:	89a3      	ldrhlt	r3, [r4, #12]
 8004858:	181b      	addge	r3, r3, r0
 800485a:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 800485e:	bfac      	ite	ge
 8004860:	6563      	strge	r3, [r4, #84]	@ 0x54
 8004862:	81a3      	strhlt	r3, [r4, #12]
 8004864:	bd10      	pop	{r4, pc}

08004866 <__swrite>:
 8004866:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800486a:	461f      	mov	r7, r3
 800486c:	898b      	ldrh	r3, [r1, #12]
 800486e:	4605      	mov	r5, r0
 8004870:	05db      	lsls	r3, r3, #23
 8004872:	460c      	mov	r4, r1
 8004874:	4616      	mov	r6, r2
 8004876:	d505      	bpl.n	8004884 <__swrite+0x1e>
 8004878:	2302      	movs	r3, #2
 800487a:	2200      	movs	r2, #0
 800487c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004880:	f000 f83c 	bl	80048fc <_lseek_r>
 8004884:	89a3      	ldrh	r3, [r4, #12]
 8004886:	4632      	mov	r2, r6
 8004888:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 800488c:	81a3      	strh	r3, [r4, #12]
 800488e:	4628      	mov	r0, r5
 8004890:	463b      	mov	r3, r7
 8004892:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004896:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800489a:	f000 b853 	b.w	8004944 <_write_r>

0800489e <__sseek>:
 800489e:	b510      	push	{r4, lr}
 80048a0:	460c      	mov	r4, r1
 80048a2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048a6:	f000 f829 	bl	80048fc <_lseek_r>
 80048aa:	1c43      	adds	r3, r0, #1
 80048ac:	89a3      	ldrh	r3, [r4, #12]
 80048ae:	bf15      	itete	ne
 80048b0:	6560      	strne	r0, [r4, #84]	@ 0x54
 80048b2:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 80048b6:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 80048ba:	81a3      	strheq	r3, [r4, #12]
 80048bc:	bf18      	it	ne
 80048be:	81a3      	strhne	r3, [r4, #12]
 80048c0:	bd10      	pop	{r4, pc}

080048c2 <__sclose>:
 80048c2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80048c6:	f000 b809 	b.w	80048dc <_close_r>

080048ca <memset>:
 80048ca:	4603      	mov	r3, r0
 80048cc:	4402      	add	r2, r0
 80048ce:	4293      	cmp	r3, r2
 80048d0:	d100      	bne.n	80048d4 <memset+0xa>
 80048d2:	4770      	bx	lr
 80048d4:	f803 1b01 	strb.w	r1, [r3], #1
 80048d8:	e7f9      	b.n	80048ce <memset+0x4>
	...

080048dc <_close_r>:
 80048dc:	b538      	push	{r3, r4, r5, lr}
 80048de:	2300      	movs	r3, #0
 80048e0:	4d05      	ldr	r5, [pc, #20]	@ (80048f8 <_close_r+0x1c>)
 80048e2:	4604      	mov	r4, r0
 80048e4:	4608      	mov	r0, r1
 80048e6:	602b      	str	r3, [r5, #0]
 80048e8:	f7fd ff25 	bl	8002736 <_close>
 80048ec:	1c43      	adds	r3, r0, #1
 80048ee:	d102      	bne.n	80048f6 <_close_r+0x1a>
 80048f0:	682b      	ldr	r3, [r5, #0]
 80048f2:	b103      	cbz	r3, 80048f6 <_close_r+0x1a>
 80048f4:	6023      	str	r3, [r4, #0]
 80048f6:	bd38      	pop	{r3, r4, r5, pc}
 80048f8:	2000141c 	.word	0x2000141c

080048fc <_lseek_r>:
 80048fc:	b538      	push	{r3, r4, r5, lr}
 80048fe:	4604      	mov	r4, r0
 8004900:	4608      	mov	r0, r1
 8004902:	4611      	mov	r1, r2
 8004904:	2200      	movs	r2, #0
 8004906:	4d05      	ldr	r5, [pc, #20]	@ (800491c <_lseek_r+0x20>)
 8004908:	602a      	str	r2, [r5, #0]
 800490a:	461a      	mov	r2, r3
 800490c:	f7fd ff37 	bl	800277e <_lseek>
 8004910:	1c43      	adds	r3, r0, #1
 8004912:	d102      	bne.n	800491a <_lseek_r+0x1e>
 8004914:	682b      	ldr	r3, [r5, #0]
 8004916:	b103      	cbz	r3, 800491a <_lseek_r+0x1e>
 8004918:	6023      	str	r3, [r4, #0]
 800491a:	bd38      	pop	{r3, r4, r5, pc}
 800491c:	2000141c 	.word	0x2000141c

08004920 <_read_r>:
 8004920:	b538      	push	{r3, r4, r5, lr}
 8004922:	4604      	mov	r4, r0
 8004924:	4608      	mov	r0, r1
 8004926:	4611      	mov	r1, r2
 8004928:	2200      	movs	r2, #0
 800492a:	4d05      	ldr	r5, [pc, #20]	@ (8004940 <_read_r+0x20>)
 800492c:	602a      	str	r2, [r5, #0]
 800492e:	461a      	mov	r2, r3
 8004930:	f7fd fec8 	bl	80026c4 <_read>
 8004934:	1c43      	adds	r3, r0, #1
 8004936:	d102      	bne.n	800493e <_read_r+0x1e>
 8004938:	682b      	ldr	r3, [r5, #0]
 800493a:	b103      	cbz	r3, 800493e <_read_r+0x1e>
 800493c:	6023      	str	r3, [r4, #0]
 800493e:	bd38      	pop	{r3, r4, r5, pc}
 8004940:	2000141c 	.word	0x2000141c

08004944 <_write_r>:
 8004944:	b538      	push	{r3, r4, r5, lr}
 8004946:	4604      	mov	r4, r0
 8004948:	4608      	mov	r0, r1
 800494a:	4611      	mov	r1, r2
 800494c:	2200      	movs	r2, #0
 800494e:	4d05      	ldr	r5, [pc, #20]	@ (8004964 <_write_r+0x20>)
 8004950:	602a      	str	r2, [r5, #0]
 8004952:	461a      	mov	r2, r3
 8004954:	f7fd fed3 	bl	80026fe <_write>
 8004958:	1c43      	adds	r3, r0, #1
 800495a:	d102      	bne.n	8004962 <_write_r+0x1e>
 800495c:	682b      	ldr	r3, [r5, #0]
 800495e:	b103      	cbz	r3, 8004962 <_write_r+0x1e>
 8004960:	6023      	str	r3, [r4, #0]
 8004962:	bd38      	pop	{r3, r4, r5, pc}
 8004964:	2000141c 	.word	0x2000141c

08004968 <__errno>:
 8004968:	4b01      	ldr	r3, [pc, #4]	@ (8004970 <__errno+0x8>)
 800496a:	6818      	ldr	r0, [r3, #0]
 800496c:	4770      	bx	lr
 800496e:	bf00      	nop
 8004970:	20000040 	.word	0x20000040

08004974 <__libc_init_array>:
 8004974:	b570      	push	{r4, r5, r6, lr}
 8004976:	2600      	movs	r6, #0
 8004978:	4d0c      	ldr	r5, [pc, #48]	@ (80049ac <__libc_init_array+0x38>)
 800497a:	4c0d      	ldr	r4, [pc, #52]	@ (80049b0 <__libc_init_array+0x3c>)
 800497c:	1b64      	subs	r4, r4, r5
 800497e:	10a4      	asrs	r4, r4, #2
 8004980:	42a6      	cmp	r6, r4
 8004982:	d109      	bne.n	8004998 <__libc_init_array+0x24>
 8004984:	f000 fe46 	bl	8005614 <_init>
 8004988:	2600      	movs	r6, #0
 800498a:	4d0a      	ldr	r5, [pc, #40]	@ (80049b4 <__libc_init_array+0x40>)
 800498c:	4c0a      	ldr	r4, [pc, #40]	@ (80049b8 <__libc_init_array+0x44>)
 800498e:	1b64      	subs	r4, r4, r5
 8004990:	10a4      	asrs	r4, r4, #2
 8004992:	42a6      	cmp	r6, r4
 8004994:	d105      	bne.n	80049a2 <__libc_init_array+0x2e>
 8004996:	bd70      	pop	{r4, r5, r6, pc}
 8004998:	f855 3b04 	ldr.w	r3, [r5], #4
 800499c:	4798      	blx	r3
 800499e:	3601      	adds	r6, #1
 80049a0:	e7ee      	b.n	8004980 <__libc_init_array+0xc>
 80049a2:	f855 3b04 	ldr.w	r3, [r5], #4
 80049a6:	4798      	blx	r3
 80049a8:	3601      	adds	r6, #1
 80049aa:	e7f2      	b.n	8004992 <__libc_init_array+0x1e>
 80049ac:	0800577c 	.word	0x0800577c
 80049b0:	0800577c 	.word	0x0800577c
 80049b4:	0800577c 	.word	0x0800577c
 80049b8:	08005780 	.word	0x08005780

080049bc <__retarget_lock_init_recursive>:
 80049bc:	4770      	bx	lr

080049be <__retarget_lock_acquire_recursive>:
 80049be:	4770      	bx	lr

080049c0 <__retarget_lock_release_recursive>:
 80049c0:	4770      	bx	lr
	...

080049c4 <__assert_func>:
 80049c4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80049c6:	4614      	mov	r4, r2
 80049c8:	461a      	mov	r2, r3
 80049ca:	4b09      	ldr	r3, [pc, #36]	@ (80049f0 <__assert_func+0x2c>)
 80049cc:	4605      	mov	r5, r0
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	68d8      	ldr	r0, [r3, #12]
 80049d2:	b954      	cbnz	r4, 80049ea <__assert_func+0x26>
 80049d4:	4b07      	ldr	r3, [pc, #28]	@ (80049f4 <__assert_func+0x30>)
 80049d6:	461c      	mov	r4, r3
 80049d8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80049dc:	9100      	str	r1, [sp, #0]
 80049de:	462b      	mov	r3, r5
 80049e0:	4905      	ldr	r1, [pc, #20]	@ (80049f8 <__assert_func+0x34>)
 80049e2:	f000 f9b3 	bl	8004d4c <fiprintf>
 80049e6:	f000 f9d3 	bl	8004d90 <abort>
 80049ea:	4b04      	ldr	r3, [pc, #16]	@ (80049fc <__assert_func+0x38>)
 80049ec:	e7f4      	b.n	80049d8 <__assert_func+0x14>
 80049ee:	bf00      	nop
 80049f0:	20000040 	.word	0x20000040
 80049f4:	08005748 	.word	0x08005748
 80049f8:	0800571a 	.word	0x0800571a
 80049fc:	0800570d 	.word	0x0800570d

08004a00 <_free_r>:
 8004a00:	b538      	push	{r3, r4, r5, lr}
 8004a02:	4605      	mov	r5, r0
 8004a04:	2900      	cmp	r1, #0
 8004a06:	d040      	beq.n	8004a8a <_free_r+0x8a>
 8004a08:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8004a0c:	1f0c      	subs	r4, r1, #4
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	bfb8      	it	lt
 8004a12:	18e4      	addlt	r4, r4, r3
 8004a14:	f000 f8e6 	bl	8004be4 <__malloc_lock>
 8004a18:	4a1c      	ldr	r2, [pc, #112]	@ (8004a8c <_free_r+0x8c>)
 8004a1a:	6813      	ldr	r3, [r2, #0]
 8004a1c:	b933      	cbnz	r3, 8004a2c <_free_r+0x2c>
 8004a1e:	6063      	str	r3, [r4, #4]
 8004a20:	6014      	str	r4, [r2, #0]
 8004a22:	4628      	mov	r0, r5
 8004a24:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8004a28:	f000 b8e2 	b.w	8004bf0 <__malloc_unlock>
 8004a2c:	42a3      	cmp	r3, r4
 8004a2e:	d908      	bls.n	8004a42 <_free_r+0x42>
 8004a30:	6820      	ldr	r0, [r4, #0]
 8004a32:	1821      	adds	r1, r4, r0
 8004a34:	428b      	cmp	r3, r1
 8004a36:	bf01      	itttt	eq
 8004a38:	6819      	ldreq	r1, [r3, #0]
 8004a3a:	685b      	ldreq	r3, [r3, #4]
 8004a3c:	1809      	addeq	r1, r1, r0
 8004a3e:	6021      	streq	r1, [r4, #0]
 8004a40:	e7ed      	b.n	8004a1e <_free_r+0x1e>
 8004a42:	461a      	mov	r2, r3
 8004a44:	685b      	ldr	r3, [r3, #4]
 8004a46:	b10b      	cbz	r3, 8004a4c <_free_r+0x4c>
 8004a48:	42a3      	cmp	r3, r4
 8004a4a:	d9fa      	bls.n	8004a42 <_free_r+0x42>
 8004a4c:	6811      	ldr	r1, [r2, #0]
 8004a4e:	1850      	adds	r0, r2, r1
 8004a50:	42a0      	cmp	r0, r4
 8004a52:	d10b      	bne.n	8004a6c <_free_r+0x6c>
 8004a54:	6820      	ldr	r0, [r4, #0]
 8004a56:	4401      	add	r1, r0
 8004a58:	1850      	adds	r0, r2, r1
 8004a5a:	4283      	cmp	r3, r0
 8004a5c:	6011      	str	r1, [r2, #0]
 8004a5e:	d1e0      	bne.n	8004a22 <_free_r+0x22>
 8004a60:	6818      	ldr	r0, [r3, #0]
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	4408      	add	r0, r1
 8004a66:	6010      	str	r0, [r2, #0]
 8004a68:	6053      	str	r3, [r2, #4]
 8004a6a:	e7da      	b.n	8004a22 <_free_r+0x22>
 8004a6c:	d902      	bls.n	8004a74 <_free_r+0x74>
 8004a6e:	230c      	movs	r3, #12
 8004a70:	602b      	str	r3, [r5, #0]
 8004a72:	e7d6      	b.n	8004a22 <_free_r+0x22>
 8004a74:	6820      	ldr	r0, [r4, #0]
 8004a76:	1821      	adds	r1, r4, r0
 8004a78:	428b      	cmp	r3, r1
 8004a7a:	bf01      	itttt	eq
 8004a7c:	6819      	ldreq	r1, [r3, #0]
 8004a7e:	685b      	ldreq	r3, [r3, #4]
 8004a80:	1809      	addeq	r1, r1, r0
 8004a82:	6021      	streq	r1, [r4, #0]
 8004a84:	6063      	str	r3, [r4, #4]
 8004a86:	6054      	str	r4, [r2, #4]
 8004a88:	e7cb      	b.n	8004a22 <_free_r+0x22>
 8004a8a:	bd38      	pop	{r3, r4, r5, pc}
 8004a8c:	20001428 	.word	0x20001428

08004a90 <malloc>:
 8004a90:	4b02      	ldr	r3, [pc, #8]	@ (8004a9c <malloc+0xc>)
 8004a92:	4601      	mov	r1, r0
 8004a94:	6818      	ldr	r0, [r3, #0]
 8004a96:	f000 b825 	b.w	8004ae4 <_malloc_r>
 8004a9a:	bf00      	nop
 8004a9c:	20000040 	.word	0x20000040

08004aa0 <sbrk_aligned>:
 8004aa0:	b570      	push	{r4, r5, r6, lr}
 8004aa2:	4e0f      	ldr	r6, [pc, #60]	@ (8004ae0 <sbrk_aligned+0x40>)
 8004aa4:	460c      	mov	r4, r1
 8004aa6:	6831      	ldr	r1, [r6, #0]
 8004aa8:	4605      	mov	r5, r0
 8004aaa:	b911      	cbnz	r1, 8004ab2 <sbrk_aligned+0x12>
 8004aac:	f000 f960 	bl	8004d70 <_sbrk_r>
 8004ab0:	6030      	str	r0, [r6, #0]
 8004ab2:	4621      	mov	r1, r4
 8004ab4:	4628      	mov	r0, r5
 8004ab6:	f000 f95b 	bl	8004d70 <_sbrk_r>
 8004aba:	1c43      	adds	r3, r0, #1
 8004abc:	d103      	bne.n	8004ac6 <sbrk_aligned+0x26>
 8004abe:	f04f 34ff 	mov.w	r4, #4294967295	@ 0xffffffff
 8004ac2:	4620      	mov	r0, r4
 8004ac4:	bd70      	pop	{r4, r5, r6, pc}
 8004ac6:	1cc4      	adds	r4, r0, #3
 8004ac8:	f024 0403 	bic.w	r4, r4, #3
 8004acc:	42a0      	cmp	r0, r4
 8004ace:	d0f8      	beq.n	8004ac2 <sbrk_aligned+0x22>
 8004ad0:	1a21      	subs	r1, r4, r0
 8004ad2:	4628      	mov	r0, r5
 8004ad4:	f000 f94c 	bl	8004d70 <_sbrk_r>
 8004ad8:	3001      	adds	r0, #1
 8004ada:	d1f2      	bne.n	8004ac2 <sbrk_aligned+0x22>
 8004adc:	e7ef      	b.n	8004abe <sbrk_aligned+0x1e>
 8004ade:	bf00      	nop
 8004ae0:	20001424 	.word	0x20001424

08004ae4 <_malloc_r>:
 8004ae4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004ae8:	1ccd      	adds	r5, r1, #3
 8004aea:	f025 0503 	bic.w	r5, r5, #3
 8004aee:	3508      	adds	r5, #8
 8004af0:	2d0c      	cmp	r5, #12
 8004af2:	bf38      	it	cc
 8004af4:	250c      	movcc	r5, #12
 8004af6:	2d00      	cmp	r5, #0
 8004af8:	4606      	mov	r6, r0
 8004afa:	db01      	blt.n	8004b00 <_malloc_r+0x1c>
 8004afc:	42a9      	cmp	r1, r5
 8004afe:	d904      	bls.n	8004b0a <_malloc_r+0x26>
 8004b00:	230c      	movs	r3, #12
 8004b02:	6033      	str	r3, [r6, #0]
 8004b04:	2000      	movs	r0, #0
 8004b06:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004b0a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8004be0 <_malloc_r+0xfc>
 8004b0e:	f000 f869 	bl	8004be4 <__malloc_lock>
 8004b12:	f8d8 3000 	ldr.w	r3, [r8]
 8004b16:	461c      	mov	r4, r3
 8004b18:	bb44      	cbnz	r4, 8004b6c <_malloc_r+0x88>
 8004b1a:	4629      	mov	r1, r5
 8004b1c:	4630      	mov	r0, r6
 8004b1e:	f7ff ffbf 	bl	8004aa0 <sbrk_aligned>
 8004b22:	1c43      	adds	r3, r0, #1
 8004b24:	4604      	mov	r4, r0
 8004b26:	d158      	bne.n	8004bda <_malloc_r+0xf6>
 8004b28:	f8d8 4000 	ldr.w	r4, [r8]
 8004b2c:	4627      	mov	r7, r4
 8004b2e:	2f00      	cmp	r7, #0
 8004b30:	d143      	bne.n	8004bba <_malloc_r+0xd6>
 8004b32:	2c00      	cmp	r4, #0
 8004b34:	d04b      	beq.n	8004bce <_malloc_r+0xea>
 8004b36:	6823      	ldr	r3, [r4, #0]
 8004b38:	4639      	mov	r1, r7
 8004b3a:	4630      	mov	r0, r6
 8004b3c:	eb04 0903 	add.w	r9, r4, r3
 8004b40:	f000 f916 	bl	8004d70 <_sbrk_r>
 8004b44:	4581      	cmp	r9, r0
 8004b46:	d142      	bne.n	8004bce <_malloc_r+0xea>
 8004b48:	6821      	ldr	r1, [r4, #0]
 8004b4a:	4630      	mov	r0, r6
 8004b4c:	1a6d      	subs	r5, r5, r1
 8004b4e:	4629      	mov	r1, r5
 8004b50:	f7ff ffa6 	bl	8004aa0 <sbrk_aligned>
 8004b54:	3001      	adds	r0, #1
 8004b56:	d03a      	beq.n	8004bce <_malloc_r+0xea>
 8004b58:	6823      	ldr	r3, [r4, #0]
 8004b5a:	442b      	add	r3, r5
 8004b5c:	6023      	str	r3, [r4, #0]
 8004b5e:	f8d8 3000 	ldr.w	r3, [r8]
 8004b62:	685a      	ldr	r2, [r3, #4]
 8004b64:	bb62      	cbnz	r2, 8004bc0 <_malloc_r+0xdc>
 8004b66:	f8c8 7000 	str.w	r7, [r8]
 8004b6a:	e00f      	b.n	8004b8c <_malloc_r+0xa8>
 8004b6c:	6822      	ldr	r2, [r4, #0]
 8004b6e:	1b52      	subs	r2, r2, r5
 8004b70:	d420      	bmi.n	8004bb4 <_malloc_r+0xd0>
 8004b72:	2a0b      	cmp	r2, #11
 8004b74:	d917      	bls.n	8004ba6 <_malloc_r+0xc2>
 8004b76:	1961      	adds	r1, r4, r5
 8004b78:	42a3      	cmp	r3, r4
 8004b7a:	6025      	str	r5, [r4, #0]
 8004b7c:	bf18      	it	ne
 8004b7e:	6059      	strne	r1, [r3, #4]
 8004b80:	6863      	ldr	r3, [r4, #4]
 8004b82:	bf08      	it	eq
 8004b84:	f8c8 1000 	streq.w	r1, [r8]
 8004b88:	5162      	str	r2, [r4, r5]
 8004b8a:	604b      	str	r3, [r1, #4]
 8004b8c:	4630      	mov	r0, r6
 8004b8e:	f000 f82f 	bl	8004bf0 <__malloc_unlock>
 8004b92:	f104 000b 	add.w	r0, r4, #11
 8004b96:	1d23      	adds	r3, r4, #4
 8004b98:	f020 0007 	bic.w	r0, r0, #7
 8004b9c:	1ac2      	subs	r2, r0, r3
 8004b9e:	bf1c      	itt	ne
 8004ba0:	1a1b      	subne	r3, r3, r0
 8004ba2:	50a3      	strne	r3, [r4, r2]
 8004ba4:	e7af      	b.n	8004b06 <_malloc_r+0x22>
 8004ba6:	6862      	ldr	r2, [r4, #4]
 8004ba8:	42a3      	cmp	r3, r4
 8004baa:	bf0c      	ite	eq
 8004bac:	f8c8 2000 	streq.w	r2, [r8]
 8004bb0:	605a      	strne	r2, [r3, #4]
 8004bb2:	e7eb      	b.n	8004b8c <_malloc_r+0xa8>
 8004bb4:	4623      	mov	r3, r4
 8004bb6:	6864      	ldr	r4, [r4, #4]
 8004bb8:	e7ae      	b.n	8004b18 <_malloc_r+0x34>
 8004bba:	463c      	mov	r4, r7
 8004bbc:	687f      	ldr	r7, [r7, #4]
 8004bbe:	e7b6      	b.n	8004b2e <_malloc_r+0x4a>
 8004bc0:	461a      	mov	r2, r3
 8004bc2:	685b      	ldr	r3, [r3, #4]
 8004bc4:	42a3      	cmp	r3, r4
 8004bc6:	d1fb      	bne.n	8004bc0 <_malloc_r+0xdc>
 8004bc8:	2300      	movs	r3, #0
 8004bca:	6053      	str	r3, [r2, #4]
 8004bcc:	e7de      	b.n	8004b8c <_malloc_r+0xa8>
 8004bce:	230c      	movs	r3, #12
 8004bd0:	4630      	mov	r0, r6
 8004bd2:	6033      	str	r3, [r6, #0]
 8004bd4:	f000 f80c 	bl	8004bf0 <__malloc_unlock>
 8004bd8:	e794      	b.n	8004b04 <_malloc_r+0x20>
 8004bda:	6005      	str	r5, [r0, #0]
 8004bdc:	e7d6      	b.n	8004b8c <_malloc_r+0xa8>
 8004bde:	bf00      	nop
 8004be0:	20001428 	.word	0x20001428

08004be4 <__malloc_lock>:
 8004be4:	4801      	ldr	r0, [pc, #4]	@ (8004bec <__malloc_lock+0x8>)
 8004be6:	f7ff beea 	b.w	80049be <__retarget_lock_acquire_recursive>
 8004bea:	bf00      	nop
 8004bec:	20001420 	.word	0x20001420

08004bf0 <__malloc_unlock>:
 8004bf0:	4801      	ldr	r0, [pc, #4]	@ (8004bf8 <__malloc_unlock+0x8>)
 8004bf2:	f7ff bee5 	b.w	80049c0 <__retarget_lock_release_recursive>
 8004bf6:	bf00      	nop
 8004bf8:	20001420 	.word	0x20001420

08004bfc <__sflush_r>:
 8004bfc:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8004c00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004c02:	0716      	lsls	r6, r2, #28
 8004c04:	4605      	mov	r5, r0
 8004c06:	460c      	mov	r4, r1
 8004c08:	d454      	bmi.n	8004cb4 <__sflush_r+0xb8>
 8004c0a:	684b      	ldr	r3, [r1, #4]
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	dc02      	bgt.n	8004c16 <__sflush_r+0x1a>
 8004c10:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	dd48      	ble.n	8004ca8 <__sflush_r+0xac>
 8004c16:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c18:	2e00      	cmp	r6, #0
 8004c1a:	d045      	beq.n	8004ca8 <__sflush_r+0xac>
 8004c1c:	2300      	movs	r3, #0
 8004c1e:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8004c22:	682f      	ldr	r7, [r5, #0]
 8004c24:	6a21      	ldr	r1, [r4, #32]
 8004c26:	602b      	str	r3, [r5, #0]
 8004c28:	d030      	beq.n	8004c8c <__sflush_r+0x90>
 8004c2a:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8004c2c:	89a3      	ldrh	r3, [r4, #12]
 8004c2e:	0759      	lsls	r1, r3, #29
 8004c30:	d505      	bpl.n	8004c3e <__sflush_r+0x42>
 8004c32:	6863      	ldr	r3, [r4, #4]
 8004c34:	1ad2      	subs	r2, r2, r3
 8004c36:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8004c38:	b10b      	cbz	r3, 8004c3e <__sflush_r+0x42>
 8004c3a:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8004c3c:	1ad2      	subs	r2, r2, r3
 8004c3e:	2300      	movs	r3, #0
 8004c40:	4628      	mov	r0, r5
 8004c42:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8004c44:	6a21      	ldr	r1, [r4, #32]
 8004c46:	47b0      	blx	r6
 8004c48:	1c43      	adds	r3, r0, #1
 8004c4a:	89a3      	ldrh	r3, [r4, #12]
 8004c4c:	d106      	bne.n	8004c5c <__sflush_r+0x60>
 8004c4e:	6829      	ldr	r1, [r5, #0]
 8004c50:	291d      	cmp	r1, #29
 8004c52:	d82b      	bhi.n	8004cac <__sflush_r+0xb0>
 8004c54:	4a28      	ldr	r2, [pc, #160]	@ (8004cf8 <__sflush_r+0xfc>)
 8004c56:	410a      	asrs	r2, r1
 8004c58:	07d6      	lsls	r6, r2, #31
 8004c5a:	d427      	bmi.n	8004cac <__sflush_r+0xb0>
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	6062      	str	r2, [r4, #4]
 8004c60:	6922      	ldr	r2, [r4, #16]
 8004c62:	04d9      	lsls	r1, r3, #19
 8004c64:	6022      	str	r2, [r4, #0]
 8004c66:	d504      	bpl.n	8004c72 <__sflush_r+0x76>
 8004c68:	1c42      	adds	r2, r0, #1
 8004c6a:	d101      	bne.n	8004c70 <__sflush_r+0x74>
 8004c6c:	682b      	ldr	r3, [r5, #0]
 8004c6e:	b903      	cbnz	r3, 8004c72 <__sflush_r+0x76>
 8004c70:	6560      	str	r0, [r4, #84]	@ 0x54
 8004c72:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8004c74:	602f      	str	r7, [r5, #0]
 8004c76:	b1b9      	cbz	r1, 8004ca8 <__sflush_r+0xac>
 8004c78:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8004c7c:	4299      	cmp	r1, r3
 8004c7e:	d002      	beq.n	8004c86 <__sflush_r+0x8a>
 8004c80:	4628      	mov	r0, r5
 8004c82:	f7ff febd 	bl	8004a00 <_free_r>
 8004c86:	2300      	movs	r3, #0
 8004c88:	6363      	str	r3, [r4, #52]	@ 0x34
 8004c8a:	e00d      	b.n	8004ca8 <__sflush_r+0xac>
 8004c8c:	2301      	movs	r3, #1
 8004c8e:	4628      	mov	r0, r5
 8004c90:	47b0      	blx	r6
 8004c92:	4602      	mov	r2, r0
 8004c94:	1c50      	adds	r0, r2, #1
 8004c96:	d1c9      	bne.n	8004c2c <__sflush_r+0x30>
 8004c98:	682b      	ldr	r3, [r5, #0]
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d0c6      	beq.n	8004c2c <__sflush_r+0x30>
 8004c9e:	2b1d      	cmp	r3, #29
 8004ca0:	d001      	beq.n	8004ca6 <__sflush_r+0xaa>
 8004ca2:	2b16      	cmp	r3, #22
 8004ca4:	d11d      	bne.n	8004ce2 <__sflush_r+0xe6>
 8004ca6:	602f      	str	r7, [r5, #0]
 8004ca8:	2000      	movs	r0, #0
 8004caa:	e021      	b.n	8004cf0 <__sflush_r+0xf4>
 8004cac:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cb0:	b21b      	sxth	r3, r3
 8004cb2:	e01a      	b.n	8004cea <__sflush_r+0xee>
 8004cb4:	690f      	ldr	r7, [r1, #16]
 8004cb6:	2f00      	cmp	r7, #0
 8004cb8:	d0f6      	beq.n	8004ca8 <__sflush_r+0xac>
 8004cba:	0793      	lsls	r3, r2, #30
 8004cbc:	bf18      	it	ne
 8004cbe:	2300      	movne	r3, #0
 8004cc0:	680e      	ldr	r6, [r1, #0]
 8004cc2:	bf08      	it	eq
 8004cc4:	694b      	ldreq	r3, [r1, #20]
 8004cc6:	1bf6      	subs	r6, r6, r7
 8004cc8:	600f      	str	r7, [r1, #0]
 8004cca:	608b      	str	r3, [r1, #8]
 8004ccc:	2e00      	cmp	r6, #0
 8004cce:	ddeb      	ble.n	8004ca8 <__sflush_r+0xac>
 8004cd0:	4633      	mov	r3, r6
 8004cd2:	463a      	mov	r2, r7
 8004cd4:	4628      	mov	r0, r5
 8004cd6:	6a21      	ldr	r1, [r4, #32]
 8004cd8:	f8d4 c028 	ldr.w	ip, [r4, #40]	@ 0x28
 8004cdc:	47e0      	blx	ip
 8004cde:	2800      	cmp	r0, #0
 8004ce0:	dc07      	bgt.n	8004cf2 <__sflush_r+0xf6>
 8004ce2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004ce6:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8004cea:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004cee:	81a3      	strh	r3, [r4, #12]
 8004cf0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8004cf2:	4407      	add	r7, r0
 8004cf4:	1a36      	subs	r6, r6, r0
 8004cf6:	e7e9      	b.n	8004ccc <__sflush_r+0xd0>
 8004cf8:	dfbffffe 	.word	0xdfbffffe

08004cfc <_fflush_r>:
 8004cfc:	b538      	push	{r3, r4, r5, lr}
 8004cfe:	690b      	ldr	r3, [r1, #16]
 8004d00:	4605      	mov	r5, r0
 8004d02:	460c      	mov	r4, r1
 8004d04:	b913      	cbnz	r3, 8004d0c <_fflush_r+0x10>
 8004d06:	2500      	movs	r5, #0
 8004d08:	4628      	mov	r0, r5
 8004d0a:	bd38      	pop	{r3, r4, r5, pc}
 8004d0c:	b118      	cbz	r0, 8004d16 <_fflush_r+0x1a>
 8004d0e:	6a03      	ldr	r3, [r0, #32]
 8004d10:	b90b      	cbnz	r3, 8004d16 <_fflush_r+0x1a>
 8004d12:	f7ff fd61 	bl	80047d8 <__sinit>
 8004d16:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d0f3      	beq.n	8004d06 <_fflush_r+0xa>
 8004d1e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8004d20:	07d0      	lsls	r0, r2, #31
 8004d22:	d404      	bmi.n	8004d2e <_fflush_r+0x32>
 8004d24:	0599      	lsls	r1, r3, #22
 8004d26:	d402      	bmi.n	8004d2e <_fflush_r+0x32>
 8004d28:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d2a:	f7ff fe48 	bl	80049be <__retarget_lock_acquire_recursive>
 8004d2e:	4628      	mov	r0, r5
 8004d30:	4621      	mov	r1, r4
 8004d32:	f7ff ff63 	bl	8004bfc <__sflush_r>
 8004d36:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8004d38:	4605      	mov	r5, r0
 8004d3a:	07da      	lsls	r2, r3, #31
 8004d3c:	d4e4      	bmi.n	8004d08 <_fflush_r+0xc>
 8004d3e:	89a3      	ldrh	r3, [r4, #12]
 8004d40:	059b      	lsls	r3, r3, #22
 8004d42:	d4e1      	bmi.n	8004d08 <_fflush_r+0xc>
 8004d44:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8004d46:	f7ff fe3b 	bl	80049c0 <__retarget_lock_release_recursive>
 8004d4a:	e7dd      	b.n	8004d08 <_fflush_r+0xc>

08004d4c <fiprintf>:
 8004d4c:	b40e      	push	{r1, r2, r3}
 8004d4e:	b503      	push	{r0, r1, lr}
 8004d50:	4601      	mov	r1, r0
 8004d52:	ab03      	add	r3, sp, #12
 8004d54:	4805      	ldr	r0, [pc, #20]	@ (8004d6c <fiprintf+0x20>)
 8004d56:	f853 2b04 	ldr.w	r2, [r3], #4
 8004d5a:	6800      	ldr	r0, [r0, #0]
 8004d5c:	9301      	str	r3, [sp, #4]
 8004d5e:	f000 f845 	bl	8004dec <_vfiprintf_r>
 8004d62:	b002      	add	sp, #8
 8004d64:	f85d eb04 	ldr.w	lr, [sp], #4
 8004d68:	b003      	add	sp, #12
 8004d6a:	4770      	bx	lr
 8004d6c:	20000040 	.word	0x20000040

08004d70 <_sbrk_r>:
 8004d70:	b538      	push	{r3, r4, r5, lr}
 8004d72:	2300      	movs	r3, #0
 8004d74:	4d05      	ldr	r5, [pc, #20]	@ (8004d8c <_sbrk_r+0x1c>)
 8004d76:	4604      	mov	r4, r0
 8004d78:	4608      	mov	r0, r1
 8004d7a:	602b      	str	r3, [r5, #0]
 8004d7c:	f7fd fd0c 	bl	8002798 <_sbrk>
 8004d80:	1c43      	adds	r3, r0, #1
 8004d82:	d102      	bne.n	8004d8a <_sbrk_r+0x1a>
 8004d84:	682b      	ldr	r3, [r5, #0]
 8004d86:	b103      	cbz	r3, 8004d8a <_sbrk_r+0x1a>
 8004d88:	6023      	str	r3, [r4, #0]
 8004d8a:	bd38      	pop	{r3, r4, r5, pc}
 8004d8c:	2000141c 	.word	0x2000141c

08004d90 <abort>:
 8004d90:	2006      	movs	r0, #6
 8004d92:	b508      	push	{r3, lr}
 8004d94:	f000 fb90 	bl	80054b8 <raise>
 8004d98:	2001      	movs	r0, #1
 8004d9a:	f7fd fc88 	bl	80026ae <_exit>

08004d9e <__sfputc_r>:
 8004d9e:	6893      	ldr	r3, [r2, #8]
 8004da0:	b410      	push	{r4}
 8004da2:	3b01      	subs	r3, #1
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	6093      	str	r3, [r2, #8]
 8004da8:	da07      	bge.n	8004dba <__sfputc_r+0x1c>
 8004daa:	6994      	ldr	r4, [r2, #24]
 8004dac:	42a3      	cmp	r3, r4
 8004dae:	db01      	blt.n	8004db4 <__sfputc_r+0x16>
 8004db0:	290a      	cmp	r1, #10
 8004db2:	d102      	bne.n	8004dba <__sfputc_r+0x1c>
 8004db4:	bc10      	pop	{r4}
 8004db6:	f000 bac3 	b.w	8005340 <__swbuf_r>
 8004dba:	6813      	ldr	r3, [r2, #0]
 8004dbc:	1c58      	adds	r0, r3, #1
 8004dbe:	6010      	str	r0, [r2, #0]
 8004dc0:	7019      	strb	r1, [r3, #0]
 8004dc2:	4608      	mov	r0, r1
 8004dc4:	bc10      	pop	{r4}
 8004dc6:	4770      	bx	lr

08004dc8 <__sfputs_r>:
 8004dc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8004dca:	4606      	mov	r6, r0
 8004dcc:	460f      	mov	r7, r1
 8004dce:	4614      	mov	r4, r2
 8004dd0:	18d5      	adds	r5, r2, r3
 8004dd2:	42ac      	cmp	r4, r5
 8004dd4:	d101      	bne.n	8004dda <__sfputs_r+0x12>
 8004dd6:	2000      	movs	r0, #0
 8004dd8:	e007      	b.n	8004dea <__sfputs_r+0x22>
 8004dda:	463a      	mov	r2, r7
 8004ddc:	4630      	mov	r0, r6
 8004dde:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004de2:	f7ff ffdc 	bl	8004d9e <__sfputc_r>
 8004de6:	1c43      	adds	r3, r0, #1
 8004de8:	d1f3      	bne.n	8004dd2 <__sfputs_r+0xa>
 8004dea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08004dec <_vfiprintf_r>:
 8004dec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004df0:	460d      	mov	r5, r1
 8004df2:	4614      	mov	r4, r2
 8004df4:	4698      	mov	r8, r3
 8004df6:	4606      	mov	r6, r0
 8004df8:	b09d      	sub	sp, #116	@ 0x74
 8004dfa:	b118      	cbz	r0, 8004e04 <_vfiprintf_r+0x18>
 8004dfc:	6a03      	ldr	r3, [r0, #32]
 8004dfe:	b90b      	cbnz	r3, 8004e04 <_vfiprintf_r+0x18>
 8004e00:	f7ff fcea 	bl	80047d8 <__sinit>
 8004e04:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e06:	07d9      	lsls	r1, r3, #31
 8004e08:	d405      	bmi.n	8004e16 <_vfiprintf_r+0x2a>
 8004e0a:	89ab      	ldrh	r3, [r5, #12]
 8004e0c:	059a      	lsls	r2, r3, #22
 8004e0e:	d402      	bmi.n	8004e16 <_vfiprintf_r+0x2a>
 8004e10:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e12:	f7ff fdd4 	bl	80049be <__retarget_lock_acquire_recursive>
 8004e16:	89ab      	ldrh	r3, [r5, #12]
 8004e18:	071b      	lsls	r3, r3, #28
 8004e1a:	d501      	bpl.n	8004e20 <_vfiprintf_r+0x34>
 8004e1c:	692b      	ldr	r3, [r5, #16]
 8004e1e:	b99b      	cbnz	r3, 8004e48 <_vfiprintf_r+0x5c>
 8004e20:	4629      	mov	r1, r5
 8004e22:	4630      	mov	r0, r6
 8004e24:	f000 faca 	bl	80053bc <__swsetup_r>
 8004e28:	b170      	cbz	r0, 8004e48 <_vfiprintf_r+0x5c>
 8004e2a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004e2c:	07dc      	lsls	r4, r3, #31
 8004e2e:	d504      	bpl.n	8004e3a <_vfiprintf_r+0x4e>
 8004e30:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8004e34:	b01d      	add	sp, #116	@ 0x74
 8004e36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004e3a:	89ab      	ldrh	r3, [r5, #12]
 8004e3c:	0598      	lsls	r0, r3, #22
 8004e3e:	d4f7      	bmi.n	8004e30 <_vfiprintf_r+0x44>
 8004e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004e42:	f7ff fdbd 	bl	80049c0 <__retarget_lock_release_recursive>
 8004e46:	e7f3      	b.n	8004e30 <_vfiprintf_r+0x44>
 8004e48:	2300      	movs	r3, #0
 8004e4a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004e4c:	2320      	movs	r3, #32
 8004e4e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8004e52:	2330      	movs	r3, #48	@ 0x30
 8004e54:	f04f 0901 	mov.w	r9, #1
 8004e58:	f8cd 800c 	str.w	r8, [sp, #12]
 8004e5c:	f8df 81a8 	ldr.w	r8, [pc, #424]	@ 8005008 <_vfiprintf_r+0x21c>
 8004e60:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8004e64:	4623      	mov	r3, r4
 8004e66:	469a      	mov	sl, r3
 8004e68:	f813 2b01 	ldrb.w	r2, [r3], #1
 8004e6c:	b10a      	cbz	r2, 8004e72 <_vfiprintf_r+0x86>
 8004e6e:	2a25      	cmp	r2, #37	@ 0x25
 8004e70:	d1f9      	bne.n	8004e66 <_vfiprintf_r+0x7a>
 8004e72:	ebba 0b04 	subs.w	fp, sl, r4
 8004e76:	d00b      	beq.n	8004e90 <_vfiprintf_r+0xa4>
 8004e78:	465b      	mov	r3, fp
 8004e7a:	4622      	mov	r2, r4
 8004e7c:	4629      	mov	r1, r5
 8004e7e:	4630      	mov	r0, r6
 8004e80:	f7ff ffa2 	bl	8004dc8 <__sfputs_r>
 8004e84:	3001      	adds	r0, #1
 8004e86:	f000 80a7 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e8a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8004e8c:	445a      	add	r2, fp
 8004e8e:	9209      	str	r2, [sp, #36]	@ 0x24
 8004e90:	f89a 3000 	ldrb.w	r3, [sl]
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	f000 809f 	beq.w	8004fd8 <_vfiprintf_r+0x1ec>
 8004e9a:	2300      	movs	r3, #0
 8004e9c:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8004ea0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8004ea4:	f10a 0a01 	add.w	sl, sl, #1
 8004ea8:	9304      	str	r3, [sp, #16]
 8004eaa:	9307      	str	r3, [sp, #28]
 8004eac:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8004eb0:	931a      	str	r3, [sp, #104]	@ 0x68
 8004eb2:	4654      	mov	r4, sl
 8004eb4:	2205      	movs	r2, #5
 8004eb6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004eba:	4853      	ldr	r0, [pc, #332]	@ (8005008 <_vfiprintf_r+0x21c>)
 8004ebc:	f000 fb18 	bl	80054f0 <memchr>
 8004ec0:	9a04      	ldr	r2, [sp, #16]
 8004ec2:	b9d8      	cbnz	r0, 8004efc <_vfiprintf_r+0x110>
 8004ec4:	06d1      	lsls	r1, r2, #27
 8004ec6:	bf44      	itt	mi
 8004ec8:	2320      	movmi	r3, #32
 8004eca:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ece:	0713      	lsls	r3, r2, #28
 8004ed0:	bf44      	itt	mi
 8004ed2:	232b      	movmi	r3, #43	@ 0x2b
 8004ed4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8004ed8:	f89a 3000 	ldrb.w	r3, [sl]
 8004edc:	2b2a      	cmp	r3, #42	@ 0x2a
 8004ede:	d015      	beq.n	8004f0c <_vfiprintf_r+0x120>
 8004ee0:	4654      	mov	r4, sl
 8004ee2:	2000      	movs	r0, #0
 8004ee4:	f04f 0c0a 	mov.w	ip, #10
 8004ee8:	9a07      	ldr	r2, [sp, #28]
 8004eea:	4621      	mov	r1, r4
 8004eec:	f811 3b01 	ldrb.w	r3, [r1], #1
 8004ef0:	3b30      	subs	r3, #48	@ 0x30
 8004ef2:	2b09      	cmp	r3, #9
 8004ef4:	d94b      	bls.n	8004f8e <_vfiprintf_r+0x1a2>
 8004ef6:	b1b0      	cbz	r0, 8004f26 <_vfiprintf_r+0x13a>
 8004ef8:	9207      	str	r2, [sp, #28]
 8004efa:	e014      	b.n	8004f26 <_vfiprintf_r+0x13a>
 8004efc:	eba0 0308 	sub.w	r3, r0, r8
 8004f00:	fa09 f303 	lsl.w	r3, r9, r3
 8004f04:	4313      	orrs	r3, r2
 8004f06:	46a2      	mov	sl, r4
 8004f08:	9304      	str	r3, [sp, #16]
 8004f0a:	e7d2      	b.n	8004eb2 <_vfiprintf_r+0xc6>
 8004f0c:	9b03      	ldr	r3, [sp, #12]
 8004f0e:	1d19      	adds	r1, r3, #4
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	9103      	str	r1, [sp, #12]
 8004f14:	2b00      	cmp	r3, #0
 8004f16:	bfbb      	ittet	lt
 8004f18:	425b      	neglt	r3, r3
 8004f1a:	f042 0202 	orrlt.w	r2, r2, #2
 8004f1e:	9307      	strge	r3, [sp, #28]
 8004f20:	9307      	strlt	r3, [sp, #28]
 8004f22:	bfb8      	it	lt
 8004f24:	9204      	strlt	r2, [sp, #16]
 8004f26:	7823      	ldrb	r3, [r4, #0]
 8004f28:	2b2e      	cmp	r3, #46	@ 0x2e
 8004f2a:	d10a      	bne.n	8004f42 <_vfiprintf_r+0x156>
 8004f2c:	7863      	ldrb	r3, [r4, #1]
 8004f2e:	2b2a      	cmp	r3, #42	@ 0x2a
 8004f30:	d132      	bne.n	8004f98 <_vfiprintf_r+0x1ac>
 8004f32:	9b03      	ldr	r3, [sp, #12]
 8004f34:	3402      	adds	r4, #2
 8004f36:	1d1a      	adds	r2, r3, #4
 8004f38:	681b      	ldr	r3, [r3, #0]
 8004f3a:	9203      	str	r2, [sp, #12]
 8004f3c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8004f40:	9305      	str	r3, [sp, #20]
 8004f42:	f8df a0c8 	ldr.w	sl, [pc, #200]	@ 800500c <_vfiprintf_r+0x220>
 8004f46:	2203      	movs	r2, #3
 8004f48:	4650      	mov	r0, sl
 8004f4a:	7821      	ldrb	r1, [r4, #0]
 8004f4c:	f000 fad0 	bl	80054f0 <memchr>
 8004f50:	b138      	cbz	r0, 8004f62 <_vfiprintf_r+0x176>
 8004f52:	2240      	movs	r2, #64	@ 0x40
 8004f54:	9b04      	ldr	r3, [sp, #16]
 8004f56:	eba0 000a 	sub.w	r0, r0, sl
 8004f5a:	4082      	lsls	r2, r0
 8004f5c:	4313      	orrs	r3, r2
 8004f5e:	3401      	adds	r4, #1
 8004f60:	9304      	str	r3, [sp, #16]
 8004f62:	f814 1b01 	ldrb.w	r1, [r4], #1
 8004f66:	2206      	movs	r2, #6
 8004f68:	4829      	ldr	r0, [pc, #164]	@ (8005010 <_vfiprintf_r+0x224>)
 8004f6a:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8004f6e:	f000 fabf 	bl	80054f0 <memchr>
 8004f72:	2800      	cmp	r0, #0
 8004f74:	d03f      	beq.n	8004ff6 <_vfiprintf_r+0x20a>
 8004f76:	4b27      	ldr	r3, [pc, #156]	@ (8005014 <_vfiprintf_r+0x228>)
 8004f78:	bb1b      	cbnz	r3, 8004fc2 <_vfiprintf_r+0x1d6>
 8004f7a:	9b03      	ldr	r3, [sp, #12]
 8004f7c:	3307      	adds	r3, #7
 8004f7e:	f023 0307 	bic.w	r3, r3, #7
 8004f82:	3308      	adds	r3, #8
 8004f84:	9303      	str	r3, [sp, #12]
 8004f86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8004f88:	443b      	add	r3, r7
 8004f8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8004f8c:	e76a      	b.n	8004e64 <_vfiprintf_r+0x78>
 8004f8e:	460c      	mov	r4, r1
 8004f90:	2001      	movs	r0, #1
 8004f92:	fb0c 3202 	mla	r2, ip, r2, r3
 8004f96:	e7a8      	b.n	8004eea <_vfiprintf_r+0xfe>
 8004f98:	2300      	movs	r3, #0
 8004f9a:	f04f 0c0a 	mov.w	ip, #10
 8004f9e:	4619      	mov	r1, r3
 8004fa0:	3401      	adds	r4, #1
 8004fa2:	9305      	str	r3, [sp, #20]
 8004fa4:	4620      	mov	r0, r4
 8004fa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 8004faa:	3a30      	subs	r2, #48	@ 0x30
 8004fac:	2a09      	cmp	r2, #9
 8004fae:	d903      	bls.n	8004fb8 <_vfiprintf_r+0x1cc>
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d0c6      	beq.n	8004f42 <_vfiprintf_r+0x156>
 8004fb4:	9105      	str	r1, [sp, #20]
 8004fb6:	e7c4      	b.n	8004f42 <_vfiprintf_r+0x156>
 8004fb8:	4604      	mov	r4, r0
 8004fba:	2301      	movs	r3, #1
 8004fbc:	fb0c 2101 	mla	r1, ip, r1, r2
 8004fc0:	e7f0      	b.n	8004fa4 <_vfiprintf_r+0x1b8>
 8004fc2:	ab03      	add	r3, sp, #12
 8004fc4:	9300      	str	r3, [sp, #0]
 8004fc6:	462a      	mov	r2, r5
 8004fc8:	4630      	mov	r0, r6
 8004fca:	4b13      	ldr	r3, [pc, #76]	@ (8005018 <_vfiprintf_r+0x22c>)
 8004fcc:	a904      	add	r1, sp, #16
 8004fce:	f3af 8000 	nop.w
 8004fd2:	4607      	mov	r7, r0
 8004fd4:	1c78      	adds	r0, r7, #1
 8004fd6:	d1d6      	bne.n	8004f86 <_vfiprintf_r+0x19a>
 8004fd8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8004fda:	07d9      	lsls	r1, r3, #31
 8004fdc:	d405      	bmi.n	8004fea <_vfiprintf_r+0x1fe>
 8004fde:	89ab      	ldrh	r3, [r5, #12]
 8004fe0:	059a      	lsls	r2, r3, #22
 8004fe2:	d402      	bmi.n	8004fea <_vfiprintf_r+0x1fe>
 8004fe4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8004fe6:	f7ff fceb 	bl	80049c0 <__retarget_lock_release_recursive>
 8004fea:	89ab      	ldrh	r3, [r5, #12]
 8004fec:	065b      	lsls	r3, r3, #25
 8004fee:	f53f af1f 	bmi.w	8004e30 <_vfiprintf_r+0x44>
 8004ff2:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8004ff4:	e71e      	b.n	8004e34 <_vfiprintf_r+0x48>
 8004ff6:	ab03      	add	r3, sp, #12
 8004ff8:	9300      	str	r3, [sp, #0]
 8004ffa:	462a      	mov	r2, r5
 8004ffc:	4630      	mov	r0, r6
 8004ffe:	4b06      	ldr	r3, [pc, #24]	@ (8005018 <_vfiprintf_r+0x22c>)
 8005000:	a904      	add	r1, sp, #16
 8005002:	f000 f87d 	bl	8005100 <_printf_i>
 8005006:	e7e4      	b.n	8004fd2 <_vfiprintf_r+0x1e6>
 8005008:	08005749 	.word	0x08005749
 800500c:	0800574f 	.word	0x0800574f
 8005010:	08005753 	.word	0x08005753
 8005014:	00000000 	.word	0x00000000
 8005018:	08004dc9 	.word	0x08004dc9

0800501c <_printf_common>:
 800501c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005020:	4616      	mov	r6, r2
 8005022:	4698      	mov	r8, r3
 8005024:	688a      	ldr	r2, [r1, #8]
 8005026:	690b      	ldr	r3, [r1, #16]
 8005028:	4607      	mov	r7, r0
 800502a:	4293      	cmp	r3, r2
 800502c:	bfb8      	it	lt
 800502e:	4613      	movlt	r3, r2
 8005030:	6033      	str	r3, [r6, #0]
 8005032:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005036:	460c      	mov	r4, r1
 8005038:	f8dd 9020 	ldr.w	r9, [sp, #32]
 800503c:	b10a      	cbz	r2, 8005042 <_printf_common+0x26>
 800503e:	3301      	adds	r3, #1
 8005040:	6033      	str	r3, [r6, #0]
 8005042:	6823      	ldr	r3, [r4, #0]
 8005044:	0699      	lsls	r1, r3, #26
 8005046:	bf42      	ittt	mi
 8005048:	6833      	ldrmi	r3, [r6, #0]
 800504a:	3302      	addmi	r3, #2
 800504c:	6033      	strmi	r3, [r6, #0]
 800504e:	6825      	ldr	r5, [r4, #0]
 8005050:	f015 0506 	ands.w	r5, r5, #6
 8005054:	d106      	bne.n	8005064 <_printf_common+0x48>
 8005056:	f104 0a19 	add.w	sl, r4, #25
 800505a:	68e3      	ldr	r3, [r4, #12]
 800505c:	6832      	ldr	r2, [r6, #0]
 800505e:	1a9b      	subs	r3, r3, r2
 8005060:	42ab      	cmp	r3, r5
 8005062:	dc2b      	bgt.n	80050bc <_printf_common+0xa0>
 8005064:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005068:	6822      	ldr	r2, [r4, #0]
 800506a:	3b00      	subs	r3, #0
 800506c:	bf18      	it	ne
 800506e:	2301      	movne	r3, #1
 8005070:	0692      	lsls	r2, r2, #26
 8005072:	d430      	bmi.n	80050d6 <_printf_common+0xba>
 8005074:	4641      	mov	r1, r8
 8005076:	4638      	mov	r0, r7
 8005078:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800507c:	47c8      	blx	r9
 800507e:	3001      	adds	r0, #1
 8005080:	d023      	beq.n	80050ca <_printf_common+0xae>
 8005082:	6823      	ldr	r3, [r4, #0]
 8005084:	6922      	ldr	r2, [r4, #16]
 8005086:	f003 0306 	and.w	r3, r3, #6
 800508a:	2b04      	cmp	r3, #4
 800508c:	bf14      	ite	ne
 800508e:	2500      	movne	r5, #0
 8005090:	6833      	ldreq	r3, [r6, #0]
 8005092:	f04f 0600 	mov.w	r6, #0
 8005096:	bf08      	it	eq
 8005098:	68e5      	ldreq	r5, [r4, #12]
 800509a:	f104 041a 	add.w	r4, r4, #26
 800509e:	bf08      	it	eq
 80050a0:	1aed      	subeq	r5, r5, r3
 80050a2:	f854 3c12 	ldr.w	r3, [r4, #-18]
 80050a6:	bf08      	it	eq
 80050a8:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80050ac:	4293      	cmp	r3, r2
 80050ae:	bfc4      	itt	gt
 80050b0:	1a9b      	subgt	r3, r3, r2
 80050b2:	18ed      	addgt	r5, r5, r3
 80050b4:	42b5      	cmp	r5, r6
 80050b6:	d11a      	bne.n	80050ee <_printf_common+0xd2>
 80050b8:	2000      	movs	r0, #0
 80050ba:	e008      	b.n	80050ce <_printf_common+0xb2>
 80050bc:	2301      	movs	r3, #1
 80050be:	4652      	mov	r2, sl
 80050c0:	4641      	mov	r1, r8
 80050c2:	4638      	mov	r0, r7
 80050c4:	47c8      	blx	r9
 80050c6:	3001      	adds	r0, #1
 80050c8:	d103      	bne.n	80050d2 <_printf_common+0xb6>
 80050ca:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80050ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80050d2:	3501      	adds	r5, #1
 80050d4:	e7c1      	b.n	800505a <_printf_common+0x3e>
 80050d6:	2030      	movs	r0, #48	@ 0x30
 80050d8:	18e1      	adds	r1, r4, r3
 80050da:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 80050de:	1c5a      	adds	r2, r3, #1
 80050e0:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 80050e4:	4422      	add	r2, r4
 80050e6:	3302      	adds	r3, #2
 80050e8:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 80050ec:	e7c2      	b.n	8005074 <_printf_common+0x58>
 80050ee:	2301      	movs	r3, #1
 80050f0:	4622      	mov	r2, r4
 80050f2:	4641      	mov	r1, r8
 80050f4:	4638      	mov	r0, r7
 80050f6:	47c8      	blx	r9
 80050f8:	3001      	adds	r0, #1
 80050fa:	d0e6      	beq.n	80050ca <_printf_common+0xae>
 80050fc:	3601      	adds	r6, #1
 80050fe:	e7d9      	b.n	80050b4 <_printf_common+0x98>

08005100 <_printf_i>:
 8005100:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005104:	7e0f      	ldrb	r7, [r1, #24]
 8005106:	4691      	mov	r9, r2
 8005108:	2f78      	cmp	r7, #120	@ 0x78
 800510a:	4680      	mov	r8, r0
 800510c:	460c      	mov	r4, r1
 800510e:	469a      	mov	sl, r3
 8005110:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005112:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005116:	d807      	bhi.n	8005128 <_printf_i+0x28>
 8005118:	2f62      	cmp	r7, #98	@ 0x62
 800511a:	d80a      	bhi.n	8005132 <_printf_i+0x32>
 800511c:	2f00      	cmp	r7, #0
 800511e:	f000 80d3 	beq.w	80052c8 <_printf_i+0x1c8>
 8005122:	2f58      	cmp	r7, #88	@ 0x58
 8005124:	f000 80ba 	beq.w	800529c <_printf_i+0x19c>
 8005128:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 800512c:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005130:	e03a      	b.n	80051a8 <_printf_i+0xa8>
 8005132:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005136:	2b15      	cmp	r3, #21
 8005138:	d8f6      	bhi.n	8005128 <_printf_i+0x28>
 800513a:	a101      	add	r1, pc, #4	@ (adr r1, 8005140 <_printf_i+0x40>)
 800513c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005140:	08005199 	.word	0x08005199
 8005144:	080051ad 	.word	0x080051ad
 8005148:	08005129 	.word	0x08005129
 800514c:	08005129 	.word	0x08005129
 8005150:	08005129 	.word	0x08005129
 8005154:	08005129 	.word	0x08005129
 8005158:	080051ad 	.word	0x080051ad
 800515c:	08005129 	.word	0x08005129
 8005160:	08005129 	.word	0x08005129
 8005164:	08005129 	.word	0x08005129
 8005168:	08005129 	.word	0x08005129
 800516c:	080052af 	.word	0x080052af
 8005170:	080051d7 	.word	0x080051d7
 8005174:	08005269 	.word	0x08005269
 8005178:	08005129 	.word	0x08005129
 800517c:	08005129 	.word	0x08005129
 8005180:	080052d1 	.word	0x080052d1
 8005184:	08005129 	.word	0x08005129
 8005188:	080051d7 	.word	0x080051d7
 800518c:	08005129 	.word	0x08005129
 8005190:	08005129 	.word	0x08005129
 8005194:	08005271 	.word	0x08005271
 8005198:	6833      	ldr	r3, [r6, #0]
 800519a:	1d1a      	adds	r2, r3, #4
 800519c:	681b      	ldr	r3, [r3, #0]
 800519e:	6032      	str	r2, [r6, #0]
 80051a0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80051a4:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 80051a8:	2301      	movs	r3, #1
 80051aa:	e09e      	b.n	80052ea <_printf_i+0x1ea>
 80051ac:	6833      	ldr	r3, [r6, #0]
 80051ae:	6820      	ldr	r0, [r4, #0]
 80051b0:	1d19      	adds	r1, r3, #4
 80051b2:	6031      	str	r1, [r6, #0]
 80051b4:	0606      	lsls	r6, r0, #24
 80051b6:	d501      	bpl.n	80051bc <_printf_i+0xbc>
 80051b8:	681d      	ldr	r5, [r3, #0]
 80051ba:	e003      	b.n	80051c4 <_printf_i+0xc4>
 80051bc:	0645      	lsls	r5, r0, #25
 80051be:	d5fb      	bpl.n	80051b8 <_printf_i+0xb8>
 80051c0:	f9b3 5000 	ldrsh.w	r5, [r3]
 80051c4:	2d00      	cmp	r5, #0
 80051c6:	da03      	bge.n	80051d0 <_printf_i+0xd0>
 80051c8:	232d      	movs	r3, #45	@ 0x2d
 80051ca:	426d      	negs	r5, r5
 80051cc:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80051d0:	230a      	movs	r3, #10
 80051d2:	4859      	ldr	r0, [pc, #356]	@ (8005338 <_printf_i+0x238>)
 80051d4:	e011      	b.n	80051fa <_printf_i+0xfa>
 80051d6:	6821      	ldr	r1, [r4, #0]
 80051d8:	6833      	ldr	r3, [r6, #0]
 80051da:	0608      	lsls	r0, r1, #24
 80051dc:	f853 5b04 	ldr.w	r5, [r3], #4
 80051e0:	d402      	bmi.n	80051e8 <_printf_i+0xe8>
 80051e2:	0649      	lsls	r1, r1, #25
 80051e4:	bf48      	it	mi
 80051e6:	b2ad      	uxthmi	r5, r5
 80051e8:	2f6f      	cmp	r7, #111	@ 0x6f
 80051ea:	6033      	str	r3, [r6, #0]
 80051ec:	bf14      	ite	ne
 80051ee:	230a      	movne	r3, #10
 80051f0:	2308      	moveq	r3, #8
 80051f2:	4851      	ldr	r0, [pc, #324]	@ (8005338 <_printf_i+0x238>)
 80051f4:	2100      	movs	r1, #0
 80051f6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80051fa:	6866      	ldr	r6, [r4, #4]
 80051fc:	2e00      	cmp	r6, #0
 80051fe:	bfa8      	it	ge
 8005200:	6821      	ldrge	r1, [r4, #0]
 8005202:	60a6      	str	r6, [r4, #8]
 8005204:	bfa4      	itt	ge
 8005206:	f021 0104 	bicge.w	r1, r1, #4
 800520a:	6021      	strge	r1, [r4, #0]
 800520c:	b90d      	cbnz	r5, 8005212 <_printf_i+0x112>
 800520e:	2e00      	cmp	r6, #0
 8005210:	d04b      	beq.n	80052aa <_printf_i+0x1aa>
 8005212:	4616      	mov	r6, r2
 8005214:	fbb5 f1f3 	udiv	r1, r5, r3
 8005218:	fb03 5711 	mls	r7, r3, r1, r5
 800521c:	5dc7      	ldrb	r7, [r0, r7]
 800521e:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8005222:	462f      	mov	r7, r5
 8005224:	42bb      	cmp	r3, r7
 8005226:	460d      	mov	r5, r1
 8005228:	d9f4      	bls.n	8005214 <_printf_i+0x114>
 800522a:	2b08      	cmp	r3, #8
 800522c:	d10b      	bne.n	8005246 <_printf_i+0x146>
 800522e:	6823      	ldr	r3, [r4, #0]
 8005230:	07df      	lsls	r7, r3, #31
 8005232:	d508      	bpl.n	8005246 <_printf_i+0x146>
 8005234:	6923      	ldr	r3, [r4, #16]
 8005236:	6861      	ldr	r1, [r4, #4]
 8005238:	4299      	cmp	r1, r3
 800523a:	bfde      	ittt	le
 800523c:	2330      	movle	r3, #48	@ 0x30
 800523e:	f806 3c01 	strble.w	r3, [r6, #-1]
 8005242:	f106 36ff 	addle.w	r6, r6, #4294967295	@ 0xffffffff
 8005246:	1b92      	subs	r2, r2, r6
 8005248:	6122      	str	r2, [r4, #16]
 800524a:	464b      	mov	r3, r9
 800524c:	4621      	mov	r1, r4
 800524e:	4640      	mov	r0, r8
 8005250:	f8cd a000 	str.w	sl, [sp]
 8005254:	aa03      	add	r2, sp, #12
 8005256:	f7ff fee1 	bl	800501c <_printf_common>
 800525a:	3001      	adds	r0, #1
 800525c:	d14a      	bne.n	80052f4 <_printf_i+0x1f4>
 800525e:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8005262:	b004      	add	sp, #16
 8005264:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005268:	6823      	ldr	r3, [r4, #0]
 800526a:	f043 0320 	orr.w	r3, r3, #32
 800526e:	6023      	str	r3, [r4, #0]
 8005270:	2778      	movs	r7, #120	@ 0x78
 8005272:	4832      	ldr	r0, [pc, #200]	@ (800533c <_printf_i+0x23c>)
 8005274:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8005278:	6823      	ldr	r3, [r4, #0]
 800527a:	6831      	ldr	r1, [r6, #0]
 800527c:	061f      	lsls	r7, r3, #24
 800527e:	f851 5b04 	ldr.w	r5, [r1], #4
 8005282:	d402      	bmi.n	800528a <_printf_i+0x18a>
 8005284:	065f      	lsls	r7, r3, #25
 8005286:	bf48      	it	mi
 8005288:	b2ad      	uxthmi	r5, r5
 800528a:	6031      	str	r1, [r6, #0]
 800528c:	07d9      	lsls	r1, r3, #31
 800528e:	bf44      	itt	mi
 8005290:	f043 0320 	orrmi.w	r3, r3, #32
 8005294:	6023      	strmi	r3, [r4, #0]
 8005296:	b11d      	cbz	r5, 80052a0 <_printf_i+0x1a0>
 8005298:	2310      	movs	r3, #16
 800529a:	e7ab      	b.n	80051f4 <_printf_i+0xf4>
 800529c:	4826      	ldr	r0, [pc, #152]	@ (8005338 <_printf_i+0x238>)
 800529e:	e7e9      	b.n	8005274 <_printf_i+0x174>
 80052a0:	6823      	ldr	r3, [r4, #0]
 80052a2:	f023 0320 	bic.w	r3, r3, #32
 80052a6:	6023      	str	r3, [r4, #0]
 80052a8:	e7f6      	b.n	8005298 <_printf_i+0x198>
 80052aa:	4616      	mov	r6, r2
 80052ac:	e7bd      	b.n	800522a <_printf_i+0x12a>
 80052ae:	6833      	ldr	r3, [r6, #0]
 80052b0:	6825      	ldr	r5, [r4, #0]
 80052b2:	1d18      	adds	r0, r3, #4
 80052b4:	6961      	ldr	r1, [r4, #20]
 80052b6:	6030      	str	r0, [r6, #0]
 80052b8:	062e      	lsls	r6, r5, #24
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	d501      	bpl.n	80052c2 <_printf_i+0x1c2>
 80052be:	6019      	str	r1, [r3, #0]
 80052c0:	e002      	b.n	80052c8 <_printf_i+0x1c8>
 80052c2:	0668      	lsls	r0, r5, #25
 80052c4:	d5fb      	bpl.n	80052be <_printf_i+0x1be>
 80052c6:	8019      	strh	r1, [r3, #0]
 80052c8:	2300      	movs	r3, #0
 80052ca:	4616      	mov	r6, r2
 80052cc:	6123      	str	r3, [r4, #16]
 80052ce:	e7bc      	b.n	800524a <_printf_i+0x14a>
 80052d0:	6833      	ldr	r3, [r6, #0]
 80052d2:	2100      	movs	r1, #0
 80052d4:	1d1a      	adds	r2, r3, #4
 80052d6:	6032      	str	r2, [r6, #0]
 80052d8:	681e      	ldr	r6, [r3, #0]
 80052da:	6862      	ldr	r2, [r4, #4]
 80052dc:	4630      	mov	r0, r6
 80052de:	f000 f907 	bl	80054f0 <memchr>
 80052e2:	b108      	cbz	r0, 80052e8 <_printf_i+0x1e8>
 80052e4:	1b80      	subs	r0, r0, r6
 80052e6:	6060      	str	r0, [r4, #4]
 80052e8:	6863      	ldr	r3, [r4, #4]
 80052ea:	6123      	str	r3, [r4, #16]
 80052ec:	2300      	movs	r3, #0
 80052ee:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80052f2:	e7aa      	b.n	800524a <_printf_i+0x14a>
 80052f4:	4632      	mov	r2, r6
 80052f6:	4649      	mov	r1, r9
 80052f8:	4640      	mov	r0, r8
 80052fa:	6923      	ldr	r3, [r4, #16]
 80052fc:	47d0      	blx	sl
 80052fe:	3001      	adds	r0, #1
 8005300:	d0ad      	beq.n	800525e <_printf_i+0x15e>
 8005302:	6823      	ldr	r3, [r4, #0]
 8005304:	079b      	lsls	r3, r3, #30
 8005306:	d413      	bmi.n	8005330 <_printf_i+0x230>
 8005308:	68e0      	ldr	r0, [r4, #12]
 800530a:	9b03      	ldr	r3, [sp, #12]
 800530c:	4298      	cmp	r0, r3
 800530e:	bfb8      	it	lt
 8005310:	4618      	movlt	r0, r3
 8005312:	e7a6      	b.n	8005262 <_printf_i+0x162>
 8005314:	2301      	movs	r3, #1
 8005316:	4632      	mov	r2, r6
 8005318:	4649      	mov	r1, r9
 800531a:	4640      	mov	r0, r8
 800531c:	47d0      	blx	sl
 800531e:	3001      	adds	r0, #1
 8005320:	d09d      	beq.n	800525e <_printf_i+0x15e>
 8005322:	3501      	adds	r5, #1
 8005324:	68e3      	ldr	r3, [r4, #12]
 8005326:	9903      	ldr	r1, [sp, #12]
 8005328:	1a5b      	subs	r3, r3, r1
 800532a:	42ab      	cmp	r3, r5
 800532c:	dcf2      	bgt.n	8005314 <_printf_i+0x214>
 800532e:	e7eb      	b.n	8005308 <_printf_i+0x208>
 8005330:	2500      	movs	r5, #0
 8005332:	f104 0619 	add.w	r6, r4, #25
 8005336:	e7f5      	b.n	8005324 <_printf_i+0x224>
 8005338:	0800575a 	.word	0x0800575a
 800533c:	0800576b 	.word	0x0800576b

08005340 <__swbuf_r>:
 8005340:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005342:	460e      	mov	r6, r1
 8005344:	4614      	mov	r4, r2
 8005346:	4605      	mov	r5, r0
 8005348:	b118      	cbz	r0, 8005352 <__swbuf_r+0x12>
 800534a:	6a03      	ldr	r3, [r0, #32]
 800534c:	b90b      	cbnz	r3, 8005352 <__swbuf_r+0x12>
 800534e:	f7ff fa43 	bl	80047d8 <__sinit>
 8005352:	69a3      	ldr	r3, [r4, #24]
 8005354:	60a3      	str	r3, [r4, #8]
 8005356:	89a3      	ldrh	r3, [r4, #12]
 8005358:	071a      	lsls	r2, r3, #28
 800535a:	d501      	bpl.n	8005360 <__swbuf_r+0x20>
 800535c:	6923      	ldr	r3, [r4, #16]
 800535e:	b943      	cbnz	r3, 8005372 <__swbuf_r+0x32>
 8005360:	4621      	mov	r1, r4
 8005362:	4628      	mov	r0, r5
 8005364:	f000 f82a 	bl	80053bc <__swsetup_r>
 8005368:	b118      	cbz	r0, 8005372 <__swbuf_r+0x32>
 800536a:	f04f 37ff 	mov.w	r7, #4294967295	@ 0xffffffff
 800536e:	4638      	mov	r0, r7
 8005370:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8005372:	6823      	ldr	r3, [r4, #0]
 8005374:	6922      	ldr	r2, [r4, #16]
 8005376:	b2f6      	uxtb	r6, r6
 8005378:	1a98      	subs	r0, r3, r2
 800537a:	6963      	ldr	r3, [r4, #20]
 800537c:	4637      	mov	r7, r6
 800537e:	4283      	cmp	r3, r0
 8005380:	dc05      	bgt.n	800538e <__swbuf_r+0x4e>
 8005382:	4621      	mov	r1, r4
 8005384:	4628      	mov	r0, r5
 8005386:	f7ff fcb9 	bl	8004cfc <_fflush_r>
 800538a:	2800      	cmp	r0, #0
 800538c:	d1ed      	bne.n	800536a <__swbuf_r+0x2a>
 800538e:	68a3      	ldr	r3, [r4, #8]
 8005390:	3b01      	subs	r3, #1
 8005392:	60a3      	str	r3, [r4, #8]
 8005394:	6823      	ldr	r3, [r4, #0]
 8005396:	1c5a      	adds	r2, r3, #1
 8005398:	6022      	str	r2, [r4, #0]
 800539a:	701e      	strb	r6, [r3, #0]
 800539c:	6962      	ldr	r2, [r4, #20]
 800539e:	1c43      	adds	r3, r0, #1
 80053a0:	429a      	cmp	r2, r3
 80053a2:	d004      	beq.n	80053ae <__swbuf_r+0x6e>
 80053a4:	89a3      	ldrh	r3, [r4, #12]
 80053a6:	07db      	lsls	r3, r3, #31
 80053a8:	d5e1      	bpl.n	800536e <__swbuf_r+0x2e>
 80053aa:	2e0a      	cmp	r6, #10
 80053ac:	d1df      	bne.n	800536e <__swbuf_r+0x2e>
 80053ae:	4621      	mov	r1, r4
 80053b0:	4628      	mov	r0, r5
 80053b2:	f7ff fca3 	bl	8004cfc <_fflush_r>
 80053b6:	2800      	cmp	r0, #0
 80053b8:	d0d9      	beq.n	800536e <__swbuf_r+0x2e>
 80053ba:	e7d6      	b.n	800536a <__swbuf_r+0x2a>

080053bc <__swsetup_r>:
 80053bc:	b538      	push	{r3, r4, r5, lr}
 80053be:	4b29      	ldr	r3, [pc, #164]	@ (8005464 <__swsetup_r+0xa8>)
 80053c0:	4605      	mov	r5, r0
 80053c2:	6818      	ldr	r0, [r3, #0]
 80053c4:	460c      	mov	r4, r1
 80053c6:	b118      	cbz	r0, 80053d0 <__swsetup_r+0x14>
 80053c8:	6a03      	ldr	r3, [r0, #32]
 80053ca:	b90b      	cbnz	r3, 80053d0 <__swsetup_r+0x14>
 80053cc:	f7ff fa04 	bl	80047d8 <__sinit>
 80053d0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80053d4:	0719      	lsls	r1, r3, #28
 80053d6:	d422      	bmi.n	800541e <__swsetup_r+0x62>
 80053d8:	06da      	lsls	r2, r3, #27
 80053da:	d407      	bmi.n	80053ec <__swsetup_r+0x30>
 80053dc:	2209      	movs	r2, #9
 80053de:	602a      	str	r2, [r5, #0]
 80053e0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80053e4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80053e8:	81a3      	strh	r3, [r4, #12]
 80053ea:	e033      	b.n	8005454 <__swsetup_r+0x98>
 80053ec:	0758      	lsls	r0, r3, #29
 80053ee:	d512      	bpl.n	8005416 <__swsetup_r+0x5a>
 80053f0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80053f2:	b141      	cbz	r1, 8005406 <__swsetup_r+0x4a>
 80053f4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80053f8:	4299      	cmp	r1, r3
 80053fa:	d002      	beq.n	8005402 <__swsetup_r+0x46>
 80053fc:	4628      	mov	r0, r5
 80053fe:	f7ff faff 	bl	8004a00 <_free_r>
 8005402:	2300      	movs	r3, #0
 8005404:	6363      	str	r3, [r4, #52]	@ 0x34
 8005406:	89a3      	ldrh	r3, [r4, #12]
 8005408:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 800540c:	81a3      	strh	r3, [r4, #12]
 800540e:	2300      	movs	r3, #0
 8005410:	6063      	str	r3, [r4, #4]
 8005412:	6923      	ldr	r3, [r4, #16]
 8005414:	6023      	str	r3, [r4, #0]
 8005416:	89a3      	ldrh	r3, [r4, #12]
 8005418:	f043 0308 	orr.w	r3, r3, #8
 800541c:	81a3      	strh	r3, [r4, #12]
 800541e:	6923      	ldr	r3, [r4, #16]
 8005420:	b94b      	cbnz	r3, 8005436 <__swsetup_r+0x7a>
 8005422:	89a3      	ldrh	r3, [r4, #12]
 8005424:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8005428:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800542c:	d003      	beq.n	8005436 <__swsetup_r+0x7a>
 800542e:	4621      	mov	r1, r4
 8005430:	4628      	mov	r0, r5
 8005432:	f000 f890 	bl	8005556 <__smakebuf_r>
 8005436:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800543a:	f013 0201 	ands.w	r2, r3, #1
 800543e:	d00a      	beq.n	8005456 <__swsetup_r+0x9a>
 8005440:	2200      	movs	r2, #0
 8005442:	60a2      	str	r2, [r4, #8]
 8005444:	6962      	ldr	r2, [r4, #20]
 8005446:	4252      	negs	r2, r2
 8005448:	61a2      	str	r2, [r4, #24]
 800544a:	6922      	ldr	r2, [r4, #16]
 800544c:	b942      	cbnz	r2, 8005460 <__swsetup_r+0xa4>
 800544e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8005452:	d1c5      	bne.n	80053e0 <__swsetup_r+0x24>
 8005454:	bd38      	pop	{r3, r4, r5, pc}
 8005456:	0799      	lsls	r1, r3, #30
 8005458:	bf58      	it	pl
 800545a:	6962      	ldrpl	r2, [r4, #20]
 800545c:	60a2      	str	r2, [r4, #8]
 800545e:	e7f4      	b.n	800544a <__swsetup_r+0x8e>
 8005460:	2000      	movs	r0, #0
 8005462:	e7f7      	b.n	8005454 <__swsetup_r+0x98>
 8005464:	20000040 	.word	0x20000040

08005468 <_raise_r>:
 8005468:	291f      	cmp	r1, #31
 800546a:	b538      	push	{r3, r4, r5, lr}
 800546c:	4605      	mov	r5, r0
 800546e:	460c      	mov	r4, r1
 8005470:	d904      	bls.n	800547c <_raise_r+0x14>
 8005472:	2316      	movs	r3, #22
 8005474:	6003      	str	r3, [r0, #0]
 8005476:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800547a:	bd38      	pop	{r3, r4, r5, pc}
 800547c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800547e:	b112      	cbz	r2, 8005486 <_raise_r+0x1e>
 8005480:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8005484:	b94b      	cbnz	r3, 800549a <_raise_r+0x32>
 8005486:	4628      	mov	r0, r5
 8005488:	f000 f830 	bl	80054ec <_getpid_r>
 800548c:	4622      	mov	r2, r4
 800548e:	4601      	mov	r1, r0
 8005490:	4628      	mov	r0, r5
 8005492:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005496:	f000 b817 	b.w	80054c8 <_kill_r>
 800549a:	2b01      	cmp	r3, #1
 800549c:	d00a      	beq.n	80054b4 <_raise_r+0x4c>
 800549e:	1c59      	adds	r1, r3, #1
 80054a0:	d103      	bne.n	80054aa <_raise_r+0x42>
 80054a2:	2316      	movs	r3, #22
 80054a4:	6003      	str	r3, [r0, #0]
 80054a6:	2001      	movs	r0, #1
 80054a8:	e7e7      	b.n	800547a <_raise_r+0x12>
 80054aa:	2100      	movs	r1, #0
 80054ac:	4620      	mov	r0, r4
 80054ae:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 80054b2:	4798      	blx	r3
 80054b4:	2000      	movs	r0, #0
 80054b6:	e7e0      	b.n	800547a <_raise_r+0x12>

080054b8 <raise>:
 80054b8:	4b02      	ldr	r3, [pc, #8]	@ (80054c4 <raise+0xc>)
 80054ba:	4601      	mov	r1, r0
 80054bc:	6818      	ldr	r0, [r3, #0]
 80054be:	f7ff bfd3 	b.w	8005468 <_raise_r>
 80054c2:	bf00      	nop
 80054c4:	20000040 	.word	0x20000040

080054c8 <_kill_r>:
 80054c8:	b538      	push	{r3, r4, r5, lr}
 80054ca:	2300      	movs	r3, #0
 80054cc:	4d06      	ldr	r5, [pc, #24]	@ (80054e8 <_kill_r+0x20>)
 80054ce:	4604      	mov	r4, r0
 80054d0:	4608      	mov	r0, r1
 80054d2:	4611      	mov	r1, r2
 80054d4:	602b      	str	r3, [r5, #0]
 80054d6:	f7fd f8da 	bl	800268e <_kill>
 80054da:	1c43      	adds	r3, r0, #1
 80054dc:	d102      	bne.n	80054e4 <_kill_r+0x1c>
 80054de:	682b      	ldr	r3, [r5, #0]
 80054e0:	b103      	cbz	r3, 80054e4 <_kill_r+0x1c>
 80054e2:	6023      	str	r3, [r4, #0]
 80054e4:	bd38      	pop	{r3, r4, r5, pc}
 80054e6:	bf00      	nop
 80054e8:	2000141c 	.word	0x2000141c

080054ec <_getpid_r>:
 80054ec:	f7fd b8c8 	b.w	8002680 <_getpid>

080054f0 <memchr>:
 80054f0:	4603      	mov	r3, r0
 80054f2:	b510      	push	{r4, lr}
 80054f4:	b2c9      	uxtb	r1, r1
 80054f6:	4402      	add	r2, r0
 80054f8:	4293      	cmp	r3, r2
 80054fa:	4618      	mov	r0, r3
 80054fc:	d101      	bne.n	8005502 <memchr+0x12>
 80054fe:	2000      	movs	r0, #0
 8005500:	e003      	b.n	800550a <memchr+0x1a>
 8005502:	7804      	ldrb	r4, [r0, #0]
 8005504:	3301      	adds	r3, #1
 8005506:	428c      	cmp	r4, r1
 8005508:	d1f6      	bne.n	80054f8 <memchr+0x8>
 800550a:	bd10      	pop	{r4, pc}

0800550c <__swhatbuf_r>:
 800550c:	b570      	push	{r4, r5, r6, lr}
 800550e:	460c      	mov	r4, r1
 8005510:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8005514:	4615      	mov	r5, r2
 8005516:	2900      	cmp	r1, #0
 8005518:	461e      	mov	r6, r3
 800551a:	b096      	sub	sp, #88	@ 0x58
 800551c:	da0c      	bge.n	8005538 <__swhatbuf_r+0x2c>
 800551e:	89a3      	ldrh	r3, [r4, #12]
 8005520:	2100      	movs	r1, #0
 8005522:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8005526:	bf14      	ite	ne
 8005528:	2340      	movne	r3, #64	@ 0x40
 800552a:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800552e:	2000      	movs	r0, #0
 8005530:	6031      	str	r1, [r6, #0]
 8005532:	602b      	str	r3, [r5, #0]
 8005534:	b016      	add	sp, #88	@ 0x58
 8005536:	bd70      	pop	{r4, r5, r6, pc}
 8005538:	466a      	mov	r2, sp
 800553a:	f000 f849 	bl	80055d0 <_fstat_r>
 800553e:	2800      	cmp	r0, #0
 8005540:	dbed      	blt.n	800551e <__swhatbuf_r+0x12>
 8005542:	9901      	ldr	r1, [sp, #4]
 8005544:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8005548:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800554c:	4259      	negs	r1, r3
 800554e:	4159      	adcs	r1, r3
 8005550:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8005554:	e7eb      	b.n	800552e <__swhatbuf_r+0x22>

08005556 <__smakebuf_r>:
 8005556:	898b      	ldrh	r3, [r1, #12]
 8005558:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800555a:	079d      	lsls	r5, r3, #30
 800555c:	4606      	mov	r6, r0
 800555e:	460c      	mov	r4, r1
 8005560:	d507      	bpl.n	8005572 <__smakebuf_r+0x1c>
 8005562:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8005566:	6023      	str	r3, [r4, #0]
 8005568:	6123      	str	r3, [r4, #16]
 800556a:	2301      	movs	r3, #1
 800556c:	6163      	str	r3, [r4, #20]
 800556e:	b003      	add	sp, #12
 8005570:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005572:	466a      	mov	r2, sp
 8005574:	ab01      	add	r3, sp, #4
 8005576:	f7ff ffc9 	bl	800550c <__swhatbuf_r>
 800557a:	9f00      	ldr	r7, [sp, #0]
 800557c:	4605      	mov	r5, r0
 800557e:	4639      	mov	r1, r7
 8005580:	4630      	mov	r0, r6
 8005582:	f7ff faaf 	bl	8004ae4 <_malloc_r>
 8005586:	b948      	cbnz	r0, 800559c <__smakebuf_r+0x46>
 8005588:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800558c:	059a      	lsls	r2, r3, #22
 800558e:	d4ee      	bmi.n	800556e <__smakebuf_r+0x18>
 8005590:	f023 0303 	bic.w	r3, r3, #3
 8005594:	f043 0302 	orr.w	r3, r3, #2
 8005598:	81a3      	strh	r3, [r4, #12]
 800559a:	e7e2      	b.n	8005562 <__smakebuf_r+0xc>
 800559c:	89a3      	ldrh	r3, [r4, #12]
 800559e:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80055a2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80055a6:	81a3      	strh	r3, [r4, #12]
 80055a8:	9b01      	ldr	r3, [sp, #4]
 80055aa:	6020      	str	r0, [r4, #0]
 80055ac:	b15b      	cbz	r3, 80055c6 <__smakebuf_r+0x70>
 80055ae:	4630      	mov	r0, r6
 80055b0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80055b4:	f000 f81e 	bl	80055f4 <_isatty_r>
 80055b8:	b128      	cbz	r0, 80055c6 <__smakebuf_r+0x70>
 80055ba:	89a3      	ldrh	r3, [r4, #12]
 80055bc:	f023 0303 	bic.w	r3, r3, #3
 80055c0:	f043 0301 	orr.w	r3, r3, #1
 80055c4:	81a3      	strh	r3, [r4, #12]
 80055c6:	89a3      	ldrh	r3, [r4, #12]
 80055c8:	431d      	orrs	r5, r3
 80055ca:	81a5      	strh	r5, [r4, #12]
 80055cc:	e7cf      	b.n	800556e <__smakebuf_r+0x18>
	...

080055d0 <_fstat_r>:
 80055d0:	b538      	push	{r3, r4, r5, lr}
 80055d2:	2300      	movs	r3, #0
 80055d4:	4d06      	ldr	r5, [pc, #24]	@ (80055f0 <_fstat_r+0x20>)
 80055d6:	4604      	mov	r4, r0
 80055d8:	4608      	mov	r0, r1
 80055da:	4611      	mov	r1, r2
 80055dc:	602b      	str	r3, [r5, #0]
 80055de:	f7fd f8b5 	bl	800274c <_fstat>
 80055e2:	1c43      	adds	r3, r0, #1
 80055e4:	d102      	bne.n	80055ec <_fstat_r+0x1c>
 80055e6:	682b      	ldr	r3, [r5, #0]
 80055e8:	b103      	cbz	r3, 80055ec <_fstat_r+0x1c>
 80055ea:	6023      	str	r3, [r4, #0]
 80055ec:	bd38      	pop	{r3, r4, r5, pc}
 80055ee:	bf00      	nop
 80055f0:	2000141c 	.word	0x2000141c

080055f4 <_isatty_r>:
 80055f4:	b538      	push	{r3, r4, r5, lr}
 80055f6:	2300      	movs	r3, #0
 80055f8:	4d05      	ldr	r5, [pc, #20]	@ (8005610 <_isatty_r+0x1c>)
 80055fa:	4604      	mov	r4, r0
 80055fc:	4608      	mov	r0, r1
 80055fe:	602b      	str	r3, [r5, #0]
 8005600:	f7fd f8b3 	bl	800276a <_isatty>
 8005604:	1c43      	adds	r3, r0, #1
 8005606:	d102      	bne.n	800560e <_isatty_r+0x1a>
 8005608:	682b      	ldr	r3, [r5, #0]
 800560a:	b103      	cbz	r3, 800560e <_isatty_r+0x1a>
 800560c:	6023      	str	r3, [r4, #0]
 800560e:	bd38      	pop	{r3, r4, r5, pc}
 8005610:	2000141c 	.word	0x2000141c

08005614 <_init>:
 8005614:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005616:	bf00      	nop
 8005618:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800561a:	bc08      	pop	{r3}
 800561c:	469e      	mov	lr, r3
 800561e:	4770      	bx	lr

08005620 <_fini>:
 8005620:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8005622:	bf00      	nop
 8005624:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8005626:	bc08      	pop	{r3}
 8005628:	469e      	mov	lr, r3
 800562a:	4770      	bx	lr
