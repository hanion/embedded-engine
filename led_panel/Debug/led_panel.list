
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000035d0  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000030  080036dc  080036dc  000046dc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800370c  0800370c  00005014  2**0
                  CONTENTS
  4 .ARM          00000000  0800370c  0800370c  00005014  2**0
                  CONTENTS
  5 .preinit_array 00000000  0800370c  0800370c  00005014  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800370c  0800370c  0000470c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003710  08003710  00004710  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000014  20000000  08003714  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00002130  20000018  08003728  00005018  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20002148  08003728  00005148  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  00005014  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000a8ab  00000000  00000000  0000503d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e48  00000000  00000000  0000f8e8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c80  00000000  00000000  00011730  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000009ba  00000000  00000000  000123b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00001bc6  00000000  00000000  00012d6a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000d329  00000000  00000000  00014930  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a758  00000000  00000000  00021c59  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac3b1  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000034a4  00000000  00000000  000ac3f4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000af898  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	20000018 	.word	0x20000018
 8000128:	00000000 	.word	0x00000000
 800012c:	080036c4 	.word	0x080036c4

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	2000001c 	.word	0x2000001c
 8000148:	080036c4 	.word	0x080036c4

0800014c <__aeabi_drsub>:
 800014c:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000150:	e002      	b.n	8000158 <__adddf3>
 8000152:	bf00      	nop

08000154 <__aeabi_dsub>:
 8000154:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

08000158 <__adddf3>:
 8000158:	b530      	push	{r4, r5, lr}
 800015a:	ea4f 0441 	mov.w	r4, r1, lsl #1
 800015e:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000162:	ea94 0f05 	teq	r4, r5
 8000166:	bf08      	it	eq
 8000168:	ea90 0f02 	teqeq	r0, r2
 800016c:	bf1f      	itttt	ne
 800016e:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000172:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000176:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800017a:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800017e:	f000 80e2 	beq.w	8000346 <__adddf3+0x1ee>
 8000182:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000186:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800018a:	bfb8      	it	lt
 800018c:	426d      	neglt	r5, r5
 800018e:	dd0c      	ble.n	80001aa <__adddf3+0x52>
 8000190:	442c      	add	r4, r5
 8000192:	ea80 0202 	eor.w	r2, r0, r2
 8000196:	ea81 0303 	eor.w	r3, r1, r3
 800019a:	ea82 0000 	eor.w	r0, r2, r0
 800019e:	ea83 0101 	eor.w	r1, r3, r1
 80001a2:	ea80 0202 	eor.w	r2, r0, r2
 80001a6:	ea81 0303 	eor.w	r3, r1, r3
 80001aa:	2d36      	cmp	r5, #54	@ 0x36
 80001ac:	bf88      	it	hi
 80001ae:	bd30      	pophi	{r4, r5, pc}
 80001b0:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80001b4:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80001b8:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 80001bc:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80001c0:	d002      	beq.n	80001c8 <__adddf3+0x70>
 80001c2:	4240      	negs	r0, r0
 80001c4:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80001c8:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 80001cc:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80001d0:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80001d4:	d002      	beq.n	80001dc <__adddf3+0x84>
 80001d6:	4252      	negs	r2, r2
 80001d8:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80001dc:	ea94 0f05 	teq	r4, r5
 80001e0:	f000 80a7 	beq.w	8000332 <__adddf3+0x1da>
 80001e4:	f1a4 0401 	sub.w	r4, r4, #1
 80001e8:	f1d5 0e20 	rsbs	lr, r5, #32
 80001ec:	db0d      	blt.n	800020a <__adddf3+0xb2>
 80001ee:	fa02 fc0e 	lsl.w	ip, r2, lr
 80001f2:	fa22 f205 	lsr.w	r2, r2, r5
 80001f6:	1880      	adds	r0, r0, r2
 80001f8:	f141 0100 	adc.w	r1, r1, #0
 80001fc:	fa03 f20e 	lsl.w	r2, r3, lr
 8000200:	1880      	adds	r0, r0, r2
 8000202:	fa43 f305 	asr.w	r3, r3, r5
 8000206:	4159      	adcs	r1, r3
 8000208:	e00e      	b.n	8000228 <__adddf3+0xd0>
 800020a:	f1a5 0520 	sub.w	r5, r5, #32
 800020e:	f10e 0e20 	add.w	lr, lr, #32
 8000212:	2a01      	cmp	r2, #1
 8000214:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000218:	bf28      	it	cs
 800021a:	f04c 0c02 	orrcs.w	ip, ip, #2
 800021e:	fa43 f305 	asr.w	r3, r3, r5
 8000222:	18c0      	adds	r0, r0, r3
 8000224:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 8000228:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 800022c:	d507      	bpl.n	800023e <__adddf3+0xe6>
 800022e:	f04f 0e00 	mov.w	lr, #0
 8000232:	f1dc 0c00 	rsbs	ip, ip, #0
 8000236:	eb7e 0000 	sbcs.w	r0, lr, r0
 800023a:	eb6e 0101 	sbc.w	r1, lr, r1
 800023e:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000242:	d31b      	bcc.n	800027c <__adddf3+0x124>
 8000244:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 8000248:	d30c      	bcc.n	8000264 <__adddf3+0x10c>
 800024a:	0849      	lsrs	r1, r1, #1
 800024c:	ea5f 0030 	movs.w	r0, r0, rrx
 8000250:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000254:	f104 0401 	add.w	r4, r4, #1
 8000258:	ea4f 5244 	mov.w	r2, r4, lsl #21
 800025c:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 8000260:	f080 809a 	bcs.w	8000398 <__adddf3+0x240>
 8000264:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 8000268:	bf08      	it	eq
 800026a:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 800026e:	f150 0000 	adcs.w	r0, r0, #0
 8000272:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000276:	ea41 0105 	orr.w	r1, r1, r5
 800027a:	bd30      	pop	{r4, r5, pc}
 800027c:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000280:	4140      	adcs	r0, r0
 8000282:	eb41 0101 	adc.w	r1, r1, r1
 8000286:	3c01      	subs	r4, #1
 8000288:	bf28      	it	cs
 800028a:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 800028e:	d2e9      	bcs.n	8000264 <__adddf3+0x10c>
 8000290:	f091 0f00 	teq	r1, #0
 8000294:	bf04      	itt	eq
 8000296:	4601      	moveq	r1, r0
 8000298:	2000      	moveq	r0, #0
 800029a:	fab1 f381 	clz	r3, r1
 800029e:	bf08      	it	eq
 80002a0:	3320      	addeq	r3, #32
 80002a2:	f1a3 030b 	sub.w	r3, r3, #11
 80002a6:	f1b3 0220 	subs.w	r2, r3, #32
 80002aa:	da0c      	bge.n	80002c6 <__adddf3+0x16e>
 80002ac:	320c      	adds	r2, #12
 80002ae:	dd08      	ble.n	80002c2 <__adddf3+0x16a>
 80002b0:	f102 0c14 	add.w	ip, r2, #20
 80002b4:	f1c2 020c 	rsb	r2, r2, #12
 80002b8:	fa01 f00c 	lsl.w	r0, r1, ip
 80002bc:	fa21 f102 	lsr.w	r1, r1, r2
 80002c0:	e00c      	b.n	80002dc <__adddf3+0x184>
 80002c2:	f102 0214 	add.w	r2, r2, #20
 80002c6:	bfd8      	it	le
 80002c8:	f1c2 0c20 	rsble	ip, r2, #32
 80002cc:	fa01 f102 	lsl.w	r1, r1, r2
 80002d0:	fa20 fc0c 	lsr.w	ip, r0, ip
 80002d4:	bfdc      	itt	le
 80002d6:	ea41 010c 	orrle.w	r1, r1, ip
 80002da:	4090      	lslle	r0, r2
 80002dc:	1ae4      	subs	r4, r4, r3
 80002de:	bfa2      	ittt	ge
 80002e0:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80002e4:	4329      	orrge	r1, r5
 80002e6:	bd30      	popge	{r4, r5, pc}
 80002e8:	ea6f 0404 	mvn.w	r4, r4
 80002ec:	3c1f      	subs	r4, #31
 80002ee:	da1c      	bge.n	800032a <__adddf3+0x1d2>
 80002f0:	340c      	adds	r4, #12
 80002f2:	dc0e      	bgt.n	8000312 <__adddf3+0x1ba>
 80002f4:	f104 0414 	add.w	r4, r4, #20
 80002f8:	f1c4 0220 	rsb	r2, r4, #32
 80002fc:	fa20 f004 	lsr.w	r0, r0, r4
 8000300:	fa01 f302 	lsl.w	r3, r1, r2
 8000304:	ea40 0003 	orr.w	r0, r0, r3
 8000308:	fa21 f304 	lsr.w	r3, r1, r4
 800030c:	ea45 0103 	orr.w	r1, r5, r3
 8000310:	bd30      	pop	{r4, r5, pc}
 8000312:	f1c4 040c 	rsb	r4, r4, #12
 8000316:	f1c4 0220 	rsb	r2, r4, #32
 800031a:	fa20 f002 	lsr.w	r0, r0, r2
 800031e:	fa01 f304 	lsl.w	r3, r1, r4
 8000322:	ea40 0003 	orr.w	r0, r0, r3
 8000326:	4629      	mov	r1, r5
 8000328:	bd30      	pop	{r4, r5, pc}
 800032a:	fa21 f004 	lsr.w	r0, r1, r4
 800032e:	4629      	mov	r1, r5
 8000330:	bd30      	pop	{r4, r5, pc}
 8000332:	f094 0f00 	teq	r4, #0
 8000336:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800033a:	bf06      	itte	eq
 800033c:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000340:	3401      	addeq	r4, #1
 8000342:	3d01      	subne	r5, #1
 8000344:	e74e      	b.n	80001e4 <__adddf3+0x8c>
 8000346:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800034a:	bf18      	it	ne
 800034c:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000350:	d029      	beq.n	80003a6 <__adddf3+0x24e>
 8000352:	ea94 0f05 	teq	r4, r5
 8000356:	bf08      	it	eq
 8000358:	ea90 0f02 	teqeq	r0, r2
 800035c:	d005      	beq.n	800036a <__adddf3+0x212>
 800035e:	ea54 0c00 	orrs.w	ip, r4, r0
 8000362:	bf04      	itt	eq
 8000364:	4619      	moveq	r1, r3
 8000366:	4610      	moveq	r0, r2
 8000368:	bd30      	pop	{r4, r5, pc}
 800036a:	ea91 0f03 	teq	r1, r3
 800036e:	bf1e      	ittt	ne
 8000370:	2100      	movne	r1, #0
 8000372:	2000      	movne	r0, #0
 8000374:	bd30      	popne	{r4, r5, pc}
 8000376:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800037a:	d105      	bne.n	8000388 <__adddf3+0x230>
 800037c:	0040      	lsls	r0, r0, #1
 800037e:	4149      	adcs	r1, r1
 8000380:	bf28      	it	cs
 8000382:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 8000386:	bd30      	pop	{r4, r5, pc}
 8000388:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 800038c:	bf3c      	itt	cc
 800038e:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 8000392:	bd30      	popcc	{r4, r5, pc}
 8000394:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000398:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 800039c:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80003a0:	f04f 0000 	mov.w	r0, #0
 80003a4:	bd30      	pop	{r4, r5, pc}
 80003a6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003aa:	bf1a      	itte	ne
 80003ac:	4619      	movne	r1, r3
 80003ae:	4610      	movne	r0, r2
 80003b0:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80003b4:	bf1c      	itt	ne
 80003b6:	460b      	movne	r3, r1
 80003b8:	4602      	movne	r2, r0
 80003ba:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80003be:	bf06      	itte	eq
 80003c0:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80003c4:	ea91 0f03 	teqeq	r1, r3
 80003c8:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	bf00      	nop

080003d0 <__aeabi_ui2d>:
 80003d0:	f090 0f00 	teq	r0, #0
 80003d4:	bf04      	itt	eq
 80003d6:	2100      	moveq	r1, #0
 80003d8:	4770      	bxeq	lr
 80003da:	b530      	push	{r4, r5, lr}
 80003dc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80003e0:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80003e4:	f04f 0500 	mov.w	r5, #0
 80003e8:	f04f 0100 	mov.w	r1, #0
 80003ec:	e750      	b.n	8000290 <__adddf3+0x138>
 80003ee:	bf00      	nop

080003f0 <__aeabi_i2d>:
 80003f0:	f090 0f00 	teq	r0, #0
 80003f4:	bf04      	itt	eq
 80003f6:	2100      	moveq	r1, #0
 80003f8:	4770      	bxeq	lr
 80003fa:	b530      	push	{r4, r5, lr}
 80003fc:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000400:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000404:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 8000408:	bf48      	it	mi
 800040a:	4240      	negmi	r0, r0
 800040c:	f04f 0100 	mov.w	r1, #0
 8000410:	e73e      	b.n	8000290 <__adddf3+0x138>
 8000412:	bf00      	nop

08000414 <__aeabi_f2d>:
 8000414:	0042      	lsls	r2, r0, #1
 8000416:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800041a:	ea4f 0131 	mov.w	r1, r1, rrx
 800041e:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000422:	bf1f      	itttt	ne
 8000424:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 8000428:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 800042c:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000430:	4770      	bxne	lr
 8000432:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 8000436:	bf08      	it	eq
 8000438:	4770      	bxeq	lr
 800043a:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 800043e:	bf04      	itt	eq
 8000440:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000444:	4770      	bxeq	lr
 8000446:	b530      	push	{r4, r5, lr}
 8000448:	f44f 7460 	mov.w	r4, #896	@ 0x380
 800044c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000450:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000454:	e71c      	b.n	8000290 <__adddf3+0x138>
 8000456:	bf00      	nop

08000458 <__aeabi_ul2d>:
 8000458:	ea50 0201 	orrs.w	r2, r0, r1
 800045c:	bf08      	it	eq
 800045e:	4770      	bxeq	lr
 8000460:	b530      	push	{r4, r5, lr}
 8000462:	f04f 0500 	mov.w	r5, #0
 8000466:	e00a      	b.n	800047e <__aeabi_l2d+0x16>

08000468 <__aeabi_l2d>:
 8000468:	ea50 0201 	orrs.w	r2, r0, r1
 800046c:	bf08      	it	eq
 800046e:	4770      	bxeq	lr
 8000470:	b530      	push	{r4, r5, lr}
 8000472:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 8000476:	d502      	bpl.n	800047e <__aeabi_l2d+0x16>
 8000478:	4240      	negs	r0, r0
 800047a:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800047e:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000482:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000486:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800048a:	f43f aed8 	beq.w	800023e <__adddf3+0xe6>
 800048e:	f04f 0203 	mov.w	r2, #3
 8000492:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000496:	bf18      	it	ne
 8000498:	3203      	addne	r2, #3
 800049a:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800049e:	bf18      	it	ne
 80004a0:	3203      	addne	r2, #3
 80004a2:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80004a6:	f1c2 0320 	rsb	r3, r2, #32
 80004aa:	fa00 fc03 	lsl.w	ip, r0, r3
 80004ae:	fa20 f002 	lsr.w	r0, r0, r2
 80004b2:	fa01 fe03 	lsl.w	lr, r1, r3
 80004b6:	ea40 000e 	orr.w	r0, r0, lr
 80004ba:	fa21 f102 	lsr.w	r1, r1, r2
 80004be:	4414      	add	r4, r2
 80004c0:	e6bd      	b.n	800023e <__adddf3+0xe6>
 80004c2:	bf00      	nop

080004c4 <__aeabi_dmul>:
 80004c4:	b570      	push	{r4, r5, r6, lr}
 80004c6:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 80004ca:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 80004ce:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80004d2:	bf1d      	ittte	ne
 80004d4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80004d8:	ea94 0f0c 	teqne	r4, ip
 80004dc:	ea95 0f0c 	teqne	r5, ip
 80004e0:	f000 f8de 	bleq	80006a0 <__aeabi_dmul+0x1dc>
 80004e4:	442c      	add	r4, r5
 80004e6:	ea81 0603 	eor.w	r6, r1, r3
 80004ea:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80004ee:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80004f2:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80004f6:	bf18      	it	ne
 80004f8:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80004fc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000500:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000504:	d038      	beq.n	8000578 <__aeabi_dmul+0xb4>
 8000506:	fba0 ce02 	umull	ip, lr, r0, r2
 800050a:	f04f 0500 	mov.w	r5, #0
 800050e:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000512:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 8000516:	fbe0 e503 	umlal	lr, r5, r0, r3
 800051a:	f04f 0600 	mov.w	r6, #0
 800051e:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000522:	f09c 0f00 	teq	ip, #0
 8000526:	bf18      	it	ne
 8000528:	f04e 0e01 	orrne.w	lr, lr, #1
 800052c:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000530:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000534:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 8000538:	d204      	bcs.n	8000544 <__aeabi_dmul+0x80>
 800053a:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 800053e:	416d      	adcs	r5, r5
 8000540:	eb46 0606 	adc.w	r6, r6, r6
 8000544:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 8000548:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 800054c:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000550:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000554:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 8000558:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800055c:	bf88      	it	hi
 800055e:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000562:	d81e      	bhi.n	80005a2 <__aeabi_dmul+0xde>
 8000564:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 8000568:	bf08      	it	eq
 800056a:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 800056e:	f150 0000 	adcs.w	r0, r0, #0
 8000572:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000576:	bd70      	pop	{r4, r5, r6, pc}
 8000578:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 800057c:	ea46 0101 	orr.w	r1, r6, r1
 8000580:	ea40 0002 	orr.w	r0, r0, r2
 8000584:	ea81 0103 	eor.w	r1, r1, r3
 8000588:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 800058c:	bfc2      	ittt	gt
 800058e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000592:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000596:	bd70      	popgt	{r4, r5, r6, pc}
 8000598:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 800059c:	f04f 0e00 	mov.w	lr, #0
 80005a0:	3c01      	subs	r4, #1
 80005a2:	f300 80ab 	bgt.w	80006fc <__aeabi_dmul+0x238>
 80005a6:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80005aa:	bfde      	ittt	le
 80005ac:	2000      	movle	r0, #0
 80005ae:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80005b2:	bd70      	pople	{r4, r5, r6, pc}
 80005b4:	f1c4 0400 	rsb	r4, r4, #0
 80005b8:	3c20      	subs	r4, #32
 80005ba:	da35      	bge.n	8000628 <__aeabi_dmul+0x164>
 80005bc:	340c      	adds	r4, #12
 80005be:	dc1b      	bgt.n	80005f8 <__aeabi_dmul+0x134>
 80005c0:	f104 0414 	add.w	r4, r4, #20
 80005c4:	f1c4 0520 	rsb	r5, r4, #32
 80005c8:	fa00 f305 	lsl.w	r3, r0, r5
 80005cc:	fa20 f004 	lsr.w	r0, r0, r4
 80005d0:	fa01 f205 	lsl.w	r2, r1, r5
 80005d4:	ea40 0002 	orr.w	r0, r0, r2
 80005d8:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 80005dc:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 80005e0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80005e4:	fa21 f604 	lsr.w	r6, r1, r4
 80005e8:	eb42 0106 	adc.w	r1, r2, r6
 80005ec:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80005f0:	bf08      	it	eq
 80005f2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80005f6:	bd70      	pop	{r4, r5, r6, pc}
 80005f8:	f1c4 040c 	rsb	r4, r4, #12
 80005fc:	f1c4 0520 	rsb	r5, r4, #32
 8000600:	fa00 f304 	lsl.w	r3, r0, r4
 8000604:	fa20 f005 	lsr.w	r0, r0, r5
 8000608:	fa01 f204 	lsl.w	r2, r1, r4
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000614:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000618:	f141 0100 	adc.w	r1, r1, #0
 800061c:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000620:	bf08      	it	eq
 8000622:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000626:	bd70      	pop	{r4, r5, r6, pc}
 8000628:	f1c4 0520 	rsb	r5, r4, #32
 800062c:	fa00 f205 	lsl.w	r2, r0, r5
 8000630:	ea4e 0e02 	orr.w	lr, lr, r2
 8000634:	fa20 f304 	lsr.w	r3, r0, r4
 8000638:	fa01 f205 	lsl.w	r2, r1, r5
 800063c:	ea43 0302 	orr.w	r3, r3, r2
 8000640:	fa21 f004 	lsr.w	r0, r1, r4
 8000644:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000648:	fa21 f204 	lsr.w	r2, r1, r4
 800064c:	ea20 0002 	bic.w	r0, r0, r2
 8000650:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000654:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000658:	bf08      	it	eq
 800065a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800065e:	bd70      	pop	{r4, r5, r6, pc}
 8000660:	f094 0f00 	teq	r4, #0
 8000664:	d10f      	bne.n	8000686 <__aeabi_dmul+0x1c2>
 8000666:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 800066a:	0040      	lsls	r0, r0, #1
 800066c:	eb41 0101 	adc.w	r1, r1, r1
 8000670:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000674:	bf08      	it	eq
 8000676:	3c01      	subeq	r4, #1
 8000678:	d0f7      	beq.n	800066a <__aeabi_dmul+0x1a6>
 800067a:	ea41 0106 	orr.w	r1, r1, r6
 800067e:	f095 0f00 	teq	r5, #0
 8000682:	bf18      	it	ne
 8000684:	4770      	bxne	lr
 8000686:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 800068a:	0052      	lsls	r2, r2, #1
 800068c:	eb43 0303 	adc.w	r3, r3, r3
 8000690:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 8000694:	bf08      	it	eq
 8000696:	3d01      	subeq	r5, #1
 8000698:	d0f7      	beq.n	800068a <__aeabi_dmul+0x1c6>
 800069a:	ea43 0306 	orr.w	r3, r3, r6
 800069e:	4770      	bx	lr
 80006a0:	ea94 0f0c 	teq	r4, ip
 80006a4:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80006a8:	bf18      	it	ne
 80006aa:	ea95 0f0c 	teqne	r5, ip
 80006ae:	d00c      	beq.n	80006ca <__aeabi_dmul+0x206>
 80006b0:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006b4:	bf18      	it	ne
 80006b6:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006ba:	d1d1      	bne.n	8000660 <__aeabi_dmul+0x19c>
 80006bc:	ea81 0103 	eor.w	r1, r1, r3
 80006c0:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 80006c4:	f04f 0000 	mov.w	r0, #0
 80006c8:	bd70      	pop	{r4, r5, r6, pc}
 80006ca:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80006ce:	bf06      	itte	eq
 80006d0:	4610      	moveq	r0, r2
 80006d2:	4619      	moveq	r1, r3
 80006d4:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80006d8:	d019      	beq.n	800070e <__aeabi_dmul+0x24a>
 80006da:	ea94 0f0c 	teq	r4, ip
 80006de:	d102      	bne.n	80006e6 <__aeabi_dmul+0x222>
 80006e0:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80006e4:	d113      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006e6:	ea95 0f0c 	teq	r5, ip
 80006ea:	d105      	bne.n	80006f8 <__aeabi_dmul+0x234>
 80006ec:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80006f0:	bf1c      	itt	ne
 80006f2:	4610      	movne	r0, r2
 80006f4:	4619      	movne	r1, r3
 80006f6:	d10a      	bne.n	800070e <__aeabi_dmul+0x24a>
 80006f8:	ea81 0103 	eor.w	r1, r1, r3
 80006fc:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000700:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000704:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 8000708:	f04f 0000 	mov.w	r0, #0
 800070c:	bd70      	pop	{r4, r5, r6, pc}
 800070e:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000712:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 8000716:	bd70      	pop	{r4, r5, r6, pc}

08000718 <__aeabi_ddiv>:
 8000718:	b570      	push	{r4, r5, r6, lr}
 800071a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800071e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000722:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000726:	bf1d      	ittte	ne
 8000728:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800072c:	ea94 0f0c 	teqne	r4, ip
 8000730:	ea95 0f0c 	teqne	r5, ip
 8000734:	f000 f8a7 	bleq	8000886 <__aeabi_ddiv+0x16e>
 8000738:	eba4 0405 	sub.w	r4, r4, r5
 800073c:	ea81 0e03 	eor.w	lr, r1, r3
 8000740:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000744:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000748:	f000 8088 	beq.w	800085c <__aeabi_ddiv+0x144>
 800074c:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000750:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000754:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 8000758:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 800075c:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000760:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000764:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 8000768:	ea4f 2600 	mov.w	r6, r0, lsl #8
 800076c:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 8000770:	429d      	cmp	r5, r3
 8000772:	bf08      	it	eq
 8000774:	4296      	cmpeq	r6, r2
 8000776:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 800077a:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 800077e:	d202      	bcs.n	8000786 <__aeabi_ddiv+0x6e>
 8000780:	085b      	lsrs	r3, r3, #1
 8000782:	ea4f 0232 	mov.w	r2, r2, rrx
 8000786:	1ab6      	subs	r6, r6, r2
 8000788:	eb65 0503 	sbc.w	r5, r5, r3
 800078c:	085b      	lsrs	r3, r3, #1
 800078e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000792:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 8000796:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 800079a:	ebb6 0e02 	subs.w	lr, r6, r2
 800079e:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007a2:	bf22      	ittt	cs
 80007a4:	1ab6      	subcs	r6, r6, r2
 80007a6:	4675      	movcs	r5, lr
 80007a8:	ea40 000c 	orrcs.w	r0, r0, ip
 80007ac:	085b      	lsrs	r3, r3, #1
 80007ae:	ea4f 0232 	mov.w	r2, r2, rrx
 80007b2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007b6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ba:	bf22      	ittt	cs
 80007bc:	1ab6      	subcs	r6, r6, r2
 80007be:	4675      	movcs	r5, lr
 80007c0:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80007c4:	085b      	lsrs	r3, r3, #1
 80007c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80007ca:	ebb6 0e02 	subs.w	lr, r6, r2
 80007ce:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007d2:	bf22      	ittt	cs
 80007d4:	1ab6      	subcs	r6, r6, r2
 80007d6:	4675      	movcs	r5, lr
 80007d8:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80007dc:	085b      	lsrs	r3, r3, #1
 80007de:	ea4f 0232 	mov.w	r2, r2, rrx
 80007e2:	ebb6 0e02 	subs.w	lr, r6, r2
 80007e6:	eb75 0e03 	sbcs.w	lr, r5, r3
 80007ea:	bf22      	ittt	cs
 80007ec:	1ab6      	subcs	r6, r6, r2
 80007ee:	4675      	movcs	r5, lr
 80007f0:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80007f4:	ea55 0e06 	orrs.w	lr, r5, r6
 80007f8:	d018      	beq.n	800082c <__aeabi_ddiv+0x114>
 80007fa:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80007fe:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000802:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000806:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800080a:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800080e:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000812:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000816:	d1c0      	bne.n	800079a <__aeabi_ddiv+0x82>
 8000818:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 800081c:	d10b      	bne.n	8000836 <__aeabi_ddiv+0x11e>
 800081e:	ea41 0100 	orr.w	r1, r1, r0
 8000822:	f04f 0000 	mov.w	r0, #0
 8000826:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800082a:	e7b6      	b.n	800079a <__aeabi_ddiv+0x82>
 800082c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000830:	bf04      	itt	eq
 8000832:	4301      	orreq	r1, r0
 8000834:	2000      	moveq	r0, #0
 8000836:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800083a:	bf88      	it	hi
 800083c:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000840:	f63f aeaf 	bhi.w	80005a2 <__aeabi_dmul+0xde>
 8000844:	ebb5 0c03 	subs.w	ip, r5, r3
 8000848:	bf04      	itt	eq
 800084a:	ebb6 0c02 	subseq.w	ip, r6, r2
 800084e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000852:	f150 0000 	adcs.w	r0, r0, #0
 8000856:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800085a:	bd70      	pop	{r4, r5, r6, pc}
 800085c:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 8000860:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000864:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 8000868:	bfc2      	ittt	gt
 800086a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800086e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000872:	bd70      	popgt	{r4, r5, r6, pc}
 8000874:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000878:	f04f 0e00 	mov.w	lr, #0
 800087c:	3c01      	subs	r4, #1
 800087e:	e690      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000880:	ea45 0e06 	orr.w	lr, r5, r6
 8000884:	e68d      	b.n	80005a2 <__aeabi_dmul+0xde>
 8000886:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800088a:	ea94 0f0c 	teq	r4, ip
 800088e:	bf08      	it	eq
 8000890:	ea95 0f0c 	teqeq	r5, ip
 8000894:	f43f af3b 	beq.w	800070e <__aeabi_dmul+0x24a>
 8000898:	ea94 0f0c 	teq	r4, ip
 800089c:	d10a      	bne.n	80008b4 <__aeabi_ddiv+0x19c>
 800089e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80008a2:	f47f af34 	bne.w	800070e <__aeabi_dmul+0x24a>
 80008a6:	ea95 0f0c 	teq	r5, ip
 80008aa:	f47f af25 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008ae:	4610      	mov	r0, r2
 80008b0:	4619      	mov	r1, r3
 80008b2:	e72c      	b.n	800070e <__aeabi_dmul+0x24a>
 80008b4:	ea95 0f0c 	teq	r5, ip
 80008b8:	d106      	bne.n	80008c8 <__aeabi_ddiv+0x1b0>
 80008ba:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008be:	f43f aefd 	beq.w	80006bc <__aeabi_dmul+0x1f8>
 80008c2:	4610      	mov	r0, r2
 80008c4:	4619      	mov	r1, r3
 80008c6:	e722      	b.n	800070e <__aeabi_dmul+0x24a>
 80008c8:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80008cc:	bf18      	it	ne
 80008ce:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80008d2:	f47f aec5 	bne.w	8000660 <__aeabi_dmul+0x19c>
 80008d6:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80008da:	f47f af0d 	bne.w	80006f8 <__aeabi_dmul+0x234>
 80008de:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80008e2:	f47f aeeb 	bne.w	80006bc <__aeabi_dmul+0x1f8>
 80008e6:	e712      	b.n	800070e <__aeabi_dmul+0x24a>

080008e8 <on_event>:
__WEAK void on_button_released() {}


static uint8_t is_button_held = 0;

void on_event() {
 80008e8:	b580      	push	{r7, lr}
 80008ea:	af00      	add	r7, sp, #0
	if ((HAL_GPIO_ReadPin(BUTTON_GPIO_Port, BUTTON_Pin) == GPIO_PIN_RESET)) {
 80008ec:	f44f 6180 	mov.w	r1, #1024	@ 0x400
 80008f0:	480e      	ldr	r0, [pc, #56]	@ (800092c <on_event+0x44>)
 80008f2:	f001 faad 	bl	8001e50 <HAL_GPIO_ReadPin>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10c      	bne.n	8000916 <on_event+0x2e>
		if (!is_button_held) {
 80008fc:	4b0c      	ldr	r3, [pc, #48]	@ (8000930 <on_event+0x48>)
 80008fe:	781b      	ldrb	r3, [r3, #0]
 8000900:	2b00      	cmp	r3, #0
 8000902:	d105      	bne.n	8000910 <on_event+0x28>
			is_button_held = 1;
 8000904:	4b0a      	ldr	r3, [pc, #40]	@ (8000930 <on_event+0x48>)
 8000906:	2201      	movs	r2, #1
 8000908:	701a      	strb	r2, [r3, #0]
			on_button_pressed();
 800090a:	f000 f983 	bl	8000c14 <on_button_pressed>
		if (is_button_held) {
			is_button_held = 0;
			on_button_released();
		}
	}
}
 800090e:	e00b      	b.n	8000928 <on_event+0x40>
			on_button_held();
 8000910:	f000 f998 	bl	8000c44 <on_button_held>
}
 8000914:	e008      	b.n	8000928 <on_event+0x40>
		if (is_button_held) {
 8000916:	4b06      	ldr	r3, [pc, #24]	@ (8000930 <on_event+0x48>)
 8000918:	781b      	ldrb	r3, [r3, #0]
 800091a:	2b00      	cmp	r3, #0
 800091c:	d004      	beq.n	8000928 <on_event+0x40>
			is_button_held = 0;
 800091e:	4b04      	ldr	r3, [pc, #16]	@ (8000930 <on_event+0x48>)
 8000920:	2200      	movs	r2, #0
 8000922:	701a      	strb	r2, [r3, #0]
			on_button_released();
 8000924:	f000 f994 	bl	8000c50 <on_button_released>
}
 8000928:	bf00      	nop
 800092a:	bd80      	pop	{r7, pc}
 800092c:	40011000 	.word	0x40011000
 8000930:	20000034 	.word	0x20000034

08000934 <advance_rule>:
uint8_t grid[WIDTH][HEIGHT] = {0};
uint8_t new_grid[WIDTH][HEIGHT] = {0};



void advance_rule() {
 8000934:	b580      	push	{r7, lr}
 8000936:	b082      	sub	sp, #8
 8000938:	af00      	add	r7, sp, #0
	 for (uint8_t x = 0; x < WIDTH; ++x) {
 800093a:	2300      	movs	r3, #0
 800093c:	71fb      	strb	r3, [r7, #7]
 800093e:	e07e      	b.n	8000a3e <advance_rule+0x10a>
	        for (uint8_t y = 0; y < HEIGHT; ++y) {
 8000940:	2300      	movs	r3, #0
 8000942:	71bb      	strb	r3, [r7, #6]
 8000944:	e075      	b.n	8000a32 <advance_rule+0xfe>
	            uint8_t alive_neighbors = 0;
 8000946:	2300      	movs	r3, #0
 8000948:	717b      	strb	r3, [r7, #5]

				for (int8_t dx = -1; dx <= 1; ++dx) {
 800094a:	23ff      	movs	r3, #255	@ 0xff
 800094c:	713b      	strb	r3, [r7, #4]
 800094e:	e03e      	b.n	80009ce <advance_rule+0x9a>
					for (int8_t dy = -1; dy <= 1; ++dy) {
 8000950:	23ff      	movs	r3, #255	@ 0xff
 8000952:	70fb      	strb	r3, [r7, #3]
 8000954:	e033      	b.n	80009be <advance_rule+0x8a>
						if (dx == 0 && dy == 0) {
 8000956:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800095a:	2b00      	cmp	r3, #0
 800095c:	d103      	bne.n	8000966 <advance_rule+0x32>
 800095e:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000962:	2b00      	cmp	r3, #0
 8000964:	d026      	beq.n	80009b4 <advance_rule+0x80>
							continue;
						}
						int8_t nx = (x + dx + WIDTH)  % WIDTH;
 8000966:	79fa      	ldrb	r2, [r7, #7]
 8000968:	f997 3004 	ldrsb.w	r3, [r7, #4]
 800096c:	4413      	add	r3, r2
 800096e:	3340      	adds	r3, #64	@ 0x40
 8000970:	425a      	negs	r2, r3
 8000972:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8000976:	f002 023f 	and.w	r2, r2, #63	@ 0x3f
 800097a:	bf58      	it	pl
 800097c:	4253      	negpl	r3, r2
 800097e:	70bb      	strb	r3, [r7, #2]
						int8_t ny = (y + dy + HEIGHT) % HEIGHT;
 8000980:	79ba      	ldrb	r2, [r7, #6]
 8000982:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8000986:	4413      	add	r3, r2
 8000988:	3320      	adds	r3, #32
 800098a:	425a      	negs	r2, r3
 800098c:	f003 031f 	and.w	r3, r3, #31
 8000990:	f002 021f 	and.w	r2, r2, #31
 8000994:	bf58      	it	pl
 8000996:	4253      	negpl	r3, r2
 8000998:	707b      	strb	r3, [r7, #1]
						alive_neighbors += grid[nx][ny];
 800099a:	f997 2002 	ldrsb.w	r2, [r7, #2]
 800099e:	f997 3001 	ldrsb.w	r3, [r7, #1]
 80009a2:	492f      	ldr	r1, [pc, #188]	@ (8000a60 <advance_rule+0x12c>)
 80009a4:	0152      	lsls	r2, r2, #5
 80009a6:	440a      	add	r2, r1
 80009a8:	4413      	add	r3, r2
 80009aa:	781a      	ldrb	r2, [r3, #0]
 80009ac:	797b      	ldrb	r3, [r7, #5]
 80009ae:	4413      	add	r3, r2
 80009b0:	717b      	strb	r3, [r7, #5]
 80009b2:	e000      	b.n	80009b6 <advance_rule+0x82>
							continue;
 80009b4:	bf00      	nop
					for (int8_t dy = -1; dy <= 1; ++dy) {
 80009b6:	78fb      	ldrb	r3, [r7, #3]
 80009b8:	3301      	adds	r3, #1
 80009ba:	b2db      	uxtb	r3, r3
 80009bc:	70fb      	strb	r3, [r7, #3]
 80009be:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80009c2:	2b01      	cmp	r3, #1
 80009c4:	ddc7      	ble.n	8000956 <advance_rule+0x22>
				for (int8_t dx = -1; dx <= 1; ++dx) {
 80009c6:	793b      	ldrb	r3, [r7, #4]
 80009c8:	3301      	adds	r3, #1
 80009ca:	b2db      	uxtb	r3, r3
 80009cc:	713b      	strb	r3, [r7, #4]
 80009ce:	f997 3004 	ldrsb.w	r3, [r7, #4]
 80009d2:	2b01      	cmp	r3, #1
 80009d4:	ddbc      	ble.n	8000950 <advance_rule+0x1c>
					}
				}

	            if (grid[x][y] == 1) {
 80009d6:	79fa      	ldrb	r2, [r7, #7]
 80009d8:	79bb      	ldrb	r3, [r7, #6]
 80009da:	4921      	ldr	r1, [pc, #132]	@ (8000a60 <advance_rule+0x12c>)
 80009dc:	0152      	lsls	r2, r2, #5
 80009de:	440a      	add	r2, r1
 80009e0:	4413      	add	r3, r2
 80009e2:	781b      	ldrb	r3, [r3, #0]
 80009e4:	2b01      	cmp	r3, #1
 80009e6:	d112      	bne.n	8000a0e <advance_rule+0xda>
	                new_grid[x][y] = (alive_neighbors == 2 || alive_neighbors == 3) ? 1 : 0;
 80009e8:	797b      	ldrb	r3, [r7, #5]
 80009ea:	2b02      	cmp	r3, #2
 80009ec:	d002      	beq.n	80009f4 <advance_rule+0xc0>
 80009ee:	797b      	ldrb	r3, [r7, #5]
 80009f0:	2b03      	cmp	r3, #3
 80009f2:	d101      	bne.n	80009f8 <advance_rule+0xc4>
 80009f4:	2101      	movs	r1, #1
 80009f6:	e000      	b.n	80009fa <advance_rule+0xc6>
 80009f8:	2100      	movs	r1, #0
 80009fa:	79fa      	ldrb	r2, [r7, #7]
 80009fc:	79bb      	ldrb	r3, [r7, #6]
 80009fe:	b2c8      	uxtb	r0, r1
 8000a00:	4918      	ldr	r1, [pc, #96]	@ (8000a64 <advance_rule+0x130>)
 8000a02:	0152      	lsls	r2, r2, #5
 8000a04:	440a      	add	r2, r1
 8000a06:	4413      	add	r3, r2
 8000a08:	4602      	mov	r2, r0
 8000a0a:	701a      	strb	r2, [r3, #0]
 8000a0c:	e00e      	b.n	8000a2c <advance_rule+0xf8>
	            } else {
	                new_grid[x][y] = (alive_neighbors == 3) ? 1 : 0;
 8000a0e:	797b      	ldrb	r3, [r7, #5]
 8000a10:	2b03      	cmp	r3, #3
 8000a12:	bf0c      	ite	eq
 8000a14:	2301      	moveq	r3, #1
 8000a16:	2300      	movne	r3, #0
 8000a18:	b2d9      	uxtb	r1, r3
 8000a1a:	79fa      	ldrb	r2, [r7, #7]
 8000a1c:	79bb      	ldrb	r3, [r7, #6]
 8000a1e:	4608      	mov	r0, r1
 8000a20:	4910      	ldr	r1, [pc, #64]	@ (8000a64 <advance_rule+0x130>)
 8000a22:	0152      	lsls	r2, r2, #5
 8000a24:	440a      	add	r2, r1
 8000a26:	4413      	add	r3, r2
 8000a28:	4602      	mov	r2, r0
 8000a2a:	701a      	strb	r2, [r3, #0]
	        for (uint8_t y = 0; y < HEIGHT; ++y) {
 8000a2c:	79bb      	ldrb	r3, [r7, #6]
 8000a2e:	3301      	adds	r3, #1
 8000a30:	71bb      	strb	r3, [r7, #6]
 8000a32:	79bb      	ldrb	r3, [r7, #6]
 8000a34:	2b1f      	cmp	r3, #31
 8000a36:	d986      	bls.n	8000946 <advance_rule+0x12>
	 for (uint8_t x = 0; x < WIDTH; ++x) {
 8000a38:	79fb      	ldrb	r3, [r7, #7]
 8000a3a:	3301      	adds	r3, #1
 8000a3c:	71fb      	strb	r3, [r7, #7]
 8000a3e:	79fb      	ldrb	r3, [r7, #7]
 8000a40:	2b3f      	cmp	r3, #63	@ 0x3f
 8000a42:	f67f af7d 	bls.w	8000940 <advance_rule+0xc>
	            }
	        }
	    }

	    // Swap grids
	    memcpy(grid, new_grid, WIDTH * HEIGHT * sizeof(uint8_t));
 8000a46:	4a06      	ldr	r2, [pc, #24]	@ (8000a60 <advance_rule+0x12c>)
 8000a48:	4b06      	ldr	r3, [pc, #24]	@ (8000a64 <advance_rule+0x130>)
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4619      	mov	r1, r3
 8000a4e:	f44f 6300 	mov.w	r3, #2048	@ 0x800
 8000a52:	461a      	mov	r2, r3
 8000a54:	f002 fe28 	bl	80036a8 <memcpy>
}
 8000a58:	bf00      	nop
 8000a5a:	3708      	adds	r7, #8
 8000a5c:	46bd      	mov	sp, r7
 8000a5e:	bd80      	pop	{r7, pc}
 8000a60:	20000038 	.word	0x20000038
 8000a64:	20000838 	.word	0x20000838

08000a68 <copy_to_back_buffer>:


void copy_to_back_buffer() {
 8000a68:	b590      	push	{r4, r7, lr}
 8000a6a:	b083      	sub	sp, #12
 8000a6c:	af00      	add	r7, sp, #0
	//static_assert(sizeof((*back_buffer)) == sizeof(rbuffer));
	//memcpy((*back_buffer), rbuffer, sizeof(rbuffer));

	for (uint8_t x = 0; x < WIDTH; ++x) {
 8000a6e:	2300      	movs	r3, #0
 8000a70:	71fb      	strb	r3, [r7, #7]
 8000a72:	e017      	b.n	8000aa4 <copy_to_back_buffer+0x3c>
		for (uint8_t y = 0; y < HEIGHT; ++y) {
 8000a74:	2300      	movs	r3, #0
 8000a76:	71bb      	strb	r3, [r7, #6]
 8000a78:	e00e      	b.n	8000a98 <copy_to_back_buffer+0x30>
			set_pixel_w(x, y, grid[x][y]);
 8000a7a:	79f8      	ldrb	r0, [r7, #7]
 8000a7c:	79b9      	ldrb	r1, [r7, #6]
 8000a7e:	79fa      	ldrb	r2, [r7, #7]
 8000a80:	79bb      	ldrb	r3, [r7, #6]
 8000a82:	4c0c      	ldr	r4, [pc, #48]	@ (8000ab4 <copy_to_back_buffer+0x4c>)
 8000a84:	0152      	lsls	r2, r2, #5
 8000a86:	4422      	add	r2, r4
 8000a88:	4413      	add	r3, r2
 8000a8a:	781b      	ldrb	r3, [r3, #0]
 8000a8c:	461a      	mov	r2, r3
 8000a8e:	f000 fc0b 	bl	80012a8 <set_pixel_w>
		for (uint8_t y = 0; y < HEIGHT; ++y) {
 8000a92:	79bb      	ldrb	r3, [r7, #6]
 8000a94:	3301      	adds	r3, #1
 8000a96:	71bb      	strb	r3, [r7, #6]
 8000a98:	79bb      	ldrb	r3, [r7, #6]
 8000a9a:	2b1f      	cmp	r3, #31
 8000a9c:	d9ed      	bls.n	8000a7a <copy_to_back_buffer+0x12>
	for (uint8_t x = 0; x < WIDTH; ++x) {
 8000a9e:	79fb      	ldrb	r3, [r7, #7]
 8000aa0:	3301      	adds	r3, #1
 8000aa2:	71fb      	strb	r3, [r7, #7]
 8000aa4:	79fb      	ldrb	r3, [r7, #7]
 8000aa6:	2b3f      	cmp	r3, #63	@ 0x3f
 8000aa8:	d9e4      	bls.n	8000a74 <copy_to_back_buffer+0xc>
		}
	}
}
 8000aaa:	bf00      	nop
 8000aac:	bf00      	nop
 8000aae:	370c      	adds	r7, #12
 8000ab0:	46bd      	mov	sp, r7
 8000ab2:	bd90      	pop	{r4, r7, pc}
 8000ab4:	20000038 	.word	0x20000038

08000ab8 <initialize_r_pentomino>:


void initialize_r_pentomino(uint8_t x_offset, uint8_t y_offset) {
 8000ab8:	b490      	push	{r4, r7}
 8000aba:	b086      	sub	sp, #24
 8000abc:	af00      	add	r7, sp, #0
 8000abe:	4603      	mov	r3, r0
 8000ac0:	460a      	mov	r2, r1
 8000ac2:	71fb      	strb	r3, [r7, #7]
 8000ac4:	4613      	mov	r3, r2
 8000ac6:	71bb      	strb	r3, [r7, #6]
    uint8_t r_pentomino[3][3] = {
 8000ac8:	4a19      	ldr	r2, [pc, #100]	@ (8000b30 <initialize_r_pentomino+0x78>)
 8000aca:	f107 030c 	add.w	r3, r7, #12
 8000ace:	ca07      	ldmia	r2, {r0, r1, r2}
 8000ad0:	c303      	stmia	r3!, {r0, r1}
 8000ad2:	701a      	strb	r2, [r3, #0]
        {0, 1, 1},
        {1, 1, 0},
        {0, 1, 0}
    };

    for (uint8_t y = 0; y < 3; ++y) {
 8000ad4:	2300      	movs	r3, #0
 8000ad6:	75fb      	strb	r3, [r7, #23]
 8000ad8:	e021      	b.n	8000b1e <initialize_r_pentomino+0x66>
        for (uint8_t x = 0; x < 3; ++x) {
 8000ada:	2300      	movs	r3, #0
 8000adc:	75bb      	strb	r3, [r7, #22]
 8000ade:	e018      	b.n	8000b12 <initialize_r_pentomino+0x5a>
            grid[x + x_offset][y + y_offset] = r_pentomino[y][x];
 8000ae0:	7dfa      	ldrb	r2, [r7, #23]
 8000ae2:	7dbc      	ldrb	r4, [r7, #22]
 8000ae4:	7db9      	ldrb	r1, [r7, #22]
 8000ae6:	79fb      	ldrb	r3, [r7, #7]
 8000ae8:	18c8      	adds	r0, r1, r3
 8000aea:	7df9      	ldrb	r1, [r7, #23]
 8000aec:	79bb      	ldrb	r3, [r7, #6]
 8000aee:	4419      	add	r1, r3
 8000af0:	4613      	mov	r3, r2
 8000af2:	005b      	lsls	r3, r3, #1
 8000af4:	4413      	add	r3, r2
 8000af6:	3318      	adds	r3, #24
 8000af8:	443b      	add	r3, r7
 8000afa:	4423      	add	r3, r4
 8000afc:	3b0c      	subs	r3, #12
 8000afe:	781c      	ldrb	r4, [r3, #0]
 8000b00:	4a0c      	ldr	r2, [pc, #48]	@ (8000b34 <initialize_r_pentomino+0x7c>)
 8000b02:	0143      	lsls	r3, r0, #5
 8000b04:	4413      	add	r3, r2
 8000b06:	440b      	add	r3, r1
 8000b08:	4622      	mov	r2, r4
 8000b0a:	701a      	strb	r2, [r3, #0]
        for (uint8_t x = 0; x < 3; ++x) {
 8000b0c:	7dbb      	ldrb	r3, [r7, #22]
 8000b0e:	3301      	adds	r3, #1
 8000b10:	75bb      	strb	r3, [r7, #22]
 8000b12:	7dbb      	ldrb	r3, [r7, #22]
 8000b14:	2b02      	cmp	r3, #2
 8000b16:	d9e3      	bls.n	8000ae0 <initialize_r_pentomino+0x28>
    for (uint8_t y = 0; y < 3; ++y) {
 8000b18:	7dfb      	ldrb	r3, [r7, #23]
 8000b1a:	3301      	adds	r3, #1
 8000b1c:	75fb      	strb	r3, [r7, #23]
 8000b1e:	7dfb      	ldrb	r3, [r7, #23]
 8000b20:	2b02      	cmp	r3, #2
 8000b22:	d9da      	bls.n	8000ada <initialize_r_pentomino+0x22>
        }
    }
}
 8000b24:	bf00      	nop
 8000b26:	bf00      	nop
 8000b28:	3718      	adds	r7, #24
 8000b2a:	46bd      	mov	sp, r7
 8000b2c:	bc90      	pop	{r4, r7}
 8000b2e:	4770      	bx	lr
 8000b30:	080036dc 	.word	0x080036dc
 8000b34:	20000038 	.word	0x20000038

08000b38 <initialize_glider>:

void initialize_glider(uint8_t start_x, uint8_t start_y) {
 8000b38:	b480      	push	{r7}
 8000b3a:	b083      	sub	sp, #12
 8000b3c:	af00      	add	r7, sp, #0
 8000b3e:	4603      	mov	r3, r0
 8000b40:	460a      	mov	r2, r1
 8000b42:	71fb      	strb	r3, [r7, #7]
 8000b44:	4613      	mov	r3, r2
 8000b46:	71bb      	strb	r3, [r7, #6]
	if (start_x < WIDTH-2 && start_y < HEIGHT-2) {
 8000b48:	79fb      	ldrb	r3, [r7, #7]
 8000b4a:	2b3d      	cmp	r3, #61	@ 0x3d
 8000b4c:	d832      	bhi.n	8000bb4 <initialize_glider+0x7c>
 8000b4e:	79bb      	ldrb	r3, [r7, #6]
 8000b50:	2b1d      	cmp	r3, #29
 8000b52:	d82f      	bhi.n	8000bb4 <initialize_glider+0x7c>
		grid[start_x+1][start_y  ] = 1;
 8000b54:	79fb      	ldrb	r3, [r7, #7]
 8000b56:	1c5a      	adds	r2, r3, #1
 8000b58:	79bb      	ldrb	r3, [r7, #6]
 8000b5a:	4919      	ldr	r1, [pc, #100]	@ (8000bc0 <initialize_glider+0x88>)
 8000b5c:	0152      	lsls	r2, r2, #5
 8000b5e:	440a      	add	r2, r1
 8000b60:	4413      	add	r3, r2
 8000b62:	2201      	movs	r2, #1
 8000b64:	701a      	strb	r2, [r3, #0]
		grid[start_x+2][start_y+1] = 1;
 8000b66:	79fb      	ldrb	r3, [r7, #7]
 8000b68:	1c9a      	adds	r2, r3, #2
 8000b6a:	79bb      	ldrb	r3, [r7, #6]
 8000b6c:	3301      	adds	r3, #1
 8000b6e:	4914      	ldr	r1, [pc, #80]	@ (8000bc0 <initialize_glider+0x88>)
 8000b70:	0152      	lsls	r2, r2, #5
 8000b72:	440a      	add	r2, r1
 8000b74:	4413      	add	r3, r2
 8000b76:	2201      	movs	r2, #1
 8000b78:	701a      	strb	r2, [r3, #0]
		grid[start_x  ][start_y+2] = 1;
 8000b7a:	79fa      	ldrb	r2, [r7, #7]
 8000b7c:	79bb      	ldrb	r3, [r7, #6]
 8000b7e:	3302      	adds	r3, #2
 8000b80:	490f      	ldr	r1, [pc, #60]	@ (8000bc0 <initialize_glider+0x88>)
 8000b82:	0152      	lsls	r2, r2, #5
 8000b84:	440a      	add	r2, r1
 8000b86:	4413      	add	r3, r2
 8000b88:	2201      	movs	r2, #1
 8000b8a:	701a      	strb	r2, [r3, #0]
		grid[start_x+1][start_y+2] = 1;
 8000b8c:	79fb      	ldrb	r3, [r7, #7]
 8000b8e:	1c5a      	adds	r2, r3, #1
 8000b90:	79bb      	ldrb	r3, [r7, #6]
 8000b92:	3302      	adds	r3, #2
 8000b94:	490a      	ldr	r1, [pc, #40]	@ (8000bc0 <initialize_glider+0x88>)
 8000b96:	0152      	lsls	r2, r2, #5
 8000b98:	440a      	add	r2, r1
 8000b9a:	4413      	add	r3, r2
 8000b9c:	2201      	movs	r2, #1
 8000b9e:	701a      	strb	r2, [r3, #0]
		grid[start_x+2][start_y+2] = 1;
 8000ba0:	79fb      	ldrb	r3, [r7, #7]
 8000ba2:	1c9a      	adds	r2, r3, #2
 8000ba4:	79bb      	ldrb	r3, [r7, #6]
 8000ba6:	3302      	adds	r3, #2
 8000ba8:	4905      	ldr	r1, [pc, #20]	@ (8000bc0 <initialize_glider+0x88>)
 8000baa:	0152      	lsls	r2, r2, #5
 8000bac:	440a      	add	r2, r1
 8000bae:	4413      	add	r3, r2
 8000bb0:	2201      	movs	r2, #1
 8000bb2:	701a      	strb	r2, [r3, #0]
	}
}
 8000bb4:	bf00      	nop
 8000bb6:	370c      	adds	r7, #12
 8000bb8:	46bd      	mov	sp, r7
 8000bba:	bc80      	pop	{r7}
 8000bbc:	4770      	bx	lr
 8000bbe:	bf00      	nop
 8000bc0:	20000038 	.word	0x20000038

08000bc4 <on_ready>:

void on_ready() {
 8000bc4:	b580      	push	{r7, lr}
 8000bc6:	af00      	add	r7, sp, #0
	memset(grid, 0, sizeof(grid));
 8000bc8:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000bcc:	2100      	movs	r1, #0
 8000bce:	4806      	ldr	r0, [pc, #24]	@ (8000be8 <on_ready+0x24>)
 8000bd0:	f002 fd3e 	bl	8003650 <memset>
	initialize_glider(35,20);
 8000bd4:	2114      	movs	r1, #20
 8000bd6:	2023      	movs	r0, #35	@ 0x23
 8000bd8:	f7ff ffae 	bl	8000b38 <initialize_glider>
	initialize_r_pentomino(32,16);
 8000bdc:	2110      	movs	r1, #16
 8000bde:	2020      	movs	r0, #32
 8000be0:	f7ff ff6a 	bl	8000ab8 <initialize_r_pentomino>
}
 8000be4:	bf00      	nop
 8000be6:	bd80      	pop	{r7, pc}
 8000be8:	20000038 	.word	0x20000038

08000bec <on_update>:

bool pause = false;

void on_update() {
 8000bec:	b580      	push	{r7, lr}
 8000bee:	af00      	add	r7, sp, #0
	clear_back_buffer();
 8000bf0:	f000 fb02 	bl	80011f8 <clear_back_buffer>

	if (!pause) {
 8000bf4:	4b06      	ldr	r3, [pc, #24]	@ (8000c10 <on_update+0x24>)
 8000bf6:	781b      	ldrb	r3, [r3, #0]
 8000bf8:	f083 0301 	eor.w	r3, r3, #1
 8000bfc:	b2db      	uxtb	r3, r3
 8000bfe:	2b00      	cmp	r3, #0
 8000c00:	d001      	beq.n	8000c06 <on_update+0x1a>
		advance_rule();
 8000c02:	f7ff fe97 	bl	8000934 <advance_rule>
	}

	copy_to_back_buffer();
 8000c06:	f7ff ff2f 	bl	8000a68 <copy_to_back_buffer>
}
 8000c0a:	bf00      	nop
 8000c0c:	bd80      	pop	{r7, pc}
 8000c0e:	bf00      	nop
 8000c10:	20001038 	.word	0x20001038

08000c14 <on_button_pressed>:


void on_button_pressed() {
 8000c14:	b480      	push	{r7}
 8000c16:	af00      	add	r7, sp, #0
	pause = !pause;
 8000c18:	4b09      	ldr	r3, [pc, #36]	@ (8000c40 <on_button_pressed+0x2c>)
 8000c1a:	781b      	ldrb	r3, [r3, #0]
 8000c1c:	2b00      	cmp	r3, #0
 8000c1e:	bf14      	ite	ne
 8000c20:	2301      	movne	r3, #1
 8000c22:	2300      	moveq	r3, #0
 8000c24:	b2db      	uxtb	r3, r3
 8000c26:	f083 0301 	eor.w	r3, r3, #1
 8000c2a:	b2db      	uxtb	r3, r3
 8000c2c:	f003 0301 	and.w	r3, r3, #1
 8000c30:	b2da      	uxtb	r2, r3
 8000c32:	4b03      	ldr	r3, [pc, #12]	@ (8000c40 <on_button_pressed+0x2c>)
 8000c34:	701a      	strb	r2, [r3, #0]
}
 8000c36:	bf00      	nop
 8000c38:	46bd      	mov	sp, r7
 8000c3a:	bc80      	pop	{r7}
 8000c3c:	4770      	bx	lr
 8000c3e:	bf00      	nop
 8000c40:	20001038 	.word	0x20001038

08000c44 <on_button_held>:
void on_button_held() {
 8000c44:	b480      	push	{r7}
 8000c46:	af00      	add	r7, sp, #0
}
 8000c48:	bf00      	nop
 8000c4a:	46bd      	mov	sp, r7
 8000c4c:	bc80      	pop	{r7}
 8000c4e:	4770      	bx	lr

08000c50 <on_button_released>:
void on_button_released() {
 8000c50:	b480      	push	{r7}
 8000c52:	af00      	add	r7, sp, #0
}
 8000c54:	bf00      	nop
 8000c56:	46bd      	mov	sp, r7
 8000c58:	bc80      	pop	{r7}
 8000c5a:	4770      	bx	lr

08000c5c <get_tick_delta_time>:
/* USER CODE BEGIN 0 */

double DeltaTime = 0;

uint32_t last_tick_time = 0;
uint32_t get_tick_delta_time() {
 8000c5c:	b580      	push	{r7, lr}
 8000c5e:	b082      	sub	sp, #8
 8000c60:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 8000c62:	f000 fe59 	bl	8001918 <HAL_GetTick>
 8000c66:	6078      	str	r0, [r7, #4]
    uint32_t tick_delta_time = current_time - last_tick_time;
 8000c68:	4b06      	ldr	r3, [pc, #24]	@ (8000c84 <get_tick_delta_time+0x28>)
 8000c6a:	681b      	ldr	r3, [r3, #0]
 8000c6c:	687a      	ldr	r2, [r7, #4]
 8000c6e:	1ad3      	subs	r3, r2, r3
 8000c70:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 8000c72:	4a04      	ldr	r2, [pc, #16]	@ (8000c84 <get_tick_delta_time+0x28>)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	6013      	str	r3, [r2, #0]
    return tick_delta_time;
 8000c78:	683b      	ldr	r3, [r7, #0]
}
 8000c7a:	4618      	mov	r0, r3
 8000c7c:	3708      	adds	r7, #8
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	bd80      	pop	{r7, pc}
 8000c82:	bf00      	nop
 8000c84:	20001130 	.word	0x20001130

08000c88 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000c88:	b580      	push	{r7, lr}
 8000c8a:	b082      	sub	sp, #8
 8000c8c:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000c8e:	f000 fdeb 	bl	8001868 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000c92:	f000 f86d 	bl	8000d70 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000c96:	f000 f9cf 	bl	8001038 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000c9a:	f000 f8ab 	bl	8000df4 <MX_SPI1_Init>
  MX_TIM2_Init();
 8000c9e:	f000 f8df 	bl	8000e60 <MX_TIM2_Init>
  MX_TIM3_Init();
 8000ca2:	f000 f953 	bl	8000f4c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000ca6:	4829      	ldr	r0, [pc, #164]	@ (8000d4c <main+0xc4>)
 8000ca8:	f001 fdb4 	bl	8002814 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000cac:	4828      	ldr	r0, [pc, #160]	@ (8000d50 <main+0xc8>)
 8000cae:	f001 fdb1 	bl	8002814 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8000cb2:	2100      	movs	r1, #0
 8000cb4:	4826      	ldr	r0, [pc, #152]	@ (8000d50 <main+0xc8>)
 8000cb6:	f001 fe57 	bl	8002968 <HAL_TIM_PWM_Start>
	OE_H;
 8000cba:	2201      	movs	r2, #1
 8000cbc:	2140      	movs	r1, #64	@ 0x40
 8000cbe:	4825      	ldr	r0, [pc, #148]	@ (8000d54 <main+0xcc>)
 8000cc0:	f001 f8dd 	bl	8001e7e <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	clear_back_buffer();
 8000cc4:	f000 fa98 	bl	80011f8 <clear_back_buffer>
	on_ready();
 8000cc8:	f7ff ff7c 	bl	8000bc4 <on_ready>

#if DEBUG_NUMBERS
	uint32_t debug_var = 0;
#endif

	uint32_t accumulator = 0;
 8000ccc:	2300      	movs	r3, #0
 8000cce:	607b      	str	r3, [r7, #4]

	while (1) {
		uint32_t delta = get_tick_delta_time();
 8000cd0:	f7ff ffc4 	bl	8000c5c <get_tick_delta_time>
 8000cd4:	6038      	str	r0, [r7, #0]

		accumulator += delta;
 8000cd6:	687a      	ldr	r2, [r7, #4]
 8000cd8:	683b      	ldr	r3, [r7, #0]
 8000cda:	4413      	add	r3, r2
 8000cdc:	607b      	str	r3, [r7, #4]
		if (accumulator >= UPDATE_INTERVAL_MS) {
 8000cde:	687b      	ldr	r3, [r7, #4]
 8000ce0:	2b09      	cmp	r3, #9
 8000ce2:	d91a      	bls.n	8000d1a <main+0x92>
			if (is_back_buffer_new){
 8000ce4:	4b1c      	ldr	r3, [pc, #112]	@ (8000d58 <main+0xd0>)
 8000ce6:	781b      	ldrb	r3, [r3, #0]
 8000ce8:	2b00      	cmp	r3, #0
 8000cea:	d12c      	bne.n	8000d46 <main+0xbe>
				continue;
			}
			DeltaTime = accumulator / 1000.0;
 8000cec:	6878      	ldr	r0, [r7, #4]
 8000cee:	f7ff fb6f 	bl	80003d0 <__aeabi_ui2d>
 8000cf2:	f04f 0200 	mov.w	r2, #0
 8000cf6:	4b19      	ldr	r3, [pc, #100]	@ (8000d5c <main+0xd4>)
 8000cf8:	f7ff fd0e 	bl	8000718 <__aeabi_ddiv>
 8000cfc:	4602      	mov	r2, r0
 8000cfe:	460b      	mov	r3, r1
 8000d00:	4917      	ldr	r1, [pc, #92]	@ (8000d60 <main+0xd8>)
 8000d02:	e9c1 2300 	strd	r2, r3, [r1]
			on_event();
 8000d06:	f7ff fdef 	bl	80008e8 <on_event>
			on_update();
 8000d0a:	f7ff ff6f 	bl	8000bec <on_update>
#if DEBUG_NUMBERS
			draw_number(accumulator, 0, HEIGHT-7, false);
			draw_number(debug_var, WIDTH-1-calculate_number_width(debug_var, false), HEIGHT-7, false);
#endif

			accumulator -= UPDATE_INTERVAL_MS;
 8000d0e:	687b      	ldr	r3, [r7, #4]
 8000d10:	3b0a      	subs	r3, #10
 8000d12:	607b      	str	r3, [r7, #4]
			//accumulator = 0;
			is_back_buffer_new = true;
 8000d14:	4b10      	ldr	r3, [pc, #64]	@ (8000d58 <main+0xd0>)
 8000d16:	2201      	movs	r2, #1
 8000d18:	701a      	strb	r2, [r3, #0]
//				HAL_Delay(1);
//			}
//		}


		if (buzzer_request) {
 8000d1a:	4b12      	ldr	r3, [pc, #72]	@ (8000d64 <main+0xdc>)
 8000d1c:	781b      	ldrb	r3, [r3, #0]
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d0d6      	beq.n	8000cd0 <main+0x48>
			if (HAL_GetTick() - buzzer_toggle_request_time > 20) {
 8000d22:	f000 fdf9 	bl	8001918 <HAL_GetTick>
 8000d26:	4602      	mov	r2, r0
 8000d28:	4b0f      	ldr	r3, [pc, #60]	@ (8000d68 <main+0xe0>)
 8000d2a:	681b      	ldr	r3, [r3, #0]
 8000d2c:	1ad3      	subs	r3, r2, r3
 8000d2e:	2b14      	cmp	r3, #20
 8000d30:	d9ce      	bls.n	8000cd0 <main+0x48>
				HAL_GPIO_WritePin(GPIOA, GPIO_PIN_15, GPIO_PIN_RESET);
 8000d32:	2200      	movs	r2, #0
 8000d34:	f44f 4100 	mov.w	r1, #32768	@ 0x8000
 8000d38:	480c      	ldr	r0, [pc, #48]	@ (8000d6c <main+0xe4>)
 8000d3a:	f001 f8a0 	bl	8001e7e <HAL_GPIO_WritePin>
				buzzer_request = false;
 8000d3e:	4b09      	ldr	r3, [pc, #36]	@ (8000d64 <main+0xdc>)
 8000d40:	2200      	movs	r2, #0
 8000d42:	701a      	strb	r2, [r3, #0]
 8000d44:	e7c4      	b.n	8000cd0 <main+0x48>
				continue;
 8000d46:	bf00      	nop
	while (1) {
 8000d48:	e7c2      	b.n	8000cd0 <main+0x48>
 8000d4a:	bf00      	nop
 8000d4c:	20001094 	.word	0x20001094
 8000d50:	200010dc 	.word	0x200010dc
 8000d54:	40011000 	.word	0x40011000
 8000d58:	2000213c 	.word	0x2000213c
 8000d5c:	408f4000 	.word	0x408f4000
 8000d60:	20001128 	.word	0x20001128
 8000d64:	20001134 	.word	0x20001134
 8000d68:	20001138 	.word	0x20001138
 8000d6c:	40010800 	.word	0x40010800

08000d70 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000d70:	b580      	push	{r7, lr}
 8000d72:	b090      	sub	sp, #64	@ 0x40
 8000d74:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000d76:	f107 0318 	add.w	r3, r7, #24
 8000d7a:	2228      	movs	r2, #40	@ 0x28
 8000d7c:	2100      	movs	r1, #0
 8000d7e:	4618      	mov	r0, r3
 8000d80:	f002 fc66 	bl	8003650 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000d84:	1d3b      	adds	r3, r7, #4
 8000d86:	2200      	movs	r2, #0
 8000d88:	601a      	str	r2, [r3, #0]
 8000d8a:	605a      	str	r2, [r3, #4]
 8000d8c:	609a      	str	r2, [r3, #8]
 8000d8e:	60da      	str	r2, [r3, #12]
 8000d90:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000d92:	2302      	movs	r3, #2
 8000d94:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000d96:	2301      	movs	r3, #1
 8000d98:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000d9a:	2310      	movs	r3, #16
 8000d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000d9e:	2302      	movs	r3, #2
 8000da0:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 8000da2:	2300      	movs	r3, #0
 8000da4:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 8000da6:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 8000daa:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000dac:	f107 0318 	add.w	r3, r7, #24
 8000db0:	4618      	mov	r0, r3
 8000db2:	f001 f87d 	bl	8001eb0 <HAL_RCC_OscConfig>
 8000db6:	4603      	mov	r3, r0
 8000db8:	2b00      	cmp	r3, #0
 8000dba:	d001      	beq.n	8000dc0 <SystemClock_Config+0x50>
  {
    Error_Handler();
 8000dbc:	f000 fa00 	bl	80011c0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000dc0:	230f      	movs	r3, #15
 8000dc2:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000dc4:	2302      	movs	r3, #2
 8000dc6:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000dc8:	2300      	movs	r3, #0
 8000dca:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8000dcc:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8000dd0:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000dd2:	2300      	movs	r3, #0
 8000dd4:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8000dd6:	1d3b      	adds	r3, r7, #4
 8000dd8:	2102      	movs	r1, #2
 8000dda:	4618      	mov	r0, r3
 8000ddc:	f001 faea 	bl	80023b4 <HAL_RCC_ClockConfig>
 8000de0:	4603      	mov	r3, r0
 8000de2:	2b00      	cmp	r3, #0
 8000de4:	d001      	beq.n	8000dea <SystemClock_Config+0x7a>
  {
    Error_Handler();
 8000de6:	f000 f9eb 	bl	80011c0 <Error_Handler>
  }
}
 8000dea:	bf00      	nop
 8000dec:	3740      	adds	r7, #64	@ 0x40
 8000dee:	46bd      	mov	sp, r7
 8000df0:	bd80      	pop	{r7, pc}
	...

08000df4 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000df4:	b580      	push	{r7, lr}
 8000df6:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8000df8:	4b17      	ldr	r3, [pc, #92]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000dfa:	4a18      	ldr	r2, [pc, #96]	@ (8000e5c <MX_SPI1_Init+0x68>)
 8000dfc:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000dfe:	4b16      	ldr	r3, [pc, #88]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e00:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000e04:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8000e06:	4b14      	ldr	r3, [pc, #80]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e08:	2200      	movs	r2, #0
 8000e0a:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000e0c:	4b12      	ldr	r3, [pc, #72]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e0e:	2200      	movs	r2, #0
 8000e10:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000e12:	4b11      	ldr	r3, [pc, #68]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e14:	2200      	movs	r2, #0
 8000e16:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8000e18:	4b0f      	ldr	r3, [pc, #60]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e1a:	2200      	movs	r2, #0
 8000e1c:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000e1e:	4b0e      	ldr	r3, [pc, #56]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e20:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000e24:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8000e26:	4b0c      	ldr	r3, [pc, #48]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e28:	2210      	movs	r2, #16
 8000e2a:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000e2c:	4b0a      	ldr	r3, [pc, #40]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e2e:	2200      	movs	r2, #0
 8000e30:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000e32:	4b09      	ldr	r3, [pc, #36]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e34:	2200      	movs	r2, #0
 8000e36:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8000e38:	4b07      	ldr	r3, [pc, #28]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e3a:	2200      	movs	r2, #0
 8000e3c:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000e3e:	4b06      	ldr	r3, [pc, #24]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e40:	220a      	movs	r2, #10
 8000e42:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000e44:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <MX_SPI1_Init+0x64>)
 8000e46:	f001 fc11 	bl	800266c <HAL_SPI_Init>
 8000e4a:	4603      	mov	r3, r0
 8000e4c:	2b00      	cmp	r3, #0
 8000e4e:	d001      	beq.n	8000e54 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000e50:	f000 f9b6 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000e54:	bf00      	nop
 8000e56:	bd80      	pop	{r7, pc}
 8000e58:	2000103c 	.word	0x2000103c
 8000e5c:	40013000 	.word	0x40013000

08000e60 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000e60:	b580      	push	{r7, lr}
 8000e62:	b08e      	sub	sp, #56	@ 0x38
 8000e64:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000e66:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000e6a:	2200      	movs	r2, #0
 8000e6c:	601a      	str	r2, [r3, #0]
 8000e6e:	605a      	str	r2, [r3, #4]
 8000e70:	609a      	str	r2, [r3, #8]
 8000e72:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000e74:	f107 0320 	add.w	r3, r7, #32
 8000e78:	2200      	movs	r2, #0
 8000e7a:	601a      	str	r2, [r3, #0]
 8000e7c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000e7e:	1d3b      	adds	r3, r7, #4
 8000e80:	2200      	movs	r2, #0
 8000e82:	601a      	str	r2, [r3, #0]
 8000e84:	605a      	str	r2, [r3, #4]
 8000e86:	609a      	str	r2, [r3, #8]
 8000e88:	60da      	str	r2, [r3, #12]
 8000e8a:	611a      	str	r2, [r3, #16]
 8000e8c:	615a      	str	r2, [r3, #20]
 8000e8e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000e90:	4b2d      	ldr	r3, [pc, #180]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000e92:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000e96:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 6399;
 8000e98:	4b2b      	ldr	r3, [pc, #172]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000e9a:	f641 02ff 	movw	r2, #6399	@ 0x18ff
 8000e9e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000ea0:	4b29      	ldr	r3, [pc, #164]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000ea2:	2200      	movs	r2, #0
 8000ea4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 5;
 8000ea6:	4b28      	ldr	r3, [pc, #160]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000ea8:	2205      	movs	r2, #5
 8000eaa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000eac:	4b26      	ldr	r3, [pc, #152]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000eae:	2200      	movs	r2, #0
 8000eb0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000eb2:	4b25      	ldr	r3, [pc, #148]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000eb4:	2200      	movs	r2, #0
 8000eb6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000eb8:	4823      	ldr	r0, [pc, #140]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000eba:	f001 fc5b 	bl	8002774 <HAL_TIM_Base_Init>
 8000ebe:	4603      	mov	r3, r0
 8000ec0:	2b00      	cmp	r3, #0
 8000ec2:	d001      	beq.n	8000ec8 <MX_TIM2_Init+0x68>
  {
    Error_Handler();
 8000ec4:	f000 f97c 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000ec8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000ecc:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8000ece:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000ed2:	4619      	mov	r1, r3
 8000ed4:	481c      	ldr	r0, [pc, #112]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000ed6:	f001 ffb3 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000eda:	4603      	mov	r3, r0
 8000edc:	2b00      	cmp	r3, #0
 8000ede:	d001      	beq.n	8000ee4 <MX_TIM2_Init+0x84>
  {
    Error_Handler();
 8000ee0:	f000 f96e 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 8000ee4:	4818      	ldr	r0, [pc, #96]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000ee6:	f001 fce7 	bl	80028b8 <HAL_TIM_PWM_Init>
 8000eea:	4603      	mov	r3, r0
 8000eec:	2b00      	cmp	r3, #0
 8000eee:	d001      	beq.n	8000ef4 <MX_TIM2_Init+0x94>
  {
    Error_Handler();
 8000ef0:	f000 f966 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000ef4:	2300      	movs	r3, #0
 8000ef6:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000ef8:	2300      	movs	r3, #0
 8000efa:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8000efc:	f107 0320 	add.w	r3, r7, #32
 8000f00:	4619      	mov	r1, r3
 8000f02:	4811      	ldr	r0, [pc, #68]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000f04:	f002 fb34 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <MX_TIM2_Init+0xb2>
  {
    Error_Handler();
 8000f0e:	f000 f957 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000f12:	2360      	movs	r3, #96	@ 0x60
 8000f14:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8000f16:	2300      	movs	r3, #0
 8000f18:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8000f1a:	2300      	movs	r3, #0
 8000f1c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8000f1e:	2300      	movs	r3, #0
 8000f20:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000f22:	1d3b      	adds	r3, r7, #4
 8000f24:	2200      	movs	r2, #0
 8000f26:	4619      	mov	r1, r3
 8000f28:	4807      	ldr	r0, [pc, #28]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000f2a:	f001 fec7 	bl	8002cbc <HAL_TIM_PWM_ConfigChannel>
 8000f2e:	4603      	mov	r3, r0
 8000f30:	2b00      	cmp	r3, #0
 8000f32:	d001      	beq.n	8000f38 <MX_TIM2_Init+0xd8>
  {
    Error_Handler();
 8000f34:	f000 f944 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 8000f38:	4803      	ldr	r0, [pc, #12]	@ (8000f48 <MX_TIM2_Init+0xe8>)
 8000f3a:	f000 fbcb 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 8000f3e:	bf00      	nop
 8000f40:	3738      	adds	r7, #56	@ 0x38
 8000f42:	46bd      	mov	sp, r7
 8000f44:	bd80      	pop	{r7, pc}
 8000f46:	bf00      	nop
 8000f48:	20001094 	.word	0x20001094

08000f4c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8000f4c:	b580      	push	{r7, lr}
 8000f4e:	b08e      	sub	sp, #56	@ 0x38
 8000f50:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000f52:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000f56:	2200      	movs	r2, #0
 8000f58:	601a      	str	r2, [r3, #0]
 8000f5a:	605a      	str	r2, [r3, #4]
 8000f5c:	609a      	str	r2, [r3, #8]
 8000f5e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000f60:	f107 0320 	add.w	r3, r7, #32
 8000f64:	2200      	movs	r2, #0
 8000f66:	601a      	str	r2, [r3, #0]
 8000f68:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000f6a:	1d3b      	adds	r3, r7, #4
 8000f6c:	2200      	movs	r2, #0
 8000f6e:	601a      	str	r2, [r3, #0]
 8000f70:	605a      	str	r2, [r3, #4]
 8000f72:	609a      	str	r2, [r3, #8]
 8000f74:	60da      	str	r2, [r3, #12]
 8000f76:	611a      	str	r2, [r3, #16]
 8000f78:	615a      	str	r2, [r3, #20]
 8000f7a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8000f7c:	4b2c      	ldr	r3, [pc, #176]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000f7e:	4a2d      	ldr	r2, [pc, #180]	@ (8001034 <MX_TIM3_Init+0xe8>)
 8000f80:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000f82:	4b2b      	ldr	r3, [pc, #172]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000f84:	223f      	movs	r2, #63	@ 0x3f
 8000f86:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000f88:	4b29      	ldr	r3, [pc, #164]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000f8a:	2200      	movs	r2, #0
 8000f8c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 8000f8e:	4b28      	ldr	r3, [pc, #160]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000f90:	2263      	movs	r2, #99	@ 0x63
 8000f92:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000f94:	4b26      	ldr	r3, [pc, #152]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000f96:	2200      	movs	r2, #0
 8000f98:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000f9a:	4b25      	ldr	r3, [pc, #148]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000f9c:	2200      	movs	r2, #0
 8000f9e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000fa0:	4823      	ldr	r0, [pc, #140]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000fa2:	f001 fbe7 	bl	8002774 <HAL_TIM_Base_Init>
 8000fa6:	4603      	mov	r3, r0
 8000fa8:	2b00      	cmp	r3, #0
 8000faa:	d001      	beq.n	8000fb0 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 8000fac:	f000 f908 	bl	80011c0 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000fb0:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000fb4:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000fb6:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000fba:	4619      	mov	r1, r3
 8000fbc:	481c      	ldr	r0, [pc, #112]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000fbe:	f001 ff3f 	bl	8002e40 <HAL_TIM_ConfigClockSource>
 8000fc2:	4603      	mov	r3, r0
 8000fc4:	2b00      	cmp	r3, #0
 8000fc6:	d001      	beq.n	8000fcc <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000fc8:	f000 f8fa 	bl	80011c0 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8000fcc:	4818      	ldr	r0, [pc, #96]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000fce:	f001 fc73 	bl	80028b8 <HAL_TIM_PWM_Init>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000fd8:	f000 f8f2 	bl	80011c0 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8000fdc:	2300      	movs	r3, #0
 8000fde:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8000fe0:	2300      	movs	r3, #0
 8000fe2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8000fe4:	f107 0320 	add.w	r3, r7, #32
 8000fe8:	4619      	mov	r1, r3
 8000fea:	4811      	ldr	r0, [pc, #68]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8000fec:	f002 fac0 	bl	8003570 <HAL_TIMEx_MasterConfigSynchronization>
 8000ff0:	4603      	mov	r3, r0
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d001      	beq.n	8000ffa <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 8000ff6:	f000 f8e3 	bl	80011c0 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000ffa:	2360      	movs	r3, #96	@ 0x60
 8000ffc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 8000ffe:	230a      	movs	r3, #10
 8001000:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 8001002:	2302      	movs	r3, #2
 8001004:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001006:	2300      	movs	r3, #0
 8001008:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800100a:	1d3b      	adds	r3, r7, #4
 800100c:	2200      	movs	r2, #0
 800100e:	4619      	mov	r1, r3
 8001010:	4807      	ldr	r0, [pc, #28]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8001012:	f001 fe53 	bl	8002cbc <HAL_TIM_PWM_ConfigChannel>
 8001016:	4603      	mov	r3, r0
 8001018:	2b00      	cmp	r3, #0
 800101a:	d001      	beq.n	8001020 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 800101c:	f000 f8d0 	bl	80011c0 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8001020:	4803      	ldr	r0, [pc, #12]	@ (8001030 <MX_TIM3_Init+0xe4>)
 8001022:	f000 fb57 	bl	80016d4 <HAL_TIM_MspPostInit>

}
 8001026:	bf00      	nop
 8001028:	3738      	adds	r7, #56	@ 0x38
 800102a:	46bd      	mov	sp, r7
 800102c:	bd80      	pop	{r7, pc}
 800102e:	bf00      	nop
 8001030:	200010dc 	.word	0x200010dc
 8001034:	40000400 	.word	0x40000400

08001038 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001038:	b580      	push	{r7, lr}
 800103a:	b088      	sub	sp, #32
 800103c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800103e:	f107 0310 	add.w	r3, r7, #16
 8001042:	2200      	movs	r2, #0
 8001044:	601a      	str	r2, [r3, #0]
 8001046:	605a      	str	r2, [r3, #4]
 8001048:	609a      	str	r2, [r3, #8]
 800104a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800104c:	4b56      	ldr	r3, [pc, #344]	@ (80011a8 <MX_GPIO_Init+0x170>)
 800104e:	699b      	ldr	r3, [r3, #24]
 8001050:	4a55      	ldr	r2, [pc, #340]	@ (80011a8 <MX_GPIO_Init+0x170>)
 8001052:	f043 0310 	orr.w	r3, r3, #16
 8001056:	6193      	str	r3, [r2, #24]
 8001058:	4b53      	ldr	r3, [pc, #332]	@ (80011a8 <MX_GPIO_Init+0x170>)
 800105a:	699b      	ldr	r3, [r3, #24]
 800105c:	f003 0310 	and.w	r3, r3, #16
 8001060:	60fb      	str	r3, [r7, #12]
 8001062:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001064:	4b50      	ldr	r3, [pc, #320]	@ (80011a8 <MX_GPIO_Init+0x170>)
 8001066:	699b      	ldr	r3, [r3, #24]
 8001068:	4a4f      	ldr	r2, [pc, #316]	@ (80011a8 <MX_GPIO_Init+0x170>)
 800106a:	f043 0304 	orr.w	r3, r3, #4
 800106e:	6193      	str	r3, [r2, #24]
 8001070:	4b4d      	ldr	r3, [pc, #308]	@ (80011a8 <MX_GPIO_Init+0x170>)
 8001072:	699b      	ldr	r3, [r3, #24]
 8001074:	f003 0304 	and.w	r3, r3, #4
 8001078:	60bb      	str	r3, [r7, #8]
 800107a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800107c:	4b4a      	ldr	r3, [pc, #296]	@ (80011a8 <MX_GPIO_Init+0x170>)
 800107e:	699b      	ldr	r3, [r3, #24]
 8001080:	4a49      	ldr	r2, [pc, #292]	@ (80011a8 <MX_GPIO_Init+0x170>)
 8001082:	f043 0308 	orr.w	r3, r3, #8
 8001086:	6193      	str	r3, [r2, #24]
 8001088:	4b47      	ldr	r3, [pc, #284]	@ (80011a8 <MX_GPIO_Init+0x170>)
 800108a:	699b      	ldr	r3, [r3, #24]
 800108c:	f003 0308 	and.w	r3, r3, #8
 8001090:	607b      	str	r3, [r7, #4]
 8001092:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001094:	4b44      	ldr	r3, [pc, #272]	@ (80011a8 <MX_GPIO_Init+0x170>)
 8001096:	699b      	ldr	r3, [r3, #24]
 8001098:	4a43      	ldr	r2, [pc, #268]	@ (80011a8 <MX_GPIO_Init+0x170>)
 800109a:	f043 0320 	orr.w	r3, r3, #32
 800109e:	6193      	str	r3, [r2, #24]
 80010a0:	4b41      	ldr	r3, [pc, #260]	@ (80011a8 <MX_GPIO_Init+0x170>)
 80010a2:	699b      	ldr	r3, [r3, #24]
 80010a4:	f003 0320 	and.w	r3, r3, #32
 80010a8:	603b      	str	r3, [r7, #0]
 80010aa:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80010ac:	2200      	movs	r2, #0
 80010ae:	f24e 0138 	movw	r1, #57400	@ 0xe038
 80010b2:	483e      	ldr	r0, [pc, #248]	@ (80011ac <MX_GPIO_Init+0x174>)
 80010b4:	f000 fee3 	bl	8001e7e <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 80010b8:	2200      	movs	r2, #0
 80010ba:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 80010be:	483c      	ldr	r0, [pc, #240]	@ (80011b0 <MX_GPIO_Init+0x178>)
 80010c0:	f000 fedd 	bl	8001e7e <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_8|GPIO_PIN_15, GPIO_PIN_RESET);
 80010c4:	2200      	movs	r2, #0
 80010c6:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 80010ca:	483a      	ldr	r0, [pc, #232]	@ (80011b4 <MX_GPIO_Init+0x17c>)
 80010cc:	f000 fed7 	bl	8001e7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 80010d0:	2200      	movs	r2, #0
 80010d2:	2104      	movs	r1, #4
 80010d4:	4838      	ldr	r0, [pc, #224]	@ (80011b8 <MX_GPIO_Init+0x180>)
 80010d6:	f000 fed2 	bl	8001e7e <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 80010da:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 80010de:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80010e0:	4b36      	ldr	r3, [pc, #216]	@ (80011bc <MX_GPIO_Init+0x184>)
 80010e2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010e4:	2300      	movs	r3, #0
 80010e6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80010e8:	f107 0310 	add.w	r3, r7, #16
 80010ec:	4619      	mov	r1, r3
 80010ee:	4830      	ldr	r0, [pc, #192]	@ (80011b0 <MX_GPIO_Init+0x178>)
 80010f0:	f000 fd2a 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 80010f4:	f24e 0338 	movw	r3, #57400	@ 0xe038
 80010f8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80010fa:	2301      	movs	r3, #1
 80010fc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80010fe:	2300      	movs	r3, #0
 8001100:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001102:	2302      	movs	r3, #2
 8001104:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001106:	f107 0310 	add.w	r3, r7, #16
 800110a:	4619      	mov	r1, r3
 800110c:	4827      	ldr	r0, [pc, #156]	@ (80011ac <MX_GPIO_Init+0x174>)
 800110e:	f000 fd1b 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC7 PC8 PC9 PC11
                           PC12 */
  GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_11
 8001112:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8001116:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001118:	2301      	movs	r3, #1
 800111a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800111c:	2300      	movs	r3, #0
 800111e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001120:	2302      	movs	r3, #2
 8001122:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001124:	f107 0310 	add.w	r3, r7, #16
 8001128:	4619      	mov	r1, r3
 800112a:	4821      	ldr	r0, [pc, #132]	@ (80011b0 <MX_GPIO_Init+0x178>)
 800112c:	f000 fd0c 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA8 PA15 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_15;
 8001130:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8001134:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001136:	2301      	movs	r3, #1
 8001138:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800113e:	2302      	movs	r3, #2
 8001140:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001142:	f107 0310 	add.w	r3, r7, #16
 8001146:	4619      	mov	r1, r3
 8001148:	481a      	ldr	r0, [pc, #104]	@ (80011b4 <MX_GPIO_Init+0x17c>)
 800114a:	f000 fcfd 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PC10 */
  GPIO_InitStruct.Pin = GPIO_PIN_10;
 800114e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001152:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001154:	2300      	movs	r3, #0
 8001156:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001158:	2300      	movs	r3, #0
 800115a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800115c:	f107 0310 	add.w	r3, r7, #16
 8001160:	4619      	mov	r1, r3
 8001162:	4813      	ldr	r0, [pc, #76]	@ (80011b0 <MX_GPIO_Init+0x178>)
 8001164:	f000 fcf0 	bl	8001b48 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001168:	2304      	movs	r3, #4
 800116a:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800116c:	2301      	movs	r3, #1
 800116e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001170:	2300      	movs	r3, #0
 8001172:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001174:	2302      	movs	r3, #2
 8001176:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001178:	f107 0310 	add.w	r3, r7, #16
 800117c:	4619      	mov	r1, r3
 800117e:	480e      	ldr	r0, [pc, #56]	@ (80011b8 <MX_GPIO_Init+0x180>)
 8001180:	f000 fce2 	bl	8001b48 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

  GPIO_InitStruct.Pin = BUTTON_Pin;
 8001184:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001188:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800118a:	2300      	movs	r3, #0
 800118c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800118e:	2301      	movs	r3, #1
 8001190:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(BUTTON_GPIO_Port, &GPIO_InitStruct);
 8001192:	f107 0310 	add.w	r3, r7, #16
 8001196:	4619      	mov	r1, r3
 8001198:	4805      	ldr	r0, [pc, #20]	@ (80011b0 <MX_GPIO_Init+0x178>)
 800119a:	f000 fcd5 	bl	8001b48 <HAL_GPIO_Init>


/* USER CODE END MX_GPIO_Init_2 */
}
 800119e:	bf00      	nop
 80011a0:	3720      	adds	r7, #32
 80011a2:	46bd      	mov	sp, r7
 80011a4:	bd80      	pop	{r7, pc}
 80011a6:	bf00      	nop
 80011a8:	40021000 	.word	0x40021000
 80011ac:	40010c00 	.word	0x40010c00
 80011b0:	40011000 	.word	0x40011000
 80011b4:	40010800 	.word	0x40010800
 80011b8:	40011400 	.word	0x40011400
 80011bc:	10110000 	.word	0x10110000

080011c0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80011c0:	b480      	push	{r7}
 80011c2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80011c4:	b672      	cpsid	i
}
 80011c6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80011c8:	bf00      	nop
 80011ca:	e7fd      	b.n	80011c8 <Error_Handler+0x8>

080011cc <swap_buffers>:
uint8_t (*front_buffer)[WIDTH][HEIGHT] = &buffer1;
uint8_t (*back_buffer)[WIDTH][HEIGHT] = &buffer2;
bool is_back_buffer_new = false;
bool should_render = false;

void swap_buffers() {
 80011cc:	b480      	push	{r7}
 80011ce:	b083      	sub	sp, #12
 80011d0:	af00      	add	r7, sp, #0
    uint8_t (*temp)[WIDTH][HEIGHT] = front_buffer;
 80011d2:	4b07      	ldr	r3, [pc, #28]	@ (80011f0 <swap_buffers+0x24>)
 80011d4:	681b      	ldr	r3, [r3, #0]
 80011d6:	607b      	str	r3, [r7, #4]
    front_buffer = back_buffer;
 80011d8:	4b06      	ldr	r3, [pc, #24]	@ (80011f4 <swap_buffers+0x28>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a04      	ldr	r2, [pc, #16]	@ (80011f0 <swap_buffers+0x24>)
 80011de:	6013      	str	r3, [r2, #0]
    back_buffer = temp;
 80011e0:	4a04      	ldr	r2, [pc, #16]	@ (80011f4 <swap_buffers+0x28>)
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	6013      	str	r3, [r2, #0]
}
 80011e6:	bf00      	nop
 80011e8:	370c      	adds	r7, #12
 80011ea:	46bd      	mov	sp, r7
 80011ec:	bc80      	pop	{r7}
 80011ee:	4770      	bx	lr
 80011f0:	20000000 	.word	0x20000000
 80011f4:	20000004 	.word	0x20000004

080011f8 <clear_back_buffer>:


void clear_back_buffer(void) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	af00      	add	r7, sp, #0
	memset((*back_buffer), 0, sizeof(buffer1));
 80011fc:	4b04      	ldr	r3, [pc, #16]	@ (8001210 <clear_back_buffer+0x18>)
 80011fe:	681b      	ldr	r3, [r3, #0]
 8001200:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001204:	2100      	movs	r1, #0
 8001206:	4618      	mov	r0, r3
 8001208:	f002 fa22 	bl	8003650 <memset>
}
 800120c:	bf00      	nop
 800120e:	bd80      	pop	{r7, pc}
 8001210:	20000004 	.word	0x20000004

08001214 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 8001214:	b480      	push	{r7}
 8001216:	b085      	sub	sp, #20
 8001218:	af00      	add	r7, sp, #0
 800121a:	60f8      	str	r0, [r7, #12]
 800121c:	60b9      	str	r1, [r7, #8]
 800121e:	4611      	mov	r1, r2
 8001220:	461a      	mov	r2, r3
 8001222:	460b      	mov	r3, r1
 8001224:	71fb      	strb	r3, [r7, #7]
 8001226:	4613      	mov	r3, r2
 8001228:	71bb      	strb	r3, [r7, #6]
	if (x < 0 || x >= WIDTH || y < 0 || y >= HEIGHT) {
 800122a:	68fb      	ldr	r3, [r7, #12]
 800122c:	2b00      	cmp	r3, #0
 800122e:	db34      	blt.n	800129a <set_pixel+0x86>
 8001230:	68fb      	ldr	r3, [r7, #12]
 8001232:	2b3f      	cmp	r3, #63	@ 0x3f
 8001234:	dc31      	bgt.n	800129a <set_pixel+0x86>
 8001236:	68bb      	ldr	r3, [r7, #8]
 8001238:	2b00      	cmp	r3, #0
 800123a:	db2e      	blt.n	800129a <set_pixel+0x86>
 800123c:	68bb      	ldr	r3, [r7, #8]
 800123e:	2b1f      	cmp	r3, #31
 8001240:	dc2b      	bgt.n	800129a <set_pixel+0x86>
		return;
	}

	r = r ? 1 : 0;
 8001242:	79fb      	ldrb	r3, [r7, #7]
 8001244:	2b00      	cmp	r3, #0
 8001246:	bf14      	ite	ne
 8001248:	2301      	movne	r3, #1
 800124a:	2300      	moveq	r3, #0
 800124c:	b2db      	uxtb	r3, r3
 800124e:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 8001250:	79bb      	ldrb	r3, [r7, #6]
 8001252:	2b00      	cmp	r3, #0
 8001254:	bf14      	ite	ne
 8001256:	2301      	movne	r3, #1
 8001258:	2300      	moveq	r3, #0
 800125a:	b2db      	uxtb	r3, r3
 800125c:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 800125e:	7e3b      	ldrb	r3, [r7, #24]
 8001260:	2b00      	cmp	r3, #0
 8001262:	bf14      	ite	ne
 8001264:	2301      	movne	r3, #1
 8001266:	2300      	moveq	r3, #0
 8001268:	b2db      	uxtb	r3, r3
 800126a:	763b      	strb	r3, [r7, #24]
    (*back_buffer)[x][y] = (r << 2) | (g << 1) | b;
 800126c:	79fb      	ldrb	r3, [r7, #7]
 800126e:	009b      	lsls	r3, r3, #2
 8001270:	b25a      	sxtb	r2, r3
 8001272:	79bb      	ldrb	r3, [r7, #6]
 8001274:	005b      	lsls	r3, r3, #1
 8001276:	b25b      	sxtb	r3, r3
 8001278:	4313      	orrs	r3, r2
 800127a:	b25a      	sxtb	r2, r3
 800127c:	f997 3018 	ldrsb.w	r3, [r7, #24]
 8001280:	4313      	orrs	r3, r2
 8001282:	b259      	sxtb	r1, r3
 8001284:	4b07      	ldr	r3, [pc, #28]	@ (80012a4 <set_pixel+0x90>)
 8001286:	681a      	ldr	r2, [r3, #0]
 8001288:	b2c9      	uxtb	r1, r1
 800128a:	68fb      	ldr	r3, [r7, #12]
 800128c:	015b      	lsls	r3, r3, #5
 800128e:	441a      	add	r2, r3
 8001290:	68bb      	ldr	r3, [r7, #8]
 8001292:	4413      	add	r3, r2
 8001294:	460a      	mov	r2, r1
 8001296:	701a      	strb	r2, [r3, #0]
 8001298:	e000      	b.n	800129c <set_pixel+0x88>
		return;
 800129a:	bf00      	nop
}
 800129c:	3714      	adds	r7, #20
 800129e:	46bd      	mov	sp, r7
 80012a0:	bc80      	pop	{r7}
 80012a2:	4770      	bx	lr
 80012a4:	20000004 	.word	0x20000004

080012a8 <set_pixel_w>:
void set_pixel_w(int x, int y, uint8_t w) {
 80012a8:	b580      	push	{r7, lr}
 80012aa:	b086      	sub	sp, #24
 80012ac:	af02      	add	r7, sp, #8
 80012ae:	60f8      	str	r0, [r7, #12]
 80012b0:	60b9      	str	r1, [r7, #8]
 80012b2:	4613      	mov	r3, r2
 80012b4:	71fb      	strb	r3, [r7, #7]
	set_pixel(x, y, w, w, w);
 80012b6:	79f9      	ldrb	r1, [r7, #7]
 80012b8:	79fa      	ldrb	r2, [r7, #7]
 80012ba:	79fb      	ldrb	r3, [r7, #7]
 80012bc:	9300      	str	r3, [sp, #0]
 80012be:	460b      	mov	r3, r1
 80012c0:	68b9      	ldr	r1, [r7, #8]
 80012c2:	68f8      	ldr	r0, [r7, #12]
 80012c4:	f7ff ffa6 	bl	8001214 <set_pixel>
}
 80012c8:	bf00      	nop
 80012ca:	3710      	adds	r7, #16
 80012cc:	46bd      	mov	sp, r7
 80012ce:	bd80      	pop	{r7, pc}

080012d0 <get_rgb>:


void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 80012d0:	b480      	push	{r7}
 80012d2:	b085      	sub	sp, #20
 80012d4:	af00      	add	r7, sp, #0
 80012d6:	60b9      	str	r1, [r7, #8]
 80012d8:	607a      	str	r2, [r7, #4]
 80012da:	603b      	str	r3, [r7, #0]
 80012dc:	4603      	mov	r3, r0
 80012de:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 80012e0:	7bfb      	ldrb	r3, [r7, #15]
 80012e2:	089b      	lsrs	r3, r3, #2
 80012e4:	b2db      	uxtb	r3, r3
 80012e6:	f003 0301 	and.w	r3, r3, #1
 80012ea:	b2da      	uxtb	r2, r3
 80012ec:	68bb      	ldr	r3, [r7, #8]
 80012ee:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 80012f0:	7bfb      	ldrb	r3, [r7, #15]
 80012f2:	085b      	lsrs	r3, r3, #1
 80012f4:	b2db      	uxtb	r3, r3
 80012f6:	f003 0301 	and.w	r3, r3, #1
 80012fa:	b2da      	uxtb	r2, r3
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8001300:	7bfb      	ldrb	r3, [r7, #15]
 8001302:	f003 0301 	and.w	r3, r3, #1
 8001306:	b2da      	uxtb	r2, r3
 8001308:	683b      	ldr	r3, [r7, #0]
 800130a:	701a      	strb	r2, [r3, #0]
}
 800130c:	bf00      	nop
 800130e:	3714      	adds	r7, #20
 8001310:	46bd      	mov	sp, r7
 8001312:	bc80      	pop	{r7}
 8001314:	4770      	bx	lr
	...

08001318 <render_row>:

uint8_t current_row = 0;
void render_row() {
 8001318:	b580      	push	{r7, lr}
 800131a:	b084      	sub	sp, #16
 800131c:	af00      	add	r7, sp, #0
	uint8_t r, g, b;
	for (uint8_t segment = 0; segment < 16; ++segment) {
 800131e:	2300      	movs	r3, #0
 8001320:	73fb      	strb	r3, [r7, #15]
 8001322:	e092      	b.n	800144a <render_row+0x132>
		for (int8_t block = 1; block >= 0; --block) {
 8001324:	2301      	movs	r3, #1
 8001326:	73bb      	strb	r3, [r7, #14]
 8001328:	e087      	b.n	800143a <render_row+0x122>
			for (uint8_t window = 0; window < 4; ++window) {
 800132a:	2300      	movs	r3, #0
 800132c:	737b      	strb	r3, [r7, #13]
 800132e:	e07c      	b.n	800142a <render_row+0x112>
#if TEARING_FIX
				uint8_t x = segment*4 + window -1*block;
#else
				uint8_t x = segment*4 + window;
 8001330:	7bfb      	ldrb	r3, [r7, #15]
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	b2da      	uxtb	r2, r3
 8001336:	7b7b      	ldrb	r3, [r7, #13]
 8001338:	4413      	add	r3, r2
 800133a:	733b      	strb	r3, [r7, #12]
#endif
				uint8_t y = current_row + block*8;
 800133c:	7bbb      	ldrb	r3, [r7, #14]
 800133e:	00db      	lsls	r3, r3, #3
 8001340:	b2da      	uxtb	r2, r3
 8001342:	4b6f      	ldr	r3, [pc, #444]	@ (8001500 <render_row+0x1e8>)
 8001344:	781b      	ldrb	r3, [r3, #0]
 8001346:	4413      	add	r3, r2
 8001348:	72fb      	strb	r3, [r7, #11]
				uint8_t data_area_1 = (*front_buffer)[x][y];
 800134a:	4b6e      	ldr	r3, [pc, #440]	@ (8001504 <render_row+0x1ec>)
 800134c:	6819      	ldr	r1, [r3, #0]
 800134e:	7b3a      	ldrb	r2, [r7, #12]
 8001350:	7afb      	ldrb	r3, [r7, #11]
 8001352:	0152      	lsls	r2, r2, #5
 8001354:	440a      	add	r2, r1
 8001356:	4413      	add	r3, r2
 8001358:	781b      	ldrb	r3, [r3, #0]
 800135a:	72bb      	strb	r3, [r7, #10]
				uint8_t data_area_2 = (*front_buffer)[x][y + 16];
 800135c:	4b69      	ldr	r3, [pc, #420]	@ (8001504 <render_row+0x1ec>)
 800135e:	6819      	ldr	r1, [r3, #0]
 8001360:	7b3a      	ldrb	r2, [r7, #12]
 8001362:	7afb      	ldrb	r3, [r7, #11]
 8001364:	3310      	adds	r3, #16
 8001366:	0152      	lsls	r2, r2, #5
 8001368:	440a      	add	r2, r1
 800136a:	4413      	add	r3, r2
 800136c:	781b      	ldrb	r3, [r3, #0]
 800136e:	727b      	strb	r3, [r7, #9]
					data_area_2 = 0;
				}
#endif


				get_rgb(data_area_1, &r, &g, &b);
 8001370:	1dbb      	adds	r3, r7, #6
 8001372:	1dfa      	adds	r2, r7, #7
 8001374:	f107 0108 	add.w	r1, r7, #8
 8001378:	7ab8      	ldrb	r0, [r7, #10]
 800137a:	f7ff ffa9 	bl	80012d0 <get_rgb>
				R1(r);
 800137e:	7a3b      	ldrb	r3, [r7, #8]
 8001380:	2b00      	cmp	r3, #0
 8001382:	d003      	beq.n	800138c <render_row+0x74>
 8001384:	4b60      	ldr	r3, [pc, #384]	@ (8001508 <render_row+0x1f0>)
 8001386:	2220      	movs	r2, #32
 8001388:	611a      	str	r2, [r3, #16]
 800138a:	e002      	b.n	8001392 <render_row+0x7a>
 800138c:	4b5e      	ldr	r3, [pc, #376]	@ (8001508 <render_row+0x1f0>)
 800138e:	2220      	movs	r2, #32
 8001390:	615a      	str	r2, [r3, #20]
				G1(g);
 8001392:	79fb      	ldrb	r3, [r7, #7]
 8001394:	2b00      	cmp	r3, #0
 8001396:	d003      	beq.n	80013a0 <render_row+0x88>
 8001398:	4b5b      	ldr	r3, [pc, #364]	@ (8001508 <render_row+0x1f0>)
 800139a:	2208      	movs	r2, #8
 800139c:	611a      	str	r2, [r3, #16]
 800139e:	e002      	b.n	80013a6 <render_row+0x8e>
 80013a0:	4b59      	ldr	r3, [pc, #356]	@ (8001508 <render_row+0x1f0>)
 80013a2:	2208      	movs	r2, #8
 80013a4:	615a      	str	r2, [r3, #20]
				B1(b);
 80013a6:	79bb      	ldrb	r3, [r7, #6]
 80013a8:	2b00      	cmp	r3, #0
 80013aa:	d004      	beq.n	80013b6 <render_row+0x9e>
 80013ac:	4b57      	ldr	r3, [pc, #348]	@ (800150c <render_row+0x1f4>)
 80013ae:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	e003      	b.n	80013be <render_row+0xa6>
 80013b6:	4b55      	ldr	r3, [pc, #340]	@ (800150c <render_row+0x1f4>)
 80013b8:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80013bc:	615a      	str	r2, [r3, #20]

				get_rgb(data_area_2, &r, &g, &b);
 80013be:	1dbb      	adds	r3, r7, #6
 80013c0:	1dfa      	adds	r2, r7, #7
 80013c2:	f107 0108 	add.w	r1, r7, #8
 80013c6:	7a78      	ldrb	r0, [r7, #9]
 80013c8:	f7ff ff82 	bl	80012d0 <get_rgb>
				R2(r);
 80013cc:	7a3b      	ldrb	r3, [r7, #8]
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d003      	beq.n	80013da <render_row+0xc2>
 80013d2:	4b4d      	ldr	r3, [pc, #308]	@ (8001508 <render_row+0x1f0>)
 80013d4:	2210      	movs	r2, #16
 80013d6:	611a      	str	r2, [r3, #16]
 80013d8:	e002      	b.n	80013e0 <render_row+0xc8>
 80013da:	4b4b      	ldr	r3, [pc, #300]	@ (8001508 <render_row+0x1f0>)
 80013dc:	2210      	movs	r2, #16
 80013de:	615a      	str	r2, [r3, #20]
				G2(g);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	2b00      	cmp	r3, #0
 80013e4:	d003      	beq.n	80013ee <render_row+0xd6>
 80013e6:	4b4a      	ldr	r3, [pc, #296]	@ (8001510 <render_row+0x1f8>)
 80013e8:	2204      	movs	r2, #4
 80013ea:	611a      	str	r2, [r3, #16]
 80013ec:	e002      	b.n	80013f4 <render_row+0xdc>
 80013ee:	4b48      	ldr	r3, [pc, #288]	@ (8001510 <render_row+0x1f8>)
 80013f0:	2204      	movs	r2, #4
 80013f2:	615a      	str	r2, [r3, #20]
				B2(b);
 80013f4:	79bb      	ldrb	r3, [r7, #6]
 80013f6:	2b00      	cmp	r3, #0
 80013f8:	d004      	beq.n	8001404 <render_row+0xec>
 80013fa:	4b44      	ldr	r3, [pc, #272]	@ (800150c <render_row+0x1f4>)
 80013fc:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8001400:	611a      	str	r2, [r3, #16]
 8001402:	e003      	b.n	800140c <render_row+0xf4>
 8001404:	4b41      	ldr	r3, [pc, #260]	@ (800150c <render_row+0x1f4>)
 8001406:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800140a:	615a      	str	r2, [r3, #20]

				CLK_H;
 800140c:	2201      	movs	r2, #1
 800140e:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 8001412:	483d      	ldr	r0, [pc, #244]	@ (8001508 <render_row+0x1f0>)
 8001414:	f000 fd33 	bl	8001e7e <HAL_GPIO_WritePin>
				CLK_L;
 8001418:	2200      	movs	r2, #0
 800141a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800141e:	483a      	ldr	r0, [pc, #232]	@ (8001508 <render_row+0x1f0>)
 8001420:	f000 fd2d 	bl	8001e7e <HAL_GPIO_WritePin>
			for (uint8_t window = 0; window < 4; ++window) {
 8001424:	7b7b      	ldrb	r3, [r7, #13]
 8001426:	3301      	adds	r3, #1
 8001428:	737b      	strb	r3, [r7, #13]
 800142a:	7b7b      	ldrb	r3, [r7, #13]
 800142c:	2b03      	cmp	r3, #3
 800142e:	f67f af7f 	bls.w	8001330 <render_row+0x18>
		for (int8_t block = 1; block >= 0; --block) {
 8001432:	7bbb      	ldrb	r3, [r7, #14]
 8001434:	3b01      	subs	r3, #1
 8001436:	b2db      	uxtb	r3, r3
 8001438:	73bb      	strb	r3, [r7, #14]
 800143a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800143e:	2b00      	cmp	r3, #0
 8001440:	f6bf af73 	bge.w	800132a <render_row+0x12>
	for (uint8_t segment = 0; segment < 16; ++segment) {
 8001444:	7bfb      	ldrb	r3, [r7, #15]
 8001446:	3301      	adds	r3, #1
 8001448:	73fb      	strb	r3, [r7, #15]
 800144a:	7bfb      	ldrb	r3, [r7, #15]
 800144c:	2b0f      	cmp	r3, #15
 800144e:	f67f af69 	bls.w	8001324 <render_row+0xc>
			}
		}
	}

	OE_TIMER_DISABLE;
 8001452:	4b2e      	ldr	r3, [pc, #184]	@ (800150c <render_row+0x1f4>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	4a2d      	ldr	r2, [pc, #180]	@ (800150c <render_row+0x1f4>)
 8001458:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 800145c:	6013      	str	r3, [r2, #0]
	LAT_H;
 800145e:	2201      	movs	r2, #1
 8001460:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001464:	4828      	ldr	r0, [pc, #160]	@ (8001508 <render_row+0x1f0>)
 8001466:	f000 fd0a 	bl	8001e7e <HAL_GPIO_WritePin>
	LAT_L;
 800146a:	2200      	movs	r2, #0
 800146c:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8001470:	4825      	ldr	r0, [pc, #148]	@ (8001508 <render_row+0x1f0>)
 8001472:	f000 fd04 	bl	8001e7e <HAL_GPIO_WritePin>
	ROW(current_row);
 8001476:	4b22      	ldr	r3, [pc, #136]	@ (8001500 <render_row+0x1e8>)
 8001478:	781b      	ldrb	r3, [r3, #0]
 800147a:	f003 0301 	and.w	r3, r3, #1
 800147e:	2b00      	cmp	r3, #0
 8001480:	d004      	beq.n	800148c <render_row+0x174>
 8001482:	4b24      	ldr	r3, [pc, #144]	@ (8001514 <render_row+0x1fc>)
 8001484:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001488:	611a      	str	r2, [r3, #16]
 800148a:	e003      	b.n	8001494 <render_row+0x17c>
 800148c:	4b21      	ldr	r3, [pc, #132]	@ (8001514 <render_row+0x1fc>)
 800148e:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001492:	615a      	str	r2, [r3, #20]
 8001494:	4b1a      	ldr	r3, [pc, #104]	@ (8001500 <render_row+0x1e8>)
 8001496:	781b      	ldrb	r3, [r3, #0]
 8001498:	f003 0302 	and.w	r3, r3, #2
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <render_row+0x192>
 80014a0:	4b1a      	ldr	r3, [pc, #104]	@ (800150c <render_row+0x1f4>)
 80014a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014a6:	611a      	str	r2, [r3, #16]
 80014a8:	e003      	b.n	80014b2 <render_row+0x19a>
 80014aa:	4b18      	ldr	r3, [pc, #96]	@ (800150c <render_row+0x1f4>)
 80014ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80014b0:	615a      	str	r2, [r3, #20]
 80014b2:	4b13      	ldr	r3, [pc, #76]	@ (8001500 <render_row+0x1e8>)
 80014b4:	781b      	ldrb	r3, [r3, #0]
 80014b6:	f003 0304 	and.w	r3, r3, #4
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d004      	beq.n	80014c8 <render_row+0x1b0>
 80014be:	4b13      	ldr	r3, [pc, #76]	@ (800150c <render_row+0x1f4>)
 80014c0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014c4:	611a      	str	r2, [r3, #16]
 80014c6:	e003      	b.n	80014d0 <render_row+0x1b8>
 80014c8:	4b10      	ldr	r3, [pc, #64]	@ (800150c <render_row+0x1f4>)
 80014ca:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80014ce:	615a      	str	r2, [r3, #20]
 80014d0:	4b0b      	ldr	r3, [pc, #44]	@ (8001500 <render_row+0x1e8>)
 80014d2:	781b      	ldrb	r3, [r3, #0]
 80014d4:	f003 0308 	and.w	r3, r3, #8
 80014d8:	2b00      	cmp	r3, #0
 80014da:	d003      	beq.n	80014e4 <render_row+0x1cc>
 80014dc:	4b0b      	ldr	r3, [pc, #44]	@ (800150c <render_row+0x1f4>)
 80014de:	2280      	movs	r2, #128	@ 0x80
 80014e0:	611a      	str	r2, [r3, #16]
 80014e2:	e002      	b.n	80014ea <render_row+0x1d2>
 80014e4:	4b09      	ldr	r3, [pc, #36]	@ (800150c <render_row+0x1f4>)
 80014e6:	2280      	movs	r2, #128	@ 0x80
 80014e8:	615a      	str	r2, [r3, #20]
	OE_TIMER_ENABLE;
 80014ea:	4b08      	ldr	r3, [pc, #32]	@ (800150c <render_row+0x1f4>)
 80014ec:	681b      	ldr	r3, [r3, #0]
 80014ee:	4a07      	ldr	r2, [pc, #28]	@ (800150c <render_row+0x1f4>)
 80014f0:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 80014f4:	6013      	str	r3, [r2, #0]
}
 80014f6:	bf00      	nop
 80014f8:	3710      	adds	r7, #16
 80014fa:	46bd      	mov	sp, r7
 80014fc:	bd80      	pop	{r7, pc}
 80014fe:	bf00      	nop
 8001500:	2000213d 	.word	0x2000213d
 8001504:	20000000 	.word	0x20000000
 8001508:	40010c00 	.word	0x40010c00
 800150c:	40011000 	.word	0x40011000
 8001510:	40011400 	.word	0x40011400
 8001514:	40010800 	.word	0x40010800

08001518 <render_buffer>:
// it does not account for the time it takes to render all rows
// so it should be minimum time of 8 row rendering otherwise this is useless
#define RENDER_INTERVAL_MS 10
uint32_t last_render_time = 0;

void render_buffer() {
 8001518:	b580      	push	{r7, lr}
 800151a:	b082      	sub	sp, #8
 800151c:	af00      	add	r7, sp, #0
	if (current_row == 0) {
 800151e:	4b16      	ldr	r3, [pc, #88]	@ (8001578 <render_buffer+0x60>)
 8001520:	781b      	ldrb	r3, [r3, #0]
 8001522:	2b00      	cmp	r3, #0
 8001524:	d10b      	bne.n	800153e <render_buffer+0x26>
		uint32_t tick = HAL_GetTick();
 8001526:	f000 f9f7 	bl	8001918 <HAL_GetTick>
 800152a:	6078      	str	r0, [r7, #4]
		if (tick - last_render_time < RENDER_INTERVAL_MS) {
 800152c:	4b13      	ldr	r3, [pc, #76]	@ (800157c <render_buffer+0x64>)
 800152e:	681b      	ldr	r3, [r3, #0]
 8001530:	687a      	ldr	r2, [r7, #4]
 8001532:	1ad3      	subs	r3, r2, r3
 8001534:	2b09      	cmp	r3, #9
 8001536:	d91b      	bls.n	8001570 <render_buffer+0x58>
			return;
		} else {
			last_render_time = tick;
 8001538:	4a10      	ldr	r2, [pc, #64]	@ (800157c <render_buffer+0x64>)
 800153a:	687b      	ldr	r3, [r7, #4]
 800153c:	6013      	str	r3, [r2, #0]
		}
	}


	render_row();
 800153e:	f7ff feeb 	bl	8001318 <render_row>

	if (++current_row == 8) {
 8001542:	4b0d      	ldr	r3, [pc, #52]	@ (8001578 <render_buffer+0x60>)
 8001544:	781b      	ldrb	r3, [r3, #0]
 8001546:	3301      	adds	r3, #1
 8001548:	b2da      	uxtb	r2, r3
 800154a:	4b0b      	ldr	r3, [pc, #44]	@ (8001578 <render_buffer+0x60>)
 800154c:	701a      	strb	r2, [r3, #0]
 800154e:	4b0a      	ldr	r3, [pc, #40]	@ (8001578 <render_buffer+0x60>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	2b08      	cmp	r3, #8
 8001554:	d10d      	bne.n	8001572 <render_buffer+0x5a>
		current_row = 0;
 8001556:	4b08      	ldr	r3, [pc, #32]	@ (8001578 <render_buffer+0x60>)
 8001558:	2200      	movs	r2, #0
 800155a:	701a      	strb	r2, [r3, #0]
		if (is_back_buffer_new) {
 800155c:	4b08      	ldr	r3, [pc, #32]	@ (8001580 <render_buffer+0x68>)
 800155e:	781b      	ldrb	r3, [r3, #0]
 8001560:	2b00      	cmp	r3, #0
 8001562:	d006      	beq.n	8001572 <render_buffer+0x5a>
			swap_buffers();
 8001564:	f7ff fe32 	bl	80011cc <swap_buffers>
			is_back_buffer_new = false;
 8001568:	4b05      	ldr	r3, [pc, #20]	@ (8001580 <render_buffer+0x68>)
 800156a:	2200      	movs	r2, #0
 800156c:	701a      	strb	r2, [r3, #0]
 800156e:	e000      	b.n	8001572 <render_buffer+0x5a>
			return;
 8001570:	bf00      	nop
		}
	}
}
 8001572:	3708      	adds	r7, #8
 8001574:	46bd      	mov	sp, r7
 8001576:	bd80      	pop	{r7, pc}
 8001578:	2000213d 	.word	0x2000213d
 800157c:	20002140 	.word	0x20002140
 8001580:	2000213c 	.word	0x2000213c

08001584 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                                        /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001584:	b480      	push	{r7}
 8001586:	b085      	sub	sp, #20
 8001588:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 800158a:	4b15      	ldr	r3, [pc, #84]	@ (80015e0 <HAL_MspInit+0x5c>)
 800158c:	699b      	ldr	r3, [r3, #24]
 800158e:	4a14      	ldr	r2, [pc, #80]	@ (80015e0 <HAL_MspInit+0x5c>)
 8001590:	f043 0301 	orr.w	r3, r3, #1
 8001594:	6193      	str	r3, [r2, #24]
 8001596:	4b12      	ldr	r3, [pc, #72]	@ (80015e0 <HAL_MspInit+0x5c>)
 8001598:	699b      	ldr	r3, [r3, #24]
 800159a:	f003 0301 	and.w	r3, r3, #1
 800159e:	60bb      	str	r3, [r7, #8]
 80015a0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80015a2:	4b0f      	ldr	r3, [pc, #60]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015a4:	69db      	ldr	r3, [r3, #28]
 80015a6:	4a0e      	ldr	r2, [pc, #56]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015a8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015ac:	61d3      	str	r3, [r2, #28]
 80015ae:	4b0c      	ldr	r3, [pc, #48]	@ (80015e0 <HAL_MspInit+0x5c>)
 80015b0:	69db      	ldr	r3, [r3, #28]
 80015b2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015b6:	607b      	str	r3, [r7, #4]
 80015b8:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 80015ba:	4b0a      	ldr	r3, [pc, #40]	@ (80015e4 <HAL_MspInit+0x60>)
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	60fb      	str	r3, [r7, #12]
 80015c0:	68fb      	ldr	r3, [r7, #12]
 80015c2:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 80015c6:	60fb      	str	r3, [r7, #12]
 80015c8:	68fb      	ldr	r3, [r7, #12]
 80015ca:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 80015ce:	60fb      	str	r3, [r7, #12]
 80015d0:	4a04      	ldr	r2, [pc, #16]	@ (80015e4 <HAL_MspInit+0x60>)
 80015d2:	68fb      	ldr	r3, [r7, #12]
 80015d4:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80015d6:	bf00      	nop
 80015d8:	3714      	adds	r7, #20
 80015da:	46bd      	mov	sp, r7
 80015dc:	bc80      	pop	{r7}
 80015de:	4770      	bx	lr
 80015e0:	40021000 	.word	0x40021000
 80015e4:	40010000 	.word	0x40010000

080015e8 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80015e8:	b580      	push	{r7, lr}
 80015ea:	b088      	sub	sp, #32
 80015ec:	af00      	add	r7, sp, #0
 80015ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015f0:	f107 0310 	add.w	r3, r7, #16
 80015f4:	2200      	movs	r2, #0
 80015f6:	601a      	str	r2, [r3, #0]
 80015f8:	605a      	str	r2, [r3, #4]
 80015fa:	609a      	str	r2, [r3, #8]
 80015fc:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	681b      	ldr	r3, [r3, #0]
 8001602:	4a15      	ldr	r2, [pc, #84]	@ (8001658 <HAL_SPI_MspInit+0x70>)
 8001604:	4293      	cmp	r3, r2
 8001606:	d123      	bne.n	8001650 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001608:	4b14      	ldr	r3, [pc, #80]	@ (800165c <HAL_SPI_MspInit+0x74>)
 800160a:	699b      	ldr	r3, [r3, #24]
 800160c:	4a13      	ldr	r2, [pc, #76]	@ (800165c <HAL_SPI_MspInit+0x74>)
 800160e:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8001612:	6193      	str	r3, [r2, #24]
 8001614:	4b11      	ldr	r3, [pc, #68]	@ (800165c <HAL_SPI_MspInit+0x74>)
 8001616:	699b      	ldr	r3, [r3, #24]
 8001618:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 800161c:	60fb      	str	r3, [r7, #12]
 800161e:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001620:	4b0e      	ldr	r3, [pc, #56]	@ (800165c <HAL_SPI_MspInit+0x74>)
 8001622:	699b      	ldr	r3, [r3, #24]
 8001624:	4a0d      	ldr	r2, [pc, #52]	@ (800165c <HAL_SPI_MspInit+0x74>)
 8001626:	f043 0304 	orr.w	r3, r3, #4
 800162a:	6193      	str	r3, [r2, #24]
 800162c:	4b0b      	ldr	r3, [pc, #44]	@ (800165c <HAL_SPI_MspInit+0x74>)
 800162e:	699b      	ldr	r3, [r3, #24]
 8001630:	f003 0304 	and.w	r3, r3, #4
 8001634:	60bb      	str	r3, [r7, #8]
 8001636:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001638:	23a0      	movs	r3, #160	@ 0xa0
 800163a:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800163c:	2302      	movs	r3, #2
 800163e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001640:	2303      	movs	r3, #3
 8001642:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001644:	f107 0310 	add.w	r3, r7, #16
 8001648:	4619      	mov	r1, r3
 800164a:	4805      	ldr	r0, [pc, #20]	@ (8001660 <HAL_SPI_MspInit+0x78>)
 800164c:	f000 fa7c 	bl	8001b48 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8001650:	bf00      	nop
 8001652:	3720      	adds	r7, #32
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40013000 	.word	0x40013000
 800165c:	40021000 	.word	0x40021000
 8001660:	40010800 	.word	0x40010800

08001664 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8001664:	b580      	push	{r7, lr}
 8001666:	b084      	sub	sp, #16
 8001668:	af00      	add	r7, sp, #0
 800166a:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 800166c:	687b      	ldr	r3, [r7, #4]
 800166e:	681b      	ldr	r3, [r3, #0]
 8001670:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001674:	d114      	bne.n	80016a0 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001676:	4b15      	ldr	r3, [pc, #84]	@ (80016cc <HAL_TIM_Base_MspInit+0x68>)
 8001678:	69db      	ldr	r3, [r3, #28]
 800167a:	4a14      	ldr	r2, [pc, #80]	@ (80016cc <HAL_TIM_Base_MspInit+0x68>)
 800167c:	f043 0301 	orr.w	r3, r3, #1
 8001680:	61d3      	str	r3, [r2, #28]
 8001682:	4b12      	ldr	r3, [pc, #72]	@ (80016cc <HAL_TIM_Base_MspInit+0x68>)
 8001684:	69db      	ldr	r3, [r3, #28]
 8001686:	f003 0301 	and.w	r3, r3, #1
 800168a:	60fb      	str	r3, [r7, #12]
 800168c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800168e:	2200      	movs	r2, #0
 8001690:	2100      	movs	r1, #0
 8001692:	201c      	movs	r0, #28
 8001694:	f000 fa21 	bl	8001ada <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001698:	201c      	movs	r0, #28
 800169a:	f000 fa3a 	bl	8001b12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800169e:	e010      	b.n	80016c2 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	681b      	ldr	r3, [r3, #0]
 80016a4:	4a0a      	ldr	r2, [pc, #40]	@ (80016d0 <HAL_TIM_Base_MspInit+0x6c>)
 80016a6:	4293      	cmp	r3, r2
 80016a8:	d10b      	bne.n	80016c2 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80016aa:	4b08      	ldr	r3, [pc, #32]	@ (80016cc <HAL_TIM_Base_MspInit+0x68>)
 80016ac:	69db      	ldr	r3, [r3, #28]
 80016ae:	4a07      	ldr	r2, [pc, #28]	@ (80016cc <HAL_TIM_Base_MspInit+0x68>)
 80016b0:	f043 0302 	orr.w	r3, r3, #2
 80016b4:	61d3      	str	r3, [r2, #28]
 80016b6:	4b05      	ldr	r3, [pc, #20]	@ (80016cc <HAL_TIM_Base_MspInit+0x68>)
 80016b8:	69db      	ldr	r3, [r3, #28]
 80016ba:	f003 0302 	and.w	r3, r3, #2
 80016be:	60bb      	str	r3, [r7, #8]
 80016c0:	68bb      	ldr	r3, [r7, #8]
}
 80016c2:	bf00      	nop
 80016c4:	3710      	adds	r7, #16
 80016c6:	46bd      	mov	sp, r7
 80016c8:	bd80      	pop	{r7, pc}
 80016ca:	bf00      	nop
 80016cc:	40021000 	.word	0x40021000
 80016d0:	40000400 	.word	0x40000400

080016d4 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b08a      	sub	sp, #40	@ 0x28
 80016d8:	af00      	add	r7, sp, #0
 80016da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016dc:	f107 0314 	add.w	r3, r7, #20
 80016e0:	2200      	movs	r2, #0
 80016e2:	601a      	str	r2, [r3, #0]
 80016e4:	605a      	str	r2, [r3, #4]
 80016e6:	609a      	str	r2, [r3, #8]
 80016e8:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM2)
 80016ea:	687b      	ldr	r3, [r7, #4]
 80016ec:	681b      	ldr	r3, [r3, #0]
 80016ee:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80016f2:	d118      	bne.n	8001726 <HAL_TIM_MspPostInit+0x52>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016f4:	4b25      	ldr	r3, [pc, #148]	@ (800178c <HAL_TIM_MspPostInit+0xb8>)
 80016f6:	699b      	ldr	r3, [r3, #24]
 80016f8:	4a24      	ldr	r2, [pc, #144]	@ (800178c <HAL_TIM_MspPostInit+0xb8>)
 80016fa:	f043 0304 	orr.w	r3, r3, #4
 80016fe:	6193      	str	r3, [r2, #24]
 8001700:	4b22      	ldr	r3, [pc, #136]	@ (800178c <HAL_TIM_MspPostInit+0xb8>)
 8001702:	699b      	ldr	r3, [r3, #24]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	613b      	str	r3, [r7, #16]
 800170a:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0-WKUP     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800170c:	2301      	movs	r3, #1
 800170e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001710:	2302      	movs	r3, #2
 8001712:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001714:	2302      	movs	r3, #2
 8001716:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001718:	f107 0314 	add.w	r3, r7, #20
 800171c:	4619      	mov	r1, r3
 800171e:	481c      	ldr	r0, [pc, #112]	@ (8001790 <HAL_TIM_MspPostInit+0xbc>)
 8001720:	f000 fa12 	bl	8001b48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8001724:	e02e      	b.n	8001784 <HAL_TIM_MspPostInit+0xb0>
  else if(htim->Instance==TIM3)
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4a1a      	ldr	r2, [pc, #104]	@ (8001794 <HAL_TIM_MspPostInit+0xc0>)
 800172c:	4293      	cmp	r3, r2
 800172e:	d129      	bne.n	8001784 <HAL_TIM_MspPostInit+0xb0>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001730:	4b16      	ldr	r3, [pc, #88]	@ (800178c <HAL_TIM_MspPostInit+0xb8>)
 8001732:	699b      	ldr	r3, [r3, #24]
 8001734:	4a15      	ldr	r2, [pc, #84]	@ (800178c <HAL_TIM_MspPostInit+0xb8>)
 8001736:	f043 0310 	orr.w	r3, r3, #16
 800173a:	6193      	str	r3, [r2, #24]
 800173c:	4b13      	ldr	r3, [pc, #76]	@ (800178c <HAL_TIM_MspPostInit+0xb8>)
 800173e:	699b      	ldr	r3, [r3, #24]
 8001740:	f003 0310 	and.w	r3, r3, #16
 8001744:	60fb      	str	r3, [r7, #12]
 8001746:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001748:	2340      	movs	r3, #64	@ 0x40
 800174a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174c:	2302      	movs	r3, #2
 800174e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001750:	2302      	movs	r3, #2
 8001752:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001754:	f107 0314 	add.w	r3, r7, #20
 8001758:	4619      	mov	r1, r3
 800175a:	480f      	ldr	r0, [pc, #60]	@ (8001798 <HAL_TIM_MspPostInit+0xc4>)
 800175c:	f000 f9f4 	bl	8001b48 <HAL_GPIO_Init>
    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8001760:	4b0e      	ldr	r3, [pc, #56]	@ (800179c <HAL_TIM_MspPostInit+0xc8>)
 8001762:	685b      	ldr	r3, [r3, #4]
 8001764:	627b      	str	r3, [r7, #36]	@ 0x24
 8001766:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001768:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 800176c:	627b      	str	r3, [r7, #36]	@ 0x24
 800176e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001770:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8001774:	627b      	str	r3, [r7, #36]	@ 0x24
 8001776:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001778:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 800177c:	627b      	str	r3, [r7, #36]	@ 0x24
 800177e:	4a07      	ldr	r2, [pc, #28]	@ (800179c <HAL_TIM_MspPostInit+0xc8>)
 8001780:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001782:	6053      	str	r3, [r2, #4]
}
 8001784:	bf00      	nop
 8001786:	3728      	adds	r7, #40	@ 0x28
 8001788:	46bd      	mov	sp, r7
 800178a:	bd80      	pop	{r7, pc}
 800178c:	40021000 	.word	0x40021000
 8001790:	40010800 	.word	0x40010800
 8001794:	40000400 	.word	0x40000400
 8001798:	40011000 	.word	0x40011000
 800179c:	40010000 	.word	0x40010000

080017a0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80017a0:	b480      	push	{r7}
 80017a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80017a4:	bf00      	nop
 80017a6:	e7fd      	b.n	80017a4 <NMI_Handler+0x4>

080017a8 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80017a8:	b480      	push	{r7}
 80017aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80017ac:	bf00      	nop
 80017ae:	e7fd      	b.n	80017ac <HardFault_Handler+0x4>

080017b0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80017b0:	b480      	push	{r7}
 80017b2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80017b4:	bf00      	nop
 80017b6:	e7fd      	b.n	80017b4 <MemManage_Handler+0x4>

080017b8 <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80017b8:	b480      	push	{r7}
 80017ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80017bc:	bf00      	nop
 80017be:	e7fd      	b.n	80017bc <BusFault_Handler+0x4>

080017c0 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80017c0:	b480      	push	{r7}
 80017c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80017c4:	bf00      	nop
 80017c6:	e7fd      	b.n	80017c4 <UsageFault_Handler+0x4>

080017c8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80017c8:	b480      	push	{r7}
 80017ca:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80017cc:	bf00      	nop
 80017ce:	46bd      	mov	sp, r7
 80017d0:	bc80      	pop	{r7}
 80017d2:	4770      	bx	lr

080017d4 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80017d4:	b480      	push	{r7}
 80017d6:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80017d8:	bf00      	nop
 80017da:	46bd      	mov	sp, r7
 80017dc:	bc80      	pop	{r7}
 80017de:	4770      	bx	lr

080017e0 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80017e0:	b480      	push	{r7}
 80017e2:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80017e4:	bf00      	nop
 80017e6:	46bd      	mov	sp, r7
 80017e8:	bc80      	pop	{r7}
 80017ea:	4770      	bx	lr

080017ec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80017f0:	f000 f880 	bl	80018f4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80017f4:	bf00      	nop
 80017f6:	bd80      	pop	{r7, pc}

080017f8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	// todo: disable tim2 at the start of this function, re enable at the end
	// todo make something like OE_TIMER_DISABLE macro
	render_buffer();
 80017fc:	f7ff fe8c 	bl	8001518 <render_buffer>
  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001800:	4802      	ldr	r0, [pc, #8]	@ (800180c <TIM2_IRQHandler+0x14>)
 8001802:	f001 f953 	bl	8002aac <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001806:	bf00      	nop
 8001808:	bd80      	pop	{r7, pc}
 800180a:	bf00      	nop
 800180c:	20001094 	.word	0x20001094

08001810 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8001810:	b480      	push	{r7}
 8001812:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001814:	bf00      	nop
 8001816:	46bd      	mov	sp, r7
 8001818:	bc80      	pop	{r7}
 800181a:	4770      	bx	lr

0800181c <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 800181c:	f7ff fff8 	bl	8001810 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8001820:	480b      	ldr	r0, [pc, #44]	@ (8001850 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8001822:	490c      	ldr	r1, [pc, #48]	@ (8001854 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8001824:	4a0c      	ldr	r2, [pc, #48]	@ (8001858 <LoopFillZerobss+0x16>)
  movs r3, #0
 8001826:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001828:	e002      	b.n	8001830 <LoopCopyDataInit>

0800182a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800182a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800182c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800182e:	3304      	adds	r3, #4

08001830 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001830:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001832:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001834:	d3f9      	bcc.n	800182a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001836:	4a09      	ldr	r2, [pc, #36]	@ (800185c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8001838:	4c09      	ldr	r4, [pc, #36]	@ (8001860 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800183a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800183c:	e001      	b.n	8001842 <LoopFillZerobss>

0800183e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800183e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001840:	3204      	adds	r2, #4

08001842 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001842:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001844:	d3fb      	bcc.n	800183e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001846:	f001 ff0b 	bl	8003660 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800184a:	f7ff fa1d 	bl	8000c88 <main>
  bx lr
 800184e:	4770      	bx	lr
  ldr r0, =_sdata
 8001850:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001854:	20000014 	.word	0x20000014
  ldr r2, =_sidata
 8001858:	08003714 	.word	0x08003714
  ldr r2, =_sbss
 800185c:	20000018 	.word	0x20000018
  ldr r4, =_ebss
 8001860:	20002148 	.word	0x20002148

08001864 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8001864:	e7fe      	b.n	8001864 <ADC1_2_IRQHandler>
	...

08001868 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001868:	b580      	push	{r7, lr}
 800186a:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800186c:	4b08      	ldr	r3, [pc, #32]	@ (8001890 <HAL_Init+0x28>)
 800186e:	681b      	ldr	r3, [r3, #0]
 8001870:	4a07      	ldr	r2, [pc, #28]	@ (8001890 <HAL_Init+0x28>)
 8001872:	f043 0310 	orr.w	r3, r3, #16
 8001876:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001878:	2003      	movs	r0, #3
 800187a:	f000 f923 	bl	8001ac4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800187e:	200f      	movs	r0, #15
 8001880:	f000 f808 	bl	8001894 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001884:	f7ff fe7e 	bl	8001584 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001888:	2300      	movs	r3, #0
}
 800188a:	4618      	mov	r0, r3
 800188c:	bd80      	pop	{r7, pc}
 800188e:	bf00      	nop
 8001890:	40022000 	.word	0x40022000

08001894 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	b082      	sub	sp, #8
 8001898:	af00      	add	r7, sp, #0
 800189a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800189c:	4b12      	ldr	r3, [pc, #72]	@ (80018e8 <HAL_InitTick+0x54>)
 800189e:	681a      	ldr	r2, [r3, #0]
 80018a0:	4b12      	ldr	r3, [pc, #72]	@ (80018ec <HAL_InitTick+0x58>)
 80018a2:	781b      	ldrb	r3, [r3, #0]
 80018a4:	4619      	mov	r1, r3
 80018a6:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80018aa:	fbb3 f3f1 	udiv	r3, r3, r1
 80018ae:	fbb2 f3f3 	udiv	r3, r2, r3
 80018b2:	4618      	mov	r0, r3
 80018b4:	f000 f93b 	bl	8001b2e <HAL_SYSTICK_Config>
 80018b8:	4603      	mov	r3, r0
 80018ba:	2b00      	cmp	r3, #0
 80018bc:	d001      	beq.n	80018c2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80018be:	2301      	movs	r3, #1
 80018c0:	e00e      	b.n	80018e0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	2b0f      	cmp	r3, #15
 80018c6:	d80a      	bhi.n	80018de <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80018c8:	2200      	movs	r2, #0
 80018ca:	6879      	ldr	r1, [r7, #4]
 80018cc:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 80018d0:	f000 f903 	bl	8001ada <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80018d4:	4a06      	ldr	r2, [pc, #24]	@ (80018f0 <HAL_InitTick+0x5c>)
 80018d6:	687b      	ldr	r3, [r7, #4]
 80018d8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80018da:	2300      	movs	r3, #0
 80018dc:	e000      	b.n	80018e0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80018de:	2301      	movs	r3, #1
}
 80018e0:	4618      	mov	r0, r3
 80018e2:	3708      	adds	r7, #8
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}
 80018e8:	20000008 	.word	0x20000008
 80018ec:	20000010 	.word	0x20000010
 80018f0:	2000000c 	.word	0x2000000c

080018f4 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80018f4:	b480      	push	{r7}
 80018f6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80018f8:	4b05      	ldr	r3, [pc, #20]	@ (8001910 <HAL_IncTick+0x1c>)
 80018fa:	781b      	ldrb	r3, [r3, #0]
 80018fc:	461a      	mov	r2, r3
 80018fe:	4b05      	ldr	r3, [pc, #20]	@ (8001914 <HAL_IncTick+0x20>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4413      	add	r3, r2
 8001904:	4a03      	ldr	r2, [pc, #12]	@ (8001914 <HAL_IncTick+0x20>)
 8001906:	6013      	str	r3, [r2, #0]
}
 8001908:	bf00      	nop
 800190a:	46bd      	mov	sp, r7
 800190c:	bc80      	pop	{r7}
 800190e:	4770      	bx	lr
 8001910:	20000010 	.word	0x20000010
 8001914:	20002144 	.word	0x20002144

08001918 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001918:	b480      	push	{r7}
 800191a:	af00      	add	r7, sp, #0
  return uwTick;
 800191c:	4b02      	ldr	r3, [pc, #8]	@ (8001928 <HAL_GetTick+0x10>)
 800191e:	681b      	ldr	r3, [r3, #0]
}
 8001920:	4618      	mov	r0, r3
 8001922:	46bd      	mov	sp, r7
 8001924:	bc80      	pop	{r7}
 8001926:	4770      	bx	lr
 8001928:	20002144 	.word	0x20002144

0800192c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800192c:	b480      	push	{r7}
 800192e:	b085      	sub	sp, #20
 8001930:	af00      	add	r7, sp, #0
 8001932:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001934:	687b      	ldr	r3, [r7, #4]
 8001936:	f003 0307 	and.w	r3, r3, #7
 800193a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800193c:	4b0c      	ldr	r3, [pc, #48]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 800193e:	68db      	ldr	r3, [r3, #12]
 8001940:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001942:	68ba      	ldr	r2, [r7, #8]
 8001944:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001948:	4013      	ands	r3, r2
 800194a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 800194c:	68fb      	ldr	r3, [r7, #12]
 800194e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001950:	68bb      	ldr	r3, [r7, #8]
 8001952:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001954:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001958:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 800195c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800195e:	4a04      	ldr	r2, [pc, #16]	@ (8001970 <__NVIC_SetPriorityGrouping+0x44>)
 8001960:	68bb      	ldr	r3, [r7, #8]
 8001962:	60d3      	str	r3, [r2, #12]
}
 8001964:	bf00      	nop
 8001966:	3714      	adds	r7, #20
 8001968:	46bd      	mov	sp, r7
 800196a:	bc80      	pop	{r7}
 800196c:	4770      	bx	lr
 800196e:	bf00      	nop
 8001970:	e000ed00 	.word	0xe000ed00

08001974 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001974:	b480      	push	{r7}
 8001976:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001978:	4b04      	ldr	r3, [pc, #16]	@ (800198c <__NVIC_GetPriorityGrouping+0x18>)
 800197a:	68db      	ldr	r3, [r3, #12]
 800197c:	0a1b      	lsrs	r3, r3, #8
 800197e:	f003 0307 	and.w	r3, r3, #7
}
 8001982:	4618      	mov	r0, r3
 8001984:	46bd      	mov	sp, r7
 8001986:	bc80      	pop	{r7}
 8001988:	4770      	bx	lr
 800198a:	bf00      	nop
 800198c:	e000ed00 	.word	0xe000ed00

08001990 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001990:	b480      	push	{r7}
 8001992:	b083      	sub	sp, #12
 8001994:	af00      	add	r7, sp, #0
 8001996:	4603      	mov	r3, r0
 8001998:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800199a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800199e:	2b00      	cmp	r3, #0
 80019a0:	db0b      	blt.n	80019ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80019a2:	79fb      	ldrb	r3, [r7, #7]
 80019a4:	f003 021f 	and.w	r2, r3, #31
 80019a8:	4906      	ldr	r1, [pc, #24]	@ (80019c4 <__NVIC_EnableIRQ+0x34>)
 80019aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019ae:	095b      	lsrs	r3, r3, #5
 80019b0:	2001      	movs	r0, #1
 80019b2:	fa00 f202 	lsl.w	r2, r0, r2
 80019b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80019ba:	bf00      	nop
 80019bc:	370c      	adds	r7, #12
 80019be:	46bd      	mov	sp, r7
 80019c0:	bc80      	pop	{r7}
 80019c2:	4770      	bx	lr
 80019c4:	e000e100 	.word	0xe000e100

080019c8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80019c8:	b480      	push	{r7}
 80019ca:	b083      	sub	sp, #12
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	4603      	mov	r3, r0
 80019d0:	6039      	str	r1, [r7, #0]
 80019d2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80019d4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019d8:	2b00      	cmp	r3, #0
 80019da:	db0a      	blt.n	80019f2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019dc:	683b      	ldr	r3, [r7, #0]
 80019de:	b2da      	uxtb	r2, r3
 80019e0:	490c      	ldr	r1, [pc, #48]	@ (8001a14 <__NVIC_SetPriority+0x4c>)
 80019e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80019e6:	0112      	lsls	r2, r2, #4
 80019e8:	b2d2      	uxtb	r2, r2
 80019ea:	440b      	add	r3, r1
 80019ec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80019f0:	e00a      	b.n	8001a08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80019f2:	683b      	ldr	r3, [r7, #0]
 80019f4:	b2da      	uxtb	r2, r3
 80019f6:	4908      	ldr	r1, [pc, #32]	@ (8001a18 <__NVIC_SetPriority+0x50>)
 80019f8:	79fb      	ldrb	r3, [r7, #7]
 80019fa:	f003 030f 	and.w	r3, r3, #15
 80019fe:	3b04      	subs	r3, #4
 8001a00:	0112      	lsls	r2, r2, #4
 8001a02:	b2d2      	uxtb	r2, r2
 8001a04:	440b      	add	r3, r1
 8001a06:	761a      	strb	r2, [r3, #24]
}
 8001a08:	bf00      	nop
 8001a0a:	370c      	adds	r7, #12
 8001a0c:	46bd      	mov	sp, r7
 8001a0e:	bc80      	pop	{r7}
 8001a10:	4770      	bx	lr
 8001a12:	bf00      	nop
 8001a14:	e000e100 	.word	0xe000e100
 8001a18:	e000ed00 	.word	0xe000ed00

08001a1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001a1c:	b480      	push	{r7}
 8001a1e:	b089      	sub	sp, #36	@ 0x24
 8001a20:	af00      	add	r7, sp, #0
 8001a22:	60f8      	str	r0, [r7, #12]
 8001a24:	60b9      	str	r1, [r7, #8]
 8001a26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	f003 0307 	and.w	r3, r3, #7
 8001a2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001a30:	69fb      	ldr	r3, [r7, #28]
 8001a32:	f1c3 0307 	rsb	r3, r3, #7
 8001a36:	2b04      	cmp	r3, #4
 8001a38:	bf28      	it	cs
 8001a3a:	2304      	movcs	r3, #4
 8001a3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001a3e:	69fb      	ldr	r3, [r7, #28]
 8001a40:	3304      	adds	r3, #4
 8001a42:	2b06      	cmp	r3, #6
 8001a44:	d902      	bls.n	8001a4c <NVIC_EncodePriority+0x30>
 8001a46:	69fb      	ldr	r3, [r7, #28]
 8001a48:	3b03      	subs	r3, #3
 8001a4a:	e000      	b.n	8001a4e <NVIC_EncodePriority+0x32>
 8001a4c:	2300      	movs	r3, #0
 8001a4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001a54:	69bb      	ldr	r3, [r7, #24]
 8001a56:	fa02 f303 	lsl.w	r3, r2, r3
 8001a5a:	43da      	mvns	r2, r3
 8001a5c:	68bb      	ldr	r3, [r7, #8]
 8001a5e:	401a      	ands	r2, r3
 8001a60:	697b      	ldr	r3, [r7, #20]
 8001a62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001a64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001a68:	697b      	ldr	r3, [r7, #20]
 8001a6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001a6e:	43d9      	mvns	r1, r3
 8001a70:	687b      	ldr	r3, [r7, #4]
 8001a72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001a74:	4313      	orrs	r3, r2
         );
}
 8001a76:	4618      	mov	r0, r3
 8001a78:	3724      	adds	r7, #36	@ 0x24
 8001a7a:	46bd      	mov	sp, r7
 8001a7c:	bc80      	pop	{r7}
 8001a7e:	4770      	bx	lr

08001a80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001a80:	b580      	push	{r7, lr}
 8001a82:	b082      	sub	sp, #8
 8001a84:	af00      	add	r7, sp, #0
 8001a86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	3b01      	subs	r3, #1
 8001a8c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001a90:	d301      	bcc.n	8001a96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001a92:	2301      	movs	r3, #1
 8001a94:	e00f      	b.n	8001ab6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001a96:	4a0a      	ldr	r2, [pc, #40]	@ (8001ac0 <SysTick_Config+0x40>)
 8001a98:	687b      	ldr	r3, [r7, #4]
 8001a9a:	3b01      	subs	r3, #1
 8001a9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001a9e:	210f      	movs	r1, #15
 8001aa0:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001aa4:	f7ff ff90 	bl	80019c8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001aa8:	4b05      	ldr	r3, [pc, #20]	@ (8001ac0 <SysTick_Config+0x40>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001aae:	4b04      	ldr	r3, [pc, #16]	@ (8001ac0 <SysTick_Config+0x40>)
 8001ab0:	2207      	movs	r2, #7
 8001ab2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001ab4:	2300      	movs	r3, #0
}
 8001ab6:	4618      	mov	r0, r3
 8001ab8:	3708      	adds	r7, #8
 8001aba:	46bd      	mov	sp, r7
 8001abc:	bd80      	pop	{r7, pc}
 8001abe:	bf00      	nop
 8001ac0:	e000e010 	.word	0xe000e010

08001ac4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b082      	sub	sp, #8
 8001ac8:	af00      	add	r7, sp, #0
 8001aca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001acc:	6878      	ldr	r0, [r7, #4]
 8001ace:	f7ff ff2d 	bl	800192c <__NVIC_SetPriorityGrouping>
}
 8001ad2:	bf00      	nop
 8001ad4:	3708      	adds	r7, #8
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bd80      	pop	{r7, pc}

08001ada <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ada:	b580      	push	{r7, lr}
 8001adc:	b086      	sub	sp, #24
 8001ade:	af00      	add	r7, sp, #0
 8001ae0:	4603      	mov	r3, r0
 8001ae2:	60b9      	str	r1, [r7, #8]
 8001ae4:	607a      	str	r2, [r7, #4]
 8001ae6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001ae8:	2300      	movs	r3, #0
 8001aea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001aec:	f7ff ff42 	bl	8001974 <__NVIC_GetPriorityGrouping>
 8001af0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001af2:	687a      	ldr	r2, [r7, #4]
 8001af4:	68b9      	ldr	r1, [r7, #8]
 8001af6:	6978      	ldr	r0, [r7, #20]
 8001af8:	f7ff ff90 	bl	8001a1c <NVIC_EncodePriority>
 8001afc:	4602      	mov	r2, r0
 8001afe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001b02:	4611      	mov	r1, r2
 8001b04:	4618      	mov	r0, r3
 8001b06:	f7ff ff5f 	bl	80019c8 <__NVIC_SetPriority>
}
 8001b0a:	bf00      	nop
 8001b0c:	3718      	adds	r7, #24
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bd80      	pop	{r7, pc}

08001b12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001b12:	b580      	push	{r7, lr}
 8001b14:	b082      	sub	sp, #8
 8001b16:	af00      	add	r7, sp, #0
 8001b18:	4603      	mov	r3, r0
 8001b1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001b1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001b20:	4618      	mov	r0, r3
 8001b22:	f7ff ff35 	bl	8001990 <__NVIC_EnableIRQ>
}
 8001b26:	bf00      	nop
 8001b28:	3708      	adds	r7, #8
 8001b2a:	46bd      	mov	sp, r7
 8001b2c:	bd80      	pop	{r7, pc}

08001b2e <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001b2e:	b580      	push	{r7, lr}
 8001b30:	b082      	sub	sp, #8
 8001b32:	af00      	add	r7, sp, #0
 8001b34:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001b36:	6878      	ldr	r0, [r7, #4]
 8001b38:	f7ff ffa2 	bl	8001a80 <SysTick_Config>
 8001b3c:	4603      	mov	r3, r0
}
 8001b3e:	4618      	mov	r0, r3
 8001b40:	3708      	adds	r7, #8
 8001b42:	46bd      	mov	sp, r7
 8001b44:	bd80      	pop	{r7, pc}
	...

08001b48 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001b48:	b480      	push	{r7}
 8001b4a:	b08b      	sub	sp, #44	@ 0x2c
 8001b4c:	af00      	add	r7, sp, #0
 8001b4e:	6078      	str	r0, [r7, #4]
 8001b50:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 8001b52:	2300      	movs	r3, #0
 8001b54:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 8001b56:	2300      	movs	r3, #0
 8001b58:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001b5a:	e169      	b.n	8001e30 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 8001b5c:	2201      	movs	r2, #1
 8001b5e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001b60:	fa02 f303 	lsl.w	r3, r2, r3
 8001b64:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001b66:	683b      	ldr	r3, [r7, #0]
 8001b68:	681b      	ldr	r3, [r3, #0]
 8001b6a:	69fa      	ldr	r2, [r7, #28]
 8001b6c:	4013      	ands	r3, r2
 8001b6e:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001b70:	69ba      	ldr	r2, [r7, #24]
 8001b72:	69fb      	ldr	r3, [r7, #28]
 8001b74:	429a      	cmp	r2, r3
 8001b76:	f040 8158 	bne.w	8001e2a <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 8001b7a:	683b      	ldr	r3, [r7, #0]
 8001b7c:	685b      	ldr	r3, [r3, #4]
 8001b7e:	4a9a      	ldr	r2, [pc, #616]	@ (8001de8 <HAL_GPIO_Init+0x2a0>)
 8001b80:	4293      	cmp	r3, r2
 8001b82:	d05e      	beq.n	8001c42 <HAL_GPIO_Init+0xfa>
 8001b84:	4a98      	ldr	r2, [pc, #608]	@ (8001de8 <HAL_GPIO_Init+0x2a0>)
 8001b86:	4293      	cmp	r3, r2
 8001b88:	d875      	bhi.n	8001c76 <HAL_GPIO_Init+0x12e>
 8001b8a:	4a98      	ldr	r2, [pc, #608]	@ (8001dec <HAL_GPIO_Init+0x2a4>)
 8001b8c:	4293      	cmp	r3, r2
 8001b8e:	d058      	beq.n	8001c42 <HAL_GPIO_Init+0xfa>
 8001b90:	4a96      	ldr	r2, [pc, #600]	@ (8001dec <HAL_GPIO_Init+0x2a4>)
 8001b92:	4293      	cmp	r3, r2
 8001b94:	d86f      	bhi.n	8001c76 <HAL_GPIO_Init+0x12e>
 8001b96:	4a96      	ldr	r2, [pc, #600]	@ (8001df0 <HAL_GPIO_Init+0x2a8>)
 8001b98:	4293      	cmp	r3, r2
 8001b9a:	d052      	beq.n	8001c42 <HAL_GPIO_Init+0xfa>
 8001b9c:	4a94      	ldr	r2, [pc, #592]	@ (8001df0 <HAL_GPIO_Init+0x2a8>)
 8001b9e:	4293      	cmp	r3, r2
 8001ba0:	d869      	bhi.n	8001c76 <HAL_GPIO_Init+0x12e>
 8001ba2:	4a94      	ldr	r2, [pc, #592]	@ (8001df4 <HAL_GPIO_Init+0x2ac>)
 8001ba4:	4293      	cmp	r3, r2
 8001ba6:	d04c      	beq.n	8001c42 <HAL_GPIO_Init+0xfa>
 8001ba8:	4a92      	ldr	r2, [pc, #584]	@ (8001df4 <HAL_GPIO_Init+0x2ac>)
 8001baa:	4293      	cmp	r3, r2
 8001bac:	d863      	bhi.n	8001c76 <HAL_GPIO_Init+0x12e>
 8001bae:	4a92      	ldr	r2, [pc, #584]	@ (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001bb0:	4293      	cmp	r3, r2
 8001bb2:	d046      	beq.n	8001c42 <HAL_GPIO_Init+0xfa>
 8001bb4:	4a90      	ldr	r2, [pc, #576]	@ (8001df8 <HAL_GPIO_Init+0x2b0>)
 8001bb6:	4293      	cmp	r3, r2
 8001bb8:	d85d      	bhi.n	8001c76 <HAL_GPIO_Init+0x12e>
 8001bba:	2b12      	cmp	r3, #18
 8001bbc:	d82a      	bhi.n	8001c14 <HAL_GPIO_Init+0xcc>
 8001bbe:	2b12      	cmp	r3, #18
 8001bc0:	d859      	bhi.n	8001c76 <HAL_GPIO_Init+0x12e>
 8001bc2:	a201      	add	r2, pc, #4	@ (adr r2, 8001bc8 <HAL_GPIO_Init+0x80>)
 8001bc4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001bc8:	08001c43 	.word	0x08001c43
 8001bcc:	08001c1d 	.word	0x08001c1d
 8001bd0:	08001c2f 	.word	0x08001c2f
 8001bd4:	08001c71 	.word	0x08001c71
 8001bd8:	08001c77 	.word	0x08001c77
 8001bdc:	08001c77 	.word	0x08001c77
 8001be0:	08001c77 	.word	0x08001c77
 8001be4:	08001c77 	.word	0x08001c77
 8001be8:	08001c77 	.word	0x08001c77
 8001bec:	08001c77 	.word	0x08001c77
 8001bf0:	08001c77 	.word	0x08001c77
 8001bf4:	08001c77 	.word	0x08001c77
 8001bf8:	08001c77 	.word	0x08001c77
 8001bfc:	08001c77 	.word	0x08001c77
 8001c00:	08001c77 	.word	0x08001c77
 8001c04:	08001c77 	.word	0x08001c77
 8001c08:	08001c77 	.word	0x08001c77
 8001c0c:	08001c25 	.word	0x08001c25
 8001c10:	08001c39 	.word	0x08001c39
 8001c14:	4a79      	ldr	r2, [pc, #484]	@ (8001dfc <HAL_GPIO_Init+0x2b4>)
 8001c16:	4293      	cmp	r3, r2
 8001c18:	d013      	beq.n	8001c42 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8001c1a:	e02c      	b.n	8001c76 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8001c1c:	683b      	ldr	r3, [r7, #0]
 8001c1e:	68db      	ldr	r3, [r3, #12]
 8001c20:	623b      	str	r3, [r7, #32]
          break;
 8001c22:	e029      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 8001c24:	683b      	ldr	r3, [r7, #0]
 8001c26:	68db      	ldr	r3, [r3, #12]
 8001c28:	3304      	adds	r3, #4
 8001c2a:	623b      	str	r3, [r7, #32]
          break;
 8001c2c:	e024      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8001c2e:	683b      	ldr	r3, [r7, #0]
 8001c30:	68db      	ldr	r3, [r3, #12]
 8001c32:	3308      	adds	r3, #8
 8001c34:	623b      	str	r3, [r7, #32]
          break;
 8001c36:	e01f      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8001c38:	683b      	ldr	r3, [r7, #0]
 8001c3a:	68db      	ldr	r3, [r3, #12]
 8001c3c:	330c      	adds	r3, #12
 8001c3e:	623b      	str	r3, [r7, #32]
          break;
 8001c40:	e01a      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 8001c42:	683b      	ldr	r3, [r7, #0]
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d102      	bne.n	8001c50 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 8001c4a:	2304      	movs	r3, #4
 8001c4c:	623b      	str	r3, [r7, #32]
          break;
 8001c4e:	e013      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 8001c50:	683b      	ldr	r3, [r7, #0]
 8001c52:	689b      	ldr	r3, [r3, #8]
 8001c54:	2b01      	cmp	r3, #1
 8001c56:	d105      	bne.n	8001c64 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c58:	2308      	movs	r3, #8
 8001c5a:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 8001c5c:	687b      	ldr	r3, [r7, #4]
 8001c5e:	69fa      	ldr	r2, [r7, #28]
 8001c60:	611a      	str	r2, [r3, #16]
          break;
 8001c62:	e009      	b.n	8001c78 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 8001c64:	2308      	movs	r3, #8
 8001c66:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 8001c68:	687b      	ldr	r3, [r7, #4]
 8001c6a:	69fa      	ldr	r2, [r7, #28]
 8001c6c:	615a      	str	r2, [r3, #20]
          break;
 8001c6e:	e003      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001c70:	2300      	movs	r3, #0
 8001c72:	623b      	str	r3, [r7, #32]
          break;
 8001c74:	e000      	b.n	8001c78 <HAL_GPIO_Init+0x130>
          break;
 8001c76:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001c78:	69bb      	ldr	r3, [r7, #24]
 8001c7a:	2bff      	cmp	r3, #255	@ 0xff
 8001c7c:	d801      	bhi.n	8001c82 <HAL_GPIO_Init+0x13a>
 8001c7e:	687b      	ldr	r3, [r7, #4]
 8001c80:	e001      	b.n	8001c86 <HAL_GPIO_Init+0x13e>
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	3304      	adds	r3, #4
 8001c86:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001c88:	69bb      	ldr	r3, [r7, #24]
 8001c8a:	2bff      	cmp	r3, #255	@ 0xff
 8001c8c:	d802      	bhi.n	8001c94 <HAL_GPIO_Init+0x14c>
 8001c8e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c90:	009b      	lsls	r3, r3, #2
 8001c92:	e002      	b.n	8001c9a <HAL_GPIO_Init+0x152>
 8001c94:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001c96:	3b08      	subs	r3, #8
 8001c98:	009b      	lsls	r3, r3, #2
 8001c9a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 8001c9c:	697b      	ldr	r3, [r7, #20]
 8001c9e:	681a      	ldr	r2, [r3, #0]
 8001ca0:	210f      	movs	r1, #15
 8001ca2:	693b      	ldr	r3, [r7, #16]
 8001ca4:	fa01 f303 	lsl.w	r3, r1, r3
 8001ca8:	43db      	mvns	r3, r3
 8001caa:	401a      	ands	r2, r3
 8001cac:	6a39      	ldr	r1, [r7, #32]
 8001cae:	693b      	ldr	r3, [r7, #16]
 8001cb0:	fa01 f303 	lsl.w	r3, r1, r3
 8001cb4:	431a      	orrs	r2, r3
 8001cb6:	697b      	ldr	r3, [r7, #20]
 8001cb8:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8001cba:	683b      	ldr	r3, [r7, #0]
 8001cbc:	685b      	ldr	r3, [r3, #4]
 8001cbe:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001cc2:	2b00      	cmp	r3, #0
 8001cc4:	f000 80b1 	beq.w	8001e2a <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001cc8:	4b4d      	ldr	r3, [pc, #308]	@ (8001e00 <HAL_GPIO_Init+0x2b8>)
 8001cca:	699b      	ldr	r3, [r3, #24]
 8001ccc:	4a4c      	ldr	r2, [pc, #304]	@ (8001e00 <HAL_GPIO_Init+0x2b8>)
 8001cce:	f043 0301 	orr.w	r3, r3, #1
 8001cd2:	6193      	str	r3, [r2, #24]
 8001cd4:	4b4a      	ldr	r3, [pc, #296]	@ (8001e00 <HAL_GPIO_Init+0x2b8>)
 8001cd6:	699b      	ldr	r3, [r3, #24]
 8001cd8:	f003 0301 	and.w	r3, r3, #1
 8001cdc:	60bb      	str	r3, [r7, #8]
 8001cde:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001ce0:	4a48      	ldr	r2, [pc, #288]	@ (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001ce2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001ce4:	089b      	lsrs	r3, r3, #2
 8001ce6:	3302      	adds	r3, #2
 8001ce8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001cec:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8001cee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001cf0:	f003 0303 	and.w	r3, r3, #3
 8001cf4:	009b      	lsls	r3, r3, #2
 8001cf6:	220f      	movs	r2, #15
 8001cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8001cfc:	43db      	mvns	r3, r3
 8001cfe:	68fa      	ldr	r2, [r7, #12]
 8001d00:	4013      	ands	r3, r2
 8001d02:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001d04:	687b      	ldr	r3, [r7, #4]
 8001d06:	4a40      	ldr	r2, [pc, #256]	@ (8001e08 <HAL_GPIO_Init+0x2c0>)
 8001d08:	4293      	cmp	r3, r2
 8001d0a:	d013      	beq.n	8001d34 <HAL_GPIO_Init+0x1ec>
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	4a3f      	ldr	r2, [pc, #252]	@ (8001e0c <HAL_GPIO_Init+0x2c4>)
 8001d10:	4293      	cmp	r3, r2
 8001d12:	d00d      	beq.n	8001d30 <HAL_GPIO_Init+0x1e8>
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	4a3e      	ldr	r2, [pc, #248]	@ (8001e10 <HAL_GPIO_Init+0x2c8>)
 8001d18:	4293      	cmp	r3, r2
 8001d1a:	d007      	beq.n	8001d2c <HAL_GPIO_Init+0x1e4>
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	4a3d      	ldr	r2, [pc, #244]	@ (8001e14 <HAL_GPIO_Init+0x2cc>)
 8001d20:	4293      	cmp	r3, r2
 8001d22:	d101      	bne.n	8001d28 <HAL_GPIO_Init+0x1e0>
 8001d24:	2303      	movs	r3, #3
 8001d26:	e006      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d28:	2304      	movs	r3, #4
 8001d2a:	e004      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d2c:	2302      	movs	r3, #2
 8001d2e:	e002      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d30:	2301      	movs	r3, #1
 8001d32:	e000      	b.n	8001d36 <HAL_GPIO_Init+0x1ee>
 8001d34:	2300      	movs	r3, #0
 8001d36:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8001d38:	f002 0203 	and.w	r2, r2, #3
 8001d3c:	0092      	lsls	r2, r2, #2
 8001d3e:	4093      	lsls	r3, r2
 8001d40:	68fa      	ldr	r2, [r7, #12]
 8001d42:	4313      	orrs	r3, r2
 8001d44:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 8001d46:	492f      	ldr	r1, [pc, #188]	@ (8001e04 <HAL_GPIO_Init+0x2bc>)
 8001d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001d4a:	089b      	lsrs	r3, r3, #2
 8001d4c:	3302      	adds	r3, #2
 8001d4e:	68fa      	ldr	r2, [r7, #12]
 8001d50:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8001d54:	683b      	ldr	r3, [r7, #0]
 8001d56:	685b      	ldr	r3, [r3, #4]
 8001d58:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001d5c:	2b00      	cmp	r3, #0
 8001d5e:	d006      	beq.n	8001d6e <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 8001d60:	4b2d      	ldr	r3, [pc, #180]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d62:	689a      	ldr	r2, [r3, #8]
 8001d64:	492c      	ldr	r1, [pc, #176]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	4313      	orrs	r3, r2
 8001d6a:	608b      	str	r3, [r1, #8]
 8001d6c:	e006      	b.n	8001d7c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 8001d6e:	4b2a      	ldr	r3, [pc, #168]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d70:	689a      	ldr	r2, [r3, #8]
 8001d72:	69bb      	ldr	r3, [r7, #24]
 8001d74:	43db      	mvns	r3, r3
 8001d76:	4928      	ldr	r1, [pc, #160]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d78:	4013      	ands	r3, r2
 8001d7a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8001d7c:	683b      	ldr	r3, [r7, #0]
 8001d7e:	685b      	ldr	r3, [r3, #4]
 8001d80:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d006      	beq.n	8001d96 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001d88:	4b23      	ldr	r3, [pc, #140]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d8a:	68da      	ldr	r2, [r3, #12]
 8001d8c:	4922      	ldr	r1, [pc, #136]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d8e:	69bb      	ldr	r3, [r7, #24]
 8001d90:	4313      	orrs	r3, r2
 8001d92:	60cb      	str	r3, [r1, #12]
 8001d94:	e006      	b.n	8001da4 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001d96:	4b20      	ldr	r3, [pc, #128]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	69bb      	ldr	r3, [r7, #24]
 8001d9c:	43db      	mvns	r3, r3
 8001d9e:	491e      	ldr	r1, [pc, #120]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001da0:	4013      	ands	r3, r2
 8001da2:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001da4:	683b      	ldr	r3, [r7, #0]
 8001da6:	685b      	ldr	r3, [r3, #4]
 8001da8:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001dac:	2b00      	cmp	r3, #0
 8001dae:	d006      	beq.n	8001dbe <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001db0:	4b19      	ldr	r3, [pc, #100]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001db2:	685a      	ldr	r2, [r3, #4]
 8001db4:	4918      	ldr	r1, [pc, #96]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001db6:	69bb      	ldr	r3, [r7, #24]
 8001db8:	4313      	orrs	r3, r2
 8001dba:	604b      	str	r3, [r1, #4]
 8001dbc:	e006      	b.n	8001dcc <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8001dbe:	4b16      	ldr	r3, [pc, #88]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001dc0:	685a      	ldr	r2, [r3, #4]
 8001dc2:	69bb      	ldr	r3, [r7, #24]
 8001dc4:	43db      	mvns	r3, r3
 8001dc6:	4914      	ldr	r1, [pc, #80]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001dc8:	4013      	ands	r3, r2
 8001dca:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8001dcc:	683b      	ldr	r3, [r7, #0]
 8001dce:	685b      	ldr	r3, [r3, #4]
 8001dd0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d021      	beq.n	8001e1c <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001dd8:	4b0f      	ldr	r3, [pc, #60]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001dda:	681a      	ldr	r2, [r3, #0]
 8001ddc:	490e      	ldr	r1, [pc, #56]	@ (8001e18 <HAL_GPIO_Init+0x2d0>)
 8001dde:	69bb      	ldr	r3, [r7, #24]
 8001de0:	4313      	orrs	r3, r2
 8001de2:	600b      	str	r3, [r1, #0]
 8001de4:	e021      	b.n	8001e2a <HAL_GPIO_Init+0x2e2>
 8001de6:	bf00      	nop
 8001de8:	10320000 	.word	0x10320000
 8001dec:	10310000 	.word	0x10310000
 8001df0:	10220000 	.word	0x10220000
 8001df4:	10210000 	.word	0x10210000
 8001df8:	10120000 	.word	0x10120000
 8001dfc:	10110000 	.word	0x10110000
 8001e00:	40021000 	.word	0x40021000
 8001e04:	40010000 	.word	0x40010000
 8001e08:	40010800 	.word	0x40010800
 8001e0c:	40010c00 	.word	0x40010c00
 8001e10:	40011000 	.word	0x40011000
 8001e14:	40011400 	.word	0x40011400
 8001e18:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001e1e:	681a      	ldr	r2, [r3, #0]
 8001e20:	69bb      	ldr	r3, [r7, #24]
 8001e22:	43db      	mvns	r3, r3
 8001e24:	4909      	ldr	r1, [pc, #36]	@ (8001e4c <HAL_GPIO_Init+0x304>)
 8001e26:	4013      	ands	r3, r2
 8001e28:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8001e2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e2c:	3301      	adds	r3, #1
 8001e2e:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8001e30:	683b      	ldr	r3, [r7, #0]
 8001e32:	681a      	ldr	r2, [r3, #0]
 8001e34:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001e36:	fa22 f303 	lsr.w	r3, r2, r3
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	f47f ae8e 	bne.w	8001b5c <HAL_GPIO_Init+0x14>
  }
}
 8001e40:	bf00      	nop
 8001e42:	bf00      	nop
 8001e44:	372c      	adds	r7, #44	@ 0x2c
 8001e46:	46bd      	mov	sp, r7
 8001e48:	bc80      	pop	{r7}
 8001e4a:	4770      	bx	lr
 8001e4c:	40010400 	.word	0x40010400

08001e50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin: specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 8001e50:	b480      	push	{r7}
 8001e52:	b085      	sub	sp, #20
 8001e54:	af00      	add	r7, sp, #0
 8001e56:	6078      	str	r0, [r7, #4]
 8001e58:	460b      	mov	r3, r1
 8001e5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	689a      	ldr	r2, [r3, #8]
 8001e60:	887b      	ldrh	r3, [r7, #2]
 8001e62:	4013      	ands	r3, r2
 8001e64:	2b00      	cmp	r3, #0
 8001e66:	d002      	beq.n	8001e6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8001e68:	2301      	movs	r3, #1
 8001e6a:	73fb      	strb	r3, [r7, #15]
 8001e6c:	e001      	b.n	8001e72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8001e6e:	2300      	movs	r3, #0
 8001e70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8001e72:	7bfb      	ldrb	r3, [r7, #15]
}
 8001e74:	4618      	mov	r0, r3
 8001e76:	3714      	adds	r7, #20
 8001e78:	46bd      	mov	sp, r7
 8001e7a:	bc80      	pop	{r7}
 8001e7c:	4770      	bx	lr

08001e7e <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001e7e:	b480      	push	{r7}
 8001e80:	b083      	sub	sp, #12
 8001e82:	af00      	add	r7, sp, #0
 8001e84:	6078      	str	r0, [r7, #4]
 8001e86:	460b      	mov	r3, r1
 8001e88:	807b      	strh	r3, [r7, #2]
 8001e8a:	4613      	mov	r3, r2
 8001e8c:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8001e8e:	787b      	ldrb	r3, [r7, #1]
 8001e90:	2b00      	cmp	r3, #0
 8001e92:	d003      	beq.n	8001e9c <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8001e94:	887a      	ldrh	r2, [r7, #2]
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 8001e9a:	e003      	b.n	8001ea4 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 8001e9c:	887b      	ldrh	r3, [r7, #2]
 8001e9e:	041a      	lsls	r2, r3, #16
 8001ea0:	687b      	ldr	r3, [r7, #4]
 8001ea2:	611a      	str	r2, [r3, #16]
}
 8001ea4:	bf00      	nop
 8001ea6:	370c      	adds	r7, #12
 8001ea8:	46bd      	mov	sp, r7
 8001eaa:	bc80      	pop	{r7}
 8001eac:	4770      	bx	lr
	...

08001eb0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001eb0:	b580      	push	{r7, lr}
 8001eb2:	b086      	sub	sp, #24
 8001eb4:	af00      	add	r7, sp, #0
 8001eb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001eb8:	687b      	ldr	r3, [r7, #4]
 8001eba:	2b00      	cmp	r3, #0
 8001ebc:	d101      	bne.n	8001ec2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001ebe:	2301      	movs	r3, #1
 8001ec0:	e272      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	681b      	ldr	r3, [r3, #0]
 8001ec6:	f003 0301 	and.w	r3, r3, #1
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	f000 8087 	beq.w	8001fde <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001ed0:	4b92      	ldr	r3, [pc, #584]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ed2:	685b      	ldr	r3, [r3, #4]
 8001ed4:	f003 030c 	and.w	r3, r3, #12
 8001ed8:	2b04      	cmp	r3, #4
 8001eda:	d00c      	beq.n	8001ef6 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 8001edc:	4b8f      	ldr	r3, [pc, #572]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ede:	685b      	ldr	r3, [r3, #4]
 8001ee0:	f003 030c 	and.w	r3, r3, #12
 8001ee4:	2b08      	cmp	r3, #8
 8001ee6:	d112      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5e>
 8001ee8:	4b8c      	ldr	r3, [pc, #560]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001eea:	685b      	ldr	r3, [r3, #4]
 8001eec:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001ef0:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001ef4:	d10b      	bne.n	8001f0e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001ef6:	4b89      	ldr	r3, [pc, #548]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ef8:	681b      	ldr	r3, [r3, #0]
 8001efa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001efe:	2b00      	cmp	r3, #0
 8001f00:	d06c      	beq.n	8001fdc <HAL_RCC_OscConfig+0x12c>
 8001f02:	687b      	ldr	r3, [r7, #4]
 8001f04:	685b      	ldr	r3, [r3, #4]
 8001f06:	2b00      	cmp	r3, #0
 8001f08:	d168      	bne.n	8001fdc <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 8001f0a:	2301      	movs	r3, #1
 8001f0c:	e24c      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001f0e:	687b      	ldr	r3, [r7, #4]
 8001f10:	685b      	ldr	r3, [r3, #4]
 8001f12:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001f16:	d106      	bne.n	8001f26 <HAL_RCC_OscConfig+0x76>
 8001f18:	4b80      	ldr	r3, [pc, #512]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f1a:	681b      	ldr	r3, [r3, #0]
 8001f1c:	4a7f      	ldr	r2, [pc, #508]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f1e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f22:	6013      	str	r3, [r2, #0]
 8001f24:	e02e      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f26:	687b      	ldr	r3, [r7, #4]
 8001f28:	685b      	ldr	r3, [r3, #4]
 8001f2a:	2b00      	cmp	r3, #0
 8001f2c:	d10c      	bne.n	8001f48 <HAL_RCC_OscConfig+0x98>
 8001f2e:	4b7b      	ldr	r3, [pc, #492]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	4a7a      	ldr	r2, [pc, #488]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f34:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f38:	6013      	str	r3, [r2, #0]
 8001f3a:	4b78      	ldr	r3, [pc, #480]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f3c:	681b      	ldr	r3, [r3, #0]
 8001f3e:	4a77      	ldr	r2, [pc, #476]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f40:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f44:	6013      	str	r3, [r2, #0]
 8001f46:	e01d      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f48:	687b      	ldr	r3, [r7, #4]
 8001f4a:	685b      	ldr	r3, [r3, #4]
 8001f4c:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8001f50:	d10c      	bne.n	8001f6c <HAL_RCC_OscConfig+0xbc>
 8001f52:	4b72      	ldr	r3, [pc, #456]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	4a71      	ldr	r2, [pc, #452]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f58:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8001f5c:	6013      	str	r3, [r2, #0]
 8001f5e:	4b6f      	ldr	r3, [pc, #444]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f60:	681b      	ldr	r3, [r3, #0]
 8001f62:	4a6e      	ldr	r2, [pc, #440]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f64:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001f68:	6013      	str	r3, [r2, #0]
 8001f6a:	e00b      	b.n	8001f84 <HAL_RCC_OscConfig+0xd4>
 8001f6c:	4b6b      	ldr	r3, [pc, #428]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f6e:	681b      	ldr	r3, [r3, #0]
 8001f70:	4a6a      	ldr	r2, [pc, #424]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f72:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001f76:	6013      	str	r3, [r2, #0]
 8001f78:	4b68      	ldr	r3, [pc, #416]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f7a:	681b      	ldr	r3, [r3, #0]
 8001f7c:	4a67      	ldr	r2, [pc, #412]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001f7e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001f82:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8001f84:	687b      	ldr	r3, [r7, #4]
 8001f86:	685b      	ldr	r3, [r3, #4]
 8001f88:	2b00      	cmp	r3, #0
 8001f8a:	d013      	beq.n	8001fb4 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001f8c:	f7ff fcc4 	bl	8001918 <HAL_GetTick>
 8001f90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001f92:	e008      	b.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001f94:	f7ff fcc0 	bl	8001918 <HAL_GetTick>
 8001f98:	4602      	mov	r2, r0
 8001f9a:	693b      	ldr	r3, [r7, #16]
 8001f9c:	1ad3      	subs	r3, r2, r3
 8001f9e:	2b64      	cmp	r3, #100	@ 0x64
 8001fa0:	d901      	bls.n	8001fa6 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001fa2:	2303      	movs	r3, #3
 8001fa4:	e200      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001fa6:	4b5d      	ldr	r3, [pc, #372]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fa8:	681b      	ldr	r3, [r3, #0]
 8001faa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fae:	2b00      	cmp	r3, #0
 8001fb0:	d0f0      	beq.n	8001f94 <HAL_RCC_OscConfig+0xe4>
 8001fb2:	e014      	b.n	8001fde <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001fb4:	f7ff fcb0 	bl	8001918 <HAL_GetTick>
 8001fb8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fba:	e008      	b.n	8001fce <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001fbc:	f7ff fcac 	bl	8001918 <HAL_GetTick>
 8001fc0:	4602      	mov	r2, r0
 8001fc2:	693b      	ldr	r3, [r7, #16]
 8001fc4:	1ad3      	subs	r3, r2, r3
 8001fc6:	2b64      	cmp	r3, #100	@ 0x64
 8001fc8:	d901      	bls.n	8001fce <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 8001fca:	2303      	movs	r3, #3
 8001fcc:	e1ec      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001fce:	4b53      	ldr	r3, [pc, #332]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001fd6:	2b00      	cmp	r3, #0
 8001fd8:	d1f0      	bne.n	8001fbc <HAL_RCC_OscConfig+0x10c>
 8001fda:	e000      	b.n	8001fde <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001fdc:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001fde:	687b      	ldr	r3, [r7, #4]
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	f003 0302 	and.w	r3, r3, #2
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d063      	beq.n	80020b2 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8001fea:	4b4c      	ldr	r3, [pc, #304]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001fec:	685b      	ldr	r3, [r3, #4]
 8001fee:	f003 030c 	and.w	r3, r3, #12
 8001ff2:	2b00      	cmp	r3, #0
 8001ff4:	d00b      	beq.n	800200e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001ff6:	4b49      	ldr	r3, [pc, #292]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8001ff8:	685b      	ldr	r3, [r3, #4]
 8001ffa:	f003 030c 	and.w	r3, r3, #12
 8001ffe:	2b08      	cmp	r3, #8
 8002000:	d11c      	bne.n	800203c <HAL_RCC_OscConfig+0x18c>
 8002002:	4b46      	ldr	r3, [pc, #280]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002004:	685b      	ldr	r3, [r3, #4]
 8002006:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800200a:	2b00      	cmp	r3, #0
 800200c:	d116      	bne.n	800203c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800200e:	4b43      	ldr	r3, [pc, #268]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002010:	681b      	ldr	r3, [r3, #0]
 8002012:	f003 0302 	and.w	r3, r3, #2
 8002016:	2b00      	cmp	r3, #0
 8002018:	d005      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
 800201a:	687b      	ldr	r3, [r7, #4]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b01      	cmp	r3, #1
 8002020:	d001      	beq.n	8002026 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8002022:	2301      	movs	r3, #1
 8002024:	e1c0      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002026:	4b3d      	ldr	r3, [pc, #244]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002028:	681b      	ldr	r3, [r3, #0]
 800202a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800202e:	687b      	ldr	r3, [r7, #4]
 8002030:	695b      	ldr	r3, [r3, #20]
 8002032:	00db      	lsls	r3, r3, #3
 8002034:	4939      	ldr	r1, [pc, #228]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002036:	4313      	orrs	r3, r2
 8002038:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800203a:	e03a      	b.n	80020b2 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	691b      	ldr	r3, [r3, #16]
 8002040:	2b00      	cmp	r3, #0
 8002042:	d020      	beq.n	8002086 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8002044:	4b36      	ldr	r3, [pc, #216]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002046:	2201      	movs	r2, #1
 8002048:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800204a:	f7ff fc65 	bl	8001918 <HAL_GetTick>
 800204e:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002050:	e008      	b.n	8002064 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002052:	f7ff fc61 	bl	8001918 <HAL_GetTick>
 8002056:	4602      	mov	r2, r0
 8002058:	693b      	ldr	r3, [r7, #16]
 800205a:	1ad3      	subs	r3, r2, r3
 800205c:	2b02      	cmp	r3, #2
 800205e:	d901      	bls.n	8002064 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 8002060:	2303      	movs	r3, #3
 8002062:	e1a1      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002064:	4b2d      	ldr	r3, [pc, #180]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002066:	681b      	ldr	r3, [r3, #0]
 8002068:	f003 0302 	and.w	r3, r3, #2
 800206c:	2b00      	cmp	r3, #0
 800206e:	d0f0      	beq.n	8002052 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002070:	4b2a      	ldr	r3, [pc, #168]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002072:	681b      	ldr	r3, [r3, #0]
 8002074:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	695b      	ldr	r3, [r3, #20]
 800207c:	00db      	lsls	r3, r3, #3
 800207e:	4927      	ldr	r1, [pc, #156]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 8002080:	4313      	orrs	r3, r2
 8002082:	600b      	str	r3, [r1, #0]
 8002084:	e015      	b.n	80020b2 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8002086:	4b26      	ldr	r3, [pc, #152]	@ (8002120 <HAL_RCC_OscConfig+0x270>)
 8002088:	2200      	movs	r2, #0
 800208a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800208c:	f7ff fc44 	bl	8001918 <HAL_GetTick>
 8002090:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8002092:	e008      	b.n	80020a6 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8002094:	f7ff fc40 	bl	8001918 <HAL_GetTick>
 8002098:	4602      	mov	r2, r0
 800209a:	693b      	ldr	r3, [r7, #16]
 800209c:	1ad3      	subs	r3, r2, r3
 800209e:	2b02      	cmp	r3, #2
 80020a0:	d901      	bls.n	80020a6 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 80020a2:	2303      	movs	r3, #3
 80020a4:	e180      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80020a6:	4b1d      	ldr	r3, [pc, #116]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 80020a8:	681b      	ldr	r3, [r3, #0]
 80020aa:	f003 0302 	and.w	r3, r3, #2
 80020ae:	2b00      	cmp	r3, #0
 80020b0:	d1f0      	bne.n	8002094 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80020b2:	687b      	ldr	r3, [r7, #4]
 80020b4:	681b      	ldr	r3, [r3, #0]
 80020b6:	f003 0308 	and.w	r3, r3, #8
 80020ba:	2b00      	cmp	r3, #0
 80020bc:	d03a      	beq.n	8002134 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	699b      	ldr	r3, [r3, #24]
 80020c2:	2b00      	cmp	r3, #0
 80020c4:	d019      	beq.n	80020fa <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80020c6:	4b17      	ldr	r3, [pc, #92]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80020cc:	f7ff fc24 	bl	8001918 <HAL_GetTick>
 80020d0:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020d2:	e008      	b.n	80020e6 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80020d4:	f7ff fc20 	bl	8001918 <HAL_GetTick>
 80020d8:	4602      	mov	r2, r0
 80020da:	693b      	ldr	r3, [r7, #16]
 80020dc:	1ad3      	subs	r3, r2, r3
 80020de:	2b02      	cmp	r3, #2
 80020e0:	d901      	bls.n	80020e6 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 80020e2:	2303      	movs	r3, #3
 80020e4:	e160      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80020e6:	4b0d      	ldr	r3, [pc, #52]	@ (800211c <HAL_RCC_OscConfig+0x26c>)
 80020e8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80020ea:	f003 0302 	and.w	r3, r3, #2
 80020ee:	2b00      	cmp	r3, #0
 80020f0:	d0f0      	beq.n	80020d4 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 80020f2:	2001      	movs	r0, #1
 80020f4:	f000 fa9c 	bl	8002630 <RCC_Delay>
 80020f8:	e01c      	b.n	8002134 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80020fa:	4b0a      	ldr	r3, [pc, #40]	@ (8002124 <HAL_RCC_OscConfig+0x274>)
 80020fc:	2200      	movs	r2, #0
 80020fe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002100:	f7ff fc0a 	bl	8001918 <HAL_GetTick>
 8002104:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002106:	e00f      	b.n	8002128 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8002108:	f7ff fc06 	bl	8001918 <HAL_GetTick>
 800210c:	4602      	mov	r2, r0
 800210e:	693b      	ldr	r3, [r7, #16]
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	2b02      	cmp	r3, #2
 8002114:	d908      	bls.n	8002128 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8002116:	2303      	movs	r3, #3
 8002118:	e146      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
 800211a:	bf00      	nop
 800211c:	40021000 	.word	0x40021000
 8002120:	42420000 	.word	0x42420000
 8002124:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002128:	4b92      	ldr	r3, [pc, #584]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800212a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800212c:	f003 0302 	and.w	r3, r3, #2
 8002130:	2b00      	cmp	r3, #0
 8002132:	d1e9      	bne.n	8002108 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002134:	687b      	ldr	r3, [r7, #4]
 8002136:	681b      	ldr	r3, [r3, #0]
 8002138:	f003 0304 	and.w	r3, r3, #4
 800213c:	2b00      	cmp	r3, #0
 800213e:	f000 80a6 	beq.w	800228e <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002142:	2300      	movs	r3, #0
 8002144:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002146:	4b8b      	ldr	r3, [pc, #556]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002148:	69db      	ldr	r3, [r3, #28]
 800214a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800214e:	2b00      	cmp	r3, #0
 8002150:	d10d      	bne.n	800216e <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002152:	4b88      	ldr	r3, [pc, #544]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002154:	69db      	ldr	r3, [r3, #28]
 8002156:	4a87      	ldr	r2, [pc, #540]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002158:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800215c:	61d3      	str	r3, [r2, #28]
 800215e:	4b85      	ldr	r3, [pc, #532]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002160:	69db      	ldr	r3, [r3, #28]
 8002162:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8002166:	60bb      	str	r3, [r7, #8]
 8002168:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800216a:	2301      	movs	r3, #1
 800216c:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800216e:	4b82      	ldr	r3, [pc, #520]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 8002170:	681b      	ldr	r3, [r3, #0]
 8002172:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8002176:	2b00      	cmp	r3, #0
 8002178:	d118      	bne.n	80021ac <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800217a:	4b7f      	ldr	r3, [pc, #508]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 800217c:	681b      	ldr	r3, [r3, #0]
 800217e:	4a7e      	ldr	r2, [pc, #504]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 8002180:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002184:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8002186:	f7ff fbc7 	bl	8001918 <HAL_GetTick>
 800218a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800218c:	e008      	b.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800218e:	f7ff fbc3 	bl	8001918 <HAL_GetTick>
 8002192:	4602      	mov	r2, r0
 8002194:	693b      	ldr	r3, [r7, #16]
 8002196:	1ad3      	subs	r3, r2, r3
 8002198:	2b64      	cmp	r3, #100	@ 0x64
 800219a:	d901      	bls.n	80021a0 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 800219c:	2303      	movs	r3, #3
 800219e:	e103      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80021a0:	4b75      	ldr	r3, [pc, #468]	@ (8002378 <HAL_RCC_OscConfig+0x4c8>)
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d0f0      	beq.n	800218e <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	68db      	ldr	r3, [r3, #12]
 80021b0:	2b01      	cmp	r3, #1
 80021b2:	d106      	bne.n	80021c2 <HAL_RCC_OscConfig+0x312>
 80021b4:	4b6f      	ldr	r3, [pc, #444]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021b6:	6a1b      	ldr	r3, [r3, #32]
 80021b8:	4a6e      	ldr	r2, [pc, #440]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021ba:	f043 0301 	orr.w	r3, r3, #1
 80021be:	6213      	str	r3, [r2, #32]
 80021c0:	e02d      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	68db      	ldr	r3, [r3, #12]
 80021c6:	2b00      	cmp	r3, #0
 80021c8:	d10c      	bne.n	80021e4 <HAL_RCC_OscConfig+0x334>
 80021ca:	4b6a      	ldr	r3, [pc, #424]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021cc:	6a1b      	ldr	r3, [r3, #32]
 80021ce:	4a69      	ldr	r2, [pc, #420]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021d0:	f023 0301 	bic.w	r3, r3, #1
 80021d4:	6213      	str	r3, [r2, #32]
 80021d6:	4b67      	ldr	r3, [pc, #412]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021d8:	6a1b      	ldr	r3, [r3, #32]
 80021da:	4a66      	ldr	r2, [pc, #408]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021dc:	f023 0304 	bic.w	r3, r3, #4
 80021e0:	6213      	str	r3, [r2, #32]
 80021e2:	e01c      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	68db      	ldr	r3, [r3, #12]
 80021e8:	2b05      	cmp	r3, #5
 80021ea:	d10c      	bne.n	8002206 <HAL_RCC_OscConfig+0x356>
 80021ec:	4b61      	ldr	r3, [pc, #388]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021ee:	6a1b      	ldr	r3, [r3, #32]
 80021f0:	4a60      	ldr	r2, [pc, #384]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021f2:	f043 0304 	orr.w	r3, r3, #4
 80021f6:	6213      	str	r3, [r2, #32]
 80021f8:	4b5e      	ldr	r3, [pc, #376]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021fa:	6a1b      	ldr	r3, [r3, #32]
 80021fc:	4a5d      	ldr	r2, [pc, #372]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80021fe:	f043 0301 	orr.w	r3, r3, #1
 8002202:	6213      	str	r3, [r2, #32]
 8002204:	e00b      	b.n	800221e <HAL_RCC_OscConfig+0x36e>
 8002206:	4b5b      	ldr	r3, [pc, #364]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002208:	6a1b      	ldr	r3, [r3, #32]
 800220a:	4a5a      	ldr	r2, [pc, #360]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800220c:	f023 0301 	bic.w	r3, r3, #1
 8002210:	6213      	str	r3, [r2, #32]
 8002212:	4b58      	ldr	r3, [pc, #352]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002214:	6a1b      	ldr	r3, [r3, #32]
 8002216:	4a57      	ldr	r2, [pc, #348]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002218:	f023 0304 	bic.w	r3, r3, #4
 800221c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800221e:	687b      	ldr	r3, [r7, #4]
 8002220:	68db      	ldr	r3, [r3, #12]
 8002222:	2b00      	cmp	r3, #0
 8002224:	d015      	beq.n	8002252 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002226:	f7ff fb77 	bl	8001918 <HAL_GetTick>
 800222a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800222c:	e00a      	b.n	8002244 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800222e:	f7ff fb73 	bl	8001918 <HAL_GetTick>
 8002232:	4602      	mov	r2, r0
 8002234:	693b      	ldr	r3, [r7, #16]
 8002236:	1ad3      	subs	r3, r2, r3
 8002238:	f241 3288 	movw	r2, #5000	@ 0x1388
 800223c:	4293      	cmp	r3, r2
 800223e:	d901      	bls.n	8002244 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 8002240:	2303      	movs	r3, #3
 8002242:	e0b1      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002244:	4b4b      	ldr	r3, [pc, #300]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002246:	6a1b      	ldr	r3, [r3, #32]
 8002248:	f003 0302 	and.w	r3, r3, #2
 800224c:	2b00      	cmp	r3, #0
 800224e:	d0ee      	beq.n	800222e <HAL_RCC_OscConfig+0x37e>
 8002250:	e014      	b.n	800227c <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002252:	f7ff fb61 	bl	8001918 <HAL_GetTick>
 8002256:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002258:	e00a      	b.n	8002270 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800225a:	f7ff fb5d 	bl	8001918 <HAL_GetTick>
 800225e:	4602      	mov	r2, r0
 8002260:	693b      	ldr	r3, [r7, #16]
 8002262:	1ad3      	subs	r3, r2, r3
 8002264:	f241 3288 	movw	r2, #5000	@ 0x1388
 8002268:	4293      	cmp	r3, r2
 800226a:	d901      	bls.n	8002270 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 800226c:	2303      	movs	r3, #3
 800226e:	e09b      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002270:	4b40      	ldr	r3, [pc, #256]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002272:	6a1b      	ldr	r3, [r3, #32]
 8002274:	f003 0302 	and.w	r3, r3, #2
 8002278:	2b00      	cmp	r3, #0
 800227a:	d1ee      	bne.n	800225a <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 800227c:	7dfb      	ldrb	r3, [r7, #23]
 800227e:	2b01      	cmp	r3, #1
 8002280:	d105      	bne.n	800228e <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002282:	4b3c      	ldr	r3, [pc, #240]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002284:	69db      	ldr	r3, [r3, #28]
 8002286:	4a3b      	ldr	r2, [pc, #236]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002288:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800228c:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800228e:	687b      	ldr	r3, [r7, #4]
 8002290:	69db      	ldr	r3, [r3, #28]
 8002292:	2b00      	cmp	r3, #0
 8002294:	f000 8087 	beq.w	80023a6 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8002298:	4b36      	ldr	r3, [pc, #216]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800229a:	685b      	ldr	r3, [r3, #4]
 800229c:	f003 030c 	and.w	r3, r3, #12
 80022a0:	2b08      	cmp	r3, #8
 80022a2:	d061      	beq.n	8002368 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80022a4:	687b      	ldr	r3, [r7, #4]
 80022a6:	69db      	ldr	r3, [r3, #28]
 80022a8:	2b02      	cmp	r3, #2
 80022aa:	d146      	bne.n	800233a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80022ac:	4b33      	ldr	r3, [pc, #204]	@ (800237c <HAL_RCC_OscConfig+0x4cc>)
 80022ae:	2200      	movs	r2, #0
 80022b0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80022b2:	f7ff fb31 	bl	8001918 <HAL_GetTick>
 80022b6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022b8:	e008      	b.n	80022cc <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80022ba:	f7ff fb2d 	bl	8001918 <HAL_GetTick>
 80022be:	4602      	mov	r2, r0
 80022c0:	693b      	ldr	r3, [r7, #16]
 80022c2:	1ad3      	subs	r3, r2, r3
 80022c4:	2b02      	cmp	r3, #2
 80022c6:	d901      	bls.n	80022cc <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 80022c8:	2303      	movs	r3, #3
 80022ca:	e06d      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80022cc:	4b29      	ldr	r3, [pc, #164]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	d1f0      	bne.n	80022ba <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 80022d8:	687b      	ldr	r3, [r7, #4]
 80022da:	6a1b      	ldr	r3, [r3, #32]
 80022dc:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80022e0:	d108      	bne.n	80022f4 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 80022e2:	4b24      	ldr	r3, [pc, #144]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022e4:	685b      	ldr	r3, [r3, #4]
 80022e6:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 80022ea:	687b      	ldr	r3, [r7, #4]
 80022ec:	689b      	ldr	r3, [r3, #8]
 80022ee:	4921      	ldr	r1, [pc, #132]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022f0:	4313      	orrs	r3, r2
 80022f2:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80022f4:	4b1f      	ldr	r3, [pc, #124]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 80022f6:	685b      	ldr	r3, [r3, #4]
 80022f8:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	6a19      	ldr	r1, [r3, #32]
 8002300:	687b      	ldr	r3, [r7, #4]
 8002302:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002304:	430b      	orrs	r3, r1
 8002306:	491b      	ldr	r1, [pc, #108]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 8002308:	4313      	orrs	r3, r2
 800230a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800230c:	4b1b      	ldr	r3, [pc, #108]	@ (800237c <HAL_RCC_OscConfig+0x4cc>)
 800230e:	2201      	movs	r2, #1
 8002310:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002312:	f7ff fb01 	bl	8001918 <HAL_GetTick>
 8002316:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8002318:	e008      	b.n	800232c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800231a:	f7ff fafd 	bl	8001918 <HAL_GetTick>
 800231e:	4602      	mov	r2, r0
 8002320:	693b      	ldr	r3, [r7, #16]
 8002322:	1ad3      	subs	r3, r2, r3
 8002324:	2b02      	cmp	r3, #2
 8002326:	d901      	bls.n	800232c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8002328:	2303      	movs	r3, #3
 800232a:	e03d      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800232c:	4b11      	ldr	r3, [pc, #68]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002334:	2b00      	cmp	r3, #0
 8002336:	d0f0      	beq.n	800231a <HAL_RCC_OscConfig+0x46a>
 8002338:	e035      	b.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800233a:	4b10      	ldr	r3, [pc, #64]	@ (800237c <HAL_RCC_OscConfig+0x4cc>)
 800233c:	2200      	movs	r2, #0
 800233e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002340:	f7ff faea 	bl	8001918 <HAL_GetTick>
 8002344:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8002346:	e008      	b.n	800235a <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8002348:	f7ff fae6 	bl	8001918 <HAL_GetTick>
 800234c:	4602      	mov	r2, r0
 800234e:	693b      	ldr	r3, [r7, #16]
 8002350:	1ad3      	subs	r3, r2, r3
 8002352:	2b02      	cmp	r3, #2
 8002354:	d901      	bls.n	800235a <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 8002356:	2303      	movs	r3, #3
 8002358:	e026      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800235a:	4b06      	ldr	r3, [pc, #24]	@ (8002374 <HAL_RCC_OscConfig+0x4c4>)
 800235c:	681b      	ldr	r3, [r3, #0]
 800235e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8002362:	2b00      	cmp	r3, #0
 8002364:	d1f0      	bne.n	8002348 <HAL_RCC_OscConfig+0x498>
 8002366:	e01e      	b.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	69db      	ldr	r3, [r3, #28]
 800236c:	2b01      	cmp	r3, #1
 800236e:	d107      	bne.n	8002380 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 8002370:	2301      	movs	r3, #1
 8002372:	e019      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
 8002374:	40021000 	.word	0x40021000
 8002378:	40007000 	.word	0x40007000
 800237c:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8002380:	4b0b      	ldr	r3, [pc, #44]	@ (80023b0 <HAL_RCC_OscConfig+0x500>)
 8002382:	685b      	ldr	r3, [r3, #4]
 8002384:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002386:	68fb      	ldr	r3, [r7, #12]
 8002388:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	6a1b      	ldr	r3, [r3, #32]
 8002390:	429a      	cmp	r2, r3
 8002392:	d106      	bne.n	80023a2 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 8002394:	68fb      	ldr	r3, [r7, #12]
 8002396:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800239e:	429a      	cmp	r2, r3
 80023a0:	d001      	beq.n	80023a6 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 80023a2:	2301      	movs	r3, #1
 80023a4:	e000      	b.n	80023a8 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 80023a6:	2300      	movs	r3, #0
}
 80023a8:	4618      	mov	r0, r3
 80023aa:	3718      	adds	r7, #24
 80023ac:	46bd      	mov	sp, r7
 80023ae:	bd80      	pop	{r7, pc}
 80023b0:	40021000 	.word	0x40021000

080023b4 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80023b4:	b580      	push	{r7, lr}
 80023b6:	b084      	sub	sp, #16
 80023b8:	af00      	add	r7, sp, #0
 80023ba:	6078      	str	r0, [r7, #4]
 80023bc:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	2b00      	cmp	r3, #0
 80023c2:	d101      	bne.n	80023c8 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80023c4:	2301      	movs	r3, #1
 80023c6:	e0d0      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 80023c8:	4b6a      	ldr	r3, [pc, #424]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	f003 0307 	and.w	r3, r3, #7
 80023d0:	683a      	ldr	r2, [r7, #0]
 80023d2:	429a      	cmp	r2, r3
 80023d4:	d910      	bls.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80023d6:	4b67      	ldr	r3, [pc, #412]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023d8:	681b      	ldr	r3, [r3, #0]
 80023da:	f023 0207 	bic.w	r2, r3, #7
 80023de:	4965      	ldr	r1, [pc, #404]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e0:	683b      	ldr	r3, [r7, #0]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80023e6:	4b63      	ldr	r3, [pc, #396]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f003 0307 	and.w	r3, r3, #7
 80023ee:	683a      	ldr	r2, [r7, #0]
 80023f0:	429a      	cmp	r2, r3
 80023f2:	d001      	beq.n	80023f8 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 80023f4:	2301      	movs	r3, #1
 80023f6:	e0b8      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	681b      	ldr	r3, [r3, #0]
 80023fc:	f003 0302 	and.w	r3, r3, #2
 8002400:	2b00      	cmp	r3, #0
 8002402:	d020      	beq.n	8002446 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	681b      	ldr	r3, [r3, #0]
 8002408:	f003 0304 	and.w	r3, r3, #4
 800240c:	2b00      	cmp	r3, #0
 800240e:	d005      	beq.n	800241c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002410:	4b59      	ldr	r3, [pc, #356]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002412:	685b      	ldr	r3, [r3, #4]
 8002414:	4a58      	ldr	r2, [pc, #352]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002416:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800241a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800241c:	687b      	ldr	r3, [r7, #4]
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	f003 0308 	and.w	r3, r3, #8
 8002424:	2b00      	cmp	r3, #0
 8002426:	d005      	beq.n	8002434 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002428:	4b53      	ldr	r3, [pc, #332]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	4a52      	ldr	r2, [pc, #328]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800242e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8002432:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002434:	4b50      	ldr	r3, [pc, #320]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002436:	685b      	ldr	r3, [r3, #4]
 8002438:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800243c:	687b      	ldr	r3, [r7, #4]
 800243e:	689b      	ldr	r3, [r3, #8]
 8002440:	494d      	ldr	r1, [pc, #308]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002442:	4313      	orrs	r3, r2
 8002444:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	681b      	ldr	r3, [r3, #0]
 800244a:	f003 0301 	and.w	r3, r3, #1
 800244e:	2b00      	cmp	r3, #0
 8002450:	d040      	beq.n	80024d4 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002452:	687b      	ldr	r3, [r7, #4]
 8002454:	685b      	ldr	r3, [r3, #4]
 8002456:	2b01      	cmp	r3, #1
 8002458:	d107      	bne.n	800246a <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800245a:	4b47      	ldr	r3, [pc, #284]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002462:	2b00      	cmp	r3, #0
 8002464:	d115      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002466:	2301      	movs	r3, #1
 8002468:	e07f      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	685b      	ldr	r3, [r3, #4]
 800246e:	2b02      	cmp	r3, #2
 8002470:	d107      	bne.n	8002482 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002472:	4b41      	ldr	r3, [pc, #260]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800247a:	2b00      	cmp	r3, #0
 800247c:	d109      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800247e:	2301      	movs	r3, #1
 8002480:	e073      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002482:	4b3d      	ldr	r3, [pc, #244]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002484:	681b      	ldr	r3, [r3, #0]
 8002486:	f003 0302 	and.w	r3, r3, #2
 800248a:	2b00      	cmp	r3, #0
 800248c:	d101      	bne.n	8002492 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800248e:	2301      	movs	r3, #1
 8002490:	e06b      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8002492:	4b39      	ldr	r3, [pc, #228]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002494:	685b      	ldr	r3, [r3, #4]
 8002496:	f023 0203 	bic.w	r2, r3, #3
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	685b      	ldr	r3, [r3, #4]
 800249e:	4936      	ldr	r1, [pc, #216]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024a0:	4313      	orrs	r3, r2
 80024a2:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80024a4:	f7ff fa38 	bl	8001918 <HAL_GetTick>
 80024a8:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024aa:	e00a      	b.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80024ac:	f7ff fa34 	bl	8001918 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80024ba:	4293      	cmp	r3, r2
 80024bc:	d901      	bls.n	80024c2 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80024be:	2303      	movs	r3, #3
 80024c0:	e053      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80024c2:	4b2d      	ldr	r3, [pc, #180]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 80024c4:	685b      	ldr	r3, [r3, #4]
 80024c6:	f003 020c 	and.w	r2, r3, #12
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	685b      	ldr	r3, [r3, #4]
 80024ce:	009b      	lsls	r3, r3, #2
 80024d0:	429a      	cmp	r2, r3
 80024d2:	d1eb      	bne.n	80024ac <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 80024d4:	4b27      	ldr	r3, [pc, #156]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	f003 0307 	and.w	r3, r3, #7
 80024dc:	683a      	ldr	r2, [r7, #0]
 80024de:	429a      	cmp	r2, r3
 80024e0:	d210      	bcs.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80024e2:	4b24      	ldr	r3, [pc, #144]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024e4:	681b      	ldr	r3, [r3, #0]
 80024e6:	f023 0207 	bic.w	r2, r3, #7
 80024ea:	4922      	ldr	r1, [pc, #136]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024ec:	683b      	ldr	r3, [r7, #0]
 80024ee:	4313      	orrs	r3, r2
 80024f0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80024f2:	4b20      	ldr	r3, [pc, #128]	@ (8002574 <HAL_RCC_ClockConfig+0x1c0>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	f003 0307 	and.w	r3, r3, #7
 80024fa:	683a      	ldr	r2, [r7, #0]
 80024fc:	429a      	cmp	r2, r3
 80024fe:	d001      	beq.n	8002504 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8002500:	2301      	movs	r3, #1
 8002502:	e032      	b.n	800256a <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	681b      	ldr	r3, [r3, #0]
 8002508:	f003 0304 	and.w	r3, r3, #4
 800250c:	2b00      	cmp	r3, #0
 800250e:	d008      	beq.n	8002522 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002510:	4b19      	ldr	r3, [pc, #100]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002512:	685b      	ldr	r3, [r3, #4]
 8002514:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	68db      	ldr	r3, [r3, #12]
 800251c:	4916      	ldr	r1, [pc, #88]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800251e:	4313      	orrs	r3, r2
 8002520:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002522:	687b      	ldr	r3, [r7, #4]
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	f003 0308 	and.w	r3, r3, #8
 800252a:	2b00      	cmp	r3, #0
 800252c:	d009      	beq.n	8002542 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800252e:	4b12      	ldr	r3, [pc, #72]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 8002530:	685b      	ldr	r3, [r3, #4]
 8002532:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8002536:	687b      	ldr	r3, [r7, #4]
 8002538:	691b      	ldr	r3, [r3, #16]
 800253a:	00db      	lsls	r3, r3, #3
 800253c:	490e      	ldr	r1, [pc, #56]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800253e:	4313      	orrs	r3, r2
 8002540:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8002542:	f000 f821 	bl	8002588 <HAL_RCC_GetSysClockFreq>
 8002546:	4602      	mov	r2, r0
 8002548:	4b0b      	ldr	r3, [pc, #44]	@ (8002578 <HAL_RCC_ClockConfig+0x1c4>)
 800254a:	685b      	ldr	r3, [r3, #4]
 800254c:	091b      	lsrs	r3, r3, #4
 800254e:	f003 030f 	and.w	r3, r3, #15
 8002552:	490a      	ldr	r1, [pc, #40]	@ (800257c <HAL_RCC_ClockConfig+0x1c8>)
 8002554:	5ccb      	ldrb	r3, [r1, r3]
 8002556:	fa22 f303 	lsr.w	r3, r2, r3
 800255a:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <HAL_RCC_ClockConfig+0x1cc>)
 800255c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800255e:	4b09      	ldr	r3, [pc, #36]	@ (8002584 <HAL_RCC_ClockConfig+0x1d0>)
 8002560:	681b      	ldr	r3, [r3, #0]
 8002562:	4618      	mov	r0, r3
 8002564:	f7ff f996 	bl	8001894 <HAL_InitTick>

  return HAL_OK;
 8002568:	2300      	movs	r3, #0
}
 800256a:	4618      	mov	r0, r3
 800256c:	3710      	adds	r7, #16
 800256e:	46bd      	mov	sp, r7
 8002570:	bd80      	pop	{r7, pc}
 8002572:	bf00      	nop
 8002574:	40022000 	.word	0x40022000
 8002578:	40021000 	.word	0x40021000
 800257c:	080036e8 	.word	0x080036e8
 8002580:	20000008 	.word	0x20000008
 8002584:	2000000c 	.word	0x2000000c

08002588 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8002588:	b480      	push	{r7}
 800258a:	b087      	sub	sp, #28
 800258c:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 800258e:	2300      	movs	r3, #0
 8002590:	60fb      	str	r3, [r7, #12]
 8002592:	2300      	movs	r3, #0
 8002594:	60bb      	str	r3, [r7, #8]
 8002596:	2300      	movs	r3, #0
 8002598:	617b      	str	r3, [r7, #20]
 800259a:	2300      	movs	r3, #0
 800259c:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 800259e:	2300      	movs	r3, #0
 80025a0:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 80025a2:	4b1e      	ldr	r3, [pc, #120]	@ (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025a4:	685b      	ldr	r3, [r3, #4]
 80025a6:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 80025a8:	68fb      	ldr	r3, [r7, #12]
 80025aa:	f003 030c 	and.w	r3, r3, #12
 80025ae:	2b04      	cmp	r3, #4
 80025b0:	d002      	beq.n	80025b8 <HAL_RCC_GetSysClockFreq+0x30>
 80025b2:	2b08      	cmp	r3, #8
 80025b4:	d003      	beq.n	80025be <HAL_RCC_GetSysClockFreq+0x36>
 80025b6:	e027      	b.n	8002608 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80025b8:	4b19      	ldr	r3, [pc, #100]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ba:	613b      	str	r3, [r7, #16]
      break;
 80025bc:	e027      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 80025be:	68fb      	ldr	r3, [r7, #12]
 80025c0:	0c9b      	lsrs	r3, r3, #18
 80025c2:	f003 030f 	and.w	r3, r3, #15
 80025c6:	4a17      	ldr	r2, [pc, #92]	@ (8002624 <HAL_RCC_GetSysClockFreq+0x9c>)
 80025c8:	5cd3      	ldrb	r3, [r2, r3]
 80025ca:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 80025cc:	68fb      	ldr	r3, [r7, #12]
 80025ce:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	d010      	beq.n	80025f8 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 80025d6:	4b11      	ldr	r3, [pc, #68]	@ (800261c <HAL_RCC_GetSysClockFreq+0x94>)
 80025d8:	685b      	ldr	r3, [r3, #4]
 80025da:	0c5b      	lsrs	r3, r3, #17
 80025dc:	f003 0301 	and.w	r3, r3, #1
 80025e0:	4a11      	ldr	r2, [pc, #68]	@ (8002628 <HAL_RCC_GetSysClockFreq+0xa0>)
 80025e2:	5cd3      	ldrb	r3, [r2, r3]
 80025e4:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	4a0d      	ldr	r2, [pc, #52]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 80025ea:	fb03 f202 	mul.w	r2, r3, r2
 80025ee:	68bb      	ldr	r3, [r7, #8]
 80025f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80025f4:	617b      	str	r3, [r7, #20]
 80025f6:	e004      	b.n	8002602 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 80025f8:	687b      	ldr	r3, [r7, #4]
 80025fa:	4a0c      	ldr	r2, [pc, #48]	@ (800262c <HAL_RCC_GetSysClockFreq+0xa4>)
 80025fc:	fb02 f303 	mul.w	r3, r2, r3
 8002600:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8002602:	697b      	ldr	r3, [r7, #20]
 8002604:	613b      	str	r3, [r7, #16]
      break;
 8002606:	e002      	b.n	800260e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8002608:	4b05      	ldr	r3, [pc, #20]	@ (8002620 <HAL_RCC_GetSysClockFreq+0x98>)
 800260a:	613b      	str	r3, [r7, #16]
      break;
 800260c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800260e:	693b      	ldr	r3, [r7, #16]
}
 8002610:	4618      	mov	r0, r3
 8002612:	371c      	adds	r7, #28
 8002614:	46bd      	mov	sp, r7
 8002616:	bc80      	pop	{r7}
 8002618:	4770      	bx	lr
 800261a:	bf00      	nop
 800261c:	40021000 	.word	0x40021000
 8002620:	007a1200 	.word	0x007a1200
 8002624:	080036f8 	.word	0x080036f8
 8002628:	08003708 	.word	0x08003708
 800262c:	003d0900 	.word	0x003d0900

08002630 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8002630:	b480      	push	{r7}
 8002632:	b085      	sub	sp, #20
 8002634:	af00      	add	r7, sp, #0
 8002636:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8002638:	4b0a      	ldr	r3, [pc, #40]	@ (8002664 <RCC_Delay+0x34>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4a0a      	ldr	r2, [pc, #40]	@ (8002668 <RCC_Delay+0x38>)
 800263e:	fba2 2303 	umull	r2, r3, r2, r3
 8002642:	0a5b      	lsrs	r3, r3, #9
 8002644:	687a      	ldr	r2, [r7, #4]
 8002646:	fb02 f303 	mul.w	r3, r2, r3
 800264a:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 800264c:	bf00      	nop
  }
  while (Delay --);
 800264e:	68fb      	ldr	r3, [r7, #12]
 8002650:	1e5a      	subs	r2, r3, #1
 8002652:	60fa      	str	r2, [r7, #12]
 8002654:	2b00      	cmp	r3, #0
 8002656:	d1f9      	bne.n	800264c <RCC_Delay+0x1c>
}
 8002658:	bf00      	nop
 800265a:	bf00      	nop
 800265c:	3714      	adds	r7, #20
 800265e:	46bd      	mov	sp, r7
 8002660:	bc80      	pop	{r7}
 8002662:	4770      	bx	lr
 8002664:	20000008 	.word	0x20000008
 8002668:	10624dd3 	.word	0x10624dd3

0800266c <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800266c:	b580      	push	{r7, lr}
 800266e:	b082      	sub	sp, #8
 8002670:	af00      	add	r7, sp, #0
 8002672:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	2b00      	cmp	r3, #0
 8002678:	d101      	bne.n	800267e <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800267a:	2301      	movs	r3, #1
 800267c:	e076      	b.n	800276c <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002682:	2b00      	cmp	r3, #0
 8002684:	d108      	bne.n	8002698 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002686:	687b      	ldr	r3, [r7, #4]
 8002688:	685b      	ldr	r3, [r3, #4]
 800268a:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800268e:	d009      	beq.n	80026a4 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002690:	687b      	ldr	r3, [r7, #4]
 8002692:	2200      	movs	r2, #0
 8002694:	61da      	str	r2, [r3, #28]
 8002696:	e005      	b.n	80026a4 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	2200      	movs	r2, #0
 800269c:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	2200      	movs	r2, #0
 80026a2:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80026aa:	687b      	ldr	r3, [r7, #4]
 80026ac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 80026b0:	b2db      	uxtb	r3, r3
 80026b2:	2b00      	cmp	r3, #0
 80026b4:	d106      	bne.n	80026c4 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80026b6:	687b      	ldr	r3, [r7, #4]
 80026b8:	2200      	movs	r2, #0
 80026ba:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80026be:	6878      	ldr	r0, [r7, #4]
 80026c0:	f7fe ff92 	bl	80015e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	2202      	movs	r2, #2
 80026c8:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	681b      	ldr	r3, [r3, #0]
 80026d0:	681a      	ldr	r2, [r3, #0]
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026da:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	685b      	ldr	r3, [r3, #4]
 80026e0:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 80026e4:	687b      	ldr	r3, [r7, #4]
 80026e6:	689b      	ldr	r3, [r3, #8]
 80026e8:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 80026ec:	431a      	orrs	r2, r3
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	68db      	ldr	r3, [r3, #12]
 80026f2:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 80026f6:	431a      	orrs	r2, r3
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	691b      	ldr	r3, [r3, #16]
 80026fc:	f003 0302 	and.w	r3, r3, #2
 8002700:	431a      	orrs	r2, r3
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	695b      	ldr	r3, [r3, #20]
 8002706:	f003 0301 	and.w	r3, r3, #1
 800270a:	431a      	orrs	r2, r3
 800270c:	687b      	ldr	r3, [r7, #4]
 800270e:	699b      	ldr	r3, [r3, #24]
 8002710:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002714:	431a      	orrs	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	69db      	ldr	r3, [r3, #28]
 800271a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 800271e:	431a      	orrs	r2, r3
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a1b      	ldr	r3, [r3, #32]
 8002724:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002728:	ea42 0103 	orr.w	r1, r2, r3
 800272c:	687b      	ldr	r3, [r7, #4]
 800272e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002730:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	681b      	ldr	r3, [r3, #0]
 8002738:	430a      	orrs	r2, r1
 800273a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	699b      	ldr	r3, [r3, #24]
 8002740:	0c1a      	lsrs	r2, r3, #16
 8002742:	687b      	ldr	r3, [r7, #4]
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f002 0204 	and.w	r2, r2, #4
 800274a:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800274c:	687b      	ldr	r3, [r7, #4]
 800274e:	681b      	ldr	r3, [r3, #0]
 8002750:	69da      	ldr	r2, [r3, #28]
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800275a:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	2200      	movs	r2, #0
 8002760:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002762:	687b      	ldr	r3, [r7, #4]
 8002764:	2201      	movs	r2, #1
 8002766:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 800276a:	2300      	movs	r3, #0
}
 800276c:	4618      	mov	r0, r3
 800276e:	3708      	adds	r7, #8
 8002770:	46bd      	mov	sp, r7
 8002772:	bd80      	pop	{r7, pc}

08002774 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8002774:	b580      	push	{r7, lr}
 8002776:	b082      	sub	sp, #8
 8002778:	af00      	add	r7, sp, #0
 800277a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	2b00      	cmp	r3, #0
 8002780:	d101      	bne.n	8002786 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8002782:	2301      	movs	r3, #1
 8002784:	e041      	b.n	800280a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8002786:	687b      	ldr	r3, [r7, #4]
 8002788:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800278c:	b2db      	uxtb	r3, r3
 800278e:	2b00      	cmp	r3, #0
 8002790:	d106      	bne.n	80027a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	2200      	movs	r2, #0
 8002796:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800279a:	6878      	ldr	r0, [r7, #4]
 800279c:	f7fe ff62 	bl	8001664 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80027a0:	687b      	ldr	r3, [r7, #4]
 80027a2:	2202      	movs	r2, #2
 80027a4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681a      	ldr	r2, [r3, #0]
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	3304      	adds	r3, #4
 80027b0:	4619      	mov	r1, r3
 80027b2:	4610      	mov	r0, r2
 80027b4:	f000 fc38 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80027b8:	687b      	ldr	r3, [r7, #4]
 80027ba:	2201      	movs	r2, #1
 80027bc:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	2201      	movs	r2, #1
 80027c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2201      	movs	r2, #1
 80027cc:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	2201      	movs	r2, #1
 80027d4:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	2201      	movs	r2, #1
 80027dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	2201      	movs	r2, #1
 80027e4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 80027e8:	687b      	ldr	r3, [r7, #4]
 80027ea:	2201      	movs	r2, #1
 80027ec:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	2201      	movs	r2, #1
 80027f4:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	2201      	movs	r2, #1
 80027fc:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	2201      	movs	r2, #1
 8002804:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8002808:	2300      	movs	r3, #0
}
 800280a:	4618      	mov	r0, r3
 800280c:	3708      	adds	r7, #8
 800280e:	46bd      	mov	sp, r7
 8002810:	bd80      	pop	{r7, pc}
	...

08002814 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8002814:	b480      	push	{r7}
 8002816:	b085      	sub	sp, #20
 8002818:	af00      	add	r7, sp, #0
 800281a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002822:	b2db      	uxtb	r3, r3
 8002824:	2b01      	cmp	r3, #1
 8002826:	d001      	beq.n	800282c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8002828:	2301      	movs	r3, #1
 800282a:	e03a      	b.n	80028a2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	2202      	movs	r2, #2
 8002830:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8002834:	687b      	ldr	r3, [r7, #4]
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	68da      	ldr	r2, [r3, #12]
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	f042 0201 	orr.w	r2, r2, #1
 8002842:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002844:	687b      	ldr	r3, [r7, #4]
 8002846:	681b      	ldr	r3, [r3, #0]
 8002848:	4a18      	ldr	r2, [pc, #96]	@ (80028ac <HAL_TIM_Base_Start_IT+0x98>)
 800284a:	4293      	cmp	r3, r2
 800284c:	d00e      	beq.n	800286c <HAL_TIM_Base_Start_IT+0x58>
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002856:	d009      	beq.n	800286c <HAL_TIM_Base_Start_IT+0x58>
 8002858:	687b      	ldr	r3, [r7, #4]
 800285a:	681b      	ldr	r3, [r3, #0]
 800285c:	4a14      	ldr	r2, [pc, #80]	@ (80028b0 <HAL_TIM_Base_Start_IT+0x9c>)
 800285e:	4293      	cmp	r3, r2
 8002860:	d004      	beq.n	800286c <HAL_TIM_Base_Start_IT+0x58>
 8002862:	687b      	ldr	r3, [r7, #4]
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4a13      	ldr	r2, [pc, #76]	@ (80028b4 <HAL_TIM_Base_Start_IT+0xa0>)
 8002868:	4293      	cmp	r3, r2
 800286a:	d111      	bne.n	8002890 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800286c:	687b      	ldr	r3, [r7, #4]
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	689b      	ldr	r3, [r3, #8]
 8002872:	f003 0307 	and.w	r3, r3, #7
 8002876:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002878:	68fb      	ldr	r3, [r7, #12]
 800287a:	2b06      	cmp	r3, #6
 800287c:	d010      	beq.n	80028a0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	681a      	ldr	r2, [r3, #0]
 8002884:	687b      	ldr	r3, [r7, #4]
 8002886:	681b      	ldr	r3, [r3, #0]
 8002888:	f042 0201 	orr.w	r2, r2, #1
 800288c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800288e:	e007      	b.n	80028a0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	681a      	ldr	r2, [r3, #0]
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	681b      	ldr	r3, [r3, #0]
 800289a:	f042 0201 	orr.w	r2, r2, #1
 800289e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80028a0:	2300      	movs	r3, #0
}
 80028a2:	4618      	mov	r0, r3
 80028a4:	3714      	adds	r7, #20
 80028a6:	46bd      	mov	sp, r7
 80028a8:	bc80      	pop	{r7}
 80028aa:	4770      	bx	lr
 80028ac:	40012c00 	.word	0x40012c00
 80028b0:	40000400 	.word	0x40000400
 80028b4:	40000800 	.word	0x40000800

080028b8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80028b8:	b580      	push	{r7, lr}
 80028ba:	b082      	sub	sp, #8
 80028bc:	af00      	add	r7, sp, #0
 80028be:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d101      	bne.n	80028ca <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80028c6:	2301      	movs	r3, #1
 80028c8:	e041      	b.n	800294e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80028d0:	b2db      	uxtb	r3, r3
 80028d2:	2b00      	cmp	r3, #0
 80028d4:	d106      	bne.n	80028e4 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80028d6:	687b      	ldr	r3, [r7, #4]
 80028d8:	2200      	movs	r2, #0
 80028da:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80028de:	6878      	ldr	r0, [r7, #4]
 80028e0:	f000 f839 	bl	8002956 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80028e4:	687b      	ldr	r3, [r7, #4]
 80028e6:	2202      	movs	r2, #2
 80028e8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	687b      	ldr	r3, [r7, #4]
 80028f2:	3304      	adds	r3, #4
 80028f4:	4619      	mov	r1, r3
 80028f6:	4610      	mov	r0, r2
 80028f8:	f000 fb96 	bl	8003028 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	2201      	movs	r2, #1
 8002900:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2201      	movs	r2, #1
 8002908:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	2201      	movs	r2, #1
 8002910:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8002914:	687b      	ldr	r3, [r7, #4]
 8002916:	2201      	movs	r2, #1
 8002918:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	2201      	movs	r2, #1
 8002920:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	2201      	movs	r2, #1
 8002928:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	2201      	movs	r2, #1
 8002930:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	2201      	movs	r2, #1
 8002938:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 800293c:	687b      	ldr	r3, [r7, #4]
 800293e:	2201      	movs	r2, #1
 8002940:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	2201      	movs	r2, #1
 8002948:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 800294c:	2300      	movs	r3, #0
}
 800294e:	4618      	mov	r0, r3
 8002950:	3708      	adds	r7, #8
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}

08002956 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8002956:	b480      	push	{r7}
 8002958:	b083      	sub	sp, #12
 800295a:	af00      	add	r7, sp, #0
 800295c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 800295e:	bf00      	nop
 8002960:	370c      	adds	r7, #12
 8002962:	46bd      	mov	sp, r7
 8002964:	bc80      	pop	{r7}
 8002966:	4770      	bx	lr

08002968 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8002968:	b580      	push	{r7, lr}
 800296a:	b084      	sub	sp, #16
 800296c:	af00      	add	r7, sp, #0
 800296e:	6078      	str	r0, [r7, #4]
 8002970:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8002972:	683b      	ldr	r3, [r7, #0]
 8002974:	2b00      	cmp	r3, #0
 8002976:	d109      	bne.n	800298c <HAL_TIM_PWM_Start+0x24>
 8002978:	687b      	ldr	r3, [r7, #4]
 800297a:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 800297e:	b2db      	uxtb	r3, r3
 8002980:	2b01      	cmp	r3, #1
 8002982:	bf14      	ite	ne
 8002984:	2301      	movne	r3, #1
 8002986:	2300      	moveq	r3, #0
 8002988:	b2db      	uxtb	r3, r3
 800298a:	e022      	b.n	80029d2 <HAL_TIM_PWM_Start+0x6a>
 800298c:	683b      	ldr	r3, [r7, #0]
 800298e:	2b04      	cmp	r3, #4
 8002990:	d109      	bne.n	80029a6 <HAL_TIM_PWM_Start+0x3e>
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8002998:	b2db      	uxtb	r3, r3
 800299a:	2b01      	cmp	r3, #1
 800299c:	bf14      	ite	ne
 800299e:	2301      	movne	r3, #1
 80029a0:	2300      	moveq	r3, #0
 80029a2:	b2db      	uxtb	r3, r3
 80029a4:	e015      	b.n	80029d2 <HAL_TIM_PWM_Start+0x6a>
 80029a6:	683b      	ldr	r3, [r7, #0]
 80029a8:	2b08      	cmp	r3, #8
 80029aa:	d109      	bne.n	80029c0 <HAL_TIM_PWM_Start+0x58>
 80029ac:	687b      	ldr	r3, [r7, #4]
 80029ae:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 80029b2:	b2db      	uxtb	r3, r3
 80029b4:	2b01      	cmp	r3, #1
 80029b6:	bf14      	ite	ne
 80029b8:	2301      	movne	r3, #1
 80029ba:	2300      	moveq	r3, #0
 80029bc:	b2db      	uxtb	r3, r3
 80029be:	e008      	b.n	80029d2 <HAL_TIM_PWM_Start+0x6a>
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80029c6:	b2db      	uxtb	r3, r3
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	bf14      	ite	ne
 80029cc:	2301      	movne	r3, #1
 80029ce:	2300      	moveq	r3, #0
 80029d0:	b2db      	uxtb	r3, r3
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d001      	beq.n	80029da <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80029d6:	2301      	movs	r3, #1
 80029d8:	e05e      	b.n	8002a98 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80029da:	683b      	ldr	r3, [r7, #0]
 80029dc:	2b00      	cmp	r3, #0
 80029de:	d104      	bne.n	80029ea <HAL_TIM_PWM_Start+0x82>
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	2202      	movs	r2, #2
 80029e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 80029e8:	e013      	b.n	8002a12 <HAL_TIM_PWM_Start+0xaa>
 80029ea:	683b      	ldr	r3, [r7, #0]
 80029ec:	2b04      	cmp	r3, #4
 80029ee:	d104      	bne.n	80029fa <HAL_TIM_PWM_Start+0x92>
 80029f0:	687b      	ldr	r3, [r7, #4]
 80029f2:	2202      	movs	r2, #2
 80029f4:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 80029f8:	e00b      	b.n	8002a12 <HAL_TIM_PWM_Start+0xaa>
 80029fa:	683b      	ldr	r3, [r7, #0]
 80029fc:	2b08      	cmp	r3, #8
 80029fe:	d104      	bne.n	8002a0a <HAL_TIM_PWM_Start+0xa2>
 8002a00:	687b      	ldr	r3, [r7, #4]
 8002a02:	2202      	movs	r2, #2
 8002a04:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8002a08:	e003      	b.n	8002a12 <HAL_TIM_PWM_Start+0xaa>
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	2202      	movs	r2, #2
 8002a0e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8002a12:	687b      	ldr	r3, [r7, #4]
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	2201      	movs	r2, #1
 8002a18:	6839      	ldr	r1, [r7, #0]
 8002a1a:	4618      	mov	r0, r3
 8002a1c:	f000 fd84 	bl	8003528 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	681b      	ldr	r3, [r3, #0]
 8002a24:	4a1e      	ldr	r2, [pc, #120]	@ (8002aa0 <HAL_TIM_PWM_Start+0x138>)
 8002a26:	4293      	cmp	r3, r2
 8002a28:	d107      	bne.n	8002a3a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8002a2a:	687b      	ldr	r3, [r7, #4]
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8002a30:	687b      	ldr	r3, [r7, #4]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002a38:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	681b      	ldr	r3, [r3, #0]
 8002a3e:	4a18      	ldr	r2, [pc, #96]	@ (8002aa0 <HAL_TIM_PWM_Start+0x138>)
 8002a40:	4293      	cmp	r3, r2
 8002a42:	d00e      	beq.n	8002a62 <HAL_TIM_PWM_Start+0xfa>
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002a4c:	d009      	beq.n	8002a62 <HAL_TIM_PWM_Start+0xfa>
 8002a4e:	687b      	ldr	r3, [r7, #4]
 8002a50:	681b      	ldr	r3, [r3, #0]
 8002a52:	4a14      	ldr	r2, [pc, #80]	@ (8002aa4 <HAL_TIM_PWM_Start+0x13c>)
 8002a54:	4293      	cmp	r3, r2
 8002a56:	d004      	beq.n	8002a62 <HAL_TIM_PWM_Start+0xfa>
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	681b      	ldr	r3, [r3, #0]
 8002a5c:	4a12      	ldr	r2, [pc, #72]	@ (8002aa8 <HAL_TIM_PWM_Start+0x140>)
 8002a5e:	4293      	cmp	r3, r2
 8002a60:	d111      	bne.n	8002a86 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8002a62:	687b      	ldr	r3, [r7, #4]
 8002a64:	681b      	ldr	r3, [r3, #0]
 8002a66:	689b      	ldr	r3, [r3, #8]
 8002a68:	f003 0307 	and.w	r3, r3, #7
 8002a6c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b06      	cmp	r3, #6
 8002a72:	d010      	beq.n	8002a96 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	681b      	ldr	r3, [r3, #0]
 8002a78:	681a      	ldr	r2, [r3, #0]
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	681b      	ldr	r3, [r3, #0]
 8002a7e:	f042 0201 	orr.w	r2, r2, #1
 8002a82:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8002a84:	e007      	b.n	8002a96 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8002a86:	687b      	ldr	r3, [r7, #4]
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	681a      	ldr	r2, [r3, #0]
 8002a8c:	687b      	ldr	r3, [r7, #4]
 8002a8e:	681b      	ldr	r3, [r3, #0]
 8002a90:	f042 0201 	orr.w	r2, r2, #1
 8002a94:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8002a96:	2300      	movs	r3, #0
}
 8002a98:	4618      	mov	r0, r3
 8002a9a:	3710      	adds	r7, #16
 8002a9c:	46bd      	mov	sp, r7
 8002a9e:	bd80      	pop	{r7, pc}
 8002aa0:	40012c00 	.word	0x40012c00
 8002aa4:	40000400 	.word	0x40000400
 8002aa8:	40000800 	.word	0x40000800

08002aac <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8002aac:	b580      	push	{r7, lr}
 8002aae:	b082      	sub	sp, #8
 8002ab0:	af00      	add	r7, sp, #0
 8002ab2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002ab4:	687b      	ldr	r3, [r7, #4]
 8002ab6:	681b      	ldr	r3, [r3, #0]
 8002ab8:	691b      	ldr	r3, [r3, #16]
 8002aba:	f003 0302 	and.w	r3, r3, #2
 8002abe:	2b02      	cmp	r3, #2
 8002ac0:	d122      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	681b      	ldr	r3, [r3, #0]
 8002ac6:	68db      	ldr	r3, [r3, #12]
 8002ac8:	f003 0302 	and.w	r3, r3, #2
 8002acc:	2b02      	cmp	r3, #2
 8002ace:	d11b      	bne.n	8002b08 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	f06f 0202 	mvn.w	r2, #2
 8002ad8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	2201      	movs	r2, #1
 8002ade:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002ae0:	687b      	ldr	r3, [r7, #4]
 8002ae2:	681b      	ldr	r3, [r3, #0]
 8002ae4:	699b      	ldr	r3, [r3, #24]
 8002ae6:	f003 0303 	and.w	r3, r3, #3
 8002aea:	2b00      	cmp	r3, #0
 8002aec:	d003      	beq.n	8002af6 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8002aee:	6878      	ldr	r0, [r7, #4]
 8002af0:	f000 fa7f 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002af4:	e005      	b.n	8002b02 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002af6:	6878      	ldr	r0, [r7, #4]
 8002af8:	f000 fa72 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002afc:	6878      	ldr	r0, [r7, #4]
 8002afe:	f000 fa81 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	2200      	movs	r2, #0
 8002b06:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002b08:	687b      	ldr	r3, [r7, #4]
 8002b0a:	681b      	ldr	r3, [r3, #0]
 8002b0c:	691b      	ldr	r3, [r3, #16]
 8002b0e:	f003 0304 	and.w	r3, r3, #4
 8002b12:	2b04      	cmp	r3, #4
 8002b14:	d122      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	681b      	ldr	r3, [r3, #0]
 8002b1a:	68db      	ldr	r3, [r3, #12]
 8002b1c:	f003 0304 	and.w	r3, r3, #4
 8002b20:	2b04      	cmp	r3, #4
 8002b22:	d11b      	bne.n	8002b5c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	681b      	ldr	r3, [r3, #0]
 8002b28:	f06f 0204 	mvn.w	r2, #4
 8002b2c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8002b2e:	687b      	ldr	r3, [r7, #4]
 8002b30:	2202      	movs	r2, #2
 8002b32:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	699b      	ldr	r3, [r3, #24]
 8002b3a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d003      	beq.n	8002b4a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b42:	6878      	ldr	r0, [r7, #4]
 8002b44:	f000 fa55 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002b48:	e005      	b.n	8002b56 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f000 fa48 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002b50:	6878      	ldr	r0, [r7, #4]
 8002b52:	f000 fa57 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002b56:	687b      	ldr	r3, [r7, #4]
 8002b58:	2200      	movs	r2, #0
 8002b5a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	691b      	ldr	r3, [r3, #16]
 8002b62:	f003 0308 	and.w	r3, r3, #8
 8002b66:	2b08      	cmp	r3, #8
 8002b68:	d122      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	681b      	ldr	r3, [r3, #0]
 8002b6e:	68db      	ldr	r3, [r3, #12]
 8002b70:	f003 0308 	and.w	r3, r3, #8
 8002b74:	2b08      	cmp	r3, #8
 8002b76:	d11b      	bne.n	8002bb0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f06f 0208 	mvn.w	r2, #8
 8002b80:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8002b82:	687b      	ldr	r3, [r7, #4]
 8002b84:	2204      	movs	r2, #4
 8002b86:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	69db      	ldr	r3, [r3, #28]
 8002b8e:	f003 0303 	and.w	r3, r3, #3
 8002b92:	2b00      	cmp	r3, #0
 8002b94:	d003      	beq.n	8002b9e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002b96:	6878      	ldr	r0, [r7, #4]
 8002b98:	f000 fa2b 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002b9c:	e005      	b.n	8002baa <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002b9e:	6878      	ldr	r0, [r7, #4]
 8002ba0:	f000 fa1e 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f000 fa2d 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002baa:	687b      	ldr	r3, [r7, #4]
 8002bac:	2200      	movs	r2, #0
 8002bae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002bb0:	687b      	ldr	r3, [r7, #4]
 8002bb2:	681b      	ldr	r3, [r3, #0]
 8002bb4:	691b      	ldr	r3, [r3, #16]
 8002bb6:	f003 0310 	and.w	r3, r3, #16
 8002bba:	2b10      	cmp	r3, #16
 8002bbc:	d122      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8002bbe:	687b      	ldr	r3, [r7, #4]
 8002bc0:	681b      	ldr	r3, [r3, #0]
 8002bc2:	68db      	ldr	r3, [r3, #12]
 8002bc4:	f003 0310 	and.w	r3, r3, #16
 8002bc8:	2b10      	cmp	r3, #16
 8002bca:	d11b      	bne.n	8002c04 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8002bcc:	687b      	ldr	r3, [r7, #4]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f06f 0210 	mvn.w	r2, #16
 8002bd4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	2208      	movs	r2, #8
 8002bda:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d003      	beq.n	8002bf2 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8002bea:	6878      	ldr	r0, [r7, #4]
 8002bec:	f000 fa01 	bl	8002ff2 <HAL_TIM_IC_CaptureCallback>
 8002bf0:	e005      	b.n	8002bfe <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f000 f9f4 	bl	8002fe0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002bf8:	6878      	ldr	r0, [r7, #4]
 8002bfa:	f000 fa03 	bl	8003004 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	2200      	movs	r2, #0
 8002c02:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	681b      	ldr	r3, [r3, #0]
 8002c08:	691b      	ldr	r3, [r3, #16]
 8002c0a:	f003 0301 	and.w	r3, r3, #1
 8002c0e:	2b01      	cmp	r3, #1
 8002c10:	d10e      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002c12:	687b      	ldr	r3, [r7, #4]
 8002c14:	681b      	ldr	r3, [r3, #0]
 8002c16:	68db      	ldr	r3, [r3, #12]
 8002c18:	f003 0301 	and.w	r3, r3, #1
 8002c1c:	2b01      	cmp	r3, #1
 8002c1e:	d107      	bne.n	8002c30 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	681b      	ldr	r3, [r3, #0]
 8002c24:	f06f 0201 	mvn.w	r2, #1
 8002c28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8002c2a:	6878      	ldr	r0, [r7, #4]
 8002c2c:	f000 f9cf 	bl	8002fce <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002c30:	687b      	ldr	r3, [r7, #4]
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	691b      	ldr	r3, [r3, #16]
 8002c36:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c3a:	2b80      	cmp	r3, #128	@ 0x80
 8002c3c:	d10e      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	681b      	ldr	r3, [r3, #0]
 8002c42:	68db      	ldr	r3, [r3, #12]
 8002c44:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002c48:	2b80      	cmp	r3, #128	@ 0x80
 8002c4a:	d107      	bne.n	8002c5c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	681b      	ldr	r3, [r3, #0]
 8002c50:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 8002c54:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8002c56:	6878      	ldr	r0, [r7, #4]
 8002c58:	f000 fcf1 	bl	800363e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	681b      	ldr	r3, [r3, #0]
 8002c60:	691b      	ldr	r3, [r3, #16]
 8002c62:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c66:	2b40      	cmp	r3, #64	@ 0x40
 8002c68:	d10e      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8002c6a:	687b      	ldr	r3, [r7, #4]
 8002c6c:	681b      	ldr	r3, [r3, #0]
 8002c6e:	68db      	ldr	r3, [r3, #12]
 8002c70:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002c74:	2b40      	cmp	r3, #64	@ 0x40
 8002c76:	d107      	bne.n	8002c88 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8002c80:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8002c82:	6878      	ldr	r0, [r7, #4]
 8002c84:	f000 f9c7 	bl	8003016 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	681b      	ldr	r3, [r3, #0]
 8002c8c:	691b      	ldr	r3, [r3, #16]
 8002c8e:	f003 0320 	and.w	r3, r3, #32
 8002c92:	2b20      	cmp	r3, #32
 8002c94:	d10e      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8002c96:	687b      	ldr	r3, [r7, #4]
 8002c98:	681b      	ldr	r3, [r3, #0]
 8002c9a:	68db      	ldr	r3, [r3, #12]
 8002c9c:	f003 0320 	and.w	r3, r3, #32
 8002ca0:	2b20      	cmp	r3, #32
 8002ca2:	d107      	bne.n	8002cb4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002ca4:	687b      	ldr	r3, [r7, #4]
 8002ca6:	681b      	ldr	r3, [r3, #0]
 8002ca8:	f06f 0220 	mvn.w	r2, #32
 8002cac:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8002cae:	6878      	ldr	r0, [r7, #4]
 8002cb0:	f000 fcbc 	bl	800362c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002cb4:	bf00      	nop
 8002cb6:	3708      	adds	r7, #8
 8002cb8:	46bd      	mov	sp, r7
 8002cba:	bd80      	pop	{r7, pc}

08002cbc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8002cbc:	b580      	push	{r7, lr}
 8002cbe:	b086      	sub	sp, #24
 8002cc0:	af00      	add	r7, sp, #0
 8002cc2:	60f8      	str	r0, [r7, #12]
 8002cc4:	60b9      	str	r1, [r7, #8]
 8002cc6:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002cc8:	2300      	movs	r3, #0
 8002cca:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8002ccc:	68fb      	ldr	r3, [r7, #12]
 8002cce:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002cd2:	2b01      	cmp	r3, #1
 8002cd4:	d101      	bne.n	8002cda <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002cd6:	2302      	movs	r3, #2
 8002cd8:	e0ae      	b.n	8002e38 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8002cda:	68fb      	ldr	r3, [r7, #12]
 8002cdc:	2201      	movs	r2, #1
 8002cde:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b0c      	cmp	r3, #12
 8002ce6:	f200 809f 	bhi.w	8002e28 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8002cea:	a201      	add	r2, pc, #4	@ (adr r2, 8002cf0 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8002cec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002cf0:	08002d25 	.word	0x08002d25
 8002cf4:	08002e29 	.word	0x08002e29
 8002cf8:	08002e29 	.word	0x08002e29
 8002cfc:	08002e29 	.word	0x08002e29
 8002d00:	08002d65 	.word	0x08002d65
 8002d04:	08002e29 	.word	0x08002e29
 8002d08:	08002e29 	.word	0x08002e29
 8002d0c:	08002e29 	.word	0x08002e29
 8002d10:	08002da7 	.word	0x08002da7
 8002d14:	08002e29 	.word	0x08002e29
 8002d18:	08002e29 	.word	0x08002e29
 8002d1c:	08002e29 	.word	0x08002e29
 8002d20:	08002de7 	.word	0x08002de7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002d24:	68fb      	ldr	r3, [r7, #12]
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	68b9      	ldr	r1, [r7, #8]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f000 f9de 	bl	80030ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	699a      	ldr	r2, [r3, #24]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f042 0208 	orr.w	r2, r2, #8
 8002d3e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	699a      	ldr	r2, [r3, #24]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f022 0204 	bic.w	r2, r2, #4
 8002d4e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	681b      	ldr	r3, [r3, #0]
 8002d54:	6999      	ldr	r1, [r3, #24]
 8002d56:	68bb      	ldr	r3, [r7, #8]
 8002d58:	691a      	ldr	r2, [r3, #16]
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	430a      	orrs	r2, r1
 8002d60:	619a      	str	r2, [r3, #24]
      break;
 8002d62:	e064      	b.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	681b      	ldr	r3, [r3, #0]
 8002d68:	68b9      	ldr	r1, [r7, #8]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f000 fa24 	bl	80031b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	699a      	ldr	r2, [r3, #24]
 8002d76:	68fb      	ldr	r3, [r7, #12]
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002d7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	699a      	ldr	r2, [r3, #24]
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8002d90:	68fb      	ldr	r3, [r7, #12]
 8002d92:	681b      	ldr	r3, [r3, #0]
 8002d94:	6999      	ldr	r1, [r3, #24]
 8002d96:	68bb      	ldr	r3, [r7, #8]
 8002d98:	691b      	ldr	r3, [r3, #16]
 8002d9a:	021a      	lsls	r2, r3, #8
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	430a      	orrs	r2, r1
 8002da2:	619a      	str	r2, [r3, #24]
      break;
 8002da4:	e043      	b.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	68b9      	ldr	r1, [r7, #8]
 8002dac:	4618      	mov	r0, r3
 8002dae:	f000 fa6d 	bl	800328c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002db2:	68fb      	ldr	r3, [r7, #12]
 8002db4:	681b      	ldr	r3, [r3, #0]
 8002db6:	69da      	ldr	r2, [r3, #28]
 8002db8:	68fb      	ldr	r3, [r7, #12]
 8002dba:	681b      	ldr	r3, [r3, #0]
 8002dbc:	f042 0208 	orr.w	r2, r2, #8
 8002dc0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002dc2:	68fb      	ldr	r3, [r7, #12]
 8002dc4:	681b      	ldr	r3, [r3, #0]
 8002dc6:	69da      	ldr	r2, [r3, #28]
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	f022 0204 	bic.w	r2, r2, #4
 8002dd0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	69d9      	ldr	r1, [r3, #28]
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	691a      	ldr	r2, [r3, #16]
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	681b      	ldr	r3, [r3, #0]
 8002de0:	430a      	orrs	r2, r1
 8002de2:	61da      	str	r2, [r3, #28]
      break;
 8002de4:	e023      	b.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	681b      	ldr	r3, [r3, #0]
 8002dea:	68b9      	ldr	r1, [r7, #8]
 8002dec:	4618      	mov	r0, r3
 8002dee:	f000 fab7 	bl	8003360 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	681b      	ldr	r3, [r3, #0]
 8002df6:	69da      	ldr	r2, [r3, #28]
 8002df8:	68fb      	ldr	r3, [r7, #12]
 8002dfa:	681b      	ldr	r3, [r3, #0]
 8002dfc:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002e00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002e02:	68fb      	ldr	r3, [r7, #12]
 8002e04:	681b      	ldr	r3, [r3, #0]
 8002e06:	69da      	ldr	r2, [r3, #28]
 8002e08:	68fb      	ldr	r3, [r7, #12]
 8002e0a:	681b      	ldr	r3, [r3, #0]
 8002e0c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	69d9      	ldr	r1, [r3, #28]
 8002e18:	68bb      	ldr	r3, [r7, #8]
 8002e1a:	691b      	ldr	r3, [r3, #16]
 8002e1c:	021a      	lsls	r2, r3, #8
 8002e1e:	68fb      	ldr	r3, [r7, #12]
 8002e20:	681b      	ldr	r3, [r3, #0]
 8002e22:	430a      	orrs	r2, r1
 8002e24:	61da      	str	r2, [r3, #28]
      break;
 8002e26:	e002      	b.n	8002e2e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002e28:	2301      	movs	r3, #1
 8002e2a:	75fb      	strb	r3, [r7, #23]
      break;
 8002e2c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	2200      	movs	r2, #0
 8002e32:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002e36:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e38:	4618      	mov	r0, r3
 8002e3a:	3718      	adds	r7, #24
 8002e3c:	46bd      	mov	sp, r7
 8002e3e:	bd80      	pop	{r7, pc}

08002e40 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8002e40:	b580      	push	{r7, lr}
 8002e42:	b084      	sub	sp, #16
 8002e44:	af00      	add	r7, sp, #0
 8002e46:	6078      	str	r0, [r7, #4]
 8002e48:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8002e4a:	2300      	movs	r3, #0
 8002e4c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8002e4e:	687b      	ldr	r3, [r7, #4]
 8002e50:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002e54:	2b01      	cmp	r3, #1
 8002e56:	d101      	bne.n	8002e5c <HAL_TIM_ConfigClockSource+0x1c>
 8002e58:	2302      	movs	r3, #2
 8002e5a:	e0b4      	b.n	8002fc6 <HAL_TIM_ConfigClockSource+0x186>
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8002e64:	687b      	ldr	r3, [r7, #4]
 8002e66:	2202      	movs	r2, #2
 8002e68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8002e6c:	687b      	ldr	r3, [r7, #4]
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	689b      	ldr	r3, [r3, #8]
 8002e72:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002e74:	68bb      	ldr	r3, [r7, #8]
 8002e76:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8002e7a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002e7c:	68bb      	ldr	r3, [r7, #8]
 8002e7e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002e82:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002e84:	687b      	ldr	r3, [r7, #4]
 8002e86:	681b      	ldr	r3, [r3, #0]
 8002e88:	68ba      	ldr	r2, [r7, #8]
 8002e8a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8002e8c:	683b      	ldr	r3, [r7, #0]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e94:	d03e      	beq.n	8002f14 <HAL_TIM_ConfigClockSource+0xd4>
 8002e96:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002e9a:	f200 8087 	bhi.w	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002e9e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002ea2:	f000 8086 	beq.w	8002fb2 <HAL_TIM_ConfigClockSource+0x172>
 8002ea6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002eaa:	d87f      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002eac:	2b70      	cmp	r3, #112	@ 0x70
 8002eae:	d01a      	beq.n	8002ee6 <HAL_TIM_ConfigClockSource+0xa6>
 8002eb0:	2b70      	cmp	r3, #112	@ 0x70
 8002eb2:	d87b      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002eb4:	2b60      	cmp	r3, #96	@ 0x60
 8002eb6:	d050      	beq.n	8002f5a <HAL_TIM_ConfigClockSource+0x11a>
 8002eb8:	2b60      	cmp	r3, #96	@ 0x60
 8002eba:	d877      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002ebc:	2b50      	cmp	r3, #80	@ 0x50
 8002ebe:	d03c      	beq.n	8002f3a <HAL_TIM_ConfigClockSource+0xfa>
 8002ec0:	2b50      	cmp	r3, #80	@ 0x50
 8002ec2:	d873      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002ec4:	2b40      	cmp	r3, #64	@ 0x40
 8002ec6:	d058      	beq.n	8002f7a <HAL_TIM_ConfigClockSource+0x13a>
 8002ec8:	2b40      	cmp	r3, #64	@ 0x40
 8002eca:	d86f      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002ecc:	2b30      	cmp	r3, #48	@ 0x30
 8002ece:	d064      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ed0:	2b30      	cmp	r3, #48	@ 0x30
 8002ed2:	d86b      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002ed4:	2b20      	cmp	r3, #32
 8002ed6:	d060      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ed8:	2b20      	cmp	r3, #32
 8002eda:	d867      	bhi.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	d05c      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ee0:	2b10      	cmp	r3, #16
 8002ee2:	d05a      	beq.n	8002f9a <HAL_TIM_ConfigClockSource+0x15a>
 8002ee4:	e062      	b.n	8002fac <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002eea:	683b      	ldr	r3, [r7, #0]
 8002eec:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002eee:	683b      	ldr	r3, [r7, #0]
 8002ef0:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002ef2:	683b      	ldr	r3, [r7, #0]
 8002ef4:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002ef6:	f000 faf8 	bl	80034ea <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8002efa:	687b      	ldr	r3, [r7, #4]
 8002efc:	681b      	ldr	r3, [r3, #0]
 8002efe:	689b      	ldr	r3, [r3, #8]
 8002f00:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002f02:	68bb      	ldr	r3, [r7, #8]
 8002f04:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002f08:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8002f0a:	687b      	ldr	r3, [r7, #4]
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	68ba      	ldr	r2, [r7, #8]
 8002f10:	609a      	str	r2, [r3, #8]
      break;
 8002f12:	e04f      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002f14:	687b      	ldr	r3, [r7, #4]
 8002f16:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002f18:	683b      	ldr	r3, [r7, #0]
 8002f1a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8002f1c:	683b      	ldr	r3, [r7, #0]
 8002f1e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002f20:	683b      	ldr	r3, [r7, #0]
 8002f22:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002f24:	f000 fae1 	bl	80034ea <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002f28:	687b      	ldr	r3, [r7, #4]
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	689a      	ldr	r2, [r3, #8]
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002f36:	609a      	str	r2, [r3, #8]
      break;
 8002f38:	e03c      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f3e:	683b      	ldr	r3, [r7, #0]
 8002f40:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f42:	683b      	ldr	r3, [r7, #0]
 8002f44:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f46:	461a      	mov	r2, r3
 8002f48:	f000 fa58 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8002f4c:	687b      	ldr	r3, [r7, #4]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	2150      	movs	r1, #80	@ 0x50
 8002f52:	4618      	mov	r0, r3
 8002f54:	f000 faaf 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002f58:	e02c      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f5a:	687b      	ldr	r3, [r7, #4]
 8002f5c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f62:	683b      	ldr	r3, [r7, #0]
 8002f64:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002f66:	461a      	mov	r2, r3
 8002f68:	f000 fa76 	bl	8003458 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8002f6c:	687b      	ldr	r3, [r7, #4]
 8002f6e:	681b      	ldr	r3, [r3, #0]
 8002f70:	2160      	movs	r1, #96	@ 0x60
 8002f72:	4618      	mov	r0, r3
 8002f74:	f000 fa9f 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002f78:	e01c      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f7a:	687b      	ldr	r3, [r7, #4]
 8002f7c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 8002f7e:	683b      	ldr	r3, [r7, #0]
 8002f80:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002f82:	683b      	ldr	r3, [r7, #0]
 8002f84:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002f86:	461a      	mov	r2, r3
 8002f88:	f000 fa38 	bl	80033fc <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8002f8c:	687b      	ldr	r3, [r7, #4]
 8002f8e:	681b      	ldr	r3, [r3, #0]
 8002f90:	2140      	movs	r1, #64	@ 0x40
 8002f92:	4618      	mov	r0, r3
 8002f94:	f000 fa8f 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002f98:	e00c      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8002f9a:	687b      	ldr	r3, [r7, #4]
 8002f9c:	681a      	ldr	r2, [r3, #0]
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	681b      	ldr	r3, [r3, #0]
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	4610      	mov	r0, r2
 8002fa6:	f000 fa86 	bl	80034b6 <TIM_ITRx_SetConfig>
      break;
 8002faa:	e003      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8002fac:	2301      	movs	r3, #1
 8002fae:	73fb      	strb	r3, [r7, #15]
      break;
 8002fb0:	e000      	b.n	8002fb4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002fb2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	2201      	movs	r2, #1
 8002fb8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	2200      	movs	r2, #0
 8002fc0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002fc4:	7bfb      	ldrb	r3, [r7, #15]
}
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	3710      	adds	r7, #16
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	bd80      	pop	{r7, pc}

08002fce <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fce:	b480      	push	{r7}
 8002fd0:	b083      	sub	sp, #12
 8002fd2:	af00      	add	r7, sp, #0
 8002fd4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002fd6:	bf00      	nop
 8002fd8:	370c      	adds	r7, #12
 8002fda:	46bd      	mov	sp, r7
 8002fdc:	bc80      	pop	{r7}
 8002fde:	4770      	bx	lr

08002fe0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002fe0:	b480      	push	{r7}
 8002fe2:	b083      	sub	sp, #12
 8002fe4:	af00      	add	r7, sp, #0
 8002fe6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002fe8:	bf00      	nop
 8002fea:	370c      	adds	r7, #12
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bc80      	pop	{r7}
 8002ff0:	4770      	bx	lr

08002ff2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002ff2:	b480      	push	{r7}
 8002ff4:	b083      	sub	sp, #12
 8002ff6:	af00      	add	r7, sp, #0
 8002ff8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8002ffa:	bf00      	nop
 8002ffc:	370c      	adds	r7, #12
 8002ffe:	46bd      	mov	sp, r7
 8003000:	bc80      	pop	{r7}
 8003002:	4770      	bx	lr

08003004 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003004:	b480      	push	{r7}
 8003006:	b083      	sub	sp, #12
 8003008:	af00      	add	r7, sp, #0
 800300a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800300c:	bf00      	nop
 800300e:	370c      	adds	r7, #12
 8003010:	46bd      	mov	sp, r7
 8003012:	bc80      	pop	{r7}
 8003014:	4770      	bx	lr

08003016 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003016:	b480      	push	{r7}
 8003018:	b083      	sub	sp, #12
 800301a:	af00      	add	r7, sp, #0
 800301c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800301e:	bf00      	nop
 8003020:	370c      	adds	r7, #12
 8003022:	46bd      	mov	sp, r7
 8003024:	bc80      	pop	{r7}
 8003026:	4770      	bx	lr

08003028 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003028:	b480      	push	{r7}
 800302a:	b085      	sub	sp, #20
 800302c:	af00      	add	r7, sp, #0
 800302e:	6078      	str	r0, [r7, #4]
 8003030:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003038:	687b      	ldr	r3, [r7, #4]
 800303a:	4a29      	ldr	r2, [pc, #164]	@ (80030e0 <TIM_Base_SetConfig+0xb8>)
 800303c:	4293      	cmp	r3, r2
 800303e:	d00b      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003040:	687b      	ldr	r3, [r7, #4]
 8003042:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003046:	d007      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003048:	687b      	ldr	r3, [r7, #4]
 800304a:	4a26      	ldr	r2, [pc, #152]	@ (80030e4 <TIM_Base_SetConfig+0xbc>)
 800304c:	4293      	cmp	r3, r2
 800304e:	d003      	beq.n	8003058 <TIM_Base_SetConfig+0x30>
 8003050:	687b      	ldr	r3, [r7, #4]
 8003052:	4a25      	ldr	r2, [pc, #148]	@ (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003054:	4293      	cmp	r3, r2
 8003056:	d108      	bne.n	800306a <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003058:	68fb      	ldr	r3, [r7, #12]
 800305a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800305e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003060:	683b      	ldr	r3, [r7, #0]
 8003062:	685b      	ldr	r3, [r3, #4]
 8003064:	68fa      	ldr	r2, [r7, #12]
 8003066:	4313      	orrs	r3, r2
 8003068:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	4a1c      	ldr	r2, [pc, #112]	@ (80030e0 <TIM_Base_SetConfig+0xb8>)
 800306e:	4293      	cmp	r3, r2
 8003070:	d00b      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003072:	687b      	ldr	r3, [r7, #4]
 8003074:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003078:	d007      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 800307a:	687b      	ldr	r3, [r7, #4]
 800307c:	4a19      	ldr	r2, [pc, #100]	@ (80030e4 <TIM_Base_SetConfig+0xbc>)
 800307e:	4293      	cmp	r3, r2
 8003080:	d003      	beq.n	800308a <TIM_Base_SetConfig+0x62>
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	4a18      	ldr	r2, [pc, #96]	@ (80030e8 <TIM_Base_SetConfig+0xc0>)
 8003086:	4293      	cmp	r3, r2
 8003088:	d108      	bne.n	800309c <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800308a:	68fb      	ldr	r3, [r7, #12]
 800308c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003090:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003092:	683b      	ldr	r3, [r7, #0]
 8003094:	68db      	ldr	r3, [r3, #12]
 8003096:	68fa      	ldr	r2, [r7, #12]
 8003098:	4313      	orrs	r3, r2
 800309a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 80030a2:	683b      	ldr	r3, [r7, #0]
 80030a4:	695b      	ldr	r3, [r3, #20]
 80030a6:	4313      	orrs	r3, r2
 80030a8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80030aa:	687b      	ldr	r3, [r7, #4]
 80030ac:	68fa      	ldr	r2, [r7, #12]
 80030ae:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80030b0:	683b      	ldr	r3, [r7, #0]
 80030b2:	689a      	ldr	r2, [r3, #8]
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80030b8:	683b      	ldr	r3, [r7, #0]
 80030ba:	681a      	ldr	r2, [r3, #0]
 80030bc:	687b      	ldr	r3, [r7, #4]
 80030be:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	4a07      	ldr	r2, [pc, #28]	@ (80030e0 <TIM_Base_SetConfig+0xb8>)
 80030c4:	4293      	cmp	r3, r2
 80030c6:	d103      	bne.n	80030d0 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80030c8:	683b      	ldr	r3, [r7, #0]
 80030ca:	691a      	ldr	r2, [r3, #16]
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80030d0:	687b      	ldr	r3, [r7, #4]
 80030d2:	2201      	movs	r2, #1
 80030d4:	615a      	str	r2, [r3, #20]
}
 80030d6:	bf00      	nop
 80030d8:	3714      	adds	r7, #20
 80030da:	46bd      	mov	sp, r7
 80030dc:	bc80      	pop	{r7}
 80030de:	4770      	bx	lr
 80030e0:	40012c00 	.word	0x40012c00
 80030e4:	40000400 	.word	0x40000400
 80030e8:	40000800 	.word	0x40000800

080030ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80030ec:	b480      	push	{r7}
 80030ee:	b087      	sub	sp, #28
 80030f0:	af00      	add	r7, sp, #0
 80030f2:	6078      	str	r0, [r7, #4]
 80030f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80030f6:	687b      	ldr	r3, [r7, #4]
 80030f8:	6a1b      	ldr	r3, [r3, #32]
 80030fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	6a1b      	ldr	r3, [r3, #32]
 8003100:	f023 0201 	bic.w	r2, r3, #1
 8003104:	687b      	ldr	r3, [r7, #4]
 8003106:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	699b      	ldr	r3, [r3, #24]
 8003112:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8003114:	68fb      	ldr	r3, [r7, #12]
 8003116:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800311a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800311c:	68fb      	ldr	r3, [r7, #12]
 800311e:	f023 0303 	bic.w	r3, r3, #3
 8003122:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8003124:	683b      	ldr	r3, [r7, #0]
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	68fa      	ldr	r2, [r7, #12]
 800312a:	4313      	orrs	r3, r2
 800312c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800312e:	697b      	ldr	r3, [r7, #20]
 8003130:	f023 0302 	bic.w	r3, r3, #2
 8003134:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	689b      	ldr	r3, [r3, #8]
 800313a:	697a      	ldr	r2, [r7, #20]
 800313c:	4313      	orrs	r3, r2
 800313e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8003140:	687b      	ldr	r3, [r7, #4]
 8003142:	4a1c      	ldr	r2, [pc, #112]	@ (80031b4 <TIM_OC1_SetConfig+0xc8>)
 8003144:	4293      	cmp	r3, r2
 8003146:	d10c      	bne.n	8003162 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8003148:	697b      	ldr	r3, [r7, #20]
 800314a:	f023 0308 	bic.w	r3, r3, #8
 800314e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8003150:	683b      	ldr	r3, [r7, #0]
 8003152:	68db      	ldr	r3, [r3, #12]
 8003154:	697a      	ldr	r2, [r7, #20]
 8003156:	4313      	orrs	r3, r2
 8003158:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800315a:	697b      	ldr	r3, [r7, #20]
 800315c:	f023 0304 	bic.w	r3, r3, #4
 8003160:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	4a13      	ldr	r2, [pc, #76]	@ (80031b4 <TIM_OC1_SetConfig+0xc8>)
 8003166:	4293      	cmp	r3, r2
 8003168:	d111      	bne.n	800318e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800316a:	693b      	ldr	r3, [r7, #16]
 800316c:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8003170:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8003172:	693b      	ldr	r3, [r7, #16]
 8003174:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8003178:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800317a:	683b      	ldr	r3, [r7, #0]
 800317c:	695b      	ldr	r3, [r3, #20]
 800317e:	693a      	ldr	r2, [r7, #16]
 8003180:	4313      	orrs	r3, r2
 8003182:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8003184:	683b      	ldr	r3, [r7, #0]
 8003186:	699b      	ldr	r3, [r3, #24]
 8003188:	693a      	ldr	r2, [r7, #16]
 800318a:	4313      	orrs	r3, r2
 800318c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800318e:	687b      	ldr	r3, [r7, #4]
 8003190:	693a      	ldr	r2, [r7, #16]
 8003192:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8003194:	687b      	ldr	r3, [r7, #4]
 8003196:	68fa      	ldr	r2, [r7, #12]
 8003198:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800319a:	683b      	ldr	r3, [r7, #0]
 800319c:	685a      	ldr	r2, [r3, #4]
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	697a      	ldr	r2, [r7, #20]
 80031a6:	621a      	str	r2, [r3, #32]
}
 80031a8:	bf00      	nop
 80031aa:	371c      	adds	r7, #28
 80031ac:	46bd      	mov	sp, r7
 80031ae:	bc80      	pop	{r7}
 80031b0:	4770      	bx	lr
 80031b2:	bf00      	nop
 80031b4:	40012c00 	.word	0x40012c00

080031b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80031b8:	b480      	push	{r7}
 80031ba:	b087      	sub	sp, #28
 80031bc:	af00      	add	r7, sp, #0
 80031be:	6078      	str	r0, [r7, #4]
 80031c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	6a1b      	ldr	r3, [r3, #32]
 80031c6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80031c8:	687b      	ldr	r3, [r7, #4]
 80031ca:	6a1b      	ldr	r3, [r3, #32]
 80031cc:	f023 0210 	bic.w	r2, r3, #16
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80031d4:	687b      	ldr	r3, [r7, #4]
 80031d6:	685b      	ldr	r3, [r3, #4]
 80031d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	699b      	ldr	r3, [r3, #24]
 80031de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80031e0:	68fb      	ldr	r3, [r7, #12]
 80031e2:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80031e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80031e8:	68fb      	ldr	r3, [r7, #12]
 80031ea:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80031ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80031f0:	683b      	ldr	r3, [r7, #0]
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	021b      	lsls	r3, r3, #8
 80031f6:	68fa      	ldr	r2, [r7, #12]
 80031f8:	4313      	orrs	r3, r2
 80031fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80031fc:	697b      	ldr	r3, [r7, #20]
 80031fe:	f023 0320 	bic.w	r3, r3, #32
 8003202:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8003204:	683b      	ldr	r3, [r7, #0]
 8003206:	689b      	ldr	r3, [r3, #8]
 8003208:	011b      	lsls	r3, r3, #4
 800320a:	697a      	ldr	r2, [r7, #20]
 800320c:	4313      	orrs	r3, r2
 800320e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8003210:	687b      	ldr	r3, [r7, #4]
 8003212:	4a1d      	ldr	r2, [pc, #116]	@ (8003288 <TIM_OC2_SetConfig+0xd0>)
 8003214:	4293      	cmp	r3, r2
 8003216:	d10d      	bne.n	8003234 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8003218:	697b      	ldr	r3, [r7, #20]
 800321a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800321e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8003220:	683b      	ldr	r3, [r7, #0]
 8003222:	68db      	ldr	r3, [r3, #12]
 8003224:	011b      	lsls	r3, r3, #4
 8003226:	697a      	ldr	r2, [r7, #20]
 8003228:	4313      	orrs	r3, r2
 800322a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800322c:	697b      	ldr	r3, [r7, #20]
 800322e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8003232:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	4a14      	ldr	r2, [pc, #80]	@ (8003288 <TIM_OC2_SetConfig+0xd0>)
 8003238:	4293      	cmp	r3, r2
 800323a:	d113      	bne.n	8003264 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800323c:	693b      	ldr	r3, [r7, #16]
 800323e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003242:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8003244:	693b      	ldr	r3, [r7, #16]
 8003246:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 800324a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	695b      	ldr	r3, [r3, #20]
 8003250:	009b      	lsls	r3, r3, #2
 8003252:	693a      	ldr	r2, [r7, #16]
 8003254:	4313      	orrs	r3, r2
 8003256:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	699b      	ldr	r3, [r3, #24]
 800325c:	009b      	lsls	r3, r3, #2
 800325e:	693a      	ldr	r2, [r7, #16]
 8003260:	4313      	orrs	r3, r2
 8003262:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	693a      	ldr	r2, [r7, #16]
 8003268:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800326a:	687b      	ldr	r3, [r7, #4]
 800326c:	68fa      	ldr	r2, [r7, #12]
 800326e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8003270:	683b      	ldr	r3, [r7, #0]
 8003272:	685a      	ldr	r2, [r3, #4]
 8003274:	687b      	ldr	r3, [r7, #4]
 8003276:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8003278:	687b      	ldr	r3, [r7, #4]
 800327a:	697a      	ldr	r2, [r7, #20]
 800327c:	621a      	str	r2, [r3, #32]
}
 800327e:	bf00      	nop
 8003280:	371c      	adds	r7, #28
 8003282:	46bd      	mov	sp, r7
 8003284:	bc80      	pop	{r7}
 8003286:	4770      	bx	lr
 8003288:	40012c00 	.word	0x40012c00

0800328c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800328c:	b480      	push	{r7}
 800328e:	b087      	sub	sp, #28
 8003290:	af00      	add	r7, sp, #0
 8003292:	6078      	str	r0, [r7, #4]
 8003294:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8003296:	687b      	ldr	r3, [r7, #4]
 8003298:	6a1b      	ldr	r3, [r3, #32]
 800329a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800329c:	687b      	ldr	r3, [r7, #4]
 800329e:	6a1b      	ldr	r3, [r3, #32]
 80032a0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80032ae:	687b      	ldr	r3, [r7, #4]
 80032b0:	69db      	ldr	r3, [r3, #28]
 80032b2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80032ba:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80032bc:	68fb      	ldr	r3, [r7, #12]
 80032be:	f023 0303 	bic.w	r3, r3, #3
 80032c2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80032c4:	683b      	ldr	r3, [r7, #0]
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	68fa      	ldr	r2, [r7, #12]
 80032ca:	4313      	orrs	r3, r2
 80032cc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80032ce:	697b      	ldr	r3, [r7, #20]
 80032d0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80032d4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80032d6:	683b      	ldr	r3, [r7, #0]
 80032d8:	689b      	ldr	r3, [r3, #8]
 80032da:	021b      	lsls	r3, r3, #8
 80032dc:	697a      	ldr	r2, [r7, #20]
 80032de:	4313      	orrs	r3, r2
 80032e0:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80032e2:	687b      	ldr	r3, [r7, #4]
 80032e4:	4a1d      	ldr	r2, [pc, #116]	@ (800335c <TIM_OC3_SetConfig+0xd0>)
 80032e6:	4293      	cmp	r3, r2
 80032e8:	d10d      	bne.n	8003306 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80032ea:	697b      	ldr	r3, [r7, #20]
 80032ec:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80032f0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80032f2:	683b      	ldr	r3, [r7, #0]
 80032f4:	68db      	ldr	r3, [r3, #12]
 80032f6:	021b      	lsls	r3, r3, #8
 80032f8:	697a      	ldr	r2, [r7, #20]
 80032fa:	4313      	orrs	r3, r2
 80032fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80032fe:	697b      	ldr	r3, [r7, #20]
 8003300:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8003304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	4a14      	ldr	r2, [pc, #80]	@ (800335c <TIM_OC3_SetConfig+0xd0>)
 800330a:	4293      	cmp	r3, r2
 800330c:	d113      	bne.n	8003336 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800330e:	693b      	ldr	r3, [r7, #16]
 8003310:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8003314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8003316:	693b      	ldr	r3, [r7, #16]
 8003318:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800331c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800331e:	683b      	ldr	r3, [r7, #0]
 8003320:	695b      	ldr	r3, [r3, #20]
 8003322:	011b      	lsls	r3, r3, #4
 8003324:	693a      	ldr	r2, [r7, #16]
 8003326:	4313      	orrs	r3, r2
 8003328:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800332a:	683b      	ldr	r3, [r7, #0]
 800332c:	699b      	ldr	r3, [r3, #24]
 800332e:	011b      	lsls	r3, r3, #4
 8003330:	693a      	ldr	r2, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	693a      	ldr	r2, [r7, #16]
 800333a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800333c:	687b      	ldr	r3, [r7, #4]
 800333e:	68fa      	ldr	r2, [r7, #12]
 8003340:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8003342:	683b      	ldr	r3, [r7, #0]
 8003344:	685a      	ldr	r2, [r3, #4]
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800334a:	687b      	ldr	r3, [r7, #4]
 800334c:	697a      	ldr	r2, [r7, #20]
 800334e:	621a      	str	r2, [r3, #32]
}
 8003350:	bf00      	nop
 8003352:	371c      	adds	r7, #28
 8003354:	46bd      	mov	sp, r7
 8003356:	bc80      	pop	{r7}
 8003358:	4770      	bx	lr
 800335a:	bf00      	nop
 800335c:	40012c00 	.word	0x40012c00

08003360 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8003360:	b480      	push	{r7}
 8003362:	b087      	sub	sp, #28
 8003364:	af00      	add	r7, sp, #0
 8003366:	6078      	str	r0, [r7, #4]
 8003368:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800336a:	687b      	ldr	r3, [r7, #4]
 800336c:	6a1b      	ldr	r3, [r3, #32]
 800336e:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8003370:	687b      	ldr	r3, [r7, #4]
 8003372:	6a1b      	ldr	r3, [r3, #32]
 8003374:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 8003378:	687b      	ldr	r3, [r7, #4]
 800337a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	69db      	ldr	r3, [r3, #28]
 8003386:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800338e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8003390:	68fb      	ldr	r3, [r7, #12]
 8003392:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003396:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8003398:	683b      	ldr	r3, [r7, #0]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	021b      	lsls	r3, r3, #8
 800339e:	68fa      	ldr	r2, [r7, #12]
 80033a0:	4313      	orrs	r3, r2
 80033a2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80033a4:	693b      	ldr	r3, [r7, #16]
 80033a6:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 80033aa:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80033ac:	683b      	ldr	r3, [r7, #0]
 80033ae:	689b      	ldr	r3, [r3, #8]
 80033b0:	031b      	lsls	r3, r3, #12
 80033b2:	693a      	ldr	r2, [r7, #16]
 80033b4:	4313      	orrs	r3, r2
 80033b6:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80033b8:	687b      	ldr	r3, [r7, #4]
 80033ba:	4a0f      	ldr	r2, [pc, #60]	@ (80033f8 <TIM_OC4_SetConfig+0x98>)
 80033bc:	4293      	cmp	r3, r2
 80033be:	d109      	bne.n	80033d4 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80033c0:	697b      	ldr	r3, [r7, #20]
 80033c2:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 80033c6:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80033c8:	683b      	ldr	r3, [r7, #0]
 80033ca:	695b      	ldr	r3, [r3, #20]
 80033cc:	019b      	lsls	r3, r3, #6
 80033ce:	697a      	ldr	r2, [r7, #20]
 80033d0:	4313      	orrs	r3, r2
 80033d2:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	697a      	ldr	r2, [r7, #20]
 80033d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80033da:	687b      	ldr	r3, [r7, #4]
 80033dc:	68fa      	ldr	r2, [r7, #12]
 80033de:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80033e0:	683b      	ldr	r3, [r7, #0]
 80033e2:	685a      	ldr	r2, [r3, #4]
 80033e4:	687b      	ldr	r3, [r7, #4]
 80033e6:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80033e8:	687b      	ldr	r3, [r7, #4]
 80033ea:	693a      	ldr	r2, [r7, #16]
 80033ec:	621a      	str	r2, [r3, #32]
}
 80033ee:	bf00      	nop
 80033f0:	371c      	adds	r7, #28
 80033f2:	46bd      	mov	sp, r7
 80033f4:	bc80      	pop	{r7}
 80033f6:	4770      	bx	lr
 80033f8:	40012c00 	.word	0x40012c00

080033fc <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80033fc:	b480      	push	{r7}
 80033fe:	b087      	sub	sp, #28
 8003400:	af00      	add	r7, sp, #0
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	60b9      	str	r1, [r7, #8]
 8003406:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	6a1b      	ldr	r3, [r3, #32]
 800340c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800340e:	68fb      	ldr	r3, [r7, #12]
 8003410:	6a1b      	ldr	r3, [r3, #32]
 8003412:	f023 0201 	bic.w	r2, r3, #1
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800341a:	68fb      	ldr	r3, [r7, #12]
 800341c:	699b      	ldr	r3, [r3, #24]
 800341e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003420:	693b      	ldr	r3, [r7, #16]
 8003422:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003426:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	011b      	lsls	r3, r3, #4
 800342c:	693a      	ldr	r2, [r7, #16]
 800342e:	4313      	orrs	r3, r2
 8003430:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	f023 030a 	bic.w	r3, r3, #10
 8003438:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800343a:	697a      	ldr	r2, [r7, #20]
 800343c:	68bb      	ldr	r3, [r7, #8]
 800343e:	4313      	orrs	r3, r2
 8003440:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003442:	68fb      	ldr	r3, [r7, #12]
 8003444:	693a      	ldr	r2, [r7, #16]
 8003446:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003448:	68fb      	ldr	r3, [r7, #12]
 800344a:	697a      	ldr	r2, [r7, #20]
 800344c:	621a      	str	r2, [r3, #32]
}
 800344e:	bf00      	nop
 8003450:	371c      	adds	r7, #28
 8003452:	46bd      	mov	sp, r7
 8003454:	bc80      	pop	{r7}
 8003456:	4770      	bx	lr

08003458 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003458:	b480      	push	{r7}
 800345a:	b087      	sub	sp, #28
 800345c:	af00      	add	r7, sp, #0
 800345e:	60f8      	str	r0, [r7, #12]
 8003460:	60b9      	str	r1, [r7, #8]
 8003462:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	6a1b      	ldr	r3, [r3, #32]
 8003468:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800346a:	68fb      	ldr	r3, [r7, #12]
 800346c:	6a1b      	ldr	r3, [r3, #32]
 800346e:	f023 0210 	bic.w	r2, r3, #16
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003476:	68fb      	ldr	r3, [r7, #12]
 8003478:	699b      	ldr	r3, [r3, #24]
 800347a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800347c:	693b      	ldr	r3, [r7, #16]
 800347e:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003482:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003484:	687b      	ldr	r3, [r7, #4]
 8003486:	031b      	lsls	r3, r3, #12
 8003488:	693a      	ldr	r2, [r7, #16]
 800348a:	4313      	orrs	r3, r2
 800348c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800348e:	697b      	ldr	r3, [r7, #20]
 8003490:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003494:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003496:	68bb      	ldr	r3, [r7, #8]
 8003498:	011b      	lsls	r3, r3, #4
 800349a:	697a      	ldr	r2, [r7, #20]
 800349c:	4313      	orrs	r3, r2
 800349e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	693a      	ldr	r2, [r7, #16]
 80034a4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	697a      	ldr	r2, [r7, #20]
 80034aa:	621a      	str	r2, [r3, #32]
}
 80034ac:	bf00      	nop
 80034ae:	371c      	adds	r7, #28
 80034b0:	46bd      	mov	sp, r7
 80034b2:	bc80      	pop	{r7}
 80034b4:	4770      	bx	lr

080034b6 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80034b6:	b480      	push	{r7}
 80034b8:	b085      	sub	sp, #20
 80034ba:	af00      	add	r7, sp, #0
 80034bc:	6078      	str	r0, [r7, #4]
 80034be:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80034c0:	687b      	ldr	r3, [r7, #4]
 80034c2:	689b      	ldr	r3, [r3, #8]
 80034c4:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80034cc:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80034ce:	683a      	ldr	r2, [r7, #0]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4313      	orrs	r3, r2
 80034d4:	f043 0307 	orr.w	r3, r3, #7
 80034d8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	68fa      	ldr	r2, [r7, #12]
 80034de:	609a      	str	r2, [r3, #8]
}
 80034e0:	bf00      	nop
 80034e2:	3714      	adds	r7, #20
 80034e4:	46bd      	mov	sp, r7
 80034e6:	bc80      	pop	{r7}
 80034e8:	4770      	bx	lr

080034ea <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80034ea:	b480      	push	{r7}
 80034ec:	b087      	sub	sp, #28
 80034ee:	af00      	add	r7, sp, #0
 80034f0:	60f8      	str	r0, [r7, #12]
 80034f2:	60b9      	str	r1, [r7, #8]
 80034f4:	607a      	str	r2, [r7, #4]
 80034f6:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	689b      	ldr	r3, [r3, #8]
 80034fc:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80034fe:	697b      	ldr	r3, [r7, #20]
 8003500:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003504:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003506:	683b      	ldr	r3, [r7, #0]
 8003508:	021a      	lsls	r2, r3, #8
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	431a      	orrs	r2, r3
 800350e:	68bb      	ldr	r3, [r7, #8]
 8003510:	4313      	orrs	r3, r2
 8003512:	697a      	ldr	r2, [r7, #20]
 8003514:	4313      	orrs	r3, r2
 8003516:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003518:	68fb      	ldr	r3, [r7, #12]
 800351a:	697a      	ldr	r2, [r7, #20]
 800351c:	609a      	str	r2, [r3, #8]
}
 800351e:	bf00      	nop
 8003520:	371c      	adds	r7, #28
 8003522:	46bd      	mov	sp, r7
 8003524:	bc80      	pop	{r7}
 8003526:	4770      	bx	lr

08003528 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8003528:	b480      	push	{r7}
 800352a:	b087      	sub	sp, #28
 800352c:	af00      	add	r7, sp, #0
 800352e:	60f8      	str	r0, [r7, #12]
 8003530:	60b9      	str	r1, [r7, #8]
 8003532:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8003534:	68bb      	ldr	r3, [r7, #8]
 8003536:	f003 031f 	and.w	r3, r3, #31
 800353a:	2201      	movs	r2, #1
 800353c:	fa02 f303 	lsl.w	r3, r2, r3
 8003540:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	6a1a      	ldr	r2, [r3, #32]
 8003546:	697b      	ldr	r3, [r7, #20]
 8003548:	43db      	mvns	r3, r3
 800354a:	401a      	ands	r2, r3
 800354c:	68fb      	ldr	r3, [r7, #12]
 800354e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8003550:	68fb      	ldr	r3, [r7, #12]
 8003552:	6a1a      	ldr	r2, [r3, #32]
 8003554:	68bb      	ldr	r3, [r7, #8]
 8003556:	f003 031f 	and.w	r3, r3, #31
 800355a:	6879      	ldr	r1, [r7, #4]
 800355c:	fa01 f303 	lsl.w	r3, r1, r3
 8003560:	431a      	orrs	r2, r3
 8003562:	68fb      	ldr	r3, [r7, #12]
 8003564:	621a      	str	r2, [r3, #32]
}
 8003566:	bf00      	nop
 8003568:	371c      	adds	r7, #28
 800356a:	46bd      	mov	sp, r7
 800356c:	bc80      	pop	{r7}
 800356e:	4770      	bx	lr

08003570 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003570:	b480      	push	{r7}
 8003572:	b085      	sub	sp, #20
 8003574:	af00      	add	r7, sp, #0
 8003576:	6078      	str	r0, [r7, #4]
 8003578:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800357a:	687b      	ldr	r3, [r7, #4]
 800357c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003580:	2b01      	cmp	r3, #1
 8003582:	d101      	bne.n	8003588 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003584:	2302      	movs	r3, #2
 8003586:	e046      	b.n	8003616 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	2201      	movs	r2, #1
 800358c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	2202      	movs	r2, #2
 8003594:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	685b      	ldr	r3, [r3, #4]
 800359e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80035a0:	687b      	ldr	r3, [r7, #4]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	689b      	ldr	r3, [r3, #8]
 80035a6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80035ae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80035b0:	683b      	ldr	r3, [r7, #0]
 80035b2:	681b      	ldr	r3, [r3, #0]
 80035b4:	68fa      	ldr	r2, [r7, #12]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	68fa      	ldr	r2, [r7, #12]
 80035c0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	4a16      	ldr	r2, [pc, #88]	@ (8003620 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d00e      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035d4:	d009      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035d6:	687b      	ldr	r3, [r7, #4]
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	4a12      	ldr	r2, [pc, #72]	@ (8003624 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 80035dc:	4293      	cmp	r3, r2
 80035de:	d004      	beq.n	80035ea <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 80035e0:	687b      	ldr	r3, [r7, #4]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	4a10      	ldr	r2, [pc, #64]	@ (8003628 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 80035e6:	4293      	cmp	r3, r2
 80035e8:	d10c      	bne.n	8003604 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80035ea:	68bb      	ldr	r3, [r7, #8]
 80035ec:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 80035f0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80035f2:	683b      	ldr	r3, [r7, #0]
 80035f4:	685b      	ldr	r3, [r3, #4]
 80035f6:	68ba      	ldr	r2, [r7, #8]
 80035f8:	4313      	orrs	r3, r2
 80035fa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80035fc:	687b      	ldr	r3, [r7, #4]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	68ba      	ldr	r2, [r7, #8]
 8003602:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	2201      	movs	r2, #1
 8003608:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	2200      	movs	r2, #0
 8003610:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003614:	2300      	movs	r3, #0
}
 8003616:	4618      	mov	r0, r3
 8003618:	3714      	adds	r7, #20
 800361a:	46bd      	mov	sp, r7
 800361c:	bc80      	pop	{r7}
 800361e:	4770      	bx	lr
 8003620:	40012c00 	.word	0x40012c00
 8003624:	40000400 	.word	0x40000400
 8003628:	40000800 	.word	0x40000800

0800362c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800362c:	b480      	push	{r7}
 800362e:	b083      	sub	sp, #12
 8003630:	af00      	add	r7, sp, #0
 8003632:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003634:	bf00      	nop
 8003636:	370c      	adds	r7, #12
 8003638:	46bd      	mov	sp, r7
 800363a:	bc80      	pop	{r7}
 800363c:	4770      	bx	lr

0800363e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800363e:	b480      	push	{r7}
 8003640:	b083      	sub	sp, #12
 8003642:	af00      	add	r7, sp, #0
 8003644:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003646:	bf00      	nop
 8003648:	370c      	adds	r7, #12
 800364a:	46bd      	mov	sp, r7
 800364c:	bc80      	pop	{r7}
 800364e:	4770      	bx	lr

08003650 <memset>:
 8003650:	4603      	mov	r3, r0
 8003652:	4402      	add	r2, r0
 8003654:	4293      	cmp	r3, r2
 8003656:	d100      	bne.n	800365a <memset+0xa>
 8003658:	4770      	bx	lr
 800365a:	f803 1b01 	strb.w	r1, [r3], #1
 800365e:	e7f9      	b.n	8003654 <memset+0x4>

08003660 <__libc_init_array>:
 8003660:	b570      	push	{r4, r5, r6, lr}
 8003662:	2600      	movs	r6, #0
 8003664:	4d0c      	ldr	r5, [pc, #48]	@ (8003698 <__libc_init_array+0x38>)
 8003666:	4c0d      	ldr	r4, [pc, #52]	@ (800369c <__libc_init_array+0x3c>)
 8003668:	1b64      	subs	r4, r4, r5
 800366a:	10a4      	asrs	r4, r4, #2
 800366c:	42a6      	cmp	r6, r4
 800366e:	d109      	bne.n	8003684 <__libc_init_array+0x24>
 8003670:	f000 f828 	bl	80036c4 <_init>
 8003674:	2600      	movs	r6, #0
 8003676:	4d0a      	ldr	r5, [pc, #40]	@ (80036a0 <__libc_init_array+0x40>)
 8003678:	4c0a      	ldr	r4, [pc, #40]	@ (80036a4 <__libc_init_array+0x44>)
 800367a:	1b64      	subs	r4, r4, r5
 800367c:	10a4      	asrs	r4, r4, #2
 800367e:	42a6      	cmp	r6, r4
 8003680:	d105      	bne.n	800368e <__libc_init_array+0x2e>
 8003682:	bd70      	pop	{r4, r5, r6, pc}
 8003684:	f855 3b04 	ldr.w	r3, [r5], #4
 8003688:	4798      	blx	r3
 800368a:	3601      	adds	r6, #1
 800368c:	e7ee      	b.n	800366c <__libc_init_array+0xc>
 800368e:	f855 3b04 	ldr.w	r3, [r5], #4
 8003692:	4798      	blx	r3
 8003694:	3601      	adds	r6, #1
 8003696:	e7f2      	b.n	800367e <__libc_init_array+0x1e>
 8003698:	0800370c 	.word	0x0800370c
 800369c:	0800370c 	.word	0x0800370c
 80036a0:	0800370c 	.word	0x0800370c
 80036a4:	08003710 	.word	0x08003710

080036a8 <memcpy>:
 80036a8:	440a      	add	r2, r1
 80036aa:	4291      	cmp	r1, r2
 80036ac:	f100 33ff 	add.w	r3, r0, #4294967295	@ 0xffffffff
 80036b0:	d100      	bne.n	80036b4 <memcpy+0xc>
 80036b2:	4770      	bx	lr
 80036b4:	b510      	push	{r4, lr}
 80036b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80036ba:	4291      	cmp	r1, r2
 80036bc:	f803 4f01 	strb.w	r4, [r3, #1]!
 80036c0:	d1f9      	bne.n	80036b6 <memcpy+0xe>
 80036c2:	bd10      	pop	{r4, pc}

080036c4 <_init>:
 80036c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036c6:	bf00      	nop
 80036c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036ca:	bc08      	pop	{r3}
 80036cc:	469e      	mov	lr, r3
 80036ce:	4770      	bx	lr

080036d0 <_fini>:
 80036d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80036d2:	bf00      	nop
 80036d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80036d6:	bc08      	pop	{r3}
 80036d8:	469e      	mov	lr, r3
 80036da:	4770      	bx	lr
