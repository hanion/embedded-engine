
led_panel.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002b14  0800010c  0800010c  0000110c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000024  08002c20  08002c20  00003c20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002c44  08002c44  0000400c  2**0
                  CONTENTS
  4 .ARM          00000000  08002c44  08002c44  0000400c  2**0
                  CONTENTS
  5 .preinit_array 00000000  08002c44  08002c44  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002c44  08002c44  00003c44  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08002c48  08002c48  00003c48  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002c4c  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000090c  2000000c  08002c58  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000918  08002c58  00004918  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   00009c2c  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018fe  00000000  00000000  0000dc61  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b70  00000000  00000000  0000f560  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008df  00000000  00000000  000100d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001751c  00000000  00000000  000109af  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000b69b  00000000  00000000  00027ecb  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00089b57  00000000  00000000  00033566  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000bd0bd  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002ff4  00000000  00000000  000bd100  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000059  00000000  00000000  000c00f4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800010c <__do_global_dtors_aux>:
 800010c:	b510      	push	{r4, lr}
 800010e:	4c05      	ldr	r4, [pc, #20]	@ (8000124 <__do_global_dtors_aux+0x18>)
 8000110:	7823      	ldrb	r3, [r4, #0]
 8000112:	b933      	cbnz	r3, 8000122 <__do_global_dtors_aux+0x16>
 8000114:	4b04      	ldr	r3, [pc, #16]	@ (8000128 <__do_global_dtors_aux+0x1c>)
 8000116:	b113      	cbz	r3, 800011e <__do_global_dtors_aux+0x12>
 8000118:	4804      	ldr	r0, [pc, #16]	@ (800012c <__do_global_dtors_aux+0x20>)
 800011a:	f3af 8000 	nop.w
 800011e:	2301      	movs	r3, #1
 8000120:	7023      	strb	r3, [r4, #0]
 8000122:	bd10      	pop	{r4, pc}
 8000124:	2000000c 	.word	0x2000000c
 8000128:	00000000 	.word	0x00000000
 800012c:	08002c08 	.word	0x08002c08

08000130 <frame_dummy>:
 8000130:	b508      	push	{r3, lr}
 8000132:	4b03      	ldr	r3, [pc, #12]	@ (8000140 <frame_dummy+0x10>)
 8000134:	b11b      	cbz	r3, 800013e <frame_dummy+0xe>
 8000136:	4903      	ldr	r1, [pc, #12]	@ (8000144 <frame_dummy+0x14>)
 8000138:	4803      	ldr	r0, [pc, #12]	@ (8000148 <frame_dummy+0x18>)
 800013a:	f3af 8000 	nop.w
 800013e:	bd08      	pop	{r3, pc}
 8000140:	00000000 	.word	0x00000000
 8000144:	20000010 	.word	0x20000010
 8000148:	08002c08 	.word	0x08002c08

0800014c <clear_buffer>:

#define WIDTH 64
#define HEIGHT 32
uint8_t buffer[WIDTH][HEIGHT];

void clear_buffer(void) {
 800014c:	b480      	push	{r7}
 800014e:	b083      	sub	sp, #12
 8000150:	af00      	add	r7, sp, #0
    for (int x = 0; x < WIDTH; x++) {
 8000152:	2300      	movs	r3, #0
 8000154:	607b      	str	r3, [r7, #4]
 8000156:	e013      	b.n	8000180 <clear_buffer+0x34>
        for (int y = 0; y < HEIGHT; y++) {
 8000158:	2300      	movs	r3, #0
 800015a:	603b      	str	r3, [r7, #0]
 800015c:	e00a      	b.n	8000174 <clear_buffer+0x28>
            buffer[x][y] = 0;
 800015e:	4a0d      	ldr	r2, [pc, #52]	@ (8000194 <clear_buffer+0x48>)
 8000160:	687b      	ldr	r3, [r7, #4]
 8000162:	015b      	lsls	r3, r3, #5
 8000164:	441a      	add	r2, r3
 8000166:	683b      	ldr	r3, [r7, #0]
 8000168:	4413      	add	r3, r2
 800016a:	2200      	movs	r2, #0
 800016c:	701a      	strb	r2, [r3, #0]
        for (int y = 0; y < HEIGHT; y++) {
 800016e:	683b      	ldr	r3, [r7, #0]
 8000170:	3301      	adds	r3, #1
 8000172:	603b      	str	r3, [r7, #0]
 8000174:	683b      	ldr	r3, [r7, #0]
 8000176:	2b1f      	cmp	r3, #31
 8000178:	ddf1      	ble.n	800015e <clear_buffer+0x12>
    for (int x = 0; x < WIDTH; x++) {
 800017a:	687b      	ldr	r3, [r7, #4]
 800017c:	3301      	adds	r3, #1
 800017e:	607b      	str	r3, [r7, #4]
 8000180:	687b      	ldr	r3, [r7, #4]
 8000182:	2b3f      	cmp	r3, #63	@ 0x3f
 8000184:	dde8      	ble.n	8000158 <clear_buffer+0xc>
        }
    }
}
 8000186:	bf00      	nop
 8000188:	bf00      	nop
 800018a:	370c      	adds	r7, #12
 800018c:	46bd      	mov	sp, r7
 800018e:	bc80      	pop	{r7}
 8000190:	4770      	bx	lr
 8000192:	bf00      	nop
 8000194:	20000110 	.word	0x20000110

08000198 <set_pixel>:

void set_pixel(int x, int y, uint8_t r, uint8_t g, uint8_t b) {
 8000198:	b480      	push	{r7}
 800019a:	b085      	sub	sp, #20
 800019c:	af00      	add	r7, sp, #0
 800019e:	60f8      	str	r0, [r7, #12]
 80001a0:	60b9      	str	r1, [r7, #8]
 80001a2:	4611      	mov	r1, r2
 80001a4:	461a      	mov	r2, r3
 80001a6:	460b      	mov	r3, r1
 80001a8:	71fb      	strb	r3, [r7, #7]
 80001aa:	4613      	mov	r3, r2
 80001ac:	71bb      	strb	r3, [r7, #6]
	r = r ? 1 : 0;
 80001ae:	79fb      	ldrb	r3, [r7, #7]
 80001b0:	2b00      	cmp	r3, #0
 80001b2:	bf14      	ite	ne
 80001b4:	2301      	movne	r3, #1
 80001b6:	2300      	moveq	r3, #0
 80001b8:	b2db      	uxtb	r3, r3
 80001ba:	71fb      	strb	r3, [r7, #7]
    g = g ? 1 : 0;
 80001bc:	79bb      	ldrb	r3, [r7, #6]
 80001be:	2b00      	cmp	r3, #0
 80001c0:	bf14      	ite	ne
 80001c2:	2301      	movne	r3, #1
 80001c4:	2300      	moveq	r3, #0
 80001c6:	b2db      	uxtb	r3, r3
 80001c8:	71bb      	strb	r3, [r7, #6]
    b = b ? 1 : 0;
 80001ca:	7e3b      	ldrb	r3, [r7, #24]
 80001cc:	2b00      	cmp	r3, #0
 80001ce:	bf14      	ite	ne
 80001d0:	2301      	movne	r3, #1
 80001d2:	2300      	moveq	r3, #0
 80001d4:	b2db      	uxtb	r3, r3
 80001d6:	763b      	strb	r3, [r7, #24]
    buffer[x][y] = (r << 2) | (g << 1) | b;
 80001d8:	79fb      	ldrb	r3, [r7, #7]
 80001da:	009b      	lsls	r3, r3, #2
 80001dc:	b25a      	sxtb	r2, r3
 80001de:	79bb      	ldrb	r3, [r7, #6]
 80001e0:	005b      	lsls	r3, r3, #1
 80001e2:	b25b      	sxtb	r3, r3
 80001e4:	4313      	orrs	r3, r2
 80001e6:	b25a      	sxtb	r2, r3
 80001e8:	f997 3018 	ldrsb.w	r3, [r7, #24]
 80001ec:	4313      	orrs	r3, r2
 80001ee:	b25b      	sxtb	r3, r3
 80001f0:	b2d9      	uxtb	r1, r3
 80001f2:	4a06      	ldr	r2, [pc, #24]	@ (800020c <set_pixel+0x74>)
 80001f4:	68fb      	ldr	r3, [r7, #12]
 80001f6:	015b      	lsls	r3, r3, #5
 80001f8:	441a      	add	r2, r3
 80001fa:	68bb      	ldr	r3, [r7, #8]
 80001fc:	4413      	add	r3, r2
 80001fe:	460a      	mov	r2, r1
 8000200:	701a      	strb	r2, [r3, #0]
}
 8000202:	bf00      	nop
 8000204:	3714      	adds	r7, #20
 8000206:	46bd      	mov	sp, r7
 8000208:	bc80      	pop	{r7}
 800020a:	4770      	bx	lr
 800020c:	20000110 	.word	0x20000110

08000210 <get_rgb>:
void get_rgb(uint8_t pixel, uint8_t *r, uint8_t *g, uint8_t *b) {
 8000210:	b480      	push	{r7}
 8000212:	b085      	sub	sp, #20
 8000214:	af00      	add	r7, sp, #0
 8000216:	60b9      	str	r1, [r7, #8]
 8000218:	607a      	str	r2, [r7, #4]
 800021a:	603b      	str	r3, [r7, #0]
 800021c:	4603      	mov	r3, r0
 800021e:	73fb      	strb	r3, [r7, #15]
	*r = (pixel >> 2) & 0x01;
 8000220:	7bfb      	ldrb	r3, [r7, #15]
 8000222:	089b      	lsrs	r3, r3, #2
 8000224:	b2db      	uxtb	r3, r3
 8000226:	f003 0301 	and.w	r3, r3, #1
 800022a:	b2da      	uxtb	r2, r3
 800022c:	68bb      	ldr	r3, [r7, #8]
 800022e:	701a      	strb	r2, [r3, #0]
	*g = (pixel >> 1) & 0x01;
 8000230:	7bfb      	ldrb	r3, [r7, #15]
 8000232:	085b      	lsrs	r3, r3, #1
 8000234:	b2db      	uxtb	r3, r3
 8000236:	f003 0301 	and.w	r3, r3, #1
 800023a:	b2da      	uxtb	r2, r3
 800023c:	687b      	ldr	r3, [r7, #4]
 800023e:	701a      	strb	r2, [r3, #0]
	*b = (pixel     ) & 0x01;
 8000240:	7bfb      	ldrb	r3, [r7, #15]
 8000242:	f003 0301 	and.w	r3, r3, #1
 8000246:	b2da      	uxtb	r2, r3
 8000248:	683b      	ldr	r3, [r7, #0]
 800024a:	701a      	strb	r2, [r3, #0]
}
 800024c:	bf00      	nop
 800024e:	3714      	adds	r7, #20
 8000250:	46bd      	mov	sp, r7
 8000252:	bc80      	pop	{r7}
 8000254:	4770      	bx	lr
	...

08000258 <render_buffer>:


void render_buffer() {
 8000258:	b580      	push	{r7, lr}
 800025a:	b086      	sub	sp, #24
 800025c:	af00      	add	r7, sp, #0
	for (int row = 0; row < 8; ++row) {
 800025e:	2300      	movs	r3, #0
 8000260:	617b      	str	r3, [r7, #20]
 8000262:	e0e2      	b.n	800042a <render_buffer+0x1d2>
		for (int segment = 0; segment < 16; ++segment) {
 8000264:	2300      	movs	r3, #0
 8000266:	613b      	str	r3, [r7, #16]
 8000268:	e08a      	b.n	8000380 <render_buffer+0x128>
			for (int block = 1; block >= 0; --block) {
 800026a:	2301      	movs	r3, #1
 800026c:	60fb      	str	r3, [r7, #12]
 800026e:	e080      	b.n	8000372 <render_buffer+0x11a>
				for (int window = 0; window < 4; ++window) {
 8000270:	2300      	movs	r3, #0
 8000272:	60bb      	str	r3, [r7, #8]
 8000274:	e077      	b.n	8000366 <render_buffer+0x10e>
					uint8_t data_area_1 = buffer[segment*4+window][row+block*8];
 8000276:	693b      	ldr	r3, [r7, #16]
 8000278:	009a      	lsls	r2, r3, #2
 800027a:	68bb      	ldr	r3, [r7, #8]
 800027c:	441a      	add	r2, r3
 800027e:	68fb      	ldr	r3, [r7, #12]
 8000280:	00d9      	lsls	r1, r3, #3
 8000282:	697b      	ldr	r3, [r7, #20]
 8000284:	440b      	add	r3, r1
 8000286:	496d      	ldr	r1, [pc, #436]	@ (800043c <render_buffer+0x1e4>)
 8000288:	0152      	lsls	r2, r2, #5
 800028a:	440a      	add	r2, r1
 800028c:	4413      	add	r3, r2
 800028e:	781b      	ldrb	r3, [r3, #0]
 8000290:	71fb      	strb	r3, [r7, #7]
					uint8_t data_area_2 = buffer[segment*4+window][row+block*8 + 16];
 8000292:	693b      	ldr	r3, [r7, #16]
 8000294:	009a      	lsls	r2, r3, #2
 8000296:	68bb      	ldr	r3, [r7, #8]
 8000298:	441a      	add	r2, r3
 800029a:	68fb      	ldr	r3, [r7, #12]
 800029c:	00d9      	lsls	r1, r3, #3
 800029e:	697b      	ldr	r3, [r7, #20]
 80002a0:	440b      	add	r3, r1
 80002a2:	3310      	adds	r3, #16
 80002a4:	4965      	ldr	r1, [pc, #404]	@ (800043c <render_buffer+0x1e4>)
 80002a6:	0152      	lsls	r2, r2, #5
 80002a8:	440a      	add	r2, r1
 80002aa:	4413      	add	r3, r2
 80002ac:	781b      	ldrb	r3, [r3, #0]
 80002ae:	71bb      	strb	r3, [r7, #6]

					uint8_t r, g, b;

					get_rgb(data_area_1, &r, &g, &b);
 80002b0:	1cfb      	adds	r3, r7, #3
 80002b2:	1d3a      	adds	r2, r7, #4
 80002b4:	1d79      	adds	r1, r7, #5
 80002b6:	79f8      	ldrb	r0, [r7, #7]
 80002b8:	f7ff ffaa 	bl	8000210 <get_rgb>
					R1(r);
 80002bc:	797b      	ldrb	r3, [r7, #5]
 80002be:	2b00      	cmp	r3, #0
 80002c0:	d003      	beq.n	80002ca <render_buffer+0x72>
 80002c2:	4b5f      	ldr	r3, [pc, #380]	@ (8000440 <render_buffer+0x1e8>)
 80002c4:	2220      	movs	r2, #32
 80002c6:	611a      	str	r2, [r3, #16]
 80002c8:	e002      	b.n	80002d0 <render_buffer+0x78>
 80002ca:	4b5d      	ldr	r3, [pc, #372]	@ (8000440 <render_buffer+0x1e8>)
 80002cc:	2220      	movs	r2, #32
 80002ce:	615a      	str	r2, [r3, #20]
					G1(g);
 80002d0:	793b      	ldrb	r3, [r7, #4]
 80002d2:	2b00      	cmp	r3, #0
 80002d4:	d003      	beq.n	80002de <render_buffer+0x86>
 80002d6:	4b5a      	ldr	r3, [pc, #360]	@ (8000440 <render_buffer+0x1e8>)
 80002d8:	2208      	movs	r2, #8
 80002da:	611a      	str	r2, [r3, #16]
 80002dc:	e002      	b.n	80002e4 <render_buffer+0x8c>
 80002de:	4b58      	ldr	r3, [pc, #352]	@ (8000440 <render_buffer+0x1e8>)
 80002e0:	2208      	movs	r2, #8
 80002e2:	615a      	str	r2, [r3, #20]
					B1(b);
 80002e4:	78fb      	ldrb	r3, [r7, #3]
 80002e6:	2b00      	cmp	r3, #0
 80002e8:	d004      	beq.n	80002f4 <render_buffer+0x9c>
 80002ea:	4b56      	ldr	r3, [pc, #344]	@ (8000444 <render_buffer+0x1ec>)
 80002ec:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002f0:	611a      	str	r2, [r3, #16]
 80002f2:	e003      	b.n	80002fc <render_buffer+0xa4>
 80002f4:	4b53      	ldr	r3, [pc, #332]	@ (8000444 <render_buffer+0x1ec>)
 80002f6:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80002fa:	615a      	str	r2, [r3, #20]

					get_rgb(data_area_2, &r, &g, &b);
 80002fc:	1cfb      	adds	r3, r7, #3
 80002fe:	1d3a      	adds	r2, r7, #4
 8000300:	1d79      	adds	r1, r7, #5
 8000302:	79b8      	ldrb	r0, [r7, #6]
 8000304:	f7ff ff84 	bl	8000210 <get_rgb>
					R2(r);
 8000308:	797b      	ldrb	r3, [r7, #5]
 800030a:	2b00      	cmp	r3, #0
 800030c:	d003      	beq.n	8000316 <render_buffer+0xbe>
 800030e:	4b4c      	ldr	r3, [pc, #304]	@ (8000440 <render_buffer+0x1e8>)
 8000310:	2210      	movs	r2, #16
 8000312:	611a      	str	r2, [r3, #16]
 8000314:	e002      	b.n	800031c <render_buffer+0xc4>
 8000316:	4b4a      	ldr	r3, [pc, #296]	@ (8000440 <render_buffer+0x1e8>)
 8000318:	2210      	movs	r2, #16
 800031a:	615a      	str	r2, [r3, #20]
					G2(g);
 800031c:	793b      	ldrb	r3, [r7, #4]
 800031e:	2b00      	cmp	r3, #0
 8000320:	d003      	beq.n	800032a <render_buffer+0xd2>
 8000322:	4b49      	ldr	r3, [pc, #292]	@ (8000448 <render_buffer+0x1f0>)
 8000324:	2204      	movs	r2, #4
 8000326:	611a      	str	r2, [r3, #16]
 8000328:	e002      	b.n	8000330 <render_buffer+0xd8>
 800032a:	4b47      	ldr	r3, [pc, #284]	@ (8000448 <render_buffer+0x1f0>)
 800032c:	2204      	movs	r2, #4
 800032e:	615a      	str	r2, [r3, #20]
					B2(b);
 8000330:	78fb      	ldrb	r3, [r7, #3]
 8000332:	2b00      	cmp	r3, #0
 8000334:	d004      	beq.n	8000340 <render_buffer+0xe8>
 8000336:	4b43      	ldr	r3, [pc, #268]	@ (8000444 <render_buffer+0x1ec>)
 8000338:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 800033c:	611a      	str	r2, [r3, #16]
 800033e:	e003      	b.n	8000348 <render_buffer+0xf0>
 8000340:	4b40      	ldr	r3, [pc, #256]	@ (8000444 <render_buffer+0x1ec>)
 8000342:	f44f 6200 	mov.w	r2, #2048	@ 0x800
 8000346:	615a      	str	r2, [r3, #20]

					CLK_H;
 8000348:	2201      	movs	r2, #1
 800034a:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800034e:	483c      	ldr	r0, [pc, #240]	@ (8000440 <render_buffer+0x1e8>)
 8000350:	f001 f846 	bl	80013e0 <HAL_GPIO_WritePin>
					CLK_L;
 8000354:	2200      	movs	r2, #0
 8000356:	f44f 4180 	mov.w	r1, #16384	@ 0x4000
 800035a:	4839      	ldr	r0, [pc, #228]	@ (8000440 <render_buffer+0x1e8>)
 800035c:	f001 f840 	bl	80013e0 <HAL_GPIO_WritePin>
				for (int window = 0; window < 4; ++window) {
 8000360:	68bb      	ldr	r3, [r7, #8]
 8000362:	3301      	adds	r3, #1
 8000364:	60bb      	str	r3, [r7, #8]
 8000366:	68bb      	ldr	r3, [r7, #8]
 8000368:	2b03      	cmp	r3, #3
 800036a:	dd84      	ble.n	8000276 <render_buffer+0x1e>
			for (int block = 1; block >= 0; --block) {
 800036c:	68fb      	ldr	r3, [r7, #12]
 800036e:	3b01      	subs	r3, #1
 8000370:	60fb      	str	r3, [r7, #12]
 8000372:	68fb      	ldr	r3, [r7, #12]
 8000374:	2b00      	cmp	r3, #0
 8000376:	f6bf af7b 	bge.w	8000270 <render_buffer+0x18>
		for (int segment = 0; segment < 16; ++segment) {
 800037a:	693b      	ldr	r3, [r7, #16]
 800037c:	3301      	adds	r3, #1
 800037e:	613b      	str	r3, [r7, #16]
 8000380:	693b      	ldr	r3, [r7, #16]
 8000382:	2b0f      	cmp	r3, #15
 8000384:	f77f af71 	ble.w	800026a <render_buffer+0x12>
				}
			}
		}

		OE_TIMER_DISABLE;
 8000388:	4b2e      	ldr	r3, [pc, #184]	@ (8000444 <render_buffer+0x1ec>)
 800038a:	681b      	ldr	r3, [r3, #0]
 800038c:	4a2d      	ldr	r2, [pc, #180]	@ (8000444 <render_buffer+0x1ec>)
 800038e:	f023 6340 	bic.w	r3, r3, #201326592	@ 0xc000000
 8000392:	6013      	str	r3, [r2, #0]
		LAT_H;
 8000394:	2201      	movs	r2, #1
 8000396:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 800039a:	4829      	ldr	r0, [pc, #164]	@ (8000440 <render_buffer+0x1e8>)
 800039c:	f001 f820 	bl	80013e0 <HAL_GPIO_WritePin>
		LAT_L;
 80003a0:	2200      	movs	r2, #0
 80003a2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80003a6:	4826      	ldr	r0, [pc, #152]	@ (8000440 <render_buffer+0x1e8>)
 80003a8:	f001 f81a 	bl	80013e0 <HAL_GPIO_WritePin>
		ROW(row);
 80003ac:	697b      	ldr	r3, [r7, #20]
 80003ae:	f003 0301 	and.w	r3, r3, #1
 80003b2:	2b00      	cmp	r3, #0
 80003b4:	d004      	beq.n	80003c0 <render_buffer+0x168>
 80003b6:	4b25      	ldr	r3, [pc, #148]	@ (800044c <render_buffer+0x1f4>)
 80003b8:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003bc:	611a      	str	r2, [r3, #16]
 80003be:	e003      	b.n	80003c8 <render_buffer+0x170>
 80003c0:	4b22      	ldr	r3, [pc, #136]	@ (800044c <render_buffer+0x1f4>)
 80003c2:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003c6:	615a      	str	r2, [r3, #20]
 80003c8:	697b      	ldr	r3, [r7, #20]
 80003ca:	f003 0302 	and.w	r3, r3, #2
 80003ce:	2b00      	cmp	r3, #0
 80003d0:	d004      	beq.n	80003dc <render_buffer+0x184>
 80003d2:	4b1c      	ldr	r3, [pc, #112]	@ (8000444 <render_buffer+0x1ec>)
 80003d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003d8:	611a      	str	r2, [r3, #16]
 80003da:	e003      	b.n	80003e4 <render_buffer+0x18c>
 80003dc:	4b19      	ldr	r3, [pc, #100]	@ (8000444 <render_buffer+0x1ec>)
 80003de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80003e2:	615a      	str	r2, [r3, #20]
 80003e4:	697b      	ldr	r3, [r7, #20]
 80003e6:	f003 0304 	and.w	r3, r3, #4
 80003ea:	2b00      	cmp	r3, #0
 80003ec:	d004      	beq.n	80003f8 <render_buffer+0x1a0>
 80003ee:	4b15      	ldr	r3, [pc, #84]	@ (8000444 <render_buffer+0x1ec>)
 80003f0:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003f4:	611a      	str	r2, [r3, #16]
 80003f6:	e003      	b.n	8000400 <render_buffer+0x1a8>
 80003f8:	4b12      	ldr	r3, [pc, #72]	@ (8000444 <render_buffer+0x1ec>)
 80003fa:	f44f 7280 	mov.w	r2, #256	@ 0x100
 80003fe:	615a      	str	r2, [r3, #20]
 8000400:	697b      	ldr	r3, [r7, #20]
 8000402:	f003 0308 	and.w	r3, r3, #8
 8000406:	2b00      	cmp	r3, #0
 8000408:	d003      	beq.n	8000412 <render_buffer+0x1ba>
 800040a:	4b0e      	ldr	r3, [pc, #56]	@ (8000444 <render_buffer+0x1ec>)
 800040c:	2280      	movs	r2, #128	@ 0x80
 800040e:	611a      	str	r2, [r3, #16]
 8000410:	e002      	b.n	8000418 <render_buffer+0x1c0>
 8000412:	4b0c      	ldr	r3, [pc, #48]	@ (8000444 <render_buffer+0x1ec>)
 8000414:	2280      	movs	r2, #128	@ 0x80
 8000416:	615a      	str	r2, [r3, #20]
		OE_TIMER_ENABLE;
 8000418:	4b0a      	ldr	r3, [pc, #40]	@ (8000444 <render_buffer+0x1ec>)
 800041a:	681b      	ldr	r3, [r3, #0]
 800041c:	4a09      	ldr	r2, [pc, #36]	@ (8000444 <render_buffer+0x1ec>)
 800041e:	f043 6300 	orr.w	r3, r3, #134217728	@ 0x8000000
 8000422:	6013      	str	r3, [r2, #0]
	for (int row = 0; row < 8; ++row) {
 8000424:	697b      	ldr	r3, [r7, #20]
 8000426:	3301      	adds	r3, #1
 8000428:	617b      	str	r3, [r7, #20]
 800042a:	697b      	ldr	r3, [r7, #20]
 800042c:	2b07      	cmp	r3, #7
 800042e:	f77f af19 	ble.w	8000264 <render_buffer+0xc>
	}
}
 8000432:	bf00      	nop
 8000434:	bf00      	nop
 8000436:	3718      	adds	r7, #24
 8000438:	46bd      	mov	sp, r7
 800043a:	bd80      	pop	{r7, pc}
 800043c:	20000110 	.word	0x20000110
 8000440:	40010c00 	.word	0x40010c00
 8000444:	40011000 	.word	0x40011000
 8000448:	40011400 	.word	0x40011400
 800044c:	40010800 	.word	0x40010800

08000450 <scroll_buffer_down>:

void scroll_buffer_down() {
 8000450:	b480      	push	{r7}
 8000452:	b095      	sub	sp, #84	@ 0x54
 8000454:	af00      	add	r7, sp, #0
    uint8_t last_row[WIDTH];
    for (int x = 0; x < WIDTH; ++x) {
 8000456:	2300      	movs	r3, #0
 8000458:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800045a:	e00d      	b.n	8000478 <scroll_buffer_down+0x28>
        last_row[x] = buffer[x][HEIGHT - 1];
 800045c:	4a25      	ldr	r2, [pc, #148]	@ (80004f4 <scroll_buffer_down+0xa4>)
 800045e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000460:	015b      	lsls	r3, r3, #5
 8000462:	4413      	add	r3, r2
 8000464:	331f      	adds	r3, #31
 8000466:	7819      	ldrb	r1, [r3, #0]
 8000468:	463a      	mov	r2, r7
 800046a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800046c:	4413      	add	r3, r2
 800046e:	460a      	mov	r2, r1
 8000470:	701a      	strb	r2, [r3, #0]
    for (int x = 0; x < WIDTH; ++x) {
 8000472:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8000474:	3301      	adds	r3, #1
 8000476:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8000478:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800047a:	2b3f      	cmp	r3, #63	@ 0x3f
 800047c:	ddee      	ble.n	800045c <scroll_buffer_down+0xc>
    }

    for (int y = HEIGHT - 1; y > 0; --y) {
 800047e:	231f      	movs	r3, #31
 8000480:	64bb      	str	r3, [r7, #72]	@ 0x48
 8000482:	e01b      	b.n	80004bc <scroll_buffer_down+0x6c>
        for (int x = 0; x < WIDTH; ++x) {
 8000484:	2300      	movs	r3, #0
 8000486:	647b      	str	r3, [r7, #68]	@ 0x44
 8000488:	e012      	b.n	80004b0 <scroll_buffer_down+0x60>
            buffer[x][y] = buffer[x][y - 1];
 800048a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800048c:	3b01      	subs	r3, #1
 800048e:	4919      	ldr	r1, [pc, #100]	@ (80004f4 <scroll_buffer_down+0xa4>)
 8000490:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8000492:	0152      	lsls	r2, r2, #5
 8000494:	440a      	add	r2, r1
 8000496:	4413      	add	r3, r2
 8000498:	7819      	ldrb	r1, [r3, #0]
 800049a:	4a16      	ldr	r2, [pc, #88]	@ (80004f4 <scroll_buffer_down+0xa4>)
 800049c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800049e:	015b      	lsls	r3, r3, #5
 80004a0:	441a      	add	r2, r3
 80004a2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80004a4:	4413      	add	r3, r2
 80004a6:	460a      	mov	r2, r1
 80004a8:	701a      	strb	r2, [r3, #0]
        for (int x = 0; x < WIDTH; ++x) {
 80004aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004ac:	3301      	adds	r3, #1
 80004ae:	647b      	str	r3, [r7, #68]	@ 0x44
 80004b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80004b2:	2b3f      	cmp	r3, #63	@ 0x3f
 80004b4:	dde9      	ble.n	800048a <scroll_buffer_down+0x3a>
    for (int y = HEIGHT - 1; y > 0; --y) {
 80004b6:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80004b8:	3b01      	subs	r3, #1
 80004ba:	64bb      	str	r3, [r7, #72]	@ 0x48
 80004bc:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80004be:	2b00      	cmp	r3, #0
 80004c0:	dce0      	bgt.n	8000484 <scroll_buffer_down+0x34>
        }
    }

    for (int x = 0; x < WIDTH; ++x) {
 80004c2:	2300      	movs	r3, #0
 80004c4:	643b      	str	r3, [r7, #64]	@ 0x40
 80004c6:	e00c      	b.n	80004e2 <scroll_buffer_down+0x92>
        buffer[x][0] = last_row[x];
 80004c8:	463a      	mov	r2, r7
 80004ca:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004cc:	4413      	add	r3, r2
 80004ce:	7819      	ldrb	r1, [r3, #0]
 80004d0:	4a08      	ldr	r2, [pc, #32]	@ (80004f4 <scroll_buffer_down+0xa4>)
 80004d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004d4:	015b      	lsls	r3, r3, #5
 80004d6:	4413      	add	r3, r2
 80004d8:	460a      	mov	r2, r1
 80004da:	701a      	strb	r2, [r3, #0]
    for (int x = 0; x < WIDTH; ++x) {
 80004dc:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004de:	3301      	adds	r3, #1
 80004e0:	643b      	str	r3, [r7, #64]	@ 0x40
 80004e2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80004e4:	2b3f      	cmp	r3, #63	@ 0x3f
 80004e6:	ddef      	ble.n	80004c8 <scroll_buffer_down+0x78>
    }
}
 80004e8:	bf00      	nop
 80004ea:	bf00      	nop
 80004ec:	3754      	adds	r7, #84	@ 0x54
 80004ee:	46bd      	mov	sp, r7
 80004f0:	bc80      	pop	{r7}
 80004f2:	4770      	bx	lr
 80004f4:	20000110 	.word	0x20000110

080004f8 <scroll_buffer_left>:
void scroll_buffer_left() {
 80004f8:	b480      	push	{r7}
 80004fa:	b08d      	sub	sp, #52	@ 0x34
 80004fc:	af00      	add	r7, sp, #0
	uint8_t first_column[HEIGHT];
	for (int y = 0; y < HEIGHT; ++y) {
 80004fe:	2300      	movs	r3, #0
 8000500:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8000502:	e00b      	b.n	800051c <scroll_buffer_left+0x24>
		first_column[y] = buffer[0][y];
 8000504:	4a25      	ldr	r2, [pc, #148]	@ (800059c <scroll_buffer_left+0xa4>)
 8000506:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000508:	4413      	add	r3, r2
 800050a:	7819      	ldrb	r1, [r3, #0]
 800050c:	463a      	mov	r2, r7
 800050e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000510:	4413      	add	r3, r2
 8000512:	460a      	mov	r2, r1
 8000514:	701a      	strb	r2, [r3, #0]
	for (int y = 0; y < HEIGHT; ++y) {
 8000516:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8000518:	3301      	adds	r3, #1
 800051a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 800051c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800051e:	2b1f      	cmp	r3, #31
 8000520:	ddf0      	ble.n	8000504 <scroll_buffer_left+0xc>
	}

	for (int x = 0; x < WIDTH - 1; ++x) {
 8000522:	2300      	movs	r3, #0
 8000524:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000526:	e01b      	b.n	8000560 <scroll_buffer_left+0x68>
		for (int y = 0; y < HEIGHT; ++y) {
 8000528:	2300      	movs	r3, #0
 800052a:	627b      	str	r3, [r7, #36]	@ 0x24
 800052c:	e012      	b.n	8000554 <scroll_buffer_left+0x5c>
			buffer[x][y] = buffer[x + 1][y];
 800052e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000530:	3301      	adds	r3, #1
 8000532:	4a1a      	ldr	r2, [pc, #104]	@ (800059c <scroll_buffer_left+0xa4>)
 8000534:	015b      	lsls	r3, r3, #5
 8000536:	441a      	add	r2, r3
 8000538:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800053a:	4413      	add	r3, r2
 800053c:	7819      	ldrb	r1, [r3, #0]
 800053e:	4a17      	ldr	r2, [pc, #92]	@ (800059c <scroll_buffer_left+0xa4>)
 8000540:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000542:	015b      	lsls	r3, r3, #5
 8000544:	441a      	add	r2, r3
 8000546:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000548:	4413      	add	r3, r2
 800054a:	460a      	mov	r2, r1
 800054c:	701a      	strb	r2, [r3, #0]
		for (int y = 0; y < HEIGHT; ++y) {
 800054e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000550:	3301      	adds	r3, #1
 8000552:	627b      	str	r3, [r7, #36]	@ 0x24
 8000554:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8000556:	2b1f      	cmp	r3, #31
 8000558:	dde9      	ble.n	800052e <scroll_buffer_left+0x36>
	for (int x = 0; x < WIDTH - 1; ++x) {
 800055a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800055c:	3301      	adds	r3, #1
 800055e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000560:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000562:	2b3e      	cmp	r3, #62	@ 0x3e
 8000564:	dde0      	ble.n	8000528 <scroll_buffer_left+0x30>
		}
	}

	for (int y = 0; y < HEIGHT; ++y) {
 8000566:	2300      	movs	r3, #0
 8000568:	623b      	str	r3, [r7, #32]
 800056a:	e00d      	b.n	8000588 <scroll_buffer_left+0x90>
		buffer[WIDTH - 1][y] = first_column[y];
 800056c:	463a      	mov	r2, r7
 800056e:	6a3b      	ldr	r3, [r7, #32]
 8000570:	4413      	add	r3, r2
 8000572:	7819      	ldrb	r1, [r3, #0]
 8000574:	4a09      	ldr	r2, [pc, #36]	@ (800059c <scroll_buffer_left+0xa4>)
 8000576:	6a3b      	ldr	r3, [r7, #32]
 8000578:	4413      	add	r3, r2
 800057a:	f503 63fc 	add.w	r3, r3, #2016	@ 0x7e0
 800057e:	460a      	mov	r2, r1
 8000580:	701a      	strb	r2, [r3, #0]
	for (int y = 0; y < HEIGHT; ++y) {
 8000582:	6a3b      	ldr	r3, [r7, #32]
 8000584:	3301      	adds	r3, #1
 8000586:	623b      	str	r3, [r7, #32]
 8000588:	6a3b      	ldr	r3, [r7, #32]
 800058a:	2b1f      	cmp	r3, #31
 800058c:	ddee      	ble.n	800056c <scroll_buffer_left+0x74>
	}
}
 800058e:	bf00      	nop
 8000590:	bf00      	nop
 8000592:	3734      	adds	r7, #52	@ 0x34
 8000594:	46bd      	mov	sp, r7
 8000596:	bc80      	pop	{r7}
 8000598:	4770      	bx	lr
 800059a:	bf00      	nop
 800059c:	20000110 	.word	0x20000110

080005a0 <get_delta_time>:


uint32_t last_tick_time = 0;
uint32_t get_delta_time() {
 80005a0:	b580      	push	{r7, lr}
 80005a2:	b082      	sub	sp, #8
 80005a4:	af00      	add	r7, sp, #0
    uint32_t current_time = HAL_GetTick();
 80005a6:	f000 fc7f 	bl	8000ea8 <HAL_GetTick>
 80005aa:	6078      	str	r0, [r7, #4]
    uint32_t delta_time = current_time - last_tick_time;
 80005ac:	4b06      	ldr	r3, [pc, #24]	@ (80005c8 <get_delta_time+0x28>)
 80005ae:	681b      	ldr	r3, [r3, #0]
 80005b0:	687a      	ldr	r2, [r7, #4]
 80005b2:	1ad3      	subs	r3, r2, r3
 80005b4:	603b      	str	r3, [r7, #0]
    last_tick_time = current_time;
 80005b6:	4a04      	ldr	r2, [pc, #16]	@ (80005c8 <get_delta_time+0x28>)
 80005b8:	687b      	ldr	r3, [r7, #4]
 80005ba:	6013      	str	r3, [r2, #0]
    return delta_time;
 80005bc:	683b      	ldr	r3, [r7, #0]
}
 80005be:	4618      	mov	r0, r3
 80005c0:	3708      	adds	r7, #8
 80005c2:	46bd      	mov	sp, r7
 80005c4:	bd80      	pop	{r7, pc}
 80005c6:	bf00      	nop
 80005c8:	20000910 	.word	0x20000910

080005cc <generate_rainbow>:

void generate_rainbow() {
 80005cc:	b580      	push	{r7, lr}
 80005ce:	b086      	sub	sp, #24
 80005d0:	af02      	add	r7, sp, #8
    for (int y = 0; y < HEIGHT; ++y) {
 80005d2:	2300      	movs	r3, #0
 80005d4:	60fb      	str	r3, [r7, #12]
 80005d6:	e061      	b.n	800069c <generate_rainbow+0xd0>
        for (int x = 0; x < WIDTH; ++x) {
 80005d8:	2300      	movs	r3, #0
 80005da:	60bb      	str	r3, [r7, #8]
 80005dc:	e058      	b.n	8000690 <generate_rainbow+0xc4>
            uint8_t color = (x * 6) / WIDTH; // Create a value that cycles through 0 to 5
 80005de:	68ba      	ldr	r2, [r7, #8]
 80005e0:	4613      	mov	r3, r2
 80005e2:	005b      	lsls	r3, r3, #1
 80005e4:	4413      	add	r3, r2
 80005e6:	005b      	lsls	r3, r3, #1
 80005e8:	2b00      	cmp	r3, #0
 80005ea:	da00      	bge.n	80005ee <generate_rainbow+0x22>
 80005ec:	333f      	adds	r3, #63	@ 0x3f
 80005ee:	119b      	asrs	r3, r3, #6
 80005f0:	713b      	strb	r3, [r7, #4]
            uint8_t r = 0, g = 0, b = 0;
 80005f2:	2300      	movs	r3, #0
 80005f4:	71fb      	strb	r3, [r7, #7]
 80005f6:	2300      	movs	r3, #0
 80005f8:	71bb      	strb	r3, [r7, #6]
 80005fa:	2300      	movs	r3, #0
 80005fc:	717b      	strb	r3, [r7, #5]

            switch (color) {
 80005fe:	793b      	ldrb	r3, [r7, #4]
 8000600:	2b05      	cmp	r3, #5
 8000602:	d839      	bhi.n	8000678 <generate_rainbow+0xac>
 8000604:	a201      	add	r2, pc, #4	@ (adr r2, 800060c <generate_rainbow+0x40>)
 8000606:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800060a:	bf00      	nop
 800060c:	08000625 	.word	0x08000625
 8000610:	08000633 	.word	0x08000633
 8000614:	08000641 	.word	0x08000641
 8000618:	0800064f 	.word	0x0800064f
 800061c:	0800065d 	.word	0x0800065d
 8000620:	0800066b 	.word	0x0800066b
                case 0: // Red
                    r = 1;
 8000624:	2301      	movs	r3, #1
 8000626:	71fb      	strb	r3, [r7, #7]
                    g = 0;
 8000628:	2300      	movs	r3, #0
 800062a:	71bb      	strb	r3, [r7, #6]
                    b = 0;
 800062c:	2300      	movs	r3, #0
 800062e:	717b      	strb	r3, [r7, #5]
                    break;
 8000630:	e022      	b.n	8000678 <generate_rainbow+0xac>
                case 1: // Yellow
                    r = 1;
 8000632:	2301      	movs	r3, #1
 8000634:	71fb      	strb	r3, [r7, #7]
                    g = 1;
 8000636:	2301      	movs	r3, #1
 8000638:	71bb      	strb	r3, [r7, #6]
                    b = 0;
 800063a:	2300      	movs	r3, #0
 800063c:	717b      	strb	r3, [r7, #5]
                    break;
 800063e:	e01b      	b.n	8000678 <generate_rainbow+0xac>
                case 2: // Green
                    r = 0;
 8000640:	2300      	movs	r3, #0
 8000642:	71fb      	strb	r3, [r7, #7]
                    g = 1;
 8000644:	2301      	movs	r3, #1
 8000646:	71bb      	strb	r3, [r7, #6]
                    b = 0;
 8000648:	2300      	movs	r3, #0
 800064a:	717b      	strb	r3, [r7, #5]
                    break;
 800064c:	e014      	b.n	8000678 <generate_rainbow+0xac>
                case 3: // Cyan
                    r = 0;
 800064e:	2300      	movs	r3, #0
 8000650:	71fb      	strb	r3, [r7, #7]
                    g = 1;
 8000652:	2301      	movs	r3, #1
 8000654:	71bb      	strb	r3, [r7, #6]
                    b = 1;
 8000656:	2301      	movs	r3, #1
 8000658:	717b      	strb	r3, [r7, #5]
                    break;
 800065a:	e00d      	b.n	8000678 <generate_rainbow+0xac>
                case 4: // Blue
                    r = 0;
 800065c:	2300      	movs	r3, #0
 800065e:	71fb      	strb	r3, [r7, #7]
                    g = 0;
 8000660:	2300      	movs	r3, #0
 8000662:	71bb      	strb	r3, [r7, #6]
                    b = 1;
 8000664:	2301      	movs	r3, #1
 8000666:	717b      	strb	r3, [r7, #5]
                    break;
 8000668:	e006      	b.n	8000678 <generate_rainbow+0xac>
                case 5: // Magenta
                    r = 1;
 800066a:	2301      	movs	r3, #1
 800066c:	71fb      	strb	r3, [r7, #7]
                    g = 0;
 800066e:	2300      	movs	r3, #0
 8000670:	71bb      	strb	r3, [r7, #6]
                    b = 1;
 8000672:	2301      	movs	r3, #1
 8000674:	717b      	strb	r3, [r7, #5]
                    break;
 8000676:	bf00      	nop
            }

            set_pixel(x, y, r, g, b);
 8000678:	79b9      	ldrb	r1, [r7, #6]
 800067a:	79fa      	ldrb	r2, [r7, #7]
 800067c:	797b      	ldrb	r3, [r7, #5]
 800067e:	9300      	str	r3, [sp, #0]
 8000680:	460b      	mov	r3, r1
 8000682:	68f9      	ldr	r1, [r7, #12]
 8000684:	68b8      	ldr	r0, [r7, #8]
 8000686:	f7ff fd87 	bl	8000198 <set_pixel>
        for (int x = 0; x < WIDTH; ++x) {
 800068a:	68bb      	ldr	r3, [r7, #8]
 800068c:	3301      	adds	r3, #1
 800068e:	60bb      	str	r3, [r7, #8]
 8000690:	68bb      	ldr	r3, [r7, #8]
 8000692:	2b3f      	cmp	r3, #63	@ 0x3f
 8000694:	dda3      	ble.n	80005de <generate_rainbow+0x12>
    for (int y = 0; y < HEIGHT; ++y) {
 8000696:	68fb      	ldr	r3, [r7, #12]
 8000698:	3301      	adds	r3, #1
 800069a:	60fb      	str	r3, [r7, #12]
 800069c:	68fb      	ldr	r3, [r7, #12]
 800069e:	2b1f      	cmp	r3, #31
 80006a0:	dd9a      	ble.n	80005d8 <generate_rainbow+0xc>
        }
    }
}
 80006a2:	bf00      	nop
 80006a4:	bf00      	nop
 80006a6:	3710      	adds	r7, #16
 80006a8:	46bd      	mov	sp, r7
 80006aa:	bd80      	pop	{r7, pc}

080006ac <on_ready>:
void on_ready() {
 80006ac:	b580      	push	{r7, lr}
 80006ae:	b084      	sub	sp, #16
 80006b0:	af02      	add	r7, sp, #8
	clear_buffer();
 80006b2:	f7ff fd4b 	bl	800014c <clear_buffer>
				set_pixel(x, y, (x%2==1));
			}
		}
	}
	*/
	generate_rainbow();
 80006b6:	f7ff ff89 	bl	80005cc <generate_rainbow>
	int xoffset = 0;
 80006ba:	2300      	movs	r3, #0
 80006bc:	607b      	str	r3, [r7, #4]
	for (int y = 0; y < 32; ++y) {
 80006be:	2300      	movs	r3, #0
 80006c0:	603b      	str	r3, [r7, #0]
 80006c2:	e016      	b.n	80006f2 <on_ready+0x46>
		set_pixel(xoffset++, y, 1,1,1);
 80006c4:	6878      	ldr	r0, [r7, #4]
 80006c6:	1c43      	adds	r3, r0, #1
 80006c8:	607b      	str	r3, [r7, #4]
 80006ca:	2301      	movs	r3, #1
 80006cc:	9300      	str	r3, [sp, #0]
 80006ce:	2301      	movs	r3, #1
 80006d0:	2201      	movs	r2, #1
 80006d2:	6839      	ldr	r1, [r7, #0]
 80006d4:	f7ff fd60 	bl	8000198 <set_pixel>
		set_pixel(xoffset++, y, 1,1,1);
 80006d8:	6878      	ldr	r0, [r7, #4]
 80006da:	1c43      	adds	r3, r0, #1
 80006dc:	607b      	str	r3, [r7, #4]
 80006de:	2301      	movs	r3, #1
 80006e0:	9300      	str	r3, [sp, #0]
 80006e2:	2301      	movs	r3, #1
 80006e4:	2201      	movs	r2, #1
 80006e6:	6839      	ldr	r1, [r7, #0]
 80006e8:	f7ff fd56 	bl	8000198 <set_pixel>
	for (int y = 0; y < 32; ++y) {
 80006ec:	683b      	ldr	r3, [r7, #0]
 80006ee:	3301      	adds	r3, #1
 80006f0:	603b      	str	r3, [r7, #0]
 80006f2:	683b      	ldr	r3, [r7, #0]
 80006f4:	2b1f      	cmp	r3, #31
 80006f6:	dde5      	ble.n	80006c4 <on_ready+0x18>
	}
	//memset(buffer, 7, sizeof(buffer));
}
 80006f8:	bf00      	nop
 80006fa:	bf00      	nop
 80006fc:	3708      	adds	r7, #8
 80006fe:	46bd      	mov	sp, r7
 8000700:	bd80      	pop	{r7, pc}

08000702 <on_update>:

void on_update() {
 8000702:	b580      	push	{r7, lr}
 8000704:	af00      	add	r7, sp, #0
	scroll_buffer_down();
 8000706:	f7ff fea3 	bl	8000450 <scroll_buffer_down>
	scroll_buffer_left();
 800070a:	f7ff fef5 	bl	80004f8 <scroll_buffer_left>
}
 800070e:	bf00      	nop
 8000710:	bd80      	pop	{r7, pc}
	...

08000714 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000714:	b580      	push	{r7, lr}
 8000716:	b082      	sub	sp, #8
 8000718:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800071a:	f000 fb6d 	bl	8000df8 <HAL_Init>

  /* USER CODE BEGIN Init */
  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800071e:	f000 f831 	bl	8000784 <SystemClock_Config>

  /* USER CODE BEGIN SysInit */
  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000722:	f000 f969 	bl	80009f8 <MX_GPIO_Init>
  MX_SPI1_Init();
 8000726:	f000 f86f 	bl	8000808 <MX_SPI1_Init>
  MX_TIM2_Init();
 800072a:	f000 f8a3 	bl	8000874 <MX_TIM2_Init>
  MX_TIM3_Init();
 800072e:	f000 f8ed 	bl	800090c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	HAL_TIM_Base_Start_IT(&htim2);
 8000732:	4811      	ldr	r0, [pc, #68]	@ (8000778 <main+0x64>)
 8000734:	f001 fb1e 	bl	8001d74 <HAL_TIM_Base_Start_IT>
	HAL_TIM_Base_Start_IT(&htim3);
 8000738:	4810      	ldr	r0, [pc, #64]	@ (800077c <main+0x68>)
 800073a:	f001 fb1b 	bl	8001d74 <HAL_TIM_Base_Start_IT>
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 800073e:	2100      	movs	r1, #0
 8000740:	480e      	ldr	r0, [pc, #56]	@ (800077c <main+0x68>)
 8000742:	f001 fbc1 	bl	8001ec8 <HAL_TIM_PWM_Start>
	OE_H;
 8000746:	2201      	movs	r2, #1
 8000748:	2140      	movs	r1, #64	@ 0x40
 800074a:	480d      	ldr	r0, [pc, #52]	@ (8000780 <main+0x6c>)
 800074c:	f000 fe48 	bl	80013e0 <HAL_GPIO_WritePin>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */

	on_ready();
 8000750:	f7ff ffac 	bl	80006ac <on_ready>

	int accum = 0;
 8000754:	2300      	movs	r3, #0
 8000756:	607b      	str	r3, [r7, #4]
	while (1) {
		accum += get_delta_time();
 8000758:	f7ff ff22 	bl	80005a0 <get_delta_time>
 800075c:	4602      	mov	r2, r0
 800075e:	687b      	ldr	r3, [r7, #4]
 8000760:	4413      	add	r3, r2
 8000762:	607b      	str	r3, [r7, #4]
		if (accum >= 50) {
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	2b31      	cmp	r3, #49	@ 0x31
 8000768:	dd03      	ble.n	8000772 <main+0x5e>
			accum = 0;
 800076a:	2300      	movs	r3, #0
 800076c:	607b      	str	r3, [r7, #4]
			on_update();
 800076e:	f7ff ffc8 	bl	8000702 <on_update>
		}
		render_buffer();
 8000772:	f7ff fd71 	bl	8000258 <render_buffer>
		accum += get_delta_time();
 8000776:	e7ef      	b.n	8000758 <main+0x44>
 8000778:	20000080 	.word	0x20000080
 800077c:	200000c8 	.word	0x200000c8
 8000780:	40011000 	.word	0x40011000

08000784 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	b090      	sub	sp, #64	@ 0x40
 8000788:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800078a:	f107 0318 	add.w	r3, r7, #24
 800078e:	2228      	movs	r2, #40	@ 0x28
 8000790:	2100      	movs	r1, #0
 8000792:	4618      	mov	r0, r3
 8000794:	f002 fa0c 	bl	8002bb0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000798:	1d3b      	adds	r3, r7, #4
 800079a:	2200      	movs	r2, #0
 800079c:	601a      	str	r2, [r3, #0]
 800079e:	605a      	str	r2, [r3, #4]
 80007a0:	609a      	str	r2, [r3, #8]
 80007a2:	60da      	str	r2, [r3, #12]
 80007a4:	611a      	str	r2, [r3, #16]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80007a6:	2302      	movs	r3, #2
 80007a8:	61bb      	str	r3, [r7, #24]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80007aa:	2301      	movs	r3, #1
 80007ac:	62bb      	str	r3, [r7, #40]	@ 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80007ae:	2310      	movs	r3, #16
 80007b0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80007b2:	2302      	movs	r3, #2
 80007b4:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI_DIV2;
 80007b6:	2300      	movs	r3, #0
 80007b8:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL16;
 80007ba:	f44f 1360 	mov.w	r3, #3670016	@ 0x380000
 80007be:	63fb      	str	r3, [r7, #60]	@ 0x3c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80007c0:	f107 0318 	add.w	r3, r7, #24
 80007c4:	4618      	mov	r0, r3
 80007c6:	f000 fe23 	bl	8001410 <HAL_RCC_OscConfig>
 80007ca:	4603      	mov	r3, r0
 80007cc:	2b00      	cmp	r3, #0
 80007ce:	d001      	beq.n	80007d4 <SystemClock_Config+0x50>
  {
    Error_Handler();
 80007d0:	f000 f9bc 	bl	8000b4c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80007d4:	230f      	movs	r3, #15
 80007d6:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80007d8:	2302      	movs	r3, #2
 80007da:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80007dc:	2300      	movs	r3, #0
 80007de:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80007e0:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80007e4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80007e6:	2300      	movs	r3, #0
 80007e8:	617b      	str	r3, [r7, #20]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 80007ea:	1d3b      	adds	r3, r7, #4
 80007ec:	2102      	movs	r1, #2
 80007ee:	4618      	mov	r0, r3
 80007f0:	f001 f890 	bl	8001914 <HAL_RCC_ClockConfig>
 80007f4:	4603      	mov	r3, r0
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d001      	beq.n	80007fe <SystemClock_Config+0x7a>
  {
    Error_Handler();
 80007fa:	f000 f9a7 	bl	8000b4c <Error_Handler>
  }
}
 80007fe:	bf00      	nop
 8000800:	3740      	adds	r7, #64	@ 0x40
 8000802:	46bd      	mov	sp, r7
 8000804:	bd80      	pop	{r7, pc}
	...

08000808 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8000808:	b580      	push	{r7, lr}
 800080a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 800080c:	4b17      	ldr	r3, [pc, #92]	@ (800086c <MX_SPI1_Init+0x64>)
 800080e:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <MX_SPI1_Init+0x68>)
 8000810:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8000812:	4b16      	ldr	r3, [pc, #88]	@ (800086c <MX_SPI1_Init+0x64>)
 8000814:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8000818:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 800081a:	4b14      	ldr	r3, [pc, #80]	@ (800086c <MX_SPI1_Init+0x64>)
 800081c:	2200      	movs	r2, #0
 800081e:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8000820:	4b12      	ldr	r3, [pc, #72]	@ (800086c <MX_SPI1_Init+0x64>)
 8000822:	2200      	movs	r2, #0
 8000824:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8000826:	4b11      	ldr	r3, [pc, #68]	@ (800086c <MX_SPI1_Init+0x64>)
 8000828:	2200      	movs	r2, #0
 800082a:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 800082c:	4b0f      	ldr	r3, [pc, #60]	@ (800086c <MX_SPI1_Init+0x64>)
 800082e:	2200      	movs	r2, #0
 8000830:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8000832:	4b0e      	ldr	r3, [pc, #56]	@ (800086c <MX_SPI1_Init+0x64>)
 8000834:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8000838:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800083a:	4b0c      	ldr	r3, [pc, #48]	@ (800086c <MX_SPI1_Init+0x64>)
 800083c:	2210      	movs	r2, #16
 800083e:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8000840:	4b0a      	ldr	r3, [pc, #40]	@ (800086c <MX_SPI1_Init+0x64>)
 8000842:	2200      	movs	r2, #0
 8000844:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8000846:	4b09      	ldr	r3, [pc, #36]	@ (800086c <MX_SPI1_Init+0x64>)
 8000848:	2200      	movs	r2, #0
 800084a:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800084c:	4b07      	ldr	r3, [pc, #28]	@ (800086c <MX_SPI1_Init+0x64>)
 800084e:	2200      	movs	r2, #0
 8000850:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8000852:	4b06      	ldr	r3, [pc, #24]	@ (800086c <MX_SPI1_Init+0x64>)
 8000854:	220a      	movs	r2, #10
 8000856:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8000858:	4804      	ldr	r0, [pc, #16]	@ (800086c <MX_SPI1_Init+0x64>)
 800085a:	f001 f9b7 	bl	8001bcc <HAL_SPI_Init>
 800085e:	4603      	mov	r3, r0
 8000860:	2b00      	cmp	r3, #0
 8000862:	d001      	beq.n	8000868 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8000864:	f000 f972 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}
 800086c:	20000028 	.word	0x20000028
 8000870:	40013000 	.word	0x40013000

08000874 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000874:	b580      	push	{r7, lr}
 8000876:	b086      	sub	sp, #24
 8000878:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800087a:	f107 0308 	add.w	r3, r7, #8
 800087e:	2200      	movs	r2, #0
 8000880:	601a      	str	r2, [r3, #0]
 8000882:	605a      	str	r2, [r3, #4]
 8000884:	609a      	str	r2, [r3, #8]
 8000886:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000888:	463b      	mov	r3, r7
 800088a:	2200      	movs	r2, #0
 800088c:	601a      	str	r2, [r3, #0]
 800088e:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8000890:	4b1d      	ldr	r3, [pc, #116]	@ (8000908 <MX_TIM2_Init+0x94>)
 8000892:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000896:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 799;
 8000898:	4b1b      	ldr	r3, [pc, #108]	@ (8000908 <MX_TIM2_Init+0x94>)
 800089a:	f240 321f 	movw	r2, #799	@ 0x31f
 800089e:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80008a0:	4b19      	ldr	r3, [pc, #100]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008a2:	2200      	movs	r2, #0
 80008a4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 9;
 80008a6:	4b18      	ldr	r3, [pc, #96]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008a8:	2209      	movs	r2, #9
 80008aa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80008ac:	4b16      	ldr	r3, [pc, #88]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008ae:	2200      	movs	r2, #0
 80008b0:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80008b2:	4b15      	ldr	r3, [pc, #84]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008b4:	2200      	movs	r2, #0
 80008b6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80008b8:	4813      	ldr	r0, [pc, #76]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008ba:	f001 fa0b 	bl	8001cd4 <HAL_TIM_Base_Init>
 80008be:	4603      	mov	r3, r0
 80008c0:	2b00      	cmp	r3, #0
 80008c2:	d001      	beq.n	80008c8 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80008c4:	f000 f942 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80008c8:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 80008cc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80008ce:	f107 0308 	add.w	r3, r7, #8
 80008d2:	4619      	mov	r1, r3
 80008d4:	480c      	ldr	r0, [pc, #48]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008d6:	f001 fd63 	bl	80023a0 <HAL_TIM_ConfigClockSource>
 80008da:	4603      	mov	r3, r0
 80008dc:	2b00      	cmp	r3, #0
 80008de:	d001      	beq.n	80008e4 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80008e0:	f000 f934 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80008e4:	2300      	movs	r3, #0
 80008e6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80008e8:	2300      	movs	r3, #0
 80008ea:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80008ec:	463b      	mov	r3, r7
 80008ee:	4619      	mov	r1, r3
 80008f0:	4805      	ldr	r0, [pc, #20]	@ (8000908 <MX_TIM2_Init+0x94>)
 80008f2:	f002 f8ed 	bl	8002ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d001      	beq.n	8000900 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80008fc:	f000 f926 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8000900:	bf00      	nop
 8000902:	3718      	adds	r7, #24
 8000904:	46bd      	mov	sp, r7
 8000906:	bd80      	pop	{r7, pc}
 8000908:	20000080 	.word	0x20000080

0800090c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800090c:	b580      	push	{r7, lr}
 800090e:	b08e      	sub	sp, #56	@ 0x38
 8000910:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000912:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 8000916:	2200      	movs	r2, #0
 8000918:	601a      	str	r2, [r3, #0]
 800091a:	605a      	str	r2, [r3, #4]
 800091c:	609a      	str	r2, [r3, #8]
 800091e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000920:	f107 0320 	add.w	r3, r7, #32
 8000924:	2200      	movs	r2, #0
 8000926:	601a      	str	r2, [r3, #0]
 8000928:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800092a:	1d3b      	adds	r3, r7, #4
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
 8000938:	615a      	str	r2, [r3, #20]
 800093a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800093c:	4b2c      	ldr	r3, [pc, #176]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 800093e:	4a2d      	ldr	r2, [pc, #180]	@ (80009f4 <MX_TIM3_Init+0xe8>)
 8000940:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 63;
 8000942:	4b2b      	ldr	r3, [pc, #172]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 8000944:	223f      	movs	r2, #63	@ 0x3f
 8000946:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000948:	4b29      	ldr	r3, [pc, #164]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 99;
 800094e:	4b28      	ldr	r3, [pc, #160]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 8000950:	2263      	movs	r2, #99	@ 0x63
 8000952:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8000954:	4b26      	ldr	r3, [pc, #152]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 8000956:	2200      	movs	r2, #0
 8000958:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800095a:	4b25      	ldr	r3, [pc, #148]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 800095c:	2200      	movs	r2, #0
 800095e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8000960:	4823      	ldr	r0, [pc, #140]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 8000962:	f001 f9b7 	bl	8001cd4 <HAL_TIM_Base_Init>
 8000966:	4603      	mov	r3, r0
 8000968:	2b00      	cmp	r3, #0
 800096a:	d001      	beq.n	8000970 <MX_TIM3_Init+0x64>
  {
    Error_Handler();
 800096c:	f000 f8ee 	bl	8000b4c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000970:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8000974:	62bb      	str	r3, [r7, #40]	@ 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8000976:	f107 0328 	add.w	r3, r7, #40	@ 0x28
 800097a:	4619      	mov	r1, r3
 800097c:	481c      	ldr	r0, [pc, #112]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 800097e:	f001 fd0f 	bl	80023a0 <HAL_TIM_ConfigClockSource>
 8000982:	4603      	mov	r3, r0
 8000984:	2b00      	cmp	r3, #0
 8000986:	d001      	beq.n	800098c <MX_TIM3_Init+0x80>
  {
    Error_Handler();
 8000988:	f000 f8e0 	bl	8000b4c <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800098c:	4818      	ldr	r0, [pc, #96]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 800098e:	f001 fa43 	bl	8001e18 <HAL_TIM_PWM_Init>
 8000992:	4603      	mov	r3, r0
 8000994:	2b00      	cmp	r3, #0
 8000996:	d001      	beq.n	800099c <MX_TIM3_Init+0x90>
  {
    Error_Handler();
 8000998:	f000 f8d8 	bl	8000b4c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800099c:	2300      	movs	r3, #0
 800099e:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80009a0:	2300      	movs	r3, #0
 80009a2:	627b      	str	r3, [r7, #36]	@ 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80009a4:	f107 0320 	add.w	r3, r7, #32
 80009a8:	4619      	mov	r1, r3
 80009aa:	4811      	ldr	r0, [pc, #68]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 80009ac:	f002 f890 	bl	8002ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80009b0:	4603      	mov	r3, r0
 80009b2:	2b00      	cmp	r3, #0
 80009b4:	d001      	beq.n	80009ba <MX_TIM3_Init+0xae>
  {
    Error_Handler();
 80009b6:	f000 f8c9 	bl	8000b4c <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80009ba:	2360      	movs	r3, #96	@ 0x60
 80009bc:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 10;
 80009be:	230a      	movs	r3, #10
 80009c0:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_LOW;
 80009c2:	2302      	movs	r3, #2
 80009c4:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80009c6:	2300      	movs	r3, #0
 80009c8:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80009ca:	1d3b      	adds	r3, r7, #4
 80009cc:	2200      	movs	r2, #0
 80009ce:	4619      	mov	r1, r3
 80009d0:	4807      	ldr	r0, [pc, #28]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 80009d2:	f001 fc23 	bl	800221c <HAL_TIM_PWM_ConfigChannel>
 80009d6:	4603      	mov	r3, r0
 80009d8:	2b00      	cmp	r3, #0
 80009da:	d001      	beq.n	80009e0 <MX_TIM3_Init+0xd4>
  {
    Error_Handler();
 80009dc:	f000 f8b6 	bl	8000b4c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80009e0:	4803      	ldr	r0, [pc, #12]	@ (80009f0 <MX_TIM3_Init+0xe4>)
 80009e2:	f000 f961 	bl	8000ca8 <HAL_TIM_MspPostInit>

}
 80009e6:	bf00      	nop
 80009e8:	3738      	adds	r7, #56	@ 0x38
 80009ea:	46bd      	mov	sp, r7
 80009ec:	bd80      	pop	{r7, pc}
 80009ee:	bf00      	nop
 80009f0:	200000c8 	.word	0x200000c8
 80009f4:	40000400 	.word	0x40000400

080009f8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80009f8:	b580      	push	{r7, lr}
 80009fa:	b088      	sub	sp, #32
 80009fc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009fe:	f107 0310 	add.w	r3, r7, #16
 8000a02:	2200      	movs	r2, #0
 8000a04:	601a      	str	r2, [r3, #0]
 8000a06:	605a      	str	r2, [r3, #4]
 8000a08:	609a      	str	r2, [r3, #8]
 8000a0a:	60da      	str	r2, [r3, #12]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000a0c:	4b49      	ldr	r3, [pc, #292]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a0e:	699b      	ldr	r3, [r3, #24]
 8000a10:	4a48      	ldr	r2, [pc, #288]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a12:	f043 0310 	orr.w	r3, r3, #16
 8000a16:	6193      	str	r3, [r2, #24]
 8000a18:	4b46      	ldr	r3, [pc, #280]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a1a:	699b      	ldr	r3, [r3, #24]
 8000a1c:	f003 0310 	and.w	r3, r3, #16
 8000a20:	60fb      	str	r3, [r7, #12]
 8000a22:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000a24:	4b43      	ldr	r3, [pc, #268]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a26:	699b      	ldr	r3, [r3, #24]
 8000a28:	4a42      	ldr	r2, [pc, #264]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a2a:	f043 0304 	orr.w	r3, r3, #4
 8000a2e:	6193      	str	r3, [r2, #24]
 8000a30:	4b40      	ldr	r3, [pc, #256]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a32:	699b      	ldr	r3, [r3, #24]
 8000a34:	f003 0304 	and.w	r3, r3, #4
 8000a38:	60bb      	str	r3, [r7, #8]
 8000a3a:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000a3c:	4b3d      	ldr	r3, [pc, #244]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a3e:	699b      	ldr	r3, [r3, #24]
 8000a40:	4a3c      	ldr	r2, [pc, #240]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a42:	f043 0308 	orr.w	r3, r3, #8
 8000a46:	6193      	str	r3, [r2, #24]
 8000a48:	4b3a      	ldr	r3, [pc, #232]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a4a:	699b      	ldr	r3, [r3, #24]
 8000a4c:	f003 0308 	and.w	r3, r3, #8
 8000a50:	607b      	str	r3, [r7, #4]
 8000a52:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000a54:	4b37      	ldr	r3, [pc, #220]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a56:	699b      	ldr	r3, [r3, #24]
 8000a58:	4a36      	ldr	r2, [pc, #216]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a5a:	f043 0320 	orr.w	r3, r3, #32
 8000a5e:	6193      	str	r3, [r2, #24]
 8000a60:	4b34      	ldr	r3, [pc, #208]	@ (8000b34 <MX_GPIO_Init+0x13c>)
 8000a62:	699b      	ldr	r3, [r3, #24]
 8000a64:	f003 0320 	and.w	r3, r3, #32
 8000a68:	603b      	str	r3, [r7, #0]
 8000a6a:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000a6c:	2200      	movs	r2, #0
 8000a6e:	f24e 0138 	movw	r1, #57400	@ 0xe038
 8000a72:	4831      	ldr	r0, [pc, #196]	@ (8000b38 <MX_GPIO_Init+0x140>)
 8000a74:	f000 fcb4 	bl	80013e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, D_PIN_Pin|C_PIN_Pin|B_PIN_Pin|GPIO_PIN_11
 8000a78:	2200      	movs	r2, #0
 8000a7a:	f44f 51dc 	mov.w	r1, #7040	@ 0x1b80
 8000a7e:	482f      	ldr	r0, [pc, #188]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000a80:	f000 fcae 	bl	80013e0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_12, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, A_PIN_Pin|GPIO_PIN_15, GPIO_PIN_RESET);
 8000a84:	2200      	movs	r2, #0
 8000a86:	f44f 4101 	mov.w	r1, #33024	@ 0x8100
 8000a8a:	482d      	ldr	r0, [pc, #180]	@ (8000b40 <MX_GPIO_Init+0x148>)
 8000a8c:	f000 fca8 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_2, GPIO_PIN_RESET);
 8000a90:	2200      	movs	r2, #0
 8000a92:	2104      	movs	r1, #4
 8000a94:	482b      	ldr	r0, [pc, #172]	@ (8000b44 <MX_GPIO_Init+0x14c>)
 8000a96:	f000 fca3 	bl	80013e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PC13 */
  GPIO_InitStruct.Pin = GPIO_PIN_13;
 8000a9a:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8000a9e:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8000aa0:	4b29      	ldr	r3, [pc, #164]	@ (8000b48 <MX_GPIO_Init+0x150>)
 8000aa2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000aa4:	2300      	movs	r3, #0
 8000aa6:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000aa8:	f107 0310 	add.w	r3, r7, #16
 8000aac:	4619      	mov	r1, r3
 8000aae:	4823      	ldr	r0, [pc, #140]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000ab0:	f000 fb12 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB13 PB14 PB15 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15|GPIO_PIN_3
 8000ab4:	f24e 0338 	movw	r3, #57400	@ 0xe038
 8000ab8:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000aba:	2301      	movs	r3, #1
 8000abc:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000abe:	2300      	movs	r3, #0
 8000ac0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ac2:	2302      	movs	r3, #2
 8000ac4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ac6:	f107 0310 	add.w	r3, r7, #16
 8000aca:	4619      	mov	r1, r3
 8000acc:	481a      	ldr	r0, [pc, #104]	@ (8000b38 <MX_GPIO_Init+0x140>)
 8000ace:	f000 fb03 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : D_PIN_Pin C_PIN_Pin B_PIN_Pin PC11
                           PC12 */
  GPIO_InitStruct.Pin = D_PIN_Pin|C_PIN_Pin|B_PIN_Pin|GPIO_PIN_11
 8000ad2:	f44f 53dc 	mov.w	r3, #7040	@ 0x1b80
 8000ad6:	613b      	str	r3, [r7, #16]
                          |GPIO_PIN_12;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000ad8:	2301      	movs	r3, #1
 8000ada:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000adc:	2300      	movs	r3, #0
 8000ade:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ae0:	2302      	movs	r3, #2
 8000ae2:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000ae4:	f107 0310 	add.w	r3, r7, #16
 8000ae8:	4619      	mov	r1, r3
 8000aea:	4814      	ldr	r0, [pc, #80]	@ (8000b3c <MX_GPIO_Init+0x144>)
 8000aec:	f000 faf4 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pins : A_PIN_Pin PA15 */
  GPIO_InitStruct.Pin = A_PIN_Pin|GPIO_PIN_15;
 8000af0:	f44f 4301 	mov.w	r3, #33024	@ 0x8100
 8000af4:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000af6:	2301      	movs	r3, #1
 8000af8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000afa:	2300      	movs	r3, #0
 8000afc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000afe:	2302      	movs	r3, #2
 8000b00:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000b02:	f107 0310 	add.w	r3, r7, #16
 8000b06:	4619      	mov	r1, r3
 8000b08:	480d      	ldr	r0, [pc, #52]	@ (8000b40 <MX_GPIO_Init+0x148>)
 8000b0a:	f000 fae5 	bl	80010d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000b0e:	2304      	movs	r3, #4
 8000b10:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000b12:	2301      	movs	r3, #1
 8000b14:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000b16:	2300      	movs	r3, #0
 8000b18:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000b1a:	2302      	movs	r3, #2
 8000b1c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000b1e:	f107 0310 	add.w	r3, r7, #16
 8000b22:	4619      	mov	r1, r3
 8000b24:	4807      	ldr	r0, [pc, #28]	@ (8000b44 <MX_GPIO_Init+0x14c>)
 8000b26:	f000 fad7 	bl	80010d8 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */

/* USER CODE END MX_GPIO_Init_2 */
}
 8000b2a:	bf00      	nop
 8000b2c:	3720      	adds	r7, #32
 8000b2e:	46bd      	mov	sp, r7
 8000b30:	bd80      	pop	{r7, pc}
 8000b32:	bf00      	nop
 8000b34:	40021000 	.word	0x40021000
 8000b38:	40010c00 	.word	0x40010c00
 8000b3c:	40011000 	.word	0x40011000
 8000b40:	40010800 	.word	0x40010800
 8000b44:	40011400 	.word	0x40011400
 8000b48:	10110000 	.word	0x10110000

08000b4c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b4c:	b480      	push	{r7}
 8000b4e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b50:	b672      	cpsid	i
}
 8000b52:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b54:	bf00      	nop
 8000b56:	e7fd      	b.n	8000b54 <Error_Handler+0x8>

08000b58 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b58:	b480      	push	{r7}
 8000b5a:	b085      	sub	sp, #20
 8000b5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8000b5e:	4b15      	ldr	r3, [pc, #84]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b60:	699b      	ldr	r3, [r3, #24]
 8000b62:	4a14      	ldr	r2, [pc, #80]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b64:	f043 0301 	orr.w	r3, r3, #1
 8000b68:	6193      	str	r3, [r2, #24]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b6c:	699b      	ldr	r3, [r3, #24]
 8000b6e:	f003 0301 	and.w	r3, r3, #1
 8000b72:	60bb      	str	r3, [r7, #8]
 8000b74:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b76:	4b0f      	ldr	r3, [pc, #60]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b78:	69db      	ldr	r3, [r3, #28]
 8000b7a:	4a0e      	ldr	r2, [pc, #56]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b7c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8000b80:	61d3      	str	r3, [r2, #28]
 8000b82:	4b0c      	ldr	r3, [pc, #48]	@ (8000bb4 <HAL_MspInit+0x5c>)
 8000b84:	69db      	ldr	r3, [r3, #28]
 8000b86:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8000b8a:	607b      	str	r3, [r7, #4]
 8000b8c:	687b      	ldr	r3, [r7, #4]

  /* System interrupt init*/

  /** NOJTAG: JTAG-DP Disabled and SW-DP Enabled
  */
  __HAL_AFIO_REMAP_SWJ_NOJTAG();
 8000b8e:	4b0a      	ldr	r3, [pc, #40]	@ (8000bb8 <HAL_MspInit+0x60>)
 8000b90:	685b      	ldr	r3, [r3, #4]
 8000b92:	60fb      	str	r3, [r7, #12]
 8000b94:	68fb      	ldr	r3, [r7, #12]
 8000b96:	f023 63e0 	bic.w	r3, r3, #117440512	@ 0x7000000
 8000b9a:	60fb      	str	r3, [r7, #12]
 8000b9c:	68fb      	ldr	r3, [r7, #12]
 8000b9e:	f043 7300 	orr.w	r3, r3, #33554432	@ 0x2000000
 8000ba2:	60fb      	str	r3, [r7, #12]
 8000ba4:	4a04      	ldr	r2, [pc, #16]	@ (8000bb8 <HAL_MspInit+0x60>)
 8000ba6:	68fb      	ldr	r3, [r7, #12]
 8000ba8:	6053      	str	r3, [r2, #4]

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3714      	adds	r7, #20
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bc80      	pop	{r7}
 8000bb2:	4770      	bx	lr
 8000bb4:	40021000 	.word	0x40021000
 8000bb8:	40010000 	.word	0x40010000

08000bbc <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8000bbc:	b580      	push	{r7, lr}
 8000bbe:	b088      	sub	sp, #32
 8000bc0:	af00      	add	r7, sp, #0
 8000bc2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000bc4:	f107 0310 	add.w	r3, r7, #16
 8000bc8:	2200      	movs	r2, #0
 8000bca:	601a      	str	r2, [r3, #0]
 8000bcc:	605a      	str	r2, [r3, #4]
 8000bce:	609a      	str	r2, [r3, #8]
 8000bd0:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8000bd2:	687b      	ldr	r3, [r7, #4]
 8000bd4:	681b      	ldr	r3, [r3, #0]
 8000bd6:	4a15      	ldr	r2, [pc, #84]	@ (8000c2c <HAL_SPI_MspInit+0x70>)
 8000bd8:	4293      	cmp	r3, r2
 8000bda:	d123      	bne.n	8000c24 <HAL_SPI_MspInit+0x68>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8000bdc:	4b14      	ldr	r3, [pc, #80]	@ (8000c30 <HAL_SPI_MspInit+0x74>)
 8000bde:	699b      	ldr	r3, [r3, #24]
 8000be0:	4a13      	ldr	r2, [pc, #76]	@ (8000c30 <HAL_SPI_MspInit+0x74>)
 8000be2:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 8000be6:	6193      	str	r3, [r2, #24]
 8000be8:	4b11      	ldr	r3, [pc, #68]	@ (8000c30 <HAL_SPI_MspInit+0x74>)
 8000bea:	699b      	ldr	r3, [r3, #24]
 8000bec:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8000bf0:	60fb      	str	r3, [r7, #12]
 8000bf2:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bf4:	4b0e      	ldr	r3, [pc, #56]	@ (8000c30 <HAL_SPI_MspInit+0x74>)
 8000bf6:	699b      	ldr	r3, [r3, #24]
 8000bf8:	4a0d      	ldr	r2, [pc, #52]	@ (8000c30 <HAL_SPI_MspInit+0x74>)
 8000bfa:	f043 0304 	orr.w	r3, r3, #4
 8000bfe:	6193      	str	r3, [r2, #24]
 8000c00:	4b0b      	ldr	r3, [pc, #44]	@ (8000c30 <HAL_SPI_MspInit+0x74>)
 8000c02:	699b      	ldr	r3, [r3, #24]
 8000c04:	f003 0304 	and.w	r3, r3, #4
 8000c08:	60bb      	str	r3, [r7, #8]
 8000c0a:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8000c0c:	23a0      	movs	r3, #160	@ 0xa0
 8000c0e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c10:	2302      	movs	r3, #2
 8000c12:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8000c14:	2303      	movs	r3, #3
 8000c16:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000c18:	f107 0310 	add.w	r3, r7, #16
 8000c1c:	4619      	mov	r1, r3
 8000c1e:	4805      	ldr	r0, [pc, #20]	@ (8000c34 <HAL_SPI_MspInit+0x78>)
 8000c20:	f000 fa5a 	bl	80010d8 <HAL_GPIO_Init>

  /* USER CODE END SPI1_MspInit 1 */

  }

}
 8000c24:	bf00      	nop
 8000c26:	3720      	adds	r7, #32
 8000c28:	46bd      	mov	sp, r7
 8000c2a:	bd80      	pop	{r7, pc}
 8000c2c:	40013000 	.word	0x40013000
 8000c30:	40021000 	.word	0x40021000
 8000c34:	40010800 	.word	0x40010800

08000c38 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000c38:	b580      	push	{r7, lr}
 8000c3a:	b084      	sub	sp, #16
 8000c3c:	af00      	add	r7, sp, #0
 8000c3e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8000c40:	687b      	ldr	r3, [r7, #4]
 8000c42:	681b      	ldr	r3, [r3, #0]
 8000c44:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000c48:	d114      	bne.n	8000c74 <HAL_TIM_Base_MspInit+0x3c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000c4a:	4b15      	ldr	r3, [pc, #84]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x68>)
 8000c4c:	69db      	ldr	r3, [r3, #28]
 8000c4e:	4a14      	ldr	r2, [pc, #80]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x68>)
 8000c50:	f043 0301 	orr.w	r3, r3, #1
 8000c54:	61d3      	str	r3, [r2, #28]
 8000c56:	4b12      	ldr	r3, [pc, #72]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x68>)
 8000c58:	69db      	ldr	r3, [r3, #28]
 8000c5a:	f003 0301 	and.w	r3, r3, #1
 8000c5e:	60fb      	str	r3, [r7, #12]
 8000c60:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8000c62:	2200      	movs	r2, #0
 8000c64:	2100      	movs	r1, #0
 8000c66:	201c      	movs	r0, #28
 8000c68:	f000 f9ff 	bl	800106a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000c6c:	201c      	movs	r0, #28
 8000c6e:	f000 fa18 	bl	80010a2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8000c72:	e010      	b.n	8000c96 <HAL_TIM_Base_MspInit+0x5e>
  else if(htim_base->Instance==TIM3)
 8000c74:	687b      	ldr	r3, [r7, #4]
 8000c76:	681b      	ldr	r3, [r3, #0]
 8000c78:	4a0a      	ldr	r2, [pc, #40]	@ (8000ca4 <HAL_TIM_Base_MspInit+0x6c>)
 8000c7a:	4293      	cmp	r3, r2
 8000c7c:	d10b      	bne.n	8000c96 <HAL_TIM_Base_MspInit+0x5e>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8000c7e:	4b08      	ldr	r3, [pc, #32]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x68>)
 8000c80:	69db      	ldr	r3, [r3, #28]
 8000c82:	4a07      	ldr	r2, [pc, #28]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x68>)
 8000c84:	f043 0302 	orr.w	r3, r3, #2
 8000c88:	61d3      	str	r3, [r2, #28]
 8000c8a:	4b05      	ldr	r3, [pc, #20]	@ (8000ca0 <HAL_TIM_Base_MspInit+0x68>)
 8000c8c:	69db      	ldr	r3, [r3, #28]
 8000c8e:	f003 0302 	and.w	r3, r3, #2
 8000c92:	60bb      	str	r3, [r7, #8]
 8000c94:	68bb      	ldr	r3, [r7, #8]
}
 8000c96:	bf00      	nop
 8000c98:	3710      	adds	r7, #16
 8000c9a:	46bd      	mov	sp, r7
 8000c9c:	bd80      	pop	{r7, pc}
 8000c9e:	bf00      	nop
 8000ca0:	40021000 	.word	0x40021000
 8000ca4:	40000400 	.word	0x40000400

08000ca8 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000ca8:	b580      	push	{r7, lr}
 8000caa:	b088      	sub	sp, #32
 8000cac:	af00      	add	r7, sp, #0
 8000cae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cb0:	f107 030c 	add.w	r3, r7, #12
 8000cb4:	2200      	movs	r2, #0
 8000cb6:	601a      	str	r2, [r3, #0]
 8000cb8:	605a      	str	r2, [r3, #4]
 8000cba:	609a      	str	r2, [r3, #8]
 8000cbc:	60da      	str	r2, [r3, #12]
  if(htim->Instance==TIM3)
 8000cbe:	687b      	ldr	r3, [r7, #4]
 8000cc0:	681b      	ldr	r3, [r3, #0]
 8000cc2:	4a18      	ldr	r2, [pc, #96]	@ (8000d24 <HAL_TIM_MspPostInit+0x7c>)
 8000cc4:	4293      	cmp	r3, r2
 8000cc6:	d129      	bne.n	8000d1c <HAL_TIM_MspPostInit+0x74>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8000cc8:	4b17      	ldr	r3, [pc, #92]	@ (8000d28 <HAL_TIM_MspPostInit+0x80>)
 8000cca:	699b      	ldr	r3, [r3, #24]
 8000ccc:	4a16      	ldr	r2, [pc, #88]	@ (8000d28 <HAL_TIM_MspPostInit+0x80>)
 8000cce:	f043 0310 	orr.w	r3, r3, #16
 8000cd2:	6193      	str	r3, [r2, #24]
 8000cd4:	4b14      	ldr	r3, [pc, #80]	@ (8000d28 <HAL_TIM_MspPostInit+0x80>)
 8000cd6:	699b      	ldr	r3, [r3, #24]
 8000cd8:	f003 0310 	and.w	r3, r3, #16
 8000cdc:	60bb      	str	r3, [r7, #8]
 8000cde:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PC6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000ce0:	2340      	movs	r3, #64	@ 0x40
 8000ce2:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ce4:	2302      	movs	r3, #2
 8000ce6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ce8:	2302      	movs	r3, #2
 8000cea:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8000cec:	f107 030c 	add.w	r3, r7, #12
 8000cf0:	4619      	mov	r1, r3
 8000cf2:	480e      	ldr	r0, [pc, #56]	@ (8000d2c <HAL_TIM_MspPostInit+0x84>)
 8000cf4:	f000 f9f0 	bl	80010d8 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_TIM3_ENABLE();
 8000cf8:	4b0d      	ldr	r3, [pc, #52]	@ (8000d30 <HAL_TIM_MspPostInit+0x88>)
 8000cfa:	685b      	ldr	r3, [r3, #4]
 8000cfc:	61fb      	str	r3, [r7, #28]
 8000cfe:	69fb      	ldr	r3, [r7, #28]
 8000d00:	f423 6340 	bic.w	r3, r3, #3072	@ 0xc00
 8000d04:	61fb      	str	r3, [r7, #28]
 8000d06:	69fb      	ldr	r3, [r7, #28]
 8000d08:	f043 63e0 	orr.w	r3, r3, #117440512	@ 0x7000000
 8000d0c:	61fb      	str	r3, [r7, #28]
 8000d0e:	69fb      	ldr	r3, [r7, #28]
 8000d10:	f443 6340 	orr.w	r3, r3, #3072	@ 0xc00
 8000d14:	61fb      	str	r3, [r7, #28]
 8000d16:	4a06      	ldr	r2, [pc, #24]	@ (8000d30 <HAL_TIM_MspPostInit+0x88>)
 8000d18:	69fb      	ldr	r3, [r7, #28]
 8000d1a:	6053      	str	r3, [r2, #4]
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8000d1c:	bf00      	nop
 8000d1e:	3720      	adds	r7, #32
 8000d20:	46bd      	mov	sp, r7
 8000d22:	bd80      	pop	{r7, pc}
 8000d24:	40000400 	.word	0x40000400
 8000d28:	40021000 	.word	0x40021000
 8000d2c:	40011000 	.word	0x40011000
 8000d30:	40010000 	.word	0x40010000

08000d34 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d34:	b480      	push	{r7}
 8000d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d38:	bf00      	nop
 8000d3a:	e7fd      	b.n	8000d38 <NMI_Handler+0x4>

08000d3c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d3c:	b480      	push	{r7}
 8000d3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d40:	bf00      	nop
 8000d42:	e7fd      	b.n	8000d40 <HardFault_Handler+0x4>

08000d44 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d44:	b480      	push	{r7}
 8000d46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d48:	bf00      	nop
 8000d4a:	e7fd      	b.n	8000d48 <MemManage_Handler+0x4>

08000d4c <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d4c:	b480      	push	{r7}
 8000d4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d50:	bf00      	nop
 8000d52:	e7fd      	b.n	8000d50 <BusFault_Handler+0x4>

08000d54 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d54:	b480      	push	{r7}
 8000d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d58:	bf00      	nop
 8000d5a:	e7fd      	b.n	8000d58 <UsageFault_Handler+0x4>

08000d5c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000d5c:	b480      	push	{r7}
 8000d5e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000d60:	bf00      	nop
 8000d62:	46bd      	mov	sp, r7
 8000d64:	bc80      	pop	{r7}
 8000d66:	4770      	bx	lr

08000d68 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d68:	b480      	push	{r7}
 8000d6a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d6c:	bf00      	nop
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bc80      	pop	{r7}
 8000d72:	4770      	bx	lr

08000d74 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000d78:	bf00      	nop
 8000d7a:	46bd      	mov	sp, r7
 8000d7c:	bc80      	pop	{r7}
 8000d7e:	4770      	bx	lr

08000d80 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000d80:	b580      	push	{r7, lr}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000d84:	f000 f87e 	bl	8000e84 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000d88:	bf00      	nop
 8000d8a:	bd80      	pop	{r7, pc}

08000d8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8000d8c:	b580      	push	{r7, lr}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8000d90:	4802      	ldr	r0, [pc, #8]	@ (8000d9c <TIM2_IRQHandler+0x10>)
 8000d92:	f001 f93b 	bl	800200c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	bd80      	pop	{r7, pc}
 8000d9a:	bf00      	nop
 8000d9c:	20000080 	.word	0x20000080

08000da0 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000da0:	b480      	push	{r7}
 8000da2:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000da4:	bf00      	nop
 8000da6:	46bd      	mov	sp, r7
 8000da8:	bc80      	pop	{r7}
 8000daa:	4770      	bx	lr

08000dac <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8000dac:	f7ff fff8 	bl	8000da0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000db0:	480b      	ldr	r0, [pc, #44]	@ (8000de0 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000db2:	490c      	ldr	r1, [pc, #48]	@ (8000de4 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000db4:	4a0c      	ldr	r2, [pc, #48]	@ (8000de8 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000db6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000db8:	e002      	b.n	8000dc0 <LoopCopyDataInit>

08000dba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000dba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000dbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000dbe:	3304      	adds	r3, #4

08000dc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000dc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000dc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000dc4:	d3f9      	bcc.n	8000dba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000dc6:	4a09      	ldr	r2, [pc, #36]	@ (8000dec <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000dc8:	4c09      	ldr	r4, [pc, #36]	@ (8000df0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8000dca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000dcc:	e001      	b.n	8000dd2 <LoopFillZerobss>

08000dce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000dce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000dd0:	3204      	adds	r2, #4

08000dd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000dd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000dd4:	d3fb      	bcc.n	8000dce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000dd6:	f001 fef3 	bl	8002bc0 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 8000dda:	f7ff fc9b 	bl	8000714 <main>
  bx lr
 8000dde:	4770      	bx	lr
  ldr r0, =_sdata
 8000de0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000de4:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000de8:	08002c4c 	.word	0x08002c4c
  ldr r2, =_sbss
 8000dec:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000df0:	20000918 	.word	0x20000918

08000df4 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000df4:	e7fe      	b.n	8000df4 <ADC1_2_IRQHandler>
	...

08000df8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000dfc:	4b08      	ldr	r3, [pc, #32]	@ (8000e20 <HAL_Init+0x28>)
 8000dfe:	681b      	ldr	r3, [r3, #0]
 8000e00:	4a07      	ldr	r2, [pc, #28]	@ (8000e20 <HAL_Init+0x28>)
 8000e02:	f043 0310 	orr.w	r3, r3, #16
 8000e06:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000e08:	2003      	movs	r0, #3
 8000e0a:	f000 f923 	bl	8001054 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000e0e:	200f      	movs	r0, #15
 8000e10:	f000 f808 	bl	8000e24 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000e14:	f7ff fea0 	bl	8000b58 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000e18:	2300      	movs	r3, #0
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	bd80      	pop	{r7, pc}
 8000e1e:	bf00      	nop
 8000e20:	40022000 	.word	0x40022000

08000e24 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000e24:	b580      	push	{r7, lr}
 8000e26:	b082      	sub	sp, #8
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000e2c:	4b12      	ldr	r3, [pc, #72]	@ (8000e78 <HAL_InitTick+0x54>)
 8000e2e:	681a      	ldr	r2, [r3, #0]
 8000e30:	4b12      	ldr	r3, [pc, #72]	@ (8000e7c <HAL_InitTick+0x58>)
 8000e32:	781b      	ldrb	r3, [r3, #0]
 8000e34:	4619      	mov	r1, r3
 8000e36:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000e3a:	fbb3 f3f1 	udiv	r3, r3, r1
 8000e3e:	fbb2 f3f3 	udiv	r3, r2, r3
 8000e42:	4618      	mov	r0, r3
 8000e44:	f000 f93b 	bl	80010be <HAL_SYSTICK_Config>
 8000e48:	4603      	mov	r3, r0
 8000e4a:	2b00      	cmp	r3, #0
 8000e4c:	d001      	beq.n	8000e52 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000e4e:	2301      	movs	r3, #1
 8000e50:	e00e      	b.n	8000e70 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000e52:	687b      	ldr	r3, [r7, #4]
 8000e54:	2b0f      	cmp	r3, #15
 8000e56:	d80a      	bhi.n	8000e6e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000e58:	2200      	movs	r2, #0
 8000e5a:	6879      	ldr	r1, [r7, #4]
 8000e5c:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000e60:	f000 f903 	bl	800106a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000e64:	4a06      	ldr	r2, [pc, #24]	@ (8000e80 <HAL_InitTick+0x5c>)
 8000e66:	687b      	ldr	r3, [r7, #4]
 8000e68:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	e000      	b.n	8000e70 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000e6e:	2301      	movs	r3, #1
}
 8000e70:	4618      	mov	r0, r3
 8000e72:	3708      	adds	r7, #8
 8000e74:	46bd      	mov	sp, r7
 8000e76:	bd80      	pop	{r7, pc}
 8000e78:	20000000 	.word	0x20000000
 8000e7c:	20000008 	.word	0x20000008
 8000e80:	20000004 	.word	0x20000004

08000e84 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000e84:	b480      	push	{r7}
 8000e86:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000e88:	4b05      	ldr	r3, [pc, #20]	@ (8000ea0 <HAL_IncTick+0x1c>)
 8000e8a:	781b      	ldrb	r3, [r3, #0]
 8000e8c:	461a      	mov	r2, r3
 8000e8e:	4b05      	ldr	r3, [pc, #20]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e90:	681b      	ldr	r3, [r3, #0]
 8000e92:	4413      	add	r3, r2
 8000e94:	4a03      	ldr	r2, [pc, #12]	@ (8000ea4 <HAL_IncTick+0x20>)
 8000e96:	6013      	str	r3, [r2, #0]
}
 8000e98:	bf00      	nop
 8000e9a:	46bd      	mov	sp, r7
 8000e9c:	bc80      	pop	{r7}
 8000e9e:	4770      	bx	lr
 8000ea0:	20000008 	.word	0x20000008
 8000ea4:	20000914 	.word	0x20000914

08000ea8 <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000ea8:	b480      	push	{r7}
 8000eaa:	af00      	add	r7, sp, #0
  return uwTick;
 8000eac:	4b02      	ldr	r3, [pc, #8]	@ (8000eb8 <HAL_GetTick+0x10>)
 8000eae:	681b      	ldr	r3, [r3, #0]
}
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	46bd      	mov	sp, r7
 8000eb4:	bc80      	pop	{r7}
 8000eb6:	4770      	bx	lr
 8000eb8:	20000914 	.word	0x20000914

08000ebc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000ebc:	b480      	push	{r7}
 8000ebe:	b085      	sub	sp, #20
 8000ec0:	af00      	add	r7, sp, #0
 8000ec2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000ec4:	687b      	ldr	r3, [r7, #4]
 8000ec6:	f003 0307 	and.w	r3, r3, #7
 8000eca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ecc:	4b0c      	ldr	r3, [pc, #48]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ece:	68db      	ldr	r3, [r3, #12]
 8000ed0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000ed2:	68ba      	ldr	r2, [r7, #8]
 8000ed4:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000ed8:	4013      	ands	r3, r2
 8000eda:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000edc:	68fb      	ldr	r3, [r7, #12]
 8000ede:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000ee0:	68bb      	ldr	r3, [r7, #8]
 8000ee2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000ee4:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000ee8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000eec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000eee:	4a04      	ldr	r2, [pc, #16]	@ (8000f00 <__NVIC_SetPriorityGrouping+0x44>)
 8000ef0:	68bb      	ldr	r3, [r7, #8]
 8000ef2:	60d3      	str	r3, [r2, #12]
}
 8000ef4:	bf00      	nop
 8000ef6:	3714      	adds	r7, #20
 8000ef8:	46bd      	mov	sp, r7
 8000efa:	bc80      	pop	{r7}
 8000efc:	4770      	bx	lr
 8000efe:	bf00      	nop
 8000f00:	e000ed00 	.word	0xe000ed00

08000f04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000f04:	b480      	push	{r7}
 8000f06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000f08:	4b04      	ldr	r3, [pc, #16]	@ (8000f1c <__NVIC_GetPriorityGrouping+0x18>)
 8000f0a:	68db      	ldr	r3, [r3, #12]
 8000f0c:	0a1b      	lsrs	r3, r3, #8
 8000f0e:	f003 0307 	and.w	r3, r3, #7
}
 8000f12:	4618      	mov	r0, r3
 8000f14:	46bd      	mov	sp, r7
 8000f16:	bc80      	pop	{r7}
 8000f18:	4770      	bx	lr
 8000f1a:	bf00      	nop
 8000f1c:	e000ed00 	.word	0xe000ed00

08000f20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000f20:	b480      	push	{r7}
 8000f22:	b083      	sub	sp, #12
 8000f24:	af00      	add	r7, sp, #0
 8000f26:	4603      	mov	r3, r0
 8000f28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f2e:	2b00      	cmp	r3, #0
 8000f30:	db0b      	blt.n	8000f4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000f32:	79fb      	ldrb	r3, [r7, #7]
 8000f34:	f003 021f 	and.w	r2, r3, #31
 8000f38:	4906      	ldr	r1, [pc, #24]	@ (8000f54 <__NVIC_EnableIRQ+0x34>)
 8000f3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f3e:	095b      	lsrs	r3, r3, #5
 8000f40:	2001      	movs	r0, #1
 8000f42:	fa00 f202 	lsl.w	r2, r0, r2
 8000f46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000f4a:	bf00      	nop
 8000f4c:	370c      	adds	r7, #12
 8000f4e:	46bd      	mov	sp, r7
 8000f50:	bc80      	pop	{r7}
 8000f52:	4770      	bx	lr
 8000f54:	e000e100 	.word	0xe000e100

08000f58 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000f58:	b480      	push	{r7}
 8000f5a:	b083      	sub	sp, #12
 8000f5c:	af00      	add	r7, sp, #0
 8000f5e:	4603      	mov	r3, r0
 8000f60:	6039      	str	r1, [r7, #0]
 8000f62:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000f64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f68:	2b00      	cmp	r3, #0
 8000f6a:	db0a      	blt.n	8000f82 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f6c:	683b      	ldr	r3, [r7, #0]
 8000f6e:	b2da      	uxtb	r2, r3
 8000f70:	490c      	ldr	r1, [pc, #48]	@ (8000fa4 <__NVIC_SetPriority+0x4c>)
 8000f72:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000f76:	0112      	lsls	r2, r2, #4
 8000f78:	b2d2      	uxtb	r2, r2
 8000f7a:	440b      	add	r3, r1
 8000f7c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000f80:	e00a      	b.n	8000f98 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000f82:	683b      	ldr	r3, [r7, #0]
 8000f84:	b2da      	uxtb	r2, r3
 8000f86:	4908      	ldr	r1, [pc, #32]	@ (8000fa8 <__NVIC_SetPriority+0x50>)
 8000f88:	79fb      	ldrb	r3, [r7, #7]
 8000f8a:	f003 030f 	and.w	r3, r3, #15
 8000f8e:	3b04      	subs	r3, #4
 8000f90:	0112      	lsls	r2, r2, #4
 8000f92:	b2d2      	uxtb	r2, r2
 8000f94:	440b      	add	r3, r1
 8000f96:	761a      	strb	r2, [r3, #24]
}
 8000f98:	bf00      	nop
 8000f9a:	370c      	adds	r7, #12
 8000f9c:	46bd      	mov	sp, r7
 8000f9e:	bc80      	pop	{r7}
 8000fa0:	4770      	bx	lr
 8000fa2:	bf00      	nop
 8000fa4:	e000e100 	.word	0xe000e100
 8000fa8:	e000ed00 	.word	0xe000ed00

08000fac <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000fac:	b480      	push	{r7}
 8000fae:	b089      	sub	sp, #36	@ 0x24
 8000fb0:	af00      	add	r7, sp, #0
 8000fb2:	60f8      	str	r0, [r7, #12]
 8000fb4:	60b9      	str	r1, [r7, #8]
 8000fb6:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	f003 0307 	and.w	r3, r3, #7
 8000fbe:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000fc0:	69fb      	ldr	r3, [r7, #28]
 8000fc2:	f1c3 0307 	rsb	r3, r3, #7
 8000fc6:	2b04      	cmp	r3, #4
 8000fc8:	bf28      	it	cs
 8000fca:	2304      	movcs	r3, #4
 8000fcc:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000fce:	69fb      	ldr	r3, [r7, #28]
 8000fd0:	3304      	adds	r3, #4
 8000fd2:	2b06      	cmp	r3, #6
 8000fd4:	d902      	bls.n	8000fdc <NVIC_EncodePriority+0x30>
 8000fd6:	69fb      	ldr	r3, [r7, #28]
 8000fd8:	3b03      	subs	r3, #3
 8000fda:	e000      	b.n	8000fde <NVIC_EncodePriority+0x32>
 8000fdc:	2300      	movs	r3, #0
 8000fde:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000fe0:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8000fea:	43da      	mvns	r2, r3
 8000fec:	68bb      	ldr	r3, [r7, #8]
 8000fee:	401a      	ands	r2, r3
 8000ff0:	697b      	ldr	r3, [r7, #20]
 8000ff2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000ff4:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ff8:	697b      	ldr	r3, [r7, #20]
 8000ffa:	fa01 f303 	lsl.w	r3, r1, r3
 8000ffe:	43d9      	mvns	r1, r3
 8001000:	687b      	ldr	r3, [r7, #4]
 8001002:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001004:	4313      	orrs	r3, r2
         );
}
 8001006:	4618      	mov	r0, r3
 8001008:	3724      	adds	r7, #36	@ 0x24
 800100a:	46bd      	mov	sp, r7
 800100c:	bc80      	pop	{r7}
 800100e:	4770      	bx	lr

08001010 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001010:	b580      	push	{r7, lr}
 8001012:	b082      	sub	sp, #8
 8001014:	af00      	add	r7, sp, #0
 8001016:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001018:	687b      	ldr	r3, [r7, #4]
 800101a:	3b01      	subs	r3, #1
 800101c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001020:	d301      	bcc.n	8001026 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001022:	2301      	movs	r3, #1
 8001024:	e00f      	b.n	8001046 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001026:	4a0a      	ldr	r2, [pc, #40]	@ (8001050 <SysTick_Config+0x40>)
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	3b01      	subs	r3, #1
 800102c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800102e:	210f      	movs	r1, #15
 8001030:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001034:	f7ff ff90 	bl	8000f58 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001038:	4b05      	ldr	r3, [pc, #20]	@ (8001050 <SysTick_Config+0x40>)
 800103a:	2200      	movs	r2, #0
 800103c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800103e:	4b04      	ldr	r3, [pc, #16]	@ (8001050 <SysTick_Config+0x40>)
 8001040:	2207      	movs	r2, #7
 8001042:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001044:	2300      	movs	r3, #0
}
 8001046:	4618      	mov	r0, r3
 8001048:	3708      	adds	r7, #8
 800104a:	46bd      	mov	sp, r7
 800104c:	bd80      	pop	{r7, pc}
 800104e:	bf00      	nop
 8001050:	e000e010 	.word	0xe000e010

08001054 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001054:	b580      	push	{r7, lr}
 8001056:	b082      	sub	sp, #8
 8001058:	af00      	add	r7, sp, #0
 800105a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800105c:	6878      	ldr	r0, [r7, #4]
 800105e:	f7ff ff2d 	bl	8000ebc <__NVIC_SetPriorityGrouping>
}
 8001062:	bf00      	nop
 8001064:	3708      	adds	r7, #8
 8001066:	46bd      	mov	sp, r7
 8001068:	bd80      	pop	{r7, pc}

0800106a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800106a:	b580      	push	{r7, lr}
 800106c:	b086      	sub	sp, #24
 800106e:	af00      	add	r7, sp, #0
 8001070:	4603      	mov	r3, r0
 8001072:	60b9      	str	r1, [r7, #8]
 8001074:	607a      	str	r2, [r7, #4]
 8001076:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001078:	2300      	movs	r3, #0
 800107a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800107c:	f7ff ff42 	bl	8000f04 <__NVIC_GetPriorityGrouping>
 8001080:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001082:	687a      	ldr	r2, [r7, #4]
 8001084:	68b9      	ldr	r1, [r7, #8]
 8001086:	6978      	ldr	r0, [r7, #20]
 8001088:	f7ff ff90 	bl	8000fac <NVIC_EncodePriority>
 800108c:	4602      	mov	r2, r0
 800108e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001092:	4611      	mov	r1, r2
 8001094:	4618      	mov	r0, r3
 8001096:	f7ff ff5f 	bl	8000f58 <__NVIC_SetPriority>
}
 800109a:	bf00      	nop
 800109c:	3718      	adds	r7, #24
 800109e:	46bd      	mov	sp, r7
 80010a0:	bd80      	pop	{r7, pc}

080010a2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f10xxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80010a2:	b580      	push	{r7, lr}
 80010a4:	b082      	sub	sp, #8
 80010a6:	af00      	add	r7, sp, #0
 80010a8:	4603      	mov	r3, r0
 80010aa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80010ac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80010b0:	4618      	mov	r0, r3
 80010b2:	f7ff ff35 	bl	8000f20 <__NVIC_EnableIRQ>
}
 80010b6:	bf00      	nop
 80010b8:	3708      	adds	r7, #8
 80010ba:	46bd      	mov	sp, r7
 80010bc:	bd80      	pop	{r7, pc}

080010be <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80010be:	b580      	push	{r7, lr}
 80010c0:	b082      	sub	sp, #8
 80010c2:	af00      	add	r7, sp, #0
 80010c4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80010c6:	6878      	ldr	r0, [r7, #4]
 80010c8:	f7ff ffa2 	bl	8001010 <SysTick_Config>
 80010cc:	4603      	mov	r3, r0
}
 80010ce:	4618      	mov	r0, r3
 80010d0:	3708      	adds	r7, #8
 80010d2:	46bd      	mov	sp, r7
 80010d4:	bd80      	pop	{r7, pc}
	...

080010d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80010d8:	b480      	push	{r7}
 80010da:	b08b      	sub	sp, #44	@ 0x2c
 80010dc:	af00      	add	r7, sp, #0
 80010de:	6078      	str	r0, [r7, #4]
 80010e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80010e2:	2300      	movs	r3, #0
 80010e4:	627b      	str	r3, [r7, #36]	@ 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80010e6:	2300      	movs	r3, #0
 80010e8:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80010ea:	e169      	b.n	80013c0 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80010ec:	2201      	movs	r2, #1
 80010ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80010f0:	fa02 f303 	lsl.w	r3, r2, r3
 80010f4:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80010f6:	683b      	ldr	r3, [r7, #0]
 80010f8:	681b      	ldr	r3, [r3, #0]
 80010fa:	69fa      	ldr	r2, [r7, #28]
 80010fc:	4013      	ands	r3, r2
 80010fe:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	69fb      	ldr	r3, [r7, #28]
 8001104:	429a      	cmp	r2, r3
 8001106:	f040 8158 	bne.w	80013ba <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	685b      	ldr	r3, [r3, #4]
 800110e:	4a9a      	ldr	r2, [pc, #616]	@ (8001378 <HAL_GPIO_Init+0x2a0>)
 8001110:	4293      	cmp	r3, r2
 8001112:	d05e      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001114:	4a98      	ldr	r2, [pc, #608]	@ (8001378 <HAL_GPIO_Init+0x2a0>)
 8001116:	4293      	cmp	r3, r2
 8001118:	d875      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800111a:	4a98      	ldr	r2, [pc, #608]	@ (800137c <HAL_GPIO_Init+0x2a4>)
 800111c:	4293      	cmp	r3, r2
 800111e:	d058      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001120:	4a96      	ldr	r2, [pc, #600]	@ (800137c <HAL_GPIO_Init+0x2a4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d86f      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001126:	4a96      	ldr	r2, [pc, #600]	@ (8001380 <HAL_GPIO_Init+0x2a8>)
 8001128:	4293      	cmp	r3, r2
 800112a:	d052      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 800112c:	4a94      	ldr	r2, [pc, #592]	@ (8001380 <HAL_GPIO_Init+0x2a8>)
 800112e:	4293      	cmp	r3, r2
 8001130:	d869      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001132:	4a94      	ldr	r2, [pc, #592]	@ (8001384 <HAL_GPIO_Init+0x2ac>)
 8001134:	4293      	cmp	r3, r2
 8001136:	d04c      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001138:	4a92      	ldr	r2, [pc, #584]	@ (8001384 <HAL_GPIO_Init+0x2ac>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d863      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800113e:	4a92      	ldr	r2, [pc, #584]	@ (8001388 <HAL_GPIO_Init+0x2b0>)
 8001140:	4293      	cmp	r3, r2
 8001142:	d046      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
 8001144:	4a90      	ldr	r2, [pc, #576]	@ (8001388 <HAL_GPIO_Init+0x2b0>)
 8001146:	4293      	cmp	r3, r2
 8001148:	d85d      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 800114a:	2b12      	cmp	r3, #18
 800114c:	d82a      	bhi.n	80011a4 <HAL_GPIO_Init+0xcc>
 800114e:	2b12      	cmp	r3, #18
 8001150:	d859      	bhi.n	8001206 <HAL_GPIO_Init+0x12e>
 8001152:	a201      	add	r2, pc, #4	@ (adr r2, 8001158 <HAL_GPIO_Init+0x80>)
 8001154:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001158:	080011d3 	.word	0x080011d3
 800115c:	080011ad 	.word	0x080011ad
 8001160:	080011bf 	.word	0x080011bf
 8001164:	08001201 	.word	0x08001201
 8001168:	08001207 	.word	0x08001207
 800116c:	08001207 	.word	0x08001207
 8001170:	08001207 	.word	0x08001207
 8001174:	08001207 	.word	0x08001207
 8001178:	08001207 	.word	0x08001207
 800117c:	08001207 	.word	0x08001207
 8001180:	08001207 	.word	0x08001207
 8001184:	08001207 	.word	0x08001207
 8001188:	08001207 	.word	0x08001207
 800118c:	08001207 	.word	0x08001207
 8001190:	08001207 	.word	0x08001207
 8001194:	08001207 	.word	0x08001207
 8001198:	08001207 	.word	0x08001207
 800119c:	080011b5 	.word	0x080011b5
 80011a0:	080011c9 	.word	0x080011c9
 80011a4:	4a79      	ldr	r2, [pc, #484]	@ (800138c <HAL_GPIO_Init+0x2b4>)
 80011a6:	4293      	cmp	r3, r2
 80011a8:	d013      	beq.n	80011d2 <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 80011aa:	e02c      	b.n	8001206 <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 80011ac:	683b      	ldr	r3, [r7, #0]
 80011ae:	68db      	ldr	r3, [r3, #12]
 80011b0:	623b      	str	r3, [r7, #32]
          break;
 80011b2:	e029      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 80011b4:	683b      	ldr	r3, [r7, #0]
 80011b6:	68db      	ldr	r3, [r3, #12]
 80011b8:	3304      	adds	r3, #4
 80011ba:	623b      	str	r3, [r7, #32]
          break;
 80011bc:	e024      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 80011be:	683b      	ldr	r3, [r7, #0]
 80011c0:	68db      	ldr	r3, [r3, #12]
 80011c2:	3308      	adds	r3, #8
 80011c4:	623b      	str	r3, [r7, #32]
          break;
 80011c6:	e01f      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 80011c8:	683b      	ldr	r3, [r7, #0]
 80011ca:	68db      	ldr	r3, [r3, #12]
 80011cc:	330c      	adds	r3, #12
 80011ce:	623b      	str	r3, [r7, #32]
          break;
 80011d0:	e01a      	b.n	8001208 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 80011d2:	683b      	ldr	r3, [r7, #0]
 80011d4:	689b      	ldr	r3, [r3, #8]
 80011d6:	2b00      	cmp	r3, #0
 80011d8:	d102      	bne.n	80011e0 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80011da:	2304      	movs	r3, #4
 80011dc:	623b      	str	r3, [r7, #32]
          break;
 80011de:	e013      	b.n	8001208 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80011e0:	683b      	ldr	r3, [r7, #0]
 80011e2:	689b      	ldr	r3, [r3, #8]
 80011e4:	2b01      	cmp	r3, #1
 80011e6:	d105      	bne.n	80011f4 <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011e8:	2308      	movs	r3, #8
 80011ea:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80011ec:	687b      	ldr	r3, [r7, #4]
 80011ee:	69fa      	ldr	r2, [r7, #28]
 80011f0:	611a      	str	r2, [r3, #16]
          break;
 80011f2:	e009      	b.n	8001208 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80011f4:	2308      	movs	r3, #8
 80011f6:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80011f8:	687b      	ldr	r3, [r7, #4]
 80011fa:	69fa      	ldr	r2, [r7, #28]
 80011fc:	615a      	str	r2, [r3, #20]
          break;
 80011fe:	e003      	b.n	8001208 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 8001200:	2300      	movs	r3, #0
 8001202:	623b      	str	r3, [r7, #32]
          break;
 8001204:	e000      	b.n	8001208 <HAL_GPIO_Init+0x130>
          break;
 8001206:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 8001208:	69bb      	ldr	r3, [r7, #24]
 800120a:	2bff      	cmp	r3, #255	@ 0xff
 800120c:	d801      	bhi.n	8001212 <HAL_GPIO_Init+0x13a>
 800120e:	687b      	ldr	r3, [r7, #4]
 8001210:	e001      	b.n	8001216 <HAL_GPIO_Init+0x13e>
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	3304      	adds	r3, #4
 8001216:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 8001218:	69bb      	ldr	r3, [r7, #24]
 800121a:	2bff      	cmp	r3, #255	@ 0xff
 800121c:	d802      	bhi.n	8001224 <HAL_GPIO_Init+0x14c>
 800121e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001220:	009b      	lsls	r3, r3, #2
 8001222:	e002      	b.n	800122a <HAL_GPIO_Init+0x152>
 8001224:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001226:	3b08      	subs	r3, #8
 8001228:	009b      	lsls	r3, r3, #2
 800122a:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 800122c:	697b      	ldr	r3, [r7, #20]
 800122e:	681a      	ldr	r2, [r3, #0]
 8001230:	210f      	movs	r1, #15
 8001232:	693b      	ldr	r3, [r7, #16]
 8001234:	fa01 f303 	lsl.w	r3, r1, r3
 8001238:	43db      	mvns	r3, r3
 800123a:	401a      	ands	r2, r3
 800123c:	6a39      	ldr	r1, [r7, #32]
 800123e:	693b      	ldr	r3, [r7, #16]
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	431a      	orrs	r2, r3
 8001246:	697b      	ldr	r3, [r7, #20]
 8001248:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800124a:	683b      	ldr	r3, [r7, #0]
 800124c:	685b      	ldr	r3, [r3, #4]
 800124e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001252:	2b00      	cmp	r3, #0
 8001254:	f000 80b1 	beq.w	80013ba <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8001258:	4b4d      	ldr	r3, [pc, #308]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 800125a:	699b      	ldr	r3, [r3, #24]
 800125c:	4a4c      	ldr	r2, [pc, #304]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 800125e:	f043 0301 	orr.w	r3, r3, #1
 8001262:	6193      	str	r3, [r2, #24]
 8001264:	4b4a      	ldr	r3, [pc, #296]	@ (8001390 <HAL_GPIO_Init+0x2b8>)
 8001266:	699b      	ldr	r3, [r3, #24]
 8001268:	f003 0301 	and.w	r3, r3, #1
 800126c:	60bb      	str	r3, [r7, #8]
 800126e:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8001270:	4a48      	ldr	r2, [pc, #288]	@ (8001394 <HAL_GPIO_Init+0x2bc>)
 8001272:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001274:	089b      	lsrs	r3, r3, #2
 8001276:	3302      	adds	r3, #2
 8001278:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800127c:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 800127e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8001280:	f003 0303 	and.w	r3, r3, #3
 8001284:	009b      	lsls	r3, r3, #2
 8001286:	220f      	movs	r2, #15
 8001288:	fa02 f303 	lsl.w	r3, r2, r3
 800128c:	43db      	mvns	r3, r3
 800128e:	68fa      	ldr	r2, [r7, #12]
 8001290:	4013      	ands	r3, r2
 8001292:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	4a40      	ldr	r2, [pc, #256]	@ (8001398 <HAL_GPIO_Init+0x2c0>)
 8001298:	4293      	cmp	r3, r2
 800129a:	d013      	beq.n	80012c4 <HAL_GPIO_Init+0x1ec>
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	4a3f      	ldr	r2, [pc, #252]	@ (800139c <HAL_GPIO_Init+0x2c4>)
 80012a0:	4293      	cmp	r3, r2
 80012a2:	d00d      	beq.n	80012c0 <HAL_GPIO_Init+0x1e8>
 80012a4:	687b      	ldr	r3, [r7, #4]
 80012a6:	4a3e      	ldr	r2, [pc, #248]	@ (80013a0 <HAL_GPIO_Init+0x2c8>)
 80012a8:	4293      	cmp	r3, r2
 80012aa:	d007      	beq.n	80012bc <HAL_GPIO_Init+0x1e4>
 80012ac:	687b      	ldr	r3, [r7, #4]
 80012ae:	4a3d      	ldr	r2, [pc, #244]	@ (80013a4 <HAL_GPIO_Init+0x2cc>)
 80012b0:	4293      	cmp	r3, r2
 80012b2:	d101      	bne.n	80012b8 <HAL_GPIO_Init+0x1e0>
 80012b4:	2303      	movs	r3, #3
 80012b6:	e006      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012b8:	2304      	movs	r3, #4
 80012ba:	e004      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012bc:	2302      	movs	r3, #2
 80012be:	e002      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c0:	2301      	movs	r3, #1
 80012c2:	e000      	b.n	80012c6 <HAL_GPIO_Init+0x1ee>
 80012c4:	2300      	movs	r3, #0
 80012c6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80012c8:	f002 0203 	and.w	r2, r2, #3
 80012cc:	0092      	lsls	r2, r2, #2
 80012ce:	4093      	lsls	r3, r2
 80012d0:	68fa      	ldr	r2, [r7, #12]
 80012d2:	4313      	orrs	r3, r2
 80012d4:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 80012d6:	492f      	ldr	r1, [pc, #188]	@ (8001394 <HAL_GPIO_Init+0x2bc>)
 80012d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80012da:	089b      	lsrs	r3, r3, #2
 80012dc:	3302      	adds	r3, #2
 80012de:	68fa      	ldr	r2, [r7, #12]
 80012e0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80012e4:	683b      	ldr	r3, [r7, #0]
 80012e6:	685b      	ldr	r3, [r3, #4]
 80012e8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	d006      	beq.n	80012fe <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80012f0:	4b2d      	ldr	r3, [pc, #180]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f2:	689a      	ldr	r2, [r3, #8]
 80012f4:	492c      	ldr	r1, [pc, #176]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 80012f6:	69bb      	ldr	r3, [r7, #24]
 80012f8:	4313      	orrs	r3, r2
 80012fa:	608b      	str	r3, [r1, #8]
 80012fc:	e006      	b.n	800130c <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80012fe:	4b2a      	ldr	r3, [pc, #168]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001300:	689a      	ldr	r2, [r3, #8]
 8001302:	69bb      	ldr	r3, [r7, #24]
 8001304:	43db      	mvns	r3, r3
 8001306:	4928      	ldr	r1, [pc, #160]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001308:	4013      	ands	r3, r2
 800130a:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800130c:	683b      	ldr	r3, [r7, #0]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001314:	2b00      	cmp	r3, #0
 8001316:	d006      	beq.n	8001326 <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 8001318:	4b23      	ldr	r3, [pc, #140]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131a:	68da      	ldr	r2, [r3, #12]
 800131c:	4922      	ldr	r1, [pc, #136]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800131e:	69bb      	ldr	r3, [r7, #24]
 8001320:	4313      	orrs	r3, r2
 8001322:	60cb      	str	r3, [r1, #12]
 8001324:	e006      	b.n	8001334 <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 8001326:	4b20      	ldr	r3, [pc, #128]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001328:	68da      	ldr	r2, [r3, #12]
 800132a:	69bb      	ldr	r3, [r7, #24]
 800132c:	43db      	mvns	r3, r3
 800132e:	491e      	ldr	r1, [pc, #120]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001330:	4013      	ands	r3, r2
 8001332:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8001334:	683b      	ldr	r3, [r7, #0]
 8001336:	685b      	ldr	r3, [r3, #4]
 8001338:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800133c:	2b00      	cmp	r3, #0
 800133e:	d006      	beq.n	800134e <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8001340:	4b19      	ldr	r3, [pc, #100]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001342:	685a      	ldr	r2, [r3, #4]
 8001344:	4918      	ldr	r1, [pc, #96]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001346:	69bb      	ldr	r3, [r7, #24]
 8001348:	4313      	orrs	r3, r2
 800134a:	604b      	str	r3, [r1, #4]
 800134c:	e006      	b.n	800135c <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 800134e:	4b16      	ldr	r3, [pc, #88]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001350:	685a      	ldr	r2, [r3, #4]
 8001352:	69bb      	ldr	r3, [r7, #24]
 8001354:	43db      	mvns	r3, r3
 8001356:	4914      	ldr	r1, [pc, #80]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 8001358:	4013      	ands	r3, r2
 800135a:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800135c:	683b      	ldr	r3, [r7, #0]
 800135e:	685b      	ldr	r3, [r3, #4]
 8001360:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001364:	2b00      	cmp	r3, #0
 8001366:	d021      	beq.n	80013ac <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8001368:	4b0f      	ldr	r3, [pc, #60]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136a:	681a      	ldr	r2, [r3, #0]
 800136c:	490e      	ldr	r1, [pc, #56]	@ (80013a8 <HAL_GPIO_Init+0x2d0>)
 800136e:	69bb      	ldr	r3, [r7, #24]
 8001370:	4313      	orrs	r3, r2
 8001372:	600b      	str	r3, [r1, #0]
 8001374:	e021      	b.n	80013ba <HAL_GPIO_Init+0x2e2>
 8001376:	bf00      	nop
 8001378:	10320000 	.word	0x10320000
 800137c:	10310000 	.word	0x10310000
 8001380:	10220000 	.word	0x10220000
 8001384:	10210000 	.word	0x10210000
 8001388:	10120000 	.word	0x10120000
 800138c:	10110000 	.word	0x10110000
 8001390:	40021000 	.word	0x40021000
 8001394:	40010000 	.word	0x40010000
 8001398:	40010800 	.word	0x40010800
 800139c:	40010c00 	.word	0x40010c00
 80013a0:	40011000 	.word	0x40011000
 80013a4:	40011400 	.word	0x40011400
 80013a8:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 80013ac:	4b0b      	ldr	r3, [pc, #44]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80013ae:	681a      	ldr	r2, [r3, #0]
 80013b0:	69bb      	ldr	r3, [r7, #24]
 80013b2:	43db      	mvns	r3, r3
 80013b4:	4909      	ldr	r1, [pc, #36]	@ (80013dc <HAL_GPIO_Init+0x304>)
 80013b6:	4013      	ands	r3, r2
 80013b8:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 80013ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013bc:	3301      	adds	r3, #1
 80013be:	627b      	str	r3, [r7, #36]	@ 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80013c0:	683b      	ldr	r3, [r7, #0]
 80013c2:	681a      	ldr	r2, [r3, #0]
 80013c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80013c6:	fa22 f303 	lsr.w	r3, r2, r3
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	f47f ae8e 	bne.w	80010ec <HAL_GPIO_Init+0x14>
  }
}
 80013d0:	bf00      	nop
 80013d2:	bf00      	nop
 80013d4:	372c      	adds	r7, #44	@ 0x2c
 80013d6:	46bd      	mov	sp, r7
 80013d8:	bc80      	pop	{r7}
 80013da:	4770      	bx	lr
 80013dc:	40010400 	.word	0x40010400

080013e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
 80013e8:	460b      	mov	r3, r1
 80013ea:	807b      	strh	r3, [r7, #2]
 80013ec:	4613      	mov	r3, r2
 80013ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80013f0:	787b      	ldrb	r3, [r7, #1]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d003      	beq.n	80013fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80013f6:	887a      	ldrh	r2, [r7, #2]
 80013f8:	687b      	ldr	r3, [r7, #4]
 80013fa:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80013fc:	e003      	b.n	8001406 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80013fe:	887b      	ldrh	r3, [r7, #2]
 8001400:	041a      	lsls	r2, r3, #16
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	611a      	str	r2, [r3, #16]
}
 8001406:	bf00      	nop
 8001408:	370c      	adds	r7, #12
 800140a:	46bd      	mov	sp, r7
 800140c:	bc80      	pop	{r7}
 800140e:	4770      	bx	lr

08001410 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b086      	sub	sp, #24
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	2b00      	cmp	r3, #0
 800141c:	d101      	bne.n	8001422 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800141e:	2301      	movs	r3, #1
 8001420:	e272      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8001422:	687b      	ldr	r3, [r7, #4]
 8001424:	681b      	ldr	r3, [r3, #0]
 8001426:	f003 0301 	and.w	r3, r3, #1
 800142a:	2b00      	cmp	r3, #0
 800142c:	f000 8087 	beq.w	800153e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8001430:	4b92      	ldr	r3, [pc, #584]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001432:	685b      	ldr	r3, [r3, #4]
 8001434:	f003 030c 	and.w	r3, r3, #12
 8001438:	2b04      	cmp	r3, #4
 800143a:	d00c      	beq.n	8001456 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800143c:	4b8f      	ldr	r3, [pc, #572]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800143e:	685b      	ldr	r3, [r3, #4]
 8001440:	f003 030c 	and.w	r3, r3, #12
 8001444:	2b08      	cmp	r3, #8
 8001446:	d112      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
 8001448:	4b8c      	ldr	r3, [pc, #560]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800144a:	685b      	ldr	r3, [r3, #4]
 800144c:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001450:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001454:	d10b      	bne.n	800146e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001456:	4b89      	ldr	r3, [pc, #548]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001458:	681b      	ldr	r3, [r3, #0]
 800145a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145e:	2b00      	cmp	r3, #0
 8001460:	d06c      	beq.n	800153c <HAL_RCC_OscConfig+0x12c>
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	685b      	ldr	r3, [r3, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d168      	bne.n	800153c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e24c      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	685b      	ldr	r3, [r3, #4]
 8001472:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001476:	d106      	bne.n	8001486 <HAL_RCC_OscConfig+0x76>
 8001478:	4b80      	ldr	r3, [pc, #512]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800147a:	681b      	ldr	r3, [r3, #0]
 800147c:	4a7f      	ldr	r2, [pc, #508]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800147e:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8001482:	6013      	str	r3, [r2, #0]
 8001484:	e02e      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 8001486:	687b      	ldr	r3, [r7, #4]
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d10c      	bne.n	80014a8 <HAL_RCC_OscConfig+0x98>
 800148e:	4b7b      	ldr	r3, [pc, #492]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	4a7a      	ldr	r2, [pc, #488]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001494:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8001498:	6013      	str	r3, [r2, #0]
 800149a:	4b78      	ldr	r3, [pc, #480]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	4a77      	ldr	r2, [pc, #476]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014a0:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014a4:	6013      	str	r3, [r2, #0]
 80014a6:	e01d      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	685b      	ldr	r3, [r3, #4]
 80014ac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80014b0:	d10c      	bne.n	80014cc <HAL_RCC_OscConfig+0xbc>
 80014b2:	4b72      	ldr	r3, [pc, #456]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b4:	681b      	ldr	r3, [r3, #0]
 80014b6:	4a71      	ldr	r2, [pc, #452]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014b8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80014bc:	6013      	str	r3, [r2, #0]
 80014be:	4b6f      	ldr	r3, [pc, #444]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	4a6e      	ldr	r2, [pc, #440]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80014c8:	6013      	str	r3, [r2, #0]
 80014ca:	e00b      	b.n	80014e4 <HAL_RCC_OscConfig+0xd4>
 80014cc:	4b6b      	ldr	r3, [pc, #428]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014ce:	681b      	ldr	r3, [r3, #0]
 80014d0:	4a6a      	ldr	r2, [pc, #424]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014d2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80014d6:	6013      	str	r3, [r2, #0]
 80014d8:	4b68      	ldr	r3, [pc, #416]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014da:	681b      	ldr	r3, [r3, #0]
 80014dc:	4a67      	ldr	r2, [pc, #412]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80014de:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 80014e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	685b      	ldr	r3, [r3, #4]
 80014e8:	2b00      	cmp	r3, #0
 80014ea:	d013      	beq.n	8001514 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014ec:	f7ff fcdc 	bl	8000ea8 <HAL_GetTick>
 80014f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80014f2:	e008      	b.n	8001506 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80014f4:	f7ff fcd8 	bl	8000ea8 <HAL_GetTick>
 80014f8:	4602      	mov	r2, r0
 80014fa:	693b      	ldr	r3, [r7, #16]
 80014fc:	1ad3      	subs	r3, r2, r3
 80014fe:	2b64      	cmp	r3, #100	@ 0x64
 8001500:	d901      	bls.n	8001506 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8001502:	2303      	movs	r3, #3
 8001504:	e200      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001506:	4b5d      	ldr	r3, [pc, #372]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001508:	681b      	ldr	r3, [r3, #0]
 800150a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800150e:	2b00      	cmp	r3, #0
 8001510:	d0f0      	beq.n	80014f4 <HAL_RCC_OscConfig+0xe4>
 8001512:	e014      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001514:	f7ff fcc8 	bl	8000ea8 <HAL_GetTick>
 8001518:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800151a:	e008      	b.n	800152e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800151c:	f7ff fcc4 	bl	8000ea8 <HAL_GetTick>
 8001520:	4602      	mov	r2, r0
 8001522:	693b      	ldr	r3, [r7, #16]
 8001524:	1ad3      	subs	r3, r2, r3
 8001526:	2b64      	cmp	r3, #100	@ 0x64
 8001528:	d901      	bls.n	800152e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800152a:	2303      	movs	r3, #3
 800152c:	e1ec      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800152e:	4b53      	ldr	r3, [pc, #332]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001530:	681b      	ldr	r3, [r3, #0]
 8001532:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001536:	2b00      	cmp	r3, #0
 8001538:	d1f0      	bne.n	800151c <HAL_RCC_OscConfig+0x10c>
 800153a:	e000      	b.n	800153e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800153c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	681b      	ldr	r3, [r3, #0]
 8001542:	f003 0302 	and.w	r3, r3, #2
 8001546:	2b00      	cmp	r3, #0
 8001548:	d063      	beq.n	8001612 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800154a:	4b4c      	ldr	r3, [pc, #304]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 800154c:	685b      	ldr	r3, [r3, #4]
 800154e:	f003 030c 	and.w	r3, r3, #12
 8001552:	2b00      	cmp	r3, #0
 8001554:	d00b      	beq.n	800156e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8001556:	4b49      	ldr	r3, [pc, #292]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001558:	685b      	ldr	r3, [r3, #4]
 800155a:	f003 030c 	and.w	r3, r3, #12
 800155e:	2b08      	cmp	r3, #8
 8001560:	d11c      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
 8001562:	4b46      	ldr	r3, [pc, #280]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001564:	685b      	ldr	r3, [r3, #4]
 8001566:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 800156a:	2b00      	cmp	r3, #0
 800156c:	d116      	bne.n	800159c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800156e:	4b43      	ldr	r3, [pc, #268]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001570:	681b      	ldr	r3, [r3, #0]
 8001572:	f003 0302 	and.w	r3, r3, #2
 8001576:	2b00      	cmp	r3, #0
 8001578:	d005      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
 800157a:	687b      	ldr	r3, [r7, #4]
 800157c:	691b      	ldr	r3, [r3, #16]
 800157e:	2b01      	cmp	r3, #1
 8001580:	d001      	beq.n	8001586 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8001582:	2301      	movs	r3, #1
 8001584:	e1c0      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001586:	4b3d      	ldr	r3, [pc, #244]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800158e:	687b      	ldr	r3, [r7, #4]
 8001590:	695b      	ldr	r3, [r3, #20]
 8001592:	00db      	lsls	r3, r3, #3
 8001594:	4939      	ldr	r1, [pc, #228]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001596:	4313      	orrs	r3, r2
 8001598:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800159a:	e03a      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800159c:	687b      	ldr	r3, [r7, #4]
 800159e:	691b      	ldr	r3, [r3, #16]
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d020      	beq.n	80015e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80015a4:	4b36      	ldr	r3, [pc, #216]	@ (8001680 <HAL_RCC_OscConfig+0x270>)
 80015a6:	2201      	movs	r2, #1
 80015a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015aa:	f7ff fc7d 	bl	8000ea8 <HAL_GetTick>
 80015ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015b0:	e008      	b.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015b2:	f7ff fc79 	bl	8000ea8 <HAL_GetTick>
 80015b6:	4602      	mov	r2, r0
 80015b8:	693b      	ldr	r3, [r7, #16]
 80015ba:	1ad3      	subs	r3, r2, r3
 80015bc:	2b02      	cmp	r3, #2
 80015be:	d901      	bls.n	80015c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80015c0:	2303      	movs	r3, #3
 80015c2:	e1a1      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80015c4:	4b2d      	ldr	r3, [pc, #180]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	f003 0302 	and.w	r3, r3, #2
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	d0f0      	beq.n	80015b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80015d0:	4b2a      	ldr	r3, [pc, #168]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80015d8:	687b      	ldr	r3, [r7, #4]
 80015da:	695b      	ldr	r3, [r3, #20]
 80015dc:	00db      	lsls	r3, r3, #3
 80015de:	4927      	ldr	r1, [pc, #156]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 80015e0:	4313      	orrs	r3, r2
 80015e2:	600b      	str	r3, [r1, #0]
 80015e4:	e015      	b.n	8001612 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80015e6:	4b26      	ldr	r3, [pc, #152]	@ (8001680 <HAL_RCC_OscConfig+0x270>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80015ec:	f7ff fc5c 	bl	8000ea8 <HAL_GetTick>
 80015f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80015f2:	e008      	b.n	8001606 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80015f4:	f7ff fc58 	bl	8000ea8 <HAL_GetTick>
 80015f8:	4602      	mov	r2, r0
 80015fa:	693b      	ldr	r3, [r7, #16]
 80015fc:	1ad3      	subs	r3, r2, r3
 80015fe:	2b02      	cmp	r3, #2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e180      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001606:	4b1d      	ldr	r3, [pc, #116]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001608:	681b      	ldr	r3, [r3, #0]
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d1f0      	bne.n	80015f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f003 0308 	and.w	r3, r3, #8
 800161a:	2b00      	cmp	r3, #0
 800161c:	d03a      	beq.n	8001694 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800161e:	687b      	ldr	r3, [r7, #4]
 8001620:	699b      	ldr	r3, [r3, #24]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d019      	beq.n	800165a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8001626:	4b17      	ldr	r3, [pc, #92]	@ (8001684 <HAL_RCC_OscConfig+0x274>)
 8001628:	2201      	movs	r2, #1
 800162a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800162c:	f7ff fc3c 	bl	8000ea8 <HAL_GetTick>
 8001630:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001632:	e008      	b.n	8001646 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001634:	f7ff fc38 	bl	8000ea8 <HAL_GetTick>
 8001638:	4602      	mov	r2, r0
 800163a:	693b      	ldr	r3, [r7, #16]
 800163c:	1ad3      	subs	r3, r2, r3
 800163e:	2b02      	cmp	r3, #2
 8001640:	d901      	bls.n	8001646 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8001642:	2303      	movs	r3, #3
 8001644:	e160      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001646:	4b0d      	ldr	r3, [pc, #52]	@ (800167c <HAL_RCC_OscConfig+0x26c>)
 8001648:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800164a:	f003 0302 	and.w	r3, r3, #2
 800164e:	2b00      	cmp	r3, #0
 8001650:	d0f0      	beq.n	8001634 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8001652:	2001      	movs	r0, #1
 8001654:	f000 fa9c 	bl	8001b90 <RCC_Delay>
 8001658:	e01c      	b.n	8001694 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800165a:	4b0a      	ldr	r3, [pc, #40]	@ (8001684 <HAL_RCC_OscConfig+0x274>)
 800165c:	2200      	movs	r2, #0
 800165e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001660:	f7ff fc22 	bl	8000ea8 <HAL_GetTick>
 8001664:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001666:	e00f      	b.n	8001688 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001668:	f7ff fc1e 	bl	8000ea8 <HAL_GetTick>
 800166c:	4602      	mov	r2, r0
 800166e:	693b      	ldr	r3, [r7, #16]
 8001670:	1ad3      	subs	r3, r2, r3
 8001672:	2b02      	cmp	r3, #2
 8001674:	d908      	bls.n	8001688 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8001676:	2303      	movs	r3, #3
 8001678:	e146      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
 800167a:	bf00      	nop
 800167c:	40021000 	.word	0x40021000
 8001680:	42420000 	.word	0x42420000
 8001684:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001688:	4b92      	ldr	r3, [pc, #584]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800168a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800168c:	f003 0302 	and.w	r3, r3, #2
 8001690:	2b00      	cmp	r3, #0
 8001692:	d1e9      	bne.n	8001668 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001694:	687b      	ldr	r3, [r7, #4]
 8001696:	681b      	ldr	r3, [r3, #0]
 8001698:	f003 0304 	and.w	r3, r3, #4
 800169c:	2b00      	cmp	r3, #0
 800169e:	f000 80a6 	beq.w	80017ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80016a2:	2300      	movs	r3, #0
 80016a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80016a6:	4b8b      	ldr	r3, [pc, #556]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016a8:	69db      	ldr	r3, [r3, #28]
 80016aa:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ae:	2b00      	cmp	r3, #0
 80016b0:	d10d      	bne.n	80016ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80016b2:	4b88      	ldr	r3, [pc, #544]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016b4:	69db      	ldr	r3, [r3, #28]
 80016b6:	4a87      	ldr	r2, [pc, #540]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016b8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016bc:	61d3      	str	r3, [r2, #28]
 80016be:	4b85      	ldr	r3, [pc, #532]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80016c0:	69db      	ldr	r3, [r3, #28]
 80016c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016c6:	60bb      	str	r3, [r7, #8]
 80016c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80016ca:	2301      	movs	r3, #1
 80016cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ce:	4b82      	ldr	r3, [pc, #520]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016d0:	681b      	ldr	r3, [r3, #0]
 80016d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d118      	bne.n	800170c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80016da:	4b7f      	ldr	r3, [pc, #508]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	4a7e      	ldr	r2, [pc, #504]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 80016e0:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80016e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80016e6:	f7ff fbdf 	bl	8000ea8 <HAL_GetTick>
 80016ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80016ec:	e008      	b.n	8001700 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80016ee:	f7ff fbdb 	bl	8000ea8 <HAL_GetTick>
 80016f2:	4602      	mov	r2, r0
 80016f4:	693b      	ldr	r3, [r7, #16]
 80016f6:	1ad3      	subs	r3, r2, r3
 80016f8:	2b64      	cmp	r3, #100	@ 0x64
 80016fa:	d901      	bls.n	8001700 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80016fc:	2303      	movs	r3, #3
 80016fe:	e103      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001700:	4b75      	ldr	r3, [pc, #468]	@ (80018d8 <HAL_RCC_OscConfig+0x4c8>)
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001708:	2b00      	cmp	r3, #0
 800170a:	d0f0      	beq.n	80016ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	68db      	ldr	r3, [r3, #12]
 8001710:	2b01      	cmp	r3, #1
 8001712:	d106      	bne.n	8001722 <HAL_RCC_OscConfig+0x312>
 8001714:	4b6f      	ldr	r3, [pc, #444]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001716:	6a1b      	ldr	r3, [r3, #32]
 8001718:	4a6e      	ldr	r2, [pc, #440]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800171a:	f043 0301 	orr.w	r3, r3, #1
 800171e:	6213      	str	r3, [r2, #32]
 8001720:	e02d      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001722:	687b      	ldr	r3, [r7, #4]
 8001724:	68db      	ldr	r3, [r3, #12]
 8001726:	2b00      	cmp	r3, #0
 8001728:	d10c      	bne.n	8001744 <HAL_RCC_OscConfig+0x334>
 800172a:	4b6a      	ldr	r3, [pc, #424]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800172c:	6a1b      	ldr	r3, [r3, #32]
 800172e:	4a69      	ldr	r2, [pc, #420]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001730:	f023 0301 	bic.w	r3, r3, #1
 8001734:	6213      	str	r3, [r2, #32]
 8001736:	4b67      	ldr	r3, [pc, #412]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001738:	6a1b      	ldr	r3, [r3, #32]
 800173a:	4a66      	ldr	r2, [pc, #408]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800173c:	f023 0304 	bic.w	r3, r3, #4
 8001740:	6213      	str	r3, [r2, #32]
 8001742:	e01c      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	68db      	ldr	r3, [r3, #12]
 8001748:	2b05      	cmp	r3, #5
 800174a:	d10c      	bne.n	8001766 <HAL_RCC_OscConfig+0x356>
 800174c:	4b61      	ldr	r3, [pc, #388]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800174e:	6a1b      	ldr	r3, [r3, #32]
 8001750:	4a60      	ldr	r2, [pc, #384]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001752:	f043 0304 	orr.w	r3, r3, #4
 8001756:	6213      	str	r3, [r2, #32]
 8001758:	4b5e      	ldr	r3, [pc, #376]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800175a:	6a1b      	ldr	r3, [r3, #32]
 800175c:	4a5d      	ldr	r2, [pc, #372]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800175e:	f043 0301 	orr.w	r3, r3, #1
 8001762:	6213      	str	r3, [r2, #32]
 8001764:	e00b      	b.n	800177e <HAL_RCC_OscConfig+0x36e>
 8001766:	4b5b      	ldr	r3, [pc, #364]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001768:	6a1b      	ldr	r3, [r3, #32]
 800176a:	4a5a      	ldr	r2, [pc, #360]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800176c:	f023 0301 	bic.w	r3, r3, #1
 8001770:	6213      	str	r3, [r2, #32]
 8001772:	4b58      	ldr	r3, [pc, #352]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001774:	6a1b      	ldr	r3, [r3, #32]
 8001776:	4a57      	ldr	r2, [pc, #348]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001778:	f023 0304 	bic.w	r3, r3, #4
 800177c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800177e:	687b      	ldr	r3, [r7, #4]
 8001780:	68db      	ldr	r3, [r3, #12]
 8001782:	2b00      	cmp	r3, #0
 8001784:	d015      	beq.n	80017b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001786:	f7ff fb8f 	bl	8000ea8 <HAL_GetTick>
 800178a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800178c:	e00a      	b.n	80017a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800178e:	f7ff fb8b 	bl	8000ea8 <HAL_GetTick>
 8001792:	4602      	mov	r2, r0
 8001794:	693b      	ldr	r3, [r7, #16]
 8001796:	1ad3      	subs	r3, r2, r3
 8001798:	f241 3288 	movw	r2, #5000	@ 0x1388
 800179c:	4293      	cmp	r3, r2
 800179e:	d901      	bls.n	80017a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80017a0:	2303      	movs	r3, #3
 80017a2:	e0b1      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80017a4:	4b4b      	ldr	r3, [pc, #300]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017a6:	6a1b      	ldr	r3, [r3, #32]
 80017a8:	f003 0302 	and.w	r3, r3, #2
 80017ac:	2b00      	cmp	r3, #0
 80017ae:	d0ee      	beq.n	800178e <HAL_RCC_OscConfig+0x37e>
 80017b0:	e014      	b.n	80017dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80017b2:	f7ff fb79 	bl	8000ea8 <HAL_GetTick>
 80017b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017b8:	e00a      	b.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80017ba:	f7ff fb75 	bl	8000ea8 <HAL_GetTick>
 80017be:	4602      	mov	r2, r0
 80017c0:	693b      	ldr	r3, [r7, #16]
 80017c2:	1ad3      	subs	r3, r2, r3
 80017c4:	f241 3288 	movw	r2, #5000	@ 0x1388
 80017c8:	4293      	cmp	r3, r2
 80017ca:	d901      	bls.n	80017d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80017cc:	2303      	movs	r3, #3
 80017ce:	e09b      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80017d0:	4b40      	ldr	r3, [pc, #256]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017d2:	6a1b      	ldr	r3, [r3, #32]
 80017d4:	f003 0302 	and.w	r3, r3, #2
 80017d8:	2b00      	cmp	r3, #0
 80017da:	d1ee      	bne.n	80017ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80017dc:	7dfb      	ldrb	r3, [r7, #23]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d105      	bne.n	80017ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80017e2:	4b3c      	ldr	r3, [pc, #240]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017e4:	69db      	ldr	r3, [r3, #28]
 80017e6:	4a3b      	ldr	r2, [pc, #236]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017e8:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80017ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80017ee:	687b      	ldr	r3, [r7, #4]
 80017f0:	69db      	ldr	r3, [r3, #28]
 80017f2:	2b00      	cmp	r3, #0
 80017f4:	f000 8087 	beq.w	8001906 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80017f8:	4b36      	ldr	r3, [pc, #216]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80017fa:	685b      	ldr	r3, [r3, #4]
 80017fc:	f003 030c 	and.w	r3, r3, #12
 8001800:	2b08      	cmp	r3, #8
 8001802:	d061      	beq.n	80018c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001804:	687b      	ldr	r3, [r7, #4]
 8001806:	69db      	ldr	r3, [r3, #28]
 8001808:	2b02      	cmp	r3, #2
 800180a:	d146      	bne.n	800189a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800180c:	4b33      	ldr	r3, [pc, #204]	@ (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800180e:	2200      	movs	r2, #0
 8001810:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001812:	f7ff fb49 	bl	8000ea8 <HAL_GetTick>
 8001816:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8001818:	e008      	b.n	800182c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800181a:	f7ff fb45 	bl	8000ea8 <HAL_GetTick>
 800181e:	4602      	mov	r2, r0
 8001820:	693b      	ldr	r3, [r7, #16]
 8001822:	1ad3      	subs	r3, r2, r3
 8001824:	2b02      	cmp	r3, #2
 8001826:	d901      	bls.n	800182c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8001828:	2303      	movs	r3, #3
 800182a:	e06d      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800182c:	4b29      	ldr	r3, [pc, #164]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800182e:	681b      	ldr	r3, [r3, #0]
 8001830:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001834:	2b00      	cmp	r3, #0
 8001836:	d1f0      	bne.n	800181a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6a1b      	ldr	r3, [r3, #32]
 800183c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8001840:	d108      	bne.n	8001854 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8001842:	4b24      	ldr	r3, [pc, #144]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	f423 3200 	bic.w	r2, r3, #131072	@ 0x20000
 800184a:	687b      	ldr	r3, [r7, #4]
 800184c:	689b      	ldr	r3, [r3, #8]
 800184e:	4921      	ldr	r1, [pc, #132]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001850:	4313      	orrs	r3, r2
 8001852:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001854:	4b1f      	ldr	r3, [pc, #124]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001856:	685b      	ldr	r3, [r3, #4]
 8001858:	f423 1274 	bic.w	r2, r3, #3997696	@ 0x3d0000
 800185c:	687b      	ldr	r3, [r7, #4]
 800185e:	6a19      	ldr	r1, [r3, #32]
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001864:	430b      	orrs	r3, r1
 8001866:	491b      	ldr	r1, [pc, #108]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 8001868:	4313      	orrs	r3, r2
 800186a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800186c:	4b1b      	ldr	r3, [pc, #108]	@ (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800186e:	2201      	movs	r2, #1
 8001870:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001872:	f7ff fb19 	bl	8000ea8 <HAL_GetTick>
 8001876:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8001878:	e008      	b.n	800188c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800187a:	f7ff fb15 	bl	8000ea8 <HAL_GetTick>
 800187e:	4602      	mov	r2, r0
 8001880:	693b      	ldr	r3, [r7, #16]
 8001882:	1ad3      	subs	r3, r2, r3
 8001884:	2b02      	cmp	r3, #2
 8001886:	d901      	bls.n	800188c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8001888:	2303      	movs	r3, #3
 800188a:	e03d      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800188c:	4b11      	ldr	r3, [pc, #68]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 800188e:	681b      	ldr	r3, [r3, #0]
 8001890:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001894:	2b00      	cmp	r3, #0
 8001896:	d0f0      	beq.n	800187a <HAL_RCC_OscConfig+0x46a>
 8001898:	e035      	b.n	8001906 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800189a:	4b10      	ldr	r3, [pc, #64]	@ (80018dc <HAL_RCC_OscConfig+0x4cc>)
 800189c:	2200      	movs	r2, #0
 800189e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80018a0:	f7ff fb02 	bl	8000ea8 <HAL_GetTick>
 80018a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018a6:	e008      	b.n	80018ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80018a8:	f7ff fafe 	bl	8000ea8 <HAL_GetTick>
 80018ac:	4602      	mov	r2, r0
 80018ae:	693b      	ldr	r3, [r7, #16]
 80018b0:	1ad3      	subs	r3, r2, r3
 80018b2:	2b02      	cmp	r3, #2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e026      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80018ba:	4b06      	ldr	r3, [pc, #24]	@ (80018d4 <HAL_RCC_OscConfig+0x4c4>)
 80018bc:	681b      	ldr	r3, [r3, #0]
 80018be:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80018c2:	2b00      	cmp	r3, #0
 80018c4:	d1f0      	bne.n	80018a8 <HAL_RCC_OscConfig+0x498>
 80018c6:	e01e      	b.n	8001906 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	69db      	ldr	r3, [r3, #28]
 80018cc:	2b01      	cmp	r3, #1
 80018ce:	d107      	bne.n	80018e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80018d0:	2301      	movs	r3, #1
 80018d2:	e019      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
 80018d4:	40021000 	.word	0x40021000
 80018d8:	40007000 	.word	0x40007000
 80018dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80018e0:	4b0b      	ldr	r3, [pc, #44]	@ (8001910 <HAL_RCC_OscConfig+0x500>)
 80018e2:	685b      	ldr	r3, [r3, #4]
 80018e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80018ec:	687b      	ldr	r3, [r7, #4]
 80018ee:	6a1b      	ldr	r3, [r3, #32]
 80018f0:	429a      	cmp	r2, r3
 80018f2:	d106      	bne.n	8001902 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80018f4:	68fb      	ldr	r3, [r7, #12]
 80018f6:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80018fa:	687b      	ldr	r3, [r7, #4]
 80018fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80018fe:	429a      	cmp	r2, r3
 8001900:	d001      	beq.n	8001906 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8001902:	2301      	movs	r3, #1
 8001904:	e000      	b.n	8001908 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8001906:	2300      	movs	r3, #0
}
 8001908:	4618      	mov	r0, r3
 800190a:	3718      	adds	r7, #24
 800190c:	46bd      	mov	sp, r7
 800190e:	bd80      	pop	{r7, pc}
 8001910:	40021000 	.word	0x40021000

08001914 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001914:	b580      	push	{r7, lr}
 8001916:	b084      	sub	sp, #16
 8001918:	af00      	add	r7, sp, #0
 800191a:	6078      	str	r0, [r7, #4]
 800191c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	2b00      	cmp	r3, #0
 8001922:	d101      	bne.n	8001928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001924:	2301      	movs	r3, #1
 8001926:	e0d0      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8001928:	4b6a      	ldr	r3, [pc, #424]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f003 0307 	and.w	r3, r3, #7
 8001930:	683a      	ldr	r2, [r7, #0]
 8001932:	429a      	cmp	r2, r3
 8001934:	d910      	bls.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001936:	4b67      	ldr	r3, [pc, #412]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f023 0207 	bic.w	r2, r3, #7
 800193e:	4965      	ldr	r1, [pc, #404]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001940:	683b      	ldr	r3, [r7, #0]
 8001942:	4313      	orrs	r3, r2
 8001944:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001946:	4b63      	ldr	r3, [pc, #396]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f003 0307 	and.w	r3, r3, #7
 800194e:	683a      	ldr	r2, [r7, #0]
 8001950:	429a      	cmp	r2, r3
 8001952:	d001      	beq.n	8001958 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8001954:	2301      	movs	r3, #1
 8001956:	e0b8      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001958:	687b      	ldr	r3, [r7, #4]
 800195a:	681b      	ldr	r3, [r3, #0]
 800195c:	f003 0302 	and.w	r3, r3, #2
 8001960:	2b00      	cmp	r3, #0
 8001962:	d020      	beq.n	80019a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	f003 0304 	and.w	r3, r3, #4
 800196c:	2b00      	cmp	r3, #0
 800196e:	d005      	beq.n	800197c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001970:	4b59      	ldr	r3, [pc, #356]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001972:	685b      	ldr	r3, [r3, #4]
 8001974:	4a58      	ldr	r2, [pc, #352]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001976:	f443 63e0 	orr.w	r3, r3, #1792	@ 0x700
 800197a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800197c:	687b      	ldr	r3, [r7, #4]
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	f003 0308 	and.w	r3, r3, #8
 8001984:	2b00      	cmp	r3, #0
 8001986:	d005      	beq.n	8001994 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001988:	4b53      	ldr	r3, [pc, #332]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800198a:	685b      	ldr	r3, [r3, #4]
 800198c:	4a52      	ldr	r2, [pc, #328]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 800198e:	f443 5360 	orr.w	r3, r3, #14336	@ 0x3800
 8001992:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001994:	4b50      	ldr	r3, [pc, #320]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001996:	685b      	ldr	r3, [r3, #4]
 8001998:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800199c:	687b      	ldr	r3, [r7, #4]
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	494d      	ldr	r1, [pc, #308]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019a2:	4313      	orrs	r3, r2
 80019a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80019a6:	687b      	ldr	r3, [r7, #4]
 80019a8:	681b      	ldr	r3, [r3, #0]
 80019aa:	f003 0301 	and.w	r3, r3, #1
 80019ae:	2b00      	cmp	r3, #0
 80019b0:	d040      	beq.n	8001a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	685b      	ldr	r3, [r3, #4]
 80019b6:	2b01      	cmp	r3, #1
 80019b8:	d107      	bne.n	80019ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80019ba:	4b47      	ldr	r3, [pc, #284]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019bc:	681b      	ldr	r3, [r3, #0]
 80019be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80019c2:	2b00      	cmp	r3, #0
 80019c4:	d115      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019c6:	2301      	movs	r3, #1
 80019c8:	e07f      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	685b      	ldr	r3, [r3, #4]
 80019ce:	2b02      	cmp	r3, #2
 80019d0:	d107      	bne.n	80019e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80019d2:	4b41      	ldr	r3, [pc, #260]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019d4:	681b      	ldr	r3, [r3, #0]
 80019d6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80019da:	2b00      	cmp	r3, #0
 80019dc:	d109      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019de:	2301      	movs	r3, #1
 80019e0:	e073      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80019e2:	4b3d      	ldr	r3, [pc, #244]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019e4:	681b      	ldr	r3, [r3, #0]
 80019e6:	f003 0302 	and.w	r3, r3, #2
 80019ea:	2b00      	cmp	r3, #0
 80019ec:	d101      	bne.n	80019f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80019ee:	2301      	movs	r3, #1
 80019f0:	e06b      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80019f2:	4b39      	ldr	r3, [pc, #228]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 80019f4:	685b      	ldr	r3, [r3, #4]
 80019f6:	f023 0203 	bic.w	r2, r3, #3
 80019fa:	687b      	ldr	r3, [r7, #4]
 80019fc:	685b      	ldr	r3, [r3, #4]
 80019fe:	4936      	ldr	r1, [pc, #216]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a00:	4313      	orrs	r3, r2
 8001a02:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001a04:	f7ff fa50 	bl	8000ea8 <HAL_GetTick>
 8001a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a0a:	e00a      	b.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001a0c:	f7ff fa4c 	bl	8000ea8 <HAL_GetTick>
 8001a10:	4602      	mov	r2, r0
 8001a12:	68fb      	ldr	r3, [r7, #12]
 8001a14:	1ad3      	subs	r3, r2, r3
 8001a16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001a1a:	4293      	cmp	r3, r2
 8001a1c:	d901      	bls.n	8001a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001a1e:	2303      	movs	r3, #3
 8001a20:	e053      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001a22:	4b2d      	ldr	r3, [pc, #180]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a24:	685b      	ldr	r3, [r3, #4]
 8001a26:	f003 020c 	and.w	r2, r3, #12
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	685b      	ldr	r3, [r3, #4]
 8001a2e:	009b      	lsls	r3, r3, #2
 8001a30:	429a      	cmp	r2, r3
 8001a32:	d1eb      	bne.n	8001a0c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001a34:	4b27      	ldr	r3, [pc, #156]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	f003 0307 	and.w	r3, r3, #7
 8001a3c:	683a      	ldr	r2, [r7, #0]
 8001a3e:	429a      	cmp	r2, r3
 8001a40:	d210      	bcs.n	8001a64 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001a42:	4b24      	ldr	r3, [pc, #144]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	f023 0207 	bic.w	r2, r3, #7
 8001a4a:	4922      	ldr	r1, [pc, #136]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a4c:	683b      	ldr	r3, [r7, #0]
 8001a4e:	4313      	orrs	r3, r2
 8001a50:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001a52:	4b20      	ldr	r3, [pc, #128]	@ (8001ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	f003 0307 	and.w	r3, r3, #7
 8001a5a:	683a      	ldr	r2, [r7, #0]
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	d001      	beq.n	8001a64 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8001a60:	2301      	movs	r3, #1
 8001a62:	e032      	b.n	8001aca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	f003 0304 	and.w	r3, r3, #4
 8001a6c:	2b00      	cmp	r3, #0
 8001a6e:	d008      	beq.n	8001a82 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001a70:	4b19      	ldr	r3, [pc, #100]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a72:	685b      	ldr	r3, [r3, #4]
 8001a74:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001a78:	687b      	ldr	r3, [r7, #4]
 8001a7a:	68db      	ldr	r3, [r3, #12]
 8001a7c:	4916      	ldr	r1, [pc, #88]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a7e:	4313      	orrs	r3, r2
 8001a80:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	681b      	ldr	r3, [r3, #0]
 8001a86:	f003 0308 	and.w	r3, r3, #8
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d009      	beq.n	8001aa2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8001a8e:	4b12      	ldr	r3, [pc, #72]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a90:	685b      	ldr	r3, [r3, #4]
 8001a92:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	691b      	ldr	r3, [r3, #16]
 8001a9a:	00db      	lsls	r3, r3, #3
 8001a9c:	490e      	ldr	r1, [pc, #56]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001a9e:	4313      	orrs	r3, r2
 8001aa0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8001aa2:	f000 f821 	bl	8001ae8 <HAL_RCC_GetSysClockFreq>
 8001aa6:	4602      	mov	r2, r0
 8001aa8:	4b0b      	ldr	r3, [pc, #44]	@ (8001ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8001aaa:	685b      	ldr	r3, [r3, #4]
 8001aac:	091b      	lsrs	r3, r3, #4
 8001aae:	f003 030f 	and.w	r3, r3, #15
 8001ab2:	490a      	ldr	r1, [pc, #40]	@ (8001adc <HAL_RCC_ClockConfig+0x1c8>)
 8001ab4:	5ccb      	ldrb	r3, [r1, r3]
 8001ab6:	fa22 f303 	lsr.w	r3, r2, r3
 8001aba:	4a09      	ldr	r2, [pc, #36]	@ (8001ae0 <HAL_RCC_ClockConfig+0x1cc>)
 8001abc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8001abe:	4b09      	ldr	r3, [pc, #36]	@ (8001ae4 <HAL_RCC_ClockConfig+0x1d0>)
 8001ac0:	681b      	ldr	r3, [r3, #0]
 8001ac2:	4618      	mov	r0, r3
 8001ac4:	f7ff f9ae 	bl	8000e24 <HAL_InitTick>

  return HAL_OK;
 8001ac8:	2300      	movs	r3, #0
}
 8001aca:	4618      	mov	r0, r3
 8001acc:	3710      	adds	r7, #16
 8001ace:	46bd      	mov	sp, r7
 8001ad0:	bd80      	pop	{r7, pc}
 8001ad2:	bf00      	nop
 8001ad4:	40022000 	.word	0x40022000
 8001ad8:	40021000 	.word	0x40021000
 8001adc:	08002c20 	.word	0x08002c20
 8001ae0:	20000000 	.word	0x20000000
 8001ae4:	20000004 	.word	0x20000004

08001ae8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001ae8:	b480      	push	{r7}
 8001aea:	b087      	sub	sp, #28
 8001aec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 8001aee:	2300      	movs	r3, #0
 8001af0:	60fb      	str	r3, [r7, #12]
 8001af2:	2300      	movs	r3, #0
 8001af4:	60bb      	str	r3, [r7, #8]
 8001af6:	2300      	movs	r3, #0
 8001af8:	617b      	str	r3, [r7, #20]
 8001afa:	2300      	movs	r3, #0
 8001afc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8001afe:	2300      	movs	r3, #0
 8001b00:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8001b02:	4b1e      	ldr	r3, [pc, #120]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b04:	685b      	ldr	r3, [r3, #4]
 8001b06:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001b08:	68fb      	ldr	r3, [r7, #12]
 8001b0a:	f003 030c 	and.w	r3, r3, #12
 8001b0e:	2b04      	cmp	r3, #4
 8001b10:	d002      	beq.n	8001b18 <HAL_RCC_GetSysClockFreq+0x30>
 8001b12:	2b08      	cmp	r3, #8
 8001b14:	d003      	beq.n	8001b1e <HAL_RCC_GetSysClockFreq+0x36>
 8001b16:	e027      	b.n	8001b68 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8001b18:	4b19      	ldr	r3, [pc, #100]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b1a:	613b      	str	r3, [r7, #16]
      break;
 8001b1c:	e027      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 8001b1e:	68fb      	ldr	r3, [r7, #12]
 8001b20:	0c9b      	lsrs	r3, r3, #18
 8001b22:	f003 030f 	and.w	r3, r3, #15
 8001b26:	4a17      	ldr	r2, [pc, #92]	@ (8001b84 <HAL_RCC_GetSysClockFreq+0x9c>)
 8001b28:	5cd3      	ldrb	r3, [r2, r3]
 8001b2a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 8001b2c:	68fb      	ldr	r3, [r7, #12]
 8001b2e:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8001b32:	2b00      	cmp	r3, #0
 8001b34:	d010      	beq.n	8001b58 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8001b36:	4b11      	ldr	r3, [pc, #68]	@ (8001b7c <HAL_RCC_GetSysClockFreq+0x94>)
 8001b38:	685b      	ldr	r3, [r3, #4]
 8001b3a:	0c5b      	lsrs	r3, r3, #17
 8001b3c:	f003 0301 	and.w	r3, r3, #1
 8001b40:	4a11      	ldr	r2, [pc, #68]	@ (8001b88 <HAL_RCC_GetSysClockFreq+0xa0>)
 8001b42:	5cd3      	ldrb	r3, [r2, r3]
 8001b44:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8001b46:	687b      	ldr	r3, [r7, #4]
 8001b48:	4a0d      	ldr	r2, [pc, #52]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b4a:	fb03 f202 	mul.w	r2, r3, r2
 8001b4e:	68bb      	ldr	r3, [r7, #8]
 8001b50:	fbb2 f3f3 	udiv	r3, r2, r3
 8001b54:	617b      	str	r3, [r7, #20]
 8001b56:	e004      	b.n	8001b62 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	4a0c      	ldr	r2, [pc, #48]	@ (8001b8c <HAL_RCC_GetSysClockFreq+0xa4>)
 8001b5c:	fb02 f303 	mul.w	r3, r2, r3
 8001b60:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8001b62:	697b      	ldr	r3, [r7, #20]
 8001b64:	613b      	str	r3, [r7, #16]
      break;
 8001b66:	e002      	b.n	8001b6e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8001b68:	4b05      	ldr	r3, [pc, #20]	@ (8001b80 <HAL_RCC_GetSysClockFreq+0x98>)
 8001b6a:	613b      	str	r3, [r7, #16]
      break;
 8001b6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001b6e:	693b      	ldr	r3, [r7, #16]
}
 8001b70:	4618      	mov	r0, r3
 8001b72:	371c      	adds	r7, #28
 8001b74:	46bd      	mov	sp, r7
 8001b76:	bc80      	pop	{r7}
 8001b78:	4770      	bx	lr
 8001b7a:	bf00      	nop
 8001b7c:	40021000 	.word	0x40021000
 8001b80:	007a1200 	.word	0x007a1200
 8001b84:	08002c30 	.word	0x08002c30
 8001b88:	08002c40 	.word	0x08002c40
 8001b8c:	003d0900 	.word	0x003d0900

08001b90 <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 8001b90:	b480      	push	{r7}
 8001b92:	b085      	sub	sp, #20
 8001b94:	af00      	add	r7, sp, #0
 8001b96:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 8001b98:	4b0a      	ldr	r3, [pc, #40]	@ (8001bc4 <RCC_Delay+0x34>)
 8001b9a:	681b      	ldr	r3, [r3, #0]
 8001b9c:	4a0a      	ldr	r2, [pc, #40]	@ (8001bc8 <RCC_Delay+0x38>)
 8001b9e:	fba2 2303 	umull	r2, r3, r2, r3
 8001ba2:	0a5b      	lsrs	r3, r3, #9
 8001ba4:	687a      	ldr	r2, [r7, #4]
 8001ba6:	fb02 f303 	mul.w	r3, r2, r3
 8001baa:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 8001bac:	bf00      	nop
  }
  while (Delay --);
 8001bae:	68fb      	ldr	r3, [r7, #12]
 8001bb0:	1e5a      	subs	r2, r3, #1
 8001bb2:	60fa      	str	r2, [r7, #12]
 8001bb4:	2b00      	cmp	r3, #0
 8001bb6:	d1f9      	bne.n	8001bac <RCC_Delay+0x1c>
}
 8001bb8:	bf00      	nop
 8001bba:	bf00      	nop
 8001bbc:	3714      	adds	r7, #20
 8001bbe:	46bd      	mov	sp, r7
 8001bc0:	bc80      	pop	{r7}
 8001bc2:	4770      	bx	lr
 8001bc4:	20000000 	.word	0x20000000
 8001bc8:	10624dd3 	.word	0x10624dd3

08001bcc <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8001bcc:	b580      	push	{r7, lr}
 8001bce:	b082      	sub	sp, #8
 8001bd0:	af00      	add	r7, sp, #0
 8001bd2:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8001bd4:	687b      	ldr	r3, [r7, #4]
 8001bd6:	2b00      	cmp	r3, #0
 8001bd8:	d101      	bne.n	8001bde <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8001bda:	2301      	movs	r3, #1
 8001bdc:	e076      	b.n	8001ccc <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8001bde:	687b      	ldr	r3, [r7, #4]
 8001be0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d108      	bne.n	8001bf8 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	685b      	ldr	r3, [r3, #4]
 8001bea:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8001bee:	d009      	beq.n	8001c04 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2200      	movs	r2, #0
 8001bf4:	61da      	str	r2, [r3, #28]
 8001bf6:	e005      	b.n	8001c04 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8001bf8:	687b      	ldr	r3, [r7, #4]
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8001bfe:	687b      	ldr	r3, [r7, #4]
 8001c00:	2200      	movs	r2, #0
 8001c02:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	2200      	movs	r2, #0
 8001c08:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8001c0a:	687b      	ldr	r3, [r7, #4]
 8001c0c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8001c10:	b2db      	uxtb	r3, r3
 8001c12:	2b00      	cmp	r3, #0
 8001c14:	d106      	bne.n	8001c24 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8001c16:	687b      	ldr	r3, [r7, #4]
 8001c18:	2200      	movs	r2, #0
 8001c1a:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8001c1e:	6878      	ldr	r0, [r7, #4]
 8001c20:	f7fe ffcc 	bl	8000bbc <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	2202      	movs	r2, #2
 8001c28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8001c2c:	687b      	ldr	r3, [r7, #4]
 8001c2e:	681b      	ldr	r3, [r3, #0]
 8001c30:	681a      	ldr	r2, [r3, #0]
 8001c32:	687b      	ldr	r3, [r7, #4]
 8001c34:	681b      	ldr	r3, [r3, #0]
 8001c36:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8001c3a:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	685b      	ldr	r3, [r3, #4]
 8001c40:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	689b      	ldr	r3, [r3, #8]
 8001c48:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8001c4c:	431a      	orrs	r2, r3
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	68db      	ldr	r3, [r3, #12]
 8001c52:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8001c56:	431a      	orrs	r2, r3
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	691b      	ldr	r3, [r3, #16]
 8001c5c:	f003 0302 	and.w	r3, r3, #2
 8001c60:	431a      	orrs	r2, r3
 8001c62:	687b      	ldr	r3, [r7, #4]
 8001c64:	695b      	ldr	r3, [r3, #20]
 8001c66:	f003 0301 	and.w	r3, r3, #1
 8001c6a:	431a      	orrs	r2, r3
 8001c6c:	687b      	ldr	r3, [r7, #4]
 8001c6e:	699b      	ldr	r3, [r3, #24]
 8001c70:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001c74:	431a      	orrs	r2, r3
 8001c76:	687b      	ldr	r3, [r7, #4]
 8001c78:	69db      	ldr	r3, [r3, #28]
 8001c7a:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8001c7e:	431a      	orrs	r2, r3
 8001c80:	687b      	ldr	r3, [r7, #4]
 8001c82:	6a1b      	ldr	r3, [r3, #32]
 8001c84:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001c88:	ea42 0103 	orr.w	r1, r2, r3
 8001c8c:	687b      	ldr	r3, [r7, #4]
 8001c8e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8001c90:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8001c94:	687b      	ldr	r3, [r7, #4]
 8001c96:	681b      	ldr	r3, [r3, #0]
 8001c98:	430a      	orrs	r2, r1
 8001c9a:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8001c9c:	687b      	ldr	r3, [r7, #4]
 8001c9e:	699b      	ldr	r3, [r3, #24]
 8001ca0:	0c1a      	lsrs	r2, r3, #16
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	681b      	ldr	r3, [r3, #0]
 8001ca6:	f002 0204 	and.w	r2, r2, #4
 8001caa:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	69da      	ldr	r2, [r3, #28]
 8001cb2:	687b      	ldr	r3, [r7, #4]
 8001cb4:	681b      	ldr	r3, [r3, #0]
 8001cb6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8001cba:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	2200      	movs	r2, #0
 8001cc0:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	2201      	movs	r2, #1
 8001cc6:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8001cca:	2300      	movs	r3, #0
}
 8001ccc:	4618      	mov	r0, r3
 8001cce:	3708      	adds	r7, #8
 8001cd0:	46bd      	mov	sp, r7
 8001cd2:	bd80      	pop	{r7, pc}

08001cd4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8001cd4:	b580      	push	{r7, lr}
 8001cd6:	b082      	sub	sp, #8
 8001cd8:	af00      	add	r7, sp, #0
 8001cda:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001cdc:	687b      	ldr	r3, [r7, #4]
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d101      	bne.n	8001ce6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8001ce2:	2301      	movs	r3, #1
 8001ce4:	e041      	b.n	8001d6a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001cec:	b2db      	uxtb	r3, r3
 8001cee:	2b00      	cmp	r3, #0
 8001cf0:	d106      	bne.n	8001d00 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8001cfa:	6878      	ldr	r0, [r7, #4]
 8001cfc:	f7fe ff9c 	bl	8000c38 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	2202      	movs	r2, #2
 8001d04:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	681a      	ldr	r2, [r3, #0]
 8001d0c:	687b      	ldr	r3, [r7, #4]
 8001d0e:	3304      	adds	r3, #4
 8001d10:	4619      	mov	r1, r3
 8001d12:	4610      	mov	r0, r2
 8001d14:	f000 fc38 	bl	8002588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2201      	movs	r2, #1
 8001d1c:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d20:	687b      	ldr	r3, [r7, #4]
 8001d22:	2201      	movs	r2, #1
 8001d24:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001d28:	687b      	ldr	r3, [r7, #4]
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	2201      	movs	r2, #1
 8001d34:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001d38:	687b      	ldr	r3, [r7, #4]
 8001d3a:	2201      	movs	r2, #1
 8001d3c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001d40:	687b      	ldr	r3, [r7, #4]
 8001d42:	2201      	movs	r2, #1
 8001d44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001d48:	687b      	ldr	r3, [r7, #4]
 8001d4a:	2201      	movs	r2, #1
 8001d4c:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	2201      	movs	r2, #1
 8001d54:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001d58:	687b      	ldr	r3, [r7, #4]
 8001d5a:	2201      	movs	r2, #1
 8001d5c:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001d60:	687b      	ldr	r3, [r7, #4]
 8001d62:	2201      	movs	r2, #1
 8001d64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001d68:	2300      	movs	r3, #0
}
 8001d6a:	4618      	mov	r0, r3
 8001d6c:	3708      	adds	r7, #8
 8001d6e:	46bd      	mov	sp, r7
 8001d70:	bd80      	pop	{r7, pc}
	...

08001d74 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001d74:	b480      	push	{r7}
 8001d76:	b085      	sub	sp, #20
 8001d78:	af00      	add	r7, sp, #0
 8001d7a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001d7c:	687b      	ldr	r3, [r7, #4]
 8001d7e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001d82:	b2db      	uxtb	r3, r3
 8001d84:	2b01      	cmp	r3, #1
 8001d86:	d001      	beq.n	8001d8c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001d88:	2301      	movs	r3, #1
 8001d8a:	e03a      	b.n	8001e02 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001d8c:	687b      	ldr	r3, [r7, #4]
 8001d8e:	2202      	movs	r2, #2
 8001d90:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001d94:	687b      	ldr	r3, [r7, #4]
 8001d96:	681b      	ldr	r3, [r3, #0]
 8001d98:	68da      	ldr	r2, [r3, #12]
 8001d9a:	687b      	ldr	r3, [r7, #4]
 8001d9c:	681b      	ldr	r3, [r3, #0]
 8001d9e:	f042 0201 	orr.w	r2, r2, #1
 8001da2:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001da4:	687b      	ldr	r3, [r7, #4]
 8001da6:	681b      	ldr	r3, [r3, #0]
 8001da8:	4a18      	ldr	r2, [pc, #96]	@ (8001e0c <HAL_TIM_Base_Start_IT+0x98>)
 8001daa:	4293      	cmp	r3, r2
 8001dac:	d00e      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x58>
 8001dae:	687b      	ldr	r3, [r7, #4]
 8001db0:	681b      	ldr	r3, [r3, #0]
 8001db2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001db6:	d009      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x58>
 8001db8:	687b      	ldr	r3, [r7, #4]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	4a14      	ldr	r2, [pc, #80]	@ (8001e10 <HAL_TIM_Base_Start_IT+0x9c>)
 8001dbe:	4293      	cmp	r3, r2
 8001dc0:	d004      	beq.n	8001dcc <HAL_TIM_Base_Start_IT+0x58>
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4a13      	ldr	r2, [pc, #76]	@ (8001e14 <HAL_TIM_Base_Start_IT+0xa0>)
 8001dc8:	4293      	cmp	r3, r2
 8001dca:	d111      	bne.n	8001df0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001dcc:	687b      	ldr	r3, [r7, #4]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	689b      	ldr	r3, [r3, #8]
 8001dd2:	f003 0307 	and.w	r3, r3, #7
 8001dd6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dd8:	68fb      	ldr	r3, [r7, #12]
 8001dda:	2b06      	cmp	r3, #6
 8001ddc:	d010      	beq.n	8001e00 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001dde:	687b      	ldr	r3, [r7, #4]
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	681a      	ldr	r2, [r3, #0]
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	f042 0201 	orr.w	r2, r2, #1
 8001dec:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001dee:	e007      	b.n	8001e00 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001df0:	687b      	ldr	r3, [r7, #4]
 8001df2:	681b      	ldr	r3, [r3, #0]
 8001df4:	681a      	ldr	r2, [r3, #0]
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	681b      	ldr	r3, [r3, #0]
 8001dfa:	f042 0201 	orr.w	r2, r2, #1
 8001dfe:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001e00:	2300      	movs	r3, #0
}
 8001e02:	4618      	mov	r0, r3
 8001e04:	3714      	adds	r7, #20
 8001e06:	46bd      	mov	sp, r7
 8001e08:	bc80      	pop	{r7}
 8001e0a:	4770      	bx	lr
 8001e0c:	40012c00 	.word	0x40012c00
 8001e10:	40000400 	.word	0x40000400
 8001e14:	40000800 	.word	0x40000800

08001e18 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001e18:	b580      	push	{r7, lr}
 8001e1a:	b082      	sub	sp, #8
 8001e1c:	af00      	add	r7, sp, #0
 8001e1e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001e20:	687b      	ldr	r3, [r7, #4]
 8001e22:	2b00      	cmp	r3, #0
 8001e24:	d101      	bne.n	8001e2a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001e26:	2301      	movs	r3, #1
 8001e28:	e041      	b.n	8001eae <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001e2a:	687b      	ldr	r3, [r7, #4]
 8001e2c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001e30:	b2db      	uxtb	r3, r3
 8001e32:	2b00      	cmp	r3, #0
 8001e34:	d106      	bne.n	8001e44 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	2200      	movs	r2, #0
 8001e3a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001e3e:	6878      	ldr	r0, [r7, #4]
 8001e40:	f000 f839 	bl	8001eb6 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	2202      	movs	r2, #2
 8001e48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001e4c:	687b      	ldr	r3, [r7, #4]
 8001e4e:	681a      	ldr	r2, [r3, #0]
 8001e50:	687b      	ldr	r3, [r7, #4]
 8001e52:	3304      	adds	r3, #4
 8001e54:	4619      	mov	r1, r3
 8001e56:	4610      	mov	r0, r2
 8001e58:	f000 fb96 	bl	8002588 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001e5c:	687b      	ldr	r3, [r7, #4]
 8001e5e:	2201      	movs	r2, #1
 8001e60:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e64:	687b      	ldr	r3, [r7, #4]
 8001e66:	2201      	movs	r2, #1
 8001e68:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2201      	movs	r2, #1
 8001e70:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001e74:	687b      	ldr	r3, [r7, #4]
 8001e76:	2201      	movs	r2, #1
 8001e78:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001e7c:	687b      	ldr	r3, [r7, #4]
 8001e7e:	2201      	movs	r2, #1
 8001e80:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001e84:	687b      	ldr	r3, [r7, #4]
 8001e86:	2201      	movs	r2, #1
 8001e88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	2201      	movs	r2, #1
 8001e90:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8001e94:	687b      	ldr	r3, [r7, #4]
 8001e96:	2201      	movs	r2, #1
 8001e98:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	2201      	movs	r2, #1
 8001ea0:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8001eac:	2300      	movs	r3, #0
}
 8001eae:	4618      	mov	r0, r3
 8001eb0:	3708      	adds	r7, #8
 8001eb2:	46bd      	mov	sp, r7
 8001eb4:	bd80      	pop	{r7, pc}

08001eb6 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001eb6:	b480      	push	{r7}
 8001eb8:	b083      	sub	sp, #12
 8001eba:	af00      	add	r7, sp, #0
 8001ebc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001ebe:	bf00      	nop
 8001ec0:	370c      	adds	r7, #12
 8001ec2:	46bd      	mov	sp, r7
 8001ec4:	bc80      	pop	{r7}
 8001ec6:	4770      	bx	lr

08001ec8 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b084      	sub	sp, #16
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
 8001ed0:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001ed2:	683b      	ldr	r3, [r7, #0]
 8001ed4:	2b00      	cmp	r3, #0
 8001ed6:	d109      	bne.n	8001eec <HAL_TIM_PWM_Start+0x24>
 8001ed8:	687b      	ldr	r3, [r7, #4]
 8001eda:	f893 303e 	ldrb.w	r3, [r3, #62]	@ 0x3e
 8001ede:	b2db      	uxtb	r3, r3
 8001ee0:	2b01      	cmp	r3, #1
 8001ee2:	bf14      	ite	ne
 8001ee4:	2301      	movne	r3, #1
 8001ee6:	2300      	moveq	r3, #0
 8001ee8:	b2db      	uxtb	r3, r3
 8001eea:	e022      	b.n	8001f32 <HAL_TIM_PWM_Start+0x6a>
 8001eec:	683b      	ldr	r3, [r7, #0]
 8001eee:	2b04      	cmp	r3, #4
 8001ef0:	d109      	bne.n	8001f06 <HAL_TIM_PWM_Start+0x3e>
 8001ef2:	687b      	ldr	r3, [r7, #4]
 8001ef4:	f893 303f 	ldrb.w	r3, [r3, #63]	@ 0x3f
 8001ef8:	b2db      	uxtb	r3, r3
 8001efa:	2b01      	cmp	r3, #1
 8001efc:	bf14      	ite	ne
 8001efe:	2301      	movne	r3, #1
 8001f00:	2300      	moveq	r3, #0
 8001f02:	b2db      	uxtb	r3, r3
 8001f04:	e015      	b.n	8001f32 <HAL_TIM_PWM_Start+0x6a>
 8001f06:	683b      	ldr	r3, [r7, #0]
 8001f08:	2b08      	cmp	r3, #8
 8001f0a:	d109      	bne.n	8001f20 <HAL_TIM_PWM_Start+0x58>
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	f893 3040 	ldrb.w	r3, [r3, #64]	@ 0x40
 8001f12:	b2db      	uxtb	r3, r3
 8001f14:	2b01      	cmp	r3, #1
 8001f16:	bf14      	ite	ne
 8001f18:	2301      	movne	r3, #1
 8001f1a:	2300      	moveq	r3, #0
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	e008      	b.n	8001f32 <HAL_TIM_PWM_Start+0x6a>
 8001f20:	687b      	ldr	r3, [r7, #4]
 8001f22:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001f26:	b2db      	uxtb	r3, r3
 8001f28:	2b01      	cmp	r3, #1
 8001f2a:	bf14      	ite	ne
 8001f2c:	2301      	movne	r3, #1
 8001f2e:	2300      	moveq	r3, #0
 8001f30:	b2db      	uxtb	r3, r3
 8001f32:	2b00      	cmp	r3, #0
 8001f34:	d001      	beq.n	8001f3a <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001f36:	2301      	movs	r3, #1
 8001f38:	e05e      	b.n	8001ff8 <HAL_TIM_PWM_Start+0x130>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001f3a:	683b      	ldr	r3, [r7, #0]
 8001f3c:	2b00      	cmp	r3, #0
 8001f3e:	d104      	bne.n	8001f4a <HAL_TIM_PWM_Start+0x82>
 8001f40:	687b      	ldr	r3, [r7, #4]
 8001f42:	2202      	movs	r2, #2
 8001f44:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8001f48:	e013      	b.n	8001f72 <HAL_TIM_PWM_Start+0xaa>
 8001f4a:	683b      	ldr	r3, [r7, #0]
 8001f4c:	2b04      	cmp	r3, #4
 8001f4e:	d104      	bne.n	8001f5a <HAL_TIM_PWM_Start+0x92>
 8001f50:	687b      	ldr	r3, [r7, #4]
 8001f52:	2202      	movs	r2, #2
 8001f54:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8001f58:	e00b      	b.n	8001f72 <HAL_TIM_PWM_Start+0xaa>
 8001f5a:	683b      	ldr	r3, [r7, #0]
 8001f5c:	2b08      	cmp	r3, #8
 8001f5e:	d104      	bne.n	8001f6a <HAL_TIM_PWM_Start+0xa2>
 8001f60:	687b      	ldr	r3, [r7, #4]
 8001f62:	2202      	movs	r2, #2
 8001f64:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8001f68:	e003      	b.n	8001f72 <HAL_TIM_PWM_Start+0xaa>
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	2201      	movs	r2, #1
 8001f78:	6839      	ldr	r1, [r7, #0]
 8001f7a:	4618      	mov	r0, r3
 8001f7c:	f000 fd84 	bl	8002a88 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8001f80:	687b      	ldr	r3, [r7, #4]
 8001f82:	681b      	ldr	r3, [r3, #0]
 8001f84:	4a1e      	ldr	r2, [pc, #120]	@ (8002000 <HAL_TIM_PWM_Start+0x138>)
 8001f86:	4293      	cmp	r3, r2
 8001f88:	d107      	bne.n	8001f9a <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8001f8a:	687b      	ldr	r3, [r7, #4]
 8001f8c:	681b      	ldr	r3, [r3, #0]
 8001f8e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 8001f90:	687b      	ldr	r3, [r7, #4]
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8001f98:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001f9a:	687b      	ldr	r3, [r7, #4]
 8001f9c:	681b      	ldr	r3, [r3, #0]
 8001f9e:	4a18      	ldr	r2, [pc, #96]	@ (8002000 <HAL_TIM_PWM_Start+0x138>)
 8001fa0:	4293      	cmp	r3, r2
 8001fa2:	d00e      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0xfa>
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001fac:	d009      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0xfa>
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	4a14      	ldr	r2, [pc, #80]	@ (8002004 <HAL_TIM_PWM_Start+0x13c>)
 8001fb4:	4293      	cmp	r3, r2
 8001fb6:	d004      	beq.n	8001fc2 <HAL_TIM_PWM_Start+0xfa>
 8001fb8:	687b      	ldr	r3, [r7, #4]
 8001fba:	681b      	ldr	r3, [r3, #0]
 8001fbc:	4a12      	ldr	r2, [pc, #72]	@ (8002008 <HAL_TIM_PWM_Start+0x140>)
 8001fbe:	4293      	cmp	r3, r2
 8001fc0:	d111      	bne.n	8001fe6 <HAL_TIM_PWM_Start+0x11e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001fc2:	687b      	ldr	r3, [r7, #4]
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	689b      	ldr	r3, [r3, #8]
 8001fc8:	f003 0307 	and.w	r3, r3, #7
 8001fcc:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2b06      	cmp	r3, #6
 8001fd2:	d010      	beq.n	8001ff6 <HAL_TIM_PWM_Start+0x12e>
    {
      __HAL_TIM_ENABLE(htim);
 8001fd4:	687b      	ldr	r3, [r7, #4]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	681a      	ldr	r2, [r3, #0]
 8001fda:	687b      	ldr	r3, [r7, #4]
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	f042 0201 	orr.w	r2, r2, #1
 8001fe2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001fe4:	e007      	b.n	8001ff6 <HAL_TIM_PWM_Start+0x12e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001fe6:	687b      	ldr	r3, [r7, #4]
 8001fe8:	681b      	ldr	r3, [r3, #0]
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	687b      	ldr	r3, [r7, #4]
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	f042 0201 	orr.w	r2, r2, #1
 8001ff4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ff6:	2300      	movs	r3, #0
}
 8001ff8:	4618      	mov	r0, r3
 8001ffa:	3710      	adds	r7, #16
 8001ffc:	46bd      	mov	sp, r7
 8001ffe:	bd80      	pop	{r7, pc}
 8002000:	40012c00 	.word	0x40012c00
 8002004:	40000400 	.word	0x40000400
 8002008:	40000800 	.word	0x40000800

0800200c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b082      	sub	sp, #8
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8002014:	687b      	ldr	r3, [r7, #4]
 8002016:	681b      	ldr	r3, [r3, #0]
 8002018:	691b      	ldr	r3, [r3, #16]
 800201a:	f003 0302 	and.w	r3, r3, #2
 800201e:	2b02      	cmp	r3, #2
 8002020:	d122      	bne.n	8002068 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	681b      	ldr	r3, [r3, #0]
 8002026:	68db      	ldr	r3, [r3, #12]
 8002028:	f003 0302 	and.w	r3, r3, #2
 800202c:	2b02      	cmp	r3, #2
 800202e:	d11b      	bne.n	8002068 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	681b      	ldr	r3, [r3, #0]
 8002034:	f06f 0202 	mvn.w	r2, #2
 8002038:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800203a:	687b      	ldr	r3, [r7, #4]
 800203c:	2201      	movs	r2, #1
 800203e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8002040:	687b      	ldr	r3, [r7, #4]
 8002042:	681b      	ldr	r3, [r3, #0]
 8002044:	699b      	ldr	r3, [r3, #24]
 8002046:	f003 0303 	and.w	r3, r3, #3
 800204a:	2b00      	cmp	r3, #0
 800204c:	d003      	beq.n	8002056 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800204e:	6878      	ldr	r0, [r7, #4]
 8002050:	f000 fa7f 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 8002054:	e005      	b.n	8002062 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f000 fa72 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800205c:	6878      	ldr	r0, [r7, #4]
 800205e:	f000 fa81 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	2200      	movs	r2, #0
 8002066:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8002068:	687b      	ldr	r3, [r7, #4]
 800206a:	681b      	ldr	r3, [r3, #0]
 800206c:	691b      	ldr	r3, [r3, #16]
 800206e:	f003 0304 	and.w	r3, r3, #4
 8002072:	2b04      	cmp	r3, #4
 8002074:	d122      	bne.n	80020bc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	68db      	ldr	r3, [r3, #12]
 800207c:	f003 0304 	and.w	r3, r3, #4
 8002080:	2b04      	cmp	r3, #4
 8002082:	d11b      	bne.n	80020bc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8002084:	687b      	ldr	r3, [r7, #4]
 8002086:	681b      	ldr	r3, [r3, #0]
 8002088:	f06f 0204 	mvn.w	r2, #4
 800208c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	2202      	movs	r2, #2
 8002092:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8002094:	687b      	ldr	r3, [r7, #4]
 8002096:	681b      	ldr	r3, [r3, #0]
 8002098:	699b      	ldr	r3, [r3, #24]
 800209a:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 800209e:	2b00      	cmp	r3, #0
 80020a0:	d003      	beq.n	80020aa <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 fa55 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 80020a8:	e005      	b.n	80020b6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020aa:	6878      	ldr	r0, [r7, #4]
 80020ac:	f000 fa48 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80020b0:	6878      	ldr	r0, [r7, #4]
 80020b2:	f000 fa57 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80020b6:	687b      	ldr	r3, [r7, #4]
 80020b8:	2200      	movs	r2, #0
 80020ba:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80020bc:	687b      	ldr	r3, [r7, #4]
 80020be:	681b      	ldr	r3, [r3, #0]
 80020c0:	691b      	ldr	r3, [r3, #16]
 80020c2:	f003 0308 	and.w	r3, r3, #8
 80020c6:	2b08      	cmp	r3, #8
 80020c8:	d122      	bne.n	8002110 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80020ca:	687b      	ldr	r3, [r7, #4]
 80020cc:	681b      	ldr	r3, [r3, #0]
 80020ce:	68db      	ldr	r3, [r3, #12]
 80020d0:	f003 0308 	and.w	r3, r3, #8
 80020d4:	2b08      	cmp	r3, #8
 80020d6:	d11b      	bne.n	8002110 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80020d8:	687b      	ldr	r3, [r7, #4]
 80020da:	681b      	ldr	r3, [r3, #0]
 80020dc:	f06f 0208 	mvn.w	r2, #8
 80020e0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80020e2:	687b      	ldr	r3, [r7, #4]
 80020e4:	2204      	movs	r2, #4
 80020e6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	69db      	ldr	r3, [r3, #28]
 80020ee:	f003 0303 	and.w	r3, r3, #3
 80020f2:	2b00      	cmp	r3, #0
 80020f4:	d003      	beq.n	80020fe <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f000 fa2b 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 80020fc:	e005      	b.n	800210a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80020fe:	6878      	ldr	r0, [r7, #4]
 8002100:	f000 fa1e 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 fa2d 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800210a:	687b      	ldr	r3, [r7, #4]
 800210c:	2200      	movs	r2, #0
 800210e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8002110:	687b      	ldr	r3, [r7, #4]
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	691b      	ldr	r3, [r3, #16]
 8002116:	f003 0310 	and.w	r3, r3, #16
 800211a:	2b10      	cmp	r3, #16
 800211c:	d122      	bne.n	8002164 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800211e:	687b      	ldr	r3, [r7, #4]
 8002120:	681b      	ldr	r3, [r3, #0]
 8002122:	68db      	ldr	r3, [r3, #12]
 8002124:	f003 0310 	and.w	r3, r3, #16
 8002128:	2b10      	cmp	r3, #16
 800212a:	d11b      	bne.n	8002164 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	f06f 0210 	mvn.w	r2, #16
 8002134:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8002136:	687b      	ldr	r3, [r7, #4]
 8002138:	2208      	movs	r2, #8
 800213a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800213c:	687b      	ldr	r3, [r7, #4]
 800213e:	681b      	ldr	r3, [r3, #0]
 8002140:	69db      	ldr	r3, [r3, #28]
 8002142:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8002146:	2b00      	cmp	r3, #0
 8002148:	d003      	beq.n	8002152 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800214a:	6878      	ldr	r0, [r7, #4]
 800214c:	f000 fa01 	bl	8002552 <HAL_TIM_IC_CaptureCallback>
 8002150:	e005      	b.n	800215e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8002152:	6878      	ldr	r0, [r7, #4]
 8002154:	f000 f9f4 	bl	8002540 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 fa03 	bl	8002564 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800215e:	687b      	ldr	r3, [r7, #4]
 8002160:	2200      	movs	r2, #0
 8002162:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8002164:	687b      	ldr	r3, [r7, #4]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	691b      	ldr	r3, [r3, #16]
 800216a:	f003 0301 	and.w	r3, r3, #1
 800216e:	2b01      	cmp	r3, #1
 8002170:	d10e      	bne.n	8002190 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	681b      	ldr	r3, [r3, #0]
 8002176:	68db      	ldr	r3, [r3, #12]
 8002178:	f003 0301 	and.w	r3, r3, #1
 800217c:	2b01      	cmp	r3, #1
 800217e:	d107      	bne.n	8002190 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8002180:	687b      	ldr	r3, [r7, #4]
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	f06f 0201 	mvn.w	r2, #1
 8002188:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800218a:	6878      	ldr	r0, [r7, #4]
 800218c:	f000 f9cf 	bl	800252e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8002190:	687b      	ldr	r3, [r7, #4]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	691b      	ldr	r3, [r3, #16]
 8002196:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800219a:	2b80      	cmp	r3, #128	@ 0x80
 800219c:	d10e      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	681b      	ldr	r3, [r3, #0]
 80021a2:	68db      	ldr	r3, [r3, #12]
 80021a4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80021a8:	2b80      	cmp	r3, #128	@ 0x80
 80021aa:	d107      	bne.n	80021bc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80021ac:	687b      	ldr	r3, [r7, #4]
 80021ae:	681b      	ldr	r3, [r3, #0]
 80021b0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80021b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f000 fcf1 	bl	8002b9e <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	691b      	ldr	r3, [r3, #16]
 80021c2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021c6:	2b40      	cmp	r3, #64	@ 0x40
 80021c8:	d10e      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80021ca:	687b      	ldr	r3, [r7, #4]
 80021cc:	681b      	ldr	r3, [r3, #0]
 80021ce:	68db      	ldr	r3, [r3, #12]
 80021d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80021d4:	2b40      	cmp	r3, #64	@ 0x40
 80021d6:	d107      	bne.n	80021e8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 80021e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f000 f9c7 	bl	8002576 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	681b      	ldr	r3, [r3, #0]
 80021ec:	691b      	ldr	r3, [r3, #16]
 80021ee:	f003 0320 	and.w	r3, r3, #32
 80021f2:	2b20      	cmp	r3, #32
 80021f4:	d10e      	bne.n	8002214 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80021f6:	687b      	ldr	r3, [r7, #4]
 80021f8:	681b      	ldr	r3, [r3, #0]
 80021fa:	68db      	ldr	r3, [r3, #12]
 80021fc:	f003 0320 	and.w	r3, r3, #32
 8002200:	2b20      	cmp	r3, #32
 8002202:	d107      	bne.n	8002214 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8002204:	687b      	ldr	r3, [r7, #4]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	f06f 0220 	mvn.w	r2, #32
 800220c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800220e:	6878      	ldr	r0, [r7, #4]
 8002210:	f000 fcbc 	bl	8002b8c <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8002214:	bf00      	nop
 8002216:	3708      	adds	r7, #8
 8002218:	46bd      	mov	sp, r7
 800221a:	bd80      	pop	{r7, pc}

0800221c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	b086      	sub	sp, #24
 8002220:	af00      	add	r7, sp, #0
 8002222:	60f8      	str	r0, [r7, #12]
 8002224:	60b9      	str	r1, [r7, #8]
 8002226:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8002228:	2300      	movs	r3, #0
 800222a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800222c:	68fb      	ldr	r3, [r7, #12]
 800222e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002232:	2b01      	cmp	r3, #1
 8002234:	d101      	bne.n	800223a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8002236:	2302      	movs	r3, #2
 8002238:	e0ae      	b.n	8002398 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800223a:	68fb      	ldr	r3, [r7, #12]
 800223c:	2201      	movs	r2, #1
 800223e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  switch (Channel)
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	2b0c      	cmp	r3, #12
 8002246:	f200 809f 	bhi.w	8002388 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800224a:	a201      	add	r2, pc, #4	@ (adr r2, 8002250 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800224c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002250:	08002285 	.word	0x08002285
 8002254:	08002389 	.word	0x08002389
 8002258:	08002389 	.word	0x08002389
 800225c:	08002389 	.word	0x08002389
 8002260:	080022c5 	.word	0x080022c5
 8002264:	08002389 	.word	0x08002389
 8002268:	08002389 	.word	0x08002389
 800226c:	08002389 	.word	0x08002389
 8002270:	08002307 	.word	0x08002307
 8002274:	08002389 	.word	0x08002389
 8002278:	08002389 	.word	0x08002389
 800227c:	08002389 	.word	0x08002389
 8002280:	08002347 	.word	0x08002347
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8002284:	68fb      	ldr	r3, [r7, #12]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	68b9      	ldr	r1, [r7, #8]
 800228a:	4618      	mov	r0, r3
 800228c:	f000 f9de 	bl	800264c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8002290:	68fb      	ldr	r3, [r7, #12]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	699a      	ldr	r2, [r3, #24]
 8002296:	68fb      	ldr	r3, [r7, #12]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f042 0208 	orr.w	r2, r2, #8
 800229e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80022a0:	68fb      	ldr	r3, [r7, #12]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	699a      	ldr	r2, [r3, #24]
 80022a6:	68fb      	ldr	r3, [r7, #12]
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	f022 0204 	bic.w	r2, r2, #4
 80022ae:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80022b0:	68fb      	ldr	r3, [r7, #12]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	6999      	ldr	r1, [r3, #24]
 80022b6:	68bb      	ldr	r3, [r7, #8]
 80022b8:	691a      	ldr	r2, [r3, #16]
 80022ba:	68fb      	ldr	r3, [r7, #12]
 80022bc:	681b      	ldr	r3, [r3, #0]
 80022be:	430a      	orrs	r2, r1
 80022c0:	619a      	str	r2, [r3, #24]
      break;
 80022c2:	e064      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80022c4:	68fb      	ldr	r3, [r7, #12]
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	68b9      	ldr	r1, [r7, #8]
 80022ca:	4618      	mov	r0, r3
 80022cc:	f000 fa24 	bl	8002718 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	699a      	ldr	r2, [r3, #24]
 80022d6:	68fb      	ldr	r3, [r7, #12]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 80022de:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80022e0:	68fb      	ldr	r3, [r7, #12]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	699a      	ldr	r2, [r3, #24]
 80022e6:	68fb      	ldr	r3, [r7, #12]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80022ee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80022f0:	68fb      	ldr	r3, [r7, #12]
 80022f2:	681b      	ldr	r3, [r3, #0]
 80022f4:	6999      	ldr	r1, [r3, #24]
 80022f6:	68bb      	ldr	r3, [r7, #8]
 80022f8:	691b      	ldr	r3, [r3, #16]
 80022fa:	021a      	lsls	r2, r3, #8
 80022fc:	68fb      	ldr	r3, [r7, #12]
 80022fe:	681b      	ldr	r3, [r3, #0]
 8002300:	430a      	orrs	r2, r1
 8002302:	619a      	str	r2, [r3, #24]
      break;
 8002304:	e043      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8002306:	68fb      	ldr	r3, [r7, #12]
 8002308:	681b      	ldr	r3, [r3, #0]
 800230a:	68b9      	ldr	r1, [r7, #8]
 800230c:	4618      	mov	r0, r3
 800230e:	f000 fa6d 	bl	80027ec <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8002312:	68fb      	ldr	r3, [r7, #12]
 8002314:	681b      	ldr	r3, [r3, #0]
 8002316:	69da      	ldr	r2, [r3, #28]
 8002318:	68fb      	ldr	r3, [r7, #12]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	f042 0208 	orr.w	r2, r2, #8
 8002320:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8002322:	68fb      	ldr	r3, [r7, #12]
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	69da      	ldr	r2, [r3, #28]
 8002328:	68fb      	ldr	r3, [r7, #12]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f022 0204 	bic.w	r2, r2, #4
 8002330:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8002332:	68fb      	ldr	r3, [r7, #12]
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	69d9      	ldr	r1, [r3, #28]
 8002338:	68bb      	ldr	r3, [r7, #8]
 800233a:	691a      	ldr	r2, [r3, #16]
 800233c:	68fb      	ldr	r3, [r7, #12]
 800233e:	681b      	ldr	r3, [r3, #0]
 8002340:	430a      	orrs	r2, r1
 8002342:	61da      	str	r2, [r3, #28]
      break;
 8002344:	e023      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8002346:	68fb      	ldr	r3, [r7, #12]
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	68b9      	ldr	r1, [r7, #8]
 800234c:	4618      	mov	r0, r3
 800234e:	f000 fab7 	bl	80028c0 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8002352:	68fb      	ldr	r3, [r7, #12]
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	69da      	ldr	r2, [r3, #28]
 8002358:	68fb      	ldr	r3, [r7, #12]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002360:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	69da      	ldr	r2, [r3, #28]
 8002368:	68fb      	ldr	r3, [r7, #12]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002370:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8002372:	68fb      	ldr	r3, [r7, #12]
 8002374:	681b      	ldr	r3, [r3, #0]
 8002376:	69d9      	ldr	r1, [r3, #28]
 8002378:	68bb      	ldr	r3, [r7, #8]
 800237a:	691b      	ldr	r3, [r3, #16]
 800237c:	021a      	lsls	r2, r3, #8
 800237e:	68fb      	ldr	r3, [r7, #12]
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	430a      	orrs	r2, r1
 8002384:	61da      	str	r2, [r3, #28]
      break;
 8002386:	e002      	b.n	800238e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8002388:	2301      	movs	r3, #1
 800238a:	75fb      	strb	r3, [r7, #23]
      break;
 800238c:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 800238e:	68fb      	ldr	r3, [r7, #12]
 8002390:	2200      	movs	r2, #0
 8002392:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002396:	7dfb      	ldrb	r3, [r7, #23]
}
 8002398:	4618      	mov	r0, r3
 800239a:	3718      	adds	r7, #24
 800239c:	46bd      	mov	sp, r7
 800239e:	bd80      	pop	{r7, pc}

080023a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80023a0:	b580      	push	{r7, lr}
 80023a2:	b084      	sub	sp, #16
 80023a4:	af00      	add	r7, sp, #0
 80023a6:	6078      	str	r0, [r7, #4]
 80023a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80023aa:	2300      	movs	r3, #0
 80023ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80023ae:	687b      	ldr	r3, [r7, #4]
 80023b0:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80023b4:	2b01      	cmp	r3, #1
 80023b6:	d101      	bne.n	80023bc <HAL_TIM_ConfigClockSource+0x1c>
 80023b8:	2302      	movs	r3, #2
 80023ba:	e0b4      	b.n	8002526 <HAL_TIM_ConfigClockSource+0x186>
 80023bc:	687b      	ldr	r3, [r7, #4]
 80023be:	2201      	movs	r2, #1
 80023c0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	2202      	movs	r2, #2
 80023c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80023cc:	687b      	ldr	r3, [r7, #4]
 80023ce:	681b      	ldr	r3, [r3, #0]
 80023d0:	689b      	ldr	r3, [r3, #8]
 80023d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80023d4:	68bb      	ldr	r3, [r7, #8]
 80023d6:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 80023da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80023dc:	68bb      	ldr	r3, [r7, #8]
 80023de:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 80023e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80023e4:	687b      	ldr	r3, [r7, #4]
 80023e6:	681b      	ldr	r3, [r3, #0]
 80023e8:	68ba      	ldr	r2, [r7, #8]
 80023ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023f4:	d03e      	beq.n	8002474 <HAL_TIM_ConfigClockSource+0xd4>
 80023f6:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80023fa:	f200 8087 	bhi.w	800250c <HAL_TIM_ConfigClockSource+0x16c>
 80023fe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002402:	f000 8086 	beq.w	8002512 <HAL_TIM_ConfigClockSource+0x172>
 8002406:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800240a:	d87f      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800240c:	2b70      	cmp	r3, #112	@ 0x70
 800240e:	d01a      	beq.n	8002446 <HAL_TIM_ConfigClockSource+0xa6>
 8002410:	2b70      	cmp	r3, #112	@ 0x70
 8002412:	d87b      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 8002414:	2b60      	cmp	r3, #96	@ 0x60
 8002416:	d050      	beq.n	80024ba <HAL_TIM_ConfigClockSource+0x11a>
 8002418:	2b60      	cmp	r3, #96	@ 0x60
 800241a:	d877      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800241c:	2b50      	cmp	r3, #80	@ 0x50
 800241e:	d03c      	beq.n	800249a <HAL_TIM_ConfigClockSource+0xfa>
 8002420:	2b50      	cmp	r3, #80	@ 0x50
 8002422:	d873      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 8002424:	2b40      	cmp	r3, #64	@ 0x40
 8002426:	d058      	beq.n	80024da <HAL_TIM_ConfigClockSource+0x13a>
 8002428:	2b40      	cmp	r3, #64	@ 0x40
 800242a:	d86f      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800242c:	2b30      	cmp	r3, #48	@ 0x30
 800242e:	d064      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002430:	2b30      	cmp	r3, #48	@ 0x30
 8002432:	d86b      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 8002434:	2b20      	cmp	r3, #32
 8002436:	d060      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002438:	2b20      	cmp	r3, #32
 800243a:	d867      	bhi.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
 800243c:	2b00      	cmp	r3, #0
 800243e:	d05c      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002440:	2b10      	cmp	r3, #16
 8002442:	d05a      	beq.n	80024fa <HAL_TIM_ConfigClockSource+0x15a>
 8002444:	e062      	b.n	800250c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800244a:	683b      	ldr	r3, [r7, #0]
 800244c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002452:	683b      	ldr	r3, [r7, #0]
 8002454:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002456:	f000 faf8 	bl	8002a4a <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800245a:	687b      	ldr	r3, [r7, #4]
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	689b      	ldr	r3, [r3, #8]
 8002460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8002462:	68bb      	ldr	r3, [r7, #8]
 8002464:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8002468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800246a:	687b      	ldr	r3, [r7, #4]
 800246c:	681b      	ldr	r3, [r3, #0]
 800246e:	68ba      	ldr	r2, [r7, #8]
 8002470:	609a      	str	r2, [r3, #8]
      break;
 8002472:	e04f      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800247c:	683b      	ldr	r3, [r7, #0]
 800247e:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002480:	683b      	ldr	r3, [r7, #0]
 8002482:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002484:	f000 fae1 	bl	8002a4a <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8002488:	687b      	ldr	r3, [r7, #4]
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	689a      	ldr	r2, [r3, #8]
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8002496:	609a      	str	r2, [r3, #8]
      break;
 8002498:	e03c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800249a:	687b      	ldr	r3, [r7, #4]
 800249c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800249e:	683b      	ldr	r3, [r7, #0]
 80024a0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024a2:	683b      	ldr	r3, [r7, #0]
 80024a4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024a6:	461a      	mov	r2, r3
 80024a8:	f000 fa58 	bl	800295c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80024ac:	687b      	ldr	r3, [r7, #4]
 80024ae:	681b      	ldr	r3, [r3, #0]
 80024b0:	2150      	movs	r1, #80	@ 0x50
 80024b2:	4618      	mov	r0, r3
 80024b4:	f000 faaf 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80024b8:	e02c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80024ba:	687b      	ldr	r3, [r7, #4]
 80024bc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024be:	683b      	ldr	r3, [r7, #0]
 80024c0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024c2:	683b      	ldr	r3, [r7, #0]
 80024c4:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 80024c6:	461a      	mov	r2, r3
 80024c8:	f000 fa76 	bl	80029b8 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80024cc:	687b      	ldr	r3, [r7, #4]
 80024ce:	681b      	ldr	r3, [r3, #0]
 80024d0:	2160      	movs	r1, #96	@ 0x60
 80024d2:	4618      	mov	r0, r3
 80024d4:	f000 fa9f 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80024d8:	e01c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80024da:	687b      	ldr	r3, [r7, #4]
 80024dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80024de:	683b      	ldr	r3, [r7, #0]
 80024e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80024e6:	461a      	mov	r2, r3
 80024e8:	f000 fa38 	bl	800295c <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80024ec:	687b      	ldr	r3, [r7, #4]
 80024ee:	681b      	ldr	r3, [r3, #0]
 80024f0:	2140      	movs	r1, #64	@ 0x40
 80024f2:	4618      	mov	r0, r3
 80024f4:	f000 fa8f 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 80024f8:	e00c      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80024fa:	687b      	ldr	r3, [r7, #4]
 80024fc:	681a      	ldr	r2, [r3, #0]
 80024fe:	683b      	ldr	r3, [r7, #0]
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	4619      	mov	r1, r3
 8002504:	4610      	mov	r0, r2
 8002506:	f000 fa86 	bl	8002a16 <TIM_ITRx_SetConfig>
      break;
 800250a:	e003      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800250c:	2301      	movs	r3, #1
 800250e:	73fb      	strb	r3, [r7, #15]
      break;
 8002510:	e000      	b.n	8002514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002514:	687b      	ldr	r3, [r7, #4]
 8002516:	2201      	movs	r2, #1
 8002518:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	2200      	movs	r2, #0
 8002520:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 8002524:	7bfb      	ldrb	r3, [r7, #15]
}
 8002526:	4618      	mov	r0, r3
 8002528:	3710      	adds	r7, #16
 800252a:	46bd      	mov	sp, r7
 800252c:	bd80      	pop	{r7, pc}

0800252e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800252e:	b480      	push	{r7}
 8002530:	b083      	sub	sp, #12
 8002532:	af00      	add	r7, sp, #0
 8002534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002536:	bf00      	nop
 8002538:	370c      	adds	r7, #12
 800253a:	46bd      	mov	sp, r7
 800253c:	bc80      	pop	{r7}
 800253e:	4770      	bx	lr

08002540 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002540:	b480      	push	{r7}
 8002542:	b083      	sub	sp, #12
 8002544:	af00      	add	r7, sp, #0
 8002546:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002548:	bf00      	nop
 800254a:	370c      	adds	r7, #12
 800254c:	46bd      	mov	sp, r7
 800254e:	bc80      	pop	{r7}
 8002550:	4770      	bx	lr

08002552 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002552:	b480      	push	{r7}
 8002554:	b083      	sub	sp, #12
 8002556:	af00      	add	r7, sp, #0
 8002558:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800255a:	bf00      	nop
 800255c:	370c      	adds	r7, #12
 800255e:	46bd      	mov	sp, r7
 8002560:	bc80      	pop	{r7}
 8002562:	4770      	bx	lr

08002564 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8002564:	b480      	push	{r7}
 8002566:	b083      	sub	sp, #12
 8002568:	af00      	add	r7, sp, #0
 800256a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800256c:	bf00      	nop
 800256e:	370c      	adds	r7, #12
 8002570:	46bd      	mov	sp, r7
 8002572:	bc80      	pop	{r7}
 8002574:	4770      	bx	lr

08002576 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8002576:	b480      	push	{r7}
 8002578:	b083      	sub	sp, #12
 800257a:	af00      	add	r7, sp, #0
 800257c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800257e:	bf00      	nop
 8002580:	370c      	adds	r7, #12
 8002582:	46bd      	mov	sp, r7
 8002584:	bc80      	pop	{r7}
 8002586:	4770      	bx	lr

08002588 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8002588:	b480      	push	{r7}
 800258a:	b085      	sub	sp, #20
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a29      	ldr	r2, [pc, #164]	@ (8002640 <TIM_Base_SetConfig+0xb8>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d00b      	beq.n	80025b8 <TIM_Base_SetConfig+0x30>
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025a6:	d007      	beq.n	80025b8 <TIM_Base_SetConfig+0x30>
 80025a8:	687b      	ldr	r3, [r7, #4]
 80025aa:	4a26      	ldr	r2, [pc, #152]	@ (8002644 <TIM_Base_SetConfig+0xbc>)
 80025ac:	4293      	cmp	r3, r2
 80025ae:	d003      	beq.n	80025b8 <TIM_Base_SetConfig+0x30>
 80025b0:	687b      	ldr	r3, [r7, #4]
 80025b2:	4a25      	ldr	r2, [pc, #148]	@ (8002648 <TIM_Base_SetConfig+0xc0>)
 80025b4:	4293      	cmp	r3, r2
 80025b6:	d108      	bne.n	80025ca <TIM_Base_SetConfig+0x42>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80025b8:	68fb      	ldr	r3, [r7, #12]
 80025ba:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80025be:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80025c0:	683b      	ldr	r3, [r7, #0]
 80025c2:	685b      	ldr	r3, [r3, #4]
 80025c4:	68fa      	ldr	r2, [r7, #12]
 80025c6:	4313      	orrs	r3, r2
 80025c8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80025ca:	687b      	ldr	r3, [r7, #4]
 80025cc:	4a1c      	ldr	r2, [pc, #112]	@ (8002640 <TIM_Base_SetConfig+0xb8>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d00b      	beq.n	80025ea <TIM_Base_SetConfig+0x62>
 80025d2:	687b      	ldr	r3, [r7, #4]
 80025d4:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80025d8:	d007      	beq.n	80025ea <TIM_Base_SetConfig+0x62>
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	4a19      	ldr	r2, [pc, #100]	@ (8002644 <TIM_Base_SetConfig+0xbc>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d003      	beq.n	80025ea <TIM_Base_SetConfig+0x62>
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	4a18      	ldr	r2, [pc, #96]	@ (8002648 <TIM_Base_SetConfig+0xc0>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d108      	bne.n	80025fc <TIM_Base_SetConfig+0x74>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80025ea:	68fb      	ldr	r3, [r7, #12]
 80025ec:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80025f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	68db      	ldr	r3, [r3, #12]
 80025f6:	68fa      	ldr	r2, [r7, #12]
 80025f8:	4313      	orrs	r3, r2
 80025fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80025fc:	68fb      	ldr	r3, [r7, #12]
 80025fe:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002602:	683b      	ldr	r3, [r7, #0]
 8002604:	695b      	ldr	r3, [r3, #20]
 8002606:	4313      	orrs	r3, r2
 8002608:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	68fa      	ldr	r2, [r7, #12]
 800260e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002610:	683b      	ldr	r3, [r7, #0]
 8002612:	689a      	ldr	r2, [r3, #8]
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002618:	683b      	ldr	r3, [r7, #0]
 800261a:	681a      	ldr	r2, [r3, #0]
 800261c:	687b      	ldr	r3, [r7, #4]
 800261e:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	4a07      	ldr	r2, [pc, #28]	@ (8002640 <TIM_Base_SetConfig+0xb8>)
 8002624:	4293      	cmp	r3, r2
 8002626:	d103      	bne.n	8002630 <TIM_Base_SetConfig+0xa8>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8002628:	683b      	ldr	r3, [r7, #0]
 800262a:	691a      	ldr	r2, [r3, #16]
 800262c:	687b      	ldr	r3, [r7, #4]
 800262e:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	2201      	movs	r2, #1
 8002634:	615a      	str	r2, [r3, #20]
}
 8002636:	bf00      	nop
 8002638:	3714      	adds	r7, #20
 800263a:	46bd      	mov	sp, r7
 800263c:	bc80      	pop	{r7}
 800263e:	4770      	bx	lr
 8002640:	40012c00 	.word	0x40012c00
 8002644:	40000400 	.word	0x40000400
 8002648:	40000800 	.word	0x40000800

0800264c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800264c:	b480      	push	{r7}
 800264e:	b087      	sub	sp, #28
 8002650:	af00      	add	r7, sp, #0
 8002652:	6078      	str	r0, [r7, #4]
 8002654:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	6a1b      	ldr	r3, [r3, #32]
 800265a:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800265c:	687b      	ldr	r3, [r7, #4]
 800265e:	6a1b      	ldr	r3, [r3, #32]
 8002660:	f023 0201 	bic.w	r2, r3, #1
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002668:	687b      	ldr	r3, [r7, #4]
 800266a:	685b      	ldr	r3, [r3, #4]
 800266c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	699b      	ldr	r3, [r3, #24]
 8002672:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8002674:	68fb      	ldr	r3, [r7, #12]
 8002676:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800267a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800267c:	68fb      	ldr	r3, [r7, #12]
 800267e:	f023 0303 	bic.w	r3, r3, #3
 8002682:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002684:	683b      	ldr	r3, [r7, #0]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	68fa      	ldr	r2, [r7, #12]
 800268a:	4313      	orrs	r3, r2
 800268c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800268e:	697b      	ldr	r3, [r7, #20]
 8002690:	f023 0302 	bic.w	r3, r3, #2
 8002694:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8002696:	683b      	ldr	r3, [r7, #0]
 8002698:	689b      	ldr	r3, [r3, #8]
 800269a:	697a      	ldr	r2, [r7, #20]
 800269c:	4313      	orrs	r3, r2
 800269e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80026a0:	687b      	ldr	r3, [r7, #4]
 80026a2:	4a1c      	ldr	r2, [pc, #112]	@ (8002714 <TIM_OC1_SetConfig+0xc8>)
 80026a4:	4293      	cmp	r3, r2
 80026a6:	d10c      	bne.n	80026c2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80026a8:	697b      	ldr	r3, [r7, #20]
 80026aa:	f023 0308 	bic.w	r3, r3, #8
 80026ae:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80026b0:	683b      	ldr	r3, [r7, #0]
 80026b2:	68db      	ldr	r3, [r3, #12]
 80026b4:	697a      	ldr	r2, [r7, #20]
 80026b6:	4313      	orrs	r3, r2
 80026b8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80026ba:	697b      	ldr	r3, [r7, #20]
 80026bc:	f023 0304 	bic.w	r3, r3, #4
 80026c0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80026c2:	687b      	ldr	r3, [r7, #4]
 80026c4:	4a13      	ldr	r2, [pc, #76]	@ (8002714 <TIM_OC1_SetConfig+0xc8>)
 80026c6:	4293      	cmp	r3, r2
 80026c8:	d111      	bne.n	80026ee <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80026ca:	693b      	ldr	r3, [r7, #16]
 80026cc:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80026d0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80026d2:	693b      	ldr	r3, [r7, #16]
 80026d4:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80026d8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80026da:	683b      	ldr	r3, [r7, #0]
 80026dc:	695b      	ldr	r3, [r3, #20]
 80026de:	693a      	ldr	r2, [r7, #16]
 80026e0:	4313      	orrs	r3, r2
 80026e2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80026e4:	683b      	ldr	r3, [r7, #0]
 80026e6:	699b      	ldr	r3, [r3, #24]
 80026e8:	693a      	ldr	r2, [r7, #16]
 80026ea:	4313      	orrs	r3, r2
 80026ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80026ee:	687b      	ldr	r3, [r7, #4]
 80026f0:	693a      	ldr	r2, [r7, #16]
 80026f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80026f4:	687b      	ldr	r3, [r7, #4]
 80026f6:	68fa      	ldr	r2, [r7, #12]
 80026f8:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80026fa:	683b      	ldr	r3, [r7, #0]
 80026fc:	685a      	ldr	r2, [r3, #4]
 80026fe:	687b      	ldr	r3, [r7, #4]
 8002700:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	697a      	ldr	r2, [r7, #20]
 8002706:	621a      	str	r2, [r3, #32]
}
 8002708:	bf00      	nop
 800270a:	371c      	adds	r7, #28
 800270c:	46bd      	mov	sp, r7
 800270e:	bc80      	pop	{r7}
 8002710:	4770      	bx	lr
 8002712:	bf00      	nop
 8002714:	40012c00 	.word	0x40012c00

08002718 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002718:	b480      	push	{r7}
 800271a:	b087      	sub	sp, #28
 800271c:	af00      	add	r7, sp, #0
 800271e:	6078      	str	r0, [r7, #4]
 8002720:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002722:	687b      	ldr	r3, [r7, #4]
 8002724:	6a1b      	ldr	r3, [r3, #32]
 8002726:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	6a1b      	ldr	r3, [r3, #32]
 800272c:	f023 0210 	bic.w	r2, r3, #16
 8002730:	687b      	ldr	r3, [r7, #4]
 8002732:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	685b      	ldr	r3, [r3, #4]
 8002738:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	699b      	ldr	r3, [r3, #24]
 800273e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002740:	68fb      	ldr	r3, [r7, #12]
 8002742:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002746:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002748:	68fb      	ldr	r3, [r7, #12]
 800274a:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800274e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002750:	683b      	ldr	r3, [r7, #0]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	021b      	lsls	r3, r3, #8
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4313      	orrs	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800275c:	697b      	ldr	r3, [r7, #20]
 800275e:	f023 0320 	bic.w	r3, r3, #32
 8002762:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8002764:	683b      	ldr	r3, [r7, #0]
 8002766:	689b      	ldr	r3, [r3, #8]
 8002768:	011b      	lsls	r3, r3, #4
 800276a:	697a      	ldr	r2, [r7, #20]
 800276c:	4313      	orrs	r3, r2
 800276e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	4a1d      	ldr	r2, [pc, #116]	@ (80027e8 <TIM_OC2_SetConfig+0xd0>)
 8002774:	4293      	cmp	r3, r2
 8002776:	d10d      	bne.n	8002794 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8002778:	697b      	ldr	r3, [r7, #20]
 800277a:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 800277e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8002780:	683b      	ldr	r3, [r7, #0]
 8002782:	68db      	ldr	r3, [r3, #12]
 8002784:	011b      	lsls	r3, r3, #4
 8002786:	697a      	ldr	r2, [r7, #20]
 8002788:	4313      	orrs	r3, r2
 800278a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800278c:	697b      	ldr	r3, [r7, #20]
 800278e:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002792:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002794:	687b      	ldr	r3, [r7, #4]
 8002796:	4a14      	ldr	r2, [pc, #80]	@ (80027e8 <TIM_OC2_SetConfig+0xd0>)
 8002798:	4293      	cmp	r3, r2
 800279a:	d113      	bne.n	80027c4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800279c:	693b      	ldr	r3, [r7, #16]
 800279e:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 80027a2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80027a4:	693b      	ldr	r3, [r7, #16]
 80027a6:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 80027aa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	695b      	ldr	r3, [r3, #20]
 80027b0:	009b      	lsls	r3, r3, #2
 80027b2:	693a      	ldr	r2, [r7, #16]
 80027b4:	4313      	orrs	r3, r2
 80027b6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80027b8:	683b      	ldr	r3, [r7, #0]
 80027ba:	699b      	ldr	r3, [r3, #24]
 80027bc:	009b      	lsls	r3, r3, #2
 80027be:	693a      	ldr	r2, [r7, #16]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80027c4:	687b      	ldr	r3, [r7, #4]
 80027c6:	693a      	ldr	r2, [r7, #16]
 80027c8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80027ca:	687b      	ldr	r3, [r7, #4]
 80027cc:	68fa      	ldr	r2, [r7, #12]
 80027ce:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80027d0:	683b      	ldr	r3, [r7, #0]
 80027d2:	685a      	ldr	r2, [r3, #4]
 80027d4:	687b      	ldr	r3, [r7, #4]
 80027d6:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80027d8:	687b      	ldr	r3, [r7, #4]
 80027da:	697a      	ldr	r2, [r7, #20]
 80027dc:	621a      	str	r2, [r3, #32]
}
 80027de:	bf00      	nop
 80027e0:	371c      	adds	r7, #28
 80027e2:	46bd      	mov	sp, r7
 80027e4:	bc80      	pop	{r7}
 80027e6:	4770      	bx	lr
 80027e8:	40012c00 	.word	0x40012c00

080027ec <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80027ec:	b480      	push	{r7}
 80027ee:	b087      	sub	sp, #28
 80027f0:	af00      	add	r7, sp, #0
 80027f2:	6078      	str	r0, [r7, #4]
 80027f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80027f6:	687b      	ldr	r3, [r7, #4]
 80027f8:	6a1b      	ldr	r3, [r3, #32]
 80027fa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	6a1b      	ldr	r3, [r3, #32]
 8002800:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 8002804:	687b      	ldr	r3, [r7, #4]
 8002806:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002808:	687b      	ldr	r3, [r7, #4]
 800280a:	685b      	ldr	r3, [r3, #4]
 800280c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800280e:	687b      	ldr	r3, [r7, #4]
 8002810:	69db      	ldr	r3, [r3, #28]
 8002812:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8002814:	68fb      	ldr	r3, [r7, #12]
 8002816:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 800281a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800281c:	68fb      	ldr	r3, [r7, #12]
 800281e:	f023 0303 	bic.w	r3, r3, #3
 8002822:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	68fa      	ldr	r2, [r7, #12]
 800282a:	4313      	orrs	r3, r2
 800282c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800282e:	697b      	ldr	r3, [r7, #20]
 8002830:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 8002834:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8002836:	683b      	ldr	r3, [r7, #0]
 8002838:	689b      	ldr	r3, [r3, #8]
 800283a:	021b      	lsls	r3, r3, #8
 800283c:	697a      	ldr	r2, [r7, #20]
 800283e:	4313      	orrs	r3, r2
 8002840:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8002842:	687b      	ldr	r3, [r7, #4]
 8002844:	4a1d      	ldr	r2, [pc, #116]	@ (80028bc <TIM_OC3_SetConfig+0xd0>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d10d      	bne.n	8002866 <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800284a:	697b      	ldr	r3, [r7, #20]
 800284c:	f423 6300 	bic.w	r3, r3, #2048	@ 0x800
 8002850:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8002852:	683b      	ldr	r3, [r7, #0]
 8002854:	68db      	ldr	r3, [r3, #12]
 8002856:	021b      	lsls	r3, r3, #8
 8002858:	697a      	ldr	r2, [r7, #20]
 800285a:	4313      	orrs	r3, r2
 800285c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800285e:	697b      	ldr	r3, [r7, #20]
 8002860:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8002864:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	4a14      	ldr	r2, [pc, #80]	@ (80028bc <TIM_OC3_SetConfig+0xd0>)
 800286a:	4293      	cmp	r3, r2
 800286c:	d113      	bne.n	8002896 <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800286e:	693b      	ldr	r3, [r7, #16]
 8002870:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002874:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8002876:	693b      	ldr	r3, [r7, #16]
 8002878:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800287c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800287e:	683b      	ldr	r3, [r7, #0]
 8002880:	695b      	ldr	r3, [r3, #20]
 8002882:	011b      	lsls	r3, r3, #4
 8002884:	693a      	ldr	r2, [r7, #16]
 8002886:	4313      	orrs	r3, r2
 8002888:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800288a:	683b      	ldr	r3, [r7, #0]
 800288c:	699b      	ldr	r3, [r3, #24]
 800288e:	011b      	lsls	r3, r3, #4
 8002890:	693a      	ldr	r2, [r7, #16]
 8002892:	4313      	orrs	r3, r2
 8002894:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	693a      	ldr	r2, [r7, #16]
 800289a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800289c:	687b      	ldr	r3, [r7, #4]
 800289e:	68fa      	ldr	r2, [r7, #12]
 80028a0:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80028a2:	683b      	ldr	r3, [r7, #0]
 80028a4:	685a      	ldr	r2, [r3, #4]
 80028a6:	687b      	ldr	r3, [r7, #4]
 80028a8:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80028aa:	687b      	ldr	r3, [r7, #4]
 80028ac:	697a      	ldr	r2, [r7, #20]
 80028ae:	621a      	str	r2, [r3, #32]
}
 80028b0:	bf00      	nop
 80028b2:	371c      	adds	r7, #28
 80028b4:	46bd      	mov	sp, r7
 80028b6:	bc80      	pop	{r7}
 80028b8:	4770      	bx	lr
 80028ba:	bf00      	nop
 80028bc:	40012c00 	.word	0x40012c00

080028c0 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80028c0:	b480      	push	{r7}
 80028c2:	b087      	sub	sp, #28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
 80028c8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	6a1b      	ldr	r3, [r3, #32]
 80028ce:	613b      	str	r3, [r7, #16]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80028d0:	687b      	ldr	r3, [r7, #4]
 80028d2:	6a1b      	ldr	r3, [r3, #32]
 80028d4:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80028dc:	687b      	ldr	r3, [r7, #4]
 80028de:	685b      	ldr	r3, [r3, #4]
 80028e0:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	69db      	ldr	r3, [r3, #28]
 80028e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80028e8:	68fb      	ldr	r3, [r7, #12]
 80028ea:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 80028ee:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 80028f6:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80028f8:	683b      	ldr	r3, [r7, #0]
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	021b      	lsls	r3, r3, #8
 80028fe:	68fa      	ldr	r2, [r7, #12]
 8002900:	4313      	orrs	r3, r2
 8002902:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8002904:	693b      	ldr	r3, [r7, #16]
 8002906:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 800290a:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800290c:	683b      	ldr	r3, [r7, #0]
 800290e:	689b      	ldr	r3, [r3, #8]
 8002910:	031b      	lsls	r3, r3, #12
 8002912:	693a      	ldr	r2, [r7, #16]
 8002914:	4313      	orrs	r3, r2
 8002916:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8002918:	687b      	ldr	r3, [r7, #4]
 800291a:	4a0f      	ldr	r2, [pc, #60]	@ (8002958 <TIM_OC4_SetConfig+0x98>)
 800291c:	4293      	cmp	r3, r2
 800291e:	d109      	bne.n	8002934 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8002920:	697b      	ldr	r3, [r7, #20]
 8002922:	f423 4380 	bic.w	r3, r3, #16384	@ 0x4000
 8002926:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8002928:	683b      	ldr	r3, [r7, #0]
 800292a:	695b      	ldr	r3, [r3, #20]
 800292c:	019b      	lsls	r3, r3, #6
 800292e:	697a      	ldr	r2, [r7, #20]
 8002930:	4313      	orrs	r3, r2
 8002932:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002934:	687b      	ldr	r3, [r7, #4]
 8002936:	697a      	ldr	r2, [r7, #20]
 8002938:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800293a:	687b      	ldr	r3, [r7, #4]
 800293c:	68fa      	ldr	r2, [r7, #12]
 800293e:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8002940:	683b      	ldr	r3, [r7, #0]
 8002942:	685a      	ldr	r2, [r3, #4]
 8002944:	687b      	ldr	r3, [r7, #4]
 8002946:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002948:	687b      	ldr	r3, [r7, #4]
 800294a:	693a      	ldr	r2, [r7, #16]
 800294c:	621a      	str	r2, [r3, #32]
}
 800294e:	bf00      	nop
 8002950:	371c      	adds	r7, #28
 8002952:	46bd      	mov	sp, r7
 8002954:	bc80      	pop	{r7}
 8002956:	4770      	bx	lr
 8002958:	40012c00 	.word	0x40012c00

0800295c <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800295c:	b480      	push	{r7}
 800295e:	b087      	sub	sp, #28
 8002960:	af00      	add	r7, sp, #0
 8002962:	60f8      	str	r0, [r7, #12]
 8002964:	60b9      	str	r1, [r7, #8]
 8002966:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8002968:	68fb      	ldr	r3, [r7, #12]
 800296a:	6a1b      	ldr	r3, [r3, #32]
 800296c:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800296e:	68fb      	ldr	r3, [r7, #12]
 8002970:	6a1b      	ldr	r3, [r3, #32]
 8002972:	f023 0201 	bic.w	r2, r3, #1
 8002976:	68fb      	ldr	r3, [r7, #12]
 8002978:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800297a:	68fb      	ldr	r3, [r7, #12]
 800297c:	699b      	ldr	r3, [r3, #24]
 800297e:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8002980:	693b      	ldr	r3, [r7, #16]
 8002982:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8002986:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	011b      	lsls	r3, r3, #4
 800298c:	693a      	ldr	r2, [r7, #16]
 800298e:	4313      	orrs	r3, r2
 8002990:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8002992:	697b      	ldr	r3, [r7, #20]
 8002994:	f023 030a 	bic.w	r3, r3, #10
 8002998:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800299a:	697a      	ldr	r2, [r7, #20]
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	4313      	orrs	r3, r2
 80029a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80029a2:	68fb      	ldr	r3, [r7, #12]
 80029a4:	693a      	ldr	r2, [r7, #16]
 80029a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80029a8:	68fb      	ldr	r3, [r7, #12]
 80029aa:	697a      	ldr	r2, [r7, #20]
 80029ac:	621a      	str	r2, [r3, #32]
}
 80029ae:	bf00      	nop
 80029b0:	371c      	adds	r7, #28
 80029b2:	46bd      	mov	sp, r7
 80029b4:	bc80      	pop	{r7}
 80029b6:	4770      	bx	lr

080029b8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80029b8:	b480      	push	{r7}
 80029ba:	b087      	sub	sp, #28
 80029bc:	af00      	add	r7, sp, #0
 80029be:	60f8      	str	r0, [r7, #12]
 80029c0:	60b9      	str	r1, [r7, #8]
 80029c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	6a1b      	ldr	r3, [r3, #32]
 80029c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80029ca:	68fb      	ldr	r3, [r7, #12]
 80029cc:	6a1b      	ldr	r3, [r3, #32]
 80029ce:	f023 0210 	bic.w	r2, r3, #16
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	699b      	ldr	r3, [r3, #24]
 80029da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80029dc:	693b      	ldr	r3, [r7, #16]
 80029de:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 80029e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	031b      	lsls	r3, r3, #12
 80029e8:	693a      	ldr	r2, [r7, #16]
 80029ea:	4313      	orrs	r3, r2
 80029ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80029ee:	697b      	ldr	r3, [r7, #20]
 80029f0:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 80029f4:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 80029f6:	68bb      	ldr	r3, [r7, #8]
 80029f8:	011b      	lsls	r3, r3, #4
 80029fa:	697a      	ldr	r2, [r7, #20]
 80029fc:	4313      	orrs	r3, r2
 80029fe:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002a00:	68fb      	ldr	r3, [r7, #12]
 8002a02:	693a      	ldr	r2, [r7, #16]
 8002a04:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8002a06:	68fb      	ldr	r3, [r7, #12]
 8002a08:	697a      	ldr	r2, [r7, #20]
 8002a0a:	621a      	str	r2, [r3, #32]
}
 8002a0c:	bf00      	nop
 8002a0e:	371c      	adds	r7, #28
 8002a10:	46bd      	mov	sp, r7
 8002a12:	bc80      	pop	{r7}
 8002a14:	4770      	bx	lr

08002a16 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8002a16:	b480      	push	{r7}
 8002a18:	b085      	sub	sp, #20
 8002a1a:	af00      	add	r7, sp, #0
 8002a1c:	6078      	str	r0, [r7, #4]
 8002a1e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	689b      	ldr	r3, [r3, #8]
 8002a24:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8002a26:	68fb      	ldr	r3, [r7, #12]
 8002a28:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002a2c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002a2e:	683a      	ldr	r2, [r7, #0]
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	4313      	orrs	r3, r2
 8002a34:	f043 0307 	orr.w	r3, r3, #7
 8002a38:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a3a:	687b      	ldr	r3, [r7, #4]
 8002a3c:	68fa      	ldr	r2, [r7, #12]
 8002a3e:	609a      	str	r2, [r3, #8]
}
 8002a40:	bf00      	nop
 8002a42:	3714      	adds	r7, #20
 8002a44:	46bd      	mov	sp, r7
 8002a46:	bc80      	pop	{r7}
 8002a48:	4770      	bx	lr

08002a4a <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002a4a:	b480      	push	{r7}
 8002a4c:	b087      	sub	sp, #28
 8002a4e:	af00      	add	r7, sp, #0
 8002a50:	60f8      	str	r0, [r7, #12]
 8002a52:	60b9      	str	r1, [r7, #8]
 8002a54:	607a      	str	r2, [r7, #4]
 8002a56:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8002a58:	68fb      	ldr	r3, [r7, #12]
 8002a5a:	689b      	ldr	r3, [r3, #8]
 8002a5c:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002a5e:	697b      	ldr	r3, [r7, #20]
 8002a60:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002a64:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8002a66:	683b      	ldr	r3, [r7, #0]
 8002a68:	021a      	lsls	r2, r3, #8
 8002a6a:	687b      	ldr	r3, [r7, #4]
 8002a6c:	431a      	orrs	r2, r3
 8002a6e:	68bb      	ldr	r3, [r7, #8]
 8002a70:	4313      	orrs	r3, r2
 8002a72:	697a      	ldr	r2, [r7, #20]
 8002a74:	4313      	orrs	r3, r2
 8002a76:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	697a      	ldr	r2, [r7, #20]
 8002a7c:	609a      	str	r2, [r3, #8]
}
 8002a7e:	bf00      	nop
 8002a80:	371c      	adds	r7, #28
 8002a82:	46bd      	mov	sp, r7
 8002a84:	bc80      	pop	{r7}
 8002a86:	4770      	bx	lr

08002a88 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8002a88:	b480      	push	{r7}
 8002a8a:	b087      	sub	sp, #28
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	60f8      	str	r0, [r7, #12]
 8002a90:	60b9      	str	r1, [r7, #8]
 8002a92:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	f003 031f 	and.w	r3, r3, #31
 8002a9a:	2201      	movs	r2, #1
 8002a9c:	fa02 f303 	lsl.w	r3, r2, r3
 8002aa0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8002aa2:	68fb      	ldr	r3, [r7, #12]
 8002aa4:	6a1a      	ldr	r2, [r3, #32]
 8002aa6:	697b      	ldr	r3, [r7, #20]
 8002aa8:	43db      	mvns	r3, r3
 8002aaa:	401a      	ands	r2, r3
 8002aac:	68fb      	ldr	r3, [r7, #12]
 8002aae:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8002ab0:	68fb      	ldr	r3, [r7, #12]
 8002ab2:	6a1a      	ldr	r2, [r3, #32]
 8002ab4:	68bb      	ldr	r3, [r7, #8]
 8002ab6:	f003 031f 	and.w	r3, r3, #31
 8002aba:	6879      	ldr	r1, [r7, #4]
 8002abc:	fa01 f303 	lsl.w	r3, r1, r3
 8002ac0:	431a      	orrs	r2, r3
 8002ac2:	68fb      	ldr	r3, [r7, #12]
 8002ac4:	621a      	str	r2, [r3, #32]
}
 8002ac6:	bf00      	nop
 8002ac8:	371c      	adds	r7, #28
 8002aca:	46bd      	mov	sp, r7
 8002acc:	bc80      	pop	{r7}
 8002ace:	4770      	bx	lr

08002ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002ad0:	b480      	push	{r7}
 8002ad2:	b085      	sub	sp, #20
 8002ad4:	af00      	add	r7, sp, #0
 8002ad6:	6078      	str	r0, [r7, #4]
 8002ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002ada:	687b      	ldr	r3, [r7, #4]
 8002adc:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ae0:	2b01      	cmp	r3, #1
 8002ae2:	d101      	bne.n	8002ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8002ae4:	2302      	movs	r3, #2
 8002ae6:	e046      	b.n	8002b76 <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002ae8:	687b      	ldr	r3, [r7, #4]
 8002aea:	2201      	movs	r2, #1
 8002aec:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002af0:	687b      	ldr	r3, [r7, #4]
 8002af2:	2202      	movs	r2, #2
 8002af4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	685b      	ldr	r3, [r3, #4]
 8002afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002b00:	687b      	ldr	r3, [r7, #4]
 8002b02:	681b      	ldr	r3, [r3, #0]
 8002b04:	689b      	ldr	r3, [r3, #8]
 8002b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002b08:	68fb      	ldr	r3, [r7, #12]
 8002b0a:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002b10:	683b      	ldr	r3, [r7, #0]
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	68fa      	ldr	r2, [r7, #12]
 8002b16:	4313      	orrs	r3, r2
 8002b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	68fa      	ldr	r2, [r7, #12]
 8002b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8002b22:	687b      	ldr	r3, [r7, #4]
 8002b24:	681b      	ldr	r3, [r3, #0]
 8002b26:	4a16      	ldr	r2, [pc, #88]	@ (8002b80 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8002b28:	4293      	cmp	r3, r2
 8002b2a:	d00e      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b2c:	687b      	ldr	r3, [r7, #4]
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002b34:	d009      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	681b      	ldr	r3, [r3, #0]
 8002b3a:	4a12      	ldr	r2, [pc, #72]	@ (8002b84 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002b3c:	4293      	cmp	r3, r2
 8002b3e:	d004      	beq.n	8002b4a <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002b40:	687b      	ldr	r3, [r7, #4]
 8002b42:	681b      	ldr	r3, [r3, #0]
 8002b44:	4a10      	ldr	r2, [pc, #64]	@ (8002b88 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8002b46:	4293      	cmp	r3, r2
 8002b48:	d10c      	bne.n	8002b64 <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002b4a:	68bb      	ldr	r3, [r7, #8]
 8002b4c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002b50:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8002b52:	683b      	ldr	r3, [r7, #0]
 8002b54:	685b      	ldr	r3, [r3, #4]
 8002b56:	68ba      	ldr	r2, [r7, #8]
 8002b58:	4313      	orrs	r3, r2
 8002b5a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	68ba      	ldr	r2, [r7, #8]
 8002b62:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	2201      	movs	r2, #1
 8002b68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8002b74:	2300      	movs	r3, #0
}
 8002b76:	4618      	mov	r0, r3
 8002b78:	3714      	adds	r7, #20
 8002b7a:	46bd      	mov	sp, r7
 8002b7c:	bc80      	pop	{r7}
 8002b7e:	4770      	bx	lr
 8002b80:	40012c00 	.word	0x40012c00
 8002b84:	40000400 	.word	0x40000400
 8002b88:	40000800 	.word	0x40000800

08002b8c <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8002b8c:	b480      	push	{r7}
 8002b8e:	b083      	sub	sp, #12
 8002b90:	af00      	add	r7, sp, #0
 8002b92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8002b94:	bf00      	nop
 8002b96:	370c      	adds	r7, #12
 8002b98:	46bd      	mov	sp, r7
 8002b9a:	bc80      	pop	{r7}
 8002b9c:	4770      	bx	lr

08002b9e <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8002b9e:	b480      	push	{r7}
 8002ba0:	b083      	sub	sp, #12
 8002ba2:	af00      	add	r7, sp, #0
 8002ba4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8002ba6:	bf00      	nop
 8002ba8:	370c      	adds	r7, #12
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bc80      	pop	{r7}
 8002bae:	4770      	bx	lr

08002bb0 <memset>:
 8002bb0:	4603      	mov	r3, r0
 8002bb2:	4402      	add	r2, r0
 8002bb4:	4293      	cmp	r3, r2
 8002bb6:	d100      	bne.n	8002bba <memset+0xa>
 8002bb8:	4770      	bx	lr
 8002bba:	f803 1b01 	strb.w	r1, [r3], #1
 8002bbe:	e7f9      	b.n	8002bb4 <memset+0x4>

08002bc0 <__libc_init_array>:
 8002bc0:	b570      	push	{r4, r5, r6, lr}
 8002bc2:	2600      	movs	r6, #0
 8002bc4:	4d0c      	ldr	r5, [pc, #48]	@ (8002bf8 <__libc_init_array+0x38>)
 8002bc6:	4c0d      	ldr	r4, [pc, #52]	@ (8002bfc <__libc_init_array+0x3c>)
 8002bc8:	1b64      	subs	r4, r4, r5
 8002bca:	10a4      	asrs	r4, r4, #2
 8002bcc:	42a6      	cmp	r6, r4
 8002bce:	d109      	bne.n	8002be4 <__libc_init_array+0x24>
 8002bd0:	f000 f81a 	bl	8002c08 <_init>
 8002bd4:	2600      	movs	r6, #0
 8002bd6:	4d0a      	ldr	r5, [pc, #40]	@ (8002c00 <__libc_init_array+0x40>)
 8002bd8:	4c0a      	ldr	r4, [pc, #40]	@ (8002c04 <__libc_init_array+0x44>)
 8002bda:	1b64      	subs	r4, r4, r5
 8002bdc:	10a4      	asrs	r4, r4, #2
 8002bde:	42a6      	cmp	r6, r4
 8002be0:	d105      	bne.n	8002bee <__libc_init_array+0x2e>
 8002be2:	bd70      	pop	{r4, r5, r6, pc}
 8002be4:	f855 3b04 	ldr.w	r3, [r5], #4
 8002be8:	4798      	blx	r3
 8002bea:	3601      	adds	r6, #1
 8002bec:	e7ee      	b.n	8002bcc <__libc_init_array+0xc>
 8002bee:	f855 3b04 	ldr.w	r3, [r5], #4
 8002bf2:	4798      	blx	r3
 8002bf4:	3601      	adds	r6, #1
 8002bf6:	e7f2      	b.n	8002bde <__libc_init_array+0x1e>
 8002bf8:	08002c44 	.word	0x08002c44
 8002bfc:	08002c44 	.word	0x08002c44
 8002c00:	08002c44 	.word	0x08002c44
 8002c04:	08002c48 	.word	0x08002c48

08002c08 <_init>:
 8002c08:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c0a:	bf00      	nop
 8002c0c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c0e:	bc08      	pop	{r3}
 8002c10:	469e      	mov	lr, r3
 8002c12:	4770      	bx	lr

08002c14 <_fini>:
 8002c14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002c16:	bf00      	nop
 8002c18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002c1a:	bc08      	pop	{r3}
 8002c1c:	469e      	mov	lr, r3
 8002c1e:	4770      	bx	lr
