
lcd.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000013c  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000025f8  0800013c  0800013c  0000113c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000001c  08002734  08002734  00003734  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002750  08002750  0000400c  2**0
                  CONTENTS
  4 .ARM          00000008  08002750  08002750  00003750  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002758  08002758  0000400c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002758  08002758  00003758  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800275c  0800275c  0000375c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  08002760  00004000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000064  2000000c  0800276c  0000400c  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000070  0800276c  00004070  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  0000400c  2**0
                  CONTENTS, READONLY
 12 .debug_info   000072f4  00000000  00000000  00004035  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001540  00000000  00000000  0000b329  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000810  00000000  00000000  0000c870  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000612  00000000  00000000  0000d080  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000147dd  00000000  00000000  0000d692  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00008160  00000000  00000000  00021e6f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00082949  00000000  00000000  00029fcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000ac918  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000020ec  00000000  00000000  000ac95c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000053  00000000  00000000  000aea48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

0800013c <__do_global_dtors_aux>:
 800013c:	b510      	push	{r4, lr}
 800013e:	4c05      	ldr	r4, [pc, #20]	@ (8000154 <__do_global_dtors_aux+0x18>)
 8000140:	7823      	ldrb	r3, [r4, #0]
 8000142:	b933      	cbnz	r3, 8000152 <__do_global_dtors_aux+0x16>
 8000144:	4b04      	ldr	r3, [pc, #16]	@ (8000158 <__do_global_dtors_aux+0x1c>)
 8000146:	b113      	cbz	r3, 800014e <__do_global_dtors_aux+0x12>
 8000148:	4804      	ldr	r0, [pc, #16]	@ (800015c <__do_global_dtors_aux+0x20>)
 800014a:	f3af 8000 	nop.w
 800014e:	2301      	movs	r3, #1
 8000150:	7023      	strb	r3, [r4, #0]
 8000152:	bd10      	pop	{r4, pc}
 8000154:	2000000c 	.word	0x2000000c
 8000158:	00000000 	.word	0x00000000
 800015c:	0800271c 	.word	0x0800271c

08000160 <frame_dummy>:
 8000160:	b508      	push	{r3, lr}
 8000162:	4b03      	ldr	r3, [pc, #12]	@ (8000170 <frame_dummy+0x10>)
 8000164:	b11b      	cbz	r3, 800016e <frame_dummy+0xe>
 8000166:	4903      	ldr	r1, [pc, #12]	@ (8000174 <frame_dummy+0x14>)
 8000168:	4803      	ldr	r0, [pc, #12]	@ (8000178 <frame_dummy+0x18>)
 800016a:	f3af 8000 	nop.w
 800016e:	bd08      	pop	{r3, pc}
 8000170:	00000000 	.word	0x00000000
 8000174:	20000010 	.word	0x20000010
 8000178:	0800271c 	.word	0x0800271c

0800017c <__aeabi_uldivmod>:
 800017c:	b953      	cbnz	r3, 8000194 <__aeabi_uldivmod+0x18>
 800017e:	b94a      	cbnz	r2, 8000194 <__aeabi_uldivmod+0x18>
 8000180:	2900      	cmp	r1, #0
 8000182:	bf08      	it	eq
 8000184:	2800      	cmpeq	r0, #0
 8000186:	bf1c      	itt	ne
 8000188:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 800018c:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 8000190:	f000 b968 	b.w	8000464 <__aeabi_idiv0>
 8000194:	f1ad 0c08 	sub.w	ip, sp, #8
 8000198:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 800019c:	f000 f806 	bl	80001ac <__udivmoddi4>
 80001a0:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001a4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001a8:	b004      	add	sp, #16
 80001aa:	4770      	bx	lr

080001ac <__udivmoddi4>:
 80001ac:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001b0:	9d08      	ldr	r5, [sp, #32]
 80001b2:	460c      	mov	r4, r1
 80001b4:	2b00      	cmp	r3, #0
 80001b6:	d14e      	bne.n	8000256 <__udivmoddi4+0xaa>
 80001b8:	4694      	mov	ip, r2
 80001ba:	458c      	cmp	ip, r1
 80001bc:	4686      	mov	lr, r0
 80001be:	fab2 f282 	clz	r2, r2
 80001c2:	d962      	bls.n	800028a <__udivmoddi4+0xde>
 80001c4:	b14a      	cbz	r2, 80001da <__udivmoddi4+0x2e>
 80001c6:	f1c2 0320 	rsb	r3, r2, #32
 80001ca:	4091      	lsls	r1, r2
 80001cc:	fa20 f303 	lsr.w	r3, r0, r3
 80001d0:	fa0c fc02 	lsl.w	ip, ip, r2
 80001d4:	4319      	orrs	r1, r3
 80001d6:	fa00 fe02 	lsl.w	lr, r0, r2
 80001da:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80001de:	fbb1 f4f7 	udiv	r4, r1, r7
 80001e2:	fb07 1114 	mls	r1, r7, r4, r1
 80001e6:	fa1f f68c 	uxth.w	r6, ip
 80001ea:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80001ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80001f2:	fb04 f106 	mul.w	r1, r4, r6
 80001f6:	4299      	cmp	r1, r3
 80001f8:	d90a      	bls.n	8000210 <__udivmoddi4+0x64>
 80001fa:	eb1c 0303 	adds.w	r3, ip, r3
 80001fe:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 8000202:	f080 8110 	bcs.w	8000426 <__udivmoddi4+0x27a>
 8000206:	4299      	cmp	r1, r3
 8000208:	f240 810d 	bls.w	8000426 <__udivmoddi4+0x27a>
 800020c:	3c02      	subs	r4, #2
 800020e:	4463      	add	r3, ip
 8000210:	1a59      	subs	r1, r3, r1
 8000212:	fbb1 f0f7 	udiv	r0, r1, r7
 8000216:	fb07 1110 	mls	r1, r7, r0, r1
 800021a:	fb00 f606 	mul.w	r6, r0, r6
 800021e:	fa1f f38e 	uxth.w	r3, lr
 8000222:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000226:	429e      	cmp	r6, r3
 8000228:	d90a      	bls.n	8000240 <__udivmoddi4+0x94>
 800022a:	eb1c 0303 	adds.w	r3, ip, r3
 800022e:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 8000232:	f080 80fa 	bcs.w	800042a <__udivmoddi4+0x27e>
 8000236:	429e      	cmp	r6, r3
 8000238:	f240 80f7 	bls.w	800042a <__udivmoddi4+0x27e>
 800023c:	4463      	add	r3, ip
 800023e:	3802      	subs	r0, #2
 8000240:	2100      	movs	r1, #0
 8000242:	1b9b      	subs	r3, r3, r6
 8000244:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000248:	b11d      	cbz	r5, 8000252 <__udivmoddi4+0xa6>
 800024a:	40d3      	lsrs	r3, r2
 800024c:	2200      	movs	r2, #0
 800024e:	e9c5 3200 	strd	r3, r2, [r5]
 8000252:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000256:	428b      	cmp	r3, r1
 8000258:	d905      	bls.n	8000266 <__udivmoddi4+0xba>
 800025a:	b10d      	cbz	r5, 8000260 <__udivmoddi4+0xb4>
 800025c:	e9c5 0100 	strd	r0, r1, [r5]
 8000260:	2100      	movs	r1, #0
 8000262:	4608      	mov	r0, r1
 8000264:	e7f5      	b.n	8000252 <__udivmoddi4+0xa6>
 8000266:	fab3 f183 	clz	r1, r3
 800026a:	2900      	cmp	r1, #0
 800026c:	d146      	bne.n	80002fc <__udivmoddi4+0x150>
 800026e:	42a3      	cmp	r3, r4
 8000270:	d302      	bcc.n	8000278 <__udivmoddi4+0xcc>
 8000272:	4290      	cmp	r0, r2
 8000274:	f0c0 80ee 	bcc.w	8000454 <__udivmoddi4+0x2a8>
 8000278:	1a86      	subs	r6, r0, r2
 800027a:	eb64 0303 	sbc.w	r3, r4, r3
 800027e:	2001      	movs	r0, #1
 8000280:	2d00      	cmp	r5, #0
 8000282:	d0e6      	beq.n	8000252 <__udivmoddi4+0xa6>
 8000284:	e9c5 6300 	strd	r6, r3, [r5]
 8000288:	e7e3      	b.n	8000252 <__udivmoddi4+0xa6>
 800028a:	2a00      	cmp	r2, #0
 800028c:	f040 808f 	bne.w	80003ae <__udivmoddi4+0x202>
 8000290:	eba1 040c 	sub.w	r4, r1, ip
 8000294:	2101      	movs	r1, #1
 8000296:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800029a:	fa1f f78c 	uxth.w	r7, ip
 800029e:	fbb4 f6f8 	udiv	r6, r4, r8
 80002a2:	fb08 4416 	mls	r4, r8, r6, r4
 80002a6:	fb07 f006 	mul.w	r0, r7, r6
 80002aa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002ae:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002b2:	4298      	cmp	r0, r3
 80002b4:	d908      	bls.n	80002c8 <__udivmoddi4+0x11c>
 80002b6:	eb1c 0303 	adds.w	r3, ip, r3
 80002ba:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 80002be:	d202      	bcs.n	80002c6 <__udivmoddi4+0x11a>
 80002c0:	4298      	cmp	r0, r3
 80002c2:	f200 80cb 	bhi.w	800045c <__udivmoddi4+0x2b0>
 80002c6:	4626      	mov	r6, r4
 80002c8:	1a1c      	subs	r4, r3, r0
 80002ca:	fbb4 f0f8 	udiv	r0, r4, r8
 80002ce:	fb08 4410 	mls	r4, r8, r0, r4
 80002d2:	fb00 f707 	mul.w	r7, r0, r7
 80002d6:	fa1f f38e 	uxth.w	r3, lr
 80002da:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80002de:	429f      	cmp	r7, r3
 80002e0:	d908      	bls.n	80002f4 <__udivmoddi4+0x148>
 80002e2:	eb1c 0303 	adds.w	r3, ip, r3
 80002e6:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 80002ea:	d202      	bcs.n	80002f2 <__udivmoddi4+0x146>
 80002ec:	429f      	cmp	r7, r3
 80002ee:	f200 80ae 	bhi.w	800044e <__udivmoddi4+0x2a2>
 80002f2:	4620      	mov	r0, r4
 80002f4:	1bdb      	subs	r3, r3, r7
 80002f6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 80002fa:	e7a5      	b.n	8000248 <__udivmoddi4+0x9c>
 80002fc:	f1c1 0720 	rsb	r7, r1, #32
 8000300:	408b      	lsls	r3, r1
 8000302:	fa22 fc07 	lsr.w	ip, r2, r7
 8000306:	ea4c 0c03 	orr.w	ip, ip, r3
 800030a:	fa24 f607 	lsr.w	r6, r4, r7
 800030e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000312:	fbb6 f8f9 	udiv	r8, r6, r9
 8000316:	fa1f fe8c 	uxth.w	lr, ip
 800031a:	fb09 6618 	mls	r6, r9, r8, r6
 800031e:	fa20 f307 	lsr.w	r3, r0, r7
 8000322:	408c      	lsls	r4, r1
 8000324:	fa00 fa01 	lsl.w	sl, r0, r1
 8000328:	fb08 f00e 	mul.w	r0, r8, lr
 800032c:	431c      	orrs	r4, r3
 800032e:	0c23      	lsrs	r3, r4, #16
 8000330:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000334:	4298      	cmp	r0, r3
 8000336:	fa02 f201 	lsl.w	r2, r2, r1
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x1a6>
 800033c:	eb1c 0303 	adds.w	r3, ip, r3
 8000340:	f108 36ff 	add.w	r6, r8, #4294967295	@ 0xffffffff
 8000344:	f080 8081 	bcs.w	800044a <__udivmoddi4+0x29e>
 8000348:	4298      	cmp	r0, r3
 800034a:	d97e      	bls.n	800044a <__udivmoddi4+0x29e>
 800034c:	f1a8 0802 	sub.w	r8, r8, #2
 8000350:	4463      	add	r3, ip
 8000352:	1a1e      	subs	r6, r3, r0
 8000354:	fbb6 f3f9 	udiv	r3, r6, r9
 8000358:	fb09 6613 	mls	r6, r9, r3, r6
 800035c:	fb03 fe0e 	mul.w	lr, r3, lr
 8000360:	b2a4      	uxth	r4, r4
 8000362:	ea44 4406 	orr.w	r4, r4, r6, lsl #16
 8000366:	45a6      	cmp	lr, r4
 8000368:	d908      	bls.n	800037c <__udivmoddi4+0x1d0>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 8000372:	d266      	bcs.n	8000442 <__udivmoddi4+0x296>
 8000374:	45a6      	cmp	lr, r4
 8000376:	d964      	bls.n	8000442 <__udivmoddi4+0x296>
 8000378:	3b02      	subs	r3, #2
 800037a:	4464      	add	r4, ip
 800037c:	ea43 4008 	orr.w	r0, r3, r8, lsl #16
 8000380:	fba0 8302 	umull	r8, r3, r0, r2
 8000384:	eba4 040e 	sub.w	r4, r4, lr
 8000388:	429c      	cmp	r4, r3
 800038a:	46c6      	mov	lr, r8
 800038c:	461e      	mov	r6, r3
 800038e:	d350      	bcc.n	8000432 <__udivmoddi4+0x286>
 8000390:	d04d      	beq.n	800042e <__udivmoddi4+0x282>
 8000392:	b155      	cbz	r5, 80003aa <__udivmoddi4+0x1fe>
 8000394:	ebba 030e 	subs.w	r3, sl, lr
 8000398:	eb64 0406 	sbc.w	r4, r4, r6
 800039c:	fa04 f707 	lsl.w	r7, r4, r7
 80003a0:	40cb      	lsrs	r3, r1
 80003a2:	431f      	orrs	r7, r3
 80003a4:	40cc      	lsrs	r4, r1
 80003a6:	e9c5 7400 	strd	r7, r4, [r5]
 80003aa:	2100      	movs	r1, #0
 80003ac:	e751      	b.n	8000252 <__udivmoddi4+0xa6>
 80003ae:	fa0c fc02 	lsl.w	ip, ip, r2
 80003b2:	f1c2 0320 	rsb	r3, r2, #32
 80003b6:	40d9      	lsrs	r1, r3
 80003b8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003bc:	fa20 f303 	lsr.w	r3, r0, r3
 80003c0:	fa00 fe02 	lsl.w	lr, r0, r2
 80003c4:	fbb1 f0f8 	udiv	r0, r1, r8
 80003c8:	fb08 1110 	mls	r1, r8, r0, r1
 80003cc:	4094      	lsls	r4, r2
 80003ce:	431c      	orrs	r4, r3
 80003d0:	fa1f f78c 	uxth.w	r7, ip
 80003d4:	0c23      	lsrs	r3, r4, #16
 80003d6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80003da:	fb00 f107 	mul.w	r1, r0, r7
 80003de:	4299      	cmp	r1, r3
 80003e0:	d908      	bls.n	80003f4 <__udivmoddi4+0x248>
 80003e2:	eb1c 0303 	adds.w	r3, ip, r3
 80003e6:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 80003ea:	d22c      	bcs.n	8000446 <__udivmoddi4+0x29a>
 80003ec:	4299      	cmp	r1, r3
 80003ee:	d92a      	bls.n	8000446 <__udivmoddi4+0x29a>
 80003f0:	3802      	subs	r0, #2
 80003f2:	4463      	add	r3, ip
 80003f4:	1a5b      	subs	r3, r3, r1
 80003f6:	fbb3 f1f8 	udiv	r1, r3, r8
 80003fa:	fb08 3311 	mls	r3, r8, r1, r3
 80003fe:	b2a4      	uxth	r4, r4
 8000400:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000404:	fb01 f307 	mul.w	r3, r1, r7
 8000408:	42a3      	cmp	r3, r4
 800040a:	d908      	bls.n	800041e <__udivmoddi4+0x272>
 800040c:	eb1c 0404 	adds.w	r4, ip, r4
 8000410:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000414:	d213      	bcs.n	800043e <__udivmoddi4+0x292>
 8000416:	42a3      	cmp	r3, r4
 8000418:	d911      	bls.n	800043e <__udivmoddi4+0x292>
 800041a:	3902      	subs	r1, #2
 800041c:	4464      	add	r4, ip
 800041e:	1ae4      	subs	r4, r4, r3
 8000420:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000424:	e73b      	b.n	800029e <__udivmoddi4+0xf2>
 8000426:	4604      	mov	r4, r0
 8000428:	e6f2      	b.n	8000210 <__udivmoddi4+0x64>
 800042a:	4608      	mov	r0, r1
 800042c:	e708      	b.n	8000240 <__udivmoddi4+0x94>
 800042e:	45c2      	cmp	sl, r8
 8000430:	d2af      	bcs.n	8000392 <__udivmoddi4+0x1e6>
 8000432:	ebb8 0e02 	subs.w	lr, r8, r2
 8000436:	eb63 060c 	sbc.w	r6, r3, ip
 800043a:	3801      	subs	r0, #1
 800043c:	e7a9      	b.n	8000392 <__udivmoddi4+0x1e6>
 800043e:	4631      	mov	r1, r6
 8000440:	e7ed      	b.n	800041e <__udivmoddi4+0x272>
 8000442:	4603      	mov	r3, r0
 8000444:	e79a      	b.n	800037c <__udivmoddi4+0x1d0>
 8000446:	4630      	mov	r0, r6
 8000448:	e7d4      	b.n	80003f4 <__udivmoddi4+0x248>
 800044a:	46b0      	mov	r8, r6
 800044c:	e781      	b.n	8000352 <__udivmoddi4+0x1a6>
 800044e:	4463      	add	r3, ip
 8000450:	3802      	subs	r0, #2
 8000452:	e74f      	b.n	80002f4 <__udivmoddi4+0x148>
 8000454:	4606      	mov	r6, r0
 8000456:	4623      	mov	r3, r4
 8000458:	4608      	mov	r0, r1
 800045a:	e711      	b.n	8000280 <__udivmoddi4+0xd4>
 800045c:	3e02      	subs	r6, #2
 800045e:	4463      	add	r3, ip
 8000460:	e732      	b.n	80002c8 <__udivmoddi4+0x11c>
 8000462:	bf00      	nop

08000464 <__aeabi_idiv0>:
 8000464:	4770      	bx	lr
 8000466:	bf00      	nop

08000468 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000468:	b580      	push	{r7, lr}
 800046a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800046c:	f000 fa13 	bl	8000896 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000470:	f000 f810 	bl	8000494 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000474:	f000 f8ca 	bl	800060c <MX_GPIO_Init>
  MX_TIM2_Init();
 8000478:	f000 f854 	bl	8000524 <MX_TIM2_Init>
  /* USER CODE BEGIN 2 */
  HAL_TIM_Base_Start_IT(&htim2);
 800047c:	4804      	ldr	r0, [pc, #16]	@ (8000490 <main+0x28>)
 800047e:	f001 fae1 	bl	8001a44 <HAL_TIM_Base_Start_IT>
  HAL_TIM_PWM_Start(&htim2, TIM_CHANNEL_1);
 8000482:	2100      	movs	r1, #0
 8000484:	4802      	ldr	r0, [pc, #8]	@ (8000490 <main+0x28>)
 8000486:	f001 fb77 	bl	8001b78 <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 800048a:	bf00      	nop
 800048c:	e7fd      	b.n	800048a <main+0x22>
 800048e:	bf00      	nop
 8000490:	20000028 	.word	0x20000028

08000494 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000494:	b580      	push	{r7, lr}
 8000496:	b092      	sub	sp, #72	@ 0x48
 8000498:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800049a:	f107 0314 	add.w	r3, r7, #20
 800049e:	2234      	movs	r2, #52	@ 0x34
 80004a0:	2100      	movs	r1, #0
 80004a2:	4618      	mov	r0, r3
 80004a4:	f002 f90e 	bl	80026c4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80004a8:	463b      	mov	r3, r7
 80004aa:	2200      	movs	r2, #0
 80004ac:	601a      	str	r2, [r3, #0]
 80004ae:	605a      	str	r2, [r3, #4]
 80004b0:	609a      	str	r2, [r3, #8]
 80004b2:	60da      	str	r2, [r3, #12]
 80004b4:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80004b6:	4b1a      	ldr	r3, [pc, #104]	@ (8000520 <SystemClock_Config+0x8c>)
 80004b8:	681b      	ldr	r3, [r3, #0]
 80004ba:	f423 53c0 	bic.w	r3, r3, #6144	@ 0x1800
 80004be:	4a18      	ldr	r2, [pc, #96]	@ (8000520 <SystemClock_Config+0x8c>)
 80004c0:	f443 6300 	orr.w	r3, r3, #2048	@ 0x800
 80004c4:	6013      	str	r3, [r2, #0]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_MSI;
 80004c6:	2310      	movs	r3, #16
 80004c8:	617b      	str	r3, [r7, #20]
  RCC_OscInitStruct.MSIState = RCC_MSI_ON;
 80004ca:	2301      	movs	r3, #1
 80004cc:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.MSICalibrationValue = 0;
 80004ce:	2300      	movs	r3, #0
 80004d0:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.MSIClockRange = RCC_MSIRANGE_5;
 80004d2:	f44f 4320 	mov.w	r3, #40960	@ 0xa000
 80004d6:	637b      	str	r3, [r7, #52]	@ 0x34
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80004d8:	2300      	movs	r3, #0
 80004da:	63bb      	str	r3, [r7, #56]	@ 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80004dc:	f107 0314 	add.w	r3, r7, #20
 80004e0:	4618      	mov	r0, r3
 80004e2:	f000 fced 	bl	8000ec0 <HAL_RCC_OscConfig>
 80004e6:	4603      	mov	r3, r0
 80004e8:	2b00      	cmp	r3, #0
 80004ea:	d001      	beq.n	80004f0 <SystemClock_Config+0x5c>
  {
    Error_Handler();
 80004ec:	f000 f8cc 	bl	8000688 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80004f0:	230f      	movs	r3, #15
 80004f2:	603b      	str	r3, [r7, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_MSI;
 80004f4:	2300      	movs	r3, #0
 80004f6:	607b      	str	r3, [r7, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80004f8:	2300      	movs	r3, #0
 80004fa:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 80004fc:	2300      	movs	r3, #0
 80004fe:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000500:	2300      	movs	r3, #0
 8000502:	613b      	str	r3, [r7, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000504:	463b      	mov	r3, r7
 8000506:	2100      	movs	r1, #0
 8000508:	4618      	mov	r0, r3
 800050a:	f001 f809 	bl	8001520 <HAL_RCC_ClockConfig>
 800050e:	4603      	mov	r3, r0
 8000510:	2b00      	cmp	r3, #0
 8000512:	d001      	beq.n	8000518 <SystemClock_Config+0x84>
  {
    Error_Handler();
 8000514:	f000 f8b8 	bl	8000688 <Error_Handler>
  }
}
 8000518:	bf00      	nop
 800051a:	3748      	adds	r7, #72	@ 0x48
 800051c:	46bd      	mov	sp, r7
 800051e:	bd80      	pop	{r7, pc}
 8000520:	40007000 	.word	0x40007000

08000524 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8000524:	b580      	push	{r7, lr}
 8000526:	b08a      	sub	sp, #40	@ 0x28
 8000528:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800052a:	f107 0318 	add.w	r3, r7, #24
 800052e:	2200      	movs	r2, #0
 8000530:	601a      	str	r2, [r3, #0]
 8000532:	605a      	str	r2, [r3, #4]
 8000534:	609a      	str	r2, [r3, #8]
 8000536:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000538:	f107 0310 	add.w	r3, r7, #16
 800053c:	2200      	movs	r2, #0
 800053e:	601a      	str	r2, [r3, #0]
 8000540:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8000542:	463b      	mov	r3, r7
 8000544:	2200      	movs	r2, #0
 8000546:	601a      	str	r2, [r3, #0]
 8000548:	605a      	str	r2, [r3, #4]
 800054a:	609a      	str	r2, [r3, #8]
 800054c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800054e:	4b2e      	ldr	r3, [pc, #184]	@ (8000608 <MX_TIM2_Init+0xe4>)
 8000550:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8000554:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 12;
 8000556:	4b2c      	ldr	r3, [pc, #176]	@ (8000608 <MX_TIM2_Init+0xe4>)
 8000558:	220c      	movs	r2, #12
 800055a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800055c:	4b2a      	ldr	r3, [pc, #168]	@ (8000608 <MX_TIM2_Init+0xe4>)
 800055e:	2200      	movs	r2, #0
 8000560:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 8000562:	4b29      	ldr	r3, [pc, #164]	@ (8000608 <MX_TIM2_Init+0xe4>)
 8000564:	f64f 72ff 	movw	r2, #65535	@ 0xffff
 8000568:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800056a:	4b27      	ldr	r3, [pc, #156]	@ (8000608 <MX_TIM2_Init+0xe4>)
 800056c:	2200      	movs	r2, #0
 800056e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000570:	4b25      	ldr	r3, [pc, #148]	@ (8000608 <MX_TIM2_Init+0xe4>)
 8000572:	2200      	movs	r2, #0
 8000574:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8000576:	4824      	ldr	r0, [pc, #144]	@ (8000608 <MX_TIM2_Init+0xe4>)
 8000578:	f001 fa24 	bl	80019c4 <HAL_TIM_Base_Init>
 800057c:	4603      	mov	r3, r0
 800057e:	2b00      	cmp	r3, #0
 8000580:	d001      	beq.n	8000586 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8000582:	f000 f881 	bl	8000688 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8000586:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800058a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800058c:	f107 0318 	add.w	r3, r7, #24
 8000590:	4619      	mov	r1, r3
 8000592:	481d      	ldr	r0, [pc, #116]	@ (8000608 <MX_TIM2_Init+0xe4>)
 8000594:	f001 fd24 	bl	8001fe0 <HAL_TIM_ConfigClockSource>
 8000598:	4603      	mov	r3, r0
 800059a:	2b00      	cmp	r3, #0
 800059c:	d001      	beq.n	80005a2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800059e:	f000 f873 	bl	8000688 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 80005a2:	4819      	ldr	r0, [pc, #100]	@ (8000608 <MX_TIM2_Init+0xe4>)
 80005a4:	f001 faa0 	bl	8001ae8 <HAL_TIM_PWM_Init>
 80005a8:	4603      	mov	r3, r0
 80005aa:	2b00      	cmp	r3, #0
 80005ac:	d001      	beq.n	80005b2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80005ae:	f000 f86b 	bl	8000688 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80005b2:	2300      	movs	r3, #0
 80005b4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80005b6:	2300      	movs	r3, #0
 80005b8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80005ba:	f107 0310 	add.w	r3, r7, #16
 80005be:	4619      	mov	r1, r3
 80005c0:	4811      	ldr	r0, [pc, #68]	@ (8000608 <MX_TIM2_Init+0xe4>)
 80005c2:	f002 f821 	bl	8002608 <HAL_TIMEx_MasterConfigSynchronization>
 80005c6:	4603      	mov	r3, r0
 80005c8:	2b00      	cmp	r3, #0
 80005ca:	d001      	beq.n	80005d0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80005cc:	f000 f85c 	bl	8000688 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80005d0:	2360      	movs	r3, #96	@ 0x60
 80005d2:	603b      	str	r3, [r7, #0]
  sConfigOC.Pulse = 32500;
 80005d4:	f647 63f4 	movw	r3, #32500	@ 0x7ef4
 80005d8:	607b      	str	r3, [r7, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80005da:	2300      	movs	r3, #0
 80005dc:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80005de:	2300      	movs	r3, #0
 80005e0:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80005e2:	463b      	mov	r3, r7
 80005e4:	2200      	movs	r2, #0
 80005e6:	4619      	mov	r1, r3
 80005e8:	4807      	ldr	r0, [pc, #28]	@ (8000608 <MX_TIM2_Init+0xe4>)
 80005ea:	f001 fc37 	bl	8001e5c <HAL_TIM_PWM_ConfigChannel>
 80005ee:	4603      	mov	r3, r0
 80005f0:	2b00      	cmp	r3, #0
 80005f2:	d001      	beq.n	80005f8 <MX_TIM2_Init+0xd4>
  {
    Error_Handler();
 80005f4:	f000 f848 	bl	8000688 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 80005f8:	4803      	ldr	r0, [pc, #12]	@ (8000608 <MX_TIM2_Init+0xe4>)
 80005fa:	f000 f89d 	bl	8000738 <HAL_TIM_MspPostInit>

}
 80005fe:	bf00      	nop
 8000600:	3728      	adds	r7, #40	@ 0x28
 8000602:	46bd      	mov	sp, r7
 8000604:	bd80      	pop	{r7, pc}
 8000606:	bf00      	nop
 8000608:	20000028 	.word	0x20000028

0800060c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800060c:	b580      	push	{r7, lr}
 800060e:	b088      	sub	sp, #32
 8000610:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000612:	f107 030c 	add.w	r3, r7, #12
 8000616:	2200      	movs	r2, #0
 8000618:	601a      	str	r2, [r3, #0]
 800061a:	605a      	str	r2, [r3, #4]
 800061c:	609a      	str	r2, [r3, #8]
 800061e:	60da      	str	r2, [r3, #12]
 8000620:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000622:	4b17      	ldr	r3, [pc, #92]	@ (8000680 <MX_GPIO_Init+0x74>)
 8000624:	69db      	ldr	r3, [r3, #28]
 8000626:	4a16      	ldr	r2, [pc, #88]	@ (8000680 <MX_GPIO_Init+0x74>)
 8000628:	f043 0301 	orr.w	r3, r3, #1
 800062c:	61d3      	str	r3, [r2, #28]
 800062e:	4b14      	ldr	r3, [pc, #80]	@ (8000680 <MX_GPIO_Init+0x74>)
 8000630:	69db      	ldr	r3, [r3, #28]
 8000632:	f003 0301 	and.w	r3, r3, #1
 8000636:	60bb      	str	r3, [r7, #8]
 8000638:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800063a:	4b11      	ldr	r3, [pc, #68]	@ (8000680 <MX_GPIO_Init+0x74>)
 800063c:	69db      	ldr	r3, [r3, #28]
 800063e:	4a10      	ldr	r2, [pc, #64]	@ (8000680 <MX_GPIO_Init+0x74>)
 8000640:	f043 0302 	orr.w	r3, r3, #2
 8000644:	61d3      	str	r3, [r2, #28]
 8000646:	4b0e      	ldr	r3, [pc, #56]	@ (8000680 <MX_GPIO_Init+0x74>)
 8000648:	69db      	ldr	r3, [r3, #28]
 800064a:	f003 0302 	and.w	r3, r3, #2
 800064e:	607b      	str	r3, [r7, #4]
 8000650:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000652:	2200      	movs	r2, #0
 8000654:	2140      	movs	r1, #64	@ 0x40
 8000656:	480b      	ldr	r0, [pc, #44]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000658:	f000 fc1a 	bl	8000e90 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PB6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 800065c:	2340      	movs	r3, #64	@ 0x40
 800065e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000660:	2301      	movs	r3, #1
 8000662:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000664:	2300      	movs	r3, #0
 8000666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000668:	2300      	movs	r3, #0
 800066a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800066c:	f107 030c 	add.w	r3, r7, #12
 8000670:	4619      	mov	r1, r3
 8000672:	4804      	ldr	r0, [pc, #16]	@ (8000684 <MX_GPIO_Init+0x78>)
 8000674:	f000 fa8c 	bl	8000b90 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000678:	bf00      	nop
 800067a:	3720      	adds	r7, #32
 800067c:	46bd      	mov	sp, r7
 800067e:	bd80      	pop	{r7, pc}
 8000680:	40023800 	.word	0x40023800
 8000684:	40020400 	.word	0x40020400

08000688 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000688:	b480      	push	{r7}
 800068a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800068c:	b672      	cpsid	i
}
 800068e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000690:	bf00      	nop
 8000692:	e7fd      	b.n	8000690 <Error_Handler+0x8>

08000694 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000694:	b480      	push	{r7}
 8000696:	b085      	sub	sp, #20
 8000698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_COMP_CLK_ENABLE();
 800069a:	4b14      	ldr	r3, [pc, #80]	@ (80006ec <HAL_MspInit+0x58>)
 800069c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800069e:	4a13      	ldr	r2, [pc, #76]	@ (80006ec <HAL_MspInit+0x58>)
 80006a0:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 80006a4:	6253      	str	r3, [r2, #36]	@ 0x24
 80006a6:	4b11      	ldr	r3, [pc, #68]	@ (80006ec <HAL_MspInit+0x58>)
 80006a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006aa:	f003 4300 	and.w	r3, r3, #2147483648	@ 0x80000000
 80006ae:	60fb      	str	r3, [r7, #12]
 80006b0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80006b2:	4b0e      	ldr	r3, [pc, #56]	@ (80006ec <HAL_MspInit+0x58>)
 80006b4:	6a1b      	ldr	r3, [r3, #32]
 80006b6:	4a0d      	ldr	r2, [pc, #52]	@ (80006ec <HAL_MspInit+0x58>)
 80006b8:	f043 0301 	orr.w	r3, r3, #1
 80006bc:	6213      	str	r3, [r2, #32]
 80006be:	4b0b      	ldr	r3, [pc, #44]	@ (80006ec <HAL_MspInit+0x58>)
 80006c0:	6a1b      	ldr	r3, [r3, #32]
 80006c2:	f003 0301 	and.w	r3, r3, #1
 80006c6:	60bb      	str	r3, [r7, #8]
 80006c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_PWR_CLK_ENABLE();
 80006ca:	4b08      	ldr	r3, [pc, #32]	@ (80006ec <HAL_MspInit+0x58>)
 80006cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006ce:	4a07      	ldr	r2, [pc, #28]	@ (80006ec <HAL_MspInit+0x58>)
 80006d0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006d4:	6253      	str	r3, [r2, #36]	@ 0x24
 80006d6:	4b05      	ldr	r3, [pc, #20]	@ (80006ec <HAL_MspInit+0x58>)
 80006d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80006da:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006de:	607b      	str	r3, [r7, #4]
 80006e0:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80006e2:	bf00      	nop
 80006e4:	3714      	adds	r7, #20
 80006e6:	46bd      	mov	sp, r7
 80006e8:	bc80      	pop	{r7}
 80006ea:	4770      	bx	lr
 80006ec:	40023800 	.word	0x40023800

080006f0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80006f0:	b580      	push	{r7, lr}
 80006f2:	b084      	sub	sp, #16
 80006f4:	af00      	add	r7, sp, #0
 80006f6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80006f8:	687b      	ldr	r3, [r7, #4]
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000700:	d113      	bne.n	800072a <HAL_TIM_Base_MspInit+0x3a>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8000702:	4b0c      	ldr	r3, [pc, #48]	@ (8000734 <HAL_TIM_Base_MspInit+0x44>)
 8000704:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000706:	4a0b      	ldr	r2, [pc, #44]	@ (8000734 <HAL_TIM_Base_MspInit+0x44>)
 8000708:	f043 0301 	orr.w	r3, r3, #1
 800070c:	6253      	str	r3, [r2, #36]	@ 0x24
 800070e:	4b09      	ldr	r3, [pc, #36]	@ (8000734 <HAL_TIM_Base_MspInit+0x44>)
 8000710:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8000712:	f003 0301 	and.w	r3, r3, #1
 8000716:	60fb      	str	r3, [r7, #12]
 8000718:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800071a:	2200      	movs	r2, #0
 800071c:	2100      	movs	r1, #0
 800071e:	201c      	movs	r0, #28
 8000720:	f000 f9ff 	bl	8000b22 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8000724:	201c      	movs	r0, #28
 8000726:	f000 fa18 	bl	8000b5a <HAL_NVIC_EnableIRQ>

  /* USER CODE END TIM2_MspInit 1 */

  }

}
 800072a:	bf00      	nop
 800072c:	3710      	adds	r7, #16
 800072e:	46bd      	mov	sp, r7
 8000730:	bd80      	pop	{r7, pc}
 8000732:	bf00      	nop
 8000734:	40023800 	.word	0x40023800

08000738 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000738:	b580      	push	{r7, lr}
 800073a:	b088      	sub	sp, #32
 800073c:	af00      	add	r7, sp, #0
 800073e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000740:	f107 030c 	add.w	r3, r7, #12
 8000744:	2200      	movs	r2, #0
 8000746:	601a      	str	r2, [r3, #0]
 8000748:	605a      	str	r2, [r3, #4]
 800074a:	609a      	str	r2, [r3, #8]
 800074c:	60da      	str	r2, [r3, #12]
 800074e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM2)
 8000750:	687b      	ldr	r3, [r7, #4]
 8000752:	681b      	ldr	r3, [r3, #0]
 8000754:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8000758:	d11b      	bne.n	8000792 <HAL_TIM_MspPostInit+0x5a>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800075a:	4b10      	ldr	r3, [pc, #64]	@ (800079c <HAL_TIM_MspPostInit+0x64>)
 800075c:	69db      	ldr	r3, [r3, #28]
 800075e:	4a0f      	ldr	r2, [pc, #60]	@ (800079c <HAL_TIM_MspPostInit+0x64>)
 8000760:	f043 0301 	orr.w	r3, r3, #1
 8000764:	61d3      	str	r3, [r2, #28]
 8000766:	4b0d      	ldr	r3, [pc, #52]	@ (800079c <HAL_TIM_MspPostInit+0x64>)
 8000768:	69db      	ldr	r3, [r3, #28]
 800076a:	f003 0301 	and.w	r3, r3, #1
 800076e:	60bb      	str	r3, [r7, #8]
 8000770:	68bb      	ldr	r3, [r7, #8]
    /**TIM2 GPIO Configuration
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8000772:	2320      	movs	r3, #32
 8000774:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000776:	2302      	movs	r3, #2
 8000778:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800077a:	2300      	movs	r3, #0
 800077c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800077e:	2300      	movs	r3, #0
 8000780:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8000782:	2301      	movs	r3, #1
 8000784:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000786:	f107 030c 	add.w	r3, r7, #12
 800078a:	4619      	mov	r1, r3
 800078c:	4804      	ldr	r0, [pc, #16]	@ (80007a0 <HAL_TIM_MspPostInit+0x68>)
 800078e:	f000 f9ff 	bl	8000b90 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM2_MspPostInit 1 */

  /* USER CODE END TIM2_MspPostInit 1 */
  }

}
 8000792:	bf00      	nop
 8000794:	3720      	adds	r7, #32
 8000796:	46bd      	mov	sp, r7
 8000798:	bd80      	pop	{r7, pc}
 800079a:	bf00      	nop
 800079c:	40023800 	.word	0x40023800
 80007a0:	40020000 	.word	0x40020000

080007a4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80007a4:	b480      	push	{r7}
 80007a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80007a8:	bf00      	nop
 80007aa:	e7fd      	b.n	80007a8 <NMI_Handler+0x4>

080007ac <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80007ac:	b480      	push	{r7}
 80007ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80007b0:	bf00      	nop
 80007b2:	e7fd      	b.n	80007b0 <HardFault_Handler+0x4>

080007b4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80007b4:	b480      	push	{r7}
 80007b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80007b8:	bf00      	nop
 80007ba:	e7fd      	b.n	80007b8 <MemManage_Handler+0x4>

080007bc <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80007bc:	b480      	push	{r7}
 80007be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80007c0:	bf00      	nop
 80007c2:	e7fd      	b.n	80007c0 <BusFault_Handler+0x4>

080007c4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80007c4:	b480      	push	{r7}
 80007c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80007c8:	bf00      	nop
 80007ca:	e7fd      	b.n	80007c8 <UsageFault_Handler+0x4>

080007cc <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80007cc:	b480      	push	{r7}
 80007ce:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 80007d0:	bf00      	nop
 80007d2:	46bd      	mov	sp, r7
 80007d4:	bc80      	pop	{r7}
 80007d6:	4770      	bx	lr

080007d8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80007d8:	b480      	push	{r7}
 80007da:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80007dc:	bf00      	nop
 80007de:	46bd      	mov	sp, r7
 80007e0:	bc80      	pop	{r7}
 80007e2:	4770      	bx	lr

080007e4 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80007e4:	b480      	push	{r7}
 80007e6:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80007e8:	bf00      	nop
 80007ea:	46bd      	mov	sp, r7
 80007ec:	bc80      	pop	{r7}
 80007ee:	4770      	bx	lr

080007f0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80007f4:	f000 f8a2 	bl	800093c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80007f8:	bf00      	nop
 80007fa:	bd80      	pop	{r7, pc}

080007fc <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80007fc:	b580      	push	{r7, lr}
 80007fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */
	static uint8_t open = 0;

    if(open == 1) {
 8000800:	4b0c      	ldr	r3, [pc, #48]	@ (8000834 <TIM2_IRQHandler+0x38>)
 8000802:	781b      	ldrb	r3, [r3, #0]
 8000804:	2b01      	cmp	r3, #1
 8000806:	d108      	bne.n	800081a <TIM2_IRQHandler+0x1e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_RESET);
 8000808:	2200      	movs	r2, #0
 800080a:	2140      	movs	r1, #64	@ 0x40
 800080c:	480a      	ldr	r0, [pc, #40]	@ (8000838 <TIM2_IRQHandler+0x3c>)
 800080e:	f000 fb3f 	bl	8000e90 <HAL_GPIO_WritePin>
		open = 0;
 8000812:	4b08      	ldr	r3, [pc, #32]	@ (8000834 <TIM2_IRQHandler+0x38>)
 8000814:	2200      	movs	r2, #0
 8000816:	701a      	strb	r2, [r3, #0]
 8000818:	e007      	b.n	800082a <TIM2_IRQHandler+0x2e>
	}
	else {
	  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_6, GPIO_PIN_SET);
 800081a:	2201      	movs	r2, #1
 800081c:	2140      	movs	r1, #64	@ 0x40
 800081e:	4806      	ldr	r0, [pc, #24]	@ (8000838 <TIM2_IRQHandler+0x3c>)
 8000820:	f000 fb36 	bl	8000e90 <HAL_GPIO_WritePin>
	  open = 1;
 8000824:	4b03      	ldr	r3, [pc, #12]	@ (8000834 <TIM2_IRQHandler+0x38>)
 8000826:	2201      	movs	r2, #1
 8000828:	701a      	strb	r2, [r3, #0]
	}


  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800082a:	4804      	ldr	r0, [pc, #16]	@ (800083c <TIM2_IRQHandler+0x40>)
 800082c:	f001 fa3a 	bl	8001ca4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */


  /* USER CODE END TIM2_IRQn 1 */
}
 8000830:	bf00      	nop
 8000832:	bd80      	pop	{r7, pc}
 8000834:	20000068 	.word	0x20000068
 8000838:	40020400 	.word	0x40020400
 800083c:	20000028 	.word	0x20000028

08000840 <SystemInit>:
  *         SystemCoreClock variable.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 8000840:	b480      	push	{r7}
 8000842:	af00      	add	r7, sp, #0
    
  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000844:	bf00      	nop
 8000846:	46bd      	mov	sp, r7
 8000848:	bc80      	pop	{r7}
 800084a:	4770      	bx	lr

0800084c <Reset_Handler>:
  .type Reset_Handler, %function
Reset_Handler:


/* Call the clock system initialization function.*/
    bl  SystemInit
 800084c:	f7ff fff8 	bl	8000840 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000850:	480b      	ldr	r0, [pc, #44]	@ (8000880 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8000852:	490c      	ldr	r1, [pc, #48]	@ (8000884 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8000854:	4a0c      	ldr	r2, [pc, #48]	@ (8000888 <LoopFillZerobss+0x16>)
  movs r3, #0
 8000856:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000858:	e002      	b.n	8000860 <LoopCopyDataInit>

0800085a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800085a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800085c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800085e:	3304      	adds	r3, #4

08000860 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000860:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000862:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000864:	d3f9      	bcc.n	800085a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000866:	4a09      	ldr	r2, [pc, #36]	@ (800088c <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 8000868:	4c09      	ldr	r4, [pc, #36]	@ (8000890 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800086a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800086c:	e001      	b.n	8000872 <LoopFillZerobss>

0800086e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800086e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000870:	3204      	adds	r2, #4

08000872 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000872:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000874:	d3fb      	bcc.n	800086e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000876:	f001 ff2d 	bl	80026d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 800087a:	f7ff fdf5 	bl	8000468 <main>
  bx lr
 800087e:	4770      	bx	lr
  ldr r0, =_sdata
 8000880:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000884:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8000888:	08002760 	.word	0x08002760
  ldr r2, =_sbss
 800088c:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8000890:	20000070 	.word	0x20000070

08000894 <ADC1_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 8000894:	e7fe      	b.n	8000894 <ADC1_IRQHandler>

08000896 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000896:	b580      	push	{r7, lr}
 8000898:	b082      	sub	sp, #8
 800089a:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800089c:	2300      	movs	r3, #0
 800089e:	71fb      	strb	r3, [r7, #7]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80008a0:	2003      	movs	r0, #3
 80008a2:	f000 f933 	bl	8000b0c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 80008a6:	200f      	movs	r0, #15
 80008a8:	f000 f80e 	bl	80008c8 <HAL_InitTick>
 80008ac:	4603      	mov	r3, r0
 80008ae:	2b00      	cmp	r3, #0
 80008b0:	d002      	beq.n	80008b8 <HAL_Init+0x22>
  {
    status = HAL_ERROR;
 80008b2:	2301      	movs	r3, #1
 80008b4:	71fb      	strb	r3, [r7, #7]
 80008b6:	e001      	b.n	80008bc <HAL_Init+0x26>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 80008b8:	f7ff feec 	bl	8000694 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 80008bc:	79fb      	ldrb	r3, [r7, #7]
}
 80008be:	4618      	mov	r0, r3
 80008c0:	3708      	adds	r7, #8
 80008c2:	46bd      	mov	sp, r7
 80008c4:	bd80      	pop	{r7, pc}
	...

080008c8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80008c8:	b580      	push	{r7, lr}
 80008ca:	b084      	sub	sp, #16
 80008cc:	af00      	add	r7, sp, #0
 80008ce:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef  status = HAL_OK;
 80008d0:	2300      	movs	r3, #0
 80008d2:	73fb      	strb	r3, [r7, #15]

  if (uwTickFreq != 0U)
 80008d4:	4b16      	ldr	r3, [pc, #88]	@ (8000930 <HAL_InitTick+0x68>)
 80008d6:	681b      	ldr	r3, [r3, #0]
 80008d8:	2b00      	cmp	r3, #0
 80008da:	d022      	beq.n	8000922 <HAL_InitTick+0x5a>
  {
    /*Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) == 0U)
 80008dc:	4b15      	ldr	r3, [pc, #84]	@ (8000934 <HAL_InitTick+0x6c>)
 80008de:	681a      	ldr	r2, [r3, #0]
 80008e0:	4b13      	ldr	r3, [pc, #76]	@ (8000930 <HAL_InitTick+0x68>)
 80008e2:	681b      	ldr	r3, [r3, #0]
 80008e4:	f44f 717a 	mov.w	r1, #1000	@ 0x3e8
 80008e8:	fbb1 f3f3 	udiv	r3, r1, r3
 80008ec:	fbb2 f3f3 	udiv	r3, r2, r3
 80008f0:	4618      	mov	r0, r3
 80008f2:	f000 f940 	bl	8000b76 <HAL_SYSTICK_Config>
 80008f6:	4603      	mov	r3, r0
 80008f8:	2b00      	cmp	r3, #0
 80008fa:	d10f      	bne.n	800091c <HAL_InitTick+0x54>
    {
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80008fc:	687b      	ldr	r3, [r7, #4]
 80008fe:	2b0f      	cmp	r3, #15
 8000900:	d809      	bhi.n	8000916 <HAL_InitTick+0x4e>
      {
        HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000902:	2200      	movs	r2, #0
 8000904:	6879      	ldr	r1, [r7, #4]
 8000906:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 800090a:	f000 f90a 	bl	8000b22 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 800090e:	4a0a      	ldr	r2, [pc, #40]	@ (8000938 <HAL_InitTick+0x70>)
 8000910:	687b      	ldr	r3, [r7, #4]
 8000912:	6013      	str	r3, [r2, #0]
 8000914:	e007      	b.n	8000926 <HAL_InitTick+0x5e>
      }
      else
      {
        status = HAL_ERROR;
 8000916:	2301      	movs	r3, #1
 8000918:	73fb      	strb	r3, [r7, #15]
 800091a:	e004      	b.n	8000926 <HAL_InitTick+0x5e>
      }
    }
    else
    {
      status = HAL_ERROR;
 800091c:	2301      	movs	r3, #1
 800091e:	73fb      	strb	r3, [r7, #15]
 8000920:	e001      	b.n	8000926 <HAL_InitTick+0x5e>
    }
  }
  else
  {
    status = HAL_ERROR;
 8000922:	2301      	movs	r3, #1
 8000924:	73fb      	strb	r3, [r7, #15]
  }

  /* Return function status */
  return status;
 8000926:	7bfb      	ldrb	r3, [r7, #15]
}
 8000928:	4618      	mov	r0, r3
 800092a:	3710      	adds	r7, #16
 800092c:	46bd      	mov	sp, r7
 800092e:	bd80      	pop	{r7, pc}
 8000930:	20000008 	.word	0x20000008
 8000934:	20000000 	.word	0x20000000
 8000938:	20000004 	.word	0x20000004

0800093c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800093c:	b480      	push	{r7}
 800093e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000940:	4b05      	ldr	r3, [pc, #20]	@ (8000958 <HAL_IncTick+0x1c>)
 8000942:	681a      	ldr	r2, [r3, #0]
 8000944:	4b05      	ldr	r3, [pc, #20]	@ (800095c <HAL_IncTick+0x20>)
 8000946:	681b      	ldr	r3, [r3, #0]
 8000948:	4413      	add	r3, r2
 800094a:	4a03      	ldr	r2, [pc, #12]	@ (8000958 <HAL_IncTick+0x1c>)
 800094c:	6013      	str	r3, [r2, #0]
}
 800094e:	bf00      	nop
 8000950:	46bd      	mov	sp, r7
 8000952:	bc80      	pop	{r7}
 8000954:	4770      	bx	lr
 8000956:	bf00      	nop
 8000958:	2000006c 	.word	0x2000006c
 800095c:	20000008 	.word	0x20000008

08000960 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000960:	b480      	push	{r7}
 8000962:	af00      	add	r7, sp, #0
  return uwTick;
 8000964:	4b02      	ldr	r3, [pc, #8]	@ (8000970 <HAL_GetTick+0x10>)
 8000966:	681b      	ldr	r3, [r3, #0]
}
 8000968:	4618      	mov	r0, r3
 800096a:	46bd      	mov	sp, r7
 800096c:	bc80      	pop	{r7}
 800096e:	4770      	bx	lr
 8000970:	2000006c 	.word	0x2000006c

08000974 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800097c:	687b      	ldr	r3, [r7, #4]
 800097e:	f003 0307 	and.w	r3, r3, #7
 8000982:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000984:	4b0c      	ldr	r3, [pc, #48]	@ (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 8000986:	68db      	ldr	r3, [r3, #12]
 8000988:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800098a:	68ba      	ldr	r2, [r7, #8]
 800098c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000990:	4013      	ands	r3, r2
 8000992:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 8000994:	68fb      	ldr	r3, [r7, #12]
 8000996:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000998:	68bb      	ldr	r3, [r7, #8]
 800099a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800099c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80009a0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80009a4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80009a6:	4a04      	ldr	r2, [pc, #16]	@ (80009b8 <__NVIC_SetPriorityGrouping+0x44>)
 80009a8:	68bb      	ldr	r3, [r7, #8]
 80009aa:	60d3      	str	r3, [r2, #12]
}
 80009ac:	bf00      	nop
 80009ae:	3714      	adds	r7, #20
 80009b0:	46bd      	mov	sp, r7
 80009b2:	bc80      	pop	{r7}
 80009b4:	4770      	bx	lr
 80009b6:	bf00      	nop
 80009b8:	e000ed00 	.word	0xe000ed00

080009bc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80009bc:	b480      	push	{r7}
 80009be:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80009c0:	4b04      	ldr	r3, [pc, #16]	@ (80009d4 <__NVIC_GetPriorityGrouping+0x18>)
 80009c2:	68db      	ldr	r3, [r3, #12]
 80009c4:	0a1b      	lsrs	r3, r3, #8
 80009c6:	f003 0307 	and.w	r3, r3, #7
}
 80009ca:	4618      	mov	r0, r3
 80009cc:	46bd      	mov	sp, r7
 80009ce:	bc80      	pop	{r7}
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80009d8:	b480      	push	{r7}
 80009da:	b083      	sub	sp, #12
 80009dc:	af00      	add	r7, sp, #0
 80009de:	4603      	mov	r3, r0
 80009e0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80009e2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009e6:	2b00      	cmp	r3, #0
 80009e8:	db0b      	blt.n	8000a02 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80009ea:	79fb      	ldrb	r3, [r7, #7]
 80009ec:	f003 021f 	and.w	r2, r3, #31
 80009f0:	4906      	ldr	r1, [pc, #24]	@ (8000a0c <__NVIC_EnableIRQ+0x34>)
 80009f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80009f6:	095b      	lsrs	r3, r3, #5
 80009f8:	2001      	movs	r0, #1
 80009fa:	fa00 f202 	lsl.w	r2, r0, r2
 80009fe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8000a02:	bf00      	nop
 8000a04:	370c      	adds	r7, #12
 8000a06:	46bd      	mov	sp, r7
 8000a08:	bc80      	pop	{r7}
 8000a0a:	4770      	bx	lr
 8000a0c:	e000e100 	.word	0xe000e100

08000a10 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000a10:	b480      	push	{r7}
 8000a12:	b083      	sub	sp, #12
 8000a14:	af00      	add	r7, sp, #0
 8000a16:	4603      	mov	r3, r0
 8000a18:	6039      	str	r1, [r7, #0]
 8000a1a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000a1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	db0a      	blt.n	8000a3a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a24:	683b      	ldr	r3, [r7, #0]
 8000a26:	b2da      	uxtb	r2, r3
 8000a28:	490c      	ldr	r1, [pc, #48]	@ (8000a5c <__NVIC_SetPriority+0x4c>)
 8000a2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000a2e:	0112      	lsls	r2, r2, #4
 8000a30:	b2d2      	uxtb	r2, r2
 8000a32:	440b      	add	r3, r1
 8000a34:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000a38:	e00a      	b.n	8000a50 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000a3a:	683b      	ldr	r3, [r7, #0]
 8000a3c:	b2da      	uxtb	r2, r3
 8000a3e:	4908      	ldr	r1, [pc, #32]	@ (8000a60 <__NVIC_SetPriority+0x50>)
 8000a40:	79fb      	ldrb	r3, [r7, #7]
 8000a42:	f003 030f 	and.w	r3, r3, #15
 8000a46:	3b04      	subs	r3, #4
 8000a48:	0112      	lsls	r2, r2, #4
 8000a4a:	b2d2      	uxtb	r2, r2
 8000a4c:	440b      	add	r3, r1
 8000a4e:	761a      	strb	r2, [r3, #24]
}
 8000a50:	bf00      	nop
 8000a52:	370c      	adds	r7, #12
 8000a54:	46bd      	mov	sp, r7
 8000a56:	bc80      	pop	{r7}
 8000a58:	4770      	bx	lr
 8000a5a:	bf00      	nop
 8000a5c:	e000e100 	.word	0xe000e100
 8000a60:	e000ed00 	.word	0xe000ed00

08000a64 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000a64:	b480      	push	{r7}
 8000a66:	b089      	sub	sp, #36	@ 0x24
 8000a68:	af00      	add	r7, sp, #0
 8000a6a:	60f8      	str	r0, [r7, #12]
 8000a6c:	60b9      	str	r1, [r7, #8]
 8000a6e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000a70:	68fb      	ldr	r3, [r7, #12]
 8000a72:	f003 0307 	and.w	r3, r3, #7
 8000a76:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000a78:	69fb      	ldr	r3, [r7, #28]
 8000a7a:	f1c3 0307 	rsb	r3, r3, #7
 8000a7e:	2b04      	cmp	r3, #4
 8000a80:	bf28      	it	cs
 8000a82:	2304      	movcs	r3, #4
 8000a84:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000a86:	69fb      	ldr	r3, [r7, #28]
 8000a88:	3304      	adds	r3, #4
 8000a8a:	2b06      	cmp	r3, #6
 8000a8c:	d902      	bls.n	8000a94 <NVIC_EncodePriority+0x30>
 8000a8e:	69fb      	ldr	r3, [r7, #28]
 8000a90:	3b03      	subs	r3, #3
 8000a92:	e000      	b.n	8000a96 <NVIC_EncodePriority+0x32>
 8000a94:	2300      	movs	r3, #0
 8000a96:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000a98:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8000a9c:	69bb      	ldr	r3, [r7, #24]
 8000a9e:	fa02 f303 	lsl.w	r3, r2, r3
 8000aa2:	43da      	mvns	r2, r3
 8000aa4:	68bb      	ldr	r3, [r7, #8]
 8000aa6:	401a      	ands	r2, r3
 8000aa8:	697b      	ldr	r3, [r7, #20]
 8000aaa:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000aac:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8000ab0:	697b      	ldr	r3, [r7, #20]
 8000ab2:	fa01 f303 	lsl.w	r3, r1, r3
 8000ab6:	43d9      	mvns	r1, r3
 8000ab8:	687b      	ldr	r3, [r7, #4]
 8000aba:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000abc:	4313      	orrs	r3, r2
         );
}
 8000abe:	4618      	mov	r0, r3
 8000ac0:	3724      	adds	r7, #36	@ 0x24
 8000ac2:	46bd      	mov	sp, r7
 8000ac4:	bc80      	pop	{r7}
 8000ac6:	4770      	bx	lr

08000ac8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ac8:	b580      	push	{r7, lr}
 8000aca:	b082      	sub	sp, #8
 8000acc:	af00      	add	r7, sp, #0
 8000ace:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ad0:	687b      	ldr	r3, [r7, #4]
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000ad8:	d301      	bcc.n	8000ade <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000ada:	2301      	movs	r3, #1
 8000adc:	e00f      	b.n	8000afe <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000ade:	4a0a      	ldr	r2, [pc, #40]	@ (8000b08 <SysTick_Config+0x40>)
 8000ae0:	687b      	ldr	r3, [r7, #4]
 8000ae2:	3b01      	subs	r3, #1
 8000ae4:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000ae6:	210f      	movs	r1, #15
 8000ae8:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8000aec:	f7ff ff90 	bl	8000a10 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000af0:	4b05      	ldr	r3, [pc, #20]	@ (8000b08 <SysTick_Config+0x40>)
 8000af2:	2200      	movs	r2, #0
 8000af4:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000af6:	4b04      	ldr	r3, [pc, #16]	@ (8000b08 <SysTick_Config+0x40>)
 8000af8:	2207      	movs	r2, #7
 8000afa:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000afc:	2300      	movs	r3, #0
}
 8000afe:	4618      	mov	r0, r3
 8000b00:	3708      	adds	r7, #8
 8000b02:	46bd      	mov	sp, r7
 8000b04:	bd80      	pop	{r7, pc}
 8000b06:	bf00      	nop
 8000b08:	e000e010 	.word	0xe000e010

08000b0c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ pre-emption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000b0c:	b580      	push	{r7, lr}
 8000b0e:	b082      	sub	sp, #8
 8000b10:	af00      	add	r7, sp, #0
 8000b12:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000b14:	6878      	ldr	r0, [r7, #4]
 8000b16:	f7ff ff2d 	bl	8000974 <__NVIC_SetPriorityGrouping>
}
 8000b1a:	bf00      	nop
 8000b1c:	3708      	adds	r7, #8
 8000b1e:	46bd      	mov	sp, r7
 8000b20:	bd80      	pop	{r7, pc}

08000b22 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000b22:	b580      	push	{r7, lr}
 8000b24:	b086      	sub	sp, #24
 8000b26:	af00      	add	r7, sp, #0
 8000b28:	4603      	mov	r3, r0
 8000b2a:	60b9      	str	r1, [r7, #8]
 8000b2c:	607a      	str	r2, [r7, #4]
 8000b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8000b30:	2300      	movs	r3, #0
 8000b32:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000b34:	f7ff ff42 	bl	80009bc <__NVIC_GetPriorityGrouping>
 8000b38:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000b3a:	687a      	ldr	r2, [r7, #4]
 8000b3c:	68b9      	ldr	r1, [r7, #8]
 8000b3e:	6978      	ldr	r0, [r7, #20]
 8000b40:	f7ff ff90 	bl	8000a64 <NVIC_EncodePriority>
 8000b44:	4602      	mov	r2, r0
 8000b46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000b4a:	4611      	mov	r1, r2
 8000b4c:	4618      	mov	r0, r3
 8000b4e:	f7ff ff5f 	bl	8000a10 <__NVIC_SetPriority>
}
 8000b52:	bf00      	nop
 8000b54:	3718      	adds	r7, #24
 8000b56:	46bd      	mov	sp, r7
 8000b58:	bd80      	pop	{r7, pc}

08000b5a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32l1xx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000b5a:	b580      	push	{r7, lr}
 8000b5c:	b082      	sub	sp, #8
 8000b5e:	af00      	add	r7, sp, #0
 8000b60:	4603      	mov	r3, r0
 8000b62:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000b64:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000b68:	4618      	mov	r0, r3
 8000b6a:	f7ff ff35 	bl	80009d8 <__NVIC_EnableIRQ>
}
 8000b6e:	bf00      	nop
 8000b70:	3708      	adds	r7, #8
 8000b72:	46bd      	mov	sp, r7
 8000b74:	bd80      	pop	{r7, pc}

08000b76 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000b76:	b580      	push	{r7, lr}
 8000b78:	b082      	sub	sp, #8
 8000b7a:	af00      	add	r7, sp, #0
 8000b7c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000b7e:	6878      	ldr	r0, [r7, #4]
 8000b80:	f7ff ffa2 	bl	8000ac8 <SysTick_Config>
 8000b84:	4603      	mov	r3, r0
}
 8000b86:	4618      	mov	r0, r3
 8000b88:	3708      	adds	r7, #8
 8000b8a:	46bd      	mov	sp, r7
 8000b8c:	bd80      	pop	{r7, pc}
	...

08000b90 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000b90:	b480      	push	{r7}
 8000b92:	b087      	sub	sp, #28
 8000b94:	af00      	add	r7, sp, #0
 8000b96:	6078      	str	r0, [r7, #4]
 8000b98:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 8000b9a:	2300      	movs	r3, #0
 8000b9c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8000b9e:	2300      	movs	r3, #0
 8000ba0:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00;
 8000ba2:	2300      	movs	r3, #0
 8000ba4:	613b      	str	r3, [r7, #16]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 8000ba6:	e154      	b.n	8000e52 <HAL_GPIO_Init+0x2c2>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 8000ba8:	683b      	ldr	r3, [r7, #0]
 8000baa:	681a      	ldr	r2, [r3, #0]
 8000bac:	2101      	movs	r1, #1
 8000bae:	697b      	ldr	r3, [r7, #20]
 8000bb0:	fa01 f303 	lsl.w	r3, r1, r3
 8000bb4:	4013      	ands	r3, r2
 8000bb6:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 8000bb8:	68fb      	ldr	r3, [r7, #12]
 8000bba:	2b00      	cmp	r3, #0
 8000bbc:	f000 8146 	beq.w	8000e4c <HAL_GPIO_Init+0x2bc>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bc0:	683b      	ldr	r3, [r7, #0]
 8000bc2:	685b      	ldr	r3, [r3, #4]
 8000bc4:	f003 0303 	and.w	r3, r3, #3
 8000bc8:	2b01      	cmp	r3, #1
 8000bca:	d005      	beq.n	8000bd8 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8000bcc:	683b      	ldr	r3, [r7, #0]
 8000bce:	685b      	ldr	r3, [r3, #4]
 8000bd0:	f003 0303 	and.w	r3, r3, #3
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 8000bd4:	2b02      	cmp	r3, #2
 8000bd6:	d130      	bne.n	8000c3a <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8000bd8:	687b      	ldr	r3, [r7, #4]
 8000bda:	689b      	ldr	r3, [r3, #8]
 8000bdc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8000bde:	697b      	ldr	r3, [r7, #20]
 8000be0:	005b      	lsls	r3, r3, #1
 8000be2:	2203      	movs	r2, #3
 8000be4:	fa02 f303 	lsl.w	r3, r2, r3
 8000be8:	43db      	mvns	r3, r3
 8000bea:	693a      	ldr	r2, [r7, #16]
 8000bec:	4013      	ands	r3, r2
 8000bee:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, GPIO_Init->Speed << (position * 2));
 8000bf0:	683b      	ldr	r3, [r7, #0]
 8000bf2:	68da      	ldr	r2, [r3, #12]
 8000bf4:	697b      	ldr	r3, [r7, #20]
 8000bf6:	005b      	lsls	r3, r3, #1
 8000bf8:	fa02 f303 	lsl.w	r3, r2, r3
 8000bfc:	693a      	ldr	r2, [r7, #16]
 8000bfe:	4313      	orrs	r3, r2
 8000c00:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 8000c02:	687b      	ldr	r3, [r7, #4]
 8000c04:	693a      	ldr	r2, [r7, #16]
 8000c06:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000c08:	687b      	ldr	r3, [r7, #4]
 8000c0a:	685b      	ldr	r3, [r3, #4]
 8000c0c:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_OTYPER_OT_0 << position) ;
 8000c0e:	2201      	movs	r2, #1
 8000c10:	697b      	ldr	r3, [r7, #20]
 8000c12:	fa02 f303 	lsl.w	r3, r2, r3
 8000c16:	43db      	mvns	r3, r3
 8000c18:	693a      	ldr	r2, [r7, #16]
 8000c1a:	4013      	ands	r3, r2
 8000c1c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, ((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000c1e:	683b      	ldr	r3, [r7, #0]
 8000c20:	685b      	ldr	r3, [r3, #4]
 8000c22:	091b      	lsrs	r3, r3, #4
 8000c24:	f003 0201 	and.w	r2, r3, #1
 8000c28:	697b      	ldr	r3, [r7, #20]
 8000c2a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c2e:	693a      	ldr	r2, [r7, #16]
 8000c30:	4313      	orrs	r3, r2
 8000c32:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 8000c34:	687b      	ldr	r3, [r7, #4]
 8000c36:	693a      	ldr	r2, [r7, #16]
 8000c38:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000c3a:	683b      	ldr	r3, [r7, #0]
 8000c3c:	685b      	ldr	r3, [r3, #4]
 8000c3e:	f003 0303 	and.w	r3, r3, #3
 8000c42:	2b03      	cmp	r3, #3
 8000c44:	d017      	beq.n	8000c76 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000c46:	687b      	ldr	r3, [r7, #4]
 8000c48:	68db      	ldr	r3, [r3, #12]
 8000c4a:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, GPIO_PUPDR_PUPDR0 << (position * 2));
 8000c4c:	697b      	ldr	r3, [r7, #20]
 8000c4e:	005b      	lsls	r3, r3, #1
 8000c50:	2203      	movs	r2, #3
 8000c52:	fa02 f303 	lsl.w	r3, r2, r3
 8000c56:	43db      	mvns	r3, r3
 8000c58:	693a      	ldr	r2, [r7, #16]
 8000c5a:	4013      	ands	r3, r2
 8000c5c:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_Init->Pull) << (position * 2));
 8000c5e:	683b      	ldr	r3, [r7, #0]
 8000c60:	689a      	ldr	r2, [r3, #8]
 8000c62:	697b      	ldr	r3, [r7, #20]
 8000c64:	005b      	lsls	r3, r3, #1
 8000c66:	fa02 f303 	lsl.w	r3, r2, r3
 8000c6a:	693a      	ldr	r2, [r7, #16]
 8000c6c:	4313      	orrs	r3, r2
 8000c6e:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 8000c70:	687b      	ldr	r3, [r7, #4]
 8000c72:	693a      	ldr	r2, [r7, #16]
 8000c74:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000c76:	683b      	ldr	r3, [r7, #0]
 8000c78:	685b      	ldr	r3, [r3, #4]
 8000c7a:	f003 0303 	and.w	r3, r3, #3
 8000c7e:	2b02      	cmp	r3, #2
 8000c80:	d123      	bne.n	8000cca <HAL_GPIO_Init+0x13a>
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        /* Identify AFRL or AFRH register based on IO position*/
        temp = GPIOx->AFR[position >> 3];
 8000c82:	697b      	ldr	r3, [r7, #20]
 8000c84:	08da      	lsrs	r2, r3, #3
 8000c86:	687b      	ldr	r3, [r7, #4]
 8000c88:	3208      	adds	r2, #8
 8000c8a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000c8e:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, 0xFU << ((uint32_t)(position & 0x07U) * 4));
 8000c90:	697b      	ldr	r3, [r7, #20]
 8000c92:	f003 0307 	and.w	r3, r3, #7
 8000c96:	009b      	lsls	r3, r3, #2
 8000c98:	220f      	movs	r2, #15
 8000c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8000c9e:	43db      	mvns	r3, r3
 8000ca0:	693a      	ldr	r2, [r7, #16]
 8000ca2:	4013      	ands	r3, r2
 8000ca4:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4));
 8000ca6:	683b      	ldr	r3, [r7, #0]
 8000ca8:	691a      	ldr	r2, [r3, #16]
 8000caa:	697b      	ldr	r3, [r7, #20]
 8000cac:	f003 0307 	and.w	r3, r3, #7
 8000cb0:	009b      	lsls	r3, r3, #2
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	693a      	ldr	r2, [r7, #16]
 8000cb8:	4313      	orrs	r3, r2
 8000cba:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3] = temp;
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	08da      	lsrs	r2, r3, #3
 8000cc0:	687b      	ldr	r3, [r7, #4]
 8000cc2:	3208      	adds	r2, #8
 8000cc4:	6939      	ldr	r1, [r7, #16]
 8000cc6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000cca:	687b      	ldr	r3, [r7, #4]
 8000ccc:	681b      	ldr	r3, [r3, #0]
 8000cce:	613b      	str	r3, [r7, #16]
      CLEAR_BIT(temp, GPIO_MODER_MODER0 << (position * 2));
 8000cd0:	697b      	ldr	r3, [r7, #20]
 8000cd2:	005b      	lsls	r3, r3, #1
 8000cd4:	2203      	movs	r2, #3
 8000cd6:	fa02 f303 	lsl.w	r3, r2, r3
 8000cda:	43db      	mvns	r3, r3
 8000cdc:	693a      	ldr	r2, [r7, #16]
 8000cde:	4013      	ands	r3, r2
 8000ce0:	613b      	str	r3, [r7, #16]
      SET_BIT(temp, (GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8000ce2:	683b      	ldr	r3, [r7, #0]
 8000ce4:	685b      	ldr	r3, [r3, #4]
 8000ce6:	f003 0203 	and.w	r2, r3, #3
 8000cea:	697b      	ldr	r3, [r7, #20]
 8000cec:	005b      	lsls	r3, r3, #1
 8000cee:	fa02 f303 	lsl.w	r3, r2, r3
 8000cf2:	693a      	ldr	r2, [r7, #16]
 8000cf4:	4313      	orrs	r3, r2
 8000cf6:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	693a      	ldr	r2, [r7, #16]
 8000cfc:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000cfe:	683b      	ldr	r3, [r7, #0]
 8000d00:	685b      	ldr	r3, [r3, #4]
 8000d02:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8000d06:	2b00      	cmp	r3, #0
 8000d08:	f000 80a0 	beq.w	8000e4c <HAL_GPIO_Init+0x2bc>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000d0c:	4b58      	ldr	r3, [pc, #352]	@ (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000d0e:	6a1b      	ldr	r3, [r3, #32]
 8000d10:	4a57      	ldr	r2, [pc, #348]	@ (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000d12:	f043 0301 	orr.w	r3, r3, #1
 8000d16:	6213      	str	r3, [r2, #32]
 8000d18:	4b55      	ldr	r3, [pc, #340]	@ (8000e70 <HAL_GPIO_Init+0x2e0>)
 8000d1a:	6a1b      	ldr	r3, [r3, #32]
 8000d1c:	f003 0301 	and.w	r3, r3, #1
 8000d20:	60bb      	str	r3, [r7, #8]
 8000d22:	68bb      	ldr	r3, [r7, #8]

        temp = SYSCFG->EXTICR[position >> 2];
 8000d24:	4a53      	ldr	r2, [pc, #332]	@ (8000e74 <HAL_GPIO_Init+0x2e4>)
 8000d26:	697b      	ldr	r3, [r7, #20]
 8000d28:	089b      	lsrs	r3, r3, #2
 8000d2a:	3302      	adds	r3, #2
 8000d2c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000d30:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FU) << (4 * (position & 0x03)));
 8000d32:	697b      	ldr	r3, [r7, #20]
 8000d34:	f003 0303 	and.w	r3, r3, #3
 8000d38:	009b      	lsls	r3, r3, #2
 8000d3a:	220f      	movs	r2, #15
 8000d3c:	fa02 f303 	lsl.w	r3, r2, r3
 8000d40:	43db      	mvns	r3, r3
 8000d42:	693a      	ldr	r2, [r7, #16]
 8000d44:	4013      	ands	r3, r2
 8000d46:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	4a4b      	ldr	r2, [pc, #300]	@ (8000e78 <HAL_GPIO_Init+0x2e8>)
 8000d4c:	4293      	cmp	r3, r2
 8000d4e:	d019      	beq.n	8000d84 <HAL_GPIO_Init+0x1f4>
 8000d50:	687b      	ldr	r3, [r7, #4]
 8000d52:	4a4a      	ldr	r2, [pc, #296]	@ (8000e7c <HAL_GPIO_Init+0x2ec>)
 8000d54:	4293      	cmp	r3, r2
 8000d56:	d013      	beq.n	8000d80 <HAL_GPIO_Init+0x1f0>
 8000d58:	687b      	ldr	r3, [r7, #4]
 8000d5a:	4a49      	ldr	r2, [pc, #292]	@ (8000e80 <HAL_GPIO_Init+0x2f0>)
 8000d5c:	4293      	cmp	r3, r2
 8000d5e:	d00d      	beq.n	8000d7c <HAL_GPIO_Init+0x1ec>
 8000d60:	687b      	ldr	r3, [r7, #4]
 8000d62:	4a48      	ldr	r2, [pc, #288]	@ (8000e84 <HAL_GPIO_Init+0x2f4>)
 8000d64:	4293      	cmp	r3, r2
 8000d66:	d007      	beq.n	8000d78 <HAL_GPIO_Init+0x1e8>
 8000d68:	687b      	ldr	r3, [r7, #4]
 8000d6a:	4a47      	ldr	r2, [pc, #284]	@ (8000e88 <HAL_GPIO_Init+0x2f8>)
 8000d6c:	4293      	cmp	r3, r2
 8000d6e:	d101      	bne.n	8000d74 <HAL_GPIO_Init+0x1e4>
 8000d70:	2304      	movs	r3, #4
 8000d72:	e008      	b.n	8000d86 <HAL_GPIO_Init+0x1f6>
 8000d74:	2305      	movs	r3, #5
 8000d76:	e006      	b.n	8000d86 <HAL_GPIO_Init+0x1f6>
 8000d78:	2303      	movs	r3, #3
 8000d7a:	e004      	b.n	8000d86 <HAL_GPIO_Init+0x1f6>
 8000d7c:	2302      	movs	r3, #2
 8000d7e:	e002      	b.n	8000d86 <HAL_GPIO_Init+0x1f6>
 8000d80:	2301      	movs	r3, #1
 8000d82:	e000      	b.n	8000d86 <HAL_GPIO_Init+0x1f6>
 8000d84:	2300      	movs	r3, #0
 8000d86:	697a      	ldr	r2, [r7, #20]
 8000d88:	f002 0203 	and.w	r2, r2, #3
 8000d8c:	0092      	lsls	r2, r2, #2
 8000d8e:	4093      	lsls	r3, r2
 8000d90:	693a      	ldr	r2, [r7, #16]
 8000d92:	4313      	orrs	r3, r2
 8000d94:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2] = temp;
 8000d96:	4937      	ldr	r1, [pc, #220]	@ (8000e74 <HAL_GPIO_Init+0x2e4>)
 8000d98:	697b      	ldr	r3, [r7, #20]
 8000d9a:	089b      	lsrs	r3, r3, #2
 8000d9c:	3302      	adds	r3, #2
 8000d9e:	693a      	ldr	r2, [r7, #16]
 8000da0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000da4:	4b39      	ldr	r3, [pc, #228]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000da6:	689b      	ldr	r3, [r3, #8]
 8000da8:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000daa:	68fb      	ldr	r3, [r7, #12]
 8000dac:	43db      	mvns	r3, r3
 8000dae:	693a      	ldr	r2, [r7, #16]
 8000db0:	4013      	ands	r3, r2
 8000db2:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000db4:	683b      	ldr	r3, [r7, #0]
 8000db6:	685b      	ldr	r3, [r3, #4]
 8000db8:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8000dbc:	2b00      	cmp	r3, #0
 8000dbe:	d003      	beq.n	8000dc8 <HAL_GPIO_Init+0x238>
        {
          SET_BIT(temp, iocurrent);
 8000dc0:	693a      	ldr	r2, [r7, #16]
 8000dc2:	68fb      	ldr	r3, [r7, #12]
 8000dc4:	4313      	orrs	r3, r2
 8000dc6:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 8000dc8:	4a30      	ldr	r2, [pc, #192]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000dca:	693b      	ldr	r3, [r7, #16]
 8000dcc:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000dce:	4b2f      	ldr	r3, [pc, #188]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000dd0:	68db      	ldr	r3, [r3, #12]
 8000dd2:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	43db      	mvns	r3, r3
 8000dd8:	693a      	ldr	r2, [r7, #16]
 8000dda:	4013      	ands	r3, r2
 8000ddc:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8000dde:	683b      	ldr	r3, [r7, #0]
 8000de0:	685b      	ldr	r3, [r3, #4]
 8000de2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8000de6:	2b00      	cmp	r3, #0
 8000de8:	d003      	beq.n	8000df2 <HAL_GPIO_Init+0x262>
        {
          SET_BIT(temp, iocurrent);
 8000dea:	693a      	ldr	r2, [r7, #16]
 8000dec:	68fb      	ldr	r3, [r7, #12]
 8000dee:	4313      	orrs	r3, r2
 8000df0:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 8000df2:	4a26      	ldr	r2, [pc, #152]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000df4:	693b      	ldr	r3, [r7, #16]
 8000df6:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8000df8:	4b24      	ldr	r3, [pc, #144]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000dfa:	685b      	ldr	r3, [r3, #4]
 8000dfc:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000dfe:	68fb      	ldr	r3, [r7, #12]
 8000e00:	43db      	mvns	r3, r3
 8000e02:	693a      	ldr	r2, [r7, #16]
 8000e04:	4013      	ands	r3, r2
 8000e06:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8000e08:	683b      	ldr	r3, [r7, #0]
 8000e0a:	685b      	ldr	r3, [r3, #4]
 8000e0c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d003      	beq.n	8000e1c <HAL_GPIO_Init+0x28c>
        {
          SET_BIT(temp, iocurrent);
 8000e14:	693a      	ldr	r2, [r7, #16]
 8000e16:	68fb      	ldr	r3, [r7, #12]
 8000e18:	4313      	orrs	r3, r2
 8000e1a:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 8000e1c:	4a1b      	ldr	r2, [pc, #108]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000e1e:	693b      	ldr	r3, [r7, #16]
 8000e20:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8000e22:	4b1a      	ldr	r3, [pc, #104]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000e24:	681b      	ldr	r3, [r3, #0]
 8000e26:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (uint32_t)iocurrent);
 8000e28:	68fb      	ldr	r3, [r7, #12]
 8000e2a:	43db      	mvns	r3, r3
 8000e2c:	693a      	ldr	r2, [r7, #16]
 8000e2e:	4013      	ands	r3, r2
 8000e30:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8000e32:	683b      	ldr	r3, [r7, #0]
 8000e34:	685b      	ldr	r3, [r3, #4]
 8000e36:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000e3a:	2b00      	cmp	r3, #0
 8000e3c:	d003      	beq.n	8000e46 <HAL_GPIO_Init+0x2b6>
        {
          SET_BIT(temp, iocurrent);
 8000e3e:	693a      	ldr	r2, [r7, #16]
 8000e40:	68fb      	ldr	r3, [r7, #12]
 8000e42:	4313      	orrs	r3, r2
 8000e44:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 8000e46:	4a11      	ldr	r2, [pc, #68]	@ (8000e8c <HAL_GPIO_Init+0x2fc>)
 8000e48:	693b      	ldr	r3, [r7, #16]
 8000e4a:	6013      	str	r3, [r2, #0]
      }
    }

    position++;
 8000e4c:	697b      	ldr	r3, [r7, #20]
 8000e4e:	3301      	adds	r3, #1
 8000e50:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 8000e52:	683b      	ldr	r3, [r7, #0]
 8000e54:	681a      	ldr	r2, [r3, #0]
 8000e56:	697b      	ldr	r3, [r7, #20]
 8000e58:	fa22 f303 	lsr.w	r3, r2, r3
 8000e5c:	2b00      	cmp	r3, #0
 8000e5e:	f47f aea3 	bne.w	8000ba8 <HAL_GPIO_Init+0x18>
  }
}
 8000e62:	bf00      	nop
 8000e64:	bf00      	nop
 8000e66:	371c      	adds	r7, #28
 8000e68:	46bd      	mov	sp, r7
 8000e6a:	bc80      	pop	{r7}
 8000e6c:	4770      	bx	lr
 8000e6e:	bf00      	nop
 8000e70:	40023800 	.word	0x40023800
 8000e74:	40010000 	.word	0x40010000
 8000e78:	40020000 	.word	0x40020000
 8000e7c:	40020400 	.word	0x40020400
 8000e80:	40020800 	.word	0x40020800
 8000e84:	40020c00 	.word	0x40020c00
 8000e88:	40021000 	.word	0x40021000
 8000e8c:	40010400 	.word	0x40010400

08000e90 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8000e90:	b480      	push	{r7}
 8000e92:	b083      	sub	sp, #12
 8000e94:	af00      	add	r7, sp, #0
 8000e96:	6078      	str	r0, [r7, #4]
 8000e98:	460b      	mov	r3, r1
 8000e9a:	807b      	strh	r3, [r7, #2]
 8000e9c:	4613      	mov	r3, r2
 8000e9e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8000ea0:	787b      	ldrb	r3, [r7, #1]
 8000ea2:	2b00      	cmp	r3, #0
 8000ea4:	d003      	beq.n	8000eae <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin;
 8000ea6:	887a      	ldrh	r2, [r7, #2]
 8000ea8:	687b      	ldr	r3, [r7, #4]
 8000eaa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
  }
}
 8000eac:	e003      	b.n	8000eb6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16 ;
 8000eae:	887b      	ldrh	r3, [r7, #2]
 8000eb0:	041a      	lsls	r2, r3, #16
 8000eb2:	687b      	ldr	r3, [r7, #4]
 8000eb4:	619a      	str	r2, [r3, #24]
}
 8000eb6:	bf00      	nop
 8000eb8:	370c      	adds	r7, #12
 8000eba:	46bd      	mov	sp, r7
 8000ebc:	bc80      	pop	{r7}
 8000ebe:	4770      	bx	lr

08000ec0 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8000ec0:	b580      	push	{r7, lr}
 8000ec2:	b088      	sub	sp, #32
 8000ec4:	af00      	add	r7, sp, #0
 8000ec6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check the parameters */
  if(RCC_OscInitStruct == NULL)
 8000ec8:	687b      	ldr	r3, [r7, #4]
 8000eca:	2b00      	cmp	r3, #0
 8000ecc:	d101      	bne.n	8000ed2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8000ece:	2301      	movs	r3, #1
 8000ed0:	e31d      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
  }

  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8000ed2:	4b94      	ldr	r3, [pc, #592]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000ed4:	689b      	ldr	r3, [r3, #8]
 8000ed6:	f003 030c 	and.w	r3, r3, #12
 8000eda:	61bb      	str	r3, [r7, #24]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 8000edc:	4b91      	ldr	r3, [pc, #580]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000ede:	689b      	ldr	r3, [r3, #8]
 8000ee0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8000ee4:	617b      	str	r3, [r7, #20]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8000ee6:	687b      	ldr	r3, [r7, #4]
 8000ee8:	681b      	ldr	r3, [r3, #0]
 8000eea:	f003 0301 	and.w	r3, r3, #1
 8000eee:	2b00      	cmp	r3, #0
 8000ef0:	d07b      	beq.n	8000fea <HAL_RCC_OscConfig+0x12a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8000ef2:	69bb      	ldr	r3, [r7, #24]
 8000ef4:	2b08      	cmp	r3, #8
 8000ef6:	d006      	beq.n	8000f06 <HAL_RCC_OscConfig+0x46>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 8000ef8:	69bb      	ldr	r3, [r7, #24]
 8000efa:	2b0c      	cmp	r3, #12
 8000efc:	d10f      	bne.n	8000f1e <HAL_RCC_OscConfig+0x5e>
 8000efe:	697b      	ldr	r3, [r7, #20]
 8000f00:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8000f04:	d10b      	bne.n	8000f1e <HAL_RCC_OscConfig+0x5e>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000f06:	4b87      	ldr	r3, [pc, #540]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f08:	681b      	ldr	r3, [r3, #0]
 8000f0a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000f0e:	2b00      	cmp	r3, #0
 8000f10:	d06a      	beq.n	8000fe8 <HAL_RCC_OscConfig+0x128>
 8000f12:	687b      	ldr	r3, [r7, #4]
 8000f14:	685b      	ldr	r3, [r3, #4]
 8000f16:	2b00      	cmp	r3, #0
 8000f18:	d166      	bne.n	8000fe8 <HAL_RCC_OscConfig+0x128>
      {
        return HAL_ERROR;
 8000f1a:	2301      	movs	r3, #1
 8000f1c:	e2f7      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8000f1e:	687b      	ldr	r3, [r7, #4]
 8000f20:	685b      	ldr	r3, [r3, #4]
 8000f22:	2b01      	cmp	r3, #1
 8000f24:	d106      	bne.n	8000f34 <HAL_RCC_OscConfig+0x74>
 8000f26:	4b7f      	ldr	r3, [pc, #508]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f28:	681b      	ldr	r3, [r3, #0]
 8000f2a:	4a7e      	ldr	r2, [pc, #504]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f2c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f30:	6013      	str	r3, [r2, #0]
 8000f32:	e02d      	b.n	8000f90 <HAL_RCC_OscConfig+0xd0>
 8000f34:	687b      	ldr	r3, [r7, #4]
 8000f36:	685b      	ldr	r3, [r3, #4]
 8000f38:	2b00      	cmp	r3, #0
 8000f3a:	d10c      	bne.n	8000f56 <HAL_RCC_OscConfig+0x96>
 8000f3c:	4b79      	ldr	r3, [pc, #484]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f3e:	681b      	ldr	r3, [r3, #0]
 8000f40:	4a78      	ldr	r2, [pc, #480]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f42:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f46:	6013      	str	r3, [r2, #0]
 8000f48:	4b76      	ldr	r3, [pc, #472]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f4a:	681b      	ldr	r3, [r3, #0]
 8000f4c:	4a75      	ldr	r2, [pc, #468]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f4e:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f52:	6013      	str	r3, [r2, #0]
 8000f54:	e01c      	b.n	8000f90 <HAL_RCC_OscConfig+0xd0>
 8000f56:	687b      	ldr	r3, [r7, #4]
 8000f58:	685b      	ldr	r3, [r3, #4]
 8000f5a:	2b05      	cmp	r3, #5
 8000f5c:	d10c      	bne.n	8000f78 <HAL_RCC_OscConfig+0xb8>
 8000f5e:	4b71      	ldr	r3, [pc, #452]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	4a70      	ldr	r2, [pc, #448]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f64:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8000f68:	6013      	str	r3, [r2, #0]
 8000f6a:	4b6e      	ldr	r3, [pc, #440]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f6c:	681b      	ldr	r3, [r3, #0]
 8000f6e:	4a6d      	ldr	r2, [pc, #436]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f70:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8000f74:	6013      	str	r3, [r2, #0]
 8000f76:	e00b      	b.n	8000f90 <HAL_RCC_OscConfig+0xd0>
 8000f78:	4b6a      	ldr	r3, [pc, #424]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f7a:	681b      	ldr	r3, [r3, #0]
 8000f7c:	4a69      	ldr	r2, [pc, #420]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f7e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8000f82:	6013      	str	r3, [r2, #0]
 8000f84:	4b67      	ldr	r3, [pc, #412]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f86:	681b      	ldr	r3, [r3, #0]
 8000f88:	4a66      	ldr	r2, [pc, #408]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000f8a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8000f8e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8000f90:	687b      	ldr	r3, [r7, #4]
 8000f92:	685b      	ldr	r3, [r3, #4]
 8000f94:	2b00      	cmp	r3, #0
 8000f96:	d013      	beq.n	8000fc0 <HAL_RCC_OscConfig+0x100>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000f98:	f7ff fce2 	bl	8000960 <HAL_GetTick>
 8000f9c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000f9e:	e008      	b.n	8000fb2 <HAL_RCC_OscConfig+0xf2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fa0:	f7ff fcde 	bl	8000960 <HAL_GetTick>
 8000fa4:	4602      	mov	r2, r0
 8000fa6:	693b      	ldr	r3, [r7, #16]
 8000fa8:	1ad3      	subs	r3, r2, r3
 8000faa:	2b64      	cmp	r3, #100	@ 0x64
 8000fac:	d901      	bls.n	8000fb2 <HAL_RCC_OscConfig+0xf2>
          {
            return HAL_TIMEOUT;
 8000fae:	2303      	movs	r3, #3
 8000fb0:	e2ad      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8000fb2:	4b5c      	ldr	r3, [pc, #368]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000fb4:	681b      	ldr	r3, [r3, #0]
 8000fb6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fba:	2b00      	cmp	r3, #0
 8000fbc:	d0f0      	beq.n	8000fa0 <HAL_RCC_OscConfig+0xe0>
 8000fbe:	e014      	b.n	8000fea <HAL_RCC_OscConfig+0x12a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8000fc0:	f7ff fcce 	bl	8000960 <HAL_GetTick>
 8000fc4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fc6:	e008      	b.n	8000fda <HAL_RCC_OscConfig+0x11a>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8000fc8:	f7ff fcca 	bl	8000960 <HAL_GetTick>
 8000fcc:	4602      	mov	r2, r0
 8000fce:	693b      	ldr	r3, [r7, #16]
 8000fd0:	1ad3      	subs	r3, r2, r3
 8000fd2:	2b64      	cmp	r3, #100	@ 0x64
 8000fd4:	d901      	bls.n	8000fda <HAL_RCC_OscConfig+0x11a>
          {
            return HAL_TIMEOUT;
 8000fd6:	2303      	movs	r3, #3
 8000fd8:	e299      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8000fda:	4b52      	ldr	r3, [pc, #328]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8000fdc:	681b      	ldr	r3, [r3, #0]
 8000fde:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8000fe2:	2b00      	cmp	r3, #0
 8000fe4:	d1f0      	bne.n	8000fc8 <HAL_RCC_OscConfig+0x108>
 8000fe6:	e000      	b.n	8000fea <HAL_RCC_OscConfig+0x12a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8000fe8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	681b      	ldr	r3, [r3, #0]
 8000fee:	f003 0302 	and.w	r3, r3, #2
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d05a      	beq.n	80010ac <HAL_RCC_OscConfig+0x1ec>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 8000ff6:	69bb      	ldr	r3, [r7, #24]
 8000ff8:	2b04      	cmp	r3, #4
 8000ffa:	d005      	beq.n	8001008 <HAL_RCC_OscConfig+0x148>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 8000ffc:	69bb      	ldr	r3, [r7, #24]
 8000ffe:	2b0c      	cmp	r3, #12
 8001000:	d119      	bne.n	8001036 <HAL_RCC_OscConfig+0x176>
 8001002:	697b      	ldr	r3, [r7, #20]
 8001004:	2b00      	cmp	r3, #0
 8001006:	d116      	bne.n	8001036 <HAL_RCC_OscConfig+0x176>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001008:	4b46      	ldr	r3, [pc, #280]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 800100a:	681b      	ldr	r3, [r3, #0]
 800100c:	f003 0302 	and.w	r3, r3, #2
 8001010:	2b00      	cmp	r3, #0
 8001012:	d005      	beq.n	8001020 <HAL_RCC_OscConfig+0x160>
 8001014:	687b      	ldr	r3, [r7, #4]
 8001016:	68db      	ldr	r3, [r3, #12]
 8001018:	2b01      	cmp	r3, #1
 800101a:	d001      	beq.n	8001020 <HAL_RCC_OscConfig+0x160>
      {
        return HAL_ERROR;
 800101c:	2301      	movs	r3, #1
 800101e:	e276      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001020:	4b40      	ldr	r3, [pc, #256]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8001022:	685b      	ldr	r3, [r3, #4]
 8001024:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001028:	687b      	ldr	r3, [r7, #4]
 800102a:	691b      	ldr	r3, [r3, #16]
 800102c:	021b      	lsls	r3, r3, #8
 800102e:	493d      	ldr	r1, [pc, #244]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8001030:	4313      	orrs	r3, r2
 8001032:	604b      	str	r3, [r1, #4]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001034:	e03a      	b.n	80010ac <HAL_RCC_OscConfig+0x1ec>
      }
    }
    else
    {
      /* Check the HSI State */
      if(RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 8001036:	687b      	ldr	r3, [r7, #4]
 8001038:	68db      	ldr	r3, [r3, #12]
 800103a:	2b00      	cmp	r3, #0
 800103c:	d020      	beq.n	8001080 <HAL_RCC_OscConfig+0x1c0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800103e:	4b3a      	ldr	r3, [pc, #232]	@ (8001128 <HAL_RCC_OscConfig+0x268>)
 8001040:	2201      	movs	r2, #1
 8001042:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001044:	f7ff fc8c 	bl	8000960 <HAL_GetTick>
 8001048:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800104a:	e008      	b.n	800105e <HAL_RCC_OscConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800104c:	f7ff fc88 	bl	8000960 <HAL_GetTick>
 8001050:	4602      	mov	r2, r0
 8001052:	693b      	ldr	r3, [r7, #16]
 8001054:	1ad3      	subs	r3, r2, r3
 8001056:	2b02      	cmp	r3, #2
 8001058:	d901      	bls.n	800105e <HAL_RCC_OscConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800105a:	2303      	movs	r3, #3
 800105c:	e257      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800105e:	4b31      	ldr	r3, [pc, #196]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8001060:	681b      	ldr	r3, [r3, #0]
 8001062:	f003 0302 	and.w	r3, r3, #2
 8001066:	2b00      	cmp	r3, #0
 8001068:	d0f0      	beq.n	800104c <HAL_RCC_OscConfig+0x18c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800106a:	4b2e      	ldr	r3, [pc, #184]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 800106c:	685b      	ldr	r3, [r3, #4]
 800106e:	f423 52f8 	bic.w	r2, r3, #7936	@ 0x1f00
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	691b      	ldr	r3, [r3, #16]
 8001076:	021b      	lsls	r3, r3, #8
 8001078:	492a      	ldr	r1, [pc, #168]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 800107a:	4313      	orrs	r3, r2
 800107c:	604b      	str	r3, [r1, #4]
 800107e:	e015      	b.n	80010ac <HAL_RCC_OscConfig+0x1ec>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8001080:	4b29      	ldr	r3, [pc, #164]	@ (8001128 <HAL_RCC_OscConfig+0x268>)
 8001082:	2200      	movs	r2, #0
 8001084:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001086:	f7ff fc6b 	bl	8000960 <HAL_GetTick>
 800108a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800108c:	e008      	b.n	80010a0 <HAL_RCC_OscConfig+0x1e0>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800108e:	f7ff fc67 	bl	8000960 <HAL_GetTick>
 8001092:	4602      	mov	r2, r0
 8001094:	693b      	ldr	r3, [r7, #16]
 8001096:	1ad3      	subs	r3, r2, r3
 8001098:	2b02      	cmp	r3, #2
 800109a:	d901      	bls.n	80010a0 <HAL_RCC_OscConfig+0x1e0>
          {
            return HAL_TIMEOUT;
 800109c:	2303      	movs	r3, #3
 800109e:	e236      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80010a0:	4b20      	ldr	r3, [pc, #128]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f003 0302 	and.w	r3, r3, #2
 80010a8:	2b00      	cmp	r3, #0
 80010aa:	d1f0      	bne.n	800108e <HAL_RCC_OscConfig+0x1ce>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80010ac:	687b      	ldr	r3, [r7, #4]
 80010ae:	681b      	ldr	r3, [r3, #0]
 80010b0:	f003 0310 	and.w	r3, r3, #16
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	f000 80b8 	beq.w	800122a <HAL_RCC_OscConfig+0x36a>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80010ba:	69bb      	ldr	r3, [r7, #24]
 80010bc:	2b00      	cmp	r3, #0
 80010be:	d170      	bne.n	80011a2 <HAL_RCC_OscConfig+0x2e2>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80010c0:	4b18      	ldr	r3, [pc, #96]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 80010c2:	681b      	ldr	r3, [r3, #0]
 80010c4:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d005      	beq.n	80010d8 <HAL_RCC_OscConfig+0x218>
 80010cc:	687b      	ldr	r3, [r7, #4]
 80010ce:	699b      	ldr	r3, [r3, #24]
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d101      	bne.n	80010d8 <HAL_RCC_OscConfig+0x218>
      {
        return HAL_ERROR;
 80010d4:	2301      	movs	r3, #1
 80010d6:	e21a      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
           must be correctly programmed according to the frequency of the CPU clock
           (HCLK) and the supply voltage of the device. */
        if(RCC_OscInitStruct->MSIClockRange > __HAL_RCC_GET_MSI_RANGE())
 80010d8:	687b      	ldr	r3, [r7, #4]
 80010da:	6a1a      	ldr	r2, [r3, #32]
 80010dc:	4b11      	ldr	r3, [pc, #68]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 80010de:	685b      	ldr	r3, [r3, #4]
 80010e0:	f403 4360 	and.w	r3, r3, #57344	@ 0xe000
 80010e4:	429a      	cmp	r2, r3
 80010e6:	d921      	bls.n	800112c <HAL_RCC_OscConfig+0x26c>
        {
          /* First increase number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 80010e8:	687b      	ldr	r3, [r7, #4]
 80010ea:	6a1b      	ldr	r3, [r3, #32]
 80010ec:	4618      	mov	r0, r3
 80010ee:	f000 fc09 	bl	8001904 <RCC_SetFlashLatencyFromMSIRange>
 80010f2:	4603      	mov	r3, r0
 80010f4:	2b00      	cmp	r3, #0
 80010f6:	d001      	beq.n	80010fc <HAL_RCC_OscConfig+0x23c>
          {
            return HAL_ERROR;
 80010f8:	2301      	movs	r3, #1
 80010fa:	e208      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
          }

          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80010fc:	4b09      	ldr	r3, [pc, #36]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 80010fe:	685b      	ldr	r3, [r3, #4]
 8001100:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001104:	687b      	ldr	r3, [r7, #4]
 8001106:	6a1b      	ldr	r3, [r3, #32]
 8001108:	4906      	ldr	r1, [pc, #24]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 800110a:	4313      	orrs	r3, r2
 800110c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800110e:	4b05      	ldr	r3, [pc, #20]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 8001110:	685b      	ldr	r3, [r3, #4]
 8001112:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001116:	687b      	ldr	r3, [r7, #4]
 8001118:	69db      	ldr	r3, [r3, #28]
 800111a:	061b      	lsls	r3, r3, #24
 800111c:	4901      	ldr	r1, [pc, #4]	@ (8001124 <HAL_RCC_OscConfig+0x264>)
 800111e:	4313      	orrs	r3, r2
 8001120:	604b      	str	r3, [r1, #4]
 8001122:	e020      	b.n	8001166 <HAL_RCC_OscConfig+0x2a6>
 8001124:	40023800 	.word	0x40023800
 8001128:	42470000 	.word	0x42470000
        }
        else
        {
          /* Else, keep current flash latency while decreasing applies */
          /* Selects the Multiple Speed oscillator (MSI) clock range .*/
          __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 800112c:	4b99      	ldr	r3, [pc, #612]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800112e:	685b      	ldr	r3, [r3, #4]
 8001130:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8001134:	687b      	ldr	r3, [r7, #4]
 8001136:	6a1b      	ldr	r3, [r3, #32]
 8001138:	4996      	ldr	r1, [pc, #600]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800113a:	4313      	orrs	r3, r2
 800113c:	604b      	str	r3, [r1, #4]
          /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
          __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 800113e:	4b95      	ldr	r3, [pc, #596]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001140:	685b      	ldr	r3, [r3, #4]
 8001142:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	69db      	ldr	r3, [r3, #28]
 800114a:	061b      	lsls	r3, r3, #24
 800114c:	4991      	ldr	r1, [pc, #580]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800114e:	4313      	orrs	r3, r2
 8001150:	604b      	str	r3, [r1, #4]

          /* Decrease number of wait states update if necessary */
          if(RCC_SetFlashLatencyFromMSIRange(RCC_OscInitStruct->MSIClockRange) != HAL_OK)
 8001152:	687b      	ldr	r3, [r7, #4]
 8001154:	6a1b      	ldr	r3, [r3, #32]
 8001156:	4618      	mov	r0, r3
 8001158:	f000 fbd4 	bl	8001904 <RCC_SetFlashLatencyFromMSIRange>
 800115c:	4603      	mov	r3, r0
 800115e:	2b00      	cmp	r3, #0
 8001160:	d001      	beq.n	8001166 <HAL_RCC_OscConfig+0x2a6>
          {
            return HAL_ERROR;
 8001162:	2301      	movs	r3, #1
 8001164:	e1d3      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
          }
        }

        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001166:	687b      	ldr	r3, [r7, #4]
 8001168:	6a1b      	ldr	r3, [r3, #32]
 800116a:	0b5b      	lsrs	r3, r3, #13
 800116c:	3301      	adds	r3, #1
 800116e:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 8001172:	fa02 f303 	lsl.w	r3, r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8001176:	4a87      	ldr	r2, [pc, #540]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001178:	6892      	ldr	r2, [r2, #8]
 800117a:	0912      	lsrs	r2, r2, #4
 800117c:	f002 020f 	and.w	r2, r2, #15
 8001180:	4985      	ldr	r1, [pc, #532]	@ (8001398 <HAL_RCC_OscConfig+0x4d8>)
 8001182:	5c8a      	ldrb	r2, [r1, r2]
 8001184:	40d3      	lsrs	r3, r2
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8001186:	4a85      	ldr	r2, [pc, #532]	@ (800139c <HAL_RCC_OscConfig+0x4dc>)
 8001188:	6013      	str	r3, [r2, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick(uwTickPrio);
 800118a:	4b85      	ldr	r3, [pc, #532]	@ (80013a0 <HAL_RCC_OscConfig+0x4e0>)
 800118c:	681b      	ldr	r3, [r3, #0]
 800118e:	4618      	mov	r0, r3
 8001190:	f7ff fb9a 	bl	80008c8 <HAL_InitTick>
 8001194:	4603      	mov	r3, r0
 8001196:	73fb      	strb	r3, [r7, #15]
        if(status != HAL_OK)
 8001198:	7bfb      	ldrb	r3, [r7, #15]
 800119a:	2b00      	cmp	r3, #0
 800119c:	d045      	beq.n	800122a <HAL_RCC_OscConfig+0x36a>
        {
          return status;
 800119e:	7bfb      	ldrb	r3, [r7, #15]
 80011a0:	e1b5      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 80011a2:	687b      	ldr	r3, [r7, #4]
 80011a4:	699b      	ldr	r3, [r3, #24]
 80011a6:	2b00      	cmp	r3, #0
 80011a8:	d029      	beq.n	80011fe <HAL_RCC_OscConfig+0x33e>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 80011aa:	4b7e      	ldr	r3, [pc, #504]	@ (80013a4 <HAL_RCC_OscConfig+0x4e4>)
 80011ac:	2201      	movs	r2, #1
 80011ae:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80011b0:	f7ff fbd6 	bl	8000960 <HAL_GetTick>
 80011b4:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011b6:	e008      	b.n	80011ca <HAL_RCC_OscConfig+0x30a>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80011b8:	f7ff fbd2 	bl	8000960 <HAL_GetTick>
 80011bc:	4602      	mov	r2, r0
 80011be:	693b      	ldr	r3, [r7, #16]
 80011c0:	1ad3      	subs	r3, r2, r3
 80011c2:	2b02      	cmp	r3, #2
 80011c4:	d901      	bls.n	80011ca <HAL_RCC_OscConfig+0x30a>
          {
            return HAL_TIMEOUT;
 80011c6:	2303      	movs	r3, #3
 80011c8:	e1a1      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80011ca:	4b72      	ldr	r3, [pc, #456]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80011cc:	681b      	ldr	r3, [r3, #0]
 80011ce:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80011d2:	2b00      	cmp	r3, #0
 80011d4:	d0f0      	beq.n	80011b8 <HAL_RCC_OscConfig+0x2f8>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80011d6:	4b6f      	ldr	r3, [pc, #444]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80011d8:	685b      	ldr	r3, [r3, #4]
 80011da:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80011de:	687b      	ldr	r3, [r7, #4]
 80011e0:	6a1b      	ldr	r3, [r3, #32]
 80011e2:	496c      	ldr	r1, [pc, #432]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80011e4:	4313      	orrs	r3, r2
 80011e6:	604b      	str	r3, [r1, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80011e8:	4b6a      	ldr	r3, [pc, #424]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80011ea:	685b      	ldr	r3, [r3, #4]
 80011ec:	f023 427f 	bic.w	r2, r3, #4278190080	@ 0xff000000
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	69db      	ldr	r3, [r3, #28]
 80011f4:	061b      	lsls	r3, r3, #24
 80011f6:	4967      	ldr	r1, [pc, #412]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80011f8:	4313      	orrs	r3, r2
 80011fa:	604b      	str	r3, [r1, #4]
 80011fc:	e015      	b.n	800122a <HAL_RCC_OscConfig+0x36a>

      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80011fe:	4b69      	ldr	r3, [pc, #420]	@ (80013a4 <HAL_RCC_OscConfig+0x4e4>)
 8001200:	2200      	movs	r2, #0
 8001202:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001204:	f7ff fbac 	bl	8000960 <HAL_GetTick>
 8001208:	6138      	str	r0, [r7, #16]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800120a:	e008      	b.n	800121e <HAL_RCC_OscConfig+0x35e>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 800120c:	f7ff fba8 	bl	8000960 <HAL_GetTick>
 8001210:	4602      	mov	r2, r0
 8001212:	693b      	ldr	r3, [r7, #16]
 8001214:	1ad3      	subs	r3, r2, r3
 8001216:	2b02      	cmp	r3, #2
 8001218:	d901      	bls.n	800121e <HAL_RCC_OscConfig+0x35e>
          {
            return HAL_TIMEOUT;
 800121a:	2303      	movs	r3, #3
 800121c:	e177      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 800121e:	4b5d      	ldr	r3, [pc, #372]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001220:	681b      	ldr	r3, [r3, #0]
 8001222:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8001226:	2b00      	cmp	r3, #0
 8001228:	d1f0      	bne.n	800120c <HAL_RCC_OscConfig+0x34c>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	f003 0308 	and.w	r3, r3, #8
 8001232:	2b00      	cmp	r3, #0
 8001234:	d030      	beq.n	8001298 <HAL_RCC_OscConfig+0x3d8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	695b      	ldr	r3, [r3, #20]
 800123a:	2b00      	cmp	r3, #0
 800123c:	d016      	beq.n	800126c <HAL_RCC_OscConfig+0x3ac>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800123e:	4b5a      	ldr	r3, [pc, #360]	@ (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 8001240:	2201      	movs	r2, #1
 8001242:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001244:	f7ff fb8c 	bl	8000960 <HAL_GetTick>
 8001248:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800124a:	e008      	b.n	800125e <HAL_RCC_OscConfig+0x39e>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800124c:	f7ff fb88 	bl	8000960 <HAL_GetTick>
 8001250:	4602      	mov	r2, r0
 8001252:	693b      	ldr	r3, [r7, #16]
 8001254:	1ad3      	subs	r3, r2, r3
 8001256:	2b02      	cmp	r3, #2
 8001258:	d901      	bls.n	800125e <HAL_RCC_OscConfig+0x39e>
        {
          return HAL_TIMEOUT;
 800125a:	2303      	movs	r3, #3
 800125c:	e157      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 800125e:	4b4d      	ldr	r3, [pc, #308]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001260:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001262:	f003 0302 	and.w	r3, r3, #2
 8001266:	2b00      	cmp	r3, #0
 8001268:	d0f0      	beq.n	800124c <HAL_RCC_OscConfig+0x38c>
 800126a:	e015      	b.n	8001298 <HAL_RCC_OscConfig+0x3d8>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800126c:	4b4e      	ldr	r3, [pc, #312]	@ (80013a8 <HAL_RCC_OscConfig+0x4e8>)
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001272:	f7ff fb75 	bl	8000960 <HAL_GetTick>
 8001276:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8001278:	e008      	b.n	800128c <HAL_RCC_OscConfig+0x3cc>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800127a:	f7ff fb71 	bl	8000960 <HAL_GetTick>
 800127e:	4602      	mov	r2, r0
 8001280:	693b      	ldr	r3, [r7, #16]
 8001282:	1ad3      	subs	r3, r2, r3
 8001284:	2b02      	cmp	r3, #2
 8001286:	d901      	bls.n	800128c <HAL_RCC_OscConfig+0x3cc>
        {
          return HAL_TIMEOUT;
 8001288:	2303      	movs	r3, #3
 800128a:	e140      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 800128c:	4b41      	ldr	r3, [pc, #260]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800128e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001290:	f003 0302 	and.w	r3, r3, #2
 8001294:	2b00      	cmp	r3, #0
 8001296:	d1f0      	bne.n	800127a <HAL_RCC_OscConfig+0x3ba>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001298:	687b      	ldr	r3, [r7, #4]
 800129a:	681b      	ldr	r3, [r3, #0]
 800129c:	f003 0304 	and.w	r3, r3, #4
 80012a0:	2b00      	cmp	r3, #0
 80012a2:	f000 80b5 	beq.w	8001410 <HAL_RCC_OscConfig+0x550>
  {
    FlagStatus       pwrclkchanged = RESET;
 80012a6:	2300      	movs	r3, #0
 80012a8:	77fb      	strb	r3, [r7, #31]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80012aa:	4b3a      	ldr	r3, [pc, #232]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80012ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ae:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012b2:	2b00      	cmp	r3, #0
 80012b4:	d10d      	bne.n	80012d2 <HAL_RCC_OscConfig+0x412>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80012b6:	4b37      	ldr	r3, [pc, #220]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80012b8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012ba:	4a36      	ldr	r2, [pc, #216]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80012bc:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80012c0:	6253      	str	r3, [r2, #36]	@ 0x24
 80012c2:	4b34      	ldr	r3, [pc, #208]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 80012c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80012c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80012ca:	60bb      	str	r3, [r7, #8]
 80012cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80012ce:	2301      	movs	r3, #1
 80012d0:	77fb      	strb	r3, [r7, #31]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012d2:	4b36      	ldr	r3, [pc, #216]	@ (80013ac <HAL_RCC_OscConfig+0x4ec>)
 80012d4:	681b      	ldr	r3, [r3, #0]
 80012d6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80012da:	2b00      	cmp	r3, #0
 80012dc:	d118      	bne.n	8001310 <HAL_RCC_OscConfig+0x450>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80012de:	4b33      	ldr	r3, [pc, #204]	@ (80013ac <HAL_RCC_OscConfig+0x4ec>)
 80012e0:	681b      	ldr	r3, [r3, #0]
 80012e2:	4a32      	ldr	r2, [pc, #200]	@ (80013ac <HAL_RCC_OscConfig+0x4ec>)
 80012e4:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80012e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80012ea:	f7ff fb39 	bl	8000960 <HAL_GetTick>
 80012ee:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80012f0:	e008      	b.n	8001304 <HAL_RCC_OscConfig+0x444>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80012f2:	f7ff fb35 	bl	8000960 <HAL_GetTick>
 80012f6:	4602      	mov	r2, r0
 80012f8:	693b      	ldr	r3, [r7, #16]
 80012fa:	1ad3      	subs	r3, r2, r3
 80012fc:	2b64      	cmp	r3, #100	@ 0x64
 80012fe:	d901      	bls.n	8001304 <HAL_RCC_OscConfig+0x444>
        {
          return HAL_TIMEOUT;
 8001300:	2303      	movs	r3, #3
 8001302:	e104      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001304:	4b29      	ldr	r3, [pc, #164]	@ (80013ac <HAL_RCC_OscConfig+0x4ec>)
 8001306:	681b      	ldr	r3, [r3, #0]
 8001308:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800130c:	2b00      	cmp	r3, #0
 800130e:	d0f0      	beq.n	80012f2 <HAL_RCC_OscConfig+0x432>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001310:	687b      	ldr	r3, [r7, #4]
 8001312:	689b      	ldr	r3, [r3, #8]
 8001314:	2b01      	cmp	r3, #1
 8001316:	d106      	bne.n	8001326 <HAL_RCC_OscConfig+0x466>
 8001318:	4b1e      	ldr	r3, [pc, #120]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800131a:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800131c:	4a1d      	ldr	r2, [pc, #116]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800131e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001322:	6353      	str	r3, [r2, #52]	@ 0x34
 8001324:	e02d      	b.n	8001382 <HAL_RCC_OscConfig+0x4c2>
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	689b      	ldr	r3, [r3, #8]
 800132a:	2b00      	cmp	r3, #0
 800132c:	d10c      	bne.n	8001348 <HAL_RCC_OscConfig+0x488>
 800132e:	4b19      	ldr	r3, [pc, #100]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001330:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001332:	4a18      	ldr	r2, [pc, #96]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001334:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001338:	6353      	str	r3, [r2, #52]	@ 0x34
 800133a:	4b16      	ldr	r3, [pc, #88]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800133c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800133e:	4a15      	ldr	r2, [pc, #84]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001340:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001344:	6353      	str	r3, [r2, #52]	@ 0x34
 8001346:	e01c      	b.n	8001382 <HAL_RCC_OscConfig+0x4c2>
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689b      	ldr	r3, [r3, #8]
 800134c:	2b05      	cmp	r3, #5
 800134e:	d10c      	bne.n	800136a <HAL_RCC_OscConfig+0x4aa>
 8001350:	4b10      	ldr	r3, [pc, #64]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001352:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001354:	4a0f      	ldr	r2, [pc, #60]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001356:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 800135a:	6353      	str	r3, [r2, #52]	@ 0x34
 800135c:	4b0d      	ldr	r3, [pc, #52]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800135e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8001360:	4a0c      	ldr	r2, [pc, #48]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001362:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001366:	6353      	str	r3, [r2, #52]	@ 0x34
 8001368:	e00b      	b.n	8001382 <HAL_RCC_OscConfig+0x4c2>
 800136a:	4b0a      	ldr	r3, [pc, #40]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800136c:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800136e:	4a09      	ldr	r2, [pc, #36]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001370:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8001374:	6353      	str	r3, [r2, #52]	@ 0x34
 8001376:	4b07      	ldr	r3, [pc, #28]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 8001378:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800137a:	4a06      	ldr	r2, [pc, #24]	@ (8001394 <HAL_RCC_OscConfig+0x4d4>)
 800137c:	f423 6380 	bic.w	r3, r3, #1024	@ 0x400
 8001380:	6353      	str	r3, [r2, #52]	@ 0x34
    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8001382:	687b      	ldr	r3, [r7, #4]
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	2b00      	cmp	r3, #0
 8001388:	d024      	beq.n	80013d4 <HAL_RCC_OscConfig+0x514>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800138a:	f7ff fae9 	bl	8000960 <HAL_GetTick>
 800138e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8001390:	e019      	b.n	80013c6 <HAL_RCC_OscConfig+0x506>
 8001392:	bf00      	nop
 8001394:	40023800 	.word	0x40023800
 8001398:	08002740 	.word	0x08002740
 800139c:	20000000 	.word	0x20000000
 80013a0:	20000004 	.word	0x20000004
 80013a4:	42470020 	.word	0x42470020
 80013a8:	42470680 	.word	0x42470680
 80013ac:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013b0:	f7ff fad6 	bl	8000960 <HAL_GetTick>
 80013b4:	4602      	mov	r2, r0
 80013b6:	693b      	ldr	r3, [r7, #16]
 80013b8:	1ad3      	subs	r3, r2, r3
 80013ba:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013be:	4293      	cmp	r3, r2
 80013c0:	d901      	bls.n	80013c6 <HAL_RCC_OscConfig+0x506>
        {
          return HAL_TIMEOUT;
 80013c2:	2303      	movs	r3, #3
 80013c4:	e0a3      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 80013c6:	4b54      	ldr	r3, [pc, #336]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 80013c8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013ca:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d0ee      	beq.n	80013b0 <HAL_RCC_OscConfig+0x4f0>
 80013d2:	e014      	b.n	80013fe <HAL_RCC_OscConfig+0x53e>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80013d4:	f7ff fac4 	bl	8000960 <HAL_GetTick>
 80013d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013da:	e00a      	b.n	80013f2 <HAL_RCC_OscConfig+0x532>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80013dc:	f7ff fac0 	bl	8000960 <HAL_GetTick>
 80013e0:	4602      	mov	r2, r0
 80013e2:	693b      	ldr	r3, [r7, #16]
 80013e4:	1ad3      	subs	r3, r2, r3
 80013e6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80013ea:	4293      	cmp	r3, r2
 80013ec:	d901      	bls.n	80013f2 <HAL_RCC_OscConfig+0x532>
        {
          return HAL_TIMEOUT;
 80013ee:	2303      	movs	r3, #3
 80013f0:	e08d      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80013f2:	4b49      	ldr	r3, [pc, #292]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 80013f4:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 80013f6:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80013fa:	2b00      	cmp	r3, #0
 80013fc:	d1ee      	bne.n	80013dc <HAL_RCC_OscConfig+0x51c>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80013fe:	7ffb      	ldrb	r3, [r7, #31]
 8001400:	2b01      	cmp	r3, #1
 8001402:	d105      	bne.n	8001410 <HAL_RCC_OscConfig+0x550>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001404:	4b44      	ldr	r3, [pc, #272]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 8001406:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001408:	4a43      	ldr	r2, [pc, #268]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 800140a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800140e:	6253      	str	r3, [r2, #36]	@ 0x24
  }

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001414:	2b00      	cmp	r3, #0
 8001416:	d079      	beq.n	800150c <HAL_RCC_OscConfig+0x64c>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001418:	69bb      	ldr	r3, [r7, #24]
 800141a:	2b0c      	cmp	r3, #12
 800141c:	d056      	beq.n	80014cc <HAL_RCC_OscConfig+0x60c>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800141e:	687b      	ldr	r3, [r7, #4]
 8001420:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001422:	2b02      	cmp	r3, #2
 8001424:	d13b      	bne.n	800149e <HAL_RCC_OscConfig+0x5de>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8001426:	4b3d      	ldr	r3, [pc, #244]	@ (800151c <HAL_RCC_OscConfig+0x65c>)
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800142c:	f7ff fa98 	bl	8000960 <HAL_GetTick>
 8001430:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001432:	e008      	b.n	8001446 <HAL_RCC_OscConfig+0x586>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001434:	f7ff fa94 	bl	8000960 <HAL_GetTick>
 8001438:	4602      	mov	r2, r0
 800143a:	693b      	ldr	r3, [r7, #16]
 800143c:	1ad3      	subs	r3, r2, r3
 800143e:	2b02      	cmp	r3, #2
 8001440:	d901      	bls.n	8001446 <HAL_RCC_OscConfig+0x586>
          {
            return HAL_TIMEOUT;
 8001442:	2303      	movs	r3, #3
 8001444:	e063      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8001446:	4b34      	ldr	r3, [pc, #208]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 8001448:	681b      	ldr	r3, [r3, #0]
 800144a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800144e:	2b00      	cmp	r3, #0
 8001450:	d1f0      	bne.n	8001434 <HAL_RCC_OscConfig+0x574>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8001452:	4b31      	ldr	r3, [pc, #196]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 8001454:	689b      	ldr	r3, [r3, #8]
 8001456:	f423 027d 	bic.w	r2, r3, #16580608	@ 0xfd0000
 800145a:	687b      	ldr	r3, [r7, #4]
 800145c:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001462:	4319      	orrs	r1, r3
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001468:	430b      	orrs	r3, r1
 800146a:	492b      	ldr	r1, [pc, #172]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 800146c:	4313      	orrs	r3, r2
 800146e:	608b      	str	r3, [r1, #8]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001470:	4b2a      	ldr	r3, [pc, #168]	@ (800151c <HAL_RCC_OscConfig+0x65c>)
 8001472:	2201      	movs	r2, #1
 8001474:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001476:	f7ff fa73 	bl	8000960 <HAL_GetTick>
 800147a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 800147c:	e008      	b.n	8001490 <HAL_RCC_OscConfig+0x5d0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800147e:	f7ff fa6f 	bl	8000960 <HAL_GetTick>
 8001482:	4602      	mov	r2, r0
 8001484:	693b      	ldr	r3, [r7, #16]
 8001486:	1ad3      	subs	r3, r2, r3
 8001488:	2b02      	cmp	r3, #2
 800148a:	d901      	bls.n	8001490 <HAL_RCC_OscConfig+0x5d0>
          {
            return HAL_TIMEOUT;
 800148c:	2303      	movs	r3, #3
 800148e:	e03e      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8001490:	4b21      	ldr	r3, [pc, #132]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001498:	2b00      	cmp	r3, #0
 800149a:	d0f0      	beq.n	800147e <HAL_RCC_OscConfig+0x5be>
 800149c:	e036      	b.n	800150c <HAL_RCC_OscConfig+0x64c>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800149e:	4b1f      	ldr	r3, [pc, #124]	@ (800151c <HAL_RCC_OscConfig+0x65c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80014a4:	f7ff fa5c 	bl	8000960 <HAL_GetTick>
 80014a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014aa:	e008      	b.n	80014be <HAL_RCC_OscConfig+0x5fe>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80014ac:	f7ff fa58 	bl	8000960 <HAL_GetTick>
 80014b0:	4602      	mov	r2, r0
 80014b2:	693b      	ldr	r3, [r7, #16]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	2b02      	cmp	r3, #2
 80014b8:	d901      	bls.n	80014be <HAL_RCC_OscConfig+0x5fe>
          {
            return HAL_TIMEOUT;
 80014ba:	2303      	movs	r3, #3
 80014bc:	e027      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 80014be:	4b16      	ldr	r3, [pc, #88]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 80014c0:	681b      	ldr	r3, [r3, #0]
 80014c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80014c6:	2b00      	cmp	r3, #0
 80014c8:	d1f0      	bne.n	80014ac <HAL_RCC_OscConfig+0x5ec>
 80014ca:	e01f      	b.n	800150c <HAL_RCC_OscConfig+0x64c>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80014cc:	687b      	ldr	r3, [r7, #4]
 80014ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80014d0:	2b01      	cmp	r3, #1
 80014d2:	d101      	bne.n	80014d8 <HAL_RCC_OscConfig+0x618>
      {
        return HAL_ERROR;
 80014d4:	2301      	movs	r3, #1
 80014d6:	e01a      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80014d8:	4b0f      	ldr	r3, [pc, #60]	@ (8001518 <HAL_RCC_OscConfig+0x658>)
 80014da:	689b      	ldr	r3, [r3, #8]
 80014dc:	617b      	str	r3, [r7, #20]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014de:	697b      	ldr	r3, [r7, #20]
 80014e0:	f403 3280 	and.w	r2, r3, #65536	@ 0x10000
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80014e8:	429a      	cmp	r2, r3
 80014ea:	d10d      	bne.n	8001508 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 80014ec:	697b      	ldr	r3, [r7, #20]
 80014ee:	f403 1270 	and.w	r2, r3, #3932160	@ 0x3c0000
 80014f2:	687b      	ldr	r3, [r7, #4]
 80014f4:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80014f6:	429a      	cmp	r2, r3
 80014f8:	d106      	bne.n	8001508 <HAL_RCC_OscConfig+0x648>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 80014fa:	697b      	ldr	r3, [r7, #20]
 80014fc:	f403 0240 	and.w	r2, r3, #12582912	@ 0xc00000
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8001504:	429a      	cmp	r2, r3
 8001506:	d001      	beq.n	800150c <HAL_RCC_OscConfig+0x64c>
        {
          return HAL_ERROR;
 8001508:	2301      	movs	r3, #1
 800150a:	e000      	b.n	800150e <HAL_RCC_OscConfig+0x64e>
        }
      }
    }
  }

  return HAL_OK;
 800150c:	2300      	movs	r3, #0
}
 800150e:	4618      	mov	r0, r3
 8001510:	3720      	adds	r7, #32
 8001512:	46bd      	mov	sp, r7
 8001514:	bd80      	pop	{r7, pc}
 8001516:	bf00      	nop
 8001518:	40023800 	.word	0x40023800
 800151c:	42470060 	.word	0x42470060

08001520 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001520:	b580      	push	{r7, lr}
 8001522:	b084      	sub	sp, #16
 8001524:	af00      	add	r7, sp, #0
 8001526:	6078      	str	r0, [r7, #4]
 8001528:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check the parameters */
  if(RCC_ClkInitStruct == NULL)
 800152a:	687b      	ldr	r3, [r7, #4]
 800152c:	2b00      	cmp	r3, #0
 800152e:	d101      	bne.n	8001534 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001530:	2301      	movs	r3, #1
 8001532:	e11a      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8001534:	4b8f      	ldr	r3, [pc, #572]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 8001536:	681b      	ldr	r3, [r3, #0]
 8001538:	f003 0301 	and.w	r3, r3, #1
 800153c:	683a      	ldr	r2, [r7, #0]
 800153e:	429a      	cmp	r2, r3
 8001540:	d919      	bls.n	8001576 <HAL_RCC_ClockConfig+0x56>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001542:	683b      	ldr	r3, [r7, #0]
 8001544:	2b01      	cmp	r3, #1
 8001546:	d105      	bne.n	8001554 <HAL_RCC_ClockConfig+0x34>
 8001548:	4b8a      	ldr	r3, [pc, #552]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 800154a:	681b      	ldr	r3, [r3, #0]
 800154c:	4a89      	ldr	r2, [pc, #548]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 800154e:	f043 0304 	orr.w	r3, r3, #4
 8001552:	6013      	str	r3, [r2, #0]
 8001554:	4b87      	ldr	r3, [pc, #540]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 8001556:	681b      	ldr	r3, [r3, #0]
 8001558:	f023 0201 	bic.w	r2, r3, #1
 800155c:	4985      	ldr	r1, [pc, #532]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 800155e:	683b      	ldr	r3, [r7, #0]
 8001560:	4313      	orrs	r3, r2
 8001562:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8001564:	4b83      	ldr	r3, [pc, #524]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 8001566:	681b      	ldr	r3, [r3, #0]
 8001568:	f003 0301 	and.w	r3, r3, #1
 800156c:	683a      	ldr	r2, [r7, #0]
 800156e:	429a      	cmp	r2, r3
 8001570:	d001      	beq.n	8001576 <HAL_RCC_ClockConfig+0x56>
    {
      return HAL_ERROR;
 8001572:	2301      	movs	r3, #1
 8001574:	e0f9      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001576:	687b      	ldr	r3, [r7, #4]
 8001578:	681b      	ldr	r3, [r3, #0]
 800157a:	f003 0302 	and.w	r3, r3, #2
 800157e:	2b00      	cmp	r3, #0
 8001580:	d008      	beq.n	8001594 <HAL_RCC_ClockConfig+0x74>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001582:	4b7d      	ldr	r3, [pc, #500]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001584:	689b      	ldr	r3, [r3, #8]
 8001586:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800158a:	687b      	ldr	r3, [r7, #4]
 800158c:	689b      	ldr	r3, [r3, #8]
 800158e:	497a      	ldr	r1, [pc, #488]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001590:	4313      	orrs	r3, r2
 8001592:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001594:	687b      	ldr	r3, [r7, #4]
 8001596:	681b      	ldr	r3, [r3, #0]
 8001598:	f003 0301 	and.w	r3, r3, #1
 800159c:	2b00      	cmp	r3, #0
 800159e:	f000 808e 	beq.w	80016be <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80015a2:	687b      	ldr	r3, [r7, #4]
 80015a4:	685b      	ldr	r3, [r3, #4]
 80015a6:	2b02      	cmp	r3, #2
 80015a8:	d107      	bne.n	80015ba <HAL_RCC_ClockConfig+0x9a>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 80015aa:	4b73      	ldr	r3, [pc, #460]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 80015ac:	681b      	ldr	r3, [r3, #0]
 80015ae:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80015b2:	2b00      	cmp	r3, #0
 80015b4:	d121      	bne.n	80015fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015b6:	2301      	movs	r3, #1
 80015b8:	e0d7      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	685b      	ldr	r3, [r3, #4]
 80015be:	2b03      	cmp	r3, #3
 80015c0:	d107      	bne.n	80015d2 <HAL_RCC_ClockConfig+0xb2>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80015c2:	4b6d      	ldr	r3, [pc, #436]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 80015c4:	681b      	ldr	r3, [r3, #0]
 80015c6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d115      	bne.n	80015fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015ce:	2301      	movs	r3, #1
 80015d0:	e0cb      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 80015d2:	687b      	ldr	r3, [r7, #4]
 80015d4:	685b      	ldr	r3, [r3, #4]
 80015d6:	2b01      	cmp	r3, #1
 80015d8:	d107      	bne.n	80015ea <HAL_RCC_ClockConfig+0xca>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80015da:	4b67      	ldr	r3, [pc, #412]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 80015dc:	681b      	ldr	r3, [r3, #0]
 80015de:	f003 0302 	and.w	r3, r3, #2
 80015e2:	2b00      	cmp	r3, #0
 80015e4:	d109      	bne.n	80015fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015e6:	2301      	movs	r3, #1
 80015e8:	e0bf      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80015ea:	4b63      	ldr	r3, [pc, #396]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 80015ec:	681b      	ldr	r3, [r3, #0]
 80015ee:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 80015f2:	2b00      	cmp	r3, #0
 80015f4:	d101      	bne.n	80015fa <HAL_RCC_ClockConfig+0xda>
      {
        return HAL_ERROR;
 80015f6:	2301      	movs	r3, #1
 80015f8:	e0b7      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80015fa:	4b5f      	ldr	r3, [pc, #380]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 80015fc:	689b      	ldr	r3, [r3, #8]
 80015fe:	f023 0203 	bic.w	r2, r3, #3
 8001602:	687b      	ldr	r3, [r7, #4]
 8001604:	685b      	ldr	r3, [r3, #4]
 8001606:	495c      	ldr	r1, [pc, #368]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001608:	4313      	orrs	r3, r2
 800160a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800160c:	f7ff f9a8 	bl	8000960 <HAL_GetTick>
 8001610:	60f8      	str	r0, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001612:	687b      	ldr	r3, [r7, #4]
 8001614:	685b      	ldr	r3, [r3, #4]
 8001616:	2b02      	cmp	r3, #2
 8001618:	d112      	bne.n	8001640 <HAL_RCC_ClockConfig+0x120>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_ClockConfig+0x112>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800161c:	f7ff f9a0 	bl	8000960 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	68fb      	ldr	r3, [r7, #12]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	@ 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_ClockConfig+0x112>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e09b      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8001632:	4b51      	ldr	r3, [pc, #324]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001634:	689b      	ldr	r3, [r3, #8]
 8001636:	f003 030c 	and.w	r3, r3, #12
 800163a:	2b08      	cmp	r3, #8
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_ClockConfig+0xfc>
 800163e:	e03e      	b.n	80016be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8001640:	687b      	ldr	r3, [r7, #4]
 8001642:	685b      	ldr	r3, [r3, #4]
 8001644:	2b03      	cmp	r3, #3
 8001646:	d112      	bne.n	800166e <HAL_RCC_ClockConfig+0x14e>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001648:	e00a      	b.n	8001660 <HAL_RCC_ClockConfig+0x140>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800164a:	f7ff f989 	bl	8000960 <HAL_GetTick>
 800164e:	4602      	mov	r2, r0
 8001650:	68fb      	ldr	r3, [r7, #12]
 8001652:	1ad3      	subs	r3, r2, r3
 8001654:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001658:	4293      	cmp	r3, r2
 800165a:	d901      	bls.n	8001660 <HAL_RCC_ClockConfig+0x140>
        {
          return HAL_TIMEOUT;
 800165c:	2303      	movs	r3, #3
 800165e:	e084      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8001660:	4b45      	ldr	r3, [pc, #276]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001662:	689b      	ldr	r3, [r3, #8]
 8001664:	f003 030c 	and.w	r3, r3, #12
 8001668:	2b0c      	cmp	r3, #12
 800166a:	d1ee      	bne.n	800164a <HAL_RCC_ClockConfig+0x12a>
 800166c:	e027      	b.n	80016be <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 800166e:	687b      	ldr	r3, [r7, #4]
 8001670:	685b      	ldr	r3, [r3, #4]
 8001672:	2b01      	cmp	r3, #1
 8001674:	d11d      	bne.n	80016b2 <HAL_RCC_ClockConfig+0x192>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8001676:	e00a      	b.n	800168e <HAL_RCC_ClockConfig+0x16e>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001678:	f7ff f972 	bl	8000960 <HAL_GetTick>
 800167c:	4602      	mov	r2, r0
 800167e:	68fb      	ldr	r3, [r7, #12]
 8001680:	1ad3      	subs	r3, r2, r3
 8001682:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001686:	4293      	cmp	r3, r2
 8001688:	d901      	bls.n	800168e <HAL_RCC_ClockConfig+0x16e>
        {
          return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e06d      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 800168e:	4b3a      	ldr	r3, [pc, #232]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001690:	689b      	ldr	r3, [r3, #8]
 8001692:	f003 030c 	and.w	r3, r3, #12
 8001696:	2b04      	cmp	r3, #4
 8001698:	d1ee      	bne.n	8001678 <HAL_RCC_ClockConfig+0x158>
 800169a:	e010      	b.n	80016be <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 800169c:	f7ff f960 	bl	8000960 <HAL_GetTick>
 80016a0:	4602      	mov	r2, r0
 80016a2:	68fb      	ldr	r3, [r7, #12]
 80016a4:	1ad3      	subs	r3, r2, r3
 80016a6:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016aa:	4293      	cmp	r3, r2
 80016ac:	d901      	bls.n	80016b2 <HAL_RCC_ClockConfig+0x192>
        {
          return HAL_TIMEOUT;
 80016ae:	2303      	movs	r3, #3
 80016b0:	e05b      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 80016b2:	4b31      	ldr	r3, [pc, #196]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 80016b4:	689b      	ldr	r3, [r3, #8]
 80016b6:	f003 030c 	and.w	r3, r3, #12
 80016ba:	2b00      	cmp	r3, #0
 80016bc:	d1ee      	bne.n	800169c <HAL_RCC_ClockConfig+0x17c>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80016be:	4b2d      	ldr	r3, [pc, #180]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 80016c0:	681b      	ldr	r3, [r3, #0]
 80016c2:	f003 0301 	and.w	r3, r3, #1
 80016c6:	683a      	ldr	r2, [r7, #0]
 80016c8:	429a      	cmp	r2, r3
 80016ca:	d219      	bcs.n	8001700 <HAL_RCC_ClockConfig+0x1e0>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80016cc:	683b      	ldr	r3, [r7, #0]
 80016ce:	2b01      	cmp	r3, #1
 80016d0:	d105      	bne.n	80016de <HAL_RCC_ClockConfig+0x1be>
 80016d2:	4b28      	ldr	r3, [pc, #160]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 80016d4:	681b      	ldr	r3, [r3, #0]
 80016d6:	4a27      	ldr	r2, [pc, #156]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 80016d8:	f043 0304 	orr.w	r3, r3, #4
 80016dc:	6013      	str	r3, [r2, #0]
 80016de:	4b25      	ldr	r3, [pc, #148]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 80016e0:	681b      	ldr	r3, [r3, #0]
 80016e2:	f023 0201 	bic.w	r2, r3, #1
 80016e6:	4923      	ldr	r1, [pc, #140]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 80016e8:	683b      	ldr	r3, [r7, #0]
 80016ea:	4313      	orrs	r3, r2
 80016ec:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80016ee:	4b21      	ldr	r3, [pc, #132]	@ (8001774 <HAL_RCC_ClockConfig+0x254>)
 80016f0:	681b      	ldr	r3, [r3, #0]
 80016f2:	f003 0301 	and.w	r3, r3, #1
 80016f6:	683a      	ldr	r2, [r7, #0]
 80016f8:	429a      	cmp	r2, r3
 80016fa:	d001      	beq.n	8001700 <HAL_RCC_ClockConfig+0x1e0>
    {
      return HAL_ERROR;
 80016fc:	2301      	movs	r3, #1
 80016fe:	e034      	b.n	800176a <HAL_RCC_ClockConfig+0x24a>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001700:	687b      	ldr	r3, [r7, #4]
 8001702:	681b      	ldr	r3, [r3, #0]
 8001704:	f003 0304 	and.w	r3, r3, #4
 8001708:	2b00      	cmp	r3, #0
 800170a:	d008      	beq.n	800171e <HAL_RCC_ClockConfig+0x1fe>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800170c:	4b1a      	ldr	r3, [pc, #104]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 800170e:	689b      	ldr	r3, [r3, #8]
 8001710:	f423 62e0 	bic.w	r2, r3, #1792	@ 0x700
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	68db      	ldr	r3, [r3, #12]
 8001718:	4917      	ldr	r1, [pc, #92]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 800171a:	4313      	orrs	r3, r2
 800171c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800171e:	687b      	ldr	r3, [r7, #4]
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	f003 0308 	and.w	r3, r3, #8
 8001726:	2b00      	cmp	r3, #0
 8001728:	d009      	beq.n	800173e <HAL_RCC_ClockConfig+0x21e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800172a:	4b13      	ldr	r3, [pc, #76]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 800172c:	689b      	ldr	r3, [r3, #8]
 800172e:	f423 5260 	bic.w	r2, r3, #14336	@ 0x3800
 8001732:	687b      	ldr	r3, [r7, #4]
 8001734:	691b      	ldr	r3, [r3, #16]
 8001736:	00db      	lsls	r3, r3, #3
 8001738:	490f      	ldr	r1, [pc, #60]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 800173a:	4313      	orrs	r3, r2
 800173c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800173e:	f000 f823 	bl	8001788 <HAL_RCC_GetSysClockFreq>
 8001742:	4602      	mov	r2, r0
 8001744:	4b0c      	ldr	r3, [pc, #48]	@ (8001778 <HAL_RCC_ClockConfig+0x258>)
 8001746:	689b      	ldr	r3, [r3, #8]
 8001748:	091b      	lsrs	r3, r3, #4
 800174a:	f003 030f 	and.w	r3, r3, #15
 800174e:	490b      	ldr	r1, [pc, #44]	@ (800177c <HAL_RCC_ClockConfig+0x25c>)
 8001750:	5ccb      	ldrb	r3, [r1, r3]
 8001752:	fa22 f303 	lsr.w	r3, r2, r3
 8001756:	4a0a      	ldr	r2, [pc, #40]	@ (8001780 <HAL_RCC_ClockConfig+0x260>)
 8001758:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 800175a:	4b0a      	ldr	r3, [pc, #40]	@ (8001784 <HAL_RCC_ClockConfig+0x264>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7ff f8b2 	bl	80008c8 <HAL_InitTick>
 8001764:	4603      	mov	r3, r0
 8001766:	72fb      	strb	r3, [r7, #11]

  return status;
 8001768:	7afb      	ldrb	r3, [r7, #11]
}
 800176a:	4618      	mov	r0, r3
 800176c:	3710      	adds	r7, #16
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	40023c00 	.word	0x40023c00
 8001778:	40023800 	.word	0x40023800
 800177c:	08002740 	.word	0x08002740
 8001780:	20000000 	.word	0x20000000
 8001784:	20000004 	.word	0x20000004

08001788 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001788:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800178c:	b08e      	sub	sp, #56	@ 0x38
 800178e:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange, sysclockfreq;

  tmpreg = RCC->CFGR;
 8001790:	4b58      	ldr	r3, [pc, #352]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x16c>)
 8001792:	689b      	ldr	r3, [r3, #8]
 8001794:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8001796:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8001798:	f003 030c 	and.w	r3, r3, #12
 800179c:	2b0c      	cmp	r3, #12
 800179e:	d00d      	beq.n	80017bc <HAL_RCC_GetSysClockFreq+0x34>
 80017a0:	2b0c      	cmp	r3, #12
 80017a2:	f200 8092 	bhi.w	80018ca <HAL_RCC_GetSysClockFreq+0x142>
 80017a6:	2b04      	cmp	r3, #4
 80017a8:	d002      	beq.n	80017b0 <HAL_RCC_GetSysClockFreq+0x28>
 80017aa:	2b08      	cmp	r3, #8
 80017ac:	d003      	beq.n	80017b6 <HAL_RCC_GetSysClockFreq+0x2e>
 80017ae:	e08c      	b.n	80018ca <HAL_RCC_GetSysClockFreq+0x142>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80017b0:	4b51      	ldr	r3, [pc, #324]	@ (80018f8 <HAL_RCC_GetSysClockFreq+0x170>)
 80017b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80017b4:	e097      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80017b6:	4b51      	ldr	r3, [pc, #324]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x174>)
 80017b8:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80017ba:	e094      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80017bc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017be:	0c9b      	lsrs	r3, r3, #18
 80017c0:	f003 020f 	and.w	r2, r3, #15
 80017c4:	4b4e      	ldr	r3, [pc, #312]	@ (8001900 <HAL_RCC_GetSysClockFreq+0x178>)
 80017c6:	5c9b      	ldrb	r3, [r3, r2]
 80017c8:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80017ca:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80017cc:	0d9b      	lsrs	r3, r3, #22
 80017ce:	f003 0303 	and.w	r3, r3, #3
 80017d2:	3301      	adds	r3, #1
 80017d4:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80017d6:	4b47      	ldr	r3, [pc, #284]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80017d8:	689b      	ldr	r3, [r3, #8]
 80017da:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80017de:	2b00      	cmp	r3, #0
 80017e0:	d021      	beq.n	8001826 <HAL_RCC_GetSysClockFreq+0x9e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80017e2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80017e4:	2200      	movs	r2, #0
 80017e6:	61bb      	str	r3, [r7, #24]
 80017e8:	61fa      	str	r2, [r7, #28]
 80017ea:	4b44      	ldr	r3, [pc, #272]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x174>)
 80017ec:	e9d7 8906 	ldrd	r8, r9, [r7, #24]
 80017f0:	464a      	mov	r2, r9
 80017f2:	fb03 f202 	mul.w	r2, r3, r2
 80017f6:	2300      	movs	r3, #0
 80017f8:	4644      	mov	r4, r8
 80017fa:	fb04 f303 	mul.w	r3, r4, r3
 80017fe:	4413      	add	r3, r2
 8001800:	4a3e      	ldr	r2, [pc, #248]	@ (80018fc <HAL_RCC_GetSysClockFreq+0x174>)
 8001802:	4644      	mov	r4, r8
 8001804:	fba4 0102 	umull	r0, r1, r4, r2
 8001808:	440b      	add	r3, r1
 800180a:	4619      	mov	r1, r3
 800180c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800180e:	2200      	movs	r2, #0
 8001810:	613b      	str	r3, [r7, #16]
 8001812:	617a      	str	r2, [r7, #20]
 8001814:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8001818:	f7fe fcb0 	bl	800017c <__aeabi_uldivmod>
 800181c:	4602      	mov	r2, r0
 800181e:	460b      	mov	r3, r1
 8001820:	4613      	mov	r3, r2
 8001822:	637b      	str	r3, [r7, #52]	@ 0x34
 8001824:	e04e      	b.n	80018c4 <HAL_RCC_GetSysClockFreq+0x13c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8001826:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8001828:	2200      	movs	r2, #0
 800182a:	469a      	mov	sl, r3
 800182c:	4693      	mov	fp, r2
 800182e:	4652      	mov	r2, sl
 8001830:	465b      	mov	r3, fp
 8001832:	f04f 0000 	mov.w	r0, #0
 8001836:	f04f 0100 	mov.w	r1, #0
 800183a:	0159      	lsls	r1, r3, #5
 800183c:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001840:	0150      	lsls	r0, r2, #5
 8001842:	4602      	mov	r2, r0
 8001844:	460b      	mov	r3, r1
 8001846:	ebb2 080a 	subs.w	r8, r2, sl
 800184a:	eb63 090b 	sbc.w	r9, r3, fp
 800184e:	f04f 0200 	mov.w	r2, #0
 8001852:	f04f 0300 	mov.w	r3, #0
 8001856:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800185a:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 800185e:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001862:	ebb2 0408 	subs.w	r4, r2, r8
 8001866:	eb63 0509 	sbc.w	r5, r3, r9
 800186a:	f04f 0200 	mov.w	r2, #0
 800186e:	f04f 0300 	mov.w	r3, #0
 8001872:	00eb      	lsls	r3, r5, #3
 8001874:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001878:	00e2      	lsls	r2, r4, #3
 800187a:	4614      	mov	r4, r2
 800187c:	461d      	mov	r5, r3
 800187e:	eb14 030a 	adds.w	r3, r4, sl
 8001882:	603b      	str	r3, [r7, #0]
 8001884:	eb45 030b 	adc.w	r3, r5, fp
 8001888:	607b      	str	r3, [r7, #4]
 800188a:	f04f 0200 	mov.w	r2, #0
 800188e:	f04f 0300 	mov.w	r3, #0
 8001892:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001896:	4629      	mov	r1, r5
 8001898:	028b      	lsls	r3, r1, #10
 800189a:	4620      	mov	r0, r4
 800189c:	4629      	mov	r1, r5
 800189e:	4604      	mov	r4, r0
 80018a0:	ea43 5394 	orr.w	r3, r3, r4, lsr #22
 80018a4:	4601      	mov	r1, r0
 80018a6:	028a      	lsls	r2, r1, #10
 80018a8:	4610      	mov	r0, r2
 80018aa:	4619      	mov	r1, r3
 80018ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80018ae:	2200      	movs	r2, #0
 80018b0:	60bb      	str	r3, [r7, #8]
 80018b2:	60fa      	str	r2, [r7, #12]
 80018b4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018b8:	f7fe fc60 	bl	800017c <__aeabi_uldivmod>
 80018bc:	4602      	mov	r2, r0
 80018be:	460b      	mov	r3, r1
 80018c0:	4613      	mov	r3, r2
 80018c2:	637b      	str	r3, [r7, #52]	@ 0x34
      }
      sysclockfreq = pllvco;
 80018c4:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80018c6:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018c8:	e00d      	b.n	80018e6 <HAL_RCC_GetSysClockFreq+0x15e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 80018ca:	4b0a      	ldr	r3, [pc, #40]	@ (80018f4 <HAL_RCC_GetSysClockFreq+0x16c>)
 80018cc:	685b      	ldr	r3, [r3, #4]
 80018ce:	0b5b      	lsrs	r3, r3, #13
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80018d6:	6a3b      	ldr	r3, [r7, #32]
 80018d8:	3301      	adds	r3, #1
 80018da:	f44f 4200 	mov.w	r2, #32768	@ 0x8000
 80018de:	fa02 f303 	lsl.w	r3, r2, r3
 80018e2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80018e4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80018e6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80018e8:	4618      	mov	r0, r3
 80018ea:	3738      	adds	r7, #56	@ 0x38
 80018ec:	46bd      	mov	sp, r7
 80018ee:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80018f2:	bf00      	nop
 80018f4:	40023800 	.word	0x40023800
 80018f8:	00f42400 	.word	0x00f42400
 80018fc:	016e3600 	.word	0x016e3600
 8001900:	08002734 	.word	0x08002734

08001904 <RCC_SetFlashLatencyFromMSIRange>:
            voltage range
  * @param  MSIrange  MSI range value from RCC_MSIRANGE_0 to RCC_MSIRANGE_6
  * @retval HAL status
  */
static HAL_StatusTypeDef RCC_SetFlashLatencyFromMSIRange(uint32_t MSIrange)
{
 8001904:	b480      	push	{r7}
 8001906:	b087      	sub	sp, #28
 8001908:	af00      	add	r7, sp, #0
 800190a:	6078      	str	r0, [r7, #4]
  uint32_t vos;
  uint32_t latency = FLASH_LATENCY_0;  /* default value 0WS */
 800190c:	2300      	movs	r3, #0
 800190e:	613b      	str	r3, [r7, #16]

  /* HCLK can reach 4 MHz only if AHB prescaler = 1 */
  if (READ_BIT(RCC->CFGR, RCC_CFGR_HPRE) == RCC_SYSCLK_DIV1)
 8001910:	4b29      	ldr	r3, [pc, #164]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001912:	689b      	ldr	r3, [r3, #8]
 8001914:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8001918:	2b00      	cmp	r3, #0
 800191a:	d12c      	bne.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x72>
  {
    if(__HAL_RCC_PWR_IS_CLK_ENABLED())
 800191c:	4b26      	ldr	r3, [pc, #152]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800191e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	2b00      	cmp	r3, #0
 8001926:	d005      	beq.n	8001934 <RCC_SetFlashLatencyFromMSIRange+0x30>
    {
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 8001928:	4b24      	ldr	r3, [pc, #144]	@ (80019bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001930:	617b      	str	r3, [r7, #20]
 8001932:	e016      	b.n	8001962 <RCC_SetFlashLatencyFromMSIRange+0x5e>
    }
    else
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001934:	4b20      	ldr	r3, [pc, #128]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001936:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001938:	4a1f      	ldr	r2, [pc, #124]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800193a:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800193e:	6253      	str	r3, [r2, #36]	@ 0x24
 8001940:	4b1d      	ldr	r3, [pc, #116]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001942:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001944:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001948:	60fb      	str	r3, [r7, #12]
 800194a:	68fb      	ldr	r3, [r7, #12]
      vos = READ_BIT(PWR->CR, PWR_CR_VOS);
 800194c:	4b1b      	ldr	r3, [pc, #108]	@ (80019bc <RCC_SetFlashLatencyFromMSIRange+0xb8>)
 800194e:	681b      	ldr	r3, [r3, #0]
 8001950:	f403 53c0 	and.w	r3, r3, #6144	@ 0x1800
 8001954:	617b      	str	r3, [r7, #20]
      __HAL_RCC_PWR_CLK_DISABLE();
 8001956:	4b18      	ldr	r3, [pc, #96]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 8001958:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800195a:	4a17      	ldr	r2, [pc, #92]	@ (80019b8 <RCC_SetFlashLatencyFromMSIRange+0xb4>)
 800195c:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8001960:	6253      	str	r3, [r2, #36]	@ 0x24
    }

    /* Check if need to set latency 1 only for Range 3 & HCLK = 4MHz */
    if((vos == PWR_REGULATOR_VOLTAGE_SCALE3) && (MSIrange == RCC_MSIRANGE_6))
 8001962:	697b      	ldr	r3, [r7, #20]
 8001964:	f5b3 5fc0 	cmp.w	r3, #6144	@ 0x1800
 8001968:	d105      	bne.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x72>
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	f5b3 4f40 	cmp.w	r3, #49152	@ 0xc000
 8001970:	d101      	bne.n	8001976 <RCC_SetFlashLatencyFromMSIRange+0x72>
    {
      latency = FLASH_LATENCY_1; /* 1WS */
 8001972:	2301      	movs	r3, #1
 8001974:	613b      	str	r3, [r7, #16]
    }
  }

  __HAL_FLASH_SET_LATENCY(latency);
 8001976:	693b      	ldr	r3, [r7, #16]
 8001978:	2b01      	cmp	r3, #1
 800197a:	d105      	bne.n	8001988 <RCC_SetFlashLatencyFromMSIRange+0x84>
 800197c:	4b10      	ldr	r3, [pc, #64]	@ (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800197e:	681b      	ldr	r3, [r3, #0]
 8001980:	4a0f      	ldr	r2, [pc, #60]	@ (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001982:	f043 0304 	orr.w	r3, r3, #4
 8001986:	6013      	str	r3, [r2, #0]
 8001988:	4b0d      	ldr	r3, [pc, #52]	@ (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800198a:	681b      	ldr	r3, [r3, #0]
 800198c:	f023 0201 	bic.w	r2, r3, #1
 8001990:	490b      	ldr	r1, [pc, #44]	@ (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 8001992:	693b      	ldr	r3, [r7, #16]
 8001994:	4313      	orrs	r3, r2
 8001996:	600b      	str	r3, [r1, #0]

  /* Check that the new number of wait states is taken into account to access the Flash
     memory by reading the FLASH_ACR register */
  if(__HAL_FLASH_GET_LATENCY() != latency)
 8001998:	4b09      	ldr	r3, [pc, #36]	@ (80019c0 <RCC_SetFlashLatencyFromMSIRange+0xbc>)
 800199a:	681b      	ldr	r3, [r3, #0]
 800199c:	f003 0301 	and.w	r3, r3, #1
 80019a0:	693a      	ldr	r2, [r7, #16]
 80019a2:	429a      	cmp	r2, r3
 80019a4:	d001      	beq.n	80019aa <RCC_SetFlashLatencyFromMSIRange+0xa6>
  {
    return HAL_ERROR;
 80019a6:	2301      	movs	r3, #1
 80019a8:	e000      	b.n	80019ac <RCC_SetFlashLatencyFromMSIRange+0xa8>
  }

  return HAL_OK;
 80019aa:	2300      	movs	r3, #0
}
 80019ac:	4618      	mov	r0, r3
 80019ae:	371c      	adds	r7, #28
 80019b0:	46bd      	mov	sp, r7
 80019b2:	bc80      	pop	{r7}
 80019b4:	4770      	bx	lr
 80019b6:	bf00      	nop
 80019b8:	40023800 	.word	0x40023800
 80019bc:	40007000 	.word	0x40007000
 80019c0:	40023c00 	.word	0x40023c00

080019c4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80019c4:	b580      	push	{r7, lr}
 80019c6:	b082      	sub	sp, #8
 80019c8:	af00      	add	r7, sp, #0
 80019ca:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80019cc:	687b      	ldr	r3, [r7, #4]
 80019ce:	2b00      	cmp	r3, #0
 80019d0:	d101      	bne.n	80019d6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80019d2:	2301      	movs	r3, #1
 80019d4:	e031      	b.n	8001a3a <HAL_TIM_Base_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80019d6:	687b      	ldr	r3, [r7, #4]
 80019d8:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 80019dc:	b2db      	uxtb	r3, r3
 80019de:	2b00      	cmp	r3, #0
 80019e0:	d106      	bne.n	80019f0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80019e2:	687b      	ldr	r3, [r7, #4]
 80019e4:	2200      	movs	r2, #0
 80019e6:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80019ea:	6878      	ldr	r0, [r7, #4]
 80019ec:	f7fe fe80 	bl	80006f0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80019f0:	687b      	ldr	r3, [r7, #4]
 80019f2:	2202      	movs	r2, #2
 80019f4:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	681a      	ldr	r2, [r3, #0]
 80019fc:	687b      	ldr	r3, [r7, #4]
 80019fe:	3304      	adds	r3, #4
 8001a00:	4619      	mov	r1, r3
 8001a02:	4610      	mov	r0, r2
 8001a04:	f000 fbe0 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001a08:	687b      	ldr	r3, [r7, #4]
 8001a0a:	2201      	movs	r2, #1
 8001a0c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	2201      	movs	r2, #1
 8001a14:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8001a18:	687b      	ldr	r3, [r7, #4]
 8001a1a:	2201      	movs	r2, #1
 8001a1c:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001a20:	687b      	ldr	r3, [r7, #4]
 8001a22:	2201      	movs	r2, #1
 8001a24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001a28:	687b      	ldr	r3, [r7, #4]
 8001a2a:	2201      	movs	r2, #1
 8001a2c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001a30:	687b      	ldr	r3, [r7, #4]
 8001a32:	2201      	movs	r2, #1
 8001a34:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001a38:	2300      	movs	r3, #0
}
 8001a3a:	4618      	mov	r0, r3
 8001a3c:	3708      	adds	r7, #8
 8001a3e:	46bd      	mov	sp, r7
 8001a40:	bd80      	pop	{r7, pc}
	...

08001a44 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8001a44:	b480      	push	{r7}
 8001a46:	b085      	sub	sp, #20
 8001a48:	af00      	add	r7, sp, #0
 8001a4a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001a52:	b2db      	uxtb	r3, r3
 8001a54:	2b01      	cmp	r3, #1
 8001a56:	d001      	beq.n	8001a5c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8001a58:	2301      	movs	r3, #1
 8001a5a:	e03a      	b.n	8001ad2 <HAL_TIM_Base_Start_IT+0x8e>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001a5c:	687b      	ldr	r3, [r7, #4]
 8001a5e:	2202      	movs	r2, #2
 8001a60:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8001a64:	687b      	ldr	r3, [r7, #4]
 8001a66:	681b      	ldr	r3, [r3, #0]
 8001a68:	68da      	ldr	r2, [r3, #12]
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	681b      	ldr	r3, [r3, #0]
 8001a6e:	f042 0201 	orr.w	r2, r2, #1
 8001a72:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001a74:	687b      	ldr	r3, [r7, #4]
 8001a76:	681b      	ldr	r3, [r3, #0]
 8001a78:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001a7c:	d00e      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x58>
 8001a7e:	687b      	ldr	r3, [r7, #4]
 8001a80:	681b      	ldr	r3, [r3, #0]
 8001a82:	4a16      	ldr	r2, [pc, #88]	@ (8001adc <HAL_TIM_Base_Start_IT+0x98>)
 8001a84:	4293      	cmp	r3, r2
 8001a86:	d009      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x58>
 8001a88:	687b      	ldr	r3, [r7, #4]
 8001a8a:	681b      	ldr	r3, [r3, #0]
 8001a8c:	4a14      	ldr	r2, [pc, #80]	@ (8001ae0 <HAL_TIM_Base_Start_IT+0x9c>)
 8001a8e:	4293      	cmp	r3, r2
 8001a90:	d004      	beq.n	8001a9c <HAL_TIM_Base_Start_IT+0x58>
 8001a92:	687b      	ldr	r3, [r7, #4]
 8001a94:	681b      	ldr	r3, [r3, #0]
 8001a96:	4a13      	ldr	r2, [pc, #76]	@ (8001ae4 <HAL_TIM_Base_Start_IT+0xa0>)
 8001a98:	4293      	cmp	r3, r2
 8001a9a:	d111      	bne.n	8001ac0 <HAL_TIM_Base_Start_IT+0x7c>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001a9c:	687b      	ldr	r3, [r7, #4]
 8001a9e:	681b      	ldr	r3, [r3, #0]
 8001aa0:	689b      	ldr	r3, [r3, #8]
 8001aa2:	f003 0307 	and.w	r3, r3, #7
 8001aa6:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001aa8:	68fb      	ldr	r3, [r7, #12]
 8001aaa:	2b06      	cmp	r3, #6
 8001aac:	d010      	beq.n	8001ad0 <HAL_TIM_Base_Start_IT+0x8c>
    {
      __HAL_TIM_ENABLE(htim);
 8001aae:	687b      	ldr	r3, [r7, #4]
 8001ab0:	681b      	ldr	r3, [r3, #0]
 8001ab2:	681a      	ldr	r2, [r3, #0]
 8001ab4:	687b      	ldr	r3, [r7, #4]
 8001ab6:	681b      	ldr	r3, [r3, #0]
 8001ab8:	f042 0201 	orr.w	r2, r2, #1
 8001abc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001abe:	e007      	b.n	8001ad0 <HAL_TIM_Base_Start_IT+0x8c>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001ac0:	687b      	ldr	r3, [r7, #4]
 8001ac2:	681b      	ldr	r3, [r3, #0]
 8001ac4:	681a      	ldr	r2, [r3, #0]
 8001ac6:	687b      	ldr	r3, [r7, #4]
 8001ac8:	681b      	ldr	r3, [r3, #0]
 8001aca:	f042 0201 	orr.w	r2, r2, #1
 8001ace:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001ad0:	2300      	movs	r3, #0
}
 8001ad2:	4618      	mov	r0, r3
 8001ad4:	3714      	adds	r7, #20
 8001ad6:	46bd      	mov	sp, r7
 8001ad8:	bc80      	pop	{r7}
 8001ada:	4770      	bx	lr
 8001adc:	40000400 	.word	0x40000400
 8001ae0:	40000800 	.word	0x40000800
 8001ae4:	40010800 	.word	0x40010800

08001ae8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8001ae8:	b580      	push	{r7, lr}
 8001aea:	b082      	sub	sp, #8
 8001aec:	af00      	add	r7, sp, #0
 8001aee:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8001af0:	687b      	ldr	r3, [r7, #4]
 8001af2:	2b00      	cmp	r3, #0
 8001af4:	d101      	bne.n	8001afa <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8001af6:	2301      	movs	r3, #1
 8001af8:	e031      	b.n	8001b5e <HAL_TIM_PWM_Init+0x76>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	f893 3039 	ldrb.w	r3, [r3, #57]	@ 0x39
 8001b00:	b2db      	uxtb	r3, r3
 8001b02:	2b00      	cmp	r3, #0
 8001b04:	d106      	bne.n	8001b14 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8001b06:	687b      	ldr	r3, [r7, #4]
 8001b08:	2200      	movs	r2, #0
 8001b0a:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8001b0e:	6878      	ldr	r0, [r7, #4]
 8001b10:	f000 f829 	bl	8001b66 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8001b14:	687b      	ldr	r3, [r7, #4]
 8001b16:	2202      	movs	r2, #2
 8001b18:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8001b1c:	687b      	ldr	r3, [r7, #4]
 8001b1e:	681a      	ldr	r2, [r3, #0]
 8001b20:	687b      	ldr	r3, [r7, #4]
 8001b22:	3304      	adds	r3, #4
 8001b24:	4619      	mov	r1, r3
 8001b26:	4610      	mov	r0, r2
 8001b28:	f000 fb4e 	bl	80021c8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	2201      	movs	r2, #1
 8001b30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8001b34:	687b      	ldr	r3, [r7, #4]
 8001b36:	2201      	movs	r2, #1
 8001b38:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8001b3c:	687b      	ldr	r3, [r7, #4]
 8001b3e:	2201      	movs	r2, #1
 8001b40:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	2201      	movs	r2, #1
 8001b48:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001b4c:	687b      	ldr	r3, [r7, #4]
 8001b4e:	2201      	movs	r2, #1
 8001b50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	2201      	movs	r2, #1
 8001b58:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  return HAL_OK;
 8001b5c:	2300      	movs	r3, #0
}
 8001b5e:	4618      	mov	r0, r3
 8001b60:	3708      	adds	r7, #8
 8001b62:	46bd      	mov	sp, r7
 8001b64:	bd80      	pop	{r7, pc}

08001b66 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8001b66:	b480      	push	{r7}
 8001b68:	b083      	sub	sp, #12
 8001b6a:	af00      	add	r7, sp, #0
 8001b6c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8001b6e:	bf00      	nop
 8001b70:	370c      	adds	r7, #12
 8001b72:	46bd      	mov	sp, r7
 8001b74:	bc80      	pop	{r7}
 8001b76:	4770      	bx	lr

08001b78 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8001b78:	b580      	push	{r7, lr}
 8001b7a:	b084      	sub	sp, #16
 8001b7c:	af00      	add	r7, sp, #0
 8001b7e:	6078      	str	r0, [r7, #4]
 8001b80:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8001b82:	683b      	ldr	r3, [r7, #0]
 8001b84:	2b00      	cmp	r3, #0
 8001b86:	d109      	bne.n	8001b9c <HAL_TIM_PWM_Start+0x24>
 8001b88:	687b      	ldr	r3, [r7, #4]
 8001b8a:	f893 303a 	ldrb.w	r3, [r3, #58]	@ 0x3a
 8001b8e:	b2db      	uxtb	r3, r3
 8001b90:	2b01      	cmp	r3, #1
 8001b92:	bf14      	ite	ne
 8001b94:	2301      	movne	r3, #1
 8001b96:	2300      	moveq	r3, #0
 8001b98:	b2db      	uxtb	r3, r3
 8001b9a:	e022      	b.n	8001be2 <HAL_TIM_PWM_Start+0x6a>
 8001b9c:	683b      	ldr	r3, [r7, #0]
 8001b9e:	2b04      	cmp	r3, #4
 8001ba0:	d109      	bne.n	8001bb6 <HAL_TIM_PWM_Start+0x3e>
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	f893 303b 	ldrb.w	r3, [r3, #59]	@ 0x3b
 8001ba8:	b2db      	uxtb	r3, r3
 8001baa:	2b01      	cmp	r3, #1
 8001bac:	bf14      	ite	ne
 8001bae:	2301      	movne	r3, #1
 8001bb0:	2300      	moveq	r3, #0
 8001bb2:	b2db      	uxtb	r3, r3
 8001bb4:	e015      	b.n	8001be2 <HAL_TIM_PWM_Start+0x6a>
 8001bb6:	683b      	ldr	r3, [r7, #0]
 8001bb8:	2b08      	cmp	r3, #8
 8001bba:	d109      	bne.n	8001bd0 <HAL_TIM_PWM_Start+0x58>
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8001bc2:	b2db      	uxtb	r3, r3
 8001bc4:	2b01      	cmp	r3, #1
 8001bc6:	bf14      	ite	ne
 8001bc8:	2301      	movne	r3, #1
 8001bca:	2300      	moveq	r3, #0
 8001bcc:	b2db      	uxtb	r3, r3
 8001bce:	e008      	b.n	8001be2 <HAL_TIM_PWM_Start+0x6a>
 8001bd0:	687b      	ldr	r3, [r7, #4]
 8001bd2:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8001bd6:	b2db      	uxtb	r3, r3
 8001bd8:	2b01      	cmp	r3, #1
 8001bda:	bf14      	ite	ne
 8001bdc:	2301      	movne	r3, #1
 8001bde:	2300      	moveq	r3, #0
 8001be0:	b2db      	uxtb	r3, r3
 8001be2:	2b00      	cmp	r3, #0
 8001be4:	d001      	beq.n	8001bea <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8001be6:	2301      	movs	r3, #1
 8001be8:	e051      	b.n	8001c8e <HAL_TIM_PWM_Start+0x116>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8001bea:	683b      	ldr	r3, [r7, #0]
 8001bec:	2b00      	cmp	r3, #0
 8001bee:	d104      	bne.n	8001bfa <HAL_TIM_PWM_Start+0x82>
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	2202      	movs	r2, #2
 8001bf4:	f883 203a 	strb.w	r2, [r3, #58]	@ 0x3a
 8001bf8:	e013      	b.n	8001c22 <HAL_TIM_PWM_Start+0xaa>
 8001bfa:	683b      	ldr	r3, [r7, #0]
 8001bfc:	2b04      	cmp	r3, #4
 8001bfe:	d104      	bne.n	8001c0a <HAL_TIM_PWM_Start+0x92>
 8001c00:	687b      	ldr	r3, [r7, #4]
 8001c02:	2202      	movs	r2, #2
 8001c04:	f883 203b 	strb.w	r2, [r3, #59]	@ 0x3b
 8001c08:	e00b      	b.n	8001c22 <HAL_TIM_PWM_Start+0xaa>
 8001c0a:	683b      	ldr	r3, [r7, #0]
 8001c0c:	2b08      	cmp	r3, #8
 8001c0e:	d104      	bne.n	8001c1a <HAL_TIM_PWM_Start+0xa2>
 8001c10:	687b      	ldr	r3, [r7, #4]
 8001c12:	2202      	movs	r2, #2
 8001c14:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
 8001c18:	e003      	b.n	8001c22 <HAL_TIM_PWM_Start+0xaa>
 8001c1a:	687b      	ldr	r3, [r7, #4]
 8001c1c:	2202      	movs	r2, #2
 8001c1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8001c22:	687b      	ldr	r3, [r7, #4]
 8001c24:	681b      	ldr	r3, [r3, #0]
 8001c26:	2201      	movs	r2, #1
 8001c28:	6839      	ldr	r1, [r7, #0]
 8001c2a:	4618      	mov	r0, r3
 8001c2c:	f000 fcc7 	bl	80025be <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	681b      	ldr	r3, [r3, #0]
 8001c34:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001c38:	d00e      	beq.n	8001c58 <HAL_TIM_PWM_Start+0xe0>
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	4a16      	ldr	r2, [pc, #88]	@ (8001c98 <HAL_TIM_PWM_Start+0x120>)
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d009      	beq.n	8001c58 <HAL_TIM_PWM_Start+0xe0>
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	681b      	ldr	r3, [r3, #0]
 8001c48:	4a14      	ldr	r2, [pc, #80]	@ (8001c9c <HAL_TIM_PWM_Start+0x124>)
 8001c4a:	4293      	cmp	r3, r2
 8001c4c:	d004      	beq.n	8001c58 <HAL_TIM_PWM_Start+0xe0>
 8001c4e:	687b      	ldr	r3, [r7, #4]
 8001c50:	681b      	ldr	r3, [r3, #0]
 8001c52:	4a13      	ldr	r2, [pc, #76]	@ (8001ca0 <HAL_TIM_PWM_Start+0x128>)
 8001c54:	4293      	cmp	r3, r2
 8001c56:	d111      	bne.n	8001c7c <HAL_TIM_PWM_Start+0x104>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8001c58:	687b      	ldr	r3, [r7, #4]
 8001c5a:	681b      	ldr	r3, [r3, #0]
 8001c5c:	689b      	ldr	r3, [r3, #8]
 8001c5e:	f003 0307 	and.w	r3, r3, #7
 8001c62:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c64:	68fb      	ldr	r3, [r7, #12]
 8001c66:	2b06      	cmp	r3, #6
 8001c68:	d010      	beq.n	8001c8c <HAL_TIM_PWM_Start+0x114>
    {
      __HAL_TIM_ENABLE(htim);
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	681a      	ldr	r2, [r3, #0]
 8001c70:	687b      	ldr	r3, [r7, #4]
 8001c72:	681b      	ldr	r3, [r3, #0]
 8001c74:	f042 0201 	orr.w	r2, r2, #1
 8001c78:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8001c7a:	e007      	b.n	8001c8c <HAL_TIM_PWM_Start+0x114>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8001c7c:	687b      	ldr	r3, [r7, #4]
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	681a      	ldr	r2, [r3, #0]
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	681b      	ldr	r3, [r3, #0]
 8001c86:	f042 0201 	orr.w	r2, r2, #1
 8001c8a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8001c8c:	2300      	movs	r3, #0
}
 8001c8e:	4618      	mov	r0, r3
 8001c90:	3710      	adds	r7, #16
 8001c92:	46bd      	mov	sp, r7
 8001c94:	bd80      	pop	{r7, pc}
 8001c96:	bf00      	nop
 8001c98:	40000400 	.word	0x40000400
 8001c9c:	40000800 	.word	0x40000800
 8001ca0:	40010800 	.word	0x40010800

08001ca4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8001ca4:	b580      	push	{r7, lr}
 8001ca6:	b082      	sub	sp, #8
 8001ca8:	af00      	add	r7, sp, #0
 8001caa:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8001cac:	687b      	ldr	r3, [r7, #4]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	691b      	ldr	r3, [r3, #16]
 8001cb2:	f003 0302 	and.w	r3, r3, #2
 8001cb6:	2b02      	cmp	r3, #2
 8001cb8:	d122      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8001cba:	687b      	ldr	r3, [r7, #4]
 8001cbc:	681b      	ldr	r3, [r3, #0]
 8001cbe:	68db      	ldr	r3, [r3, #12]
 8001cc0:	f003 0302 	and.w	r3, r3, #2
 8001cc4:	2b02      	cmp	r3, #2
 8001cc6:	d11b      	bne.n	8001d00 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8001cc8:	687b      	ldr	r3, [r7, #4]
 8001cca:	681b      	ldr	r3, [r3, #0]
 8001ccc:	f06f 0202 	mvn.w	r2, #2
 8001cd0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	2201      	movs	r2, #1
 8001cd6:	761a      	strb	r2, [r3, #24]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	699b      	ldr	r3, [r3, #24]
 8001cde:	f003 0303 	and.w	r3, r3, #3
 8001ce2:	2b00      	cmp	r3, #0
 8001ce4:	d003      	beq.n	8001cee <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8001ce6:	6878      	ldr	r0, [r7, #4]
 8001ce8:	f000 fa53 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001cec:	e005      	b.n	8001cfa <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8001cee:	6878      	ldr	r0, [r7, #4]
 8001cf0:	f000 fa46 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001cf4:	6878      	ldr	r0, [r7, #4]
 8001cf6:	f000 fa55 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	2200      	movs	r2, #0
 8001cfe:	761a      	strb	r2, [r3, #24]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8001d00:	687b      	ldr	r3, [r7, #4]
 8001d02:	681b      	ldr	r3, [r3, #0]
 8001d04:	691b      	ldr	r3, [r3, #16]
 8001d06:	f003 0304 	and.w	r3, r3, #4
 8001d0a:	2b04      	cmp	r3, #4
 8001d0c:	d122      	bne.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8001d0e:	687b      	ldr	r3, [r7, #4]
 8001d10:	681b      	ldr	r3, [r3, #0]
 8001d12:	68db      	ldr	r3, [r3, #12]
 8001d14:	f003 0304 	and.w	r3, r3, #4
 8001d18:	2b04      	cmp	r3, #4
 8001d1a:	d11b      	bne.n	8001d54 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f06f 0204 	mvn.w	r2, #4
 8001d24:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	2202      	movs	r2, #2
 8001d2a:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8001d2c:	687b      	ldr	r3, [r7, #4]
 8001d2e:	681b      	ldr	r3, [r3, #0]
 8001d30:	699b      	ldr	r3, [r3, #24]
 8001d32:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001d36:	2b00      	cmp	r3, #0
 8001d38:	d003      	beq.n	8001d42 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d3a:	6878      	ldr	r0, [r7, #4]
 8001d3c:	f000 fa29 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001d40:	e005      	b.n	8001d4e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d42:	6878      	ldr	r0, [r7, #4]
 8001d44:	f000 fa1c 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d48:	6878      	ldr	r0, [r7, #4]
 8001d4a:	f000 fa2b 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001d4e:	687b      	ldr	r3, [r7, #4]
 8001d50:	2200      	movs	r2, #0
 8001d52:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	691b      	ldr	r3, [r3, #16]
 8001d5a:	f003 0308 	and.w	r3, r3, #8
 8001d5e:	2b08      	cmp	r3, #8
 8001d60:	d122      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8001d62:	687b      	ldr	r3, [r7, #4]
 8001d64:	681b      	ldr	r3, [r3, #0]
 8001d66:	68db      	ldr	r3, [r3, #12]
 8001d68:	f003 0308 	and.w	r3, r3, #8
 8001d6c:	2b08      	cmp	r3, #8
 8001d6e:	d11b      	bne.n	8001da8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	f06f 0208 	mvn.w	r2, #8
 8001d78:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8001d7a:	687b      	ldr	r3, [r7, #4]
 8001d7c:	2204      	movs	r2, #4
 8001d7e:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8001d80:	687b      	ldr	r3, [r7, #4]
 8001d82:	681b      	ldr	r3, [r3, #0]
 8001d84:	69db      	ldr	r3, [r3, #28]
 8001d86:	f003 0303 	and.w	r3, r3, #3
 8001d8a:	2b00      	cmp	r3, #0
 8001d8c:	d003      	beq.n	8001d96 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001d8e:	6878      	ldr	r0, [r7, #4]
 8001d90:	f000 f9ff 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001d94:	e005      	b.n	8001da2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001d96:	6878      	ldr	r0, [r7, #4]
 8001d98:	f000 f9f2 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001d9c:	6878      	ldr	r0, [r7, #4]
 8001d9e:	f000 fa01 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001da2:	687b      	ldr	r3, [r7, #4]
 8001da4:	2200      	movs	r2, #0
 8001da6:	761a      	strb	r2, [r3, #24]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	681b      	ldr	r3, [r3, #0]
 8001dac:	691b      	ldr	r3, [r3, #16]
 8001dae:	f003 0310 	and.w	r3, r3, #16
 8001db2:	2b10      	cmp	r3, #16
 8001db4:	d122      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	681b      	ldr	r3, [r3, #0]
 8001dba:	68db      	ldr	r3, [r3, #12]
 8001dbc:	f003 0310 	and.w	r3, r3, #16
 8001dc0:	2b10      	cmp	r3, #16
 8001dc2:	d11b      	bne.n	8001dfc <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8001dc4:	687b      	ldr	r3, [r7, #4]
 8001dc6:	681b      	ldr	r3, [r3, #0]
 8001dc8:	f06f 0210 	mvn.w	r2, #16
 8001dcc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8001dce:	687b      	ldr	r3, [r7, #4]
 8001dd0:	2208      	movs	r2, #8
 8001dd2:	761a      	strb	r2, [r3, #24]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	681b      	ldr	r3, [r3, #0]
 8001dd8:	69db      	ldr	r3, [r3, #28]
 8001dda:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8001dde:	2b00      	cmp	r3, #0
 8001de0:	d003      	beq.n	8001dea <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8001de2:	6878      	ldr	r0, [r7, #4]
 8001de4:	f000 f9d5 	bl	8002192 <HAL_TIM_IC_CaptureCallback>
 8001de8:	e005      	b.n	8001df6 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8001dea:	6878      	ldr	r0, [r7, #4]
 8001dec:	f000 f9c8 	bl	8002180 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8001df0:	6878      	ldr	r0, [r7, #4]
 8001df2:	f000 f9d7 	bl	80021a4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8001df6:	687b      	ldr	r3, [r7, #4]
 8001df8:	2200      	movs	r2, #0
 8001dfa:	761a      	strb	r2, [r3, #24]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8001dfc:	687b      	ldr	r3, [r7, #4]
 8001dfe:	681b      	ldr	r3, [r3, #0]
 8001e00:	691b      	ldr	r3, [r3, #16]
 8001e02:	f003 0301 	and.w	r3, r3, #1
 8001e06:	2b01      	cmp	r3, #1
 8001e08:	d10e      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8001e0a:	687b      	ldr	r3, [r7, #4]
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	68db      	ldr	r3, [r3, #12]
 8001e10:	f003 0301 	and.w	r3, r3, #1
 8001e14:	2b01      	cmp	r3, #1
 8001e16:	d107      	bne.n	8001e28 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8001e18:	687b      	ldr	r3, [r7, #4]
 8001e1a:	681b      	ldr	r3, [r3, #0]
 8001e1c:	f06f 0201 	mvn.w	r2, #1
 8001e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8001e22:	6878      	ldr	r0, [r7, #4]
 8001e24:	f000 f9a3 	bl	800216e <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	681b      	ldr	r3, [r3, #0]
 8001e2c:	691b      	ldr	r3, [r3, #16]
 8001e2e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e32:	2b40      	cmp	r3, #64	@ 0x40
 8001e34:	d10e      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8001e36:	687b      	ldr	r3, [r7, #4]
 8001e38:	681b      	ldr	r3, [r3, #0]
 8001e3a:	68db      	ldr	r3, [r3, #12]
 8001e3c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001e40:	2b40      	cmp	r3, #64	@ 0x40
 8001e42:	d107      	bne.n	8001e54 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8001e44:	687b      	ldr	r3, [r7, #4]
 8001e46:	681b      	ldr	r3, [r3, #0]
 8001e48:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8001e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8001e4e:	6878      	ldr	r0, [r7, #4]
 8001e50:	f000 f9b1 	bl	80021b6 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8001e54:	bf00      	nop
 8001e56:	3708      	adds	r7, #8
 8001e58:	46bd      	mov	sp, r7
 8001e5a:	bd80      	pop	{r7, pc}

08001e5c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8001e5c:	b580      	push	{r7, lr}
 8001e5e:	b086      	sub	sp, #24
 8001e60:	af00      	add	r7, sp, #0
 8001e62:	60f8      	str	r0, [r7, #12]
 8001e64:	60b9      	str	r1, [r7, #8]
 8001e66:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8001e68:	2300      	movs	r3, #0
 8001e6a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8001e6c:	68fb      	ldr	r3, [r7, #12]
 8001e6e:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001e72:	2b01      	cmp	r3, #1
 8001e74:	d101      	bne.n	8001e7a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8001e76:	2302      	movs	r3, #2
 8001e78:	e0ae      	b.n	8001fd8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 8001e7a:	68fb      	ldr	r3, [r7, #12]
 8001e7c:	2201      	movs	r2, #1
 8001e7e:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  switch (Channel)
 8001e82:	687b      	ldr	r3, [r7, #4]
 8001e84:	2b0c      	cmp	r3, #12
 8001e86:	f200 809f 	bhi.w	8001fc8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 8001e8a:	a201      	add	r2, pc, #4	@ (adr r2, 8001e90 <HAL_TIM_PWM_ConfigChannel+0x34>)
 8001e8c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e90:	08001ec5 	.word	0x08001ec5
 8001e94:	08001fc9 	.word	0x08001fc9
 8001e98:	08001fc9 	.word	0x08001fc9
 8001e9c:	08001fc9 	.word	0x08001fc9
 8001ea0:	08001f05 	.word	0x08001f05
 8001ea4:	08001fc9 	.word	0x08001fc9
 8001ea8:	08001fc9 	.word	0x08001fc9
 8001eac:	08001fc9 	.word	0x08001fc9
 8001eb0:	08001f47 	.word	0x08001f47
 8001eb4:	08001fc9 	.word	0x08001fc9
 8001eb8:	08001fc9 	.word	0x08001fc9
 8001ebc:	08001fc9 	.word	0x08001fc9
 8001ec0:	08001f87 	.word	0x08001f87
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8001ec4:	68fb      	ldr	r3, [r7, #12]
 8001ec6:	681b      	ldr	r3, [r3, #0]
 8001ec8:	68b9      	ldr	r1, [r7, #8]
 8001eca:	4618      	mov	r0, r3
 8001ecc:	f000 f9ec 	bl	80022a8 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8001ed0:	68fb      	ldr	r3, [r7, #12]
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	699a      	ldr	r2, [r3, #24]
 8001ed6:	68fb      	ldr	r3, [r7, #12]
 8001ed8:	681b      	ldr	r3, [r3, #0]
 8001eda:	f042 0208 	orr.w	r2, r2, #8
 8001ede:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8001ee0:	68fb      	ldr	r3, [r7, #12]
 8001ee2:	681b      	ldr	r3, [r3, #0]
 8001ee4:	699a      	ldr	r2, [r3, #24]
 8001ee6:	68fb      	ldr	r3, [r7, #12]
 8001ee8:	681b      	ldr	r3, [r3, #0]
 8001eea:	f022 0204 	bic.w	r2, r2, #4
 8001eee:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8001ef0:	68fb      	ldr	r3, [r7, #12]
 8001ef2:	681b      	ldr	r3, [r3, #0]
 8001ef4:	6999      	ldr	r1, [r3, #24]
 8001ef6:	68bb      	ldr	r3, [r7, #8]
 8001ef8:	68da      	ldr	r2, [r3, #12]
 8001efa:	68fb      	ldr	r3, [r7, #12]
 8001efc:	681b      	ldr	r3, [r3, #0]
 8001efe:	430a      	orrs	r2, r1
 8001f00:	619a      	str	r2, [r3, #24]
      break;
 8001f02:	e064      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8001f04:	68fb      	ldr	r3, [r7, #12]
 8001f06:	681b      	ldr	r3, [r3, #0]
 8001f08:	68b9      	ldr	r1, [r7, #8]
 8001f0a:	4618      	mov	r0, r3
 8001f0c:	f000 fa08 	bl	8002320 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8001f10:	68fb      	ldr	r3, [r7, #12]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	699a      	ldr	r2, [r3, #24]
 8001f16:	68fb      	ldr	r3, [r7, #12]
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001f1e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8001f20:	68fb      	ldr	r3, [r7, #12]
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	699a      	ldr	r2, [r3, #24]
 8001f26:	68fb      	ldr	r3, [r7, #12]
 8001f28:	681b      	ldr	r3, [r3, #0]
 8001f2a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001f2e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8001f30:	68fb      	ldr	r3, [r7, #12]
 8001f32:	681b      	ldr	r3, [r3, #0]
 8001f34:	6999      	ldr	r1, [r3, #24]
 8001f36:	68bb      	ldr	r3, [r7, #8]
 8001f38:	68db      	ldr	r3, [r3, #12]
 8001f3a:	021a      	lsls	r2, r3, #8
 8001f3c:	68fb      	ldr	r3, [r7, #12]
 8001f3e:	681b      	ldr	r3, [r3, #0]
 8001f40:	430a      	orrs	r2, r1
 8001f42:	619a      	str	r2, [r3, #24]
      break;
 8001f44:	e043      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8001f46:	68fb      	ldr	r3, [r7, #12]
 8001f48:	681b      	ldr	r3, [r3, #0]
 8001f4a:	68b9      	ldr	r1, [r7, #8]
 8001f4c:	4618      	mov	r0, r3
 8001f4e:	f000 fa25 	bl	800239c <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8001f52:	68fb      	ldr	r3, [r7, #12]
 8001f54:	681b      	ldr	r3, [r3, #0]
 8001f56:	69da      	ldr	r2, [r3, #28]
 8001f58:	68fb      	ldr	r3, [r7, #12]
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	f042 0208 	orr.w	r2, r2, #8
 8001f60:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8001f62:	68fb      	ldr	r3, [r7, #12]
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	69da      	ldr	r2, [r3, #28]
 8001f68:	68fb      	ldr	r3, [r7, #12]
 8001f6a:	681b      	ldr	r3, [r3, #0]
 8001f6c:	f022 0204 	bic.w	r2, r2, #4
 8001f70:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8001f72:	68fb      	ldr	r3, [r7, #12]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	69d9      	ldr	r1, [r3, #28]
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	68da      	ldr	r2, [r3, #12]
 8001f7c:	68fb      	ldr	r3, [r7, #12]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	430a      	orrs	r2, r1
 8001f82:	61da      	str	r2, [r3, #28]
      break;
 8001f84:	e023      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8001f86:	68fb      	ldr	r3, [r7, #12]
 8001f88:	681b      	ldr	r3, [r3, #0]
 8001f8a:	68b9      	ldr	r1, [r7, #8]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f000 fa42 	bl	8002416 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8001f92:	68fb      	ldr	r3, [r7, #12]
 8001f94:	681b      	ldr	r3, [r3, #0]
 8001f96:	69da      	ldr	r2, [r3, #28]
 8001f98:	68fb      	ldr	r3, [r7, #12]
 8001f9a:	681b      	ldr	r3, [r3, #0]
 8001f9c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8001fa0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8001fa2:	68fb      	ldr	r3, [r7, #12]
 8001fa4:	681b      	ldr	r3, [r3, #0]
 8001fa6:	69da      	ldr	r2, [r3, #28]
 8001fa8:	68fb      	ldr	r3, [r7, #12]
 8001faa:	681b      	ldr	r3, [r3, #0]
 8001fac:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8001fb0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8001fb2:	68fb      	ldr	r3, [r7, #12]
 8001fb4:	681b      	ldr	r3, [r3, #0]
 8001fb6:	69d9      	ldr	r1, [r3, #28]
 8001fb8:	68bb      	ldr	r3, [r7, #8]
 8001fba:	68db      	ldr	r3, [r3, #12]
 8001fbc:	021a      	lsls	r2, r3, #8
 8001fbe:	68fb      	ldr	r3, [r7, #12]
 8001fc0:	681b      	ldr	r3, [r3, #0]
 8001fc2:	430a      	orrs	r2, r1
 8001fc4:	61da      	str	r2, [r3, #28]
      break;
 8001fc6:	e002      	b.n	8001fce <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 8001fc8:	2301      	movs	r3, #1
 8001fca:	75fb      	strb	r3, [r7, #23]
      break;
 8001fcc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8001fce:	68fb      	ldr	r3, [r7, #12]
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8001fd6:	7dfb      	ldrb	r3, [r7, #23]
}
 8001fd8:	4618      	mov	r0, r3
 8001fda:	3718      	adds	r7, #24
 8001fdc:	46bd      	mov	sp, r7
 8001fde:	bd80      	pop	{r7, pc}

08001fe0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	b084      	sub	sp, #16
 8001fe4:	af00      	add	r7, sp, #0
 8001fe6:	6078      	str	r0, [r7, #4]
 8001fe8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8001fea:	2300      	movs	r3, #0
 8001fec:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8001ff4:	2b01      	cmp	r3, #1
 8001ff6:	d101      	bne.n	8001ffc <HAL_TIM_ConfigClockSource+0x1c>
 8001ff8:	2302      	movs	r3, #2
 8001ffa:	e0b4      	b.n	8002166 <HAL_TIM_ConfigClockSource+0x186>
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	2201      	movs	r2, #1
 8002000:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  htim->State = HAL_TIM_STATE_BUSY;
 8002004:	687b      	ldr	r3, [r7, #4]
 8002006:	2202      	movs	r2, #2
 8002008:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	681b      	ldr	r3, [r3, #0]
 8002010:	689b      	ldr	r3, [r3, #8]
 8002012:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8002014:	68bb      	ldr	r3, [r7, #8]
 8002016:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 800201a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800201c:	68bb      	ldr	r3, [r7, #8]
 800201e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8002022:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	68ba      	ldr	r2, [r7, #8]
 800202a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800202c:	683b      	ldr	r3, [r7, #0]
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8002034:	d03e      	beq.n	80020b4 <HAL_TIM_ConfigClockSource+0xd4>
 8002036:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 800203a:	f200 8087 	bhi.w	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800203e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002042:	f000 8086 	beq.w	8002152 <HAL_TIM_ConfigClockSource+0x172>
 8002046:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800204a:	d87f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800204c:	2b70      	cmp	r3, #112	@ 0x70
 800204e:	d01a      	beq.n	8002086 <HAL_TIM_ConfigClockSource+0xa6>
 8002050:	2b70      	cmp	r3, #112	@ 0x70
 8002052:	d87b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002054:	2b60      	cmp	r3, #96	@ 0x60
 8002056:	d050      	beq.n	80020fa <HAL_TIM_ConfigClockSource+0x11a>
 8002058:	2b60      	cmp	r3, #96	@ 0x60
 800205a:	d877      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800205c:	2b50      	cmp	r3, #80	@ 0x50
 800205e:	d03c      	beq.n	80020da <HAL_TIM_ConfigClockSource+0xfa>
 8002060:	2b50      	cmp	r3, #80	@ 0x50
 8002062:	d873      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002064:	2b40      	cmp	r3, #64	@ 0x40
 8002066:	d058      	beq.n	800211a <HAL_TIM_ConfigClockSource+0x13a>
 8002068:	2b40      	cmp	r3, #64	@ 0x40
 800206a:	d86f      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800206c:	2b30      	cmp	r3, #48	@ 0x30
 800206e:	d064      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002070:	2b30      	cmp	r3, #48	@ 0x30
 8002072:	d86b      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 8002074:	2b20      	cmp	r3, #32
 8002076:	d060      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002078:	2b20      	cmp	r3, #32
 800207a:	d867      	bhi.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
 800207c:	2b00      	cmp	r3, #0
 800207e:	d05c      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002080:	2b10      	cmp	r3, #16
 8002082:	d05a      	beq.n	800213a <HAL_TIM_ConfigClockSource+0x15a>
 8002084:	e062      	b.n	800214c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 800208a:	683b      	ldr	r3, [r7, #0]
 800208c:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 800208e:	683b      	ldr	r3, [r7, #0]
 8002090:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 8002092:	683b      	ldr	r3, [r7, #0]
 8002094:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8002096:	f000 fa73 	bl	8002580 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800209a:	687b      	ldr	r3, [r7, #4]
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	689b      	ldr	r3, [r3, #8]
 80020a0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80020a2:	68bb      	ldr	r3, [r7, #8]
 80020a4:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 80020a8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	68ba      	ldr	r2, [r7, #8]
 80020b0:	609a      	str	r2, [r3, #8]
      break;
 80020b2:	e04f      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80020b8:	683b      	ldr	r3, [r7, #0]
 80020ba:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80020bc:	683b      	ldr	r3, [r7, #0]
 80020be:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80020c0:	683b      	ldr	r3, [r7, #0]
 80020c2:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 80020c4:	f000 fa5c 	bl	8002580 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80020c8:	687b      	ldr	r3, [r7, #4]
 80020ca:	681b      	ldr	r3, [r3, #0]
 80020cc:	689a      	ldr	r2, [r3, #8]
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 80020d6:	609a      	str	r2, [r3, #8]
      break;
 80020d8:	e03c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020de:	683b      	ldr	r3, [r7, #0]
 80020e0:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 80020e2:	683b      	ldr	r3, [r7, #0]
 80020e4:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 80020e6:	461a      	mov	r2, r3
 80020e8:	f000 f9d3 	bl	8002492 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80020ec:	687b      	ldr	r3, [r7, #4]
 80020ee:	681b      	ldr	r3, [r3, #0]
 80020f0:	2150      	movs	r1, #80	@ 0x50
 80020f2:	4618      	mov	r0, r3
 80020f4:	f000 fa2a 	bl	800254c <TIM_ITRx_SetConfig>
      break;
 80020f8:	e02c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80020fa:	687b      	ldr	r3, [r7, #4]
 80020fc:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 80020fe:	683b      	ldr	r3, [r7, #0]
 8002100:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002102:	683b      	ldr	r3, [r7, #0]
 8002104:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8002106:	461a      	mov	r2, r3
 8002108:	f000 f9f1 	bl	80024ee <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800210c:	687b      	ldr	r3, [r7, #4]
 800210e:	681b      	ldr	r3, [r3, #0]
 8002110:	2160      	movs	r1, #96	@ 0x60
 8002112:	4618      	mov	r0, r3
 8002114:	f000 fa1a 	bl	800254c <TIM_ITRx_SetConfig>
      break;
 8002118:	e01c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800211e:	683b      	ldr	r3, [r7, #0]
 8002120:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 8002122:	683b      	ldr	r3, [r7, #0]
 8002124:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8002126:	461a      	mov	r2, r3
 8002128:	f000 f9b3 	bl	8002492 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	681b      	ldr	r3, [r3, #0]
 8002130:	2140      	movs	r1, #64	@ 0x40
 8002132:	4618      	mov	r0, r3
 8002134:	f000 fa0a 	bl	800254c <TIM_ITRx_SetConfig>
      break;
 8002138:	e00c      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681a      	ldr	r2, [r3, #0]
 800213e:	683b      	ldr	r3, [r7, #0]
 8002140:	681b      	ldr	r3, [r3, #0]
 8002142:	4619      	mov	r1, r3
 8002144:	4610      	mov	r0, r2
 8002146:	f000 fa01 	bl	800254c <TIM_ITRx_SetConfig>
      break;
 800214a:	e003      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800214c:	2301      	movs	r3, #1
 800214e:	73fb      	strb	r3, [r7, #15]
      break;
 8002150:	e000      	b.n	8002154 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8002152:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8002154:	687b      	ldr	r3, [r7, #4]
 8002156:	2201      	movs	r2, #1
 8002158:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	2200      	movs	r2, #0
 8002160:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return status;
 8002164:	7bfb      	ldrb	r3, [r7, #15]
}
 8002166:	4618      	mov	r0, r3
 8002168:	3710      	adds	r7, #16
 800216a:	46bd      	mov	sp, r7
 800216c:	bd80      	pop	{r7, pc}

0800216e <HAL_TIM_PeriodElapsedCallback>:
  * @brief  Period elapsed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800216e:	b480      	push	{r7}
 8002170:	b083      	sub	sp, #12
 8002172:	af00      	add	r7, sp, #0
 8002174:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PeriodElapsedCallback could be implemented in the user file
   */
}
 8002176:	bf00      	nop
 8002178:	370c      	adds	r7, #12
 800217a:	46bd      	mov	sp, r7
 800217c:	bc80      	pop	{r7}
 800217e:	4770      	bx	lr

08002180 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002180:	b480      	push	{r7}
 8002182:	b083      	sub	sp, #12
 8002184:	af00      	add	r7, sp, #0
 8002186:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8002188:	bf00      	nop
 800218a:	370c      	adds	r7, #12
 800218c:	46bd      	mov	sp, r7
 800218e:	bc80      	pop	{r7}
 8002190:	4770      	bx	lr

08002192 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8002192:	b480      	push	{r7}
 8002194:	b083      	sub	sp, #12
 8002196:	af00      	add	r7, sp, #0
 8002198:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800219a:	bf00      	nop
 800219c:	370c      	adds	r7, #12
 800219e:	46bd      	mov	sp, r7
 80021a0:	bc80      	pop	{r7}
 80021a2:	4770      	bx	lr

080021a4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80021a4:	b480      	push	{r7}
 80021a6:	b083      	sub	sp, #12
 80021a8:	af00      	add	r7, sp, #0
 80021aa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80021ac:	bf00      	nop
 80021ae:	370c      	adds	r7, #12
 80021b0:	46bd      	mov	sp, r7
 80021b2:	bc80      	pop	{r7}
 80021b4:	4770      	bx	lr

080021b6 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80021b6:	b480      	push	{r7}
 80021b8:	b083      	sub	sp, #12
 80021ba:	af00      	add	r7, sp, #0
 80021bc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80021be:	bf00      	nop
 80021c0:	370c      	adds	r7, #12
 80021c2:	46bd      	mov	sp, r7
 80021c4:	bc80      	pop	{r7}
 80021c6:	4770      	bx	lr

080021c8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 80021c8:	b480      	push	{r7}
 80021ca:	b085      	sub	sp, #20
 80021cc:	af00      	add	r7, sp, #0
 80021ce:	6078      	str	r0, [r7, #4]
 80021d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80021d8:	687b      	ldr	r3, [r7, #4]
 80021da:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80021de:	d00f      	beq.n	8002200 <TIM_Base_SetConfig+0x38>
 80021e0:	687b      	ldr	r3, [r7, #4]
 80021e2:	4a2b      	ldr	r2, [pc, #172]	@ (8002290 <TIM_Base_SetConfig+0xc8>)
 80021e4:	4293      	cmp	r3, r2
 80021e6:	d00b      	beq.n	8002200 <TIM_Base_SetConfig+0x38>
 80021e8:	687b      	ldr	r3, [r7, #4]
 80021ea:	4a2a      	ldr	r2, [pc, #168]	@ (8002294 <TIM_Base_SetConfig+0xcc>)
 80021ec:	4293      	cmp	r3, r2
 80021ee:	d007      	beq.n	8002200 <TIM_Base_SetConfig+0x38>
 80021f0:	687b      	ldr	r3, [r7, #4]
 80021f2:	4a29      	ldr	r2, [pc, #164]	@ (8002298 <TIM_Base_SetConfig+0xd0>)
 80021f4:	4293      	cmp	r3, r2
 80021f6:	d003      	beq.n	8002200 <TIM_Base_SetConfig+0x38>
 80021f8:	687b      	ldr	r3, [r7, #4]
 80021fa:	4a28      	ldr	r2, [pc, #160]	@ (800229c <TIM_Base_SetConfig+0xd4>)
 80021fc:	4293      	cmp	r3, r2
 80021fe:	d108      	bne.n	8002212 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8002200:	68fb      	ldr	r3, [r7, #12]
 8002202:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002206:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8002208:	683b      	ldr	r3, [r7, #0]
 800220a:	685b      	ldr	r3, [r3, #4]
 800220c:	68fa      	ldr	r2, [r7, #12]
 800220e:	4313      	orrs	r3, r2
 8002210:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8002212:	687b      	ldr	r3, [r7, #4]
 8002214:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002218:	d017      	beq.n	800224a <TIM_Base_SetConfig+0x82>
 800221a:	687b      	ldr	r3, [r7, #4]
 800221c:	4a1c      	ldr	r2, [pc, #112]	@ (8002290 <TIM_Base_SetConfig+0xc8>)
 800221e:	4293      	cmp	r3, r2
 8002220:	d013      	beq.n	800224a <TIM_Base_SetConfig+0x82>
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	4a1b      	ldr	r2, [pc, #108]	@ (8002294 <TIM_Base_SetConfig+0xcc>)
 8002226:	4293      	cmp	r3, r2
 8002228:	d00f      	beq.n	800224a <TIM_Base_SetConfig+0x82>
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	4a1a      	ldr	r2, [pc, #104]	@ (8002298 <TIM_Base_SetConfig+0xd0>)
 800222e:	4293      	cmp	r3, r2
 8002230:	d00b      	beq.n	800224a <TIM_Base_SetConfig+0x82>
 8002232:	687b      	ldr	r3, [r7, #4]
 8002234:	4a19      	ldr	r2, [pc, #100]	@ (800229c <TIM_Base_SetConfig+0xd4>)
 8002236:	4293      	cmp	r3, r2
 8002238:	d007      	beq.n	800224a <TIM_Base_SetConfig+0x82>
 800223a:	687b      	ldr	r3, [r7, #4]
 800223c:	4a18      	ldr	r2, [pc, #96]	@ (80022a0 <TIM_Base_SetConfig+0xd8>)
 800223e:	4293      	cmp	r3, r2
 8002240:	d003      	beq.n	800224a <TIM_Base_SetConfig+0x82>
 8002242:	687b      	ldr	r3, [r7, #4]
 8002244:	4a17      	ldr	r2, [pc, #92]	@ (80022a4 <TIM_Base_SetConfig+0xdc>)
 8002246:	4293      	cmp	r3, r2
 8002248:	d108      	bne.n	800225c <TIM_Base_SetConfig+0x94>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800224a:	68fb      	ldr	r3, [r7, #12]
 800224c:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002250:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	68db      	ldr	r3, [r3, #12]
 8002256:	68fa      	ldr	r2, [r7, #12]
 8002258:	4313      	orrs	r3, r2
 800225a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800225c:	68fb      	ldr	r3, [r7, #12]
 800225e:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8002262:	683b      	ldr	r3, [r7, #0]
 8002264:	691b      	ldr	r3, [r3, #16]
 8002266:	4313      	orrs	r3, r2
 8002268:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800226a:	687b      	ldr	r3, [r7, #4]
 800226c:	68fa      	ldr	r2, [r7, #12]
 800226e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8002270:	683b      	ldr	r3, [r7, #0]
 8002272:	689a      	ldr	r2, [r3, #8]
 8002274:	687b      	ldr	r3, [r7, #4]
 8002276:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8002278:	683b      	ldr	r3, [r7, #0]
 800227a:	681a      	ldr	r2, [r3, #0]
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	2201      	movs	r2, #1
 8002284:	615a      	str	r2, [r3, #20]
}
 8002286:	bf00      	nop
 8002288:	3714      	adds	r7, #20
 800228a:	46bd      	mov	sp, r7
 800228c:	bc80      	pop	{r7}
 800228e:	4770      	bx	lr
 8002290:	40000400 	.word	0x40000400
 8002294:	40000800 	.word	0x40000800
 8002298:	40000c00 	.word	0x40000c00
 800229c:	40010800 	.word	0x40010800
 80022a0:	40010c00 	.word	0x40010c00
 80022a4:	40011000 	.word	0x40011000

080022a8 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80022a8:	b480      	push	{r7}
 80022aa:	b087      	sub	sp, #28
 80022ac:	af00      	add	r7, sp, #0
 80022ae:	6078      	str	r0, [r7, #4]
 80022b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80022b2:	687b      	ldr	r3, [r7, #4]
 80022b4:	6a1b      	ldr	r3, [r3, #32]
 80022b6:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80022b8:	687b      	ldr	r3, [r7, #4]
 80022ba:	6a1b      	ldr	r3, [r3, #32]
 80022bc:	f023 0201 	bic.w	r2, r3, #1
 80022c0:	687b      	ldr	r3, [r7, #4]
 80022c2:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80022c4:	687b      	ldr	r3, [r7, #4]
 80022c6:	685b      	ldr	r3, [r3, #4]
 80022c8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	699b      	ldr	r3, [r3, #24]
 80022ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80022d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80022d8:	68fb      	ldr	r3, [r7, #12]
 80022da:	f023 0303 	bic.w	r3, r3, #3
 80022de:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	681b      	ldr	r3, [r3, #0]
 80022e4:	68fa      	ldr	r2, [r7, #12]
 80022e6:	4313      	orrs	r3, r2
 80022e8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80022ea:	697b      	ldr	r3, [r7, #20]
 80022ec:	f023 0302 	bic.w	r3, r3, #2
 80022f0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80022f2:	683b      	ldr	r3, [r7, #0]
 80022f4:	689b      	ldr	r3, [r3, #8]
 80022f6:	697a      	ldr	r2, [r7, #20]
 80022f8:	4313      	orrs	r3, r2
 80022fa:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80022fc:	687b      	ldr	r3, [r7, #4]
 80022fe:	693a      	ldr	r2, [r7, #16]
 8002300:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	68fa      	ldr	r2, [r7, #12]
 8002306:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8002308:	683b      	ldr	r3, [r7, #0]
 800230a:	685a      	ldr	r2, [r3, #4]
 800230c:	687b      	ldr	r3, [r7, #4]
 800230e:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	697a      	ldr	r2, [r7, #20]
 8002314:	621a      	str	r2, [r3, #32]
}
 8002316:	bf00      	nop
 8002318:	371c      	adds	r7, #28
 800231a:	46bd      	mov	sp, r7
 800231c:	bc80      	pop	{r7}
 800231e:	4770      	bx	lr

08002320 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002320:	b480      	push	{r7}
 8002322:	b087      	sub	sp, #28
 8002324:	af00      	add	r7, sp, #0
 8002326:	6078      	str	r0, [r7, #4]
 8002328:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	6a1b      	ldr	r3, [r3, #32]
 800232e:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002330:	687b      	ldr	r3, [r7, #4]
 8002332:	6a1b      	ldr	r3, [r3, #32]
 8002334:	f023 0210 	bic.w	r2, r3, #16
 8002338:	687b      	ldr	r3, [r7, #4]
 800233a:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8002342:	687b      	ldr	r3, [r7, #4]
 8002344:	699b      	ldr	r3, [r3, #24]
 8002346:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8002348:	68fb      	ldr	r3, [r7, #12]
 800234a:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 800234e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8002350:	68fb      	ldr	r3, [r7, #12]
 8002352:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8002356:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8002358:	683b      	ldr	r3, [r7, #0]
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	021b      	lsls	r3, r3, #8
 800235e:	68fa      	ldr	r2, [r7, #12]
 8002360:	4313      	orrs	r3, r2
 8002362:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8002364:	697b      	ldr	r3, [r7, #20]
 8002366:	f023 0320 	bic.w	r3, r3, #32
 800236a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800236c:	683b      	ldr	r3, [r7, #0]
 800236e:	689b      	ldr	r3, [r3, #8]
 8002370:	011b      	lsls	r3, r3, #4
 8002372:	697a      	ldr	r2, [r7, #20]
 8002374:	4313      	orrs	r3, r2
 8002376:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8002378:	687b      	ldr	r3, [r7, #4]
 800237a:	693a      	ldr	r2, [r7, #16]
 800237c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	68fa      	ldr	r2, [r7, #12]
 8002382:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8002384:	683b      	ldr	r3, [r7, #0]
 8002386:	685a      	ldr	r2, [r3, #4]
 8002388:	687b      	ldr	r3, [r7, #4]
 800238a:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	697a      	ldr	r2, [r7, #20]
 8002390:	621a      	str	r2, [r3, #32]
}
 8002392:	bf00      	nop
 8002394:	371c      	adds	r7, #28
 8002396:	46bd      	mov	sp, r7
 8002398:	bc80      	pop	{r7}
 800239a:	4770      	bx	lr

0800239c <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 800239c:	b480      	push	{r7}
 800239e:	b087      	sub	sp, #28
 80023a0:	af00      	add	r7, sp, #0
 80023a2:	6078      	str	r0, [r7, #4]
 80023a4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80023a6:	687b      	ldr	r3, [r7, #4]
 80023a8:	6a1b      	ldr	r3, [r3, #32]
 80023aa:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	6a1b      	ldr	r3, [r3, #32]
 80023b0:	f423 7280 	bic.w	r2, r3, #256	@ 0x100
 80023b4:	687b      	ldr	r3, [r7, #4]
 80023b6:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80023b8:	687b      	ldr	r3, [r7, #4]
 80023ba:	685b      	ldr	r3, [r3, #4]
 80023bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80023be:	687b      	ldr	r3, [r7, #4]
 80023c0:	69db      	ldr	r3, [r3, #28]
 80023c2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80023c4:	68fb      	ldr	r3, [r7, #12]
 80023c6:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 80023ca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80023cc:	68fb      	ldr	r3, [r7, #12]
 80023ce:	f023 0303 	bic.w	r3, r3, #3
 80023d2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80023d4:	683b      	ldr	r3, [r7, #0]
 80023d6:	681b      	ldr	r3, [r3, #0]
 80023d8:	68fa      	ldr	r2, [r7, #12]
 80023da:	4313      	orrs	r3, r2
 80023dc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	f423 7300 	bic.w	r3, r3, #512	@ 0x200
 80023e4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80023e6:	683b      	ldr	r3, [r7, #0]
 80023e8:	689b      	ldr	r3, [r3, #8]
 80023ea:	021b      	lsls	r3, r3, #8
 80023ec:	697a      	ldr	r2, [r7, #20]
 80023ee:	4313      	orrs	r3, r2
 80023f0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80023f2:	687b      	ldr	r3, [r7, #4]
 80023f4:	693a      	ldr	r2, [r7, #16]
 80023f6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	68fa      	ldr	r2, [r7, #12]
 80023fc:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80023fe:	683b      	ldr	r3, [r7, #0]
 8002400:	685a      	ldr	r2, [r3, #4]
 8002402:	687b      	ldr	r3, [r7, #4]
 8002404:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002406:	687b      	ldr	r3, [r7, #4]
 8002408:	697a      	ldr	r2, [r7, #20]
 800240a:	621a      	str	r2, [r3, #32]
}
 800240c:	bf00      	nop
 800240e:	371c      	adds	r7, #28
 8002410:	46bd      	mov	sp, r7
 8002412:	bc80      	pop	{r7}
 8002414:	4770      	bx	lr

08002416 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8002416:	b480      	push	{r7}
 8002418:	b087      	sub	sp, #28
 800241a:	af00      	add	r7, sp, #0
 800241c:	6078      	str	r0, [r7, #4]
 800241e:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	6a1b      	ldr	r3, [r3, #32]
 8002424:	617b      	str	r3, [r7, #20]

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8002426:	687b      	ldr	r3, [r7, #4]
 8002428:	6a1b      	ldr	r3, [r3, #32]
 800242a:	f423 5280 	bic.w	r2, r3, #4096	@ 0x1000
 800242e:	687b      	ldr	r3, [r7, #4]
 8002430:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	685b      	ldr	r3, [r3, #4]
 8002436:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8002438:	687b      	ldr	r3, [r7, #4]
 800243a:	69db      	ldr	r3, [r3, #28]
 800243c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800243e:	68fb      	ldr	r3, [r7, #12]
 8002440:	f423 43e0 	bic.w	r3, r3, #28672	@ 0x7000
 8002444:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8002446:	68fb      	ldr	r3, [r7, #12]
 8002448:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 800244c:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	021b      	lsls	r3, r3, #8
 8002454:	68fa      	ldr	r2, [r7, #12]
 8002456:	4313      	orrs	r3, r2
 8002458:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800245a:	697b      	ldr	r3, [r7, #20]
 800245c:	f423 5300 	bic.w	r3, r3, #8192	@ 0x2000
 8002460:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8002462:	683b      	ldr	r3, [r7, #0]
 8002464:	689b      	ldr	r3, [r3, #8]
 8002466:	031b      	lsls	r3, r3, #12
 8002468:	697a      	ldr	r2, [r7, #20]
 800246a:	4313      	orrs	r3, r2
 800246c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800246e:	687b      	ldr	r3, [r7, #4]
 8002470:	693a      	ldr	r2, [r7, #16]
 8002472:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8002474:	687b      	ldr	r3, [r7, #4]
 8002476:	68fa      	ldr	r2, [r7, #12]
 8002478:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800247a:	683b      	ldr	r3, [r7, #0]
 800247c:	685a      	ldr	r2, [r3, #4]
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8002482:	687b      	ldr	r3, [r7, #4]
 8002484:	697a      	ldr	r2, [r7, #20]
 8002486:	621a      	str	r2, [r3, #32]
}
 8002488:	bf00      	nop
 800248a:	371c      	adds	r7, #28
 800248c:	46bd      	mov	sp, r7
 800248e:	bc80      	pop	{r7}
 8002490:	4770      	bx	lr

08002492 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8002492:	b480      	push	{r7}
 8002494:	b087      	sub	sp, #28
 8002496:	af00      	add	r7, sp, #0
 8002498:	60f8      	str	r0, [r7, #12]
 800249a:	60b9      	str	r1, [r7, #8]
 800249c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800249e:	68fb      	ldr	r3, [r7, #12]
 80024a0:	6a1b      	ldr	r3, [r3, #32]
 80024a2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80024a4:	68fb      	ldr	r3, [r7, #12]
 80024a6:	6a1b      	ldr	r3, [r3, #32]
 80024a8:	f023 0201 	bic.w	r2, r3, #1
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80024b0:	68fb      	ldr	r3, [r7, #12]
 80024b2:	699b      	ldr	r3, [r3, #24]
 80024b4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80024b6:	693b      	ldr	r3, [r7, #16]
 80024b8:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 80024bc:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80024be:	687b      	ldr	r3, [r7, #4]
 80024c0:	011b      	lsls	r3, r3, #4
 80024c2:	693a      	ldr	r2, [r7, #16]
 80024c4:	4313      	orrs	r3, r2
 80024c6:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80024c8:	697b      	ldr	r3, [r7, #20]
 80024ca:	f023 030a 	bic.w	r3, r3, #10
 80024ce:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80024d0:	697a      	ldr	r2, [r7, #20]
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4313      	orrs	r3, r2
 80024d6:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80024d8:	68fb      	ldr	r3, [r7, #12]
 80024da:	693a      	ldr	r2, [r7, #16]
 80024dc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80024de:	68fb      	ldr	r3, [r7, #12]
 80024e0:	697a      	ldr	r2, [r7, #20]
 80024e2:	621a      	str	r2, [r3, #32]
}
 80024e4:	bf00      	nop
 80024e6:	371c      	adds	r7, #28
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bc80      	pop	{r7}
 80024ec:	4770      	bx	lr

080024ee <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80024ee:	b480      	push	{r7}
 80024f0:	b087      	sub	sp, #28
 80024f2:	af00      	add	r7, sp, #0
 80024f4:	60f8      	str	r0, [r7, #12]
 80024f6:	60b9      	str	r1, [r7, #8]
 80024f8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	6a1b      	ldr	r3, [r3, #32]
 80024fe:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8002500:	68fb      	ldr	r3, [r7, #12]
 8002502:	6a1b      	ldr	r3, [r3, #32]
 8002504:	f023 0210 	bic.w	r2, r3, #16
 8002508:	68fb      	ldr	r3, [r7, #12]
 800250a:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800250c:	68fb      	ldr	r3, [r7, #12]
 800250e:	699b      	ldr	r3, [r3, #24]
 8002510:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8002512:	693b      	ldr	r3, [r7, #16]
 8002514:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8002518:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	031b      	lsls	r3, r3, #12
 800251e:	693a      	ldr	r2, [r7, #16]
 8002520:	4313      	orrs	r3, r2
 8002522:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8002524:	697b      	ldr	r3, [r7, #20]
 8002526:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 800252a:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 800252c:	68bb      	ldr	r3, [r7, #8]
 800252e:	011b      	lsls	r3, r3, #4
 8002530:	697a      	ldr	r2, [r7, #20]
 8002532:	4313      	orrs	r3, r2
 8002534:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8002536:	68fb      	ldr	r3, [r7, #12]
 8002538:	693a      	ldr	r2, [r7, #16]
 800253a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800253c:	68fb      	ldr	r3, [r7, #12]
 800253e:	697a      	ldr	r2, [r7, #20]
 8002540:	621a      	str	r2, [r3, #32]
}
 8002542:	bf00      	nop
 8002544:	371c      	adds	r7, #28
 8002546:	46bd      	mov	sp, r7
 8002548:	bc80      	pop	{r7}
 800254a:	4770      	bx	lr

0800254c <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800254c:	b480      	push	{r7}
 800254e:	b085      	sub	sp, #20
 8002550:	af00      	add	r7, sp, #0
 8002552:	6078      	str	r0, [r7, #4]
 8002554:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	689b      	ldr	r3, [r3, #8]
 800255a:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800255c:	68fb      	ldr	r3, [r7, #12]
 800255e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002562:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8002564:	683a      	ldr	r2, [r7, #0]
 8002566:	68fb      	ldr	r3, [r7, #12]
 8002568:	4313      	orrs	r3, r2
 800256a:	f043 0307 	orr.w	r3, r3, #7
 800256e:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8002570:	687b      	ldr	r3, [r7, #4]
 8002572:	68fa      	ldr	r2, [r7, #12]
 8002574:	609a      	str	r2, [r3, #8]
}
 8002576:	bf00      	nop
 8002578:	3714      	adds	r7, #20
 800257a:	46bd      	mov	sp, r7
 800257c:	bc80      	pop	{r7}
 800257e:	4770      	bx	lr

08002580 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
static void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                              uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8002580:	b480      	push	{r7}
 8002582:	b087      	sub	sp, #28
 8002584:	af00      	add	r7, sp, #0
 8002586:	60f8      	str	r0, [r7, #12]
 8002588:	60b9      	str	r1, [r7, #8]
 800258a:	607a      	str	r2, [r7, #4]
 800258c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800258e:	68fb      	ldr	r3, [r7, #12]
 8002590:	689b      	ldr	r3, [r3, #8]
 8002592:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8002594:	697b      	ldr	r3, [r7, #20]
 8002596:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800259a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800259c:	683b      	ldr	r3, [r7, #0]
 800259e:	021a      	lsls	r2, r3, #8
 80025a0:	687b      	ldr	r3, [r7, #4]
 80025a2:	431a      	orrs	r2, r3
 80025a4:	68bb      	ldr	r3, [r7, #8]
 80025a6:	4313      	orrs	r3, r2
 80025a8:	697a      	ldr	r2, [r7, #20]
 80025aa:	4313      	orrs	r3, r2
 80025ac:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80025ae:	68fb      	ldr	r3, [r7, #12]
 80025b0:	697a      	ldr	r2, [r7, #20]
 80025b2:	609a      	str	r2, [r3, #8]
}
 80025b4:	bf00      	nop
 80025b6:	371c      	adds	r7, #28
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bc80      	pop	{r7}
 80025bc:	4770      	bx	lr

080025be <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80025be:	b480      	push	{r7}
 80025c0:	b087      	sub	sp, #28
 80025c2:	af00      	add	r7, sp, #0
 80025c4:	60f8      	str	r0, [r7, #12]
 80025c6:	60b9      	str	r1, [r7, #8]
 80025c8:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80025ca:	68bb      	ldr	r3, [r7, #8]
 80025cc:	f003 031f 	and.w	r3, r3, #31
 80025d0:	2201      	movs	r2, #1
 80025d2:	fa02 f303 	lsl.w	r3, r2, r3
 80025d6:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80025d8:	68fb      	ldr	r3, [r7, #12]
 80025da:	6a1a      	ldr	r2, [r3, #32]
 80025dc:	697b      	ldr	r3, [r7, #20]
 80025de:	43db      	mvns	r3, r3
 80025e0:	401a      	ands	r2, r3
 80025e2:	68fb      	ldr	r3, [r7, #12]
 80025e4:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	6a1a      	ldr	r2, [r3, #32]
 80025ea:	68bb      	ldr	r3, [r7, #8]
 80025ec:	f003 031f 	and.w	r3, r3, #31
 80025f0:	6879      	ldr	r1, [r7, #4]
 80025f2:	fa01 f303 	lsl.w	r3, r1, r3
 80025f6:	431a      	orrs	r2, r3
 80025f8:	68fb      	ldr	r3, [r7, #12]
 80025fa:	621a      	str	r2, [r3, #32]
}
 80025fc:	bf00      	nop
 80025fe:	371c      	adds	r7, #28
 8002600:	46bd      	mov	sp, r7
 8002602:	bc80      	pop	{r7}
 8002604:	4770      	bx	lr
	...

08002608 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8002608:	b480      	push	{r7}
 800260a:	b085      	sub	sp, #20
 800260c:	af00      	add	r7, sp, #0
 800260e:	6078      	str	r0, [r7, #4]
 8002610:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	f893 3038 	ldrb.w	r3, [r3, #56]	@ 0x38
 8002618:	2b01      	cmp	r3, #1
 800261a:	d101      	bne.n	8002620 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800261c:	2302      	movs	r3, #2
 800261e:	e046      	b.n	80026ae <HAL_TIMEx_MasterConfigSynchronization+0xa6>
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	2201      	movs	r2, #1
 8002624:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8002628:	687b      	ldr	r3, [r7, #4]
 800262a:	2202      	movs	r2, #2
 800262c:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	685b      	ldr	r3, [r3, #4]
 8002636:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	689b      	ldr	r3, [r3, #8]
 800263e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8002640:	68fb      	ldr	r3, [r7, #12]
 8002642:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8002646:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8002648:	683b      	ldr	r3, [r7, #0]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	4313      	orrs	r3, r2
 8002650:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8002652:	687b      	ldr	r3, [r7, #4]
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	68fa      	ldr	r2, [r7, #12]
 8002658:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	681b      	ldr	r3, [r3, #0]
 800265e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8002662:	d00e      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	681b      	ldr	r3, [r3, #0]
 8002668:	4a13      	ldr	r2, [pc, #76]	@ (80026b8 <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 800266a:	4293      	cmp	r3, r2
 800266c:	d009      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	4a12      	ldr	r2, [pc, #72]	@ (80026bc <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 8002674:	4293      	cmp	r3, r2
 8002676:	d004      	beq.n	8002682 <HAL_TIMEx_MasterConfigSynchronization+0x7a>
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	681b      	ldr	r3, [r3, #0]
 800267c:	4a10      	ldr	r2, [pc, #64]	@ (80026c0 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 800267e:	4293      	cmp	r3, r2
 8002680:	d10c      	bne.n	800269c <HAL_TIMEx_MasterConfigSynchronization+0x94>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8002682:	68bb      	ldr	r3, [r7, #8]
 8002684:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8002688:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800268a:	683b      	ldr	r3, [r7, #0]
 800268c:	685b      	ldr	r3, [r3, #4]
 800268e:	68ba      	ldr	r2, [r7, #8]
 8002690:	4313      	orrs	r3, r2
 8002692:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8002694:	687b      	ldr	r3, [r7, #4]
 8002696:	681b      	ldr	r3, [r3, #0]
 8002698:	68ba      	ldr	r2, [r7, #8]
 800269a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	2201      	movs	r2, #1
 80026a0:	f883 2039 	strb.w	r2, [r3, #57]	@ 0x39

  __HAL_UNLOCK(htim);
 80026a4:	687b      	ldr	r3, [r7, #4]
 80026a6:	2200      	movs	r2, #0
 80026a8:	f883 2038 	strb.w	r2, [r3, #56]	@ 0x38

  return HAL_OK;
 80026ac:	2300      	movs	r3, #0
}
 80026ae:	4618      	mov	r0, r3
 80026b0:	3714      	adds	r7, #20
 80026b2:	46bd      	mov	sp, r7
 80026b4:	bc80      	pop	{r7}
 80026b6:	4770      	bx	lr
 80026b8:	40000400 	.word	0x40000400
 80026bc:	40000800 	.word	0x40000800
 80026c0:	40010800 	.word	0x40010800

080026c4 <memset>:
 80026c4:	4603      	mov	r3, r0
 80026c6:	4402      	add	r2, r0
 80026c8:	4293      	cmp	r3, r2
 80026ca:	d100      	bne.n	80026ce <memset+0xa>
 80026cc:	4770      	bx	lr
 80026ce:	f803 1b01 	strb.w	r1, [r3], #1
 80026d2:	e7f9      	b.n	80026c8 <memset+0x4>

080026d4 <__libc_init_array>:
 80026d4:	b570      	push	{r4, r5, r6, lr}
 80026d6:	2600      	movs	r6, #0
 80026d8:	4d0c      	ldr	r5, [pc, #48]	@ (800270c <__libc_init_array+0x38>)
 80026da:	4c0d      	ldr	r4, [pc, #52]	@ (8002710 <__libc_init_array+0x3c>)
 80026dc:	1b64      	subs	r4, r4, r5
 80026de:	10a4      	asrs	r4, r4, #2
 80026e0:	42a6      	cmp	r6, r4
 80026e2:	d109      	bne.n	80026f8 <__libc_init_array+0x24>
 80026e4:	f000 f81a 	bl	800271c <_init>
 80026e8:	2600      	movs	r6, #0
 80026ea:	4d0a      	ldr	r5, [pc, #40]	@ (8002714 <__libc_init_array+0x40>)
 80026ec:	4c0a      	ldr	r4, [pc, #40]	@ (8002718 <__libc_init_array+0x44>)
 80026ee:	1b64      	subs	r4, r4, r5
 80026f0:	10a4      	asrs	r4, r4, #2
 80026f2:	42a6      	cmp	r6, r4
 80026f4:	d105      	bne.n	8002702 <__libc_init_array+0x2e>
 80026f6:	bd70      	pop	{r4, r5, r6, pc}
 80026f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80026fc:	4798      	blx	r3
 80026fe:	3601      	adds	r6, #1
 8002700:	e7ee      	b.n	80026e0 <__libc_init_array+0xc>
 8002702:	f855 3b04 	ldr.w	r3, [r5], #4
 8002706:	4798      	blx	r3
 8002708:	3601      	adds	r6, #1
 800270a:	e7f2      	b.n	80026f2 <__libc_init_array+0x1e>
 800270c:	08002758 	.word	0x08002758
 8002710:	08002758 	.word	0x08002758
 8002714:	08002758 	.word	0x08002758
 8002718:	0800275c 	.word	0x0800275c

0800271c <_init>:
 800271c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800271e:	bf00      	nop
 8002720:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002722:	bc08      	pop	{r3}
 8002724:	469e      	mov	lr, r3
 8002726:	4770      	bx	lr

08002728 <_fini>:
 8002728:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800272a:	bf00      	nop
 800272c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800272e:	bc08      	pop	{r3}
 8002730:	469e      	mov	lr, r3
 8002732:	4770      	bx	lr
